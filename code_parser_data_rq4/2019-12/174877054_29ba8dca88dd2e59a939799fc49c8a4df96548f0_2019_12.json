{
    "identifiers": [
        "fs",
        "ts",
        "u",
        "constName",
        "getComments",
        "goName",
        "loc",
        "strKind",
        "ts",
        "program",
        "ts",
        "u",
        "ts",
        "ts",
        "program",
        "ts",
        "ts",
        "ts",
        "ts",
        "node",
        "ts",
        "ts",
        "node",
        "ts",
        "node",
        "findNews",
        "node",
        "wh",
        "wh",
        "wh",
        "wh",
        "node",
        "node",
        "ts",
        "node",
        "loc",
        "node",
        "node",
        "node",
        "lookUp",
        "node",
        "node",
        "wh",
        "req",
        "s",
        "s",
        "s",
        "v",
        "s",
        "node",
        "node",
        "node",
        "nm",
        "nm",
        "ptypes",
        "rpc",
        "node",
        "node",
        "nm",
        "ptypes",
        "rpc",
        "node",
        "node",
        "nm",
        "ptypes",
        "rpc",
        "node",
        "node",
        "nm",
        "ptypes",
        "rpc",
        "n",
        "ts",
        "rpcTypes",
        "goName",
        "n",
        "underlying",
        "a",
        "add",
        "underlying",
        "b",
        "add",
        "n",
        "ts",
        "ts",
        "ts",
        "n",
        "ts",
        "p",
        "p",
        "ts",
        "tr",
        "tr",
        "req",
        "_",
        "k",
        "receives",
        "k",
        "_",
        "k",
        "receives",
        "k",
        "receives",
        "receives",
        "receives",
        "receives",
        "receives",
        "receives",
        "receives",
        "receives",
        "receives",
        "receives",
        "receives",
        "_",
        "k",
        "req",
        "k",
        "k",
        "k",
        "req",
        "k",
        "k",
        "k",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "n",
        "ts",
        "nm",
        "n",
        "goName",
        "nm",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "d",
        "na",
        "ts",
        "na",
        "d",
        "f",
        "d",
        "f",
        "d",
        "f",
        "d",
        "f",
        "d",
        "f",
        "d",
        "f",
        "d",
        "d",
        "node",
        "ts",
        "ts",
        "node",
        "ts",
        "node",
        "ts",
        "node",
        "ts",
        "node",
        "ts",
        "node",
        "ts",
        "node",
        "node",
        "ts",
        "ts",
        "node",
        "ts",
        "ts",
        "t",
        "ts",
        "ts",
        "t",
        "mems",
        "t",
        "ts",
        "t",
        "ts",
        "t",
        "ts",
        "t",
        "strKind",
        "t",
        "v",
        "f",
        "mems",
        "v",
        "v",
        "newData",
        "v",
        "goName",
        "v",
        "x",
        "ts",
        "ts",
        "mems",
        "v",
        "x",
        "v",
        "v",
        "x",
        "v",
        "x",
        "data",
        "x",
        "x",
        "dataMerge",
        "x",
        "data",
        "x",
        "data",
        "x",
        "x",
        "ts",
        "node",
        "ts",
        "newData",
        "v",
        "v",
        "x",
        "v",
        "ts",
        "v",
        "v",
        "n",
        "ts",
        "ts",
        "n",
        "x",
        "v",
        "x",
        "v",
        "data",
        "x",
        "x",
        "dataMerge",
        "x",
        "data",
        "x",
        "x",
        "data",
        "x",
        "x",
        "ts",
        "node",
        "ts",
        "ts",
        "v",
        "loc",
        "v",
        "strKind",
        "v",
        "ts",
        "v",
        "ts",
        "x",
        "ts",
        "ts",
        "x",
        "ts",
        "x",
        "ts",
        "x",
        "loc",
        "x",
        "strKind",
        "x",
        "hasNewExpression",
        "x",
        "s",
        "x",
        "b",
        "fx",
        "s",
        "newData",
        "node",
        "v",
        "m",
        "ts",
        "ts",
        "s",
        "data",
        "m",
        "m",
        "dataMerge",
        "m",
        "data",
        "m",
        "data",
        "m",
        "m",
        "ts",
        "node",
        "node",
        "newData",
        "node",
        "nm",
        "v",
        "node",
        "data",
        "nm",
        "v",
        "dataMerge",
        "v",
        "data",
        "nm",
        "data",
        "nm",
        "v",
        "ts",
        "node",
        "ts",
        "ts",
        "c",
        "ts",
        "ts",
        "c",
        "ts",
        "c",
        "ts",
        "c",
        "ts",
        "c",
        "ts",
        "c",
        "d",
        "c",
        "strKind",
        "c",
        "strKind",
        "c",
        "v",
        "c",
        "i",
        "wanted",
        "c",
        "d",
        "newData",
        "v",
        "v",
        "c",
        "ts",
        "ts",
        "d",
        "v",
        "c",
        "v",
        "c",
        "v",
        "c",
        "v",
        "data",
        "c",
        "loc",
        "c",
        "loc",
        "data",
        "c",
        "data",
        "c",
        "c",
        "strKind",
        "node",
        "loc",
        "node",
        "a",
        "b",
        "a",
        "b",
        "at",
        "bt",
        "a",
        "a",
        "a",
        "a",
        "b",
        "a",
        "a",
        "b",
        "strKind",
        "a",
        "strKind",
        "b",
        "a",
        "loc",
        "a",
        "loc",
        "b",
        "n",
        "ts",
        "n",
        "n",
        "ts",
        "ts",
        "n",
        "ans",
        "ans",
        "rpcTypes",
        "s",
        "data",
        "s",
        "s",
        "n",
        "ts",
        "f",
        "n",
        "ts",
        "n",
        "n",
        "ts",
        "underlying",
        "n",
        "f",
        "ts",
        "n",
        "f",
        "n",
        "n",
        "ts",
        "n",
        "ts",
        "n",
        "ts",
        "n",
        "ts",
        "n",
        "ts",
        "n",
        "ts",
        "n",
        "ts",
        "ts",
        "n",
        "f",
        "n",
        "ts",
        "n",
        "underlying",
        "n",
        "f",
        "ts",
        "n",
        "n",
        "ff",
        "ts",
        "n",
        "underlying",
        "n",
        "f",
        "ts",
        "n",
        "underlying",
        "n",
        "f",
        "ts",
        "n",
        "n",
        "ff",
        "ts",
        "n",
        "ts",
        "n",
        "n",
        "ff",
        "ts",
        "n",
        "underlying",
        "n",
        "f",
        "ts",
        "n",
        "underlying",
        "n",
        "f",
        "ts",
        "n",
        "ts",
        "n",
        "ts",
        "n",
        "ts",
        "n",
        "ts",
        "n",
        "strKind",
        "n",
        "n",
        "strKind",
        "n",
        "n",
        "s",
        "data",
        "s",
        "s",
        "seenTypes",
        "s",
        "data",
        "s",
        "rpcTypes",
        "extra",
        "extra",
        "extra",
        "extra",
        "old",
        "seenTypes",
        "n",
        "ts",
        "goName",
        "n",
        "seenTypes",
        "nm",
        "m",
        "nm",
        "m",
        "nm",
        "data",
        "nm",
        "n",
        "ts",
        "underlying",
        "n",
        "add",
        "x",
        "ts",
        "ts",
        "x",
        "h",
        "seenTypes",
        "d",
        "d",
        "f",
        "d",
        "seenTypes",
        "d",
        "d",
        "f",
        "d",
        "seenTypes",
        "d",
        "d",
        "underlying",
        "d",
        "add",
        "seenTypes",
        "d",
        "d",
        "f",
        "d",
        "seenTypes",
        "d",
        "d",
        "f",
        "d",
        "m",
        "d",
        "k",
        "seenTypes",
        "k",
        "d",
        "seenTypes",
        "old",
        "d",
        "nm",
        "d",
        "d",
        "goTypeAlias",
        "d",
        "nm",
        "d",
        "goModule",
        "d",
        "nm",
        "d",
        "goEnum",
        "d",
        "nm",
        "d",
        "d",
        "nm",
        "goInterface",
        "d",
        "nm",
        "nm",
        "d",
        "d",
        "d",
        "nm",
        "goName",
        "nm",
        "n",
        "ts",
        "ts",
        "n",
        "strKind",
        "n",
        "ans",
        "ans",
        "getComments",
        "n",
        "u",
        "n",
        "goType",
        "n",
        "n",
        "gt",
        "d",
        "gt",
        "gt",
        "starred",
        "d",
        "a",
        "n",
        "b",
        "gt",
        "gt",
        "ans",
        "ans",
        "goName",
        "n",
        "gt",
        "json",
        "d",
        "g",
        "n",
        "ts",
        "ts",
        "n",
        "nm",
        "strKind",
        "n",
        "ans",
        "ans",
        "goName",
        "n",
        "d",
        "n",
        "ts",
        "n",
        "f",
        "ans",
        "ans",
        "typesOut",
        "getComments",
        "d",
        "typesOut",
        "ans",
        "d",
        "nm",
        "d",
        "d",
        "nm",
        "n",
        "ts",
        "i",
        "ts",
        "n",
        "nm",
        "i",
        "strKind",
        "n",
        "getComments",
        "n",
        "n",
        "v",
        "nm",
        "i",
        "v",
        "isNumeric",
        "strKind",
        "v",
        "c",
        "constsOut",
        "c",
        "constName",
        "goName",
        "v",
        "nm",
        "v",
        "val",
        "val",
        "constsOut",
        "cname",
        "nm",
        "val",
        "d",
        "f",
        "typesOut",
        "getComments",
        "d",
        "typesOut",
        "nm",
        "isNumeric",
        "d",
        "nm",
        "v",
        "ts",
        "j",
        "v",
        "nm",
        "j",
        "v",
        "isNumeric",
        "strKind",
        "v",
        "getComments",
        "v",
        "constName",
        "goName",
        "v",
        "nm",
        "v",
        "val",
        "val",
        "constsOut",
        "c",
        "cname",
        "nm",
        "val",
        "d",
        "f",
        "typesOut",
        "getComments",
        "d",
        "typesOut",
        "nm",
        "isNumeric",
        "d",
        "nm",
        "d",
        "d",
        "nm",
        "nm",
        "d",
        "d",
        "d",
        "typesOut",
        "getComments",
        "d",
        "typesOut",
        "goName",
        "nm",
        "goType",
        "d",
        "nm",
        "n",
        "ts",
        "nm",
        "n",
        "ts",
        "n",
        "goName",
        "n",
        "ts",
        "n",
        "goUnionType",
        "n",
        "nm",
        "ts",
        "n",
        "goIntersectionType",
        "n",
        "nm",
        "strKind",
        "n",
        "strKind",
        "n",
        "strKind",
        "n",
        "strKind",
        "n",
        "strKind",
        "n",
        "strKind",
        "n",
        "strKind",
        "n",
        "ts",
        "n",
        "goType",
        "n",
        "nm",
        "ts",
        "n",
        "goType",
        "n",
        "nm",
        "ts",
        "n",
        "strKind",
        "n",
        "ts",
        "n",
        "goTypeLiteral",
        "n",
        "nm",
        "v",
        "ts",
        "n",
        "n",
        "n",
        "strKind",
        "n",
        "n",
        "n",
        "ts",
        "nm",
        "n",
        "n",
        "strKind",
        "n",
        "strKind",
        "n",
        "a",
        "b",
        "help",
        "b",
        "nm",
        "help",
        "goType",
        "n",
        "v",
        "v",
        "v",
        "v",
        "v",
        "help",
        "a",
        "nm",
        "help",
        "nm",
        "help",
        "goType",
        "n",
        "help",
        "b",
        "goType",
        "n",
        "help",
        "a",
        "a",
        "b",
        "help",
        "a",
        "help",
        "strKind",
        "n",
        "strKind",
        "n",
        "strKind",
        "n",
        "strKind",
        "n",
        "strKind",
        "n",
        "nm",
        "goType",
        "n",
        "nm",
        "goType",
        "n",
        "help",
        "aa",
        "bb",
        "cc",
        "goType",
        "n",
        "help",
        "aa",
        "bb",
        "aa",
        "cc",
        "goType",
        "n",
        "help",
        "aa",
        "bb",
        "cc",
        "goType",
        "n",
        "help",
        "aa",
        "bb",
        "aa",
        "cc",
        "aa",
        "help",
        "nm",
        "help",
        "n",
        "n",
        "v",
        "ts",
        "i",
        "goType",
        "v",
        "nm",
        "m",
        "m",
        "m",
        "m",
        "m",
        "res",
        "res",
        "i",
        "m",
        "ts",
        "v",
        "isLiteral",
        "literal",
        "strKind",
        "v",
        "isLiteral",
        "res",
        "literal",
        "n",
        "n",
        "ts",
        "nm",
        "nm",
        "expandIntersection",
        "n",
        "nm",
        "expandIntersection",
        "n",
        "n",
        "t",
        "ts",
        "inner",
        "inner",
        "goType",
        "t",
        "nm",
        "inner",
        "n",
        "ts",
        "n",
        "ts",
        "s",
        "strKind",
        "n",
        "s",
        "ts",
        "tp",
        "n",
        "ts",
        "tp",
        "bad",
        "tp",
        "data",
        "goName",
        "tp",
        "p",
        "d",
        "ts",
        "p",
        "bad",
        "p",
        "props",
        "p",
        "v",
        "p",
        "props",
        "p",
        "v",
        "props",
        "v",
        "v",
        "ans",
        "ans",
        "getComments",
        "a",
        "ans",
        "ans",
        "goName",
        "k",
        "goType",
        "a",
        "k",
        "u",
        "a",
        "ans",
        "ans",
        "goName",
        "k",
        "i",
        "v",
        "i",
        "v",
        "i",
        "ts",
        "a",
        "ans",
        "ans",
        "getComments",
        "a",
        "ans",
        "ans",
        "goName",
        "a",
        "ts",
        "a",
        "a",
        "bad",
        "a",
        "a",
        "ts",
        "b",
        "bad",
        "b",
        "ans",
        "ans",
        "getComments",
        "b",
        "ans",
        "ans",
        "goName",
        "b",
        "goType",
        "b",
        "u",
        "b",
        "bad",
        "a",
        "ans",
        "ans",
        "ans",
        "ans",
        "ans",
        "n",
        "ts",
        "nm",
        "nx",
        "ts",
        "ts",
        "nx",
        "u",
        "nx",
        "goType",
        "nx",
        "nx",
        "getComments",
        "nx",
        "res",
        "res",
        "v",
        "goName",
        "nx",
        "typ",
        "json",
        "ans",
        "v",
        "goName",
        "nx",
        "typ",
        "json",
        "ts",
        "nx",
        "nx",
        "res",
        "ans",
        "nx",
        "strKind",
        "nx",
        "n",
        "g",
        "nm",
        "res",
        "res",
        "res",
        "extraTypes",
        "goName",
        "nm",
        "ans",
        "goName",
        "nm",
        "seenTypes",
        "v",
        "v",
        "x",
        "toGo",
        "seenTypes",
        "x",
        "x",
        "u",
        "u",
        "typesOut",
        "s",
        "u",
        "s",
        "s",
        "u",
        "u",
        "constsOut",
        "s",
        "u",
        "s",
        "u",
        "u",
        "u",
        "extraTypes",
        "v",
        "k",
        "u",
        "k",
        "v",
        "s",
        "u",
        "s",
        "u",
        "u",
        "side",
        "m",
        "m",
        "m",
        "goType",
        "n",
        "m",
        "methodName",
        "m",
        "side",
        "sig",
        "nm",
        "a",
        "m",
        "a",
        "a",
        "case1",
        "a",
        "side",
        "nm",
        "case1",
        "side",
        "nm",
        "side",
        "caseHdr",
        "case1",
        "a",
        "a",
        "side",
        "side",
        "sig",
        "nm",
        "a",
        "m",
        "arg3",
        "side",
        "m",
        "req",
        "m",
        "methodName",
        "m",
        "goType",
        "n",
        "m",
        "goType",
        "n",
        "m",
        "n",
        "b",
        "a",
        "a",
        "u",
        "side",
        "a",
        "b",
        "nm",
        "m",
        "loc",
        "n",
        "side",
        "sig",
        "nm",
        "a",
        "b",
        "m",
        "a",
        "extraTypes",
        "nm",
        "a",
        "nm",
        "case1",
        "a",
        "a",
        "side",
        "nm",
        "arg2",
        "b",
        "b",
        "case2",
        "side",
        "nm",
        "arg2",
        "case2",
        "side",
        "nm",
        "arg2",
        "side",
        "caseHdr",
        "case1",
        "case2",
        "side",
        "sig",
        "nm",
        "a",
        "b",
        "m",
        "b",
        "b",
        "a",
        "indirect",
        "b",
        "theRet",
        "callBody",
        "b",
        "m",
        "p2",
        "theRet",
        "a",
        "callBody",
        "m",
        "side",
        "callHdr",
        "callBody",
        "m",
        "m",
        "m",
        "i",
        "s",
        "s",
        "seenNames",
        "x",
        "x",
        "m",
        "m",
        "i",
        "seenNames",
        "x",
        "x",
        "s",
        "s",
        "s",
        "skip",
        "x",
        "s",
        "x",
        "skip",
        "skip",
        "skip",
        "skip",
        "skip",
        "nm",
        "a",
        "b",
        "names",
        "a",
        "a",
        "extraTypes",
        "nm",
        "v",
        "v",
        "a",
        "nm",
        "a",
        "a",
        "a",
        "names",
        "a",
        "a",
        "a",
        "a",
        "b",
        "b",
        "indirect",
        "b",
        "b",
        "b",
        "ret",
        "b",
        "nm",
        "names",
        "start",
        "start",
        "start",
        "a",
        "ret",
        "side",
        "side",
        "side",
        "side",
        "side",
        "fs",
        "side",
        "s",
        "fs",
        "side",
        "s",
        "fs",
        "side",
        "f",
        "u",
        "f",
        "side",
        "side",
        "f",
        "a",
        "side",
        "v",
        "f",
        "v",
        "f",
        "f",
        "side",
        "side",
        "v",
        "f",
        "v",
        "f",
        "f",
        "side",
        "side",
        "v",
        "f",
        "v",
        "u",
        "u",
        "u",
        "u",
        "u",
        "parse",
        "u",
        "program",
        "sourceFile",
        "program",
        "sourceFile",
        "ts",
        "sourceFile",
        "findNews",
        "setReceives",
        "sourceFile",
        "program",
        "sourceFile",
        "ts",
        "sourceFile",
        "genTypes",
        "checkOnce",
        "v",
        "k",
        "receives",
        "k",
        "goNot",
        "client",
        "k",
        "goNot",
        "server",
        "k",
        "req",
        "v",
        "k",
        "receives",
        "k",
        "goReq",
        "client",
        "k",
        "goReq",
        "server",
        "k",
        "moreTypes",
        "outputTypes",
        "seenTypes",
        "extraTypes",
        "output",
        "client",
        "output",
        "server",
        "main"
    ],
    "literals": [
        "'fs'",
        "'typescript'",
        "'./util'",
        "'./util'",
        "string",
        "string",
        "string",
        "string",
        "'server'",
        "'client'",
        "string",
        "'RequestType'",
        "'RequestType0'",
        "'NotificationType'",
        "'NotificationType0'",
        "expected n.arguments ${loc(node)}",
        "'R'",
        "'RequestType'",
        "'NotificationType'",
        "'RequestType0'",
        "'NotificationType0'",
        "FATAL: ${nm} not an expected RPC type",
        "not variable decl",
        "not TypeReference",
        "'server'",
        "'server'",
        "'window/showMessage'",
        "'client'",
        "'window/showMessageRequest'",
        "'client'",
        "'window/logMessage'",
        "'client'",
        "'telemetry/event'",
        "'client'",
        "'client/registerCapability'",
        "'client'",
        "'client/unregisterCapability'",
        "'client'",
        "'workspace/workspaceFolders'",
        "'client'",
        "'workspace/configuration'",
        "'client'",
        "'workspace/applyEdit'",
        "'client'",
        "'textDocument/publishDiagnostics'",
        "'client'",
        "missing ${k}}",
        "dup ${k}",
        "string",
        "string",
        "string",
        "D(${d.name}) g;${f(d.generics)} a:${f(d.as)} p:${f(d.properties)} s:${\n      f(d.statements)} e:${f(d.enums)} m:${f(d.members)} ${\n      d.alias != undefined}",
        "string",
        "string",
        "string",
        "string",
        "unexpected ${strKind(t)}",
        "'InitializedParams'",
        "'TraceValues'",
        "${loc(v)} not ModuleBlock, but ${strKind(v.body)}",
        "${loc(x)} ${strKind(x)}",
        "string",
        "''",
        "''",
        "''",
        "''",
        "Class decl ${strKind(c)}",
        "Class dup ${loc(c.me)} and ${loc(data.get(c.name).me)}",
        "unexpected ${strKind(node)} ${loc(node)}",
        "'InitializeError'",
        "'MessageType'",
        "'CompletionItemTag'",
        "'CodeActionKind'",
        "'CancellationToken'",
        "${strKind(a.me)} ${strKind(b.me)} ${a.name} ${loc(a.me)} ${loc(b.me)}",
        "Fix dataMerge",
        "checkOnce, ${s}?",
        "EnumMember ${strKind(n.initializer)} ${n.name.getText()}",
        "saw ${strKind(n)} in underlying. ${n.getText()}",
        "string",
        "moreTypes needs ${s}",
        "'InitializeError'",
        "'WatchKind'",
        "'FoldingRangeKind'",
        "string",
        "string",
        "string",
        "string",
        "'InitializedParams'",
        "more cases in toGo ${nm} ${d.as.length} ${d.generics.length}",
        "string",
        "string",
        "'TextDocumentContentChangeEvent'",
        "'range'",
        "'CodeAction'",
        "'command'",
        "'DidSaveTextDocumentParams'",
        "'text'",
        "'CompletionItem'",
        "'command'",
        "'CompletionItem'",
        "'textEdit'",
        "string",
        "type ${goName(nm)} struct {\\n",
        "expected PropertySignature got ${strKind(n)}",
        "'*'",
        "'*'",
        "${goName(n.name.getText())} ${gt}",
        "'\\n'",
        "Interface ${nm} heritage ${strKind(n.expression)}",
        "'\\n'",
        "}\\n",
        "string",
        "goModule: unexpected for ${nm}",
        "${nm} ${i} expected VariableStatement,\n      got ${strKind(n)}",
        "no initializer ${nm} ${i} ${v.name.getText()}",
        "'NumericLiteral'",
        "''",
        "'\\''",
        "'\"'",
        "${cname} ${nm} = ${val}",
        "type ${nm} ${isNumeric ? 'float64' : 'string'}",
        "'float64'",
        "'string'",
        "string",
        "goEnum no initializer ${nm} ${j} ${v.name.getText()}",
        "'NumericLiteral'",
        "'\\''",
        "'\"'",
        "${c}${cname} ${nm} = ${val}",
        "type ${nm} ${isNumeric ? 'float64' : 'string'}",
        "'float64'",
        "'string'",
        "string",
        "'ServerCapabilities'",
        "${nm} has extra fields(${d.as.length},${\n          d.generics.length}) ${d.me.getText()}",
        "type ${goName(nm)} = ${goType(d.alias, nm)}\\n",
        "string",
        "string",
        "'T'",
        "'interface{}'",
        "'StringKeyword'",
        "'string'",
        "'NumberKeyword'",
        "'float64'",
        "'BooleanKeyword'",
        "'bool'",
        "'AnyKeyword'",
        "'interface{}'",
        "'NullKeyword'",
        "'nil'",
        "'VoidKeyword'",
        "'void'",
        "'ObjectKeyword'",
        "'interface{}'",
        "[]${goType(n.elementType, nm)}",
        "'StringLiteral'",
        "'string'",
        "'float64'",
        "'[number, number]'",
        "'[]float64'",
        "goType undexpected Tuple ${n.getText()}",
        "${strKind(n)} goType unexpected ${n.getText()}",
        "string",
        "string",
        "/*${n.getText()}*/",
        "'NumberKeyword'",
        "'StringKeyword'",
        "interface{} ${help}",
        "'NullKeyword'",
        "'textDocument/codeAction'",
        "[]CodeAction ${help}",
        "'a'",
        "[]interface",
        "${v} ${help}",
        "'BooleanKeyword'",
        "'codeActionProvider'",
        "interface{} ${help}",
        "'renameProvider'",
        "interface{} ${help}",
        "${goType(n.types[0], 'b')} ${help}",
        "'b'",
        "'ArrayType'",
        "${goType(n.types[1], 'c')} ${help}",
        "'c'",
        "'TypeReference'",
        "interface{} ${help}",
        "'StringKeyword'",
        "string ${help}",
        "612 ${strKind(n.types[0])} ${strKind(n.types[1])}",
        "'DocumentFilter'",
        "${goType(n.types[0], 'g')}",
        "'g'",
        "'textDocument/documentSymbol'",
        "${goType(n.types[1], 'h')} ${help}",
        "'h'",
        "'TypeReference'",
        "'ArrayType'",
        "'NullKeyword'",
        "${goType(n.types[0], 'd')} ${help}",
        "'d'",
        "'TypeReference'",
        "'ArrayType'",
        "${goType(n.types[0], 'e')} ${help}",
        "'e'",
        "'ArrayType'",
        "'TypeReference'",
        "'NullKeyword'",
        "${goType(n.types[1], 'f')} ${help}",
        "'f'",
        "'LiteralType'",
        "string ${help}",
        "'documentChanges'",
        "TextDocumentEdit ${help}",
        "goUnionType ${n.types.length}",
        "'string'",
        "interface{ } /*",
        "'interface'",
        "' '",
        "'\\n'",
        "'; '",
        "${i == 0 ? '' : ' | '}",
        "''",
        "' | '",
        "'StringLiteral'",
        "'string'",
        "'number'",
        "'*/'",
        "${literal} /* ${n.getText()} */",
        "string",
        "string",
        "'ClientCapabilities'",
        "'ServerCapabilities'",
        "''",
        "'\\n'",
        "struct{ \\n${inner}}",
        "string",
        "string",
        "expandIntersection ${strKind(n)} ${s}",
        "string",
        "'A'",
        "'B'",
        "'struct {\\n'",
        "${goName(k)} ${goType(a.type, k)} ${u.JSON(a)}\\n",
        "${goName(k)} struct {\\n",
        "'\\n'",
        "'C'",
        "'D'",
        "' '",
        "'a'",
        "'\\n'",
        "'E'",
        "'}\\n'",
        "'}\\n'",
        "string",
        "string",
        "string",
        "'struct{\\n'",
        "''",
        "${v} ${goName(nx.name.getText())} ${typ}",
        "'\\n'",
        "${v}${goName(nx.name.getText())} ${typ} ${json}\\n",
        "'[uri: string]: TextEdit[];'",
        "'map[string][]TextEdit'",
        "map[string][]TextEdit",
        "handle ${nx.getText()}",
        "TypeLiteral had ${strKind(nx)}",
        "'workspace'",
        "'struct'",
        "'}'",
        "'Gn'",
        "'Gn'",
        "'/**'",
        "'\\n'",
        "'\\nconst (\\n'",
        "'\\n'",
        "')\\n'",
        "'// Types created to name formal parameters and embedded structs\\n'",
        "type ${k} struct {\\n",
        "'\\n'",
        "'}\\n'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'client'",
        "'Client'",
        "'server'",
        "'Server'",
        "if r.Params != nil {\n  r.Reply(ctx, nil, jsonrpc2.NewErrorf(jsonrpc2.CodeInvalidParams, \"Expected no params\"))\n  return true\n}",
        "string",
        "'$/cancelRequest'",
        "''",
        "case \"${m}\":  // notif",
        "''",
        "'void'",
        "var params ${a}\n    if err := json.Unmarshal(*r.Params, &params); err != nil {\n      sendParseError(ctx, r, err)\n      return true\n    }\n    if err := h.${side.name}.${nm}(ctx, &params); err != nil {\n      log.Error(ctx, \"\", err)\n    }\n    return true",
        "if err := h.${side.name}.${nm}(ctx); err != nil {\n      log.Error(ctx, \"\", err)\n    }\n    return true",
        "${caseHdr}\\n${case1}",
        "''",
        "'void'",
        "'nil'",
        "'params'",
        "func (s *${side.name}Dispatcher) ${sig(nm, a, '', true)} {\n    return s.Conn.Notify(ctx, \"${m}\", ${arg3})\n  }",
        "''",
        "string",
        "'Type0'",
        "''",
        "${side.name} req ${a != ''},${b != ''} ${nm} ${m} ${loc(n)}",
        "''",
        "''",
        "case \"${m}\": // req",
        "''",
        "'Param'",
        "'Param'",
        "var params ${a}\n    if err := json.Unmarshal(*r.Params, &params); err != nil {\n      sendParseError(ctx, r, err)\n      return true\n    }",
        "''",
        "''",
        "', &params'",
        "if err := h.${side.name}.${nm}(ctx${arg2}); err != nil {\n    log.Error(ctx, \"\", err)\n  }",
        "''",
        "'void'",
        "resp, err := h.${side.name}.${nm}(ctx${arg2})\n    if err := r.Reply(ctx, resp, err); err != nil {\n      log.Error(ctx, \"\", err)\n    }\n    return true",
        "err := h.${side.name}.${nm}(ctx${arg2})\n    if err := r.Reply(ctx, nil, err); err != nil {\n      log.Error(ctx, \"\", err)\n    }\n    return true",
        "${caseHdr}\\n${case1}\\n${case2}",
        "func (s *${side.name}Dispatcher) ${sig(nm, a, b, true)} {",
        "return s.Conn.Call(ctx, \"${m}\", nil, nil)\\n}",
        "''",
        "'void'",
        "''",
        "'nil'",
        "'params'",
        "result",
        "'&result'",
        "var result ${b}\n\t\t\tif err := s.Conn.Call(ctx, \"${m}\", ${\n        p2}, &result); err != nil {\n\t\t\t\treturn nil, err\n      }\n      return ${theRet}, nil\n    }",
        "''",
        "return s.Conn.Call(ctx, \"${m}\", params, nil) // Call, not Notify\n  }",
        "${callHdr}\\n${callBody}\\n",
        "string",
        "string",
        "string",
        "'/'",
        "string",
        "''",
        "'void'",
        "string",
        "'[]'",
        "'interface'",
        "'Declaration'",
        "'Definition'",
        "'DocumentSelector'",
        "string",
        "string",
        "string",
        "string",
        "'struct'",
        "'\\n'",
        "Param${nm}",
        "'Param'",
        "'void'",
        "''",
        "''",
        "', params *'",
        "', *'",
        "'error'",
        "''",
        "'void'",
        "'*'",
        "(${b}, error)",
        "${nm}(",
        "'ctx '",
        "${start}context.Context${a}) ${ret}",
        "ts${side.name}.go",
        "'w'",
        "string",
        "'\\n'",
        "import (\n          \"context\"\n          \"encoding/json\"\n\n          \"golang.org/x/tools/internal/jsonrpc2\"\n          \"golang.org/x/tools/internal/telemetry/log\"\n          \"golang.org/x/tools/internal/xcontext\"\n        )",
        "type ${a} interface {",
        "'}\\n'",
        "func (h ${\n      side.name}Handler) Deliver(ctx context.Context, r *jsonrpc2.Request, delivered bool) bool {\n            if delivered {\n              return false\n            }\n            if ctx.Err() != nil {\n              ctx := xcontext.Detach(ctx)\n              r.Reply(ctx, nil, jsonrpc2.NewErrorf(RequestCancelledError, \"\"))\n              return true\n            }\n            switch r.Method {",
        "default:\n          return false\n        }\n      }",
        "type ${side.name}Dispatcher struct {\n          *jsonrpc2.Conn\n        }",
        "git hash mismatch, wanted\\n${u.gitHash} but source is at\\n${u.git()}",
        "'client'",
        "'client'",
        "seen ${seenTypes.size + extraTypes.size}"
    ],
    "variables": [
        "program",
        "req",
        "ptypes",
        "receives",
        "rpcTypes",
        "wh",
        "s",
        "v",
        "nm",
        "rpc",
        "a",
        "b",
        "add",
        "p",
        "tr",
        "f",
        "data",
        "seenTypes",
        "extraTypes",
        "v",
        "node",
        "mems",
        "f",
        "x",
        "v",
        "node",
        "x",
        "v",
        "node",
        "b",
        "s",
        "fx",
        "m",
        "nm",
        "v",
        "v",
        "node",
        "d",
        "wanted",
        "c",
        "at",
        "bt",
        "ans",
        "ff",
        "extra",
        "old",
        "m",
        "add",
        "nm",
        "h",
        "f",
        "typesOut",
        "constsOut",
        "starred",
        "ans",
        "g",
        "json",
        "gt",
        "a",
        "b",
        "f",
        "isNumeric",
        "f",
        "c",
        "v",
        "cname",
        "val",
        "isNumeric",
        "f",
        "c",
        "cname",
        "val",
        "v",
        "help",
        "a",
        "b",
        "v",
        "aa",
        "bb",
        "cc",
        "isLiteral",
        "literal",
        "res",
        "m",
        "inner",
        "bad",
        "props",
        "d",
        "v",
        "ans",
        "k",
        "v",
        "a",
        "i",
        "a",
        "b",
        "ans",
        "res",
        "g",
        "json",
        "typ",
        "v",
        "v",
        "client",
        "server",
        "notNil",
        "n",
        "a",
        "nm",
        "caseHdr",
        "case1",
        "notNil",
        "arg3",
        "n",
        "nm",
        "a",
        "b",
        "caseHdr",
        "case1",
        "notNil",
        "arg2",
        "case2",
        "callHdr",
        "callBody",
        "p2",
        "theRet",
        "seenNames",
        "i",
        "s",
        "x",
        "skip",
        "v",
        "ret",
        "start",
        "f",
        "a"
    ],
    "comments": [
        "read files from vscode-languageserver-node, and generate Go rpc stubs",
        "and data definitions. (and maybe someday unmarshaling code)",
        "The output is 3 files, tsprotocol.go contains the type definitions",
        "while tsclient.go and tsserver.go contain the LSP API and stub. An LSP server",
        "uses both APIs. To read the code, start in this file's main() function.",
        "The code is rich in heuristics and special cases, some of which are to avoid",
        "extensive changes to gopls, and some of which are due to the mismatch between",
        "typescript and Go types. In particular, there is no Go equivalent to union",
        "types, so each case ought to be considered separately. The Go equivalent of A",
        "& B could frequently be struct{A;B;}, or it could be the equivalent type",
        "listing all the members of A and B. Typically the code uses the former, but",
        "especially if A and B have elements with the same name, it does a version of",
        "the latter. ClientCapabilities has to be expanded, and ServerCapabilities is",
        "expanded to make the generated code easier to read.",
        "for us typescript ignorati, having an import makes this file a module",
        "this won't complain if some fnames don't exist",
        "finish type checking and assignment",
        "----- collecting information for RPCs",
        "requests",
        "notifications",
        "req, resp types",
        "who receives it",
        "types seen in the rpcs",
        "walk the AST finding Requests and Notifications",
        "We only need the bare ones and the ones ending with 0",
        "RequestType<useful>=new RequestTYpe('foo')",
        "new RequestType<useful>",
        "Request or Notification",
        "remove quoting (e.g., saw 'exit')",
        "Summary:",
        "node.expression == 'RequestType', typeArg[0] is request type,",
        "typeArg[1] is response type, and args[0] is the rpc name",
        "node.espression == 'RequestType0', typeArgs[0] is the response type,",
        "the request type is null, and args[0] is the rpc name",
        "node.expression == 'NotificationType', typeArgs[0] the request, args[0] the",
        "rpc NotificationType0 is the same (but it's always void)",
        "that looks the same, but it's a way of getting VoidKeyword",
        "both VoidKeyword",
        "remember the implied types",
        "handle missing typeArguments",
        "parent should be VariableDeclaration. its children should be",
        "Identifier('type') ???",
        "TypeReference: [Identifier('RequestType1), ]",
        "NewExpression (us)",
        "mark them all as server, then adjust the client ones.",
        "it would be nice to have some independent check on this",
        "(this logic fails if the server ever sends $/canceRequest",
        "or $/progress)",
        "a small check",
        "root node for this type",
        "Go name",
        "inheritance",
        "Interface",
        "ts.PropertySignature",
        "type alias",
        "module",
        "class",
        "for debugging, produce a skeleton description",
        "parsed data types",
        "type names we've seen",
        "to avoid struct params",
        "look at top level data definitions",
        "Ignore top-level items that can't produce output",
        "need to check the members, many of which are disruptive",
        "probably safe to ignore these",
        "[key: string]: boolean | number | string | undefined;",
        "and InitializeResult: [custom: string]: any;]",
        "really? (Don't seem to need any of these)",
        "Found one we want",
        "Unneeded",
        "Item interface Item<K, V>...",
        "modifying one we've seen",
        "if type is a union of constants, we (mostly) don't want it",
        "(at the top level)",
        "Unfortunately this is false for TraceValues",
        "we don't want most of these",
        "look harder at the PropertyDeclarations.",
        "don't need it, maybe",
        "Typescript can accumulate",
        "maybe they are textually identical? (it happens)",
        "want the Module",
        "want the Interface",
        "is a node an ancestor of a NewExpression",
        "Data for all the rpc types?",
        "helper function to find underlying types",
        "nothing to do",
        "we only see these in moreTypes, but they are handled elsewhere",
        "find all the types implied by seenTypes.",
        "Simplest way to the transitive closure is to stabilize the size of seenTypes",
        "but it is slow",
        "all the types needed by the rpcs",
        "needed in enums.go (or elsewhere)",
        "For generic parameters, this might set it to undefined",
        "expect all the heritage clauses have single Identifiers",
        "find the types in the properties",
        "and in the alias and in the statements and in the enums",
        "generate Go types",
        "this is probably a generic T",
        "these fields need a *",
        "generate Go code for an interface",
        "generate the code for each member",
        "SelectionRange is a recursive type",
        "avoid recursive types",
        "there are several cases where a * is needed",
        "heritage clauses become embedded types",
        "check they are all Identifiers",
        "generate Go code for a module (const declarations)",
        "Generates type definitions, and named constants",
        "all the statements should be export const <id>: value",
        "or value = value",
        "They are VariableStatements with x.declarationList having a single",
        "VariableDeclaration",
        "only one",
        "no point if there are no comments",
        "There are duplicates.",
        "useless work for numbers",
        "Or should they be type aliases?",
        "generate Go code for an enum. Both types and named constants",
        "same as goModule",
        "replace quotes. useless work for numbers",
        "Or should they be type aliases?",
        "generate code for a type alias",
        "d.alias doesn't seem to have comments",
        "return a go type and maybe an assocated javascript tag",
        "should check it's generic",
        "avoid <T>",
        "these are anonymous structs",
        "The choice is uniform interface{}, or some heuristically assigned choice,",
        "or some better sytematic idea I haven't thought of. Using interface{}",
        "is, in practice, impossibly complex in the existing code.",
        "show the original as a comment",
        "handle all the special cases",
        "ID",
        "(Command | CodeAction)[] | null",
        "believe the weaker type is wanted",
        "too gross",
        "not really a union. the first is enough, up to a missing",
        "omitempty but avoid repetitious comments",
        "should check that this is Hover.Contents",
        "check this is nm == 'textDocument/completion'",
        "Result will be interface{} with a comment",
        "might get an interface inside:",
        "(Command | CodeAction)[] | null",
        "avoid nested comments",
        "sloppy: struct{;",
        "trace?: 'off' | 'messages' | 'verbose' should get string",
        "some of the intersection types A&B are ok as struct{A;B;} and some",
        "could be expanded, and ClientCapabilites has to be expanded,",
        "at least for workspace. It's possible to check algorithmically,",
        "but much simpler just to check explicity.",
        "for each of the itersected types, extract its components (each will",
        "have a Data with properties) extract the properties, and keep track",
        "of them by name. The names that occur once can be output. The names",
        "that occur more than once need to be combined.",
        "in case we generate a new extra type",
        "add the json, as in goInterface(). Strange inside union types.",
        "this is never used",
        "for some the generated type is wanted, for others it's not needed",
        "map[] is special",
        "print all the types and constants and extra types",
        "generate go types alphabeticaly",
        "it's more convenient not to have to think about trailing newlines",
        "when generating types, but doc comments can't have an extra \\n",
        "client and server ------------------",
        "client or server",
        "Client or Server",
        "commonly used output",
        "Go code for notifications. Side is client or server, m is the request",
        "method",
        "handled specially in protocol.go",
        "Go code for requests.",
        "workspace/workspaceFolders and shutdown",
        "response is nil",
        "make sure method names are unique",
        "used in sig and in goReq",
        "Go signatures for methods.",
        "avoid * when it is senseless",
        "write the request/notification code",
        "make sure the output file exists",
        "----- remember it's a scripting language",
        "visit every sourceFile in the program, collecting the New",
        "nodes that encapsulate the protocol",
        "separate RPCs into client and server",
        "visit every sourceFile collecting top-level type definitions",
        "check that each thing occurs exactly once, and put pointers into",
        "seenTypes",
        "for each of Client and Server there are 3 parts to the output:",
        "1. type X interface {methods}",
        "2. func (h *serverHandler) Deliver(...) { switch r.method }",
        "3. func (x *xDispatcher) Method(ctx, parm)",
        "notifications",
        "requests",
        "find all the types implied by seenTypes and rpcs to try to avoid",
        "generating types that aren't used",
        "and print the Go code"
    ],
    "docstrings": [],
    "functions": [
        "parse",
        "findNews",
        "lookUp",
        "setReceives",
        "newData",
        "strData",
        "genTypes",
        "dataMerge",
        "hasNewExpression",
        "checkOnce",
        "underlying",
        "moreTypes",
        "toGo",
        "goInterface",
        "goModule",
        "goEnum",
        "goTypeAlias",
        "goType",
        "goUnionType",
        "goIntersectionType",
        "expandIntersection",
        "goTypeLiteral",
        "outputTypes",
        "goNot",
        "goReq",
        "methodName",
        "indirect",
        "sig",
        "output",
        "main"
    ],
    "classes": []
}