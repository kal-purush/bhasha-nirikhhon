{
    "identifiers": [
        "print_function",
        "boto3",
        "session",
        "Session",
        "json",
        "urllib",
        "boto3",
        "zipfile",
        "tempfile",
        "botocore",
        "traceback",
        "time",
        "boto3",
        "client",
        "boto3",
        "client",
        "job",
        "message",
        "message",
        "code_pipeline",
        "put_job_success_result",
        "jobId",
        "job",
        "job",
        "message",
        "message",
        "code_pipeline",
        "put_job_failure_result",
        "jobId",
        "job",
        "failureDetails",
        "message",
        "job_data",
        "job_data",
        "json",
        "loads",
        "user_parameters",
        "e",
        "decoded_parameters",
        "decoded_parameters",
        "decoded_parameters",
        "decoded_parameters",
        "environmentName",
        "eb",
        "describe_environment_health",
        "EnvironmentName",
        "environmentName",
        "AttributeNames",
        "response",
        "version",
        "application",
        "eb",
        "describe_application_versions",
        "ApplicationName",
        "application",
        "VersionLabels",
        "version",
        "response",
        "response",
        "artifact",
        "application",
        "artifact",
        "artifact",
        "artifact",
        "key",
        "version",
        "replace",
        "version",
        "eb",
        "create_application_version",
        "ApplicationName",
        "application",
        "VersionLabel",
        "version",
        "SourceBundle",
        "bucket",
        "key",
        "Process",
        "describe_app_version",
        "version",
        "application",
        "status",
        "upper",
        "time",
        "sleep",
        "version",
        "blueEnvironment",
        "versionLabel",
        "application",
        "eb",
        "update_environment",
        "ApplicationName",
        "application",
        "EnvironmentName",
        "blueEnvironment",
        "VersionLabel",
        "versionLabel",
        "response",
        "describe_health",
        "blueEnvironment",
        "status",
        "upper",
        "time",
        "sleep",
        "blueEnvironment",
        "greenEnvironment",
        "eb",
        "swap_environment_cnames",
        "SourceEnvironmentName",
        "blueEnvironment",
        "DestinationEnvironmentName",
        "greenEnvironment",
        "response",
        "context",
        "get_user_params",
        "job_data",
        "job_data",
        "artifacts",
        "describe_health",
        "blueEnvironment",
        "envStatus",
        "create_app_version",
        "artifacts",
        "application",
        "update_blue_env",
        "blueEnvironment",
        "versionLabel",
        "application",
        "swap_blue_green",
        "blueEnvironment",
        "greenEnvironment",
        "put_job_success",
        "job_id",
        "put_job_failure",
        "job_id",
        "e",
        "e",
        "traceback",
        "print_exc",
        "put_job_failure",
        "job_id",
        "e"
    ],
    "literals": [
        "'Loading function'",
        "'elasticbeanstalk'",
        "'codepipeline'",
        "'Putting job success'",
        "'Putting job failure'",
        "'message'",
        "'type'",
        "'JobFailed'",
        "'actionConfiguration'",
        "'configuration'",
        "'UserParameters'",
        "'UserParameters could not be decoded as JSON'",
        "'blueEnvironment'",
        "'Your UserParameters JSON must include the Blue environment name'",
        "'greenEnvironment'",
        "'Your UserParameters JSON must include the Green environment name'",
        "'application'",
        "'Your UserParameters JSON must include the application name'",
        "'Status'",
        "'Status'",
        "\"App Version Status: \"",
        "'ApplicationVersions'",
        "'Status'",
        "'ApplicationVersions'",
        "'Status'",
        "'location'",
        "'s3Location'",
        "'bucketName'",
        "'location'",
        "'s3Location'",
        "'objectKey'",
        "'revision'",
        "\"test/MyApp/\"",
        "\"\"",
        "\"version: \"",
        "'S3Bucket'",
        "'S3Key'",
        "\"PROCESSED\"",
        "\"App Version Created.\"",
        "\"Blue Deploy result: \"",
        "\"READY\"",
        "\"Deployment to Blue complete.\"",
        "\"Blue Green Swap result: \"",
        "'CodePipeline.job'",
        "'id'",
        "'CodePipeline.job'",
        "'data'",
        "'inputArtifacts'",
        "\"artifacts are: \"",
        "'blueEnvironment'",
        "'greenEnvironment'",
        "'application'",
        "'Ready'",
        "'Done'",
        "'Environment is not in Ready state'",
        "'Function failed due to exception.'",
        "'Function exception: '",
        "'Function complete.'",
        "\"Complete.\""
    ],
    "variables": [
        "eb",
        "code_pipeline",
        "user_parameters",
        "decoded_parameters",
        "response",
        "response",
        "bucket",
        "key",
        "version",
        "version",
        "response",
        "status",
        "response",
        "status",
        "response",
        "job_id",
        "job_data",
        "artifacts",
        "blueEnvironment",
        "greenEnvironment",
        "application",
        "envStatus",
        "versionLabel"
    ],
    "comments": [
        "Get the user parameters which contain the stack, artifact and file settings",
        "We're expecting the user parameters to be encoded as JSON",
        "so we can pass multiple values. If the JSON can't be decoded",
        "then fail the job with a helpful message.",
        "Validate that the stack is provided, otherwise fail the job",
        "with a helpful message.",
        "Validate that the stack is provided, otherwise fail the job",
        "with a helpful message.",
        "Validate that the artifact name is provided, otherwise fail the job",
        "with a helpful message.",
        "Extract the Job ID",
        "Extract the Job Data",
        "Extract the params",
        "Get the list of artifacts passed to the function",
        "If any other exceptions which we didn't expect are raised",
        "then fail the job and log the exception message."
    ],
    "docstrings": [
        "\"\"\"Notify CodePipeline of a successful job\n    Args:\n        job: The CodePipeline job ID\n        message: A message to be logged relating to the job status\n    Raises:\n        Exception: Any exception thrown by .put_job_success_result()\n    \"\"\"",
        "\"\"\"Notify CodePipeline of a failed job\n    Args:\n        job: The CodePipeline job ID\n        message: A message to be logged relating to the job status\n    Raises:\n        Exception: Any exception thrown by .put_job_failure_result()\n    \"\"\"",
        "\"\"\"Decodes the JSON user parameters and validates the required properties.\n    Args:\n        job_data: The job data structure containing the UserParameters string which should be a valid JSON structure\n    Returns:\n        The JSON parameters decoded as a dictionary.\n    Raises:\n        Exception: The JSON can't be decoded or a property is missing.\n    \"\"\"",
        "\"\"\"\n    Creates the application Version to be deployed\n    \"\"\"",
        "\"\"\"\n    Deploys to Blue\n    \"\"\"",
        "\"\"\"\n    Swaps the CNAMEs for Blue and Green envs\n    \"\"\"",
        "\"\"\"The Lambda function handler\n    If a continuing job then checks the CloudFormation stack status\n    and updates the job accordingly.\n    If a new job then kick of an update or creation of the target\n    CloudFormation stack.\n    Args:\n        event: The event passed by Lambda\n        context: The context passed by Lambda\n    \"\"\""
    ],
    "functions": [
        "put_job_success",
        "put_job_failure",
        "get_user_params",
        "describe_health",
        "describe_app_version",
        "create_app_version",
        "update_blue_env",
        "swap_blue_green",
        "lambda_handler"
    ],
    "classes": []
}