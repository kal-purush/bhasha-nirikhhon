{
    "identifiers": [
        "com",
        "ibm",
        "ws",
        "concurrent",
        "persistent",
        "fat",
        "failover1serv",
        "org",
        "junit",
        "Assert",
        "fail",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "org",
        "junit",
        "After",
        "org",
        "junit",
        "BeforeClass",
        "org",
        "junit",
        "Test",
        "org",
        "junit",
        "runner",
        "RunWith",
        "com",
        "ibm",
        "websphere",
        "simplicity",
        "ShrinkHelper",
        "com",
        "ibm",
        "websphere",
        "simplicity",
        "config",
        "PersistentExecutor",
        "com",
        "ibm",
        "websphere",
        "simplicity",
        "config",
        "ServerConfiguration",
        "componenttest",
        "topology",
        "impl",
        "LibertyServer",
        "componenttest",
        "topology",
        "utils",
        "FATServletClient",
        "componenttest",
        "annotation",
        "Server",
        "componenttest",
        "annotation",
        "TestServlet",
        "componenttest",
        "custom",
        "junit",
        "runner",
        "FATRunner",
        "failover1serv",
        "web",
        "Failover1ServerTestServlet",
        "RunWith",
        "APP_NAME",
        "APP_NAMES",
        "Collections",
        "singleton",
        "APP_NAME",
        "originalConfig",
        "Server",
        "TestServlet",
        "servlet",
        "contextRoot",
        "APP_NAME",
        "server",
        "TASK_ID_MESSAGE",
        "BeforeClass",
        "originalConfig",
        "server",
        "getServerConfiguration",
        "ShrinkHelper",
        "defaultDropinApp",
        "server",
        "APP_NAME",
        "server",
        "deleteDirectoryFromLibertyInstallRoot",
        "After",
        "server",
        "isStarted",
        "server",
        "stopServer",
        "server",
        "updateServerConfiguration",
        "originalConfig",
        "Test",
        "config",
        "originalConfig",
        "clone",
        "persistentExec1",
        "config",
        "getPersistentExecutors",
        "getById",
        "persistentExec1",
        "setMissedTaskThreshold",
        "persistentExec2",
        "config",
        "getPersistentExecutors",
        "getById",
        "persistentExec2",
        "setMissedTaskThreshold",
        "server",
        "updateServerConfiguration",
        "config",
        "server",
        "startServer",
        "testName",
        "getMethodName",
        "taskIdA",
        "taskIdB",
        "taskIdC",
        "taskIdD",
        "result",
        "runTestWithResponse",
        "server",
        "APP_NAME",
        "start",
        "result",
        "indexOf",
        "TASK_ID_MESSAGE",
        "start",
        "fail",
        "result",
        "taskIdA",
        "result",
        "substring",
        "start",
        "TASK_ID_MESSAGE",
        "length",
        "result",
        "indexOf",
        "start",
        "taskIdA",
        "result",
        "runTestWithResponse",
        "server",
        "APP_NAME",
        "start",
        "result",
        "indexOf",
        "TASK_ID_MESSAGE",
        "start",
        "fail",
        "result",
        "taskIdB",
        "result",
        "substring",
        "start",
        "TASK_ID_MESSAGE",
        "length",
        "result",
        "indexOf",
        "start",
        "taskIdB",
        "result",
        "runTestWithResponse",
        "server",
        "APP_NAME",
        "start",
        "result",
        "indexOf",
        "TASK_ID_MESSAGE",
        "start",
        "fail",
        "result",
        "taskIdC",
        "result",
        "substring",
        "start",
        "TASK_ID_MESSAGE",
        "length",
        "result",
        "indexOf",
        "start",
        "taskIdC",
        "runTest",
        "server",
        "APP_NAME",
        "taskIdB",
        "taskIdC",
        "server",
        "setMarkToEndOfLog",
        "server",
        "updateServerConfiguration",
        "originalConfig",
        "server",
        "waitForConfigUpdateInLogUsingMark",
        "APP_NAMES",
        "runTest",
        "server",
        "APP_NAME",
        "taskIdB",
        "taskIdC",
        "runTest",
        "server",
        "APP_NAME",
        "taskIdA",
        "result",
        "runTestWithResponse",
        "server",
        "APP_NAME",
        "start",
        "result",
        "indexOf",
        "TASK_ID_MESSAGE",
        "start",
        "fail",
        "result",
        "taskIdD",
        "result",
        "substring",
        "start",
        "TASK_ID_MESSAGE",
        "length",
        "result",
        "indexOf",
        "start",
        "taskIdD",
        "runTest",
        "server",
        "APP_NAME",
        "taskIdA",
        "server",
        "isStarted",
        "taskIdD",
        "runTest",
        "server",
        "APP_NAME",
        "taskIdD",
        "taskIdC",
        "runTest",
        "server",
        "APP_NAME",
        "taskIdC",
        "taskIdB",
        "runTest",
        "server",
        "APP_NAME",
        "taskIdB",
        "taskIdA",
        "runTest",
        "server",
        "APP_NAME",
        "taskIdA",
        "Test",
        "config",
        "originalConfig",
        "clone",
        "persistentExec1",
        "config",
        "getPersistentExecutors",
        "getById",
        "persistentExec1",
        "setMissedTaskThreshold",
        "persistentExec2",
        "config",
        "getPersistentExecutors",
        "getById",
        "persistentExec2",
        "setMissedTaskThreshold",
        "server",
        "updateServerConfiguration",
        "config",
        "server",
        "startServer",
        "testName",
        "getMethodName",
        "taskIdA",
        "taskIdB",
        "taskIdC",
        "taskIdD",
        "result",
        "runTestWithResponse",
        "server",
        "APP_NAME",
        "start",
        "result",
        "indexOf",
        "TASK_ID_MESSAGE",
        "start",
        "fail",
        "result",
        "taskIdA",
        "result",
        "substring",
        "start",
        "TASK_ID_MESSAGE",
        "length",
        "result",
        "indexOf",
        "start",
        "taskIdA",
        "result",
        "runTestWithResponse",
        "server",
        "APP_NAME",
        "start",
        "result",
        "indexOf",
        "TASK_ID_MESSAGE",
        "start",
        "fail",
        "result",
        "taskIdB",
        "result",
        "substring",
        "start",
        "TASK_ID_MESSAGE",
        "length",
        "result",
        "indexOf",
        "start",
        "taskIdB",
        "result",
        "runTestWithResponse",
        "server",
        "APP_NAME",
        "start",
        "result",
        "indexOf",
        "TASK_ID_MESSAGE",
        "start",
        "fail",
        "result",
        "taskIdC",
        "result",
        "substring",
        "start",
        "TASK_ID_MESSAGE",
        "length",
        "result",
        "indexOf",
        "start",
        "taskIdC",
        "runTest",
        "server",
        "APP_NAME",
        "taskIdB",
        "taskIdC",
        "server",
        "stopServer",
        "server",
        "updateServerConfiguration",
        "originalConfig",
        "server",
        "startServer",
        "runTest",
        "server",
        "APP_NAME",
        "taskIdB",
        "taskIdC",
        "runTest",
        "server",
        "APP_NAME",
        "taskIdA",
        "result",
        "runTestWithResponse",
        "server",
        "APP_NAME",
        "start",
        "result",
        "indexOf",
        "TASK_ID_MESSAGE",
        "start",
        "fail",
        "result",
        "taskIdD",
        "result",
        "substring",
        "start",
        "TASK_ID_MESSAGE",
        "length",
        "result",
        "indexOf",
        "start",
        "taskIdD",
        "runTest",
        "server",
        "APP_NAME",
        "taskIdA",
        "server",
        "isStarted",
        "taskIdD",
        "runTest",
        "server",
        "APP_NAME",
        "taskIdD",
        "taskIdC",
        "runTest",
        "server",
        "APP_NAME",
        "taskIdC",
        "taskIdB",
        "runTest",
        "server",
        "APP_NAME",
        "taskIdB",
        "taskIdA",
        "runTest",
        "server",
        "APP_NAME",
        "taskIdA"
    ],
    "literals": [
        "\"failover1servApp\"",
        "\"com.ibm.ws.concurrent.persistent.fat.failover1serv\"",
        "\"Task id is \"",
        "\"failover1serv.web\"",
        "\"usr/shared/resources/data/failover1db\"",
        "\"persistentExec1\"",
        "\"persistentExec2\"",
        "\"-1\"",
        "\"/Failover1ServerTestServlet\"",
        "\"testScheduleOneTimeTask&jndiName=persistent/exec1&initialDelayMS=0&test=testEnableFailOverWhileServerIsRunning[1]\"",
        "\"Task id of first scheduled task not found in servlet output: \"",
        "\".\"",
        "\"Scheduled first task \"",
        "\"/Failover1ServerTestServlet\"",
        "\"testScheduleRepeatingTask&jndiName=persistent/exec2&initialDelayMS=0&delayMS=600&test=testEnableFailOverWhileServerIsRunning[2]\"",
        "\"Task id of second scheduled task not found in servlet output: \"",
        "\".\"",
        "\"Scheduled second task \"",
        "\"/Failover1ServerTestServlet\"",
        "\"testScheduleRepeatingTask&jndiName=persistent/exec2&initialDelayMS=0&delayMS=500&test=testEnableFailOverWhileServerIsRunning[3]\"",
        "\"Task id of third scheduled task not found in servlet output: \"",
        "\".\"",
        "\"Scheduled third task \"",
        "\"/Failover1ServerTestServlet\"",
        "\"testTasksAreRunning&taskId=\"",
        "\"&taskId=\"",
        "\"&jndiName=persistent/exec1&test=testEnableFailOverWhileServerIsRunning[4]\"",
        "\"/Failover1ServerTestServlet\"",
        "\"testTasksAreRunning&taskId=\"",
        "\"&taskId=\"",
        "\"&jndiName=persistent/exec1&test=testEnableFailOverWhileServerIsRunning[5]\"",
        "\"/Failover1ServerTestServlet\"",
        "\"testTaskCompleted&taskId=\"",
        "\"&expectedResult=1&jndiName=persistent/exec1&test=testEnableFailOverWhileServerIsRunning[6]\"",
        "\"/Failover1ServerTestServlet\"",
        "\"testScheduleOneTimeTask&jndiName=persistent/exec2&initialDelayMS=0&test=testEnableFailOverWhileServerIsRunning[7]\"",
        "\"Task id of fourth scheduled task not found in servlet output: \"",
        "\".\"",
        "\"Scheduled fourth task \"",
        "\"/Failover1ServerTestServlet\"",
        "\"testTaskCompleted&taskId=\"",
        "\"&expectedResult=1&jndiName=persistent/exec1&test=testEnableFailOverWhileServerIsRunning[8]\"",
        "\"/Failover1ServerTestServlet\"",
        "\"testCancelTask&taskId=\"",
        "\"&jndiName=persistent/exec1&test=testEnableFailOverWhileServerIsRunning[9]\"",
        "\"/Failover1ServerTestServlet\"",
        "\"testCancelTask&taskId=\"",
        "\"&jndiName=persistent/exec1&test=testEnableFailOverWhileServerIsRunning[10]\"",
        "\"/Failover1ServerTestServlet\"",
        "\"testCancelTask&taskId=\"",
        "\"&jndiName=persistent/exec1&test=testEnableFailOverWhileServerIsRunning[11]\"",
        "\"/Failover1ServerTestServlet\"",
        "\"testCancelTask&taskId=\"",
        "\"&jndiName=persistent/exec1&test=testEnableFailOverWhileServerIsRunning[12]\"",
        "\"persistentExec1\"",
        "\"persistentExec2\"",
        "\"-1\"",
        "\"/Failover1ServerTestServlet\"",
        "\"testScheduleOneTimeTask&jndiName=persistent/exec1&initialDelayMS=0&test=testEnableFailOverWhileServerIsStopped[1]\"",
        "\"Task id of first scheduled task not found in servlet output: \"",
        "\".\"",
        "\"Scheduled first task \"",
        "\"/Failover1ServerTestServlet\"",
        "\"testScheduleRepeatingTask&jndiName=persistent/exec2&initialDelayMS=0&delayMS=1600&test=testEnableFailOverWhileServerIsStopped[2]\"",
        "\"Task id of second scheduled task not found in servlet output: \"",
        "\".\"",
        "\"Scheduled second task \"",
        "\"/Failover1ServerTestServlet\"",
        "\"testScheduleRepeatingTask&jndiName=persistent/exec2&initialDelayMS=0&delayMS=1500&test=testEnableFailOverWhileServerIsStopped[3]\"",
        "\"Task id of third scheduled task not found in servlet output: \"",
        "\".\"",
        "\"Scheduled third task \"",
        "\"/Failover1ServerTestServlet\"",
        "\"testTasksAreRunning&taskId=\"",
        "\"&taskId=\"",
        "\"&jndiName=persistent/exec1&test=testEnableFailOverWhileServerIsStopped[4]\"",
        "\"/Failover1ServerTestServlet\"",
        "\"testTasksAreRunning&taskId=\"",
        "\"&taskId=\"",
        "\"&jndiName=persistent/exec1&test=testEnableFailOverWhileServerIsStopped[5]\"",
        "\"/Failover1ServerTestServlet\"",
        "\"testTaskCompleted&taskId=\"",
        "\"&expectedResult=1&jndiName=persistent/exec1&test=testEnableFailOverWhileServerIsStopped[6]\"",
        "\"/Failover1ServerTestServlet\"",
        "\"testScheduleOneTimeTask&jndiName=persistent/exec2&initialDelayMS=0&test=testEnableFailOverWhileServerIsStopped[7]\"",
        "\"Task id of fourth scheduled task not found in servlet output: \"",
        "\".\"",
        "\"Scheduled fourth task \"",
        "\"/Failover1ServerTestServlet\"",
        "\"testTaskCompleted&taskId=\"",
        "\"&expectedResult=1&jndiName=persistent/exec1&test=testEnableFailOverWhileServerIsStopped[8]\"",
        "\"/Failover1ServerTestServlet\"",
        "\"testCancelTask&taskId=\"",
        "\"&jndiName=persistent/exec1&test=testEnableFailOverWhileServerIsStopped[9]\"",
        "\"/Failover1ServerTestServlet\"",
        "\"testCancelTask&taskId=\"",
        "\"&jndiName=persistent/exec1&test=testEnableFailOverWhileServerIsStopped[10]\"",
        "\"/Failover1ServerTestServlet\"",
        "\"testCancelTask&taskId=\"",
        "\"&jndiName=persistent/exec1&test=testEnableFailOverWhileServerIsStopped[11]\"",
        "\"/Failover1ServerTestServlet\"",
        "\"testCancelTask&taskId=\"",
        "\"&jndiName=persistent/exec1&test=testEnableFailOverWhileServerIsStopped[12]\""
    ],
    "variables": [
        "originalConfig",
        "server"
    ],
    "comments": [
        "Schedule on the instance that cannot run tasks",
        "Schedule on the instance that can run tasks",
        "Enable fail over",
        "Verify that tasks still run",
        "Schedule another task and verify that it runs",
        "Schedule on the instance that cannot run tasks",
        "Schedule on the instance that can run tasks",
        "this might need to allow for expected warnings if the server shuts down while a task is running",
        "Enable fail over",
        "Verify that tasks still run",
        "Schedule another task and verify that it runs"
    ],
    "docstrings": [
        "*****************************************************************************\n * Copyright (c) 2019 IBM Corporation and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     IBM Corporation - initial API and implementation\n ******************************************************************************",
        "* This test bucket covers scenarios where the user starts out with fail over disabled and switches to\n * enable fail over. There are a variety of ways they might do this, which are described in more detail\n * in the comments for each individual test.",
        "* testEnableFailOverWhileServerIsRunning - Schedules tasks on an instance where fail over is not enabled.\n     * Enables fail over while the server is still running. Then verifies that the previous, as well as new, tasks run.",
        "* testEnableFailOverWhileServerIsStopped - Schedules tasks on an instance where fail over is not enabled.\n     * Stops the server and enables fail over. Starts up the server and verifies that the previous, as well as new, tasks run."
    ],
    "functions": [
        "setUp",
        "tearDownPerTest",
        "testEnableFailOverWhileServerIsRunning",
        "testEnableFailOverWhileServerIsStopped"
    ],
    "classes": [
        "SwitchFromSingleInstanceToFailOverTest"
    ]
}