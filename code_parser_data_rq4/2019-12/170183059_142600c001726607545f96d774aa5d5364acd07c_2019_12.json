{
    "identifiers": [
        "textwrap",
        "typing",
        "Any",
        "pyhocon",
        "ConfigTree",
        "databuilder",
        "Scoped",
        "databuilder",
        "extractor",
        "base_extractor",
        "Extractor",
        "databuilder",
        "extractor",
        "neo4j_extractor",
        "Neo4jExtractor",
        "databuilder",
        "publisher",
        "neo4j_csv_publisher",
        "JOB_PUBLISH_TAG",
        "Extractor",
        "textwrap",
        "dedent",
        "conf",
        "conf",
        "Neo4jDashboardSearchDataExtractor",
        "CYPHER_QUERY_CONFIG_KEY",
        "conf",
        "conf",
        "get_string",
        "Neo4jDashboardSearchDataExtractor",
        "CYPHER_QUERY_CONFIG_KEY",
        "_add_publish_tag_filter",
        "conf",
        "get_string",
        "JOB_PUBLISH_TAG",
        "Neo4jDashboardSearchDataExtractor",
        "DEFAULT_NEO4J_CYPHER_QUERY",
        "Neo4jExtractor",
        "neo4j_extractor",
        "get_scope",
        "Neo4jExtractor",
        "CYPHER_QUERY_CONFIG_KEY",
        "conf",
        "put",
        "key",
        "cypher_query",
        "neo4j_extractor",
        "init",
        "Scoped",
        "get_scoped_conf",
        "conf",
        "neo4j_extractor",
        "get_scope",
        "neo4j_extractor",
        "close",
        "neo4j_extractor",
        "extract",
        "publish_tag",
        "cypher_query",
        "publish_tag",
        "format",
        "publish_tag",
        "cypher_query",
        "format",
        "publish_tag_filter",
        "publish_tag_filter"
    ],
    "literals": [
        "'cypher_query'",
        "''",
        "'.'",
        "'extractor.dashboard_search_data'",
        "''"
    ],
    "variables": [
        "CYPHER_QUERY_CONFIG_KEY",
        "DEFAULT_NEO4J_CYPHER_QUERY",
        "conf",
        "cypher_query",
        "cypher_query",
        "neo4j_extractor",
        "key",
        "publish_tag_filter",
        "publish_tag_filter"
    ],
    "comments": [
        "noqa: F401",
        "noqa: F401",
        "type: (ConfigTree) -> None",
        "extract cypher query from conf, if specified, else use default query",
        "write the cypher query in configs in Neo4jExtractor scope",
        "initialize neo4j_extractor from configs",
        "type: () -> None",
        "type: () -> Any",
        "type: () -> str"
    ],
    "docstrings": [
        "\"\"\"\n    Extractor to fetch data required to support search from Neo4j graph database\n    Use Neo4jExtractor extractor class\n    \"\"\"",
        "\"\"\"\n        MATCH (dgroup:Dashboardgroup)<-[:DASHBOARD_OF]-(d:Dashboard)\n        {publish_tag_filter}\n        OPTIONAL MATCH (d)-[:DESCRIPTION]->(ddesc:Description)\n        OPTIONAL MATCH (d)-[:OWNER]->(owner:User)\n        OPTIONAL MATCH (d)-[:TAG]->(tags:Tag)\n        OPTIONAL MATCH (d)-[:LAST_RELOAD_TIME]->(lrt:Lastreloadtime)\n        RETURN dgroup.name as dashboard_group, d.name AS dashboard_name,\n        ddesc.description AS description, owner.full_name AS user_name,\n        owner.key AS user_id, left(lrt.value,16) as last_reload_time,\n        COLLECT(DISTINCT lower(tags.key)) as tags\n        ORDER BY d.name;\n        \"\"\"",
        "\"\"\"\n        Initialize Neo4jExtractor object from configuration and use that for extraction\n        \"\"\"",
        "\"\"\"\n        Use close() method specified by neo4j_extractor\n        to close connection to neo4j cluster\n        \"\"\"",
        "\"\"\"\n        Invoke extract() method defined by neo4j_extractor\n        \"\"\"",
        "\"\"\"\n        Adds publish tag filter into Cypher query\n        :param publish_tag: value of publish tag.\n        :param cypher_query:\n        :return:\n        \"\"\"",
        "\"\"\"WHERE dashboard.published_tag = '{}'\"\"\""
    ],
    "functions": [
        "init",
        "close",
        "extract",
        "get_scope",
        "_add_publish_tag_filter"
    ],
    "classes": [
        "Neo4jDashboardSearchDataExtractor"
    ]
}