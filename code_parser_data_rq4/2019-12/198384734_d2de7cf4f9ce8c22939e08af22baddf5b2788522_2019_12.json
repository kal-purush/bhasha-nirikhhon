{
    "identifiers": [
        "argparse",
        "collections",
        "json",
        "os",
        "shutil",
        "sys",
        "jsonschema",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "join",
        "os",
        "path",
        "curdir",
        "os",
        "environ",
        "get",
        "DEFAULT_SCHEMA_PATH",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "join",
        "os",
        "path",
        "curdir",
        "os",
        "environ",
        "get",
        "DEFAULT_LOG_CONFIGS_PATH",
        "format",
        "LOG_CONFIGS_PATH",
        "message",
        "sys",
        "exit",
        "message",
        "argparse",
        "ArgumentParser",
        "description",
        "epilog",
        "parser",
        "add_mutually_exclusive_group",
        "add_group",
        "add_argument",
        "argparse",
        "FileType",
        "help",
        "add_group",
        "add_argument",
        "json",
        "loads",
        "help",
        "parser",
        "parse_args",
        "args",
        "args",
        "input_file",
        "args",
        "input_file",
        "json",
        "load",
        "args",
        "input_file",
        "args",
        "input_json",
        "path",
        "open",
        "path",
        "input_file",
        "json",
        "load",
        "input_file",
        "FileNotFoundError",
        "_fail",
        "format",
        "path",
        "ValueError",
        "_fail",
        "format",
        "path",
        "_read_json_at",
        "SCHEMA_PATH",
        "_read_json_at",
        "LOG_CONFIGS_PATH",
        "input_json",
        "_read_schema",
        "jsonschema",
        "validate",
        "input_json",
        "schema",
        "jsonschema",
        "exceptions",
        "ValidationError",
        "validation_err",
        "_fail",
        "validation_err",
        "input_json",
        "config",
        "input_json",
        "_read_log_configs",
        "valid_keys",
        "config",
        "get",
        "keys",
        "log_config",
        "input_json",
        "get",
        "log_config",
        "get",
        "valid_keys",
        "_fail",
        "format",
        "log_stream_name",
        "log_config",
        "get",
        "file_path",
        "log_config",
        "get",
        "timestamp_format_key",
        "log_config",
        "get",
        "valid_keys",
        "join",
        "valid_keys",
        "seq",
        "collections",
        "Counter",
        "seq",
        "value",
        "value",
        "count",
        "counter",
        "items",
        "count",
        "input_json",
        "field",
        "unique_fields",
        "_get_duplicate_values",
        "config",
        "get",
        "field",
        "config",
        "input_json",
        "get",
        "duplicates",
        "_fail",
        "format",
        "field",
        "field",
        "duplicates",
        "join",
        "duplicates",
        "input_json",
        "input_json",
        "_read_log_configs",
        "_validate_json_schema",
        "input_json",
        "_validate_timestamp_keys",
        "input_json",
        "_validate_log_config_fields_uniqueness",
        "input_json",
        "log_configs",
        "os",
        "environ",
        "get",
        "DEFAULT_LOG_CONFIGS_PATH",
        "open",
        "log_configs_path",
        "log_configs_file",
        "json",
        "dump",
        "log_configs",
        "log_configs_file",
        "indent",
        "input_json",
        "_read_log_configs",
        "log_configs",
        "extend",
        "input_json",
        "get",
        "input_json",
        "update",
        "log_configs",
        "get",
        "_write_log_configs",
        "log_configs",
        "shutil",
        "copyfile",
        "LOG_CONFIGS_PATH",
        "LOG_CONFIGS_BAK_PATH",
        "shutil",
        "move",
        "LOG_CONFIGS_BAK_PATH",
        "LOG_CONFIGS_PATH",
        "os",
        "remove",
        "LOG_CONFIGS_BAK_PATH",
        "FileNotFoundError",
        "parse_args",
        "create_backup",
        "args",
        "input_file",
        "args",
        "input_json",
        "get_input_json",
        "args",
        "validate_json",
        "input_json",
        "write_validated_json",
        "input_json",
        "validate_json",
        "restore_backup",
        "remove_backup",
        "main"
    ],
    "literals": [
        "\"cloudwatch_log_files_schema.json\"",
        "\"CW_LOGS_CONFIGS_PATH\"",
        "\"cloudwatch_log_files.json\"",
        "\"CW_LOGS_CONFIGS_PATH\"",
        "\"{}.bak\"",
        "\"Validate of add new CloudWatch log configs.\"",
        "\"If neither --input-json nor --input-file are used, this script will validate the existing config.\"",
        "\"--input-file\"",
        "\"r\"",
        "\"Path to file containing configs for log files to add.\"",
        "\"--input-json\"",
        "\"String containing configs for log files to add.\"",
        "\"No file exists at {}\"",
        "\"File at {} contains invalid JSON\"",
        "\"timestamp_formats\"",
        "\"log_configs\"",
        "\"timestamp_format_key\"",
        "\"Log config with log_stream_name {log_stream_name} and file_path {file_path} contains an invalid \"",
        "\"timestamp_format_key: {timestamp_format_key}. Valid values are {valid_keys}\"",
        "\"log_stream_name\"",
        "\"file_path\"",
        "\"timestamp_format_key\"",
        "\", \"",
        "\"log_stream_name\"",
        "\"file_path\"",
        "\"log_configs\"",
        "\"The following {field} values are used multiple times: {duplicates}\"",
        "\", \"",
        "\"CW_LOGS_CONFIGS_PATH\"",
        "\"w\"",
        "\"log_configs\"",
        "\"log_configs\"",
        "\"timestamp_formats\"",
        "\"timestamp_formats\"",
        "\"timestamp_formats\"",
        "\"__main__\""
    ],
    "variables": [
        "DEFAULT_SCHEMA_PATH",
        "SCHEMA_PATH",
        "DEFAULT_LOG_CONFIGS_PATH",
        "LOG_CONFIGS_PATH",
        "LOG_CONFIGS_BAK_PATH",
        "parser",
        "add_group",
        "schema",
        "valid_keys",
        "counter",
        "unique_fields",
        "duplicates",
        "input_json",
        "log_configs_path",
        "log_configs",
        "log_configs",
        "args",
        "input_json"
    ],
    "comments": [
        "NOTICE: the input JSON's timestamp_formats dict is the one that is",
        "updated, so that those defined in the original config aren't clobbered."
    ],
    "docstrings": [
        "\"\"\"\nValidate and modify the data in the cloudwatch_log_files.json cookbook file.\n\nThis file is used to validate and add data to the JSON file that's used to\nconfigure the CloudWatch agent on a cluster's EC2 instances. The structure of\nthe new and/or existing data is validated in the following ways:\n* jsonschema is used to ensure that the input and output configs both possess\n  a valid structure. See cloudwatch_log_files_schema.json for the schema.\n* For each log_configs entry, it's verified that its timestamp_key is a valid\n  key into the same config file's timestamp_formats object.\n* It's verified that all log_configs entries have unique values for their\n  log_stream_name and file_path attributes.\n\"\"\"",
        "\"\"\"Exit nonzero with the given error message.\"\"\"",
        "\"\"\"Parse command line args.\"\"\"",
        "\"\"\"Either load the input JSON data from a file, or returned the JSON parsed on the CLI.\"\"\"",
        "\"\"\"Read the JSON file at path.\"\"\"",
        "\"\"\"Read the schema for the CloudWatch log configs file.\"\"\"",
        "\"\"\"Read the current version of the CloudWatch log configs file, cloudwatch_log_files.json.\"\"\"",
        "\"\"\"Ensure the structure of input_json matches the schema.\"\"\"",
        "\"\"\"Ensure the timestamp_format_key values in input_json's log_configs entries are valid.\"\"\"",
        "\"\"\"Get the duplicate values in seq.\"\"\"",
        "\"\"\"Ensure that each entry in input_json's log_configs list has a unique log_stream_name and file_path.\"\"\"",
        "\"\"\"Ensure the structure of input_json matches that of the file it will be added to.\"\"\"",
        "\"\"\"Write log_configs back to the CloudWatch log configs file.\"\"\"",
        "\"\"\"Write validated JSON back to the CloudWatch log configs file.\"\"\"",
        "\"\"\"Create a backup of the file at LOG_CONFIGS_PATH.\"\"\"",
        "\"\"\"Replace the file at LOG_CONFIGS_PATH with the backup that was created in create_backup.\"\"\"",
        "\"\"\"Remove the backup created by create_backup.\"\"\"",
        "\"\"\"Run the script.\"\"\""
    ],
    "functions": [
        "_fail",
        "parse_args",
        "get_input_json",
        "_read_json_at",
        "_read_schema",
        "_read_log_configs",
        "_validate_json_schema",
        "_validate_timestamp_keys",
        "_get_duplicate_values",
        "_validate_log_config_fields_uniqueness",
        "validate_json",
        "_write_log_configs",
        "write_validated_json",
        "create_backup",
        "restore_backup",
        "remove_backup",
        "main"
    ],
    "classes": []
}