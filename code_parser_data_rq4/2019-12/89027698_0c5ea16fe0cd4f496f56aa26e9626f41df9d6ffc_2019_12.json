{
    "identifiers": [
        "Translator",
        "fs",
        "Translator",
        "Translator",
        "Translator",
        "Translator",
        "Translator",
        "Translator",
        "Translator",
        "Translator",
        "Translator",
        "Translator",
        "UnitsTranslator",
        "require",
        "DoodadsTranslator",
        "require",
        "TerrainTranslator",
        "require",
        "RegionsTranslator",
        "require",
        "CamerasTranslator",
        "require",
        "SoundsTranslator",
        "require",
        "ImportsTranslator",
        "require",
        "InfoTranslator",
        "require",
        "StringsTranslator",
        "require",
        "ObjectsTranslator",
        "ObjectsTranslator",
        "require",
        "ObjectsTranslator",
        "ObjectsTranslator",
        "require",
        "ObjectsTranslator",
        "ObjectsTranslator",
        "require",
        "ObjectsTranslator",
        "ObjectsTranslator",
        "require",
        "ObjectsTranslator",
        "ObjectsTranslator",
        "require",
        "ObjectsTranslator",
        "ObjectsTranslator",
        "require",
        "ObjectsTranslator",
        "ObjectsTranslator",
        "require",
        "fs",
        "unitResults",
        "UnitsTranslator",
        "fs",
        "DoodadsTranslator",
        "fs",
        "TerrainTranslator",
        "fs",
        "ObjectsTranslator",
        "ObjectsTranslator",
        "fs",
        "ObjectsTranslator",
        "ObjectsTranslator",
        "fs",
        "ObjectsTranslator",
        "ObjectsTranslator",
        "fs",
        "fs",
        "objectItemsResult"
    ],
    "literals": [
        "'../index'",
        "'fs'",
        "'./json/units.json'",
        "'./json/doodads.json'",
        "'./json/terrain.json'",
        "'./json/regions.json'",
        "'./json/cameras.json'",
        "'./json/sounds.json'",
        "'./json/imports.json'",
        "'./json/info.json'",
        "'./json/strings.json'",
        "'./json/object-units.json'",
        "'./json/object-items.json'",
        "'./json/object-destructables.json'",
        "'./json/object-doodads.json'",
        "'./json/object-abilities.json'",
        "'./json/object-buffs.json'",
        "'./json/object-upgrades.json'",
        "'war3mapUnits.doo'",
        "'./war/war3mapUnits.doo'",
        "'./war/war3map.doo'",
        "'./war/war3map.w3e'",
        "'./war/war3map.w3u'",
        "'./war/war3map.w3t'",
        "'./war/war3map.w3b'",
        "'objectEditorItems.json'",
        "'\\n[v] [WC3MapTranslator examples]'",
        "'  Demonstrates how to translate between JSON and war3map'",
        "'  âœ” Success! Output files written to ./examples/'",
        "'    * war3mapUnits.doo'",
        "'    * objectEditorItems.json'",
        "'[^] [WC3MapTranslator examples]\\n'"
    ],
    "variables": [
        "UnitsTranslator",
        "DoodadsTranslator",
        "TerrainTranslator",
        "RegionsTranslator",
        "CamerasTranslator",
        "SoundsTranslator",
        "ObjectsTranslator",
        "ImportsTranslator",
        "InfoTranslator",
        "StringsTranslator",
        "unitResults",
        "objectItemsResult"
    ],
    "comments": [
        "Import the translator class - in your own code",
        "you'd want to `npm install wc3maptranslator` and",
        "then import it from node_modules. These examples",
        "load from '../index' to avoid versioning issues.",
        "NodeJS file system library for writing output files",
        "Define the translators to be used. We'll demonstrate",
        "how to use all of them, but your use-case may vary,",
        "so there may not be a need to define all of them.",
        "Taking JSON and converting it into the war3map format is easy!",
        "Just use the appropriate translator to call `.jsonToWar()`,",
        "providing the JSON input. Here, the JSON is saved in a subdirectory,",
        "and NodeJS can read in JSON using `require()` with the path.",
        "",
        "The `.jsonToWar()` function returns an object containing:",
        "The `buffer` contains the data you'll write to a war3map file,",
        "and `errors` is an array of errors in case the JSON is incorrect.",
        "The ObjectTranslator `.jsonToWar()` function needs to be given the",
        "type of object it is translating, e.g. units, items, buffs, etc.",
        "This is done by using the ObjectType enum under the ObjectsTranslator",
        "instance.",
        "Above you learned how easy it is to use the `.jsonToWar()` function",
        "to get an output buffer in the war3map format. Now all we have to",
        "do is save the buffer to a file. This is the file you'd put into",
        "a .w3x WarCraft III map file (e.g. using an MPQ Editor). You may",
        "also consider using an asynchronous method for performance.",
        "`war3mapUnits.doo` is the file name that WC3 uses for units that",
        "are placed on the map (not to be confused with `war3map.w3u`, which",
        "is for units defined in the object editor).",
        "Now that you know how to write the buffer results from the `.jsonToWar()`",
        "function, give it a try on some other files! Then use an MPQ Editor",
        "to drag and drop the war3map files into a map and check it out using",
        "World Editor!",
        "Now that you're familiar with how to convert JSON to war3map",
        "as detailed above, converting war3map files to JSON is easy!",
        "The only difference is that we'll use the `.warToJson()` function,",
        "and what it returns will be:",
        "so we have JSON instead of a buffer.",
        "Regions, Cameras, Sounds, Imports, Info, and Strings have purposely",
        "been omitted for learning. The process is the same as the above lines.",
        "Give it a try!",
        "Moving on to translating object editor data from war3map to JSON format:",
        "Note that the object translation examples for Doodads, Abilities, Buffs",
        "and Upgrades have purposely been omitted for learning. Try your hand at",
        "using the ObjectsTranslator to translate the files in the `./war` directory",
        "into JSON format!",
        "For file names and extensions, see: https://github.com/ChiefOfGxBxL/WC3MapTranslator#file-support",
        "We can use the result of `.warToJson()` to save our JSON file:",
        "Caution: the value in `.json` might yield [object Object]",
        "depending on where you're printing or saving it, because that is the",
        "default .toString() representation of JSON. You'll want to stringify",
        "the JSON to get the actual readable format."
    ],
    "docstrings": [
        "* WC3MapTranslator examples using TypeScript\n *\n * Learn how to translate between JSON and war3map\n * formats using the TypeScript library.\n *\n * To use regular JavaScript, `import`s need to be changed\n * to `require()`s, and you'd build WC3MapTranslator and\n * require the `index.js` file instead of the .ts one.",
        "* * * * * * * * * * * * * *\n *                           *\n *     JSON --> War3map      *\n *                           *\n * * * * * * * * * * * * * *",
        "* buffer (Buffer)",
        "* errors (array)",
        "* * * * * * * * * * * * * *\n *                           *\n *     War3map --> JSON      *\n *                           *\n * * * * * * * * * * * * * *",
        "* json (object)",
        "* errors (array)"
    ],
    "functions": [],
    "classes": []
}