{
    "identifiers": [
        "com",
        "tibco",
        "sb",
        "compexch",
        "flowershop",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "org",
        "junit",
        "After",
        "org",
        "junit",
        "AfterClass",
        "org",
        "junit",
        "Before",
        "org",
        "junit",
        "BeforeClass",
        "org",
        "junit",
        "Test",
        "com",
        "streambase",
        "sb",
        "StreamBaseException",
        "com",
        "streambase",
        "sb",
        "TimeService",
        "com",
        "streambase",
        "sb",
        "runtime",
        "ControllableTimeService",
        "com",
        "streambase",
        "sb",
        "unittest",
        "Expecter",
        "com",
        "streambase",
        "sb",
        "unittest",
        "JSONSingleQuotesTupleMaker",
        "com",
        "streambase",
        "sb",
        "unittest",
        "SBServerManager",
        "com",
        "streambase",
        "sb",
        "unittest",
        "ServerManagerFactory",
        "com",
        "tibco",
        "ep",
        "testing",
        "framework",
        "Configuration",
        "com",
        "tibco",
        "ep",
        "testing",
        "framework",
        "ConfigurationException",
        "com",
        "tibco",
        "ep",
        "testing",
        "framework",
        "TransactionalDeadlockDetectedException",
        "com",
        "tibco",
        "ep",
        "testing",
        "framework",
        "TransactionalMemoryLeakException",
        "com",
        "tibco",
        "ep",
        "testing",
        "framework",
        "UnitTest",
        "server",
        "timeService",
        "BeforeClass",
        "server",
        "ServerManagerFactory",
        "getEmbeddedServer",
        "server",
        "startServer",
        "timeService",
        "server",
        "setTimeService",
        "timeService",
        "server",
        "loadApp",
        "AfterClass",
        "server",
        "server",
        "shutdownServer",
        "server",
        "Configuration",
        "deactiveAndRemoveAll",
        "Before",
        "server",
        "startContainers",
        "initialize",
        "Test",
        "server",
        "getEnqueuer",
        "enqueue",
        "JSONSingleQuotesTupleMaker",
        "MAKER",
        "inputs",
        "inputs",
        "i",
        "i",
        "i",
        "inputs",
        "add",
        "server",
        "getEnqueuer",
        "enqueue",
        "JSONSingleQuotesTupleMaker",
        "MAKER",
        "inputs",
        "outputs",
        "outputs",
        "i",
        "i",
        "i",
        "outputs",
        "add",
        "format",
        "i",
        "server",
        "getDequeuer",
        "expectUnordered",
        "JSONSingleQuotesTupleMaker",
        "MAKER",
        "outputs",
        "inputs",
        "i",
        "i",
        "i",
        "inputs",
        "add",
        "format",
        "i",
        "server",
        "getEnqueuer",
        "enqueue",
        "JSONSingleQuotesTupleMaker",
        "MAKER",
        "inputs",
        "timeService",
        "advanceBy",
        "TimeUnit",
        "SECONDS",
        "outputs",
        "i",
        "i",
        "i",
        "outputs",
        "add",
        "format",
        "i",
        "server",
        "getDequeuer",
        "expectUnordered",
        "JSONSingleQuotesTupleMaker",
        "MAKER",
        "outputs",
        "inputs",
        "i",
        "i",
        "i",
        "inputs",
        "add",
        "format",
        "i",
        "server",
        "getEnqueuer",
        "enqueue",
        "JSONSingleQuotesTupleMaker",
        "MAKER",
        "inputs",
        "timeService",
        "advanceBy",
        "TimeUnit",
        "SECONDS",
        "inputs",
        "i",
        "i",
        "i",
        "inputs",
        "add",
        "format",
        "i",
        "server",
        "getEnqueuer",
        "enqueue",
        "JSONSingleQuotesTupleMaker",
        "MAKER",
        "inputs",
        "timeService",
        "advanceBy",
        "TimeUnit",
        "MINUTES",
        "inputs",
        "i",
        "i",
        "i",
        "inputs",
        "add",
        "format",
        "i",
        "server",
        "getEnqueuer",
        "enqueue",
        "JSONSingleQuotesTupleMaker",
        "MAKER",
        "inputs",
        "server",
        "getDequeuer",
        "expect",
        "JSONSingleQuotesTupleMaker",
        "MAKER",
        "server",
        "getDequeuer",
        "expectNothing",
        "server",
        "getDequeuer",
        "expectNothing",
        "timeService",
        "advanceBy",
        "TimeUnit",
        "DAYS",
        "server",
        "getDequeuer",
        "expect",
        "JSONSingleQuotesTupleMaker",
        "MAKER",
        "After",
        "complete",
        "server",
        "stopContainers"
    ],
    "literals": [
        "\"com.tibco.sb.compexch.flowershop.FlowerShop\"",
        "\"GPSLocationEvent\"",
        "\"{'driver_id':1,'raw_location':{'latitude':-80.0,'longitude':-80.0}}\"",
        "\"{'store_id':1}\"",
        "\"DeliveryRequestEvent\"",
        "\"{'bid_request':{'driver_id':1,'store_id':1,'delivery_request_id':%d}}\"",
        "\"BidRequestOut\"",
        "\"{'driver_id':1,'delivery_request_id':%d,'pickup_time_committed':'60'}\"",
        "\"DeliveryBidEvent\"",
        "\"{'delivery_request_id':%d,'store_id':1,'top5_drivers':[{'current_driver_ranking':3,'current_driver_bid':{'driver_id':1,'pickup_time_committed':'60'}}]}\"",
        "\"ManualAssignOut\"",
        "\"{'store_id':1,'delivery_request_id':%d,'driver_id':1,'committed_time':'60'}\"",
        "\"StoreDriverSelection\"",
        "\"{'store_id':1,'delivery_request_id':%d}\"",
        "\"PickUpConfirmationEvent\"",
        "\"{'driver_id':1,'delivery_request_id':%d}\"",
        "\"DeliveryConfirmationEvent\"",
        "\"RankingIncrease\"",
        "\"{'driver_id':1}\"",
        "\"ImprovementNote\"",
        "\"RankingDecrease\"",
        "\"MonthlySummary\"",
        "\"{'DriverID':1,'IsWeak':false,'IsIdle':true,'IsConsistentWeak':false,'IsConsistentStrong':false,'IsImproving':false}\""
    ],
    "variables": [
        "server",
        "timeService",
        "inputs",
        "outputs"
    ],
    "comments": [
        "create a StreamBase server and load applications once for all tests in this class",
        "Create a ControllableTimeService to use as the server's time service",
        "before each test, startup fresh container instances",
        "Setup test framework before running tests",
        "Driver 1 parks at store 1",
        "20 Delivery request from store 1",
        "Driver 1 gets the bid request",
        "Driver 1 responds to bidder",
        "21 = 20(default ASSIGN_DELAY) + 1(TickOutstandingBids interval)",
        "Manually Assign output",
        "Store select driver",
        "Store confirms pickup",
        "21 + 24 = 45, 15 seconds before pickup_time_committed",
        "Customer confirms deliver",
        "Complete test framework and check for any errors",
        "after each test, dispose of the container instances"
    ],
    "docstrings": [
        "* FlowerShop testcase",
        "* Set up the server\n     *\n     * @throws StreamBaseException on start server error\n     * @throws ConfigurationException on configuration failure\n     * @throws InterruptedException on start server error",
        "* Stop the server\n     *\n     * @throws StreamBaseException on shutdown failure\n     * @throws InterruptedException on shutdown failure",
        "* Start the containers\n     *\n     * @throws StreamBaseException on start container error",
        "* test case",
        "********** Phase1 Bid **********",
        "********** Phase2 Assignment **********",
        "********** Phase3 Delivery Process **********",
        "********** Phase4 Ranking Evaluation **********",
        "********** Phase5 Activity Monitoring **********",
        "* Stop containers\n     *\n     * @throws StreamBaseException on stop container error\n     * @throws TransactionalMemoryLeakException Leak detected\n     * @throws TransactionalDeadlockDetectedException Deadlock detected"
    ],
    "functions": [
        "setupServer",
        "stopServer",
        "startContainers",
        "testHappyPath",
        "stopContainers"
    ],
    "classes": [
        "TestFlowerShop"
    ]
}