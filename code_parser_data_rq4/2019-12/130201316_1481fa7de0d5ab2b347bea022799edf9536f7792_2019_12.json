{
    "identifiers": [
        "typing",
        "Optional",
        "Any",
        "Union",
        "Dict",
        "json",
        "logging",
        "getLogger",
        "requests",
        "protobuf_loader",
        "ProtoFile",
        "ProtobufProviderInterface",
        "message",
        "ExonumMessage",
        "getLogger",
        "hostname",
        "port",
        "schema",
        "schema",
        "hostname",
        "port",
        "format",
        "schema",
        "hostname",
        "port",
        "staticmethod",
        "url",
        "Optional",
        "Dict",
        "Any",
        "Any",
        "requests",
        "Response",
        "requests",
        "get",
        "url",
        "staticmethod",
        "url",
        "data",
        "headers",
        "Dict",
        "requests",
        "Response",
        "requests",
        "post",
        "url",
        "data",
        "data",
        "headers",
        "headers",
        "Api",
        "ProtobufProviderInterface",
        "args",
        "Any",
        "kwargs",
        "Any",
        "args",
        "kwargs",
        "endpoint_prefix",
        "Optional",
        "Dict",
        "ProtoFile",
        "_rust_runtime_url",
        "format",
        "get",
        "proto_sources_endpoint",
        "response",
        "status_code",
        "response",
        "headers",
        "logger",
        "critical",
        "response",
        "status_code",
        "response",
        "content",
        "RuntimeError",
        "format",
        "response",
        "content",
        "logger",
        "debug",
        "ProtoFile",
        "name",
        "proto_file",
        "content",
        "proto_file",
        "proto_file",
        "response",
        "json",
        "proto_files",
        "ProtoFile",
        "_get_proto_sources",
        "runtime_id",
        "artifact_name",
        "artifact_version",
        "ProtoFile",
        "runtime_id",
        "RUST_RUNTIME_ID",
        "runtime_id",
        "RUST_RUNTIME_ID",
        "logger",
        "critical",
        "err_msg",
        "RuntimeError",
        "err_msg",
        "artifact_name",
        "artifact_version",
        "_get_proto_sources",
        "Api",
        "args",
        "Any",
        "kwargs",
        "Any",
        "args",
        "kwargs",
        "endpoint_prefix",
        "endpoint_prefix",
        "endpoint_prefix",
        "endpoint_prefix",
        "height",
        "requests",
        "Response",
        "get",
        "_block_url",
        "height",
        "count",
        "earliest",
        "Optional",
        "latest",
        "Optional",
        "add_precommits",
        "skip_empty_blocks",
        "add_blocks_time",
        "requests",
        "Response",
        "Dict",
        "Union",
        "count",
        "earliest",
        "earliest",
        "latest",
        "latest",
        "add_precommits",
        "skip_empty_blocks",
        "add_blocks_time",
        "get",
        "_blocks_url",
        "tx_hash",
        "requests",
        "Response",
        "get",
        "_tx_url",
        "tx_hash",
        "requests",
        "Response",
        "get",
        "_system_url",
        "format",
        "name",
        "Optional",
        "available_services",
        "response",
        "status_code",
        "RuntimeError",
        "response",
        "json",
        "state",
        "available_services",
        "state",
        "service",
        "name",
        "service",
        "message",
        "ExonumMessage",
        "requests",
        "Response",
        "post",
        "_tx_url",
        "data",
        "message",
        "pack_into_json",
        "headers",
        "response",
        "messages",
        "ExonumMessage",
        "requests",
        "Response",
        "send_transaction",
        "message",
        "message",
        "messages",
        "requests",
        "Response",
        "get",
        "_system_url",
        "format",
        "requests",
        "Response",
        "get",
        "_system_url",
        "format",
        "requests",
        "Response",
        "get",
        "_system_url",
        "format",
        "Api",
        "args",
        "Any",
        "kwargs",
        "Any",
        "args",
        "kwargs",
        "endpoint_prefix",
        "address",
        "public_key",
        "requests",
        "Response",
        "json",
        "dumps",
        "address",
        "public_key",
        "post",
        "_system_url",
        "format",
        "data",
        "data",
        "headers",
        "response",
        "requests",
        "Response",
        "get",
        "_system_url",
        "format",
        "enabled",
        "requests",
        "Response",
        "json",
        "dumps",
        "enabled",
        "post",
        "_system_url",
        "format",
        "data",
        "data",
        "headers",
        "requests",
        "Response",
        "get",
        "_system_url",
        "format",
        "requests",
        "Response",
        "get",
        "_system_url",
        "format",
        "requests",
        "Response",
        "json",
        "dumps",
        "post",
        "_system_url",
        "format",
        "data",
        "data",
        "headers",
        "Api",
        "service_name",
        "args",
        "Any",
        "kwargs",
        "Any",
        "args",
        "kwargs",
        "schema",
        "hostname",
        "port",
        "service_name",
        "sub_uri",
        "_api_url",
        "sub_uri",
        "sub_uri",
        "requests",
        "Response",
        "get",
        "service_endpoint",
        "sub_uri",
        "sub_uri",
        "data",
        "requests",
        "Response",
        "post",
        "service_endpoint",
        "sub_uri",
        "data",
        "data",
        "headers",
        "json_headers"
    ],
    "literals": [
        "\"{}://{}:{}/api\"",
        "\"/runtimes/rust/{}\"",
        "\"proto-sources\"",
        "\"application/json\"",
        "\"content-type\"",
        "\"Unsuccessfully attempted to retrieve Protobuf sources.\\n\"",
        "\"Status code: %s,\\n\"",
        "\"body:\\n%s\"",
        "\"Unsuccessfully attempted to retrieve Protobuf sources: {!r}\"",
        "\"Protobuf sources retrieved successfully.\"",
        "\"name\"",
        "\"content\"",
        "\"type\"",
        "\"core\"",
        "f\"Provided runtime ID: {runtime_id} is not equal to Rust runtime ID: {self.RUST_RUNTIME_ID}.\"",
        "\"type\"",
        "\"artifact\"",
        "\"name\"",
        "\"version\"",
        "\"/explorer/v1/transactions\"",
        "\"/explorer/v1/block\"",
        "\"/explorer/v1/blocks\"",
        "\"/system/v1/{}\"",
        "\"height\"",
        "\"count\"",
        "\"earliest\"",
        "\"latest\"",
        "\"add_precommits\"",
        "\"true\"",
        "\"skip_empty_blocks\"",
        "\"true\"",
        "\"add_blocks_time\"",
        "\"true\"",
        "\"hash\"",
        "\"services\"",
        "\"Couldn't get info about available services\"",
        "\"services\"",
        "\"spec\"",
        "\"name\"",
        "\"id\"",
        "\"content-type\"",
        "\"application/json\"",
        "\"healthcheck\"",
        "\"stats\"",
        "\"user_agent\"",
        "\"/system/v1/{}\"",
        "\"address\"",
        "\"public_key\"",
        "\"peers\"",
        "\"content-type\"",
        "\"application/json\"",
        "\"peers\"",
        "\"enabled\"",
        "\"consensus_enabled\"",
        "\"content-type\"",
        "\"application/json\"",
        "\"consensus_enabled\"",
        "\"network\"",
        "\"shutdown\"",
        "\"content-type\"",
        "\"application/json\"",
        "f\"{self.schema}://{self.hostname}:{self.port}/api/services/{service_name}/\"",
        "\"content-type\"",
        "\"application/json\""
    ],
    "variables": [
        "logger",
        "RUST_RUNTIME_ID",
        "schema",
        "hostname",
        "port",
        "endpoint_prefix",
        "_rust_runtime_url",
        "proto_sources_endpoint",
        "response",
        "proto_files",
        "err_msg",
        "_tx_url",
        "_block_url",
        "_blocks_url",
        "_system_url",
        "response",
        "available_services",
        "service",
        "response",
        "_system_url",
        "data",
        "response",
        "data",
        "data",
        "_api_url",
        "json_headers"
    ],
    "comments": [
        "pylint: disable=C0103",
        "constants",
        "Example of a formatted prefix: \"https://127.0.0.1:8000\"",
        "Performs a GET request to the `proto-sources` Exonum endpoint with a provided artifact name:",
        "pylint: disable=too-many-arguments"
    ],
    "docstrings": [
        "\"\"\"\nExonum API Module.\n\nThis module provides 4 classes classes:\n  - Api: a class with basic REST functionality.\n  - ProtobufApi: a class that implements ProtobufProviderInterface interface.\n  - PublicApi: a subclass of class Api that provides methods to interact with public API of an Exonum node.\n  - PrivateApi: a subclass of class Api that provides methods to interact with private API of an Exonum node.\n  - ServiceApi: a class that provides methods to interact with node services.\n\"\"\"",
        "\"\"\"Api class provides basic REST functionality.\"\"\"",
        "\"\"\"\n        Constructor of Api.\n\n        Parameters\n        ----------\n        hostname: str\n            Examples: '127.0.0.1', 'www.some_node.com'.\n        port: int\n            API port of an Exonum node.\n        schema: str\n             Communication protocol: 'https' or 'http'.\n        \"\"\"",
        "\"\"\"Internal wrapper over requests.get\"\"\"",
        "\"\"\"Internal wrapper over requests.post\"\"\"",
        "\"\"\"ProtobufApi class implements ProtobufProviderInterface interface.\"\"\"",
        "\"\"\"Retrieves protobuf sources.\"\"\"",
        "\"\"\"Performs a GET request to the `proto-sources` Exonum endpoint.\"\"\"",
        "\"\"\"Raise an exception if runtime ID is not equal to the rust runtime ID.\"\"\"",
        "\"\"\"PublicApi class provides methods to interact with the public API of an Exonum node.\"\"\"",
        "\"\"\"\n        Gets a block at the provided height.\n\n        Example:\n\n        >>> public_api = PublicApi(\"127.0.0.1\", 80, \"http\")\n        >>> block = public_api.get_block(2).json()\n        >>> print(json.dumps(block, indent=2))\n        {\n          \"proposer_id\": 0,\n          \"height\": 2,\n          \"tx_count\": 0,\n          \"prev_hash\": \"e686088d5323e51c096b42126a65fff59363c740ad0d8260c6c03c2e0c40ecdd\",\n          \"tx_hash\": \"c6c0aa07f27493d2f2e5cff56c890a353a20086d6c25ec825128e12ae752b2d9\",\n          \"state_hash\": \"e552443214f22721d007f1eef03f5e4d2483c31a439043eb32cd7b1faeef354f\",\n          \"precommits\": [\n            \"0a5c2...0603\"\n          ],\n          \"txs\": [],\n          \"time\": \"2019-09-12T09:50:49.390408335Z\"\n        }\n\n        Parameters\n        ----------\n        height: int\n            A height of the required block.\n\n        Returns\n        -------\n        block_response: requests.Response\n            Result of an API call.\n            If it is successful, a JSON representation of the block will be in the response.\n        \"\"\"",
        "\"\"\"\n        Gets a range of blocks.\n\n        Blocks will be returned in a reversed order starting from the latest to the `latest - count + 1`.\n        See the `latest` parameter description for details.\n\n        Parameters\n        ----------\n        count: int\n            Amount of blocks. Should not be greater than Exonum's parameter MAX_BLOCKS_PER_REQUEST\n        earliest: Optional[int]\n            If not provided, it is considered to be the height of the earliest block in the blockchain.\n            Otherwise, a provided value will be used.\n        latest: Optional[int]\n            If not provided, it is considered to be the height of the latest block in the blockchain.\n            Otherwise, a provided value will be used.\n        add_precommits: bool\n            If True, precommits will also be taken into account.\n        skip_empty_blocks: bool\n            If True, only non-empty blocks will be returned. By default it is False.\n        add_blocks_time: bool\n            If True, then the returned `times` field of BlockRange will contain a median time from the\n            corresponding block precommits.\n\n        Returns\n        -------\n        blocks_range_response: requests.Response\n            Result of an API call.\n            If it is successful, a JSON representation of the block range will be in the response.\n        \"\"\"",
        "\"\"\"\n        Gets information about the transaction with the provided hash.\n\n        Example:\n\n        >>> public_api = PublicApi(\"127.0.0.1\", 80, \"http\")\n        >>> tx_info = public_api.get_tx_info(tx_hash).json()\n        >>> print(json.dumps(tx_info, indent=2))\n        {\n          'type': 'committed',\n          'content': '0a11...660d',\n          'location': {\n            'block_height': 58224,\n            'position_in_block': 1\n          },\n          'location_proof': {\n            'proof': [\n              {\n                'index': 0,\n                'height': 1,\n                'hash': '14637aa10b700cebfbc23d45395e8677d1fe1914d2e7f50d38cf1b73cfba1702'\n              }\n            ],\n            'entries': [\n              [1, 'e2d9ba5e8e104d65be8d3af7c26e5abea8f27da280cea110a80c9ab4f4d2a10c']\n            ],\n            'length': 2\n          },\n          'status': {\n            'type': 'success'\n          },\n          'time': '2019-09-12T13:08:10.528537286Z'\n        }\n\n        Parameters\n        ----------\n        tx_hash: str\n            A hexadecimal representation of the transaction hash.\n\n        Returns\n        -------\n        block_response: requests.Response\n            Result of an API call.\n            If it is successful, a JSON representation of the transaction info will be in the response.\n        \"\"\"",
        "\"\"\"\n        Gets a list of available services from Exonum.\n\n        Example:\n\n        >>> public_api = PublicApi(\"127.0.0.1\", 80, \"http\")\n        >>> available_services = public_api.available_services().json()\n        >>> print(json.dumps(available_services, indent=2))\n        {\n          \"artifacts\": [\n            {\n              \"runtime_id\": 0,\n              \"name\": \"exonum-supervisor\",\n              \"version\": \"0.13.0-rc.2\"\n            }\n          ],\n          \"services\": [\n            {\n              \"spec\": {\n                \"id\": 0,\n                \"name\": \"supervisor\",\n                \"artifact\": {\n                  \"runtime_id\": 0,\n                  \"name\": \"exonum-supervisor\",\n                  \"version\": \"0.13.0-rc.2\"\n                }\n              },\n              \"status\": \"Active\"\n            }\n          ]\n        }\n        \"\"\"",
        "\"\"\"\n        Gets an ID of the service instance with the provided name.\n\n        Example:\n\n        >>> public_api = PublicApi(\"127.0.0.1\", 80, \"http\")\n        >>> id = public_api.get_instance_id_by_name(\"cryptocurrency\")\n        >>> id\n        42\n\n        Parameters\n        ----------\n        name: Name of the service.\n\n        Returns\n        -------\n        result: Optional[int]\n            ID of the instance (int) if the instance with given name exists, otherwise None is returned.\n\n        Raises\n        ------\n        RuntimeError\n            An error will be raised if a response code is not 200.\n        \"\"\"",
        "\"\"\"\n        Sends a transaction into an Exonum node via REST API.\n\n        Example:\n\n        >>> public_api = PublicApi(\"127.0.0.1\", 80, \"http\")\n        >>> response = public_api.send_transaction(message)\n        >>> response.json()\n        {'tx_hash': '713de312f48fe15559c0d4f7fb3f274dfbd3893a8a80d9f4224e97248f0e314e'}\n\n        Parameters\n        ----------\n        message: ExonumMessage\n            Prepared and signed an Exonum message.\n\n        Returns\n        -------\n        result: requests.Response\n            Result of the POST request.\n            If a transaction is correct and it is accepted, it will contain a JSON with a hash of the transaction.\n        \"\"\"",
        "\"\"\"\n        Same as send_transaction, but for any iterable object over ExonumMessage.\n\n        Parameters\n        ----------\n        messages: Iterable[ExonumMessage]\n            A sequence of messages to send.\n\n        Returns\n        -------\n        results: List[requests.Response]\n            A list of responses for each sent transaction.\n        \"\"\"",
        "\"\"\" Performs a GET request to the healthcheck Exonum endpoint. \"\"\"",
        "\"\"\" Performs a GET request to the stats Exonum endpoint. \"\"\"",
        "\"\"\" Performs a GET request to the user_agent Exonum endpoint. \"\"\"",
        "\"\"\"PrivateApi class provides methods to interact with the private API of an Exonum node.\"\"\"",
        "\"\"\"\n        Performs a POST request to the '{system_base_path}/peers' endpoint in order to add a new peer to the node.\n\n        Parameters\n        ----------\n        address: IP address of the node which the present node should connect to.\n        public_key: public key of the node which the present node should connect to.\n\n        Returns\n        -------\n        response: requests.Response\n            Result of an API call.\n        \"\"\"",
        "\"\"\"\n        Performs a GET request to the '{system_base_path}/peers' to get a list of peers of the node.\n\n        Example:\n\n        >>> private_api = PrivateApi(\"127.0.0.1\", 81, \"http\")\n        >>> peers = private_api.get_peers().json()\n        >>> print(json.dumps(peers, indent=2))\n        {\n          \"incoming_connections\": [{\n            \"address\": \"127.0.0.1:57671\",\n            \"public_key\": \"8a17bdfe42c10abdb7f27b5648691db3338400c27812e847e02eb7193ad490f2\"\n          }],\n          \"outgoing_connections\": {\n            \"127.0.0.1:6334\": {\n              \"public_key\": \"dcb46dceaeb7d0eab7b6ed000f317f2ab9f7c8423ec9a6a602d81c0979e1333a\",\n              \"state\": {\n                \"type\": \"Active\"\n              }\n            },\n            \"127.0.0.1:6335\": {\n              \"public_key\": \"dcb46dceaeb7d0eab7b6ed000f317f2ab9f7c8423ec9a6a602d81c0979e1333a\",\n              \"state\": {\n                \"delay\": 4000,\n                \"type\": \"Reconnect\"\n              }\n            },\n            \"127.0.0.1:6336\": {\n              \"public_key\": null,\n              \"state\": {\n                \"type\": \"Active\"\n              }\n            },\n            \"127.0.0.1:6337\": {\n              \"public_key\": null,\n              \"state\": {\n                \"delay\": 4000,\n                \"type\": \"Reconnect\"\n              }\n            }\n          }\n        }\n\n        Returns\n        -------\n        response: requests.Response\n            Result of an API call.\n            If it is successful, a list of peers will be returned.\n        \"\"\"",
        "\"\"\"\n        Performs a POST request to the '{system_base_path}/consensus_enabled'\n        to switch consensus interaction of the node on or off.\n\n        Parameters\n        ----------\n        enabled: flag that switches consensus interaction of the node on (True) or off (False).\n\n        Returns\n        -------\n        response: requests.Response\n            Result of an API call.\n        \"\"\"",
        "\"\"\"\n        Performs a GET request to the '{system_base_path}/consensus_enabled' to get boolean value that states\n        if the node participates in consensus.\n\n        Example:\n\n        >>> private_api = PrivateApi(\"127.0.0.1\", 81, \"http\")\n        >>> private_api.get_consensus_interaction().json()\n        True\n\n        Returns\n        -------\n        response: requests.Response\n            Result of an API call.\n        \"\"\"",
        "\"\"\"\n        Performs a GET request to the '{system_base_path}/network'\n        to get info about the serialization protocol and the services functioning in the network.\n\n        Example:\n\n        >>> private_api = PrivateApi(\"127.0.0.1\", 81, \"http\")\n        >>> network_info = private_api.get_network_info().json()\n        >>> print(json.dumps(network_info, indent=2))\n        {\n          \"core_version\": \"0.10.2\"\n        }\n\n        Returns\n        -------\n        response: requests.Response\n            Result of an API call.\n        \"\"\"",
        "\"\"\"\n        Performs a POST request to the '{system_base_path}/shutdown' to stop the node.\n        After receiving this request, the node stops processing transactions, participating in consensus and\n        terminates after all messages in the event queue are processed.\n\n        Returns\n        -------\n        response: requests.Response\n            Result of an API call.\n        \"\"\"",
        "\"\"\"ServiceApi class provides methods to interact with service API.\"\"\"",
        "\"\"\"\n        Constructor of ServiceApi.\n\n        Parameters\n        ----------\n        service_name: str\n            Name of a service.\n        *args, **kwargs:\n            Arguments for Api class constructor.\n        \"\"\"",
        "\"\"\"\n        Creates a service endpoint for a given sub-uri.\n\n        Example:\n\n        >>> service_api = ServiceApi(\"supervisor\", \"127.0.0.1\", \"8080\", \"http\")\n        >>> service_api.service_endpoint(\"deploy-artifact\")\n        http://127.0.0.1:8081/api/services/supervisor/deploy-artifact\n\n        Parameters\n        ----------\n        sub_uri: str\n            Additional part of a URL to be added to the endpoint, e.g. \"some/sub/uri?parameter=value\"\n        private: bool\n            Denotes if a private port should be used. Defaults to False.\n\n        Returns\n        -------\n        url: str\n            Returns a service REST API URL based on the provided parameters.\n        \"\"\"",
        "\"\"\"\n        Performs a GET request to the endpoint generated by the `service_endpoint` method.\n\n        Parameters are the same as in `service_endpoint`.\n\n        Returns\n        -------\n        response: requests.Response\n            Result of an API call.\n        \"\"\"",
        "\"\"\"\n        Performs a POST request to the endpoint generated by the `service_endpoint` method.\n\n        Parameters are the same as in `service_endpoint` except for `data`.\n        `data` is expected to be a serialized JSON value.\n\n        Returns\n        -------\n        response: requests.Response\n            Result of an API call.\n        \"\"\""
    ],
    "functions": [
        "get",
        "post",
        "_get_proto_sources",
        "get_main_proto_sources",
        "get_proto_sources_for_artifact",
        "get_block",
        "get_blocks",
        "get_tx_info",
        "available_services",
        "get_instance_id_by_name",
        "send_transaction",
        "send_transactions",
        "health_info",
        "stats",
        "user_agent",
        "add_peer",
        "get_peers",
        "set_consensus_interaction",
        "get_consensus_interaction",
        "get_network_info",
        "shutdown",
        "service_endpoint",
        "get_service",
        "post_service"
    ],
    "classes": [
        "Api",
        "ProtobufApi",
        "PublicApi",
        "PrivateApi",
        "ServiceApi"
    ]
}