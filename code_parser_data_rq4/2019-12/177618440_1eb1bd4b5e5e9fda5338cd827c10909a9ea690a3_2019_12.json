{
    "identifiers": [
        "chai_http",
        "server",
        "dotEnv",
        "fetch",
        "chai",
        "UserModel",
        "User",
        "process",
        "chai",
        "env",
        "dotEnv",
        "chai",
        "chai_http",
        "env",
        "host",
        "env",
        "port",
        "describe",
        "refreshDb",
        "done",
        "UserModel",
        "err",
        "err",
        "err",
        "fetch",
        "res",
        "res",
        "users",
        "chai",
        "host",
        "env",
        "env",
        "users",
        "err",
        "res",
        "expect",
        "err",
        "expect",
        "res",
        "expect",
        "res",
        "done",
        "beforeEach",
        "refreshDb",
        "it",
        "done",
        "chai",
        "host",
        "id",
        "env",
        "env",
        "err",
        "res",
        "expect",
        "err",
        "expect",
        "res",
        "expect",
        "res",
        "expect",
        "res",
        "id",
        "done",
        "it",
        "done",
        "chai",
        "host",
        "env",
        "env",
        "err",
        "res",
        "expect",
        "err",
        "expect",
        "res",
        "expect",
        "res",
        "done",
        "it",
        "done",
        "UserModel",
        "err",
        "users",
        "expect",
        "err",
        "expect",
        "users",
        "done",
        "after",
        "refreshDb"
    ],
    "literals": [
        "'chai-http'",
        "'../../server'",
        "'dotenv'",
        "'node-fetch'",
        "'chai'",
        "'../../user-model'",
        "'../../shared/user'",
        "'undefined'",
        "':'",
        "\"111111111111111111111111\"",
        "\"333333333333333333333333\"",
        "\"222222222222222222222222\"",
        "\"444444444444444444444444\"",
        "\"666666666666666666666666\"",
        "\"555555555555555555555555\"",
        "\"888888888888888888888888\"",
        "\"777777777777777777777777\"",
        "\"999999999999999999999999\"",
        "'User Routes'",
        "'ERROR'",
        "'http://localhost/spectre-pub/default-users.json'",
        "'/api/users/batch/'",
        "'should list all users'",
        "'888888888888888888888888'",
        "'/api/users/'",
        "'object'",
        "'should fetch a single user'",
        "'/api/users/'",
        "'array'",
        "'should fetch users from model'"
    ],
    "variables": [
        "env",
        "expect",
        "port",
        "host",
        "server",
        "defaultsIds",
        "refreshDb",
        "id"
    ],
    "comments": [
        "it('should generate a set of default users', (done) => {",
        "//describe('User Generator', () => {",
        "it('should generate a set of default users', (done) => {",
        "const defaults = [",
        "{",
        "_id: '111111111111111111111111',",
        "login: 'remy@mail.com',",
        "loginType: 'email',",
        "name: 'Remy',",
        "gender: 'male'",
        "},",
        "{",
        "_id: '222222222222222222222222',",
        "login: 'bailey@mail.com',",
        "loginType: 'email',",
        "name: 'Bailey',",
        "gender: 'male'",
        "},",
        "{",
        "_id: '333333333333333333333333',",
        "login: 'devin@mail.com',",
        "loginType: 'email',",
        "name: 'Devin',",
        "gender: 'female'",
        "},",
        "{",
        "_id: '444444444444444444444444',",
        "login: 'tyler@mail.com',",
        "loginType: 'email',",
        "name: 'Tyler',",
        "gender: 'male'",
        "},",
        "{",
        "_id: '555555555555555555555555',",
        "login: 'fran@mail.com',",
        "loginType: 'email',",
        "name: 'Fran',",
        "gender: 'female'",
        "},",
        "{",
        "_id: '666666666666666666666666',",
        "login: 'bernard@mail.com',",
        "loginType: 'email',",
        "name: 'Bernard',",
        "gender: 'male'",
        "},",
        "{",
        "_id: '777777777777777777777777',",
        "login: 'sing@mail.com',",
        "loginType: 'email',",
        "name: 'Sing',",
        "gender: 'male'",
        "},",
        "{",
        "_id: '888888888888888888888888',",
        "login: 'sally@mail.com',",
        "loginType: 'email',",
        "name: 'sally',",
        "gender: 'female'",
        "},",
        "{",
        "_id: '999999999999999999999999',",
        "login: 'dick@mail.com',",
        "loginType: 'email',",
        "name: 'Dick',",
        "gender: 'male'",
        "}",
        "];",
        "",
        "function saveAll(records, cb) {",
        "let users = [];",
        "records.forEach(r => users.push(User._randomData(new UserModel(r))));",
        "let count = users.length;",
        "let result = [];",
        "users.forEach(user => {",
        "chai.request(host)",
        ".post('/api/users/')",
        ".auth(env.API_USER, env.API_SECRET)",
        ".send(user)",
        ".end((err, res) => {",
        "if (err) throw err;",
        "expect(res).to.have.status(200);",
        "Object.assign(user, res);",
        "result.push(user);",
        "if (--count === 0) return cb(result);",
        "});",
        "});",
        "}",
        "",
        "function updateAll(users, cb) {",
        "",
        "let result = [];",
        "let count = users.length;",
        "users.forEach(user => {",
        "chai.request(host)",
        ".put('/api/users/' + user._id)",
        ".auth(env.API_USER, env.API_SECRET)",
        ".send(user)",
        ".end((err, res) => {",
        "expect(res).to.have.status(200);",
        "Object.assign(user, res.body);",
        "result.push(user);",
        "if (--count === 0) return cb(result);",
        "});",
        "});",
        "}",
        "",
        "saveAll(defaults, function(users) {",
        "updateAll(users, function(results) {",
        "// let header = '// ------------------------------ This file was auto-';",
        "// header += 'generated ------------------------------\\nlet users = [';",
        "fs.writeFileSync('auto_generated_users.json', JSON.stringify(results));",
        "done();",
        "});",
        "});",
        "});",
        "//  });"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}