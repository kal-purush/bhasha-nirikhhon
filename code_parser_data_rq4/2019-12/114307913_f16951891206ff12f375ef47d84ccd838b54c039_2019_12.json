{
    "identifiers": [
        "json",
        "heapq",
        "q",
        "math",
        "flask",
        "statistics",
        "flask",
        "request",
        "jsonify",
        "flask",
        "Flask",
        "app",
        "config",
        "app",
        "route",
        "methods",
        "request",
        "args",
        "request",
        "args",
        "location_input",
        "split",
        "len",
        "location_input",
        "location_input",
        "location_input",
        "patient_list_track",
        "location",
        "make_list_to_dict",
        "list_pat",
        "location",
        "patient",
        "math",
        "sqrt",
        "location",
        "patient",
        "location",
        "patient",
        "distance_calc",
        "list_of_patients",
        "sorted",
        "list_of_patients",
        "key",
        "i",
        "i",
        "list_of_patients",
        "list_of_patients",
        "k",
        "len",
        "list_of_patients",
        "k",
        "list_of_patients",
        "k",
        "final_dict",
        "location",
        "q",
        "heapify",
        "offers",
        "open",
        "f",
        "json",
        "load",
        "f",
        "d",
        "data_load",
        "distance",
        "location",
        "d",
        "d",
        "test_distance_data",
        "append",
        "distance_patient",
        "d",
        "d",
        "d",
        "d",
        "location",
        "d",
        "distance_patient",
        "d",
        "len",
        "offers",
        "q",
        "heappush",
        "offers",
        "d",
        "d",
        "d",
        "offers",
        "d",
        "d",
        "distance_patient",
        "statistics",
        "mean",
        "test_distance_data",
        "statistics",
        "stdev",
        "test_distance_data",
        "q",
        "heappushpop",
        "offers",
        "d",
        "d",
        "d",
        "sort_patients",
        "data_load",
        "list_of_patients",
        "offers",
        "pop",
        "offer_pop",
        "temp_list",
        "temp_list",
        "append",
        "offer_pop",
        "sort_patients",
        "temp_list",
        "final_list",
        "app",
        "run",
        "debug"
    ],
    "literals": [
        "\"DEBUG\"",
        "'/api'",
        "'GET'",
        "'location'",
        "'location'",
        "','",
        "\"Must be numbers passed in\"",
        "'score'",
        "\"patients.json\"",
        "'location'",
        "'latitude'",
        "'location'",
        "'longitude'",
        "'score'",
        "'age'",
        "'acceptedOffers'",
        "'canceledOffers'",
        "'averageReplyTime'",
        "'score'",
        "'score'",
        "'score'",
        "'score'",
        "'acceptedOffers'",
        "'canceledOffers'",
        "'acceptedOffers'",
        "'canceledOffers'",
        "'acceptedOffers'",
        "'canceledOffers'",
        "\"data loaded incorrectly, not correct parameters\"",
        "'__main__'"
    ],
    "variables": [
        "app",
        "location",
        "location_input",
        "location_input",
        "location_input",
        "location",
        "list_pat",
        "distance_calc",
        "list_of_patients",
        "final_dict",
        "final_dict",
        "offers",
        "test_distance_data",
        "data_load",
        "distance_patient",
        "d",
        "d",
        "d",
        "list_of_patients",
        "temp_list",
        "offer_pop",
        "final_list"
    ],
    "comments": [
        "tries to convert the list into float, if failed, error is thrown !",
        "a priortity queue of low amount of offers",
        "a list to keep track of the datasets of distances to the clinic",
        "assumptions age and accepted offers are postivley correlated with showing up so added to score",
        "and cancelled offers and average reply times are negatively correlated so subtracted",
        "if you were given a location, add that to the score",
        "if a location was not given increase everything over a deminator /.9",
        "build out the priority queue with the first ten members",
        "if somebody has offers that are two standard deviations below the mean send them down and pop the queue",
        "throw this if somebody entered bad json data , will protect the rest",
        "get the big 9 scorers , then add one off the queue"
    ],
    "docstrings": [
        "\"\"\"\n    The api route that returns the patients in an ordered list\n    Input:\n        coordinates(string): two float numbers as strings that get convereted into floats, if wrong input coordinates default to [0,0]\n    Returns:\n        make_list_to_dict(Dict): A ordered dict /json file of the 9 highest scoring patients with one new patient\n\n    \"\"\"",
        "\"\"\"\n    Finds the distance between the patient and the clinic\n    Input:\n        location( list of floats): The coordinates of the location of the clinic\n        patient ( list of floats): The coordinates of the location of the patient\n    Returns:\n         distance_calc (float): the distance between the two points\n\n    \"\"\"",
        "\"\"\"\n    Sorts the patients by the score given to them via the algorthim\n    Input:\n        location( list of floats): The coordinates of the location of the clinic\n        patient ( list of floats): The coordinates of the location of the patient\n    Returns:\n         distance_calc (float): the distance between the two points\n\n    \"\"\"",
        "\"\"\"\n       Makes a list into a dictionary so it can be viewed on a browser/better to send as paylaod\n       Input:\n           list_of_patients ( list of dicts): A list of a patients with their metadata\n       Returns:\n            final_dict (Dict): a dictionary of patients where the key ascending is how likely they are to accept\n\n       \"\"\"",
        "\"\"\"\n       Takes the json file and returns the top 9/10 scorers plus one patient who has had a small amount of cases\n       Returns:\n            final_list(list): a list of the 10 patients sorted by score .\n\n       \"\"\""
    ],
    "functions": [
        "get_patients",
        "distance",
        "sort_patients",
        "make_list_to_dict",
        "patient_list_track"
    ],
    "classes": []
}