{
    "identifiers": [
        "com",
        "desapp",
        "grupoc1e022019",
        "services",
        "com",
        "desapp",
        "grupoc1e022019",
        "model",
        "Credit",
        "com",
        "desapp",
        "grupoc1e022019",
        "model",
        "Order",
        "com",
        "desapp",
        "grupoc1e022019",
        "persistence",
        "ClientDAO",
        "com",
        "desapp",
        "grupoc1e022019",
        "persistence",
        "GoogleTokenDAO",
        "com",
        "desapp",
        "grupoc1e022019",
        "persistence",
        "OrderDAO",
        "com",
        "desapp",
        "grupoc1e022019",
        "persistence",
        "ProviderDAO",
        "com",
        "desapp",
        "grupoc1e022019",
        "services",
        "logger",
        "ServiceLogger",
        "org",
        "apache",
        "log4j",
        "Logger",
        "org",
        "springframework",
        "beans",
        "factory",
        "annotation",
        "Autowired",
        "org",
        "springframework",
        "scheduling",
        "annotation",
        "Async",
        "org",
        "springframework",
        "scheduling",
        "annotation",
        "Scheduled",
        "org",
        "springframework",
        "stereotype",
        "Component",
        "javax",
        "transaction",
        "Transactional",
        "java",
        "time",
        "LocalDateTime",
        "java",
        "util",
        "java",
        "util",
        "stream",
        "Collectors",
        "Component",
        "logger",
        "Logger",
        "getLogger",
        "Autowired",
        "orderDAO",
        "Autowired",
        "clientDAO",
        "Autowired",
        "providerDAO",
        "Autowired",
        "emailSenderService",
        "Autowired",
        "googleTokenDAO",
        "Scheduled",
        "cron",
        "Transactional",
        "logger",
        "info",
        "dateTime",
        "LocalDateTime",
        "now",
        "withSecond",
        "ordersToConfirm",
        "orderDAO",
        "findAllByPendingStateAndDeliverDateBetweenAndSortedByIdMenu",
        "dateTime",
        "dateTime",
        "plusDays",
        "logger",
        "info",
        "ordersToConfirm",
        "stream",
        "o",
        "o",
        "getId",
        "o",
        "getIdMenu",
        "o",
        "getMenusAmount",
        "o",
        "getDeliverDate",
        "o",
        "getMenuInfoPrice",
        "collect",
        "Collectors",
        "joining",
        "idMenu",
        "totalMenuAmount",
        "ordersToConfirm",
        "isEmpty",
        "idMenu",
        "ordersToConfirm",
        "get",
        "getIdMenu",
        "totalMenuAmount",
        "orderDAO",
        "countTotalAmountMenusByPendingStateAndIdMenuAndDeliverDateBetween",
        "idMenu",
        "dateTime",
        "dateTime",
        "plusDays",
        "order",
        "ordersToConfirm",
        "idMenu",
        "order",
        "getIdMenu",
        "idMenu",
        "order",
        "getIdMenu",
        "totalMenuAmount",
        "orderDAO",
        "countTotalAmountMenusByPendingStateAndIdMenuAndDeliverDateBetween",
        "idMenu",
        "dateTime",
        "dateTime",
        "plusDays",
        "confirmOrderAndCalculateFinalPriceAndSaveEntitiesAndSendEmails",
        "order",
        "totalMenuAmount",
        "logger",
        "info",
        "dateTime",
        "dateTime",
        "plusDays",
        "logger",
        "info",
        "LocalDateTime",
        "now",
        "order",
        "totalMenuAmount",
        "prevOrderPricePerAmount",
        "order",
        "getMenuInfoPrice",
        "order",
        "getMenusAmount",
        "newOrderPricePerAmount",
        "order",
        "getMenuInfo",
        "getMenuPriceWithAmount",
        "totalMenuAmount",
        "intValue",
        "totalMenuAmount",
        "order",
        "confirmed",
        "order",
        "setFinalOrderPrice",
        "newOrderPricePerAmount",
        "prevOrderPricePerAmount",
        "equals",
        "newOrderPricePerAmount",
        "differenceCredit",
        "prevOrderPricePerAmount",
        "newOrderPricePerAmount",
        "order",
        "getMenusAmount",
        "order",
        "getClient",
        "deposit",
        "differenceCredit",
        "clientDAO",
        "save",
        "order",
        "getClient",
        "emailSenderService",
        "sendOrderFinalPriceHasChanged",
        "order",
        "prevOrderPricePerAmount",
        "newOrderPricePerAmount",
        "differenceCredit",
        "order",
        "payToProvider",
        "providerDAO",
        "save",
        "order",
        "getMenu",
        "getProvider",
        "orderDAO",
        "save",
        "order",
        "emailSenderService",
        "sendOrderIsConfirmed",
        "order",
        "newOrderPricePerAmount",
        "Scheduled",
        "cron",
        "Async",
        "Transactional",
        "logger",
        "info",
        "tokensExpired",
        "googleTokenDAO",
        "deleteAllAuthTokenExpired",
        "logger",
        "info",
        "tokensExpired",
        "logger",
        "info"
    ],
    "literals": [
        "\"0 0 0 * * *\"",
        "\"Schedule task 'Confirm pending orders and checkout payments' has started. \"",
        "\"List of orders to confirm: \"",
        "\"{ IdOrder: \"",
        "\", idMenu:\"",
        "\", orderAmount: \"",
        "\", deliverDate: \"",
        "\", menuInfoPrice: \"",
        "\" }\"",
        "\"No orders in Peding state and deliver date between [\"",
        "\", \"",
        "\"]\"",
        "\" - Schedule task 'Confirm pending orders and checkout payments' has finished. \"",
        "\"0 30 * * * *\"",
        "\"threadPoolTaskExecutor\"",
        "\"Schedule task 'Expire old tokens' has started. \"",
        "\"Number of tokens are expired: \"",
        "\"Schedule task 'Expire old tokens' has finished. \""
    ],
    "variables": [
        "idMenu",
        "totalMenuAmount"
    ],
    "comments": [
        "\"0 0 0 * * *\" -- cron: Every day 00hs.",
        "\"s m h d m y\" -- cron code",
        "\"0 30 * * * *\" - cron: Every hour in minute 30."
    ],
    "docstrings": [],
    "functions": [
        "scheduleConfirmPendingOrdersAndCheckoutPayments",
        "confirmOrderAndCalculateFinalPriceAndSaveEntitiesAndSendEmails",
        "expireOldTokens"
    ],
    "classes": [
        "ScheduleService"
    ]
}