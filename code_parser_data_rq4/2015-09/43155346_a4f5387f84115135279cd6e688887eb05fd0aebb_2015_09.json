{
    "identifiers": [
        "com",
        "github",
        "kevinsawicki",
        "http",
        "java",
        "net",
        "HttpURLConnection",
        "HTTP_BAD_REQUEST",
        "java",
        "net",
        "HttpURLConnection",
        "HTTP_CREATED",
        "java",
        "net",
        "HttpURLConnection",
        "HTTP_INTERNAL_ERROR",
        "java",
        "net",
        "HttpURLConnection",
        "HTTP_NO_CONTENT",
        "java",
        "net",
        "HttpURLConnection",
        "HTTP_NOT_FOUND",
        "java",
        "net",
        "HttpURLConnection",
        "HTTP_NOT_MODIFIED",
        "java",
        "net",
        "HttpURLConnection",
        "HTTP_OK",
        "java",
        "net",
        "Proxy",
        "Type",
        "HTTP",
        "java",
        "io",
        "BufferedInputStream",
        "java",
        "io",
        "BufferedOutputStream",
        "java",
        "io",
        "BufferedReader",
        "java",
        "io",
        "ByteArrayInputStream",
        "java",
        "io",
        "ByteArrayOutputStream",
        "java",
        "io",
        "Closeable",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileInputStream",
        "java",
        "io",
        "FileNotFoundException",
        "java",
        "io",
        "FileOutputStream",
        "java",
        "io",
        "Flushable",
        "java",
        "io",
        "java",
        "io",
        "InputStream",
        "java",
        "io",
        "InputStreamReader",
        "java",
        "io",
        "OutputStream",
        "java",
        "io",
        "OutputStreamWriter",
        "java",
        "io",
        "PrintStream",
        "java",
        "io",
        "Reader",
        "java",
        "io",
        "UnsupportedEncodingException",
        "java",
        "io",
        "Writer",
        "java",
        "net",
        "HttpURLConnection",
        "java",
        "net",
        "InetSocketAddress",
        "java",
        "net",
        "MalformedURLException",
        "java",
        "net",
        "Proxy",
        "java",
        "net",
        "URI",
        "java",
        "net",
        "URISyntaxException",
        "java",
        "net",
        "URL",
        "java",
        "net",
        "URLEncoder",
        "java",
        "nio",
        "ByteBuffer",
        "java",
        "nio",
        "CharBuffer",
        "java",
        "nio",
        "charset",
        "Charset",
        "java",
        "nio",
        "charset",
        "CharsetEncoder",
        "java",
        "security",
        "AccessController",
        "java",
        "security",
        "GeneralSecurityException",
        "java",
        "security",
        "PrivilegedAction",
        "java",
        "security",
        "SecureRandom",
        "java",
        "security",
        "cert",
        "X509Certificate",
        "java",
        "util",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "LinkedHashMap",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Entry",
        "java",
        "util",
        "concurrent",
        "Callable",
        "java",
        "util",
        "concurrent",
        "atomic",
        "AtomicInteger",
        "java",
        "util",
        "concurrent",
        "atomic",
        "AtomicReference",
        "java",
        "util",
        "GZIPInputStream",
        "javax",
        "net",
        "ssl",
        "HostnameVerifier",
        "javax",
        "net",
        "ssl",
        "HttpsURLConnection",
        "javax",
        "net",
        "ssl",
        "SSLContext",
        "javax",
        "net",
        "ssl",
        "SSLSession",
        "javax",
        "net",
        "ssl",
        "SSLSocketFactory",
        "javax",
        "net",
        "ssl",
        "TrustManager",
        "javax",
        "net",
        "ssl",
        "X509TrustManager",
        "CHARSET_UTF8",
        "CONTENT_TYPE_FORM",
        "CONTENT_TYPE_JSON",
        "ENCODING_GZIP",
        "HEADER_ACCEPT",
        "HEADER_ACCEPT_CHARSET",
        "HEADER_ACCEPT_ENCODING",
        "HEADER_AUTHORIZATION",
        "HEADER_CACHE_CONTROL",
        "HEADER_CONTENT_ENCODING",
        "HEADER_CONTENT_LENGTH",
        "HEADER_CONTENT_TYPE",
        "HEADER_DATE",
        "HEADER_ETAG",
        "HEADER_EXPIRES",
        "HEADER_IF_NONE_MATCH",
        "HEADER_LAST_MODIFIED",
        "HEADER_LOCATION",
        "HEADER_PROXY_AUTHORIZATION",
        "HEADER_REFERER",
        "HEADER_SERVER",
        "HEADER_USER_AGENT",
        "METHOD_DELETE",
        "METHOD_GET",
        "METHOD_HEAD",
        "METHOD_OPTIONS",
        "METHOD_POST",
        "METHOD_PUT",
        "METHOD_TRACE",
        "PARAM_CHARSET",
        "BOUNDARY",
        "CONTENT_TYPE_MULTIPART",
        "BOUNDARY",
        "CRLF",
        "EMPTY_STRINGS",
        "TRUSTED_FACTORY",
        "TRUSTED_VERIFIER",
        "charset",
        "charset",
        "charset",
        "length",
        "charset",
        "CHARSET_UTF8",
        "TRUSTED_FACTORY",
        "trustAllCerts",
        "chain",
        "authType",
        "chain",
        "authType",
        "context",
        "SSLContext",
        "getInstance",
        "context",
        "init",
        "trustAllCerts",
        "TRUSTED_FACTORY",
        "context",
        "getSocketFactory",
        "e",
        "ioException",
        "ioException",
        "initCause",
        "e",
        "ioException",
        "TRUSTED_FACTORY",
        "TRUSTED_VERIFIER",
        "TRUSTED_VERIFIER",
        "hostname",
        "session",
        "TRUSTED_VERIFIER",
        "baseUrl",
        "result",
        "baseUrl",
        "indexOf",
        "baseUrl",
        "lastIndexOf",
        "result",
        "append",
        "result",
        "baseUrl",
        "result",
        "queryStart",
        "baseUrl",
        "indexOf",
        "lastChar",
        "result",
        "length",
        "queryStart",
        "result",
        "append",
        "queryStart",
        "lastChar",
        "baseUrl",
        "charAt",
        "lastChar",
        "result",
        "append",
        "result",
        "key",
        "value",
        "result",
        "value",
        "value",
        "getClass",
        "isArray",
        "value",
        "arrayToList",
        "value",
        "value",
        "iterator",
        "value",
        "iterator",
        "iterator",
        "hasNext",
        "result",
        "append",
        "key",
        "result",
        "append",
        "element",
        "iterator",
        "next",
        "element",
        "result",
        "append",
        "element",
        "iterator",
        "hasNext",
        "result",
        "append",
        "result",
        "append",
        "key",
        "result",
        "append",
        "value",
        "result",
        "append",
        "value",
        "result",
        "ConnectionFactory",
        "url",
        "url",
        "proxy",
        "DEFAULT",
        "url",
        "url",
        "openConnection",
        "url",
        "proxy",
        "url",
        "openConnection",
        "proxy",
        "CONNECTION_FACTORY",
        "ConnectionFactory",
        "DEFAULT",
        "connectionFactory",
        "connectionFactory",
        "CONNECTION_FACTORY",
        "ConnectionFactory",
        "DEFAULT",
        "CONNECTION_FACTORY",
        "connectionFactory",
        "UploadProgress",
        "uploaded",
        "total",
        "DEFAULT",
        "uploaded",
        "total",
        "EQUALS_SIGN",
        "PREFERRED_ENCODING",
        "_STANDARD_ALPHABET",
        "source",
        "srcOffset",
        "numSigBytes",
        "destination",
        "destOffset",
        "ALPHABET",
        "_STANDARD_ALPHABET",
        "inBuff",
        "numSigBytes",
        "source",
        "srcOffset",
        "numSigBytes",
        "source",
        "srcOffset",
        "numSigBytes",
        "source",
        "srcOffset",
        "numSigBytes",
        "destination",
        "destOffset",
        "ALPHABET",
        "inBuff",
        "destination",
        "destOffset",
        "ALPHABET",
        "inBuff",
        "destination",
        "destOffset",
        "ALPHABET",
        "inBuff",
        "destination",
        "destOffset",
        "ALPHABET",
        "inBuff",
        "destination",
        "destination",
        "destOffset",
        "ALPHABET",
        "inBuff",
        "destination",
        "destOffset",
        "ALPHABET",
        "inBuff",
        "destination",
        "destOffset",
        "ALPHABET",
        "inBuff",
        "destination",
        "destOffset",
        "EQUALS_SIGN",
        "destination",
        "destination",
        "destOffset",
        "ALPHABET",
        "inBuff",
        "destination",
        "destOffset",
        "ALPHABET",
        "inBuff",
        "destination",
        "destOffset",
        "EQUALS_SIGN",
        "destination",
        "destOffset",
        "EQUALS_SIGN",
        "destination",
        "destination",
        "getBytes",
        "PREFERRED_ENCODING",
        "e",
        "getBytes",
        "encodeBytes",
        "source",
        "encodeBytes",
        "source",
        "source",
        "length",
        "source",
        "off",
        "len",
        "encoded",
        "encodeBytesToBytes",
        "source",
        "off",
        "len",
        "encoded",
        "PREFERRED_ENCODING",
        "uue",
        "encoded",
        "source",
        "off",
        "len",
        "source",
        "off",
        "off",
        "len",
        "len",
        "off",
        "len",
        "source",
        "length",
        "format",
        "off",
        "len",
        "source",
        "length",
        "encLen",
        "len",
        "len",
        "outBuff",
        "encLen",
        "d",
        "e",
        "len2",
        "len",
        "d",
        "len2",
        "d",
        "e",
        "encode3to4",
        "source",
        "d",
        "off",
        "outBuff",
        "e",
        "d",
        "len",
        "encode3to4",
        "source",
        "d",
        "off",
        "len",
        "d",
        "outBuff",
        "e",
        "e",
        "e",
        "outBuff",
        "length",
        "finalOut",
        "e",
        "arraycopy",
        "outBuff",
        "finalOut",
        "e",
        "finalOut",
        "outBuff",
        "serialVersionUID",
        "cause",
        "cause",
        "Override",
        "getCause",
        "thrown",
        "run",
        "e",
        "thrown",
        "e",
        "e",
        "thrown",
        "e",
        "done",
        "e",
        "thrown",
        "e",
        "closeable",
        "ignoreCloseExceptions",
        "closeable",
        "ignoreCloseExceptions",
        "closeable",
        "closeable",
        "ignoreCloseExceptions",
        "ignoreCloseExceptions",
        "Override",
        "closeable",
        "closeable",
        "flush",
        "ignoreCloseExceptions",
        "closeable",
        "close",
        "e",
        "closeable",
        "close",
        "flushable",
        "flushable",
        "flushable",
        "flushable",
        "Override",
        "flushable",
        "flush",
        "encoder",
        "stream",
        "charset",
        "bufferSize",
        "stream",
        "bufferSize",
        "encoder",
        "Charset",
        "forName",
        "getValidCharset",
        "charset",
        "newEncoder",
        "value",
        "encoder",
        "encode",
        "CharBuffer",
        "wrap",
        "value",
        "write",
        "array",
        "limit",
        "array",
        "array",
        "Arrays",
        "asList",
        "array",
        "result",
        "array",
        "value",
        "array",
        "result",
        "add",
        "value",
        "array",
        "value",
        "array",
        "result",
        "add",
        "value",
        "array",
        "value",
        "array",
        "result",
        "add",
        "value",
        "array",
        "value",
        "array",
        "result",
        "add",
        "value",
        "array",
        "value",
        "array",
        "result",
        "add",
        "value",
        "array",
        "value",
        "array",
        "result",
        "add",
        "value",
        "array",
        "value",
        "array",
        "result",
        "add",
        "value",
        "array",
        "value",
        "array",
        "result",
        "add",
        "value",
        "result",
        "url",
        "parsed",
        "parsed",
        "url",
        "toString",
        "e",
        "e",
        "host",
        "parsed",
        "getHost",
        "port",
        "parsed",
        "getPort",
        "port",
        "host",
        "host",
        "toString",
        "port",
        "encoded",
        "parsed",
        "getProtocol",
        "host",
        "parsed",
        "getPath",
        "parsed",
        "getQuery",
        "toASCIIString",
        "paramsStart",
        "encoded",
        "indexOf",
        "paramsStart",
        "paramsStart",
        "encoded",
        "length",
        "encoded",
        "encoded",
        "substring",
        "paramsStart",
        "encoded",
        "substring",
        "paramsStart",
        "replace",
        "encoded",
        "e",
        "io",
        "io",
        "initCause",
        "e",
        "io",
        "url",
        "baseUrl",
        "url",
        "toString",
        "isEmpty",
        "baseUrl",
        "result",
        "baseUrl",
        "addPathSeparator",
        "baseUrl",
        "result",
        "addParamPrefix",
        "baseUrl",
        "result",
        "entry",
        "iterator",
        "entrySet",
        "iterator",
        "entry",
        "iterator",
        "next",
        "addParam",
        "entry",
        "getKey",
        "toString",
        "entry",
        "getValue",
        "result",
        "iterator",
        "hasNext",
        "result",
        "append",
        "entry",
        "iterator",
        "next",
        "addParam",
        "entry",
        "getKey",
        "toString",
        "entry",
        "getValue",
        "result",
        "result",
        "toString",
        "url",
        "baseUrl",
        "url",
        "toString",
        "length",
        "baseUrl",
        "length",
        "result",
        "baseUrl",
        "addPathSeparator",
        "baseUrl",
        "result",
        "addParamPrefix",
        "baseUrl",
        "result",
        "addParam",
        "result",
        "i",
        "i",
        "length",
        "i",
        "result",
        "append",
        "addParam",
        "i",
        "i",
        "result",
        "result",
        "toString",
        "url",
        "url",
        "METHOD_GET",
        "url",
        "url",
        "METHOD_GET",
        "baseUrl",
        "encode",
        "url",
        "append",
        "baseUrl",
        "get",
        "encode",
        "encode",
        "url",
        "url",
        "baseUrl",
        "encode",
        "url",
        "append",
        "baseUrl",
        "get",
        "encode",
        "encode",
        "url",
        "url",
        "url",
        "url",
        "METHOD_POST",
        "url",
        "url",
        "METHOD_POST",
        "baseUrl",
        "encode",
        "url",
        "append",
        "baseUrl",
        "post",
        "encode",
        "encode",
        "url",
        "url",
        "baseUrl",
        "encode",
        "url",
        "append",
        "baseUrl",
        "post",
        "encode",
        "encode",
        "url",
        "url",
        "url",
        "url",
        "METHOD_PUT",
        "url",
        "url",
        "METHOD_PUT",
        "baseUrl",
        "encode",
        "url",
        "append",
        "baseUrl",
        "put",
        "encode",
        "encode",
        "url",
        "url",
        "baseUrl",
        "encode",
        "url",
        "append",
        "baseUrl",
        "put",
        "encode",
        "encode",
        "url",
        "url",
        "url",
        "url",
        "METHOD_DELETE",
        "url",
        "url",
        "METHOD_DELETE",
        "baseUrl",
        "encode",
        "url",
        "append",
        "baseUrl",
        "encode",
        "encode",
        "url",
        "url",
        "baseUrl",
        "encode",
        "url",
        "append",
        "baseUrl",
        "encode",
        "encode",
        "url",
        "url",
        "url",
        "url",
        "METHOD_HEAD",
        "url",
        "url",
        "METHOD_HEAD",
        "baseUrl",
        "encode",
        "url",
        "append",
        "baseUrl",
        "head",
        "encode",
        "encode",
        "url",
        "url",
        "baseUrl",
        "encode",
        "url",
        "append",
        "baseUrl",
        "head",
        "encode",
        "encode",
        "url",
        "url",
        "url",
        "url",
        "METHOD_OPTIONS",
        "url",
        "url",
        "METHOD_OPTIONS",
        "url",
        "url",
        "METHOD_TRACE",
        "url",
        "url",
        "METHOD_TRACE",
        "keepAlive",
        "setProperty",
        "toString",
        "keepAlive",
        "maxConnections",
        "setProperty",
        "toString",
        "maxConnections",
        "host",
        "setProperty",
        "host",
        "setProperty",
        "host",
        "port",
        "portValue",
        "toString",
        "port",
        "setProperty",
        "portValue",
        "setProperty",
        "portValue",
        "hosts",
        "hosts",
        "hosts",
        "length",
        "separated",
        "last",
        "hosts",
        "length",
        "i",
        "i",
        "last",
        "i",
        "separated",
        "append",
        "hosts",
        "i",
        "append",
        "separated",
        "append",
        "hosts",
        "last",
        "setProperty",
        "separated",
        "toString",
        "setProperty",
        "name",
        "value",
        "action",
        "value",
        "action",
        "setProperty",
        "name",
        "value",
        "action",
        "clearProperty",
        "name",
        "AccessController",
        "doPrivileged",
        "action",
        "connection",
        "url",
        "requestMethod",
        "output",
        "multipart",
        "form",
        "ignoreCloseExceptions",
        "uncompress",
        "bufferSize",
        "totalSize",
        "totalWritten",
        "httpProxyHost",
        "httpProxyPort",
        "progress",
        "UploadProgress",
        "DEFAULT",
        "url",
        "method",
        "url",
        "url",
        "toString",
        "e",
        "e",
        "requestMethod",
        "method",
        "url",
        "method",
        "url",
        "url",
        "requestMethod",
        "method",
        "HTTP",
        "httpProxyHost",
        "httpProxyPort",
        "connection",
        "httpProxyHost",
        "connection",
        "CONNECTION_FACTORY",
        "create",
        "url",
        "createProxy",
        "connection",
        "CONNECTION_FACTORY",
        "create",
        "url",
        "connection",
        "setRequestMethod",
        "requestMethod",
        "connection",
        "e",
        "e",
        "Override",
        "method",
        "url",
        "connection",
        "connection",
        "createConnection",
        "connection",
        "ignore",
        "ignoreCloseExceptions",
        "ignore",
        "ignoreCloseExceptions",
        "closeOutput",
        "getConnection",
        "getResponseCode",
        "e",
        "e",
        "output",
        "output",
        "code",
        "HTTP_OK",
        "code",
        "HTTP_CREATED",
        "code",
        "HTTP_NO_CONTENT",
        "code",
        "HTTP_INTERNAL_ERROR",
        "code",
        "HTTP_BAD_REQUEST",
        "code",
        "HTTP_NOT_FOUND",
        "code",
        "HTTP_NOT_MODIFIED",
        "code",
        "closeOutput",
        "getConnection",
        "getResponseMessage",
        "e",
        "e",
        "getConnection",
        "disconnect",
        "size",
        "getConnection",
        "setChunkedStreamingMode",
        "size",
        "size",
        "size",
        "bufferSize",
        "size",
        "bufferSize",
        "uncompress",
        "uncompress",
        "uncompress",
        "size",
        "contentLength",
        "size",
        "size",
        "charset",
        "output",
        "byteStream",
        "copy",
        "buffer",
        "output",
        "output",
        "toString",
        "getValidCharset",
        "charset",
        "e",
        "e",
        "body",
        "charset",
        "output",
        "output",
        "body",
        "output",
        "charset",
        "output",
        "body",
        "charset",
        "contentLength",
        "output",
        "byteStream",
        "copy",
        "buffer",
        "output",
        "e",
        "e",
        "output",
        "toByteArray",
        "stream",
        "bufferSize",
        "stream",
        "code",
        "HTTP_BAD_REQUEST",
        "stream",
        "getConnection",
        "getInputStream",
        "e",
        "e",
        "stream",
        "getConnection",
        "getErrorStream",
        "stream",
        "stream",
        "getConnection",
        "getInputStream",
        "e",
        "contentLength",
        "e",
        "stream",
        "uncompress",
        "ENCODING_GZIP",
        "equals",
        "contentEncoding",
        "stream",
        "stream",
        "e",
        "e",
        "charset",
        "stream",
        "getValidCharset",
        "charset",
        "e",
        "e",
        "reader",
        "charset",
        "charset",
        "reader",
        "charset",
        "bufferSize",
        "bufferedReader",
        "charset",
        "file",
        "output",
        "output",
        "file",
        "bufferSize",
        "e",
        "e",
        "output",
        "ignoreCloseExceptions",
        "Override",
        "receive",
        "output",
        "call",
        "output",
        "copy",
        "buffer",
        "output",
        "e",
        "e",
        "output",
        "receive",
        "output",
        "appendable",
        "reader",
        "bufferedReader",
        "reader",
        "ignoreCloseExceptions",
        "Override",
        "buffer",
        "CharBuffer",
        "allocate",
        "bufferSize",
        "read",
        "read",
        "reader",
        "read",
        "buffer",
        "buffer",
        "rewind",
        "appendable",
        "append",
        "buffer",
        "read",
        "buffer",
        "rewind",
        "HttpRequest",
        "call",
        "writer",
        "reader",
        "bufferedReader",
        "reader",
        "ignoreCloseExceptions",
        "Override",
        "copy",
        "reader",
        "writer",
        "call",
        "timeout",
        "getConnection",
        "setReadTimeout",
        "timeout",
        "timeout",
        "getConnection",
        "setConnectTimeout",
        "timeout",
        "name",
        "value",
        "getConnection",
        "setRequestProperty",
        "name",
        "value",
        "name",
        "value",
        "header",
        "name",
        "value",
        "value",
        "toString",
        "headers",
        "headers",
        "isEmpty",
        "header",
        "headers",
        "entrySet",
        "header",
        "header",
        "header",
        "header",
        "header",
        "getKey",
        "header",
        "getValue",
        "name",
        "closeOutputQuietly",
        "getConnection",
        "getHeaderField",
        "name",
        "closeOutputQuietly",
        "getConnection",
        "getHeaderFields",
        "name",
        "dateHeader",
        "name",
        "name",
        "defaultValue",
        "closeOutputQuietly",
        "getConnection",
        "getHeaderFieldDate",
        "name",
        "defaultValue",
        "name",
        "intHeader",
        "name",
        "name",
        "defaultValue",
        "closeOutputQuietly",
        "getConnection",
        "getHeaderFieldInt",
        "name",
        "defaultValue",
        "name",
        "headers",
        "headers",
        "headers",
        "headers",
        "isEmpty",
        "EMPTY_STRINGS",
        "values",
        "headers",
        "get",
        "name",
        "values",
        "values",
        "isEmpty",
        "values",
        "toArray",
        "values",
        "size",
        "EMPTY_STRINGS",
        "headerName",
        "paramName",
        "getParam",
        "header",
        "headerName",
        "paramName",
        "headerName",
        "getParams",
        "header",
        "headerName",
        "header",
        "header",
        "header",
        "length",
        "Collections",
        "emptyMap",
        "headerLength",
        "header",
        "length",
        "start",
        "header",
        "indexOf",
        "start",
        "start",
        "headerLength",
        "Collections",
        "emptyMap",
        "end",
        "header",
        "indexOf",
        "start",
        "end",
        "end",
        "headerLength",
        "start",
        "end",
        "nameEnd",
        "header",
        "indexOf",
        "start",
        "nameEnd",
        "nameEnd",
        "end",
        "name",
        "header",
        "substring",
        "start",
        "nameEnd",
        "trim",
        "name",
        "length",
        "value",
        "header",
        "substring",
        "nameEnd",
        "end",
        "trim",
        "length",
        "value",
        "length",
        "length",
        "length",
        "value",
        "charAt",
        "value",
        "charAt",
        "length",
        "put",
        "name",
        "value",
        "substring",
        "length",
        "put",
        "name",
        "value",
        "start",
        "end",
        "end",
        "header",
        "indexOf",
        "start",
        "end",
        "end",
        "headerLength",
        "value",
        "paramName",
        "value",
        "value",
        "length",
        "length",
        "value",
        "length",
        "start",
        "value",
        "indexOf",
        "start",
        "start",
        "length",
        "end",
        "value",
        "indexOf",
        "start",
        "end",
        "end",
        "length",
        "start",
        "end",
        "nameEnd",
        "value",
        "indexOf",
        "start",
        "nameEnd",
        "nameEnd",
        "end",
        "paramName",
        "equals",
        "value",
        "substring",
        "start",
        "nameEnd",
        "trim",
        "paramValue",
        "value",
        "substring",
        "nameEnd",
        "end",
        "trim",
        "valueLength",
        "paramValue",
        "length",
        "valueLength",
        "valueLength",
        "paramValue",
        "charAt",
        "paramValue",
        "charAt",
        "valueLength",
        "paramValue",
        "substring",
        "valueLength",
        "paramValue",
        "start",
        "end",
        "end",
        "value",
        "indexOf",
        "start",
        "end",
        "end",
        "length",
        "parameter",
        "HEADER_CONTENT_TYPE",
        "PARAM_CHARSET",
        "userAgent",
        "header",
        "HEADER_USER_AGENT",
        "userAgent",
        "referer",
        "header",
        "HEADER_REFERER",
        "referer",
        "useCaches",
        "getConnection",
        "setUseCaches",
        "useCaches",
        "acceptEncoding",
        "header",
        "HEADER_ACCEPT_ENCODING",
        "acceptEncoding",
        "acceptEncoding",
        "ENCODING_GZIP",
        "acceptCharset",
        "header",
        "HEADER_ACCEPT_CHARSET",
        "acceptCharset",
        "header",
        "HEADER_CONTENT_ENCODING",
        "header",
        "HEADER_SERVER",
        "dateHeader",
        "HEADER_DATE",
        "header",
        "HEADER_CACHE_CONTROL",
        "header",
        "HEADER_ETAG",
        "dateHeader",
        "HEADER_EXPIRES",
        "dateHeader",
        "HEADER_LAST_MODIFIED",
        "header",
        "HEADER_LOCATION",
        "authorization",
        "header",
        "HEADER_AUTHORIZATION",
        "authorization",
        "proxyAuthorization",
        "header",
        "HEADER_PROXY_AUTHORIZATION",
        "proxyAuthorization",
        "name",
        "password",
        "authorization",
        "Base64",
        "encode",
        "name",
        "password",
        "name",
        "password",
        "proxyAuthorization",
        "Base64",
        "encode",
        "name",
        "password",
        "ifModifiedSince",
        "getConnection",
        "setIfModifiedSince",
        "ifModifiedSince",
        "ifNoneMatch",
        "header",
        "HEADER_IF_NONE_MATCH",
        "ifNoneMatch",
        "contentType",
        "contentType",
        "contentType",
        "contentType",
        "charset",
        "charset",
        "charset",
        "length",
        "separator",
        "PARAM_CHARSET",
        "header",
        "HEADER_CONTENT_TYPE",
        "contentType",
        "separator",
        "charset",
        "header",
        "HEADER_CONTENT_TYPE",
        "contentType",
        "header",
        "HEADER_CONTENT_TYPE",
        "intHeader",
        "HEADER_CONTENT_LENGTH",
        "contentLength",
        "contentLength",
        "parseInt",
        "contentLength",
        "contentLength",
        "getConnection",
        "setFixedLengthStreamingMode",
        "contentLength",
        "accept",
        "header",
        "HEADER_ACCEPT",
        "accept",
        "accept",
        "CONTENT_TYPE_JSON",
        "input",
        "output",
        "input",
        "ignoreCloseExceptions",
        "Override",
        "buffer",
        "bufferSize",
        "read",
        "read",
        "input",
        "read",
        "buffer",
        "output",
        "write",
        "buffer",
        "read",
        "totalWritten",
        "read",
        "progress",
        "onUpload",
        "totalWritten",
        "totalSize",
        "HttpRequest",
        "call",
        "input",
        "output",
        "input",
        "ignoreCloseExceptions",
        "Override",
        "buffer",
        "bufferSize",
        "read",
        "read",
        "input",
        "read",
        "buffer",
        "output",
        "write",
        "buffer",
        "read",
        "totalWritten",
        "read",
        "progress",
        "onUpload",
        "totalWritten",
        "HttpRequest",
        "call",
        "callback",
        "callback",
        "progress",
        "UploadProgress",
        "DEFAULT",
        "progress",
        "callback",
        "size",
        "totalSize",
        "totalSize",
        "totalSize",
        "size",
        "progress",
        "output",
        "multipart",
        "output",
        "write",
        "CRLF",
        "BOUNDARY",
        "CRLF",
        "ignoreCloseExceptions",
        "output",
        "close",
        "ignored",
        "output",
        "close",
        "output",
        "closeOutput",
        "e",
        "e",
        "output",
        "getConnection",
        "setDoOutput",
        "charset",
        "getParam",
        "getConnection",
        "getRequestProperty",
        "HEADER_CONTENT_TYPE",
        "PARAM_CHARSET",
        "output",
        "getConnection",
        "getOutputStream",
        "charset",
        "bufferSize",
        "multipart",
        "multipart",
        "contentType",
        "CONTENT_TYPE_MULTIPART",
        "openOutput",
        "output",
        "write",
        "BOUNDARY",
        "CRLF",
        "output",
        "write",
        "CRLF",
        "BOUNDARY",
        "CRLF",
        "name",
        "filename",
        "writePartHeader",
        "name",
        "filename",
        "name",
        "filename",
        "contentType",
        "partBuffer",
        "partBuffer",
        "append",
        "append",
        "name",
        "filename",
        "partBuffer",
        "append",
        "append",
        "filename",
        "partBuffer",
        "append",
        "partHeader",
        "partBuffer",
        "toString",
        "contentType",
        "partHeader",
        "HEADER_CONTENT_TYPE",
        "contentType",
        "send",
        "CRLF",
        "name",
        "part",
        "part",
        "name",
        "part",
        "name",
        "filename",
        "part",
        "part",
        "name",
        "filename",
        "part",
        "name",
        "filename",
        "contentType",
        "part",
        "startPart",
        "writePartHeader",
        "name",
        "filename",
        "contentType",
        "output",
        "write",
        "part",
        "e",
        "e",
        "name",
        "part",
        "part",
        "name",
        "part",
        "name",
        "filename",
        "part",
        "part",
        "name",
        "filename",
        "part",
        "part",
        "toString",
        "name",
        "part",
        "part",
        "name",
        "part",
        "name",
        "filename",
        "part",
        "part",
        "name",
        "filename",
        "part",
        "name",
        "filename",
        "contentType",
        "part",
        "stream",
        "stream",
        "part",
        "incrementTotalSize",
        "part",
        "length",
        "e",
        "e",
        "part",
        "name",
        "filename",
        "contentType",
        "stream",
        "name",
        "part",
        "part",
        "name",
        "part",
        "name",
        "filename",
        "contentType",
        "part",
        "startPart",
        "writePartHeader",
        "name",
        "filename",
        "contentType",
        "copy",
        "part",
        "output",
        "e",
        "e",
        "name",
        "value",
        "send",
        "name",
        "send",
        "send",
        "value",
        "send",
        "CRLF",
        "input",
        "stream",
        "stream",
        "input",
        "incrementTotalSize",
        "input",
        "length",
        "e",
        "e",
        "send",
        "stream",
        "input",
        "input",
        "incrementTotalSize",
        "input",
        "length",
        "send",
        "input",
        "input",
        "openOutput",
        "copy",
        "input",
        "output",
        "e",
        "e",
        "input",
        "openOutput",
        "e",
        "e",
        "writer",
        "output",
        "output",
        "encoder",
        "charset",
        "writer",
        "Override",
        "copy",
        "input",
        "writer",
        "call",
        "value",
        "openOutput",
        "output",
        "write",
        "value",
        "toString",
        "e",
        "e",
        "openOutput",
        "output",
        "output",
        "encoder",
        "charset",
        "e",
        "e",
        "values",
        "form",
        "values",
        "CHARSET_UTF8",
        "entry",
        "form",
        "entry",
        "CHARSET_UTF8",
        "entry",
        "charset",
        "form",
        "entry",
        "getKey",
        "entry",
        "getValue",
        "charset",
        "name",
        "value",
        "form",
        "name",
        "value",
        "CHARSET_UTF8",
        "name",
        "value",
        "charset",
        "first",
        "form",
        "first",
        "contentType",
        "CONTENT_TYPE_FORM",
        "charset",
        "form",
        "charset",
        "getValidCharset",
        "charset",
        "openOutput",
        "first",
        "output",
        "write",
        "output",
        "write",
        "URLEncoder",
        "encode",
        "name",
        "toString",
        "charset",
        "output",
        "write",
        "value",
        "output",
        "write",
        "URLEncoder",
        "encode",
        "value",
        "toString",
        "charset",
        "e",
        "e",
        "values",
        "charset",
        "values",
        "isEmpty",
        "entry",
        "values",
        "entrySet",
        "form",
        "entry",
        "charset",
        "connection",
        "getConnection",
        "connection",
        "connection",
        "setSSLSocketFactory",
        "getTrustedFactory",
        "connection",
        "getConnection",
        "connection",
        "connection",
        "setHostnameVerifier",
        "getTrustedVerifier",
        "getConnection",
        "getURL",
        "getConnection",
        "getRequestMethod",
        "proxyHost",
        "proxyPort",
        "connection",
        "httpProxyHost",
        "proxyHost",
        "httpProxyPort",
        "proxyPort",
        "followRedirects",
        "getConnection",
        "setInstanceFollowRedirects",
        "followRedirects"
    ],
    "literals": [
        "\"UTF-8\"",
        "\"application/x-www-form-urlencoded\"",
        "\"application/json\"",
        "\"gzip\"",
        "\"Accept\"",
        "\"Accept-Charset\"",
        "\"Accept-Encoding\"",
        "\"Authorization\"",
        "\"Cache-Control\"",
        "\"Content-Encoding\"",
        "\"Content-Length\"",
        "\"Content-Type\"",
        "\"Date\"",
        "\"ETag\"",
        "\"Expires\"",
        "\"If-None-Match\"",
        "\"Last-Modified\"",
        "\"Location\"",
        "\"Proxy-Authorization\"",
        "\"Referer\"",
        "\"Server\"",
        "\"User-Agent\"",
        "\"DELETE\"",
        "\"GET\"",
        "\"HEAD\"",
        "\"OPTIONS\"",
        "\"POST\"",
        "\"PUT\"",
        "\"TRACE\"",
        "\"charset\"",
        "\"00content0boundary00\"",
        "\"multipart/form-data; boundary=\"",
        "\"\\r\\n\"",
        "\"TLS\"",
        "\"Security exception configuring SSL context\"",
        "\"[]=\"",
        "\"&\"",
        "\"=\"",
        "\"US-ASCII\"",
        "\"Cannot serialize a null array.\"",
        "\"Cannot have negative offset: \"",
        "\"Cannot have length offset: \"",
        "\"Cannot have offset of %d and length of %d with array of length %d\"",
        "\"+\"",
        "\"%2B\"",
        "\"Parsing URI failed\"",
        "\"Must specify an even number of parameter names/values\"",
        "\"http.keepAlive\"",
        "\"http.maxConnections\"",
        "\"http.proxyHost\"",
        "\"https.proxyHost\"",
        "\"http.proxyPort\"",
        "\"https.proxyPort\"",
        "\"http.nonProxyHosts\"",
        "\"http.nonProxyHosts\"",
        "\"Size must be greater than zero\"",
        "\"Basic \"",
        "\"Basic \"",
        "\"; \"",
        "\"--\"",
        "\"--\"",
        "\"--\"",
        "\"--\"",
        "\"form-data; name=\\\"\"",
        "\"\\\"; filename=\\\"\"",
        "\"Content-Disposition\"",
        "\": \"",
        "\"The connection has already been created. This method must be called before reading or writing to the request.\""
    ],
    "variables": [
        "TRUSTED_FACTORY",
        "TRUSTED_VERIFIER",
        "bytes",
        "closeable",
        "ignoreCloseExceptions",
        "flushable",
        "encoder",
        "parsed",
        "entry",
        "params",
        "params",
        "params",
        "params",
        "params",
        "params",
        "hosts",
        "action",
        "url",
        "requestMethod",
        "output",
        "multipart",
        "form",
        "httpProxyHost",
        "httpProxyPort",
        "connection",
        "stream",
        "output",
        "read",
        "read",
        "read",
        "stream",
        "stream"
    ],
    "comments": [
        "Intentionally left blank",
        "Intentionally left blank",
        "Add trailing slash if the base URL doesn't have any path segments.",
        "",
        "The following test is checking for the last slash not being part of",
        "the protocol to host separator: '://'.",
        "Add '?' if missing and add '&' if params already exist in base url",
        "Bytes needed for actual encoding",
        "Ignored",
        "Arrays of the primitive types can't be cast to array of Object, so this:",
        "Ignored"
    ],
    "docstrings": [
        "* Copyright (c) 2014 Kevin Sawicki <kevinsawicki@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.",
        "* A fluid interface for making HTTP requests using an underlying\n * {@link HttpURLConnection} (or sub-class).\n * <p>\n * Each instance supports making a single request and cannot be reused for\n * further requests.",
        "* 'UTF-8' charset name",
        "* 'application/x-www-form-urlencoded' content type header value",
        "* 'application/json' content type header value",
        "* 'gzip' encoding header value",
        "* 'Accept' header name",
        "* 'Accept-Charset' header name",
        "* 'Accept-Encoding' header name",
        "* 'Authorization' header name",
        "* 'Cache-Control' header name",
        "* 'Content-Encoding' header name",
        "* 'Content-Length' header name",
        "* 'Content-Type' header name",
        "* 'Date' header name",
        "* 'ETag' header name",
        "* 'Expires' header name",
        "* 'If-None-Match' header name",
        "* 'Last-Modified' header name",
        "* 'Location' header name",
        "* 'Proxy-Authorization' header name",
        "* 'Referer' header name",
        "* 'Server' header name",
        "* 'User-Agent' header name",
        "* 'DELETE' request method",
        "* 'GET' request method",
        "* 'HEAD' request method",
        "* 'OPTIONS' options method",
        "* 'POST' request method",
        "* 'PUT' request method",
        "* 'TRACE' request method",
        "* 'charset' header value parameter",
        "* Creates {@link HttpURLConnection HTTP connections} for\n   * {@link URL urls}.",
        "* Open an {@link HttpURLConnection} for the specified {@link URL}.\n     *\n     * @throws IOException",
        "* Open an {@link HttpURLConnection} for the specified {@link URL}\n     * and {@link Proxy}.\n     *\n     * @throws IOException",
        "* A {@link ConnectionFactory} which uses the built-in\n     * {@link URL#openConnection()}",
        "* Specify the {@link ConnectionFactory} used to create new requests.",
        "* Callback interface for reporting upload progress for a request.",
        "* Callback invoked as data is uploaded by the request.\n     *\n     * @param uploaded The number of bytes already uploaded\n     * @param total The total number of bytes that will be uploaded or -1 if\n     *              the length is unknown.",
        "* <p>\n   * Encodes and decodes to and from Base64 notation.\n   * </p>\n   * <p>\n   * I am placing this code in the Public Domain. Do with it as you will. This\n   * software comes with no guarantees or warranties but with plenty of\n   * well-wishing instead! Please visit <a\n   * href=\"http://iharder.net/base64\">http://iharder.net/base64</a> periodically\n   * to check for updates or to contribute improvements.\n   * </p>\n   *\n   * @author Robert Harder\n   * @author rob@iharder.net\n   * @version 2.3.7",
        "The equals sign (=) as a byte.",
        "Preferred encoding.",
        "The 64 valid Base64 values.",
        "Defeats instantiation.",
        "* <p>\n     * Encodes up to three bytes of the array <var>source</var> and writes the\n     * resulting four Base64 bytes to <var>destination</var>. The source and\n     * destination arrays can be manipulated anywhere along their length by\n     * specifying <var>srcOffset</var> and <var>destOffset</var>. This method\n     * does not check to make sure your arrays are large enough to accomodate\n     * <var>srcOffset</var> + 3 for the <var>source</var> array or\n     * <var>destOffset</var> + 4 for the <var>destination</var> array. The\n     * actual number of significant bytes in your array is given by\n     * <var>numSigBytes</var>.\n     * </p>\n     * <p>\n     * This is the lowest level of the encoding methods with all possible\n     * parameters.\n     * </p>\n     *\n     * @param source\n     *          the array to convert\n     * @param srcOffset\n     *          the index where conversion begins\n     * @param numSigBytes\n     *          the number of significant bytes in your array\n     * @param destination\n     *          the array to hold the conversion\n     * @param destOffset\n     *          the index where output will be put\n     * @return the <var>destination</var> array\n     * @since 1.3",
        "* Encode string as a byte array in Base64 annotation.\n     *\n     * @param string\n     * @return The Base64-encoded data as a string",
        "* Encodes a byte array into Base64 notation.\n     *\n     * @param source\n     *          The data to convert\n     * @return The Base64-encoded data as a String\n     * @throws NullPointerException\n     *           if source array is null\n     * @throws IllegalArgumentException\n     *           if source array, offset, or length are invalid\n     * @since 2.0",
        "* Encodes a byte array into Base64 notation.\n     *\n     * @param source\n     *          The data to convert\n     * @param off\n     *          Offset in array where conversion should begin\n     * @param len\n     *          Length of data to convert\n     * @return The Base64-encoded data as a String\n     * @throws NullPointerException\n     *           if source array is null\n     * @throws IllegalArgumentException\n     *           if source array, offset, or length are invalid\n     * @since 2.0",
        "* Similar to {@link #encodeBytes(byte[], int, int)} but returns a byte\n     * array instead of instantiating a String. This is more efficient if you're\n     * working with I/O streams and have large data sets to encode.\n     *\n     *\n     * @param source\n     *          The data to convert\n     * @param off\n     *          Offset in array where conversion should begin\n     * @param len\n     *          Length of data to convert\n     * @return The Base64-encoded data as a String if there is an error\n     * @throws NullPointerException\n     *           if source array is null\n     * @throws IllegalArgumentException\n     *           if source array, offset, or length are invalid\n     * @since 2.3.1",
        "* HTTP request exception whose cause is always an {@link IOException}",
        "* Create a new HttpRequestException with the given cause\n     *\n     * @param cause",
        "* Get {@link IOException} that triggered this request exception\n     *\n     * @return {@link IOException} cause",
        "* Operation that handles executing a callback once complete and handling\n   * nested exceptions\n   *\n   * @param <V>",
        "* Run operation\n     *\n     * @return result\n     * @throws HttpRequestException\n     * @throws IOException",
        "* Operation complete callback\n     *\n     * @throws IOException",
        "* Class that ensures a {@link Closeable} gets closed with proper exception\n   * handling.\n   *\n   * @param <V>",
        "* Create closer for operation\n     *\n     * @param closeable\n     * @param ignoreCloseExceptions",
        "* Class that and ensures a {@link Flushable} gets flushed with proper\n   * exception handling.\n   *\n   * @param <V>",
        "* Create flush operation\n     *\n     * @param flushable",
        "* Request output stream",
        "* Create request output stream\n     *\n     * @param stream\n     * @param charset\n     * @param bufferSize",
        "* Write string to stream\n     *\n     * @param value\n     * @return this stream\n     * @throws IOException",
        "* Represents array of any type as list of objects so we can easily iterate over it\n   * @param array of elements\n   * @return list with the same elements",
        "* Encode the given URL as an ASCII {@link String}\n   * <p>\n   * This method ensures the path and query segments of the URL are properly\n   * encoded such as ' ' characters being encoded to '%20' or any UTF-8\n   * characters that are non-ASCII. No encoding of URLs is done by default by\n   * the {@link HttpRequest} constructors and so if URL encoding is needed this\n   * method should be called before calling the {@link HttpRequest} constructor.\n   *\n   * @param url\n   * @return encoded URL\n   * @throws HttpRequestException",
        "* Append given map as query parameters to the base URL\n   * <p>\n   * Each map entry's key will be a parameter name and the value's\n   * {@link Object#toString()} will be the parameter value.\n   *\n   * @param url\n   * @param params\n   * @return URL with appended query params",
        "* Append given name/value pairs as query parameters to the base URL\n   * <p>\n   * The params argument is interpreted as a sequence of name/value pairs so the\n   * given number of params must be divisible by 2.\n   *\n   * @param url\n   * @param params\n   *          name/value pairs\n   * @return URL with appended query params",
        "* Start a 'GET' request to the given URL\n   *\n   * @param url\n   * @return request\n   * @throws HttpRequestException",
        "* Start a 'GET' request to the given URL\n   *\n   * @param url\n   * @return request\n   * @throws HttpRequestException",
        "* Start a 'GET' request to the given URL along with the query params\n   *\n   * @param baseUrl\n   * @param params\n   *          The query parameters to include as part of the baseUrl\n   * @param encode\n   *          true to encode the full URL\n   *\n   * @see #append(CharSequence, Map)\n   * @see #encode(CharSequence)\n   *\n   * @return request",
        "* Start a 'GET' request to the given URL along with the query params\n   *\n   * @param baseUrl\n   * @param encode\n   *          true to encode the full URL\n   * @param params\n   *          the name/value query parameter pairs to include as part of the\n   *          baseUrl\n   *\n   * @see #append(CharSequence, Object...)\n   * @see #encode(CharSequence)\n   *\n   * @return request",
        "* Start a 'POST' request to the given URL\n   *\n   * @param url\n   * @return request\n   * @throws HttpRequestException",
        "* Start a 'POST' request to the given URL\n   *\n   * @param url\n   * @return request\n   * @throws HttpRequestException",
        "* Start a 'POST' request to the given URL along with the query params\n   *\n   * @param baseUrl\n   * @param params\n   *          the query parameters to include as part of the baseUrl\n   * @param encode\n   *          true to encode the full URL\n   *\n   * @see #append(CharSequence, Map)\n   * @see #encode(CharSequence)\n   *\n   * @return request",
        "* Start a 'POST' request to the given URL along with the query params\n   *\n   * @param baseUrl\n   * @param encode\n   *          true to encode the full URL\n   * @param params\n   *          the name/value query parameter pairs to include as part of the\n   *          baseUrl\n   *\n   * @see #append(CharSequence, Object...)\n   * @see #encode(CharSequence)\n   *\n   * @return request",
        "* Start a 'PUT' request to the given URL\n   *\n   * @param url\n   * @return request\n   * @throws HttpRequestException",
        "* Start a 'PUT' request to the given URL\n   *\n   * @param url\n   * @return request\n   * @throws HttpRequestException",
        "* Start a 'PUT' request to the given URL along with the query params\n   *\n   * @param baseUrl\n   * @param params\n   *          the query parameters to include as part of the baseUrl\n   * @param encode\n   *          true to encode the full URL\n   *\n   * @see #append(CharSequence, Map)\n   * @see #encode(CharSequence)\n   *\n   * @return request",
        "* Start a 'PUT' request to the given URL along with the query params\n   *\n   * @param baseUrl\n   * @param encode\n   *          true to encode the full URL\n   * @param params\n   *          the name/value query parameter pairs to include as part of the\n   *          baseUrl\n   *\n   * @see #append(CharSequence, Object...)\n   * @see #encode(CharSequence)\n   *\n   * @return request",
        "* Start a 'DELETE' request to the given URL\n   *\n   * @param url\n   * @return request\n   * @throws HttpRequestException",
        "* Start a 'DELETE' request to the given URL\n   *\n   * @param url\n   * @return request\n   * @throws HttpRequestException",
        "* Start a 'DELETE' request to the given URL along with the query params\n   *\n   * @param baseUrl\n   * @param params\n   *          The query parameters to include as part of the baseUrl\n   * @param encode\n   *          true to encode the full URL\n   *\n   * @see #append(CharSequence, Map)\n   * @see #encode(CharSequence)\n   *\n   * @return request",
        "* Start a 'DELETE' request to the given URL along with the query params\n   *\n   * @param baseUrl\n   * @param encode\n   *          true to encode the full URL\n   * @param params\n   *          the name/value query parameter pairs to include as part of the\n   *          baseUrl\n   *\n   * @see #append(CharSequence, Object...)\n   * @see #encode(CharSequence)\n   *\n   * @return request",
        "* Start a 'HEAD' request to the given URL\n   *\n   * @param url\n   * @return request\n   * @throws HttpRequestException",
        "* Start a 'HEAD' request to the given URL\n   *\n   * @param url\n   * @return request\n   * @throws HttpRequestException",
        "* Start a 'HEAD' request to the given URL along with the query params\n   *\n   * @param baseUrl\n   * @param params\n   *          The query parameters to include as part of the baseUrl\n   * @param encode\n   *          true to encode the full URL\n   *\n   * @see #append(CharSequence, Map)\n   * @see #encode(CharSequence)\n   *\n   * @return request",
        "* Start a 'GET' request to the given URL along with the query params\n   *\n   * @param baseUrl\n   * @param encode\n   *          true to encode the full URL\n   * @param params\n   *          the name/value query parameter pairs to include as part of the\n   *          baseUrl\n   *\n   * @see #append(CharSequence, Object...)\n   * @see #encode(CharSequence)\n   *\n   * @return request",
        "* Start an 'OPTIONS' request to the given URL\n   *\n   * @param url\n   * @return request\n   * @throws HttpRequestException",
        "* Start an 'OPTIONS' request to the given URL\n   *\n   * @param url\n   * @return request\n   * @throws HttpRequestException",
        "* Start a 'TRACE' request to the given URL\n   *\n   * @param url\n   * @return request\n   * @throws HttpRequestException",
        "* Start a 'TRACE' request to the given URL\n   *\n   * @param url\n   * @return request\n   * @throws HttpRequestException",
        "* Set the 'http.keepAlive' property to the given value.\n   * <p>\n   * This setting will apply to all requests.\n   *\n   * @param keepAlive",
        "* Set the 'http.maxConnections' property to the given value.\n   * <p>\n   * This setting will apply to all requests.\n   *\n   * @param maxConnections",
        "* Set the 'http.proxyHost' and 'https.proxyHost' properties to the given host\n   * value.\n   * <p>\n   * This setting will apply to all requests.\n   *\n   * @param host",
        "* Set the 'http.proxyPort' and 'https.proxyPort' properties to the given port\n   * number.\n   * <p>\n   * This setting will apply to all requests.\n   *\n   * @param port",
        "* Set the 'http.nonProxyHosts' property to the given host values.\n   * <p>\n   * Hosts will be separated by a '|' character.\n   * <p>\n   * This setting will apply to all requests.\n   *\n   * @param hosts",
        "* Set property to given value.\n   * <p>\n   * Specifying a null value will cause the property to be cleared\n   *\n   * @param name\n   * @param value\n   * @return previous value",
        "* Create HTTP connection wrapper\n   *\n   * @param url Remote resource URL.\n   * @param method HTTP request method (e.g., \"GET\", \"POST\").\n   * @throws HttpRequestException",
        "* Create HTTP connection wrapper\n   *\n   * @param url Remote resource URL.\n   * @param method HTTP request method (e.g., \"GET\", \"POST\").\n   * @throws HttpRequestException",
        "* Get underlying connection\n   *\n   * @return connection",
        "* Set whether or not to ignore exceptions that occur from calling\n   * {@link Closeable#close()}\n   * <p>\n   * The default value of this setting is <code>true</code>\n   *\n   * @param ignore\n   * @return this request",
        "* Get whether or not exceptions thrown by {@link Closeable#close()} are\n   * ignored\n   *\n   * @return true if ignoring, false if throwing",
        "* Get the status code of the response\n   *\n   * @return the response code\n   * @throws HttpRequestException",
        "* Set the value of the given {@link AtomicInteger} to the status code of the\n   * response\n   *\n   * @param output\n   * @return this request\n   * @throws HttpRequestException",
        "* Is the response code a 200 OK?\n   *\n   * @return true if 200, false otherwise\n   * @throws HttpRequestException",
        "* Is the response code a 201 Created?\n   *\n   * @return true if 201, false otherwise\n   * @throws HttpRequestException",
        "* Is the response code a 204 No Content?\n   *\n   * @return true if 204, false otherwise\n   * @throws HttpRequestException",
        "* Is the response code a 500 Internal Server Error?\n   *\n   * @return true if 500, false otherwise\n   * @throws HttpRequestException",
        "* Is the response code a 400 Bad Request?\n   *\n   * @return true if 400, false otherwise\n   * @throws HttpRequestException",
        "* Is the response code a 404 Not Found?\n   *\n   * @return true if 404, false otherwise\n   * @throws HttpRequestException",
        "* Is the response code a 304 Not Modified?\n   *\n   * @return true if 304, false otherwise\n   * @throws HttpRequestException",
        "* Get status message of the response\n   *\n   * @return message\n   * @throws HttpRequestException",
        "* Disconnect the connection\n   *\n   * @return this request",
        "* Set chunked streaming mode to the given size\n   *\n   * @param size\n   * @return this request",
        "* Set the size used when buffering and copying between streams\n   * <p>\n   * This size is also used for send and receive buffers created for both char\n   * and byte arrays\n   * <p>\n   * The default buffer size is 8,192 bytes\n   *\n   * @param size\n   * @return this request",
        "* Get the configured buffer size\n   * <p>\n   * The default buffer size is 8,192 bytes\n   *\n   * @return buffer size",
        "* Set whether or not the response body should be automatically uncompressed\n   * when read from.\n   * <p>\n   * This will only affect requests that have the 'Content-Encoding' response\n   * header set to 'gzip'.\n   * <p>\n   * This causes all receive methods to use a {@link GZIPInputStream} when\n   * applicable so that higher level streams and readers can read the data\n   * uncompressed.\n   * <p>\n   * Setting this option does not cause any request headers to be set\n   * automatically so {@link #acceptGzipEncoding()} should be used in\n   * conjunction with this setting to tell the server to gzip the response.\n   *\n   * @param uncompress\n   * @return this request",
        "* Create byte array output stream\n   *\n   * @return stream",
        "* Get response as {@link String} in given character set\n   * <p>\n   * This will fall back to using the UTF-8 character set if the given charset\n   * is null\n   *\n   * @param charset\n   * @return string\n   * @throws HttpRequestException",
        "* Get response as {@link String} using character set returned from\n   * {@link #charset()}\n   *\n   * @return string\n   * @throws HttpRequestException",
        "* Get the response body as a {@link String} and set it as the value of the\n   * given reference.\n   *\n   * @param output\n   * @return this request\n   * @throws HttpRequestException",
        "* Get the response body as a {@link String} and set it as the value of the\n   * given reference.\n   *\n   * @param output\n   * @param charset\n   * @return this request\n   * @throws HttpRequestException",
        "* Is the response body empty?\n   *\n   * @return true if the Content-Length response header is 0, false otherwise\n   * @throws HttpRequestException",
        "* Get response as byte array\n   *\n   * @return byte array\n   * @throws HttpRequestException",
        "* Get response in a buffered stream\n   *\n   * @see #bufferSize(int)\n   * @return stream\n   * @throws HttpRequestException",
        "* Get stream to response body\n   *\n   * @return stream\n   * @throws HttpRequestException",
        "* Get reader to response body using given character set.\n   * <p>\n   * This will fall back to using the UTF-8 character set if the given charset\n   * is null\n   *\n   * @param charset\n   * @return reader\n   * @throws HttpRequestException",
        "* Get reader to response body using the character set returned from\n   * {@link #charset()}\n   *\n   * @return reader\n   * @throws HttpRequestException",
        "* Get buffered reader to response body using the given character set r and\n   * the configured buffer size\n   *\n   *\n   * @see #bufferSize(int)\n   * @param charset\n   * @return reader\n   * @throws HttpRequestException",
        "* Get buffered reader to response body using the character set returned from\n   * {@link #charset()} and the configured buffer size\n   *\n   * @see #bufferSize(int)\n   * @return reader\n   * @throws HttpRequestException",
        "* Stream response body to file\n   *\n   * @param file\n   * @return this request\n   * @throws HttpRequestException",
        "* Stream response to given output stream\n   *\n   * @param output\n   * @return this request\n   * @throws HttpRequestException",
        "* Stream response to given print stream\n   *\n   * @param output\n   * @return this request\n   * @throws HttpRequestException",
        "* Receive response into the given appendable\n   *\n   * @param appendable\n   * @return this request\n   * @throws HttpRequestException",
        "* Receive response into the given writer\n   *\n   * @param writer\n   * @return this request\n   * @throws HttpRequestException",
        "* Set read timeout on connection to given value\n   *\n   * @param timeout\n   * @return this request",
        "* Set connect timeout on connection to given value\n   *\n   * @param timeout\n   * @return this request",
        "* Set header name to given value\n   *\n   * @param name\n   * @param value\n   * @return this request",
        "* Set header name to given value\n   *\n   * @param name\n   * @param value\n   * @return this request",
        "* Set all headers found in given map where the keys are the header names and\n   * the values are the header values\n   *\n   * @param headers\n   * @return this request",
        "* Set header to have given entry's key as the name and value as the value\n   *\n   * @param header\n   * @return this request",
        "* Get a response header\n   *\n   * @param name\n   * @return response header\n   * @throws HttpRequestException",
        "* Get all the response headers\n   *\n   * @return map of response header names to their value(s)\n   * @throws HttpRequestException",
        "* Get a date header from the response falling back to returning -1 if the\n   * header is missing or parsing fails\n   *\n   * @param name\n   * @return date, -1 on failures\n   * @throws HttpRequestException",
        "* Get a date header from the response falling back to returning the given\n   * default value if the header is missing or parsing fails\n   *\n   * @param name\n   * @param defaultValue\n   * @return date, default value on failures\n   * @throws HttpRequestException",
        "* Get an integer header from the response falling back to returning -1 if the\n   * header is missing or parsing fails\n   *\n   * @param name\n   * @return header value as an integer, -1 when missing or parsing fails\n   * @throws HttpRequestException",
        "* Get an integer header value from the response falling back to the given\n   * default value if the header is missing or if parsing fails\n   *\n   * @param name\n   * @param defaultValue\n   * @return header value as an integer, default value when missing or parsing\n   *         fails\n   * @throws HttpRequestException",
        "* Get all values of the given header from the response\n   *\n   * @param name\n   * @return non-null but possibly empty array of {@link String} header values",
        "* Get parameter with given name from header value in response\n   *\n   * @param headerName\n   * @param paramName\n   * @return parameter value or null if missing",
        "* Get all parameters from header value in response\n   * <p>\n   * This will be all key=value pairs after the first ';' that are separated by\n   * a ';'\n   *\n   * @param headerName\n   * @return non-null but possibly empty map of parameter headers",
        "* Get parameter values from header value\n   *\n   * @param header\n   * @return parameter value or null if none",
        "* Get parameter value from header value\n   *\n   * @param value\n   * @param paramName\n   * @return parameter value or null if none",
        "* Get 'charset' parameter from 'Content-Type' response header\n   *\n   * @return charset or null if none",
        "* Set the 'User-Agent' header to given value\n   *\n   * @param userAgent\n   * @return this request",
        "* Set the 'Referer' header to given value\n   *\n   * @param referer\n   * @return this request",
        "* Set value of {@link HttpURLConnection#setUseCaches(boolean)}\n   *\n   * @param useCaches\n   * @return this request",
        "* Set the 'Accept-Encoding' header to given value\n   *\n   * @param acceptEncoding\n   * @return this request",
        "* Set the 'Accept-Encoding' header to 'gzip'\n   *\n   * @see #uncompress(boolean)\n   * @return this request",
        "* Set the 'Accept-Charset' header to given value\n   *\n   * @param acceptCharset\n   * @return this request",
        "* Get the 'Content-Encoding' header from the response\n   *\n   * @return this request",
        "* Get the 'Server' header from the response\n   *\n   * @return server",
        "* Get the 'Date' header from the response\n   *\n   * @return date value, -1 on failures",
        "* Get the 'Cache-Control' header from the response\n   *\n   * @return cache control",
        "* Get the 'ETag' header from the response\n   *\n   * @return entity tag",
        "* Get the 'Expires' header from the response\n   *\n   * @return expires value, -1 on failures",
        "* Get the 'Last-Modified' header from the response\n   *\n   * @return last modified value, -1 on failures",
        "* Get the 'Location' header from the response\n   *\n   * @return location",
        "* Set the 'Authorization' header to given value\n   *\n   * @param authorization\n   * @return this request",
        "* Set the 'Proxy-Authorization' header to given value\n   *\n   * @param proxyAuthorization\n   * @return this request",
        "* Set the 'Authorization' header to given values in Basic authentication\n   * format\n   *\n   * @param name\n   * @param password\n   * @return this request",
        "* Set the 'Proxy-Authorization' header to given values in Basic authentication\n   * format\n   *\n   * @param name\n   * @param password\n   * @return this request",
        "* Set the 'If-Modified-Since' request header to the given value\n   *\n   * @param ifModifiedSince\n   * @return this request",
        "* Set the 'If-None-Match' request header to the given value\n   *\n   * @param ifNoneMatch\n   * @return this request",
        "* Set the 'Content-Type' request header to the given value\n   *\n   * @param contentType\n   * @return this request",
        "* Set the 'Content-Type' request header to the given value and charset\n   *\n   * @param contentType\n   * @param charset\n   * @return this request",
        "* Get the 'Content-Type' header from the response\n   *\n   * @return response header value",
        "* Get the 'Content-Length' header from the response\n   *\n   * @return response header value",
        "* Set the 'Content-Length' request header to the given value\n   *\n   * @param contentLength\n   * @return this request",
        "* Set the 'Content-Length' request header to the given value\n   *\n   * @param contentLength\n   * @return this request",
        "* Set the 'Accept' header to given value\n   *\n   * @param accept\n   * @return this request",
        "* Set the 'Accept' header to 'application/json'\n   *\n   * @return this request",
        "* Copy from input stream to output stream\n   *\n   * @param input\n   * @param output\n   * @return this request\n   * @throws IOException",
        "* Copy from reader to writer\n   *\n   * @param input\n   * @param output\n   * @return this request\n   * @throws IOException",
        "* Set the UploadProgress callback for this request\n   *\n   * @param callback\n   * @return this request",
        "* Close output stream\n   *\n   * @return this request\n   * @throws HttpRequestException\n   * @throws IOException",
        "* Call {@link #closeOutput()} and re-throw a caught {@link IOException}s as\n   * an {@link HttpRequestException}\n   *\n   * @return this request\n   * @throws HttpRequestException",
        "* Open output stream\n   *\n   * @return this request\n   * @throws IOException",
        "* Start part of a multipart\n   *\n   * @return this request\n   * @throws IOException",
        "* Write part header\n   *\n   * @param name\n   * @param filename\n   * @return this request\n   * @throws IOException",
        "* Write part header\n   *\n   * @param name\n   * @param filename\n   * @param contentType\n   * @return this request\n   * @throws IOException",
        "* Write part of a multipart request to the request body\n   *\n   * @param name\n   * @param part\n   * @return this request",
        "* Write part of a multipart request to the request body\n   *\n   * @param name\n   * @param filename\n   * @param part\n   * @return this request\n   * @throws HttpRequestException",
        "* Write part of a multipart request to the request body\n   *\n   * @param name\n   * @param filename\n   * @param contentType\n   *          value of the Content-Type part header\n   * @param part\n   * @return this request\n   * @throws HttpRequestException",
        "* Write part of a multipart request to the request body\n   *\n   * @param name\n   * @param part\n   * @return this request\n   * @throws HttpRequestException",
        "* Write part of a multipart request to the request body\n   *\n   * @param name\n   * @param filename\n   * @param part\n   * @return this request\n   * @throws HttpRequestException",
        "* Write part of a multipart request to the request body\n   *\n   * @param name\n   * @param part\n   * @return this request\n   * @throws HttpRequestException",
        "* Write part of a multipart request to the request body\n   *\n   * @param name\n   * @param filename\n   * @param part\n   * @return this request\n   * @throws HttpRequestException",
        "* Write part of a multipart request to the request body\n   *\n   * @param name\n   * @param filename\n   * @param contentType\n   *          value of the Content-Type part header\n   * @param part\n   * @return this request\n   * @throws HttpRequestException",
        "* Write part of a multipart request to the request body\n   *\n   * @param name\n   * @param part\n   * @return this request\n   * @throws HttpRequestException",
        "* Write part of a multipart request to the request body\n   *\n   * @param name\n   * @param filename\n   * @param contentType\n   *          value of the Content-Type part header\n   * @param part\n   * @return this request\n   * @throws HttpRequestException",
        "* Write a multipart header to the response body\n   *\n   * @param name\n   * @param value\n   * @return this request\n   * @throws HttpRequestException",
        "* Write contents of file to request body\n   *\n   * @param input\n   * @return this request\n   * @throws HttpRequestException",
        "* Write byte array to request body\n   *\n   * @param input\n   * @return this request\n   * @throws HttpRequestException",
        "* Write stream to request body\n   * <p>\n   * The given stream will be closed once sending completes\n   *\n   * @param input\n   * @return this request\n   * @throws HttpRequestException",
        "* Write reader to request body\n   * <p>\n   * The given reader will be closed once sending completes\n   *\n   * @param input\n   * @return this request\n   * @throws HttpRequestException",
        "* Write char sequence to request body\n   * <p>\n   * The charset configured via {@link #contentType(String)} will be used and\n   * UTF-8 will be used if it is unset.\n   *\n   * @param value\n   * @return this request\n   * @throws HttpRequestException",
        "* Create writer to request output stream\n   *\n   * @return writer\n   * @throws HttpRequestException",
        "* Write the values in the map as form data to the request body\n   * <p>\n   * The pairs specified will be URL-encoded in UTF-8 and sent with the\n   * 'application/x-www-form-urlencoded' content-type\n   *\n   * @param values\n   * @return this request\n   * @throws HttpRequestException",
        "* Write the key and value in the entry as form data to the request body\n   * <p>\n   * The pair specified will be URL-encoded in UTF-8 and sent with the\n   * 'application/x-www-form-urlencoded' content-type\n   *\n   * @param entry\n   * @return this request\n   * @throws HttpRequestException",
        "* Write the key and value in the entry as form data to the request body\n   * <p>\n   * The pair specified will be URL-encoded and sent with the\n   * 'application/x-www-form-urlencoded' content-type\n   *\n   * @param entry\n   * @param charset\n   * @return this request\n   * @throws HttpRequestException",
        "* Write the name/value pair as form data to the request body\n   * <p>\n   * The pair specified will be URL-encoded in UTF-8 and sent with the\n   * 'application/x-www-form-urlencoded' content-type\n   *\n   * @param name\n   * @param value\n   * @return this request\n   * @throws HttpRequestException",
        "* Write the name/value pair as form data to the request body\n   * <p>\n   * The values specified will be URL-encoded and sent with the\n   * 'application/x-www-form-urlencoded' content-type\n   *\n   * @param name\n   * @param value\n   * @param charset\n   * @return this request\n   * @throws HttpRequestException",
        "* Write the values in the map as encoded form data to the request body\n   *\n   * @param values\n   * @param charset\n   * @return this request\n   * @throws HttpRequestException",
        "* Configure HTTPS connection to trust all certificates\n   * <p>\n   * This method does nothing if the current request is not a HTTPS request\n   *\n   * @return this request\n   * @throws HttpRequestException",
        "* Configure HTTPS connection to trust all hosts using a custom\n   * {@link HostnameVerifier} that always returns <code>true</code> for each\n   * host verified\n   * <p>\n   * This method does nothing if the current request is not a HTTPS request\n   *\n   * @return this request",
        "* Get the {@link URL} of this request's connection\n   *\n   * @return request URL",
        "* Get the HTTP method of this request\n   *\n   * @return method",
        "* Configure an HTTP proxy on this connection. Use {{@link #proxyBasic(String, String)} if\n   * this proxy requires basic authentication.\n   *\n   * @param proxyHost\n   * @param proxyPort\n   * @return this request",
        "* Set whether or not the underlying connection should follow redirects in\n   * the response.\n   *\n   * @param followRedirects - true fo follow redirects, false to not.\n   * @return this request"
    ],
    "functions": [
        "getValidCharset",
        "SSLSocketFactory",
        "getTrustedFactory",
        "getAcceptedIssuers",
        "checkClientTrusted",
        "checkServerTrusted",
        "HostnameVerifier",
        "getTrustedVerifier",
        "verify",
        "StringBuilder",
        "addPathSeparator",
        "StringBuilder",
        "addParamPrefix",
        "StringBuilder",
        "addParam",
        "HttpURLConnection",
        "create",
        "HttpURLConnection",
        "create",
        "HttpURLConnection",
        "create",
        "HttpURLConnection",
        "create",
        "setConnectionFactory",
        "onUpload",
        "onUpload",
        "Base64",
        "encode3to4",
        "encode",
        "encodeBytes",
        "encodeBytes",
        "encodeBytesToBytes",
        "HttpRequestException",
        "getCause",
        "V",
        "run",
        "done",
        "V",
        "call",
        "CloseOperation",
        "done",
        "FlushOperation",
        "done",
        "RequestOutputStream",
        "RequestOutputStream",
        "write",
        "arrayToList",
        "encode",
        "append",
        "append",
        "HttpRequest",
        "get",
        "HttpRequest",
        "get",
        "HttpRequest",
        "get",
        "HttpRequest",
        "get",
        "HttpRequest",
        "post",
        "HttpRequest",
        "post",
        "HttpRequest",
        "post",
        "HttpRequest",
        "post",
        "HttpRequest",
        "put",
        "HttpRequest",
        "put",
        "HttpRequest",
        "put",
        "HttpRequest",
        "put",
        "HttpRequest",
        "HttpRequest",
        "HttpRequest",
        "HttpRequest",
        "HttpRequest",
        "head",
        "HttpRequest",
        "head",
        "HttpRequest",
        "head",
        "HttpRequest",
        "head",
        "HttpRequest",
        "options",
        "HttpRequest",
        "options",
        "HttpRequest",
        "trace",
        "HttpRequest",
        "trace",
        "keepAlive",
        "maxConnections",
        "proxyHost",
        "proxyPort",
        "nonProxyHosts",
        "setProperty",
        "run",
        "run",
        "HttpRequest",
        "HttpRequest",
        "Proxy",
        "createProxy",
        "HttpURLConnection",
        "createConnection",
        "toString",
        "HttpURLConnection",
        "getConnection",
        "HttpRequest",
        "ignoreCloseExceptions",
        "ignoreCloseExceptions",
        "code",
        "HttpRequest",
        "code",
        "ok",
        "created",
        "noContent",
        "serverError",
        "badRequest",
        "notFound",
        "notModified",
        "message",
        "HttpRequest",
        "disconnect",
        "HttpRequest",
        "chunk",
        "HttpRequest",
        "bufferSize",
        "bufferSize",
        "HttpRequest",
        "uncompress",
        "ByteArrayOutputStream",
        "byteStream",
        "body",
        "body",
        "HttpRequest",
        "body",
        "HttpRequest",
        "body",
        "isBodyEmpty",
        "BufferedInputStream",
        "buffer",
        "InputStream",
        "stream",
        "InputStreamReader",
        "reader",
        "InputStreamReader",
        "reader",
        "BufferedReader",
        "bufferedReader",
        "BufferedReader",
        "bufferedReader",
        "HttpRequest",
        "receive",
        "HttpRequest",
        "run",
        "HttpRequest",
        "receive",
        "HttpRequest",
        "receive",
        "HttpRequest",
        "receive",
        "HttpRequest",
        "run",
        "HttpRequest",
        "receive",
        "HttpRequest",
        "run",
        "HttpRequest",
        "readTimeout",
        "HttpRequest",
        "connectTimeout",
        "HttpRequest",
        "header",
        "HttpRequest",
        "header",
        "HttpRequest",
        "headers",
        "HttpRequest",
        "header",
        "header",
        "headers",
        "dateHeader",
        "dateHeader",
        "intHeader",
        "intHeader",
        "headers",
        "parameter",
        "parameters",
        "getParams",
        "getParam",
        "charset",
        "HttpRequest",
        "userAgent",
        "HttpRequest",
        "referer",
        "HttpRequest",
        "useCaches",
        "HttpRequest",
        "acceptEncoding",
        "HttpRequest",
        "acceptGzipEncoding",
        "HttpRequest",
        "acceptCharset",
        "contentEncoding",
        "server",
        "date",
        "cacheControl",
        "eTag",
        "expires",
        "lastModified",
        "location",
        "HttpRequest",
        "authorization",
        "HttpRequest",
        "proxyAuthorization",
        "HttpRequest",
        "basic",
        "HttpRequest",
        "proxyBasic",
        "HttpRequest",
        "ifModifiedSince",
        "HttpRequest",
        "ifNoneMatch",
        "HttpRequest",
        "contentType",
        "HttpRequest",
        "contentType",
        "contentType",
        "contentLength",
        "HttpRequest",
        "contentLength",
        "HttpRequest",
        "contentLength",
        "HttpRequest",
        "accept",
        "HttpRequest",
        "acceptJson",
        "HttpRequest",
        "copy",
        "HttpRequest",
        "run",
        "HttpRequest",
        "copy",
        "HttpRequest",
        "run",
        "HttpRequest",
        "progress",
        "HttpRequest",
        "incrementTotalSize",
        "HttpRequest",
        "closeOutput",
        "HttpRequest",
        "closeOutputQuietly",
        "HttpRequest",
        "openOutput",
        "HttpRequest",
        "startPart",
        "HttpRequest",
        "writePartHeader",
        "HttpRequest",
        "writePartHeader",
        "HttpRequest",
        "part",
        "HttpRequest",
        "part",
        "HttpRequest",
        "part",
        "HttpRequest",
        "part",
        "HttpRequest",
        "part",
        "HttpRequest",
        "part",
        "HttpRequest",
        "part",
        "HttpRequest",
        "part",
        "HttpRequest",
        "part",
        "HttpRequest",
        "part",
        "HttpRequest",
        "partHeader",
        "HttpRequest",
        "send",
        "HttpRequest",
        "send",
        "HttpRequest",
        "send",
        "HttpRequest",
        "send",
        "HttpRequest",
        "run",
        "HttpRequest",
        "send",
        "OutputStreamWriter",
        "writer",
        "HttpRequest",
        "form",
        "HttpRequest",
        "form",
        "HttpRequest",
        "form",
        "HttpRequest",
        "form",
        "HttpRequest",
        "form",
        "HttpRequest",
        "form",
        "HttpRequest",
        "trustAllCerts",
        "HttpRequest",
        "trustAllHosts",
        "URL",
        "url",
        "method",
        "HttpRequest",
        "useProxy",
        "HttpRequest",
        "followRedirects"
    ],
    "classes": [
        "HttpRequest",
        "Base64",
        "HttpRequestException",
        "Operation",
        "CloseOperation",
        "FlushOperation",
        "RequestOutputStream"
    ]
}