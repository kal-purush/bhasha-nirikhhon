{
    "identifiers": [
        "sys",
        "os",
        "argparse",
        "re",
        "time",
        "time",
        "boto",
        "boto",
        "ec2",
        "boto",
        "rds",
        "boto",
        "elasticache",
        "boto",
        "route53",
        "six",
        "six",
        "moves",
        "configparser",
        "collections",
        "defaultdict",
        "json",
        "ImportError",
        "simplejson",
        "json",
        "_empty_inventory",
        "read_settings",
        "parse_cli_args",
        "args",
        "refresh_cache",
        "do_api_calls_update_cache",
        "is_cache_valid",
        "do_api_calls_update_cache",
        "args",
        "host",
        "get_host_info",
        "args",
        "inventory",
        "_empty_inventory",
        "get_inventory_from_cache",
        "json_format_dict",
        "inventory",
        "data_to_print",
        "os",
        "path",
        "isfile",
        "cache_path_cache",
        "os",
        "path",
        "getmtime",
        "cache_path_cache",
        "time",
        "mod_time",
        "cache_max_age",
        "current_time",
        "os",
        "path",
        "isfile",
        "cache_path_index",
        "six",
        "PY3",
        "configparser",
        "ConfigParser",
        "configparser",
        "SafeConfigParser",
        "os",
        "path",
        "join",
        "os",
        "path",
        "dirname",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "expanduser",
        "os",
        "path",
        "expandvars",
        "os",
        "environ",
        "get",
        "ec2_default_ini_path",
        "config",
        "read",
        "ec2_ini_path",
        "config",
        "has_option",
        "config",
        "getboolean",
        "eucalyptus",
        "config",
        "has_option",
        "config",
        "get",
        "config",
        "get",
        "config",
        "get",
        "configRegions",
        "eucalyptus_host",
        "regions",
        "append",
        "boto",
        "connect_euca",
        "host",
        "eucalyptus_host",
        "region",
        "name",
        "regionInfo",
        "ec2",
        "regions",
        "regionInfo",
        "name",
        "configRegions_exclude",
        "regions",
        "append",
        "regionInfo",
        "name",
        "configRegions",
        "split",
        "config",
        "get",
        "config",
        "get",
        "config",
        "getboolean",
        "config",
        "has_option",
        "route53_excluded_zones",
        "extend",
        "config",
        "get",
        "split",
        "config",
        "has_option",
        "config",
        "getboolean",
        "config",
        "has_option",
        "config",
        "getboolean",
        "config",
        "has_option",
        "config",
        "getboolean",
        "all_instances",
        "ec2_valid_instance_states",
        "config",
        "has_option",
        "instance_state",
        "config",
        "get",
        "split",
        "instance_state",
        "strip",
        "instance_state",
        "ec2_valid_instance_states",
        "ec2_instance_states",
        "append",
        "instance_state",
        "config",
        "has_option",
        "rds_enabled",
        "config",
        "getboolean",
        "config",
        "has_option",
        "elasticache_enabled",
        "config",
        "getboolean",
        "config",
        "has_option",
        "elasticache_enabled",
        "config",
        "getboolean",
        "config",
        "has_option",
        "elasticache_enabled",
        "config",
        "getboolean",
        "os",
        "path",
        "expanduser",
        "config",
        "get",
        "os",
        "path",
        "exists",
        "cache_dir",
        "os",
        "makedirs",
        "cache_dir",
        "cache_dir",
        "cache_dir",
        "config",
        "getint",
        "config",
        "has_option",
        "config",
        "getboolean",
        "option",
        "group_by_options",
        "config",
        "has_option",
        "option",
        "setattr",
        "option",
        "config",
        "getboolean",
        "option",
        "setattr",
        "option",
        "config",
        "get",
        "pattern_include",
        "len",
        "pattern_include",
        "re",
        "compile",
        "pattern_include",
        "configparser",
        "NoOptionError",
        "e",
        "config",
        "get",
        "pattern_exclude",
        "len",
        "pattern_exclude",
        "re",
        "compile",
        "pattern_exclude",
        "configparser",
        "NoOptionError",
        "e",
        "defaultdict",
        "config",
        "has_option",
        "instance_filter",
        "config",
        "get",
        "split",
        "instance_filter",
        "strip",
        "instance_filter",
        "instance_filter",
        "x",
        "strip",
        "x",
        "instance_filter",
        "split",
        "filter_key",
        "ec2_instance_filters",
        "filter_key",
        "append",
        "filter_value",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "parse_args",
        "route53_enabled",
        "get_route53_records",
        "region",
        "regions",
        "get_instances_by_region",
        "region",
        "rds_enabled",
        "get_rds_instances_by_region",
        "region",
        "elasticache_enabled",
        "get_elasticache_clusters_by_region",
        "region",
        "get_elasticache_replication_groups_by_region",
        "region",
        "write_to_cache",
        "inventory",
        "cache_path_cache",
        "write_to_cache",
        "index",
        "cache_path_index",
        "region",
        "eucalyptus",
        "boto",
        "connect_euca",
        "host",
        "eucalyptus_host",
        "ec2",
        "connect_to_region",
        "region",
        "conn",
        "fail_with_error",
        "region",
        "conn",
        "region",
        "connect",
        "region",
        "ec2_instance_filters",
        "filter_key",
        "filter_values",
        "ec2_instance_filters",
        "items",
        "reservations",
        "extend",
        "conn",
        "get_all_instances",
        "filters",
        "filter_key",
        "filter_values",
        "conn",
        "get_all_instances",
        "reservation",
        "reservations",
        "instance",
        "reservation",
        "instances",
        "add_instance",
        "instance",
        "region",
        "boto",
        "exception",
        "BotoServerError",
        "e",
        "e",
        "error_code",
        "get_auth_error_message",
        "eucalyptus",
        "backend",
        "e",
        "message",
        "fail_with_error",
        "error",
        "region",
        "rds",
        "connect_to_region",
        "region",
        "conn",
        "conn",
        "get_all_dbinstances",
        "instance",
        "instances",
        "add_rds_instance",
        "instance",
        "region",
        "boto",
        "exception",
        "BotoServerError",
        "e",
        "e",
        "reason",
        "e",
        "error_code",
        "get_auth_error_message",
        "e",
        "reason",
        "e",
        "message",
        "fail_with_error",
        "error",
        "region",
        "elasticache",
        "connect_to_region",
        "region",
        "conn",
        "conn",
        "describe_cache_clusters",
        "boto",
        "exception",
        "BotoServerError",
        "e",
        "e",
        "reason",
        "e",
        "error_code",
        "get_auth_error_message",
        "e",
        "reason",
        "e",
        "message",
        "fail_with_error",
        "error",
        "response",
        "KeyError",
        "e",
        "fail_with_error",
        "error",
        "cluster",
        "clusters",
        "add_elasticache_cluster",
        "cluster",
        "region",
        "region",
        "elasticache",
        "connect_to_region",
        "region",
        "conn",
        "conn",
        "describe_replication_groups",
        "boto",
        "exception",
        "BotoServerError",
        "e",
        "e",
        "reason",
        "e",
        "error_code",
        "get_auth_error_message",
        "e",
        "reason",
        "e",
        "message",
        "fail_with_error",
        "error",
        "response",
        "KeyError",
        "e",
        "fail_with_error",
        "error",
        "replication_group",
        "replication_groups",
        "add_elasticache_replication_group",
        "replication_group",
        "region",
        "os",
        "environ",
        "get",
        "os",
        "environ",
        "get",
        "errors",
        "append",
        "errors",
        "append",
        "p",
        "p",
        "boto_paths",
        "os",
        "path",
        "isfile",
        "os",
        "path",
        "expanduser",
        "p",
        "len",
        "boto_config_found",
        "errors",
        "append",
        "join",
        "boto_config_found",
        "errors",
        "append",
        "join",
        "boto_paths",
        "join",
        "errors",
        "err_msg",
        "err_operation",
        "err_operation",
        "format",
        "err_msg",
        "err_msg",
        "err_operation",
        "err_operation",
        "sys",
        "stderr",
        "write",
        "err_msg",
        "sys",
        "exit",
        "region",
        "instance_id",
        "connect",
        "region",
        "conn",
        "get_all_instances",
        "instance_id",
        "reservation",
        "reservations",
        "instance",
        "reservation",
        "instances",
        "instance",
        "instance",
        "region",
        "instance",
        "state",
        "ec2_instance_states",
        "instance",
        "subnet_id",
        "getattr",
        "instance",
        "vpc_destination_variable",
        "dest",
        "getattr",
        "instance",
        "get",
        "vpc_destination_variable",
        "getattr",
        "instance",
        "destination_variable",
        "dest",
        "getattr",
        "instance",
        "get",
        "destination_variable",
        "dest",
        "pattern_include",
        "pattern_include",
        "match",
        "dest",
        "pattern_exclude",
        "pattern_exclude",
        "match",
        "dest",
        "index",
        "region",
        "instance",
        "id",
        "group_by_instance_id",
        "inventory",
        "instance",
        "id",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "instance",
        "id",
        "group_by_region",
        "push",
        "inventory",
        "region",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "region",
        "group_by_availability_zone",
        "push",
        "inventory",
        "instance",
        "placement",
        "dest",
        "nested_groups",
        "group_by_region",
        "push_group",
        "inventory",
        "region",
        "instance",
        "placement",
        "push_group",
        "inventory",
        "instance",
        "placement",
        "group_by_ami_id",
        "to_safe",
        "instance",
        "image_id",
        "push",
        "inventory",
        "ami_id",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "ami_id",
        "group_by_instance_type",
        "to_safe",
        "instance",
        "instance_type",
        "push",
        "inventory",
        "type_name",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "type_name",
        "group_by_key_pair",
        "instance",
        "key_name",
        "to_safe",
        "instance",
        "key_name",
        "push",
        "inventory",
        "key_name",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "key_name",
        "group_by_vpc_id",
        "instance",
        "vpc_id",
        "to_safe",
        "instance",
        "vpc_id",
        "push",
        "inventory",
        "vpc_id_name",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "vpc_id_name",
        "group_by_security_group",
        "group",
        "instance",
        "groups",
        "to_safe",
        "group",
        "name",
        "push",
        "inventory",
        "key",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "key",
        "AttributeError",
        "fail_with_error",
        "join",
        "group_by_tag_keys",
        "k",
        "v",
        "instance",
        "tags",
        "items",
        "v",
        "to_safe",
        "k",
        "v",
        "to_safe",
        "k",
        "push",
        "inventory",
        "key",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "to_safe",
        "k",
        "push_group",
        "inventory",
        "to_safe",
        "k",
        "key",
        "route53_enabled",
        "group_by_route53_names",
        "get_instance_route53_names",
        "instance",
        "name",
        "route53_names",
        "push",
        "inventory",
        "name",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "name",
        "group_by_tag_none",
        "len",
        "instance",
        "tags",
        "push",
        "inventory",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "push",
        "inventory",
        "dest",
        "inventory",
        "get_host_info_dict_from_instance",
        "instance",
        "instance",
        "region",
        "all_rds_instances",
        "instance",
        "status",
        "instance",
        "endpoint",
        "dest",
        "index",
        "region",
        "instance",
        "id",
        "group_by_instance_id",
        "inventory",
        "instance",
        "id",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "instance",
        "id",
        "group_by_region",
        "push",
        "inventory",
        "region",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "region",
        "group_by_availability_zone",
        "push",
        "inventory",
        "instance",
        "availability_zone",
        "dest",
        "nested_groups",
        "group_by_region",
        "push_group",
        "inventory",
        "region",
        "instance",
        "availability_zone",
        "push_group",
        "inventory",
        "instance",
        "availability_zone",
        "group_by_instance_type",
        "to_safe",
        "instance",
        "instance_class",
        "push",
        "inventory",
        "type_name",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "type_name",
        "group_by_vpc_id",
        "instance",
        "subnet_group",
        "instance",
        "subnet_group",
        "vpc_id",
        "to_safe",
        "instance",
        "subnet_group",
        "vpc_id",
        "push",
        "inventory",
        "vpc_id_name",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "vpc_id_name",
        "group_by_security_group",
        "instance",
        "security_group",
        "to_safe",
        "instance",
        "security_group",
        "name",
        "push",
        "inventory",
        "key",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "key",
        "AttributeError",
        "fail_with_error",
        "join",
        "group_by_rds_engine",
        "push",
        "inventory",
        "to_safe",
        "instance",
        "engine",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "to_safe",
        "instance",
        "engine",
        "group_by_rds_parameter_group",
        "push",
        "inventory",
        "to_safe",
        "instance",
        "parameter_group",
        "name",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "to_safe",
        "instance",
        "parameter_group",
        "name",
        "push",
        "inventory",
        "dest",
        "inventory",
        "get_host_info_dict_from_instance",
        "instance",
        "cluster",
        "region",
        "all_elasticache_clusters",
        "cluster",
        "cluster",
        "cluster",
        "cluster",
        "cluster",
        "dest",
        "index",
        "region",
        "cluster",
        "group_by_instance_id",
        "inventory",
        "cluster",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "cluster",
        "group_by_region",
        "is_redis",
        "push",
        "inventory",
        "region",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "region",
        "group_by_availability_zone",
        "is_redis",
        "push",
        "inventory",
        "cluster",
        "dest",
        "nested_groups",
        "group_by_region",
        "push_group",
        "inventory",
        "region",
        "cluster",
        "push_group",
        "inventory",
        "cluster",
        "group_by_instance_type",
        "is_redis",
        "to_safe",
        "cluster",
        "push",
        "inventory",
        "type_name",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "type_name",
        "group_by_security_group",
        "is_redis",
        "cluster",
        "cluster",
        "security_group",
        "cluster",
        "to_safe",
        "security_group",
        "push",
        "inventory",
        "key",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "key",
        "group_by_elasticache_engine",
        "is_redis",
        "push",
        "inventory",
        "to_safe",
        "cluster",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "to_safe",
        "cluster",
        "group_by_elasticache_parameter_group",
        "push",
        "inventory",
        "to_safe",
        "cluster",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "to_safe",
        "cluster",
        "group_by_elasticache_replication_group",
        "cluster",
        "cluster",
        "push",
        "inventory",
        "to_safe",
        "cluster",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "to_safe",
        "cluster",
        "push",
        "inventory",
        "cluster",
        "get_host_info_dict_from_describe_dict",
        "cluster",
        "inventory",
        "host_info",
        "node",
        "cluster",
        "add_elasticache_node",
        "node",
        "cluster",
        "region",
        "node",
        "cluster",
        "region",
        "all_elasticache_nodes",
        "node",
        "node",
        "dest",
        "to_safe",
        "cluster",
        "node",
        "index",
        "region",
        "node_id",
        "group_by_instance_id",
        "inventory",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "node_id",
        "group_by_region",
        "push",
        "inventory",
        "region",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "region",
        "group_by_availability_zone",
        "push",
        "inventory",
        "cluster",
        "dest",
        "nested_groups",
        "group_by_region",
        "push_group",
        "inventory",
        "region",
        "cluster",
        "push_group",
        "inventory",
        "cluster",
        "group_by_instance_type",
        "to_safe",
        "cluster",
        "push",
        "inventory",
        "type_name",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "type_name",
        "group_by_security_group",
        "cluster",
        "cluster",
        "security_group",
        "cluster",
        "to_safe",
        "security_group",
        "push",
        "inventory",
        "key",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "key",
        "group_by_elasticache_engine",
        "push",
        "inventory",
        "to_safe",
        "cluster",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "to_safe",
        "cluster",
        "group_by_elasticache_cluster",
        "push",
        "inventory",
        "to_safe",
        "cluster",
        "dest",
        "push",
        "inventory",
        "dest",
        "get_host_info_dict_from_describe_dict",
        "node",
        "dest",
        "inventory",
        "inventory",
        "dest",
        "update",
        "host_info",
        "inventory",
        "host_info",
        "replication_group",
        "region",
        "all_elasticache_replication_groups",
        "replication_group",
        "replication_group",
        "dest",
        "index",
        "region",
        "replication_group",
        "group_by_instance_id",
        "inventory",
        "replication_group",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "replication_group",
        "group_by_region",
        "push",
        "inventory",
        "region",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "region",
        "group_by_elasticache_engine",
        "push",
        "inventory",
        "dest",
        "nested_groups",
        "push_group",
        "inventory",
        "push",
        "inventory",
        "replication_group",
        "get_host_info_dict_from_describe_dict",
        "replication_group",
        "inventory",
        "host_info",
        "route53",
        "Route53Connection",
        "r53_conn",
        "get_zones",
        "zone",
        "zone",
        "all_zones",
        "zone",
        "name",
        "route53_excluded_zones",
        "zone",
        "route53_zones",
        "r53_conn",
        "get_all_rrsets",
        "zone",
        "id",
        "record_set",
        "rrsets",
        "record_set",
        "name",
        "record_name",
        "endswith",
        "record_name",
        "resource",
        "record_set",
        "resource_records",
        "route53_records",
        "setdefault",
        "resource",
        "route53_records",
        "resource",
        "add",
        "record_name",
        "instance",
        "attrib",
        "instance_attributes",
        "getattr",
        "instance",
        "attrib",
        "AttributeError",
        "value",
        "route53_records",
        "name_list",
        "update",
        "route53_records",
        "value",
        "name_list",
        "instance",
        "key",
        "vars",
        "instance",
        "getattr",
        "instance",
        "key",
        "to_safe",
        "key",
        "key",
        "instance",
        "state",
        "instance",
        "state_code",
        "key",
        "instance",
        "previous_state",
        "instance",
        "previous_state_code",
        "value",
        "value",
        "isinstance",
        "value",
        "six",
        "string_types",
        "value",
        "strip",
        "value",
        "key",
        "value",
        "name",
        "key",
        "value",
        "zone",
        "key",
        "k",
        "v",
        "value",
        "items",
        "to_safe",
        "k",
        "v",
        "key",
        "group",
        "value",
        "group_ids",
        "append",
        "group",
        "id",
        "group_names",
        "append",
        "group",
        "name",
        "join",
        "i",
        "i",
        "group_ids",
        "join",
        "i",
        "i",
        "group_names",
        "instance_vars",
        "describe_dict",
        "key",
        "describe_dict",
        "describe_dict",
        "key",
        "to_safe",
        "uncammelize",
        "key",
        "key",
        "value",
        "value",
        "value",
        "key",
        "value",
        "value",
        "value",
        "key",
        "value",
        "value",
        "value",
        "node",
        "value",
        "node",
        "node",
        "node",
        "node",
        "node",
        "replica_count",
        "node",
        "replica_count",
        "node",
        "replica_count",
        "node",
        "replica_count",
        "key",
        "value",
        "join",
        "i",
        "i",
        "value",
        "key",
        "join",
        "i",
        "i",
        "value",
        "value",
        "value",
        "key",
        "value",
        "sg",
        "value",
        "sg_ids",
        "append",
        "sg",
        "join",
        "i",
        "i",
        "sg_ids",
        "value",
        "value",
        "isinstance",
        "value",
        "six",
        "string_types",
        "value",
        "strip",
        "value",
        "host_info",
        "len",
        "index",
        "load_index_from_cache",
        "args",
        "host",
        "index",
        "do_api_calls_update_cache",
        "args",
        "host",
        "index",
        "json_format_dict",
        "index",
        "args",
        "host",
        "get_instance",
        "region",
        "instance_id",
        "json_format_dict",
        "get_host_info_dict_from_instance",
        "instance",
        "my_dict",
        "key",
        "element",
        "my_dict",
        "setdefault",
        "key",
        "isinstance",
        "group_info",
        "group_info",
        "setdefault",
        "host_list",
        "append",
        "element",
        "group_info",
        "append",
        "element",
        "my_dict",
        "key",
        "element",
        "my_dict",
        "setdefault",
        "key",
        "isinstance",
        "parent_group",
        "parent_group",
        "parent_group",
        "setdefault",
        "element",
        "child_groups",
        "child_groups",
        "append",
        "element",
        "open",
        "cache_path_cache",
        "cache",
        "read",
        "json_inventory",
        "open",
        "cache_path_index",
        "cache",
        "read",
        "json",
        "loads",
        "json_index",
        "data",
        "filename",
        "json_format_dict",
        "data",
        "open",
        "filename",
        "cache",
        "write",
        "json_data",
        "cache",
        "close",
        "key",
        "re",
        "sub",
        "key",
        "re",
        "sub",
        "temp",
        "lower",
        "word",
        "re",
        "sub",
        "word",
        "data",
        "pretty",
        "pretty",
        "json",
        "dumps",
        "data",
        "sort_keys",
        "indent",
        "json",
        "dumps",
        "data",
        "Ec2Inventory"
    ],
    "literals": [
        "\"_meta\"",
        "\"hostvars\"",
        "'ec2.ini'",
        "'EC2_INI_PATH'",
        "'ec2'",
        "'eucalyptus'",
        "'ec2'",
        "'eucalyptus'",
        "'ec2'",
        "'eucalyptus_host'",
        "'ec2'",
        "'eucalyptus_host'",
        "'ec2'",
        "'regions'",
        "'ec2'",
        "'regions_exclude'",
        "'all'",
        "\",\"",
        "'ec2'",
        "'destination_variable'",
        "'ec2'",
        "'vpc_destination_variable'",
        "'ec2'",
        "'route53'",
        "'ec2'",
        "'route53_excluded_zones'",
        "'ec2'",
        "'route53_excluded_zones'",
        "''",
        "','",
        "'ec2'",
        "'rds'",
        "'ec2'",
        "'rds'",
        "'ec2'",
        "'elasticache'",
        "'ec2'",
        "'elasticache'",
        "'ec2'",
        "'all_instances'",
        "'ec2'",
        "'all_instances'",
        "'pending'",
        "'running'",
        "'shutting-down'",
        "'terminated'",
        "'stopping'",
        "'stopped'",
        "'ec2'",
        "'instance_states'",
        "'ec2'",
        "'instance_states'",
        "','",
        "'running'",
        "'ec2'",
        "'all_rds_instances'",
        "'ec2'",
        "'all_rds_instances'",
        "'ec2'",
        "'all_elasticache_replication_groups'",
        "'ec2'",
        "'all_elasticache_replication_groups'",
        "'ec2'",
        "'all_elasticache_clusters'",
        "'ec2'",
        "'all_elasticache_clusters'",
        "'ec2'",
        "'all_elasticache_nodes'",
        "'ec2'",
        "'all_elasticache_nodes'",
        "'ec2'",
        "'cache_path'",
        "\"/ansible-ec2.cache\"",
        "\"/ansible-ec2.index\"",
        "'ec2'",
        "'cache_max_age'",
        "'ec2'",
        "'nested_groups'",
        "'ec2'",
        "'nested_groups'",
        "'group_by_instance_id'",
        "'group_by_region'",
        "'group_by_availability_zone'",
        "'group_by_ami_id'",
        "'group_by_instance_type'",
        "'group_by_key_pair'",
        "'group_by_vpc_id'",
        "'group_by_security_group'",
        "'group_by_tag_keys'",
        "'group_by_tag_none'",
        "'group_by_route53_names'",
        "'group_by_rds_engine'",
        "'group_by_rds_parameter_group'",
        "'group_by_elasticache_engine'",
        "'group_by_elasticache_cluster'",
        "'group_by_elasticache_parameter_group'",
        "'group_by_elasticache_replication_group'",
        "'ec2'",
        "'ec2'",
        "'ec2'",
        "'pattern_include'",
        "'ec2'",
        "'pattern_exclude'",
        "'ec2'",
        "'instance_filters'",
        "'ec2'",
        "'instance_filters'",
        "''",
        "','",
        "'='",
        "'='",
        "'Produce an Ansible Inventory file based on EC2'",
        "'--list'",
        "'store_true'",
        "'List instances (default: True)'",
        "'--host'",
        "'store'",
        "'Get all the variables about a specific instance'",
        "'--refresh-cache'",
        "'store_true'",
        "'Force refresh of cache by making API requests to EC2 (default: False - use cache files)'",
        "'2010-08-31'",
        "\"region name: %s likely not supported, or AWS is down.  connection to region failed.\"",
        "'AuthFailure'",
        "'Eucalyptus'",
        "'AWS'",
        "\"Error connecting to %s backend.\\n%s\"",
        "'getting EC2 instances'",
        "'AuthFailure'",
        "\"Forbidden\"",
        "\"Looks like AWS RDS is down:\\n%s\"",
        "'getting RDS instances'",
        "'AuthFailure'",
        "\"Forbidden\"",
        "\"Looks like AWS ElastiCache is down:\\n%s\"",
        "'getting ElastiCache clusters'",
        "'DescribeCacheClustersResponse'",
        "'DescribeCacheClustersResult'",
        "'CacheClusters'",
        "\"ElastiCache query to AWS failed (unexpected format).\"",
        "'getting ElastiCache clusters'",
        "'AuthFailure'",
        "\"Forbidden\"",
        "\"Looks like AWS ElastiCache [Replication Groups] is down:\\n%s\"",
        "'getting ElastiCache clusters'",
        "'DescribeReplicationGroupsResponse'",
        "'DescribeReplicationGroupsResult'",
        "'ReplicationGroups'",
        "\"ElastiCache [Replication Groups] query to AWS failed (unexpected format).\"",
        "'getting ElastiCache clusters'",
        "\"Authentication error retrieving ec2 inventory.\"",
        "'AWS_ACCESS_KEY_ID'",
        "'AWS_SECRET_ACCESS_KEY'",
        "' - No AWS_ACCESS_KEY_ID or AWS_SECRET_ACCESS_KEY environment vars found'",
        "' - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment vars found but may not be correct'",
        "'/etc/boto.cfg'",
        "'~/.boto'",
        "'~/.aws/credentials'",
        "\" - Boto configs found at '%s', but the credentials contained may not be correct\"",
        "', '",
        "\" - No Boto config found at any expected location '%s'\"",
        "', '",
        "'\\n'",
        "'ERROR: \"{err_msg}\", while: {err_operation}'",
        "'tags'",
        "'tags'",
        "'instances'",
        "'regions'",
        "'zones'",
        "'images'",
        "'type_'",
        "'types'",
        "'key_'",
        "'keys'",
        "'vpc_id_'",
        "'vpcs'",
        "\"security_group_\"",
        "'security_groups'",
        "'\\n'",
        "'Package boto seems a bit older.'",
        "'Please upgrade boto >= 2.3.0.'",
        "\"tag_\"",
        "\"=\"",
        "\"tag_\"",
        "'tags'",
        "\"tag_\"",
        "\"tag_\"",
        "'route53'",
        "'tag_none'",
        "'tags'",
        "'tag_none'",
        "'ec2'",
        "\"_meta\"",
        "\"hostvars\"",
        "'available'",
        "'instances'",
        "'regions'",
        "'zones'",
        "'type_'",
        "'types'",
        "'vpc_id_'",
        "'vpcs'",
        "\"security_group_\"",
        "'security_groups'",
        "'\\n'",
        "'Package boto seems a bit older.'",
        "'Please upgrade boto >= 2.3.0.'",
        "\"rds_\"",
        "'rds_engines'",
        "\"rds_\"",
        "\"rds_parameter_group_\"",
        "'rds_parameter_groups'",
        "\"rds_parameter_group_\"",
        "'rds'",
        "\"_meta\"",
        "\"hostvars\"",
        "'CacheClusterStatus'",
        "'available'",
        "'ConfigurationEndpoint'",
        "'ConfigurationEndpoint'",
        "'ConfigurationEndpoint'",
        "'Address'",
        "'CacheNodes'",
        "'Endpoint'",
        "'Address'",
        "'CacheClusterId'",
        "'CacheClusterId'",
        "'instances'",
        "'CacheClusterId'",
        "'regions'",
        "'PreferredAvailabilityZone'",
        "'PreferredAvailabilityZone'",
        "'zones'",
        "'PreferredAvailabilityZone'",
        "'type_'",
        "'CacheNodeType'",
        "'types'",
        "'SecurityGroups'",
        "'SecurityGroups'",
        "'SecurityGroups'",
        "\"security_group_\"",
        "'SecurityGroupId'",
        "'security_groups'",
        "\"elasticache_\"",
        "'Engine'",
        "'elasticache_engines'",
        "'Engine'",
        "\"elasticache_parameter_group_\"",
        "'CacheParameterGroup'",
        "'CacheParameterGroupName'",
        "'elasticache_parameter_groups'",
        "'CacheParameterGroup'",
        "'CacheParameterGroupName'",
        "'ReplicationGroupId'",
        "'ReplicationGroupId'",
        "\"elasticache_replication_group_\"",
        "'ReplicationGroupId'",
        "'elasticache_replication_groups'",
        "'ReplicationGroupId'",
        "'elasticache_clusters'",
        "'CacheClusterId'",
        "\"_meta\"",
        "\"hostvars\"",
        "'CacheNodes'",
        "'CacheNodeStatus'",
        "'available'",
        "'Endpoint'",
        "'Address'",
        "'CacheClusterId'",
        "'_'",
        "'CacheNodeId'",
        "'instances'",
        "'regions'",
        "'PreferredAvailabilityZone'",
        "'PreferredAvailabilityZone'",
        "'zones'",
        "'PreferredAvailabilityZone'",
        "'type_'",
        "'CacheNodeType'",
        "'types'",
        "'SecurityGroups'",
        "'SecurityGroups'",
        "'SecurityGroups'",
        "\"security_group_\"",
        "'SecurityGroupId'",
        "'security_groups'",
        "\"elasticache_\"",
        "'Engine'",
        "'elasticache_engines'",
        "\"elasticache_\"",
        "'Engine'",
        "\"elasticache_cluster_\"",
        "'CacheClusterId'",
        "'elasticache_nodes'",
        "\"_meta\"",
        "\"hostvars\"",
        "\"_meta\"",
        "\"hostvars\"",
        "\"_meta\"",
        "\"hostvars\"",
        "'Status'",
        "'available'",
        "'NodeGroups'",
        "'PrimaryEndpoint'",
        "'Address'",
        "'ReplicationGroupId'",
        "'ReplicationGroupId'",
        "'instances'",
        "'ReplicationGroupId'",
        "'regions'",
        "'elasticache_redis'",
        "'elasticache_engines'",
        "'redis'",
        "'elasticache_replication_groups'",
        "'ReplicationGroupId'",
        "\"_meta\"",
        "\"hostvars\"",
        "'.'",
        "'public_dns_name'",
        "'private_dns_name'",
        "'ip_address'",
        "'private_ip_address'",
        "'ec2_'",
        "'ec2__state'",
        "'ec2_state'",
        "''",
        "'ec2_state_code'",
        "'ec2__previous_state'",
        "'ec2_previous_state'",
        "''",
        "'ec2_previous_state_code'",
        "''",
        "'ec2_region'",
        "'ec2__placement'",
        "'ec2_placement'",
        "'ec2_tags'",
        "'ec2_tag_'",
        "'ec2_groups'",
        "\"ec2_security_group_ids\"",
        "','",
        "\"ec2_security_group_names\"",
        "','",
        "'ec2_'",
        "'ec2_configuration_endpoint'",
        "'ec2_configuration_endpoint_address'",
        "'Address'",
        "'ec2_configuration_endpoint_port'",
        "'Port'",
        "'ec2_endpoint'",
        "'ec2_endpoint_address'",
        "'Address'",
        "'ec2_endpoint_port'",
        "'Port'",
        "'ec2_node_groups'",
        "'ec2_endpoint_address'",
        "'PrimaryEndpoint'",
        "'Address'",
        "'ec2_endpoint_port'",
        "'PrimaryEndpoint'",
        "'Port'",
        "'NodeGroupMembers'",
        "'CurrentRole'",
        "'primary'",
        "'ec2_primary_cluster_address'",
        "'ReadEndpoint'",
        "'Address'",
        "'ec2_primary_cluster_port'",
        "'ReadEndpoint'",
        "'Port'",
        "'ec2_primary_cluster_id'",
        "'CacheClusterId'",
        "'CurrentRole'",
        "'replica'",
        "'ec2_replica_cluster_address_'",
        "'ReadEndpoint'",
        "'Address'",
        "'ec2_replica_cluster_port_'",
        "'ReadEndpoint'",
        "'Port'",
        "'ec2_replica_cluster_id_'",
        "'CacheClusterId'",
        "'ec2_member_clusters'",
        "'ec2_member_clusters'",
        "','",
        "'ec2_cache_parameter_group'",
        "\"ec2_cache_node_ids_to_reboot\"",
        "','",
        "'CacheNodeIdsToReboot'",
        "'ec2_cache_parameter_group_name'",
        "'CacheParameterGroupName'",
        "'ec2_cache_parameter_apply_status'",
        "'ParameterApplyStatus'",
        "'ec2_security_groups'",
        "'SecurityGroupId'",
        "\"ec2_security_group_ids\"",
        "','",
        "''",
        "'hosts'",
        "'hosts'",
        "'children'",
        "'r'",
        "'r'",
        "'w'",
        "'(.)([A-Z][a-z]+)'",
        "r'\\1_\\2'",
        "'([a-z0-9])([A-Z])'",
        "r'\\1_\\2'",
        "\"[^A-Za-z0-9\\_]\"",
        "\"_\""
    ],
    "variables": [
        "inventory",
        "index",
        "data_to_print",
        "data_to_print",
        "data_to_print",
        "mod_time",
        "current_time",
        "config",
        "config",
        "ec2_default_ini_path",
        "ec2_ini_path",
        "eucalyptus_host",
        "eucalyptus",
        "eucalyptus",
        "eucalyptus_host",
        "regions",
        "configRegions",
        "configRegions_exclude",
        "regions",
        "destination_variable",
        "vpc_destination_variable",
        "route53_enabled",
        "route53_excluded_zones",
        "rds_enabled",
        "rds_enabled",
        "elasticache_enabled",
        "elasticache_enabled",
        "all_instances",
        "all_instances",
        "ec2_valid_instance_states",
        "ec2_instance_states",
        "ec2_instance_states",
        "instance_state",
        "ec2_instance_states",
        "all_rds_instances",
        "all_rds_instances",
        "all_elasticache_replication_groups",
        "all_elasticache_replication_groups",
        "all_elasticache_clusters",
        "all_elasticache_clusters",
        "all_elasticache_nodes",
        "all_elasticache_nodes",
        "cache_dir",
        "cache_path_cache",
        "cache_path_index",
        "cache_max_age",
        "nested_groups",
        "nested_groups",
        "group_by_options",
        "pattern_include",
        "pattern_include",
        "pattern_include",
        "pattern_include",
        "pattern_exclude",
        "pattern_exclude",
        "pattern_exclude",
        "pattern_exclude",
        "ec2_instance_filters",
        "instance_filter",
        "filter_key",
        "filter_value",
        "parser",
        "args",
        "conn",
        "conn",
        "APIVersion",
        "conn",
        "conn",
        "reservations",
        "reservations",
        "error",
        "backend",
        "error",
        "conn",
        "instances",
        "error",
        "error",
        "error",
        "conn",
        "response",
        "error",
        "error",
        "error",
        "clusters",
        "error",
        "conn",
        "response",
        "error",
        "error",
        "error",
        "replication_groups",
        "error",
        "errors",
        "boto_paths",
        "boto_config_found",
        "err_msg",
        "conn",
        "reservations",
        "dest",
        "dest",
        "dest",
        "dest",
        "dest",
        "ami_id",
        "type_name",
        "key_name",
        "vpc_id_name",
        "key",
        "key",
        "key",
        "route53_names",
        "dest",
        "dest",
        "dest",
        "type_name",
        "vpc_id_name",
        "key",
        "dest",
        "dest",
        "is_redis",
        "dest",
        "is_redis",
        "dest",
        "type_name",
        "key",
        "host_info",
        "dest",
        "dest",
        "node_id",
        "dest",
        "node_id",
        "type_name",
        "key",
        "host_info",
        "dest",
        "dest",
        "dest",
        "host_info",
        "dest",
        "r53_conn",
        "all_zones",
        "route53_zones",
        "route53_records",
        "rrsets",
        "record_name",
        "record_name",
        "instance_attributes",
        "name_list",
        "value",
        "instance_vars",
        "value",
        "key",
        "instance_vars",
        "instance_vars",
        "instance_vars",
        "instance_vars",
        "instance_vars",
        "key",
        "instance_vars",
        "key",
        "instance_vars",
        "key",
        "instance_vars",
        "key",
        "instance_vars",
        "key",
        "instance_vars",
        "key",
        "group_ids",
        "group_names",
        "instance_vars",
        "instance_vars",
        "host_info",
        "value",
        "key",
        "host_info",
        "host_info",
        "host_info",
        "host_info",
        "host_info",
        "host_info",
        "replica_count",
        "host_info",
        "host_info",
        "host_info",
        "host_info",
        "host_info",
        "host_info",
        "host_info",
        "host_info",
        "host_info",
        "host_info",
        "sg_ids",
        "host_info",
        "host_info",
        "key",
        "host_info",
        "key",
        "host_info",
        "key",
        "region",
        "instance_id",
        "instance",
        "group_info",
        "host_list",
        "parent_group",
        "parent_group",
        "my_dict",
        "key",
        "child_groups",
        "cache",
        "json_inventory",
        "cache",
        "json_index",
        "index",
        "json_data",
        "cache",
        "temp"
    ],
    "comments": [
        "!/usr/bin/env python",
        "(c) 2012, Peter Sankauskas",
        "",
        "This file is part of Ansible,",
        "",
        "Ansible is free software: you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation, either version 3 of the License, or",
        "(at your option) any later version.",
        "",
        "Ansible is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU General Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License",
        "along with Ansible.  If not, see <http://www.gnu.org/licenses/>.",
        "",
        "Inventory grouped by instance IDs, tags, security groups, regions,",
        "and availability zones",
        "Index of hostname (address) to instance ID",
        "Read settings and parse CLI arguments",
        "Cache",
        "Data to print",
        "Display list of instances for inventory",
        "is eucalyptus?",
        "Regions",
        "Destination addresses",
        "Route53",
        "Include RDS instances?",
        "Include ElastiCache instances?",
        "Return all EC2 instances?",
        "Instance states to be gathered in inventory. Default is 'running'.",
        "Setting 'all_instances' to 'yes' overrides this option.",
        "Return all RDS instances? (if RDS is enabled)",
        "Return all ElastiCache replication groups? (if ElastiCache is enabled)",
        "Return all ElastiCache clusters? (if ElastiCache is enabled)",
        "Return all ElastiCache nodes? (if ElastiCache is enabled)",
        "Cache related",
        "Configure nested groups instead of flat namespace.",
        "Configure which groups should be created.",
        "Do we need to just include hosts that match a pattern?",
        "Do we need to exclude hosts that match a pattern?",
        "Instance filters (see boto and EC2 API docs). Ignore invalid filters.",
        "connect_to_region will fail \"silently\" by returning None if the region name is wrong or not supported",
        "ElastiCache boto module doesn't provide a get_all_intances method,",
        "that's why we need to call describe directly (it would be called by",
        "the shorthand method anyway...)",
        "show_cache_node_info = True",
        "because we also want nodes' information",
        "Boto also doesn't provide wrapper classes to CacheClusters or",
        "CacheNodes. Because of that wo can't make use of the get_list",
        "method in the AWSQueryConnection. Let's do the work manually",
        "ElastiCache boto module doesn't provide a get_all_intances method,",
        "that's why we need to call describe directly (it would be called by",
        "the shorthand method anyway...)",
        "Boto also doesn't provide wrapper classes to ReplicationGroups",
        "Because of that wo can't make use of the get_list method in the",
        "AWSQueryConnection. Let's do the work manually",
        "Only return instances with desired instance states",
        "Select the best destination address",
        "Skip instances we cannot address (e.g. private VPC subnet)",
        "if we only want to include hosts that match a pattern, skip those that don't",
        "if we need to exclude hosts that match a pattern, skip those",
        "Add to index",
        "Inventory: Group by instance ID (always a group of 1)",
        "Inventory: Group by region",
        "Inventory: Group by availability zone",
        "Inventory: Group by Amazon Machine Image (AMI) ID",
        "Inventory: Group by instance type",
        "Inventory: Group by key pair",
        "Inventory: Group by VPC",
        "Inventory: Group by security group",
        "Inventory: Group by tag keys",
        "Inventory: Group by Route53 domain names if enabled",
        "Global Tag: instances without tags",
        "Global Tag: tag all EC2 instances",
        "Only want available instances unless all_rds_instances is True",
        "Select the best destination address",
        "Skip instances we cannot address (e.g. private VPC subnet)",
        "Add to index",
        "Inventory: Group by instance ID (always a group of 1)",
        "Inventory: Group by region",
        "Inventory: Group by availability zone",
        "Inventory: Group by instance type",
        "Inventory: Group by VPC",
        "Inventory: Group by security group",
        "Inventory: Group by engine",
        "Inventory: Group by parameter group",
        "Global Tag: all RDS instances",
        "Only want available clusters unless all_elasticache_clusters is True",
        "Select the best destination address",
        "Memcached cluster",
        "Redis sigle node cluster",
        "Because all Redis clusters are single nodes, we'll merge the",
        "info from the cluster with info about the node",
        "Skip clusters we cannot address (e.g. private VPC subnet)",
        "Add to index",
        "Inventory: Group by instance ID (always a group of 1)",
        "Inventory: Group by region",
        "Inventory: Group by availability zone",
        "Inventory: Group by node type",
        "Inventory: Group by VPC (information not available in the current",
        "AWS API version for ElastiCache)",
        "Inventory: Group by security group",
        "Check for the existence of the 'SecurityGroups' key and also if",
        "this key has some value. When the cluster is not placed in a SG",
        "the query can return None here and cause an error.",
        "Inventory: Group by engine",
        "Inventory: Group by parameter group",
        "Inventory: Group by replication group",
        "Global Tag: all ElastiCache clusters",
        "Add the nodes",
        "Only want available nodes unless all_elasticache_nodes is True",
        "Select the best destination address",
        "Skip nodes we cannot address (e.g. private VPC subnet)",
        "Add to index",
        "Inventory: Group by node ID (always a group of 1)",
        "Inventory: Group by region",
        "Inventory: Group by availability zone",
        "Inventory: Group by node type",
        "Inventory: Group by VPC (information not available in the current",
        "AWS API version for ElastiCache)",
        "Inventory: Group by security group",
        "Check for the existence of the 'SecurityGroups' key and also if",
        "this key has some value. When the cluster is not placed in a SG",
        "the query can return None here and cause an error.",
        "Inventory: Group by engine",
        "Inventory: Group by parameter group (done at cluster level)",
        "Inventory: Group by replication group (done at cluster level)",
        "Inventory: Group by ElastiCache Cluster",
        "Global Tag: all ElastiCache nodes",
        "Only want available clusters unless all_elasticache_replication_groups is True",
        "Select the best destination address (PrimaryEndpoint)",
        "Skip clusters we cannot address (e.g. private VPC subnet)",
        "Add to index",
        "Inventory: Group by ID (always a group of 1)",
        "Inventory: Group by region",
        "Inventory: Group by availability zone (doesn't apply to replication groups)",
        "Inventory: Group by node type (doesn't apply to replication groups)",
        "Inventory: Group by VPC (information not available in the current",
        "AWS API version for replication groups",
        "Inventory: Group by security group (doesn't apply to replication groups)",
        "Check this value in cluster level",
        "Inventory: Group by engine (replication groups are always Redis)",
        "Global Tag: all ElastiCache clusters",
        "Handle complex types",
        "state/previous_state changed to properties in boto in https://github.com/boto/boto/commit/a23c379837f698212252720d2af8dec0325c9518",
        "TODO Product codes if someone finds them useful",
        "print key",
        "print type(value)",
        "print value",
        "I really don't agree with prefixing everything with 'ec2'",
        "because EC2, RDS and ElastiCache are different services.",
        "I'm just following the pattern used until now to not break any",
        "compatibility.",
        "Handle complex types",
        "Target: Memcached Cache Clusters",
        "Target: Cache Nodes and Redis Cache Clusters (single node)",
        "Target: Redis Replication Groups",
        "Target: Redis Replication Groups",
        "Target: All Cache Clusters",
        "Target: Almost everything",
        "Skip if SecurityGroups is None",
        "(it is possible to have the key defined but no value in it).",
        "Target: Everything",
        "Preserve booleans and integers",
        "Target: Everything",
        "Sanitize string values",
        "Target: Everything",
        "Replace None by an empty string",
        "Remove non-processed complex types",
        "Need to load index from cache",
        "try updating the cache",
        "host might not exist anymore",
        "Run the script"
    ],
    "docstrings": [
        "'''\nEC2 external inventory script\n=================================\n\nGenerates inventory that Ansible can understand by making API request to\nAWS EC2 using the Boto library.\n\nNOTE: This script assumes Ansible is being executed where the environment\nvariables needed for Boto have already been set:\n    export AWS_ACCESS_KEY_ID='AK123'\n    export AWS_SECRET_ACCESS_KEY='abc123'\n\nThis script also assumes there is an ec2.ini file alongside it.  To specify a\ndifferent path to ec2.ini, define the EC2_INI_PATH environment variable:\n\n    export EC2_INI_PATH=/path/to/my_ec2.ini\n\nIf you're using eucalyptus you need to set the above variables and\nyou need to define:\n\n    export EC2_URL=http://hostname_of_your_cc:port/services/Eucalyptus\n\nFor more details, see: http://docs.pythonboto.org/en/latest/boto_config_tut.html\n\nWhen run against a specific host, this script returns the following variables:\n - ec2_ami_launch_index\n - ec2_architecture\n - ec2_association\n - ec2_attachTime\n - ec2_attachment\n - ec2_attachmentId\n - ec2_client_token\n - ec2_deleteOnTermination\n - ec2_description\n - ec2_deviceIndex\n - ec2_dns_name\n - ec2_eventsSet\n - ec2_group_name\n - ec2_hypervisor\n - ec2_id\n - ec2_image_id\n - ec2_instanceState\n - ec2_instance_type\n - ec2_ipOwnerId\n - ec2_ip_address\n - ec2_item\n - ec2_kernel\n - ec2_key_name\n - ec2_launch_time\n - ec2_monitored\n - ec2_monitoring\n - ec2_networkInterfaceId\n - ec2_ownerId\n - ec2_persistent\n - ec2_placement\n - ec2_platform\n - ec2_previous_state\n - ec2_private_dns_name\n - ec2_private_ip_address\n - ec2_publicIp\n - ec2_public_dns_name\n - ec2_ramdisk\n - ec2_reason\n - ec2_region\n - ec2_requester_id\n - ec2_root_device_name\n - ec2_root_device_type\n - ec2_security_group_ids\n - ec2_security_group_names\n - ec2_shutdown_state\n - ec2_sourceDestCheck\n - ec2_spot_instance_request_id\n - ec2_state\n - ec2_state_code\n - ec2_state_reason\n - ec2_status\n - ec2_subnet_id\n - ec2_tenancy\n - ec2_virtualization_type\n - ec2_vpc_id\n\nThese variables are pulled out of a boto.ec2.instance object. There is a lack of\nconsistency with variable spellings (camelCase and underscores) since this\njust loops through all variables the object exposes. It is preferred to use the\nones with underscores when multiple exist.\n\nIn addition, if an instance has AWS Tags associated with it, each tag is a new\nvariable named:\n - ec2_tag_[Key] = [Value]\n\nSecurity groups are comma-separated in 'ec2_security_group_ids' and\n'ec2_security_group_names'.\n'''",
        "''' Main execution path '''",
        "''' Determines if the cache files have expired, or if it is still valid '''",
        "''' Reads the settings from the ec2.ini file '''",
        "''' Command line argument processing '''",
        "''' Do API calls to each region, and save data in cache files '''",
        "''' create connection to api server'''",
        "''' Makes an AWS EC2 API call to the list of instances in a particular\n        region '''",
        "''' Makes an AWS API call to the list of RDS instances in a particular\n        region '''",
        "''' Makes an AWS API call to the list of ElastiCache clusters (with\n        nodes' info) in a particular region.'''",
        "''' Makes an AWS API call to the list of ElastiCache replication groups\n        in a particular region.'''",
        "''' create an informative error message if there is an issue authenticating'''",
        "'''log an error to std err for ansible-playbook to consume and exit'''",
        "''' Adds an instance to the inventory and index, as long as it is\n        addressable '''",
        "''' Adds an RDS instance to the inventory and index, as long as it is\n        addressable '''",
        "''' Adds an ElastiCache cluster to the inventory and index, as long as\n        it's nodes are addressable '''",
        "''' Adds an ElastiCache node to the inventory and index, as long as\n        it is addressable '''",
        "''' Adds an ElastiCache replication group to the inventory and index '''",
        "''' Get and store the map of resource records to domain names that\n        point to them. '''",
        "''' Check if an instance is referenced in the records we have from\n        Route53. If it is, return the list of domain names pointing to said\n        instance. If nothing points to it, return an empty list. '''",
        "''' Parses the dictionary returned by the API call into a flat list\n            of parameters. This method should be used only when 'describe' is\n            used directly because Boto doesn't provide specific classes. '''",
        "''' Get variables about a specific host '''",
        "''' Push an element onto an array that may not have been defined in\n        the dict '''",
        "''' Push a group as a child of another group. '''",
        "''' Reads the inventory from the cache file and returns it as a JSON\n        object '''",
        "''' Reads the index from the cache file sets self.index '''",
        "''' Writes data in JSON format to a file '''",
        "''' Converts 'bad' characters in a string to underscores so they can be\n        used as Ansible groups '''",
        "''' Converts a dict to a JSON object and dumps it as a formatted\n        string '''"
    ],
    "functions": [
        "_empty_inventory",
        "is_cache_valid",
        "read_settings",
        "parse_cli_args",
        "do_api_calls_update_cache",
        "connect",
        "get_instances_by_region",
        "get_rds_instances_by_region",
        "get_elasticache_clusters_by_region",
        "get_elasticache_replication_groups_by_region",
        "get_auth_error_message",
        "fail_with_error",
        "get_instance",
        "add_instance",
        "add_rds_instance",
        "add_elasticache_cluster",
        "add_elasticache_node",
        "add_elasticache_replication_group",
        "get_route53_records",
        "get_instance_route53_names",
        "get_host_info_dict_from_instance",
        "get_host_info_dict_from_describe_dict",
        "get_host_info",
        "push",
        "push_group",
        "get_inventory_from_cache",
        "load_index_from_cache",
        "write_to_cache",
        "uncammelize",
        "to_safe",
        "json_format_dict"
    ],
    "classes": [
        "Ec2Inventory"
    ]
}