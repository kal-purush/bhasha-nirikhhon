{
    "identifiers": [
        "s",
        "p",
        "u",
        "m",
        "path",
        "fs",
        "ms",
        "modules",
        "s",
        "s",
        "m",
        "u",
        "modules",
        "decorator",
        "s",
        "s",
        "decorator",
        "decorator",
        "method",
        "m",
        "member",
        "s",
        "member",
        "member",
        "decorator",
        "decorator",
        "decorator",
        "mlMethod",
        "mlMethod",
        "mlMethod",
        "s",
        "mlMethod",
        "s",
        "oe",
        "method",
        "ee",
        "m",
        "m",
        "method",
        "method",
        "m",
        "method",
        "m",
        "member",
        "s",
        "member",
        "member",
        "decorator",
        "decorator",
        "decorator",
        "mlEvent",
        "m",
        "s",
        "mlEvent",
        "eventOptions",
        "eventOptions",
        "eventOptions",
        "serviceSpecs",
        "m",
        "baseUri",
        "assetModel",
        "ms",
        "pkgDir",
        "assetModel",
        "assetModel",
        "assetModel",
        "fs",
        "path",
        "__dirname",
        "u",
        "serviceSpecs",
        "serviceSpec",
        "serviceSpec",
        "moduleName",
        "serviceSpec",
        "className",
        "serviceSpec",
        "moduleName",
        "moduleName",
        "suffix",
        "suffix",
        "fs",
        "path",
        "pkgDir",
        "moduleName",
        "modulePath",
        "moduleName",
        "fs",
        "path",
        "pkgDir",
        "moduleName",
        "modulePath",
        "moduleName",
        "moduleName",
        "pkgDir",
        "modulePath",
        "moduleName",
        "moduleName",
        "moduleName",
        "moduleName",
        "p",
        "pkgDir",
        "moduleName",
        "path",
        "packageJson",
        "moduleName",
        "ms",
        "assetModel",
        "pkgDir",
        "modulePath",
        "serviceSpec",
        "s",
        "serviceSpec",
        "moduleName",
        "s",
        "cc",
        "className",
        "cc",
        "serviceSpec",
        "u",
        "m",
        "m",
        "method",
        "moduleName",
        "className",
        "m",
        "method",
        "methods",
        "methodType",
        "sjs",
        "methodType",
        "method",
        "methodType",
        "serviceSpec",
        "method",
        "assetModel",
        "assetModel",
        "assetModel",
        "extensionName",
        "extensionName",
        "sjs",
        "ms",
        "states",
        "ms",
        "ms",
        "states",
        "ms",
        "states",
        "ms",
        "serviceSpec",
        "baseUri",
        "baseUri",
        "baseUri",
        "moduleName",
        "className",
        "baseUri",
        "path",
        "moduleName",
        "className",
        "assetModel",
        "assetModel",
        "assetModel",
        "alertModuleName",
        "alertModuleName",
        "code",
        "assetModel",
        "assetModel",
        "assetModel",
        "path",
        "path",
        "states",
        "alertModuleName"
    ],
    "literals": [
        "'typescript-schema'",
        "'typescript-package'",
        "'uservices'",
        "'./model'",
        "'path'",
        "'fs'",
        "'markscript'",
        "'mlService'",
        "'markscript-uservices/dist/lib/decorators'",
        "'mlMethod'",
        "'markscript-uservices/dist/lib/decorators'",
        "'method'",
        "'PUT'",
        "'mlEvent'",
        "'markscript-uservices/dist/lib/decorators'",
        "string",
        "string",
        "'markscript-uservices'",
        "'markscript-uservices'",
        "'rfp.js'",
        "'utf8'",
        "string",
        "string",
        "string",
        "'.ts'",
        "'.js'",
        "'.js'",
        "'.js'",
        "'.ts'",
        "'.ts'",
        "'Cannot find module: '",
        "' at package directory: '",
        "'/'",
        "'/'",
        "'/'",
        "'To generate the service spec assets, either an implementation or type model must be provided, for service: '",
        "'var Service = r'",
        "equire('${moduleName}').${className};\nvar service = new Service();",
        "exports.${methodType} = function(context, params, input){\ncontext.outputTypes = [\"application/json\"];\n// TODO: This will only work for POST\nvar promise = service.${method.name}.apply(service, input.toObject());\nvar value;\nvar error;\npromise.then(function(v){\nvalue = v;\n}, function(e){\nerror = e;\n});\nif (error) {\nthrow error;\n} else {\n  if (\"${methodType}\" === \"POST\" && value.count > 1) {\n    for (var i = 1; i < value.count; i++) {\n      context.outputTypes.push(\"application/json\");\n    }\n  }\n  return value\n}\n};",
        "'-'",
        "'-'",
        "'/'",
        "'/'",
        "'var Service = r'",
        "equire('${moduleName}').${className};\nvar service = new Service();\nvar rfp = r",
        "'e'",
        "quire('/markscript-uservices');\nvar observable = service.${event.name}();\nobservable.subscribe(new rfp.HttpObserver(\n'${baseUri + path}',\n{\nheaders: {\n\"content-type\": \"application/json\"\n}\n}));\n\nmodule.exports = function(uri, content){\nobservable.onNext({uri: uri, content: content});\n}",
        "'/_alerts'",
        "'/'",
        "'/'",
        "'/'"
    ],
    "variables": [
        "mlMethod",
        "oe",
        "ee",
        "mlEvent",
        "eventOptions",
        "moduleName",
        "className",
        "suffix",
        "modulePath",
        "packageJson",
        "cc",
        "sjs",
        "methodType",
        "methods",
        "extensionName",
        "states",
        "path",
        "code",
        "alertModuleName"
    ],
    "comments": [
        "TODO: Waiting on better enum-expression support in typescript-schema",
        "TODO: We need a better way of plugins providing module-code",
        "TODO: Remove this ugly hack",
        "TODO: Currently this implementation only works for POST. Forcing POST method type, but fix to work for other types",
        "methodType = 'POST'"
    ],
    "docstrings": [],
    "functions": [
        "generateServiceSpecs",
        "generateAssetModel"
    ],
    "classes": []
}