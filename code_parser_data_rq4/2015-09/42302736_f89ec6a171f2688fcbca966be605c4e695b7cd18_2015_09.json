{
    "identifiers": [
        "ES6Promise",
        "ES6Promise",
        "message",
        "message",
        "callback",
        "resolve",
        "value",
        "reject",
        "error",
        "resolve",
        "reject",
        "callback",
        "value",
        "reject",
        "FSPromiseCancelError",
        "resolve",
        "value",
        "value",
        "reject",
        "value",
        "onFulfilled",
        "value",
        "onRejected",
        "error",
        "FSPromise",
        "resolve",
        "reject",
        "value",
        "reject",
        "FSPromiseCancelError",
        "onFulfilled",
        "resolve",
        "value",
        "onFulfilled",
        "value",
        "resolve",
        "returnValue",
        "e",
        "reject",
        "e",
        "error",
        "reject",
        "FSPromiseCancelError",
        "onRejected",
        "reject",
        "error",
        "onRejected",
        "error",
        "resolve",
        "returnValue",
        "e",
        "reject",
        "e",
        "onRejected",
        "error",
        "onRejected",
        "value",
        "FSPromise",
        "resolve",
        "reject",
        "resolve",
        "value",
        "error",
        "FSPromise",
        "resolve",
        "reject",
        "reject",
        "error",
        "promises",
        "FSPromise",
        "resolve",
        "reject",
        "promises",
        "value",
        "promise",
        "reject",
        "FSPromiseCancelError",
        "resolve",
        "value",
        "error",
        "promise",
        "reject",
        "FSPromiseCancelError",
        "reject",
        "error",
        "promise",
        "promises",
        "FSPromise",
        "resolve",
        "reject",
        "promises",
        "value",
        "promise",
        "reject",
        "FSPromiseCancelError",
        "resolve",
        "value",
        "error",
        "promise",
        "reject",
        "FSPromiseCancelError",
        "reject",
        "error",
        "promise"
    ],
    "literals": [
        "'use strict'",
        "'es6-promise'",
        "string",
        "string",
        "string",
        "'FSPromiseCancelError'",
        "'Cancel'",
        "'Cancel'",
        "'Cancel'",
        "'Cancel'",
        "'Cancel'",
        "'Cancel'",
        "'Cancel'"
    ],
    "variables": [
        "returnValue",
        "returnValue",
        "promise",
        "promise"
    ],
    "comments": [
        "<reference path=\"scripts/typings/es6-promise/es6-promise.d.ts\" />"
    ],
    "docstrings": [
        "* If you call resolve in the body of the callback passed to the constructor,\n\t * your promise is fulfilled with result object passed to resolve.\n\t * If you call reject your promise is rejected with the object passed to resolve.\n\t * For consistency and debugging (eg stack traces), obj should be an instanceof Error.\n\t * Any errors thrown in the constructor callback will be implicitly passed to reject().",
        "* onFulfilled is called when/if \"promise\" resolves. onRejected is called when/if \"promise\" rejects.\n     * Both are optional, if either/both are omitted the next onFulfilled/onRejected in the chain is called.\n     * Both callbacks have a single parameter , the fulfillment value or rejection reason.\n     * \"then\" returns a new promise equivalent to the value you return from onFulfilled/onRejected after being passed through Promise.resolve.\n     * If an error is thrown in the callback, the returned promise rejects with that error.\n     *\n     * @param onFulfilled called when/if \"promise\" resolves\n     * @param onRejected called when/if \"promise\" rejects",
        "* Sugar for promise.then(undefined, onRejected)\n     *\n     * @param onRejected called when/if \"promise\" rejects",
        "* Trigger an catchable FSPromiseCancelError and stop execution of Promise",
        "* Make a new promise from the thenable.\n\t * A thenable is promise-like in as far as it has a \"then\" method.",
        "* Make a promise that rejects to obj. For consistency and debugging (eg stack traces), obj should be an instanceof Error",
        "* Make a promise that fulfills when every item in the array fulfills, and rejects if (and when) any item rejects.\n     * the array passed to all can be a mixture of promise-like objects and other objects.\n     * The fulfillment value is an array (in order) of fulfillment values. The rejection value is the first rejection value.",
        "* Make a Promise that fulfills when any item fulfills, and rejects if any item rejects."
    ],
    "functions": [
        "then",
        "abort",
        "resolve",
        "reject",
        "all",
        "race"
    ],
    "classes": [
        "FSPromiseCancelError",
        "FSPromise"
    ]
}