{
    "identifiers": [
        "org",
        "whaka",
        "mock",
        "org",
        "whaka",
        "util",
        "UberStreams",
        "org",
        "whaka",
        "util",
        "Tuple2",
        "org",
        "whaka",
        "util",
        "Tuple3",
        "org",
        "whaka",
        "util",
        "Tuple4",
        "java",
        "util",
        "Objects",
        "java",
        "util",
        "BiConsumer",
        "java",
        "util",
        "BiPredicate",
        "java",
        "util",
        "Consumer",
        "java",
        "util",
        "java",
        "util",
        "stream",
        "IntStream",
        "org",
        "mockito",
        "ArgumentCaptor",
        "org",
        "mockito",
        "Matchers",
        "org",
        "mockito",
        "Mockito",
        "org",
        "whaka",
        "util",
        "Consumer3",
        "org",
        "whaka",
        "util",
        "Consumer4",
        "org",
        "whaka",
        "util",
        "Consumer5",
        "org",
        "whaka",
        "util",
        "Tuple2",
        "org",
        "whaka",
        "util",
        "Tuple3",
        "org",
        "whaka",
        "util",
        "Tuple4",
        "com",
        "google",
        "common",
        "MoreObjects",
        "com",
        "google",
        "common",
        "Preconditions",
        "captors",
        "methodCall",
        "combiner",
        "numberOfEvents",
        "methodCall",
        "combiner",
        "Preconditions",
        "checkArgument",
        "numberOfEvents",
        "methodCall",
        "Objects",
        "requireNonNull",
        "methodCall",
        "combiner",
        "Objects",
        "requireNonNull",
        "combiner",
        "captors",
        "IntStream",
        "numberOfEvents",
        "mapToObj",
        "i",
        "ArgumentCaptor",
        "forClass",
        "toArray",
        "numberOfEvents",
        "methodCall",
        "combiner",
        "Objects",
        "requireNonNull",
        "methodCall",
        "forCaptors",
        "numberOfEvents",
        "t",
        "captors",
        "methodCall",
        "accept",
        "t",
        "stream",
        "captors",
        "c",
        "c",
        "capture",
        "toArray",
        "combiner",
        "numberOfEvents",
        "methodCall",
        "combiner",
        "numberOfEvents",
        "methodCall",
        "combiner",
        "SuppressWarnings",
        "methodCall",
        "forCaptors",
        "t",
        "captors",
        "methodCall",
        "accept",
        "t",
        "captors",
        "arr",
        "arr",
        "SuppressWarnings",
        "methodCall",
        "Objects",
        "requireNonNull",
        "methodCall",
        "forValues",
        "t",
        "arr",
        "methodCall",
        "accept",
        "t",
        "arr",
        "arr",
        "arr",
        "SuppressWarnings",
        "methodCall",
        "Objects",
        "requireNonNull",
        "methodCall",
        "forValues",
        "t",
        "arr",
        "methodCall",
        "accept",
        "t",
        "arr",
        "arr",
        "arr",
        "tuple2",
        "arr",
        "arr",
        "SuppressWarnings",
        "methodCall",
        "Objects",
        "requireNonNull",
        "methodCall",
        "forValues",
        "t",
        "arr",
        "methodCall",
        "accept",
        "t",
        "arr",
        "arr",
        "arr",
        "arr",
        "tuple3",
        "arr",
        "arr",
        "arr",
        "SuppressWarnings",
        "methodCall",
        "Objects",
        "requireNonNull",
        "methodCall",
        "forValues",
        "t",
        "arr",
        "methodCall",
        "accept",
        "t",
        "arr",
        "arr",
        "arr",
        "arr",
        "arr",
        "tuple4",
        "arr",
        "arr",
        "arr",
        "arr",
        "captors",
        "clone",
        "methodCall",
        "combiner",
        "Override",
        "t",
        "getMethodCall",
        "accept",
        "t",
        "getCaptors",
        "values",
        "stream",
        "getCaptors",
        "c",
        "c",
        "getValue",
        "toArray",
        "getCombiner",
        "apply",
        "values",
        "Override",
        "MoreObjects",
        "toStringHelper",
        "add",
        "getCaptors",
        "length",
        "addValue",
        "identityHashCode",
        "toString"
    ],
    "literals": [
        "\"Expected positive number of events!\"",
        "\"Method call cannot be null!\"",
        "\"Arguments combiner cannot be null!\"",
        "\"Method call cannot be null!\"",
        "\"unchecked\"",
        "\"unchecked\"",
        "\"Method call cannot be null!\"",
        "\"unchecked\"",
        "\"Method call cannot be null!\"",
        "\"unchecked\"",
        "\"Method call cannot be null!\"",
        "\"unchecked\"",
        "\"Method call cannot be null!\"",
        "\"captors\""
    ],
    "variables": [
        "captors",
        "methodCall",
        "combiner"
    ],
    "comments": [],
    "docstrings": [
        "* @see #forValues(int, BiConsumer, Function)\n * @see #forCaptors(int, BiConsumer, Function)\n * @see #forCaptor(BiConsumer)\n * @see #create(BiConsumer)\n * @see #create(Consumer3)\n * @see #create(Consumer4)\n * @see #create(Consumer5)",
        "*",
        "*",
        "* <p>Pure form of the event collector allows to stub only methods with one argument. But using a {@link BiPredicate}\n\t * to indicate stubbed method allows you to call <i>any</i> method where matcher (passed into a predicate) might\n\t * be passed as one of the multiple arguments. Example:\n\t * <pre>\n\t * \tinterface Listener {\n\t * \t\tvoid event(Integer i, String s);\n\t * \t}\n\t * \n\t * \tBiPredicate&lt;Listener, String&gt; methodCall =\n\t * \t\t(l,s) -> l.event(Matchers.any(), s);\n\t * \n\t * \tEventCollector&lt;Listener, String&gt; collector =\n\t * \t\tEventCollector.create(Listener.class, methodCall);\n\t * </pre>\n\t * \n\t * <p>The problem with this example is that it won't work as expected. Specifics of the {@link Mockito} functionality\n\t * require matchers to be created <b>in the same order</b> as matched arguments. And because the matcher specified\n\t * in the predicate by an event collector was created <i>before</i> the one created manually - it still will\n\t * try to match <b>the first</b> argument of the called method.\n\t * \n\t * <p>But we definitely can put such a loophole to use and allow a \"partial collect\", but the API gets a bit less\n\t * convenient. Since matchers are required to be created in the same order - user will have to initiate collector\n\t * matcher manually. So {@link BiPredicate} accepted by this method takes an instance of the {@link ArgumentCaptor}\n\t * as a second argument. User will have to call {@link ArgumentCaptor#capture()} on it to specify the argument\n\t * to be collected. Example:\n\t * <pre>\n\t * \tinterface Listener {\n\t * \t\tvoid event(Integer i, String s);\n\t * \t}\n\t * \n\t * \tBiPredicate&lt;Listener, ArgumentCaptor&lt;String&gt;&gt; methodCall =\n\t * \t\t(l,c) -> l.event(Matchers.any(), c.capture());\n\t * \n\t * \tEventCollector&lt;Listener, String&gt; collector =\n\t * \t\tEventCollector.createPartial(Listener.class, String.class, methodCall);\n\t * </pre>\n\t * \n\t * <p>In this example collector's matcher is initiated after the matcher created by the {@link Matchers#any()} call.\n\t * Additional inconvenience is that class of the captured event is also have to be specified,\n\t * since {@link BiPredicate} itself cannot properly guess it from call to a method with multiple arguments.\n\t * But as a result it provides you an interesting functionality (relatively easy to implement) that allows you\n\t * to capture one of the arguments, completely ignoring others (<code>Mockito's</code> {@link Matchers} got\n\t * to be used manually to create matchers for other arguments).",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*"
    ],
    "functions": [
        "EventCombiner",
        "forValues",
        "forCaptors",
        "forCaptor",
        "create",
        "create",
        "create",
        "create",
        "getCaptors",
        "getMethodCall",
        "getCombiner",
        "accept",
        "Event",
        "getValue",
        "toString"
    ],
    "classes": [
        "EventCombiner"
    ]
}