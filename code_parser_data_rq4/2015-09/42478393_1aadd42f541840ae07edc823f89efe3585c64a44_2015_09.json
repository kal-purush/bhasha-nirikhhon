{
    "identifiers": [
        "Commands",
        "command_executor",
        "DeployBrowsers",
        "deploy_browser",
        "Commands",
        "profile_commands",
        "Proxy",
        "deploy_mitm_proxy",
        "SocketInterface",
        "clientsocket",
        "MPLogger",
        "loggingclient",
        "multiprocessing",
        "Process",
        "Empty",
        "EmptyQueue",
        "tempfile",
        "logging",
        "shutil",
        "signal",
        "time",
        "os",
        "browser_params",
        "browser_params",
        "browser_params",
        "browser_params",
        "browser_params",
        "loggingclient",
        "logger_address",
        "command_thread",
        "command_thread",
        "is_alive",
        "spawn_timeout",
        "current_profile_path",
        "current_profile_path",
        "tempfile",
        "mkdtemp",
        "profile_commands",
        "dump_profile",
        "crashed_profile_path",
        "tempdir",
        "close_webdriver",
        "browser_settings",
        "browser_settings",
        "full_profile",
        "browser_params",
        "tempdir",
        "browser_params",
        "success",
        "unsuccessful_spawns",
        "logger",
        "debug",
        "crawl_id",
        "unsuccessful_spawns",
        "command_queue",
        "status_queue",
        "command_queue",
        "status_queue",
        "browser_params",
        "crash_recovery",
        "Process",
        "target",
        "BrowserManager",
        "args",
        "args",
        "browser_manager",
        "browser_manager",
        "start",
        "status_queue",
        "get",
        "spawn_timeout",
        "display_pid",
        "display_port",
        "status_queue",
        "get",
        "spawn_timeout",
        "status_queue",
        "get",
        "spawn_timeout",
        "browser_pid",
        "browser_settings",
        "status_queue",
        "get",
        "spawn_timeout",
        "status_queue",
        "get",
        "spawn_timeout",
        "logger",
        "error",
        "crawl_id",
        "unsuccessful_spawns",
        "EmptyQueue",
        "unsuccessful_spawns",
        "logger",
        "error",
        "crawl_id",
        "prof_done",
        "disp_done",
        "launch_attempted",
        "browser_done",
        "kill_browser_manager",
        "current_profile_path",
        "shutil",
        "rmtree",
        "current_profile_path",
        "ignore_errors",
        "success",
        "logger",
        "debug",
        "crawl_id",
        "tempdir",
        "shutil",
        "rmtree",
        "tempdir",
        "ignore_errors",
        "crashed_profile_path",
        "shutil",
        "rmtree",
        "crashed_profile_path",
        "ignore_errors",
        "crashed_profile_path",
        "success",
        "is_fresh",
        "restart_browser_manager",
        "reset",
        "reset",
        "kill_browser_manager",
        "reset",
        "current_profile_path",
        "shutil",
        "rmtree",
        "current_profile_path",
        "ignore_errors",
        "browser_params",
        "launch_browser_manager",
        "browser_manager",
        "browser_manager",
        "pid",
        "os",
        "kill",
        "browser_manager",
        "pid",
        "signal",
        "SIGKILL",
        "OSError",
        "logger",
        "debug",
        "crawl_id",
        "display_pid",
        "os",
        "kill",
        "display_pid",
        "signal",
        "SIGKILL",
        "OSError",
        "logger",
        "debug",
        "crawl_id",
        "logger",
        "error",
        "crawl_id",
        "display_pid",
        "display_port",
        "os",
        "remove",
        "display_port",
        "OSError",
        "logger",
        "debug",
        "crawl_id",
        "browser_pid",
        "os",
        "kill",
        "browser_pid",
        "signal",
        "SIGKILL",
        "OSError",
        "logger",
        "debug",
        "crawl_id",
        "command_queue",
        "status_queue",
        "browser_params",
        "crash_recovery",
        "loggingclient",
        "browser_params",
        "browser_params",
        "deploy_mitm_proxy",
        "init_proxy",
        "browser_params",
        "browser_params",
        "browser_params",
        "local_port",
        "deploy_browser",
        "deploy_browser",
        "status_queue",
        "browser_params",
        "crash_recovery",
        "browser_params",
        "browser_params",
        "logger",
        "debug",
        "browser_params",
        "prof_folder",
        "os",
        "path",
        "isfile",
        "prof_folder",
        "time",
        "sleep",
        "time",
        "sleep",
        "open",
        "prof_folder",
        "f",
        "f",
        "read",
        "strip",
        "clientsocket",
        "extension_socket",
        "connect",
        "port",
        "status_queue",
        "put",
        "prof_folder",
        "command_queue",
        "empty",
        "time",
        "sleep",
        "command_queue",
        "get",
        "logger",
        "info",
        "browser_params",
        "command",
        "command_executor",
        "execute_command",
        "command",
        "driver",
        "proxy_site_queue",
        "browser_settings",
        "browser_params",
        "extension_socket",
        "status_queue",
        "put",
        "e",
        "logger",
        "info",
        "browser_params",
        "e",
        "e",
        "status_queue",
        "put"
    ],
    "literals": [
        "'aggregator_address'",
        "'logger_address'",
        "'crawl_id'",
        "\"/\"",
        "'profile_tar'",
        "'random_attributes'",
        "\"BROWSER %i: Spawn attempt %i \"",
        "'READY'",
        "\"BROWSER %i: Mismatch of status queue return values, trying again...\"",
        "\"BROWSER %i: Spawn unsuccessful | Profile: %s | Display: %s | Launch attempted: %s | Browser: %s\"",
        "\"BROWSER %i: Browser spawn sucessful!\"",
        "'profile_tar'",
        "\"BROWSER %i: Browser manager process does not exist\"",
        "\"BROWSER %i: Display process does not exit\"",
        "\"BROWSER %i: PID may not be the correct type %s\"",
        "\"/tmp/.X\"",
        "\"-lock\"",
        "\"BROWSER %i: Screen lockfile already removed\"",
        "\"BROWSER %i: Browser process does not exist\"",
        "'logger_address'",
        "'proxy'",
        "'aggregator_address'",
        "'logger_address'",
        "'crawl_id'",
        "'proxy'",
        "'browser'",
        "'firefox'",
        "'extension'",
        "'enabled'",
        "\"BROWSER %i: Looking for extension port information in %s\"",
        "'crawl_id'",
        "'extension_port.txt'",
        "'extension_port.txt'",
        "'r'",
        "'127.0.0.1'",
        "'READY'",
        "'profile_path'",
        "\"BROWSER %i: EXECUTING COMMAND: %s\"",
        "'crawl_id'",
        "\"OK\"",
        "\"BROWSER %i: Crash in driver, restarting browser manager \\n %s \\n %s\"",
        "'crawl_id'",
        "\"FAILED\""
    ],
    "variables": [
        "current_profile_path",
        "db_socket_address",
        "logger_address",
        "crawl_id",
        "browser_params",
        "command_thread",
        "command_queue",
        "status_queue",
        "browser_pid",
        "display_pid",
        "display_port",
        "is_fresh",
        "current_timeout",
        "browser_settings",
        "browser_manager",
        "logger",
        "crashed_profile_path",
        "tempdir",
        "crash_recovery",
        "tempdir",
        "crashed_profile_path",
        "crash_recovery",
        "unsuccessful_spawns",
        "retry",
        "success",
        "args",
        "browser_manager",
        "daemon",
        "prof_done",
        "disp_done",
        "browser_done",
        "ready_done",
        "launch_attempted",
        "current_profile_path",
        "prof_done",
        "disp_done",
        "useless",
        "launch_attempted",
        "browser_done",
        "success",
        "is_fresh",
        "current_profile_path",
        "logger",
        "proxy_site_queue",
        "local_port",
        "proxy_site_queue",
        "browser_params",
        "driver",
        "prof_folder",
        "browser_settings",
        "port",
        "extension_socket",
        "extension_socket",
        "browser_params",
        "command"
    ],
    "comments": [
        "manager parameters",
        "Queues and process IDs for BrowserManager",
        "thread to run commands issues from TaskManager",
        "queue for passing command tuples to BrowserManager",
        "queue for receiving command execution status from BrowserManager",
        "pid for browser instance controlled by BrowserManager",
        "the pid of the display for the headless browser (if it exists)",
        "the port of the display for the headless browser (if it exists)",
        "boolean that says if the BrowserManager new (used to optimize restarts)",
        "timeout of the current command",
        "dict of additional browser profile settings (e.g. screen_res)",
        "process that controls browser",
        "connection to loggingserver",
        "if this is restarting from a crash, update the tar location",
        "to be a tar of the crashed browser's history",
        "tar contents of crashed profile to a temp dir",
        "make sure browser loads crashed profile",
        "don't re-randomize attributes",
        "Try to spawn the browser within the timelimit",
        "Resets the command/status queues",
        "builds and launches the browser_manager",
        "Read success status of browser manager",
        "if recovering from a crash, new browser has a new profile dir",
        "so the crashed dir and temporary tar dump can be cleaned up",
        "browser is fresh iff it starts from a blank profile",
        "optimization in case resetting after a relaunch",
        "in case of reset, hard-deletes old profile",
        "terminates a BrowserManager, its browser instance and, if necessary, its virtual display",
        "xvfb diplay lock",
        "Start the proxy",
        "used to pass the current site down to the proxy",
        "Start the virtualdisplay (if necessary), webdriver, and browser",
        "Read the extension port -- if extension is enabled",
        "TODO: This needs to be cleaner",
        "passes the profile folder, WebDriver pid and display pid back to the TaskManager",
        "now, the TaskManager knows that the browser is successfully set up",
        "starts accepting arguments until told to die",
        "no command for now -> sleep to avoid pegging CPU on blocking get",
        "reads in the command tuple of form (command, arg0, arg1, arg2, ..., argN) where N is variable",
        "attempts to perform an action and return an OK signal",
        "if command fails for whatever reason, tell the TaskMaster to kill and restart its worker processes"
    ],
    "docstrings": [
        "\"\"\"\n     Sets up a WebDriver instance that adheres to a given set of user paramters\n     Continually listens to the TaskManager for commands and passes them to command module to execute\n     Sends OK signal if command succeeds or else sends a FAILED signal to indicate that workers should be restarted\n\n     <command_queue> is the queue through which the browser sends command tuples\n     <status_queue> is a queue through which the BrowserManager either signals command failure or success\n     <db_socket_address> is the socket address through which to send data to the DataAggregator to manipulate and write\n     <browser_params> are browser parameter settings (e.g. whether we're using a proxy, headless, etc.)\n\n     \"\"\"",
        "\"\"\" return if the browser is ready to accept a command \"\"\"",
        "\"\"\"\n        sets up the BrowserManager and gets the process id, browser pid and, if applicable, screen pid\n        loads associated user profile if necessary\n        <spawn_timeout> is the timeout for creating BrowserManager\n        \"\"\"",
        "\"\"\" resets the worker processes with profile to a clean state \"\"\"",
        "\"\"\"\n        kill and restart the two worker processes\n        <reset> marks whether we want to wipe the old profile\n        \"\"\""
    ],
    "functions": [
        "ready",
        "launch_browser_manager",
        "reset",
        "restart_browser_manager",
        "kill_browser_manager",
        "BrowserManager"
    ],
    "classes": [
        "Browser"
    ]
}