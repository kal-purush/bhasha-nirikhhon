{
    "identifiers": [
        "Collections",
        "Generic",
        "Data",
        "Linq",
        "Text",
        "Threading",
        "Tasks",
        "Windows",
        "Forms",
        "ApteanEdgeBank",
        "accID",
        "UserDAO",
        "DataTable",
        "accID",
        "accTable",
        "dao",
        "GetData",
        "myQuery",
        "connectionstring",
        "accTable",
        "Rows",
        "Count",
        "accID",
        "transType",
        "amount",
        "transDate",
        "UserDAO",
        "accID",
        "transDate",
        "transType",
        "amount",
        "dao",
        "InsertData",
        "myQuery",
        "connectionstring",
        "accId",
        "UserDAO",
        "accId",
        "DataTable",
        "activityTable",
        "dao",
        "GetData",
        "myQuery",
        "connectionstring",
        "activityTable",
        "accId",
        "UserDAO",
        "accId",
        "DataTable",
        "dt",
        "dao",
        "GetData",
        "getCurrentBalance",
        "connectionstring",
        "currentBalance",
        "Convert",
        "ToDouble",
        "dt",
        "Rows",
        "CheckAccountExistence",
        "accId",
        "currentBalance",
        "MessageBox",
        "Show"
    ],
    "literals": [
        "\"select * from Account where AccountID=\"",
        "\"Data Source=WS003LT1553PRD;Initial Catalog=ApteanEdgeBank;User=sa;Password=abc-123\"",
        "\"insert into AccountActivityLedger values(\"",
        "\",\"",
        "\"'\"",
        "\"'\"",
        "\",\"",
        "\"'\"",
        "\"'\"",
        "\",\"",
        "\")\"",
        "\"Data Source=WS003LT1553PRD;Initial Catalog=ApteanEdgeBank;User=sa;Password=abc-123\"",
        "\"Select * from AccountActivityLedger where AccountID=\"",
        "\"Data Source=WS003LT1553PRD;Initial Catalog=ApteanEdgeBank;User=sa;Password=abc-123\"",
        "\"Data Source=WS003LT1553PRD;Initial Catalog=ApteanEdgeBank;User=sa;Password=abc-123\"",
        "\"Select * from Account where AccountID=\"",
        "\"AccountBalance\"",
        "\"Account Does not exist!\""
    ],
    "variables": [
        "accountID",
        "transactionType",
        "transactionAmount",
        "transactionDate",
        "UserDAO",
        "dao",
        "DataTable",
        "accTable",
        "myQuery",
        "connectionstring",
        "UserDAO",
        "dao",
        "myQuery",
        "connectionstring",
        "UserDAO",
        "dao",
        "myQuery",
        "DataTable",
        "activityTable",
        "connectionstring",
        "UserDAO",
        "dao",
        "connectionstring",
        "getCurrentBalance",
        "currentBalance",
        "DataTable",
        "dt"
    ],
    "comments": [
        "int activityID;",
        "if (CheckAccountExistence(accID))",
        "{",
        "}",
        "else\n            {\n                MessageBox.Show(\"Account Does not exist!\");\n            }",
        "string myQuery = \"Select * from AccountActivityLedger where AccountID=\" + accId;",
        "double sum=currentBalance;\n            DataTable activityLog = new DataTable();\n\n            double accountBalance = 0.0;",
        "//sumDeposits = currentBalance;\n                activityLog = dao.GetData(myQuery, connectionstring);\n                foreach (DataRow row in activityLog.Rows)\n                {\n                    if (Convert.ToString(row[\"Activitycode\"]) == \"Deposit\")\n                    {\n                        sum=sum+Convert.ToDouble(row[\"Amount\"]);\n                    }\n                    else\n                    {\n                        sum=sum-Convert.ToDouble(row[\"Amount\"]);\n                    }\n                }\n\n                accountBalance = sum;\n                string updateNewBalance = \"Update Account set AccountBalance=\" + accountBalance + \" where AccountID=\" + accId;\n                dao.UpdateData(updateNewBalance, connectionstring);\n                return accountBalance;"
    ],
    "docstrings": [],
    "functions": [
        "AccountActivityLedger",
        "CheckAccountExistence",
        "AddAccountActivity",
        "DataTable",
        "ReadAccountActivity",
        "CalculateAccountBalance"
    ],
    "classes": [
        "AccountActivityLedger"
    ]
}