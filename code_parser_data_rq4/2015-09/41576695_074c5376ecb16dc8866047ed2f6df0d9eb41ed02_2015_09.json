{
    "identifiers": [
        "cn",
        "imethan",
        "common",
        "security",
        "java",
        "io",
        "java",
        "util",
        "regex",
        "Pattern",
        "javax",
        "servlet",
        "FilterChain",
        "javax",
        "servlet",
        "ServletException",
        "javax",
        "servlet",
        "http",
        "HttpServletRequest",
        "javax",
        "servlet",
        "http",
        "HttpServletResponse",
        "javax",
        "servlet",
        "http",
        "HttpSession",
        "org",
        "apache",
        "commons",
        "logging",
        "Log",
        "org",
        "apache",
        "commons",
        "logging",
        "LogFactory",
        "org",
        "springframework",
        "security",
        "web",
        "access",
        "AccessDeniedHandler",
        "org",
        "springframework",
        "security",
        "web",
        "access",
        "AccessDeniedHandlerImpl",
        "org",
        "springframework",
        "security",
        "web",
        "csrf",
        "CsrfToken",
        "org",
        "springframework",
        "security",
        "web",
        "csrf",
        "CsrfTokenRepository",
        "org",
        "springframework",
        "security",
        "web",
        "csrf",
        "HttpSessionCsrfTokenRepository",
        "org",
        "springframework",
        "security",
        "web",
        "csrf",
        "InvalidCsrfTokenException",
        "org",
        "springframework",
        "security",
        "web",
        "csrf",
        "MissingCsrfTokenException",
        "org",
        "springframework",
        "security",
        "web",
        "util",
        "UrlUtils",
        "org",
        "springframework",
        "security",
        "web",
        "util",
        "matcher",
        "RequestMatcher",
        "org",
        "springframework",
        "util",
        "Assert",
        "org",
        "springframework",
        "web",
        "OncePerRequestFilter",
        "DEFAULT_CSRF_MATCHER",
        "logger",
        "LogFactory",
        "getLog",
        "getClass",
        "tokenRepository",
        "requireCsrfProtectionMatcher",
        "accessDeniedHandler",
        "csrfTokenRepository",
        "Assert",
        "notNull",
        "csrfTokenRepository",
        "tokenRepository",
        "csrfTokenRepository",
        "Override",
        "request",
        "response",
        "filterChain",
        "csrfToken",
        "tokenRepository",
        "loadToken",
        "request",
        "missingToken",
        "csrfToken",
        "missingToken",
        "generatedToken",
        "tokenRepository",
        "generateToken",
        "request",
        "csrfToken",
        "tokenRepository",
        "request",
        "response",
        "generatedToken",
        "request",
        "setAttribute",
        "getName",
        "csrfToken",
        "request",
        "setAttribute",
        "csrfToken",
        "getParameterName",
        "csrfToken",
        "requireCsrfProtectionMatcher",
        "matches",
        "request",
        "filterChain",
        "doFilter",
        "request",
        "response",
        "actualToken",
        "request",
        "getHeader",
        "csrfToken",
        "getHeaderName",
        "actualToken",
        "actualToken",
        "request",
        "getParameter",
        "csrfToken",
        "getParameterName",
        "csrfToken",
        "getToken",
        "equals",
        "actualToken",
        "logger",
        "isDebugEnabled",
        "logger",
        "debug",
        "UrlUtils",
        "buildFullRequestUrl",
        "request",
        "missingToken",
        "accessDeniedHandler",
        "handle",
        "request",
        "response",
        "actualToken",
        "accessDeniedHandler",
        "handle",
        "request",
        "response",
        "csrfToken",
        "actualToken",
        "filterChain",
        "doFilter",
        "request",
        "response",
        "requireCsrfProtectionMatcher",
        "Assert",
        "notNull",
        "requireCsrfProtectionMatcher",
        "requireCsrfProtectionMatcher",
        "requireCsrfProtectionMatcher",
        "accessDeniedHandler",
        "Assert",
        "notNull",
        "accessDeniedHandler",
        "accessDeniedHandler",
        "accessDeniedHandler",
        "SuppressWarnings",
        "tokenRepository",
        "request",
        "response",
        "tokenRepository",
        "request",
        "response",
        "tokenRepository",
        "tokenRepository",
        "request",
        "request",
        "response",
        "response",
        "getHeaderName",
        "getParameterName",
        "saveTokenIfNecessary",
        "getToken",
        "Override",
        "Override",
        "prime",
        "result",
        "result",
        "prime",
        "result",
        "hashCode",
        "result",
        "Override",
        "obj",
        "obj",
        "obj",
        "getClass",
        "obj",
        "getClass",
        "other",
        "obj",
        "other",
        "equals",
        "other",
        "tokenRepository",
        "tokenRepository",
        "tokenRepository",
        "saveToken",
        "request",
        "response",
        "tokenRepository",
        "request",
        "response",
        "allowedMethods",
        "Pattern",
        "compile",
        "request",
        "allowedMethods",
        "matcher",
        "request",
        "getMethod",
        "matches"
    ],
    "literals": [
        "\"csrfTokenRepository cannot be null\"",
        "\"Invalid CSRF token found for \"",
        "\"requireCsrfProtectionMatcher cannot be null\"",
        "\"accessDeniedHandler cannot be null\"",
        "\"serial\"",
        "\"SaveOnAccessCsrfToken [delegate=\"",
        "\"]\"",
        "\"^(POST|GET|HEAD|TRACE|OPTIONS)$\""
    ],
    "variables": [
        "tokenRepository",
        "tokenRepository",
        "request",
        "response",
        "delegate"
    ],
    "comments": [],
    "docstrings": [
        "* Copyright 2002-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* <p>\n * Applies <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\"\n * >CSRF</a> protection using a synchronizer token pattern. Developers are required to\n * ensure that {@link CsrfFilter} is invoked for any request that allows state to change.\n * Typically this just means that they should ensure their web application follows proper\n * REST semantics (i.e. do not change state with the HTTP methods GET, HEAD, TRACE,\n * OPTIONS).\n * </p>\n *\n * <p>\n * Typically the {@link CsrfTokenRepository} implementation chooses to store the\n * {@link CsrfToken} in {@link HttpSession} with {@link HttpSessionCsrfTokenRepository}.\n * This is preferred to storing the token in a cookie which can be modified by a client application.\n * </p>\n *\n * @author Rob Winch\n * @since 3.2",
        "* The default {@link RequestMatcher} that indicates if CSRF protection is required or\n\t * not. The default is to ignore GET, HEAD, TRACE, OPTIONS and process all other\n\t * requests.",
        "* (non-Javadoc)\n\t *\n\t * @see\n\t * org.springframework.web.filter.OncePerRequestFilter#doFilterInternal(javax.servlet\n\t * .http.HttpServletRequest, javax.servlet.http.HttpServletResponse,\n\t * javax.servlet.FilterChain)",
        "* Specifies a {@link RequestMatcher} that is used to determine if CSRF protection\n\t * should be applied. If the {@link RequestMatcher} returns true for a given request,\n\t * then CSRF protection is applied.\n\t *\n\t * <p>\n\t * The default is to apply CSRF protection for any HTTP method other than GET, HEAD,\n\t * TRACE, OPTIONS.\n\t * </p>\n\t *\n\t * @param requireCsrfProtectionMatcher the {@link RequestMatcher} used to determine if\n\t * CSRF protection should be applied.",
        "* Specifies a {@link AccessDeniedHandler} that should be used when CSRF protection\n\t * fails.\n\t *\n\t * <p>\n\t * The default is to use AccessDeniedHandlerImpl with no arguments.\n\t * </p>\n\t *\n\t * @param accessDeniedHandler the {@link AccessDeniedHandler} to use",
        "* (non-Javadoc)\n\t\t *\n\t\t * @see\n\t\t * org.springframework.security.web.util.matcher.RequestMatcher#matches(javax.\n\t\t * servlet.http.HttpServletRequest)"
    ],
    "functions": [
        "CsrfFilter",
        "doFilterInternal",
        "setRequireCsrfProtectionMatcher",
        "setAccessDeniedHandler",
        "SaveOnAccessCsrfToken",
        "getHeaderName",
        "getParameterName",
        "getToken",
        "toString",
        "hashCode",
        "equals",
        "saveTokenIfNecessary",
        "matches"
    ],
    "classes": [
        "CsrfFilter",
        "SaveOnAccessCsrfToken",
        "DefaultRequiresCsrfMatcher"
    ]
}