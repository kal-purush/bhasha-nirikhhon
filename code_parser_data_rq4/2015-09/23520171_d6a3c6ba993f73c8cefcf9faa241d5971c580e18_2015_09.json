{
    "identifiers": [
        "glumpy",
        "app",
        "gl",
        "gloo",
        "gloo",
        "Program",
        "vertex",
        "fragment",
        "count",
        "app",
        "Window",
        "width",
        "height",
        "dt",
        "clear",
        "gl",
        "glGetIntegerv",
        "gl",
        "GL_VIEWPORT",
        "program",
        "draw",
        "gl",
        "GL_TRIANGLE_STRIP",
        "program",
        "dt",
        "width",
        "height",
        "gl",
        "glViewport",
        "width",
        "height",
        "x",
        "y",
        "button",
        "gl",
        "glGetIntegerv",
        "gl",
        "GL_VIEWPORT",
        "x",
        "w",
        "y",
        "h",
        "timer",
        "dt",
        "set_title",
        "format",
        "program",
        "fps",
        "encode",
        "app",
        "run"
    ],
    "literals": [
        "'a_position'",
        "'iGlobalTime'",
        "'iGlobalTime'",
        "\"iMouse\"",
        "\"time:{:5.1f}\\tfps:{:3.1f}\"",
        "'iGlobalTime'"
    ],
    "variables": [
        "vertex",
        "fragment",
        "program",
        "program",
        "program",
        "_",
        "_",
        "w",
        "h",
        "_",
        "_",
        "w",
        "h",
        "program"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "Distributed under the (new) BSD License.",
        "-----------------------------------------------------------------------------"
    ],
    "docstrings": [
        "\"\"\"\nFluid with obstacles.\nhttps://www.shadertoy.com/view/lllGDl\n\"\"\"",
        "'''\nattribute vec2 a_position;\nvarying vec2 fragCoord;\n\nvoid main()\n{\n    gl_Position = vec4(a_position, 0.0, 1.0);\n    fragCoord = a_position;\n}\n'''",
        "'''\nvarying vec2 fragCoord;\nuniform float iGlobalTime;\nuniform vec2 iMouse;\n\n#define STEP_COUNT 10\n\n//these are the field movers\nvec2 swirl(vec2 uv, vec2 center, float strength, float eyeWall) {\n    vec2 d = uv - center;\n    return vec2(d.y, -d.x)/(dot(d,d)/strength+eyeWall);\n}\nvec2 spray(vec2 uv, vec2 center, vec2 dir, float strength, float eyeWall){\n    vec2 d = uv - center;\n    return vec2(d.x, d.y)/(dot(d,d)/strength+eyeWall)*dot(d,dir);\n}\nvec2 drain(vec2 uv, vec2 center, float strength, float eyeWall){\n    vec2 d = uv - center;\n    return -vec2(d.x, d.y)/(dot(d,d)/strength+eyeWall);\n}\n//DE is used to define barriors\nfloat Tube(vec2 pa, vec2 ba){\n    return length(pa-ba*clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0));\n}\nfloat DE(vec2 p){\n    p+=vec2(0.5);\n    return min(length(p),Tube(p-vec2(1.0),vec2(0.4,0.2)));\n}\nvec2 ReflectOffSurf(vec2 p, vec2 r){\n    float d=max(DE(p),0.001);\n    vec2 v=vec2(d,0.0);\n    vec2 N=normalize(vec2(DE(p+v.xy)-DE(p-v.xy),DE(p+v.yx)-DE(p-v.yx)));\n    d=clamp(sqrt(d)*1.1,0.0,1.0);\n    r=mix(reflect(r,N)*clamp(0.5-0.5*dot(r,N),0.0,1.0),r*d,d);\n    return r;\n}\nvec2 field(vec2 uv) {\n    vec2 mouse = (iMouse.x == 0. && iMouse.y==0.) ? vec2(-0.15,-0.1) : iMouse.xy;\n    mouse*=3.0;\n    vec2 p=\n        swirl(uv, mouse,1.5,0.25)\n        +spray(uv,-mouse,vec2(-1.0,0.5),0.5,0.1)\n        +drain(uv,mouse,0.5,0.75)\n    ;\n    p=ReflectOffSurf(uv,p);\n    return p;\n}\n\n//just basic clouds from perlin noise\nfloat rand(vec2 co){return fract(sin(dot(co,vec2(12.9898,78.233)))*43758.5453);}\nfloat noyz(vec2 co){\n    vec2 d=smoothstep(0.0,1.0,fract(co));\n    co=floor(co);\n    const vec2 v=vec2(1.0,0.0);\n    return mix(mix(rand(co),rand(co+v.xy),d.x),\n        mix(rand(co+v.yx),rand(co+v.xx),d.x),d.y);\n}\nfloat clouds( in vec2 q, in float tm )\n{\n    float f=0.0,a=0.6;\n    for(int i=0;i<5;i++){\n            f+= a*noyz( q+tm );\n        q = q*2.03;\n        a = a*0.5;\n    }\n    return f;\n}\n\nfloat getPattern(vec2 uv) {\n    //this can be any pattern but moving patterns work best\n    float w=clouds(uv*5.0, iGlobalTime*0.5);\n    return w;\n}\n\nvec2 calcNext(vec2 uv, float t) {\n    t /= float(STEP_COUNT);\n    for(int i = 0; i < STEP_COUNT; ++i) {\n        uv -= field(uv)*t;\n    }\n    return uv;\n}\n\nvec3 heatmap(float h){\n    return mix(vec3(0.1,0.2,0.4),vec3(2.0,1.5-h,0.5)/(1.0+h),h);\n}\n\nvec3 Fluid(vec2 uv, float t) {\n    float t1 = t*0.5;\n    float t2 = t1 + 0.5;\n    vec2 uv1 = calcNext(uv, t1);\n    vec2 uv2 = calcNext(uv, t2);\n    float c1 = getPattern(uv1);\n    float c2 = getPattern(uv2);\n    float c=mix(c2,c1,t);\n    float f=1.5-0.5*abs(t-0.5);\n    c=pow(c,f)*f;//correcting the contrast/brightness when sliding\n    float h=mix(length(uv-uv2),length(uv-uv1),t);\n    return 2.0*c*heatmap(clamp(h*0.5,0.0,1.0));//blue means slow, red = fast\n}\n\nvoid main()\n{\n    vec2 uv = fragCoord;\n    uv*=3.0;\n    float t = fract(iGlobalTime);\n    vec3 c = Fluid(uv,t);//draws fluid\n    float d=DE(uv);//get distance to objects\n    c=mix(vec3(1.0-10.0*d*d),c,smoothstep(0.2,0.25,d));//mix in objects\n    gl_FragColor = vec4(c,1.0);\n}\n\n'''"
    ],
    "functions": [
        "on_draw",
        "on_resize",
        "on_mouse_press",
        "timer"
    ],
    "classes": []
}