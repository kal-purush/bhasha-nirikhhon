{
    "identifiers": [
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "hash",
        "bbss",
        "bbdef",
        "i",
        "hash",
        "bbss",
        "bbtyp",
        "i",
        "i",
        "bbtyp",
        "keys",
        "hash",
        "bbss",
        "bbldef",
        "bbkb",
        "i",
        "hash",
        "bbss",
        "bbltyp",
        "i",
        "bbkbtyp",
        "i",
        "i",
        "bbltyp",
        "keys",
        "hash",
        "bbss",
        "bbadef",
        "bbka",
        "i",
        "hash",
        "bbss",
        "bbatyp",
        "i",
        "bbkatyp",
        "i",
        "i",
        "bbatyp",
        "keys",
        "hash",
        "bbss",
        "bbddef",
        "bbkd",
        "bbdmul",
        "i",
        "hash",
        "bbss",
        "bbdtyp",
        "i",
        "bbkdtyp",
        "i",
        "i",
        "bbdtyp",
        "keys",
        "r1",
        "ss",
        "bbBeadDictS",
        "get",
        "r1",
        "bbBeadDictD",
        "get",
        "ss",
        "bbBeadDictD",
        "get",
        "ss",
        "r",
        "ca",
        "ss",
        "math",
        "math",
        "sqrt",
        "distance2",
        "ca",
        "ca",
        "r",
        "ca",
        "ss",
        "math",
        "math",
        "acos",
        "cos_angle",
        "i",
        "j",
        "i",
        "j",
        "ca",
        "ca",
        "i",
        "j",
        "i",
        "j",
        "ca",
        "ca",
        "d2r",
        "logging",
        "logging",
        "info",
        "logging",
        "info",
        "logging",
        "info",
        "logging",
        "info",
        "logging",
        "info",
        "logging",
        "warning",
        "logging",
        "warning",
        "logging",
        "warning",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "i",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "hash",
        "bbss",
        "bbdef",
        "i",
        "hash",
        "bbss",
        "bbtyp",
        "i",
        "i",
        "bbtyp",
        "keys",
        "hash",
        "bbss",
        "bbldef",
        "bbkb",
        "i",
        "hash",
        "bbss",
        "bbltyp",
        "i",
        "bbkbtyp",
        "i",
        "i",
        "bbltyp",
        "keys",
        "hash",
        "bbss",
        "bbadef",
        "bbka",
        "i",
        "hash",
        "bbss",
        "bbatyp",
        "i",
        "bbkatyp",
        "i",
        "i",
        "bbatyp",
        "keys",
        "hash",
        "bbss",
        "bbddef",
        "bbkd",
        "bbdmul",
        "i",
        "hash",
        "bbss",
        "bbdtyp",
        "i",
        "bbkdtyp",
        "i",
        "i",
        "bbdtyp",
        "keys",
        "r1",
        "ss",
        "bbBeadDictS",
        "get",
        "r1",
        "bbBeadDictD",
        "get",
        "ss",
        "bbBeadDictD",
        "get",
        "ss",
        "r",
        "a",
        "ss",
        "bbBondDictS",
        "get",
        "r",
        "bbBondDictD",
        "get",
        "ss",
        "bbBondDictD",
        "get",
        "ss",
        "bbBondDictS",
        "get",
        "r",
        "bbBondDictD",
        "get",
        "ss",
        "bbBondDictD",
        "get",
        "ss",
        "b1",
        "b2",
        "min",
        "b1",
        "b2",
        "r",
        "ca",
        "ss",
        "r",
        "ss",
        "bbAngleDictS",
        "get",
        "ss",
        "bbAngleDictS",
        "get",
        "r",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictS",
        "get",
        "r",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictS",
        "get",
        "r",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictD",
        "get",
        "ss",
        "a",
        "sort",
        "key",
        "i",
        "i",
        "i",
        "a",
        "logging",
        "logging",
        "info",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "hash",
        "bbss",
        "bbdef",
        "i",
        "hash",
        "bbss",
        "bbtyp",
        "i",
        "i",
        "bbtyp",
        "keys",
        "hash",
        "bbss",
        "bbldef",
        "bbkb",
        "i",
        "hash",
        "bbss",
        "bbltyp",
        "i",
        "bbkbtyp",
        "i",
        "i",
        "bbltyp",
        "keys",
        "hash",
        "bbss",
        "bbadef",
        "bbka",
        "i",
        "hash",
        "bbss",
        "bbatyp",
        "i",
        "bbkatyp",
        "i",
        "i",
        "bbatyp",
        "keys",
        "hash",
        "bbss",
        "bbddef",
        "bbkd",
        "bbdmul",
        "i",
        "hash",
        "bbss",
        "bbdtyp",
        "i",
        "bbkdtyp",
        "i",
        "i",
        "bbdtyp",
        "keys",
        "r1",
        "ss",
        "bbBeadDictS",
        "get",
        "r1",
        "bbBeadDictD",
        "get",
        "ss",
        "bbBeadDictD",
        "get",
        "ss",
        "r",
        "ca",
        "ss",
        "math",
        "math",
        "sqrt",
        "distance2",
        "ca",
        "ca",
        "r",
        "ca",
        "ss",
        "math",
        "math",
        "acos",
        "cos_angle",
        "i",
        "j",
        "i",
        "j",
        "ca",
        "ca",
        "i",
        "j",
        "i",
        "j",
        "ca",
        "ca",
        "d2r",
        "logging",
        "logging",
        "info",
        "logging",
        "info",
        "logging",
        "info",
        "logging",
        "info",
        "logging",
        "info",
        "logging",
        "warning",
        "logging",
        "warning",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "i",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "hash",
        "bbss",
        "bbdef",
        "i",
        "hash",
        "bbss",
        "bbtyp",
        "i",
        "i",
        "bbtyp",
        "keys",
        "hash",
        "bbss",
        "bbldef",
        "bbkb",
        "i",
        "hash",
        "bbss",
        "bbltyp",
        "i",
        "bbkbtyp",
        "i",
        "i",
        "bbltyp",
        "keys",
        "hash",
        "bbss",
        "bbadef",
        "bbka",
        "i",
        "hash",
        "bbss",
        "bbatyp",
        "i",
        "bbkatyp",
        "i",
        "i",
        "bbatyp",
        "keys",
        "hash",
        "bbss",
        "bbddef",
        "bbkd",
        "bbdmul",
        "i",
        "hash",
        "bbss",
        "bbdtyp",
        "i",
        "bbkdtyp",
        "i",
        "i",
        "bbdtyp",
        "keys",
        "r1",
        "ss",
        "bbBeadDictS",
        "get",
        "r1",
        "bbBeadDictD",
        "get",
        "ss",
        "bbBeadDictD",
        "get",
        "ss",
        "r",
        "a",
        "ss",
        "bbBondDictS",
        "get",
        "r",
        "bbBondDictD",
        "get",
        "ss",
        "bbBondDictD",
        "get",
        "ss",
        "bbBondDictS",
        "get",
        "r",
        "bbBondDictD",
        "get",
        "ss",
        "bbBondDictD",
        "get",
        "ss",
        "b1",
        "b2",
        "min",
        "b1",
        "b2",
        "r",
        "ca",
        "ss",
        "r",
        "ss",
        "bbAngleDictS",
        "get",
        "ss",
        "bbAngleDictS",
        "get",
        "r",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictS",
        "get",
        "r",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictS",
        "get",
        "r",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictD",
        "get",
        "ss",
        "a",
        "sort",
        "key",
        "i",
        "i",
        "i",
        "a",
        "logging",
        "info",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "hash",
        "bbss",
        "bbdef",
        "i",
        "hash",
        "bbss",
        "bbtyp",
        "i",
        "i",
        "bbtyp",
        "keys",
        "hash",
        "bbss",
        "bbldef",
        "bbkb",
        "i",
        "hash",
        "bbss",
        "bbltyp",
        "i",
        "bbkbtyp",
        "i",
        "i",
        "bbltyp",
        "keys",
        "hash",
        "bbss",
        "bbadef",
        "bbka",
        "i",
        "hash",
        "bbss",
        "bbatyp",
        "i",
        "bbkatyp",
        "i",
        "i",
        "bbatyp",
        "keys",
        "hash",
        "bbss",
        "bbddef",
        "bbkd",
        "bbdmul",
        "i",
        "hash",
        "bbss",
        "bbdtyp",
        "i",
        "bbkdtyp",
        "i",
        "i",
        "bbdtyp",
        "keys",
        "r1",
        "ss",
        "bbBeadDictS",
        "get",
        "r1",
        "bbBeadDictD",
        "get",
        "ss",
        "bbBeadDictD",
        "get",
        "ss",
        "r",
        "ca",
        "ss",
        "math",
        "math",
        "sqrt",
        "distance2",
        "ca",
        "ca",
        "r",
        "ca",
        "ss",
        "math",
        "math",
        "acos",
        "cos_angle",
        "i",
        "j",
        "i",
        "j",
        "ca",
        "ca",
        "i",
        "j",
        "i",
        "j",
        "ca",
        "ca",
        "d2r",
        "logging",
        "logging",
        "info",
        "logging",
        "info",
        "logging",
        "info",
        "logging",
        "info",
        "logging",
        "info",
        "logging",
        "warning",
        "logging",
        "warning",
        "logging",
        "warning",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "i",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "hash",
        "bbss",
        "bbdef",
        "i",
        "hash",
        "bbss",
        "bbtyp",
        "i",
        "i",
        "bbtyp",
        "keys",
        "hash",
        "bbss",
        "bbldef",
        "bbkb",
        "i",
        "hash",
        "bbss",
        "bbltyp",
        "i",
        "bbkbtyp",
        "i",
        "i",
        "bbltyp",
        "keys",
        "hash",
        "bbss",
        "bbadef",
        "bbka",
        "i",
        "hash",
        "bbss",
        "bbatyp",
        "i",
        "bbkatyp",
        "i",
        "i",
        "bbatyp",
        "keys",
        "hash",
        "bbss",
        "bbddef",
        "bbkd",
        "bbdmul",
        "i",
        "hash",
        "bbss",
        "bbdtyp",
        "i",
        "bbkdtyp",
        "i",
        "i",
        "bbdtyp",
        "keys",
        "r1",
        "ss",
        "bbBeadDictS",
        "get",
        "r1",
        "bbBeadDictD",
        "get",
        "ss",
        "bbBeadDictD",
        "get",
        "ss",
        "r",
        "a",
        "ss",
        "bbBondDictS",
        "get",
        "r",
        "bbBondDictD",
        "get",
        "ss",
        "bbBondDictD",
        "get",
        "ss",
        "bbBondDictS",
        "get",
        "r",
        "bbBondDictD",
        "get",
        "ss",
        "bbBondDictD",
        "get",
        "ss",
        "b1",
        "b2",
        "min",
        "b1",
        "b2",
        "r",
        "ca",
        "ss",
        "r",
        "ss",
        "bbAngleDictS",
        "get",
        "ss",
        "bbAngleDictS",
        "get",
        "r",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictS",
        "get",
        "r",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictS",
        "get",
        "r",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictD",
        "get",
        "ss",
        "a",
        "sort",
        "key",
        "i",
        "i",
        "i",
        "a",
        "logging",
        "logging",
        "warning",
        "logging",
        "info",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "i",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "spl",
        "hash",
        "bbss",
        "bbdef",
        "i",
        "hash",
        "bbss",
        "bbtyp",
        "i",
        "i",
        "bbtyp",
        "keys",
        "hash",
        "bbss",
        "bbldef",
        "bbkb",
        "i",
        "hash",
        "bbss",
        "bbltyp",
        "i",
        "bbkbtyp",
        "i",
        "i",
        "bbltyp",
        "keys",
        "hash",
        "bbss",
        "bbadef",
        "bbka",
        "i",
        "hash",
        "bbss",
        "bbatyp",
        "i",
        "bbkatyp",
        "i",
        "i",
        "bbatyp",
        "keys",
        "hash",
        "bbss",
        "bbddef",
        "bbkd",
        "bbdmul",
        "i",
        "hash",
        "bbss",
        "bbdtyp",
        "i",
        "bbkdtyp",
        "i",
        "i",
        "bbdtyp",
        "keys",
        "r1",
        "ss",
        "bbBeadDictS",
        "get",
        "r1",
        "bbBeadDictD",
        "get",
        "ss",
        "bbBeadDictD",
        "get",
        "ss",
        "r",
        "a",
        "ss",
        "bbBondDictS",
        "get",
        "r",
        "bbBondDictD",
        "get",
        "ss",
        "bbBondDictD",
        "get",
        "ss",
        "bbBondDictS",
        "get",
        "r",
        "bbBondDictD",
        "get",
        "ss",
        "bbBondDictD",
        "get",
        "ss",
        "b1",
        "b2",
        "min",
        "b1",
        "b2",
        "r",
        "ca",
        "ss",
        "r",
        "ss",
        "bbAngleDictS",
        "get",
        "ss",
        "bbAngleDictS",
        "get",
        "r",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictS",
        "get",
        "r",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictS",
        "get",
        "r",
        "bbAngleDictD",
        "get",
        "ss",
        "bbAngleDictD",
        "get",
        "ss",
        "a",
        "sort",
        "key",
        "i",
        "i",
        "i",
        "a",
        "logging",
        "logging",
        "warning",
        "logging",
        "warning",
        "logging",
        "warning",
        "logging",
        "info",
        "types",
        "os",
        "func",
        "num",
        "description",
        "func",
        "num",
        "description",
        "func",
        "value",
        "value",
        "value",
        "value",
        "v",
        "len",
        "v",
        "func",
        "v",
        "func",
        "i",
        "i",
        "v",
        "ff",
        "split",
        "ff",
        "globals",
        "values",
        "ff",
        "types",
        "ClassType",
        "hasattr",
        "ff",
        "forcefields",
        "ff",
        "ff",
        "os",
        "listdir",
        "ff",
        "os",
        "environ",
        "has_key",
        "forcefields",
        "ff",
        "ff",
        "os",
        "listdir",
        "os",
        "environ",
        "ff",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "lists",
        "append",
        "Option",
        "lists",
        "append",
        "Option",
        "lists",
        "append",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "join",
        "n",
        "n",
        "forcefields",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "Option",
        "lists",
        "append",
        "sys",
        "item",
        "options",
        "item",
        "item",
        "item",
        "options",
        "item",
        "item",
        "item",
        "description",
        "sys",
        "exit",
        "sys",
        "logging",
        "a",
        "a",
        "split",
        "len",
        "a",
        "a",
        "len",
        "a",
        "a",
        "a",
        "len",
        "a",
        "a",
        "isdigit",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "args",
        "options",
        "lists",
        "version",
        "args",
        "args",
        "help",
        "i",
        "i",
        "options",
        "i",
        "version",
        "args",
        "args",
        "args",
        "pop",
        "options",
        "ar",
        "setvalue",
        "args",
        "pop",
        "i",
        "options",
        "ar",
        "num",
        "options",
        "logging",
        "DEBUG",
        "logging",
        "INFO",
        "logging",
        "basicConfig",
        "format",
        "level",
        "logLevel",
        "logging",
        "info",
        "version",
        "logging",
        "info",
        "logging",
        "info",
        "__import__",
        "options",
        "value",
        "lower",
        "getattr",
        "_tmp",
        "options",
        "value",
        "lower",
        "globals",
        "options",
        "value",
        "lower",
        "logging",
        "error",
        "options",
        "sys",
        "exit",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "value",
        "options",
        "value",
        "options",
        "value",
        "options",
        "value",
        "options",
        "value",
        "options",
        "value",
        "options",
        "value",
        "split",
        "options",
        "value",
        "i",
        "lower",
        "i",
        "options",
        "value",
        "split",
        "options",
        "options",
        "options",
        "append",
        "options",
        "ElasticNetwork",
        "lists",
        "i",
        "split",
        "i",
        "lists",
        "i",
        "lists",
        "i",
        "split",
        "str2atom",
        "ln",
        "str2atom",
        "ln",
        "len",
        "ln",
        "ln",
        "ln",
        "ln",
        "len",
        "a",
        "a",
        "linkList",
        "append",
        "a",
        "a",
        "a",
        "b",
        "b",
        "b",
        "linkListCG",
        "append",
        "a",
        "b",
        "bl",
        "fc",
        "i",
        "lists",
        "i",
        "lower",
        "i",
        "replace",
        "isdigit",
        "i",
        "str2atom",
        "j",
        "j",
        "i",
        "split",
        "linkList",
        "append",
        "cysA",
        "constant",
        "cysA",
        "cysB",
        "constant",
        "cysB",
        "linkListCG",
        "append",
        "cysA",
        "constant",
        "cysA",
        "cysB",
        "constant",
        "cysB",
        "linkList",
        "linkListCG",
        "CystineCheckBonds",
        "CystineMaxDist2",
        "lists",
        "logging",
        "info",
        "options",
        "logging",
        "info",
        "options",
        "options",
        "has_key",
        "logging",
        "info",
        "options",
        "name",
        "logging",
        "error",
        "options",
        "sys",
        "exit",
        "options",
        "logging",
        "info",
        "logging",
        "info",
        "options",
        "logging",
        "info",
        "logging",
        "warning",
        "options",
        "logging",
        "warning",
        "options",
        "logging",
        "warning",
        "options",
        "math",
        "x",
        "x",
        "split",
        "x",
        "i",
        "split",
        "i",
        "x",
        "x",
        "y",
        "x",
        "y",
        "x",
        "c",
        "x",
        "replace",
        "c",
        "split",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "a",
        "b",
        "sum",
        "i",
        "j",
        "i",
        "j",
        "a",
        "b",
        "math",
        "sqrt",
        "sum",
        "i",
        "i",
        "i",
        "a",
        "sum",
        "j",
        "j",
        "j",
        "b",
        "min",
        "max",
        "p",
        "q",
        "a",
        "sum",
        "i",
        "i",
        "i",
        "a",
        "a",
        "math",
        "sqrt",
        "norm2",
        "a",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "spl",
        "dnares3",
        "rnares3",
        "spl",
        "dnares1",
        "rnares1",
        "hash",
        "AA1",
        "AA3",
        "hash",
        "AA3",
        "AA1",
        "AA3",
        "spl",
        "spl",
        "spl",
        "i",
        "i",
        "protein",
        "i",
        "i",
        "water",
        "i",
        "i",
        "lipids",
        "i",
        "i",
        "nucleic",
        "nsplit",
        "nsplit",
        "nsplit",
        "nsplit",
        "nsplit",
        "nsplit",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "nsplit",
        "bb",
        "phosphatydilethanolamine",
        "palmitoyl1",
        "oleyl2",
        "phosphatydilethanolamine",
        "oleyl1",
        "oleyl2",
        "phosphatydilethanolamine",
        "palmitoyl1",
        "palmitoyl2",
        "phosphatidylglycerol",
        "palmitoyl1",
        "oleyl2",
        "phosphatidylglycerol",
        "oleyl1",
        "oleyl2",
        "phosphatidylglycerol",
        "palmitoyl1",
        "palmitoyl2",
        "nsplit",
        "nsplit",
        "nsplit",
        "nsplit",
        "spl",
        "spl",
        "split",
        "split",
        "names",
        "update",
        "i",
        "i",
        "AA3",
        "names",
        "update",
        "i",
        "i",
        "nucleic",
        "b",
        "m",
        "x",
        "m",
        "y",
        "m",
        "z",
        "i",
        "m",
        "x",
        "y",
        "z",
        "i",
        "b",
        "sum",
        "b",
        "sum",
        "i",
        "tm",
        "i",
        "mwx",
        "ids",
        "r",
        "ca2bb",
        "CoarseGrained",
        "mapping",
        "r",
        "ca2bb",
        "i",
        "CoarseGrained",
        "mass",
        "get",
        "i",
        "i",
        "i",
        "r",
        "m",
        "coord",
        "a",
        "index",
        "atom",
        "m",
        "coord",
        "atom",
        "m",
        "coord",
        "a",
        "atom",
        "i",
        "i",
        "p",
        "aver",
        "i",
        "i",
        "q",
        "r",
        "ca2bb",
        "CoarseGrained",
        "mapping",
        "r",
        "ca2bb",
        "i",
        "CoarseGrained",
        "mass",
        "get",
        "i",
        "i",
        "i",
        "r",
        "m",
        "coord",
        "a",
        "index",
        "atom",
        "m",
        "coord",
        "atom",
        "m",
        "coord",
        "a",
        "atom",
        "i",
        "i",
        "p",
        "logging",
        "os",
        "sys",
        "subprocess",
        "subp",
        "ss_names",
        "keys",
        "spl",
        "pat",
        "pat",
        "hash",
        "bbss",
        "ssnum",
        "ssdefs",
        "keys",
        "i",
        "hash",
        "ssdefs",
        "i",
        "cgss",
        "i",
        "programs",
        "program",
        "join",
        "ssd",
        "program",
        "get",
        "chr",
        "i",
        "i",
        "i",
        "tt",
        "i",
        "i",
        "programs",
        "i",
        "ord",
        "i",
        "i",
        "ord",
        "i",
        "i",
        "cgss",
        "seq",
        "patterns",
        "types",
        "seq",
        "i",
        "j",
        "patterns",
        "types",
        "seq",
        "replace",
        "i",
        "j",
        "seq",
        "ss",
        "program",
        "ss",
        "translate",
        "sstt",
        "program",
        "i",
        "ss",
        "translate",
        "sstd",
        "i",
        "i",
        "sstd",
        "keys",
        "typesub",
        "sep",
        "i",
        "patterns",
        "get",
        "i",
        "pattypes",
        "get",
        "i",
        "i",
        "sstd",
        "keys",
        "ord",
        "j",
        "j",
        "i",
        "i",
        "typ",
        "join",
        "chr",
        "sum",
        "i",
        "i",
        "typ",
        "ss",
        "typ",
        "chain",
        "atomlist",
        "executable",
        "chain",
        "id",
        "os",
        "system",
        "executable",
        "logging",
        "debug",
        "executable",
        "ssdfile",
        "subp",
        "Popen",
        "executable",
        "ssdfile",
        "stderr",
        "subp",
        "PIPE",
        "stdout",
        "subp",
        "PIPE",
        "stdin",
        "subp",
        "PIPE",
        "logging",
        "debug",
        "executable",
        "ssdfile",
        "subp",
        "Popen",
        "executable",
        "ssdfile",
        "stderr",
        "subp",
        "PIPE",
        "stdout",
        "subp",
        "PIPE",
        "stdin",
        "subp",
        "PIPE",
        "OSError",
        "logging",
        "error",
        "executable",
        "sys",
        "exit",
        "atom",
        "atomlist",
        "atom",
        "atom",
        "atom",
        "atom",
        "p",
        "stdin",
        "write",
        "pdbOut",
        "atom",
        "p",
        "stdin",
        "write",
        "p",
        "communicate",
        "p",
        "wait",
        "line",
        "open",
        "ssdfile",
        "readlines",
        "main",
        "line",
        "ss",
        "line",
        "line",
        "ss",
        "call_dssp",
        "math",
        "distance",
        "shift",
        "rate",
        "power",
        "math",
        "exp",
        "rate",
        "math",
        "pow",
        "distance",
        "shift",
        "power",
        "atomList",
        "lowerBound",
        "upperBound",
        "decayFactor",
        "decayPower",
        "forceConstant",
        "minimumForce",
        "upperBound",
        "len",
        "atomList",
        "atomList",
        "pop",
        "bj",
        "xj",
        "atomList",
        "distance2",
        "xi",
        "xj",
        "d2",
        "u2",
        "math",
        "sqrt",
        "d2",
        "decayFunction",
        "dij",
        "lowerBound",
        "decayFactor",
        "decayPower",
        "fscl",
        "forceConstant",
        "minimumForce",
        "append",
        "bi",
        "bj",
        "dij",
        "fscl",
        "logging",
        "math",
        "random",
        "sys",
        "box",
        "box",
        "box",
        "box",
        "math",
        "sqrt",
        "norm2",
        "i",
        "i",
        "u",
        "v",
        "w",
        "nv",
        "nw",
        "math",
        "acos",
        "cos_angle",
        "v",
        "w",
        "d2r",
        "nu",
        "nw",
        "math",
        "acos",
        "cos_angle",
        "u",
        "w",
        "d2r",
        "nu",
        "nv",
        "math",
        "acos",
        "cos_angle",
        "u",
        "v",
        "d2r",
        "pdbBoxLine",
        "norm",
        "u",
        "norm",
        "v",
        "norm",
        "w",
        "alpha",
        "beta",
        "gamma",
        "a",
        "a",
        "startswith",
        "a",
        "strip",
        "a",
        "strip",
        "a",
        "ord",
        "a",
        "a",
        "a",
        "a",
        "a",
        "atom",
        "i",
        "atom",
        "atom",
        "insc",
        "pdbline",
        "i",
        "atom",
        "atom",
        "atom",
        "resi",
        "chr",
        "insc",
        "atom",
        "atom",
        "a",
        "a",
        "startswith",
        "options",
        "a",
        "startswith",
        "a",
        "startswith",
        "a",
        "i",
        "i",
        "a",
        "split",
        "math",
        "cos",
        "d2r",
        "aa",
        "math",
        "cos",
        "d2r",
        "ab",
        "math",
        "cos",
        "d2r",
        "ac",
        "math",
        "sin",
        "d2r",
        "ac",
        "fc",
        "cb",
        "fc",
        "ca",
        "cb",
        "cg",
        "sg",
        "math",
        "sqrt",
        "fc",
        "fc",
        "wx",
        "wx",
        "wy",
        "wy",
        "fa",
        "fb",
        "cg",
        "fb",
        "sg",
        "wx",
        "wy",
        "wz",
        "pdbAtomList",
        "atom",
        "pdbAtomList",
        "atom",
        "chain",
        "chain",
        "logging",
        "info",
        "chain",
        "chain",
        "atom",
        "chain",
        "append",
        "atom",
        "chain",
        "atom",
        "chain",
        "chain",
        "streamIterator",
        "i",
        "streamIterator",
        "i",
        "startswith",
        "join",
        "title",
        "atoms",
        "box",
        "i",
        "startswith",
        "title",
        "append",
        "i",
        "i",
        "startswith",
        "pdbBoxRead",
        "i",
        "i",
        "startswith",
        "i",
        "startswith",
        "atoms",
        "append",
        "pdbAtom",
        "i",
        "atoms",
        "join",
        "title",
        "atoms",
        "box",
        "a",
        "i",
        "i",
        "a",
        "split",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "a",
        "a",
        "strip",
        "a",
        "strip",
        "a",
        "constant",
        "a",
        "a",
        "a",
        "streamIterator",
        "streamIterator",
        "next",
        "StopIteration",
        "streamIterator",
        "next",
        "strip",
        "natoms",
        "natoms",
        "groAtom",
        "streamIterator",
        "next",
        "i",
        "natoms",
        "groBoxRead",
        "streamIterator",
        "next",
        "title",
        "atoms",
        "box",
        "resname",
        "resid",
        "choices",
        "resname",
        "resid",
        "i",
        "choice",
        "choices",
        "iteritems",
        "i",
        "choice",
        "choice",
        "choices",
        "keys",
        "input",
        "choices",
        "choice",
        "stream",
        "stream",
        "stream",
        "endswith",
        "logging",
        "info",
        "gzip",
        "open",
        "stream",
        "logging",
        "info",
        "open",
        "stream",
        "logging",
        "info",
        "stream",
        "s",
        "readline",
        "s",
        "readline",
        "x",
        "strip",
        "isdigit",
        "logging",
        "info",
        "logging",
        "info",
        "i",
        "x",
        "i",
        "i",
        "s",
        "i",
        "tag",
        "tag",
        "__getitem__",
        "tag",
        "tag",
        "i",
        "i",
        "tag",
        "i",
        "tag",
        "i",
        "i",
        "tag",
        "i",
        "i",
        "i",
        "i",
        "tag",
        "atomList",
        "atomList",
        "atom",
        "atomList",
        "atom",
        "residue",
        "atom",
        "residue",
        "atom",
        "residue",
        "residue",
        "append",
        "atom",
        "Residue",
        "residue",
        "atom",
        "Residue",
        "residue",
        "r1",
        "r2",
        "min",
        "distance2",
        "i",
        "j",
        "i",
        "r1",
        "j",
        "r2",
        "residuelist",
        "selection",
        "cutoff",
        "atom",
        "atom",
        "residue",
        "atom",
        "selection",
        "residue",
        "residuelist",
        "res",
        "res",
        "bb",
        "res",
        "i",
        "i",
        "len",
        "bb",
        "residueDistance2",
        "bb",
        "i",
        "bb",
        "i",
        "cutoff",
        "atoms",
        "cutoff",
        "len",
        "atoms",
        "atom",
        "atom",
        "atoms",
        "i",
        "j",
        "i",
        "rla",
        "j",
        "rla",
        "i",
        "distance2",
        "crd",
        "i",
        "crd",
        "j",
        "cutoff",
        "beads",
        "dist",
        "n",
        "random",
        "random",
        "random",
        "random",
        "random",
        "random",
        "norm",
        "v",
        "dist",
        "i",
        "norm_v",
        "i",
        "v",
        "j",
        "n",
        "newName",
        "i",
        "m",
        "j",
        "i",
        "j",
        "beads",
        "vn",
        "beads",
        "beads",
        "append",
        "newBead",
        "m",
        "beads",
        "chains",
        "m_list",
        "l_list",
        "ss_cutoff",
        "len",
        "chains",
        "m_list",
        "logging",
        "info",
        "chainIndex",
        "chainIndex",
        "chain",
        "id",
        "chain",
        "chains",
        "m_list",
        "chainIndex",
        "reverse",
        "chainID",
        "reverse",
        "chainID",
        "chainIndex",
        "chainIndex",
        "reverse",
        "i",
        "isdigit",
        "i",
        "dct",
        "i",
        "i",
        "j",
        "j",
        "m_list",
        "i",
        "merges",
        "i",
        "sort",
        "i",
        "j",
        "i",
        "k",
        "i",
        "merges",
        "j",
        "len",
        "i",
        "k",
        "j",
        "len",
        "i",
        "i",
        "chainIndex",
        "j",
        "chainIndex",
        "i",
        "i",
        "j",
        "pairs",
        "a",
        "b",
        "l_list",
        "a",
        "chains",
        "i",
        "b",
        "chains",
        "j",
        "a",
        "chains",
        "j",
        "b",
        "chains",
        "i",
        "logging",
        "info",
        "i",
        "j",
        "a",
        "b",
        "pairs",
        "append",
        "i",
        "j",
        "i",
        "j",
        "j",
        "i",
        "i",
        "j",
        "pairs",
        "ss_cutoff",
        "cysA",
        "chains",
        "i",
        "cysB",
        "chains",
        "j",
        "distance2",
        "cysA",
        "cysB",
        "d2",
        "ss_cutoff",
        "logging",
        "info",
        "i",
        "j",
        "math",
        "sqrt",
        "d2",
        "pairs",
        "append",
        "i",
        "j",
        "i",
        "j",
        "pairs",
        "pairs",
        "sort",
        "reverse",
        "pairs",
        "merges",
        "append",
        "pairs",
        "i",
        "len",
        "pairs",
        "pairs",
        "i",
        "merges",
        "merges",
        "add",
        "pairs",
        "pop",
        "i",
        "pairs",
        "i",
        "merges",
        "merges",
        "add",
        "pairs",
        "pop",
        "i",
        "i",
        "i",
        "merges",
        "i",
        "merges",
        "i",
        "sort",
        "j",
        "i",
        "merges",
        "j",
        "i",
        "merges",
        "logging",
        "warning",
        "logging",
        "warning",
        "logging",
        "info",
        "join",
        "j",
        "j",
        "i",
        "i",
        "merges",
        "len",
        "merges",
        "len",
        "merges",
        "merges",
        "chainIndex",
        "logging",
        "info",
        "merges",
        "extend",
        "j",
        "j",
        "chainIndex",
        "j",
        "order",
        "order",
        "extend",
        "j",
        "j",
        "chainIndex",
        "j",
        "order",
        "order",
        "merges",
        "options",
        "residuelist",
        "name",
        "multiscale",
        "residuelist",
        "atom",
        "residue",
        "residuelist",
        "atom",
        "residue",
        "residue",
        "residue",
        "residuelist",
        "join",
        "AA321",
        "get",
        "i",
        "i",
        "sequence",
        "multiscale",
        "options",
        "seq",
        "len",
        "_atoms",
        "breaks",
        "residues",
        "name",
        "residuelist",
        "residuelist",
        "len",
        "join",
        "i",
        "i",
        "seq",
        "i",
        "isupper",
        "other",
        "Chain",
        "name",
        "id",
        "other",
        "id",
        "attr",
        "_attributes",
        "setattr",
        "newchain",
        "attr",
        "getattr",
        "attr",
        "getattr",
        "other",
        "attr",
        "len",
        "breaks",
        "shift",
        "i",
        "shift",
        "i",
        "other",
        "breaks",
        "links",
        "i",
        "shift",
        "i",
        "j",
        "shift",
        "j",
        "i",
        "j",
        "other",
        "links",
        "len",
        "newchain",
        "atoms",
        "multiscale",
        "other",
        "multiscale",
        "newchain",
        "other",
        "seq",
        "other",
        "seq",
        "ss",
        "other",
        "ss",
        "breaks",
        "other",
        "breaks",
        "links",
        "other",
        "links",
        "multiscale",
        "other",
        "multiscale",
        "other",
        "other",
        "other",
        "sequence",
        "i",
        "i",
        "residues",
        "i",
        "other",
        "other",
        "i",
        "cg",
        "other",
        "i",
        "i",
        "i",
        "atoms",
        "other",
        "i",
        "i",
        "sequence",
        "other",
        "i",
        "j",
        "Chain",
        "options",
        "name",
        "id",
        "attr",
        "_attributes",
        "setattr",
        "newchain",
        "attr",
        "getattr",
        "attr",
        "i",
        "j",
        "newchain",
        "residues",
        "newchain",
        "residues",
        "crack",
        "crack",
        "breaks",
        "ch_sta",
        "crack",
        "ch_end",
        "link",
        "link",
        "links",
        "ch_sta",
        "link",
        "ch_end",
        "multiscale",
        "len",
        "newchain",
        "atoms",
        "newchain",
        "newchain",
        "atomlist",
        "atom",
        "atom",
        "chn",
        "id",
        "atnm",
        "resn",
        "resi",
        "atnm",
        "resn",
        "resi",
        "atoms",
        "resi",
        "atomlist",
        "j",
        "j",
        "atomlist",
        "j",
        "resi",
        "match",
        "resn",
        "match",
        "j",
        "j",
        "match",
        "j",
        "resn",
        "match",
        "atnm",
        "j",
        "j",
        "match",
        "j",
        "atnm",
        "other",
        "_contains",
        "atoms",
        "other",
        "_contains",
        "cg",
        "other",
        "id",
        "_atoms",
        "atom",
        "residue",
        "residues",
        "atom",
        "residue",
        "_atoms",
        "i",
        "len",
        "sequence",
        "residueTypes",
        "get",
        "sequence",
        "i",
        "residueTypes",
        "get",
        "sequence",
        "i",
        "chains",
        "append",
        "chainStart",
        "i",
        "i",
        "chains",
        "logging",
        "debug",
        "id",
        "len",
        "chains",
        "chains",
        "chainStart",
        "basename",
        "basename",
        "name",
        "append",
        "basename",
        "basename",
        "name",
        "append",
        "id",
        "name",
        "append",
        "chr",
        "id",
        "id",
        "strip",
        "name",
        "append",
        "id",
        "join",
        "name",
        "ss",
        "source",
        "len",
        "ss",
        "len",
        "ss",
        "ss",
        "ssclass",
        "sstypes",
        "ssClassification",
        "ss",
        "source",
        "method",
        "executable",
        "method",
        "atom",
        "residue",
        "residues",
        "atom",
        "residue",
        "set_ss",
        "ssDetermination",
        "method",
        "atomlist",
        "executable",
        "source",
        "method",
        "set_ss",
        "len",
        "set_ss",
        "len",
        "sequence",
        "ss",
        "other",
        "other",
        "other",
        "_type",
        "len",
        "residueTypes",
        "get",
        "i",
        "i",
        "sequence",
        "len",
        "_type",
        "_type",
        "_type",
        "force",
        "com",
        "_cg",
        "force",
        "_cg",
        "residue",
        "rss",
        "resname",
        "residues",
        "sstypes",
        "sequence",
        "com",
        "ind",
        "i",
        "residue",
        "i",
        "previous",
        "previous",
        "i",
        "ind",
        "i",
        "store",
        "residue",
        "store",
        "atom",
        "resname",
        "atom",
        "atom",
        "residue",
        "residue",
        "residue",
        "CoarseGrained",
        "mapping",
        "keys",
        "logging",
        "warning",
        "residue",
        "residue",
        "ca2bb",
        "options",
        "ca2bb",
        "CoarseGrained",
        "names",
        "residue",
        "beads",
        "ids",
        "residue",
        "options",
        "polar",
        "add_dummy",
        "beads",
        "dist",
        "n",
        "residue",
        "options",
        "charged",
        "add_dummy",
        "beads",
        "dist",
        "n",
        "ValueError",
        "logging",
        "error",
        "residue",
        "residue",
        "residue",
        "logging",
        "error",
        "repr",
        "i",
        "i",
        "residue",
        "name",
        "x",
        "y",
        "z",
        "ids",
        "beads",
        "_cg",
        "append",
        "name",
        "residue",
        "residue",
        "residue",
        "x",
        "y",
        "z",
        "ss2num",
        "rss",
        "mapping",
        "append",
        "atid",
        "i",
        "i",
        "ids",
        "atid",
        "len",
        "residue",
        "bb",
        "append",
        "bb",
        "len",
        "beads",
        "fail",
        "logging",
        "error",
        "sys",
        "exit",
        "_cg",
        "cg",
        "i",
        "i",
        "j",
        "len",
        "cg",
        "cg",
        "j",
        "bb",
        "bb",
        "len",
        "bb",
        "i",
        "j",
        "i",
        "j",
        "bb",
        "distance2",
        "cg",
        "i",
        "cg",
        "j",
        "i",
        "j",
        "bb",
        "j",
        "i",
        "logging",
        "math",
        "other",
        "options",
        "kwargs",
        "options",
        "options",
        "options",
        "other",
        "other",
        "__class__",
        "__class__",
        "attr",
        "dir",
        "other",
        "attr",
        "setattr",
        "attr",
        "getattr",
        "other",
        "attr",
        "other",
        "attr",
        "other",
        "keys",
        "setattr",
        "attr",
        "other",
        "attr",
        "other",
        "other",
        "key",
        "kwargs",
        "setattr",
        "key",
        "kwargs",
        "key",
        "atoms",
        "atoms",
        "atoms",
        "kwargs",
        "atoms",
        "atoms",
        "parameters",
        "i",
        "i",
        "atoms",
        "s",
        "append",
        "s",
        "extend",
        "formatString",
        "i",
        "i",
        "parameters",
        "i",
        "comments",
        "s",
        "append",
        "comments",
        "s",
        "append",
        "comments",
        "s",
        "extend",
        "i",
        "i",
        "comments",
        "join",
        "s",
        "num",
        "i",
        "num",
        "i",
        "atoms",
        "num",
        "__class__",
        "num",
        "other",
        "other",
        "atoms",
        "other",
        "atoms",
        "other",
        "atoms",
        "other",
        "parameters",
        "other",
        "parameters",
        "atoms",
        "kwargs",
        "Bonded",
        "atoms",
        "kwargs",
        "atoms",
        "ids",
        "ca",
        "r",
        "ss",
        "r",
        "ss",
        "kwargs",
        "get",
        "options",
        "bbGetBond",
        "r",
        "ca",
        "ss",
        "parameters",
        "len",
        "parameters",
        "parameters",
        "Bonded",
        "__str__",
        "Bonded",
        "atoms",
        "kwargs",
        "atoms",
        "ids",
        "ca",
        "r",
        "ss",
        "r",
        "ss",
        "r",
        "ss",
        "kwargs",
        "get",
        "options",
        "bbGetAngle",
        "r",
        "ca",
        "ss",
        "Bonded",
        "atoms",
        "kwargs",
        "atoms",
        "ids",
        "ca",
        "r",
        "kwargs",
        "get",
        "kwargs",
        "get",
        "Bonded",
        "atoms",
        "kwargs",
        "atoms",
        "ids",
        "ca",
        "r",
        "kwargs",
        "get",
        "kwargs",
        "get",
        "Bonded",
        "atoms",
        "kwargs",
        "atoms",
        "ids",
        "ca",
        "r",
        "ss",
        "r",
        "ss",
        "r",
        "ss",
        "r",
        "ss",
        "kwargs",
        "get",
        "join",
        "i",
        "i",
        "ss",
        "options",
        "bbDihedDictD",
        "join",
        "i",
        "i",
        "ss",
        "options",
        "options",
        "bbDihedDictD",
        "ss",
        "issubset",
        "options",
        "bbDihedDictD",
        "tag",
        "tag",
        "__getitem__",
        "tag",
        "tag",
        "i",
        "i",
        "i",
        "category",
        "tag",
        "tag",
        "i",
        "i",
        "tag",
        "i",
        "category",
        "i",
        "i",
        "i",
        "category",
        "tag",
        "other",
        "options",
        "name",
        "CategorizedList",
        "CategorizedList",
        "CategorizedList",
        "CategorizedList",
        "CategorizedList",
        "CategorizedList",
        "CategorizedList",
        "CategorizedList",
        "CategorizedList",
        "options",
        "options",
        "options",
        "other",
        "isinstance",
        "other",
        "Topology",
        "attrib",
        "setattr",
        "attrib",
        "getattr",
        "other",
        "attrib",
        "isinstance",
        "other",
        "Chain",
        "other",
        "fromAminoAcidSequence",
        "other",
        "other",
        "fromNucleicAcidSequence",
        "other",
        "other",
        "logging",
        "warning",
        "fromMoleculeList",
        "other",
        "name",
        "name",
        "other",
        "isinstance",
        "other",
        "Topology",
        "Topology",
        "other",
        "len",
        "atoms",
        "atoms",
        "atom",
        "other",
        "atoms",
        "atom",
        "atom",
        "shift",
        "atom",
        "last",
        "atom",
        "last",
        "atoms",
        "append",
        "atom",
        "attrib",
        "getattr",
        "attrib",
        "extend",
        "source",
        "shift",
        "source",
        "getattr",
        "other",
        "attrib",
        "other",
        "Topology",
        "isinstance",
        "other",
        "Topology",
        "Topology",
        "other",
        "other",
        "multiscale",
        "options",
        "name",
        "name",
        "options",
        "name",
        "name",
        "options",
        "join",
        "options",
        "sequence",
        "join",
        "AA321",
        "get",
        "AA",
        "AA",
        "sequence",
        "secstruc",
        "multiscale",
        "name",
        "nrexcl",
        "append",
        "extend",
        "len",
        "i",
        "fs9",
        "i",
        "fs8",
        "i",
        "i",
        "atoms",
        "i",
        "i",
        "vsites",
        "vsites",
        "append",
        "extend",
        "vsites",
        "i",
        "i",
        "exclusions",
        "exclusions",
        "append",
        "extend",
        "exclusions",
        "multiscale",
        "i",
        "j",
        "mapping",
        "append",
        "i",
        "join",
        "k",
        "k",
        "j",
        "logging",
        "info",
        "join",
        "append",
        "i",
        "i",
        "bonds",
        "bonds",
        "append",
        "extend",
        "bonds",
        "i",
        "i",
        "bonds",
        "bonds",
        "append",
        "append",
        "options",
        "extend",
        "bonds",
        "append",
        "i",
        "i",
        "bonds",
        "bonds",
        "append",
        "extend",
        "bonds",
        "i",
        "i",
        "bonds",
        "bonds",
        "append",
        "extend",
        "bonds",
        "i",
        "i",
        "bonds",
        "bonds",
        "append",
        "extend",
        "bonds",
        "i",
        "i",
        "bonds",
        "bonds",
        "append",
        "extend",
        "bonds",
        "i",
        "i",
        "bonds",
        "bonds",
        "append",
        "extend",
        "bonds",
        "append",
        "extend",
        "i",
        "i",
        "bonds",
        "append",
        "append",
        "extend",
        "i",
        "i",
        "angles",
        "append",
        "extend",
        "i",
        "i",
        "angles",
        "append",
        "extend",
        "i",
        "i",
        "angles",
        "append",
        "append",
        "extend",
        "i",
        "i",
        "dihedrals",
        "i",
        "parameters",
        "append",
        "extend",
        "i",
        "i",
        "dihedrals",
        "i",
        "parameters",
        "posres",
        "append",
        "append",
        "options",
        "append",
        "extend",
        "i",
        "i",
        "posres",
        "append",
        "logging",
        "info",
        "join",
        "sequence",
        "secstruc",
        "links",
        "breaks",
        "mapping",
        "rubber",
        "multi",
        "isinstance",
        "sequence",
        "Chain",
        "sequence",
        "chain",
        "links",
        "chain",
        "breaks",
        "mapping",
        "chain",
        "mapping",
        "options",
        "chain",
        "multiscale",
        "chain",
        "sstypes",
        "len",
        "chain",
        "chain",
        "sequence",
        "multiscale",
        "chain",
        "multiscale",
        "multi",
        "multiscale",
        "natoms",
        "natoms",
        "len",
        "chain",
        "atoms",
        "secstruc",
        "len",
        "sequence",
        "secstruc",
        "logging",
        "debug",
        "secstruc",
        "logging",
        "debug",
        "sequence",
        "options",
        "sidechains",
        "res",
        "res",
        "sequence",
        "natoms",
        "atoms",
        "atoms",
        "startAtom",
        "i",
        "sc",
        "bbid",
        "append",
        "bbid",
        "len",
        "i",
        "residue",
        "chain",
        "residues",
        "atom",
        "residue",
        "atom",
        "positionCa",
        "append",
        "atom",
        "startResi",
        "startResi",
        "len",
        "sequence",
        "bbid",
        "sequence",
        "secstruc",
        "positionCa",
        "options",
        "bbGetBead",
        "res",
        "typ",
        "num",
        "res",
        "typ",
        "Ca",
        "seqss",
        "options",
        "options",
        "i",
        "breaks",
        "i",
        "i",
        "j",
        "breaks",
        "breaks",
        "j",
        "seqss",
        "i",
        "seqss",
        "i",
        "j",
        "bonds",
        "extend",
        "Bond",
        "pair",
        "category",
        "options",
        "options",
        "pair",
        "frg",
        "frg",
        "angles",
        "extend",
        "Angle",
        "triple",
        "options",
        "options",
        "category",
        "triple",
        "frg",
        "frg",
        "frg",
        "frg",
        "frg",
        "frg",
        "frg",
        "options",
        "UseBBBBDihedrals",
        "q",
        "quadruples",
        "q",
        "ss",
        "options",
        "id",
        "id",
        "bonds",
        "bonds",
        "append",
        "Bond",
        "options",
        "options",
        "atoms",
        "id",
        "id",
        "parameters",
        "options",
        "ebonds",
        "comments",
        "rn",
        "id",
        "rn",
        "id",
        "category",
        "bonds",
        "append",
        "Bond",
        "options",
        "options",
        "atoms",
        "id",
        "id",
        "parameters",
        "options",
        "ebonds",
        "comments",
        "rn",
        "id",
        "rn",
        "id",
        "category",
        "bonds",
        "append",
        "Bond",
        "options",
        "options",
        "atoms",
        "id",
        "id",
        "parameters",
        "options",
        "ebonds",
        "comments",
        "rn",
        "id",
        "rn",
        "id",
        "category",
        "Dihedral",
        "q",
        "options",
        "options",
        "category",
        "dihed",
        "dihedrals",
        "append",
        "dihed",
        "options",
        "UseBBSAngles",
        "len",
        "frg",
        "frg",
        "frg",
        "angles",
        "append",
        "Angle",
        "options",
        "options",
        "atoms",
        "frg",
        "frg",
        "frg",
        "parameters",
        "options",
        "bbsangle",
        "comments",
        "frg",
        "frg",
        "frg",
        "frg",
        "category",
        "ai",
        "ni",
        "si",
        "ci",
        "aj",
        "nj",
        "sj",
        "cj",
        "s",
        "frg",
        "frg",
        "sc",
        "s",
        "angles",
        "append",
        "Angle",
        "options",
        "options",
        "atoms",
        "ai",
        "aj",
        "aj",
        "parameters",
        "options",
        "bbsangle",
        "comments",
        "ni",
        "si",
        "nj",
        "sj",
        "category",
        "startAtom",
        "resi",
        "resname",
        "bbb",
        "sidechn",
        "ss",
        "resid",
        "sequence",
        "bb",
        "sc",
        "secstruc",
        "sidechn",
        "options",
        "connectivity",
        "resname",
        "atids",
        "par",
        "bon_con",
        "bon_par",
        "par",
        "bonds",
        "append",
        "Bond",
        "options",
        "options",
        "atoms",
        "atids",
        "parameters",
        "par",
        "comments",
        "resname",
        "category",
        "bonds",
        "append",
        "Bond",
        "options",
        "options",
        "atoms",
        "atids",
        "parameters",
        "par",
        "comments",
        "resname",
        "category",
        "bonds",
        "atid",
        "atids",
        "par",
        "ang_con",
        "ang_par",
        "angles",
        "append",
        "Angle",
        "options",
        "options",
        "atoms",
        "atids",
        "parameters",
        "par",
        "comments",
        "resname",
        "category",
        "angles",
        "atid",
        "atids",
        "par",
        "dih_con",
        "dih_par",
        "dihedrals",
        "append",
        "Dihedral",
        "options",
        "options",
        "atoms",
        "atids",
        "parameters",
        "par",
        "comments",
        "resname",
        "category",
        "dihedrals",
        "atid",
        "atids",
        "par",
        "vsite_con",
        "vsite_par",
        "vsites",
        "append",
        "Vsite",
        "options",
        "options",
        "atoms",
        "atids",
        "parameters",
        "par",
        "comments",
        "resname",
        "category",
        "vsites",
        "atid",
        "bbb",
        "options",
        "charges",
        "keys",
        "resname",
        "options",
        "mass_charge",
        "keys",
        "i",
        "i",
        "i",
        "d",
        "scatoms",
        "d",
        "exclusions",
        "append",
        "Exclusion",
        "options",
        "options",
        "atoms",
        "atid",
        "i",
        "atid",
        "comments",
        "resname",
        "resi",
        "parameters",
        "atype",
        "aname",
        "bbb",
        "scatoms",
        "CoarseGrained",
        "residue_bead_names",
        "multiscale",
        "atype",
        "aname",
        "resname",
        "options",
        "mass_charge",
        "keys",
        "counter",
        "options",
        "mass_charge",
        "resname",
        "Q",
        "counter",
        "Q",
        "counter",
        "aname",
        "atoms",
        "append",
        "atid",
        "atype",
        "resi",
        "resname",
        "aname",
        "atid",
        "Q",
        "counter",
        "M",
        "counter",
        "ss",
        "atoms",
        "append",
        "atid",
        "atype",
        "resi",
        "resname",
        "aname",
        "atid",
        "options",
        "charges",
        "get",
        "atype",
        "ss",
        "options",
        "posres",
        "append",
        "atid",
        "aname",
        "options",
        "posres",
        "append",
        "atid",
        "mapping",
        "mapping",
        "append",
        "atid",
        "i",
        "shift",
        "i",
        "mapping",
        "counter",
        "atid",
        "counter",
        "rubber",
        "chain",
        "rubberBands",
        "i",
        "j",
        "i",
        "j",
        "atoms",
        "chain",
        "cg",
        "i",
        "ElasticBeads",
        "ElasticLowerBound",
        "ElasticUpperBound",
        "ElasticDecayFactor",
        "ElasticDecayPower",
        "ElasticMaximumForce",
        "ElasticMinimumForce",
        "bonds",
        "extend",
        "Bond",
        "i",
        "options",
        "options",
        "category",
        "i",
        "rubberList",
        "chain",
        "multiscale",
        "natoms",
        "len",
        "chain",
        "atoms",
        "sequence",
        "secstruc",
        "links",
        "breaks",
        "mapping",
        "rubber",
        "multi",
        "isinstance",
        "sequence",
        "Chain",
        "sequence",
        "chain",
        "links",
        "chain",
        "breaks",
        "mapping",
        "chain",
        "mapping",
        "options",
        "chain",
        "multiscale",
        "chain",
        "sstypes",
        "len",
        "chain",
        "chain",
        "sequence",
        "multiscale",
        "chain",
        "multiscale",
        "multi",
        "multiscale",
        "natoms",
        "natoms",
        "len",
        "chain",
        "atoms",
        "secstruc",
        "len",
        "sequence",
        "secstruc",
        "logging",
        "debug",
        "secstruc",
        "logging",
        "debug",
        "sequence",
        "options",
        "bases",
        "res",
        "res",
        "sequence",
        "natoms",
        "atoms",
        "atoms",
        "startAtom",
        "startAtom",
        "startAtom",
        "i",
        "sc",
        "bbid",
        "len",
        "i",
        "bbid",
        "append",
        "bbid1",
        "bbid1",
        "bbid1",
        "startResi",
        "startResi",
        "len",
        "sequence",
        "bbid",
        "sequence",
        "secstruc",
        "options",
        "bbGetBead",
        "res",
        "typ",
        "num",
        "res",
        "typ",
        "seqss",
        "i",
        "j",
        "bb",
        "i",
        "j",
        "i",
        "j",
        "breaks",
        "breaks",
        "j",
        "seqss",
        "i",
        "seqss",
        "i",
        "j",
        "j",
        "i",
        "j",
        "j",
        "i",
        "j",
        "frg",
        "i",
        "len",
        "j",
        "bonds",
        "extend",
        "Bond",
        "pair",
        "category",
        "options",
        "options",
        "pair",
        "frg",
        "frg",
        "angles",
        "extend",
        "Angle",
        "triple",
        "options",
        "options",
        "category",
        "triple",
        "frg",
        "frg",
        "frg",
        "frg",
        "frg",
        "frg",
        "frg",
        "q",
        "quadruples",
        "q",
        "Dihedral",
        "q",
        "options",
        "options",
        "category",
        "dihed",
        "dihedrals",
        "append",
        "dihed",
        "startAtom",
        "i",
        "i",
        "resid",
        "j",
        "i",
        "i",
        "sequence",
        "j",
        "i",
        "i",
        "sc",
        "j",
        "i",
        "i",
        "secstruc",
        "j",
        "resi",
        "resname",
        "bbb",
        "sidechn",
        "ss",
        "resid3",
        "sequence3",
        "bb3",
        "sc3",
        "secstruc3",
        "count",
        "sidechn",
        "options",
        "connectivity",
        "resname",
        "atids",
        "par",
        "bon_con",
        "bon_par",
        "par",
        "bonds",
        "append",
        "Bond",
        "options",
        "options",
        "atoms",
        "atids",
        "parameters",
        "par",
        "comments",
        "resname",
        "category",
        "bonds",
        "append",
        "Bond",
        "options",
        "options",
        "atoms",
        "atids",
        "parameters",
        "par",
        "comments",
        "resname",
        "category",
        "bonds",
        "atid",
        "atids",
        "par",
        "ang_con",
        "ang_par",
        "angles",
        "append",
        "Angle",
        "options",
        "options",
        "atoms",
        "atids",
        "parameters",
        "par",
        "comments",
        "resname",
        "category",
        "angles",
        "atid",
        "atids",
        "par",
        "dih_con",
        "dih_par",
        "dihedrals",
        "append",
        "Dihedral",
        "options",
        "options",
        "atoms",
        "atids",
        "parameters",
        "par",
        "comments",
        "resname",
        "category",
        "dihedrals",
        "atid",
        "atids",
        "par",
        "imp_con",
        "imp_par",
        "dihedrals",
        "append",
        "Dihedral",
        "options",
        "options",
        "atoms",
        "atids",
        "parameters",
        "par",
        "comments",
        "resname",
        "category",
        "dihedrals",
        "atid",
        "atids",
        "par",
        "vsite_con",
        "vsite_par",
        "vsites",
        "append",
        "Vsite",
        "options",
        "options",
        "atoms",
        "atids",
        "parameters",
        "par",
        "comments",
        "resname",
        "category",
        "vsites",
        "atid",
        "i",
        "len",
        "scatoms",
        "j",
        "i",
        "len",
        "scatoms",
        "exclusions",
        "append",
        "Exclusion",
        "options",
        "options",
        "atoms",
        "i",
        "atid",
        "j",
        "atid",
        "comments",
        "resname",
        "resi",
        "parameters",
        "bb3",
        "count",
        "bb3",
        "count",
        "bb3",
        "count",
        "atype",
        "aname",
        "bbbset",
        "scatoms",
        "CoarseGrained",
        "residue_bead_names_dna",
        "multiscale",
        "atype",
        "aname",
        "atoms",
        "append",
        "atid",
        "atype",
        "resi",
        "resname",
        "aname",
        "atid",
        "options",
        "charges",
        "get",
        "atype",
        "ss",
        "options",
        "posres",
        "append",
        "atid",
        "aname",
        "options",
        "posres",
        "append",
        "atid",
        "mapping",
        "mapping",
        "append",
        "atid",
        "i",
        "shift",
        "i",
        "mapping",
        "counter",
        "atid",
        "counter",
        "count",
        "i",
        "len",
        "dihedrals",
        "max",
        "dihedrals",
        "i",
        "atoms",
        "atoms",
        "dihedrals",
        "i",
        "i",
        "len",
        "angles",
        "max",
        "angles",
        "i",
        "atoms",
        "atoms",
        "angles",
        "i",
        "other",
        "sys",
        "logging",
        "random",
        "math",
        "os",
        "re",
        "options",
        "streamTag",
        "options",
        "options",
        "value",
        "sys",
        "stdin",
        "inStream",
        "next",
        "fileType",
        "groFrameIterator",
        "pdbFrameIterator",
        "title",
        "atoms",
        "box",
        "frameIterator",
        "inStream",
        "fileType",
        "Chain",
        "options",
        "i",
        "i",
        "residues",
        "chain",
        "chain",
        "pdbChains",
        "atoms",
        "residue",
        "residue",
        "residues",
        "atoms",
        "breaks",
        "residuelist",
        "broken",
        "broken",
        "len",
        "residuelist",
        "len",
        "broken",
        "Chain",
        "options",
        "residuelist",
        "i",
        "j",
        "name",
        "chr",
        "k",
        "i",
        "j",
        "k",
        "chains",
        "chain",
        "chains",
        "options",
        "chain",
        "id",
        "options",
        "model",
        "len",
        "chains",
        "len",
        "i",
        "id",
        "i",
        "chains",
        "logging",
        "warning",
        "options",
        "chain",
        "chains",
        "demixedChains",
        "extend",
        "chain",
        "split",
        "demixedChains",
        "logging",
        "info",
        "len",
        "chains",
        "chain",
        "chains",
        "logging",
        "info",
        "n",
        "chain",
        "id",
        "chain",
        "_type",
        "chain",
        "natoms",
        "len",
        "chain",
        "n",
        "chain",
        "chains",
        "chain",
        "logging",
        "info",
        "len",
        "chain",
        "chain",
        "id",
        "chain",
        "keep",
        "append",
        "chain",
        "options",
        "keep",
        "append",
        "chain",
        "logging",
        "info",
        "chain",
        "id",
        "len",
        "chain",
        "keep",
        "chain",
        "chains",
        "i",
        "resname",
        "chain",
        "sequence",
        "resname",
        "options",
        "getChargeType",
        "resname",
        "i",
        "choices",
        "chain",
        "sequence",
        "choice",
        "model",
        "check_merge",
        "chains",
        "options",
        "options",
        "options",
        "options",
        "sum",
        "len",
        "chain",
        "chain",
        "chains",
        "logging",
        "info",
        "seqlength",
        "options",
        "chain",
        "chains",
        "chain",
        "set_ss",
        "ss",
        "chain",
        "ss",
        "options",
        "options",
        "value",
        "replace",
        "replace",
        "ss",
        "isalnum",
        "ss",
        "isupper",
        "os",
        "path",
        "exists",
        "options",
        "value",
        "options",
        "value",
        "logging",
        "info",
        "ss",
        "i",
        "strip",
        "i",
        "open",
        "options",
        "value",
        "ssfile",
        "isdigit",
        "logging",
        "info",
        "join",
        "i",
        "i",
        "ssfile",
        "logging",
        "info",
        "re",
        "compile",
        "join",
        "i",
        "i",
        "open",
        "options",
        "value",
        "re",
        "match",
        "pss",
        "i",
        "ss",
        "chain",
        "chains",
        "min",
        "len",
        "sstmp",
        "len",
        "chain",
        "chain",
        "set_ss",
        "sstmp",
        "ln",
        "ss",
        "ln",
        "options",
        "options",
        "value",
        "logging",
        "warning",
        "chain",
        "chains",
        "ss",
        "chain",
        "dss",
        "method",
        "executable",
        "method",
        "logging",
        "debug",
        "method",
        "upper",
        "ss",
        "ssTotal",
        "append",
        "ss",
        "options",
        "value",
        "logging",
        "info",
        "cgOutPDB",
        "open",
        "options",
        "value",
        "cgOutPDB",
        "write",
        "model",
        "cgOutPDB",
        "write",
        "title",
        "cgOutPDB",
        "write",
        "pdbBoxString",
        "box",
        "i",
        "order",
        "chains",
        "i",
        "ci",
        "multiscale",
        "r",
        "ci",
        "residues",
        "name",
        "resn",
        "resi",
        "chain",
        "x",
        "y",
        "z",
        "r",
        "resi",
        "resi",
        "insc",
        "cgOutPDB",
        "write",
        "pdbAtomLine",
        "atid",
        "name",
        "resn",
        "chain",
        "resi",
        "chr",
        "insc",
        "x",
        "y",
        "z",
        "atid",
        "ci",
        "cg",
        "com",
        "coarseGrained",
        "name",
        "resn",
        "resi",
        "chain",
        "x",
        "y",
        "z",
        "ssid",
        "coarseGrained",
        "resi",
        "resi",
        "insc",
        "ci",
        "multiscale",
        "name",
        "cgOutPDB",
        "write",
        "pdbAtomLine",
        "atid",
        "name",
        "resn",
        "chain",
        "resi",
        "chr",
        "insc",
        "x",
        "y",
        "z",
        "ssid",
        "atid",
        "cgOutPDB",
        "write",
        "logging",
        "warning",
        "ci",
        "id",
        "ci",
        "cgOutPDB",
        "write",
        "cys",
        "chain",
        "chains",
        "cys",
        "chain",
        "cysteines",
        "append",
        "cys",
        "cys",
        "cyslist",
        "cys",
        "model",
        "options",
        "value",
        "logging",
        "info",
        "i",
        "order",
        "chains",
        "i",
        "ci",
        "cg",
        "force",
        "ci",
        "multiscale",
        "NAA",
        "extend",
        "a",
        "atid",
        "a",
        "ci",
        "natoms",
        "atid",
        "ci",
        "natoms",
        "coarseGrained",
        "ci",
        "multiscale",
        "NVZ",
        "extend",
        "a",
        "atid",
        "a",
        "len",
        "coarseGrained",
        "NCG",
        "extend",
        "a",
        "atid",
        "a",
        "len",
        "coarseGrained",
        "atid",
        "len",
        "coarseGrained",
        "open",
        "options",
        "value",
        "outNDX",
        "write",
        "join",
        "join",
        "NAA",
        "i",
        "i",
        "i",
        "len",
        "NAA",
        "outNDX",
        "write",
        "join",
        "join",
        "NVZ",
        "i",
        "i",
        "i",
        "len",
        "NVZ",
        "outNDX",
        "write",
        "join",
        "join",
        "NCG",
        "i",
        "i",
        "i",
        "len",
        "NCG",
        "outNDX",
        "close",
        "options",
        "value",
        "logging",
        "info",
        "open",
        "options",
        "value",
        "i_count",
        "i",
        "residues",
        "atoms",
        "i",
        "i",
        "CoarseGrained",
        "mapping",
        "keys",
        "j",
        "j",
        "i",
        "j_count",
        "j",
        "mapIndex",
        "i",
        "outNDX",
        "write",
        "j_count",
        "i_count",
        "k",
        "j",
        "names",
        "k",
        "line",
        "o3_shift",
        "k",
        "atid",
        "line",
        "k",
        "atid",
        "line",
        "nra",
        "len",
        "j",
        "outNDX",
        "write",
        "line",
        "atid",
        "nra",
        "options",
        "ssTotal",
        "i",
        "ssTotal",
        "i",
        "len",
        "si",
        "ssAver",
        "append",
        "si",
        "i",
        "i",
        "count",
        "j",
        "len",
        "i",
        "j",
        "j",
        "si",
        "si",
        "sort",
        "si",
        "options",
        "value",
        "ssAver",
        "append",
        "si",
        "ssAver",
        "append",
        "join",
        "ssAver",
        "logging",
        "info",
        "chain",
        "chains",
        "chain",
        "set_ss",
        "ssAver",
        "len",
        "chain",
        "ssAver",
        "len",
        "chain",
        "options",
        "logging",
        "info",
        "math",
        "sqrt",
        "options",
        "j",
        "j",
        "i",
        "i",
        "cysteines",
        "i",
        "i",
        "cysteines",
        "options",
        "special",
        "len",
        "cysteines",
        "i",
        "rlc",
        "j",
        "rlc",
        "i",
        "min",
        "distance2",
        "a",
        "b",
        "a",
        "b",
        "cyscoord",
        "i",
        "cyscoord",
        "j",
        "d2",
        "options",
        "cysteines",
        "i",
        "cysteines",
        "j",
        "options",
        "append",
        "a",
        "a",
        "b",
        "b",
        "bl",
        "kb",
        "a",
        "a",
        "a",
        "a",
        "b",
        "b",
        "b",
        "b",
        "logging",
        "info",
        "a",
        "b",
        "math",
        "sqrt",
        "d2",
        "chains",
        "i",
        "i",
        "j",
        "j",
        "merge",
        "mi",
        "len",
        "molecules",
        "molecules",
        "mi",
        "mol",
        "moleculeTypes",
        "options",
        "join",
        "chain",
        "getname",
        "options",
        "value",
        "chain",
        "mol",
        "name",
        "Topology",
        "mol",
        "options",
        "options",
        "name",
        "name",
        "m",
        "mol",
        "top",
        "Topology",
        "m",
        "options",
        "options",
        "j",
        "j",
        "m",
        "mol",
        "j",
        "m",
        "cg",
        "force",
        "mcg",
        "atomA",
        "atomB",
        "bondlength",
        "forceconst",
        "options",
        "bondlength",
        "forceconst",
        "options",
        "special",
        "atomA",
        "atomB",
        "atomA",
        "mcg",
        "mcg",
        "index",
        "atomA",
        "atomB",
        "mcg",
        "mcg",
        "index",
        "atomB",
        "atomA",
        "atomB",
        "mcg",
        "atomA",
        "mcg",
        "atomB",
        "top",
        "bonds",
        "append",
        "Bond",
        "atomA",
        "atomB",
        "options",
        "options",
        "parameters",
        "bondlength",
        "forceconst",
        "category",
        "cat",
        "options",
        "options",
        "EBondType",
        "rubberBands",
        "i",
        "j",
        "i",
        "j",
        "top",
        "atoms",
        "coords",
        "i",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "top",
        "bonds",
        "extend",
        "Bond",
        "i",
        "options",
        "options",
        "rubberType",
        "category",
        "i",
        "rubberList",
        "options",
        "open",
        "moleculeTypes",
        "mol",
        "sys",
        "stdout",
        "destination",
        "write",
        "top",
        "itp",
        "options",
        "j",
        "mi",
        "len",
        "molecules",
        "molecules",
        "j",
        "moleculeTypes",
        "mol",
        "molecules",
        "j",
        "molecules",
        "j",
        "moleculeTypes",
        "mol",
        "logging",
        "info",
        "itp",
        "itp",
        "options",
        "open",
        "options",
        "value",
        "sys",
        "stdout",
        "join",
        "molecule",
        "molecule",
        "moleculeTypes",
        "values",
        "logging",
        "info",
        "len",
        "molecules",
        "molecule",
        "molecules",
        "n",
        "moleculeTypes",
        "molecule",
        "len",
        "molecule",
        "join",
        "i",
        "id",
        "i",
        "molecule",
        "logging",
        "info",
        "chainInfo",
        "n",
        "join",
        "moleculeTypes",
        "molecule",
        "molecule",
        "molecules",
        "options",
        "top",
        "write",
        "useRubber",
        "itps",
        "options",
        "options",
        "value",
        "molecules",
        "logging",
        "info",
        "options",
        "messages",
        "martiniq",
        "pop",
        "random",
        "randint",
        "len",
        "martiniq",
        "Q",
        "Q",
        "sys",
        "logging",
        "sys",
        "argv",
        "options",
        "lists",
        "option_parser",
        "args",
        "options",
        "lists",
        "version",
        "main",
        "options"
    ],
    "literals": [
        "\"2.3c\"",
        "\"Djurre de Jong\"",
        "\"Jaakko J. Uusitalo\"",
        "\"Tsjerk A. Wassenaar\"",
        "\"DdJ130213\"",
        "\"V2.3\"",
        "\"DdJ200613\"",
        "\"Fixes in cysteine bridge detection and help text.\"",
        "\"DdJ200820\"",
        "\"Fixes in cysteine bridge length and added a warning about it.\"",
        "\"DdJ200826\"",
        "\"Inverted 'define NO_RUBBER_BANDS', fixed writing posres when merging and added few comments.\"",
        "\"DdJ200831\"",
        "\"Shortened in-file changelog and fixed some comments.\"",
        "'elnedyn22p'",
        "\"Qd\"",
        "\"Qa\"",
        "\"SQd\"",
        "\"SQa\"",
        "\"RQd\"",
        "\"AQa\"",
        "\" N0   Nda    N0    Nd    Na   Nda   Nda    P5    P5\"",
        "\"ALA\"",
        "\" C5    N0    C5    N0    N0    N0    N0    P4    P4\"",
        "\"PRO\"",
        "\" C5    N0    C5    N0    Na    N0    N0    P4    P4\"",
        "\"HYP\"",
        "\" C5    N0    C5    N0    N0    N0    N0    P4    P4\"",
        "\"PRO\"",
        "\"HYP\"",
        "\"PRO\"",
        "\"HYP\"",
        "'short'",
        "'long'",
        "'TRP'",
        "\"SC4 SNd SC5 SC5\"",
        "'TYR'",
        "\"SC4 SC4 SP1\"",
        "'PHE'",
        "\"SC5 SC5 SC5\"",
        "'HIS'",
        "\"SC4 SP1 SP1\"",
        "'HIH'",
        "\"SC4 SP1 SQd\"",
        "'GLN'",
        "\"Nda D D\"",
        "'ASN'",
        "\"Nda D D\"",
        "'SER'",
        "\"N0 D D\"",
        "'THR'",
        "\"N0 D D\"",
        "'ARG'",
        "\"N0 Qd D\"",
        "'LYS'",
        "\"C3 Qd D\"",
        "'ASP'",
        "\"Qa D\"",
        "'GLU'",
        "\"Qa D\"",
        "'CYS'",
        "\"C5\"",
        "'ILE'",
        "\"C1\"",
        "'LEU'",
        "\"C1\"",
        "'MET'",
        "\"C5\"",
        "'PRO'",
        "\"C3\"",
        "'HYP'",
        "\"P1\"",
        "'VAL'",
        "\"C2\"",
        "'GLY'",
        "'ALA'",
        "\"GLN\"",
        "\"ASN\"",
        "\"SER\"",
        "\"THR\"",
        "\"ARG\"",
        "\"LYS\"",
        "\"ASP\"",
        "\"GLU\"",
        "\"HIH\"",
        "\"GLN\"",
        "\"ASN\"",
        "\"SER\"",
        "\"THR\"",
        "\"HIH\"",
        "\"ARG\"",
        "\"LYS\"",
        "\"ASP\"",
        "\"GLU\"",
        "\"TRP\"",
        "\"TYR\"",
        "\"PHE\"",
        "\"HIS\"",
        "\"HIH\"",
        "\"GLN\"",
        "\"ASN\"",
        "\"SER\"",
        "\"THR\"",
        "\"ARG\"",
        "\"LYS\"",
        "\"ASP\"",
        "\"GLU\"",
        "\"CYS\"",
        "\"ILE\"",
        "\"LEU\"",
        "\"MET\"",
        "\"PRO\"",
        "\"HYP\"",
        "\"VAL\"",
        "\"ALA\"",
        "\"GLY\"",
        "\"SC1\"",
        "\"CYS\"",
        "\"SC1\"",
        "\"CYS\"",
        "\"C\"",
        "'The elnedyn forcefield has been implemented with some changes compared to the published parameters:'",
        "'- Backbone-Backbone bonds use high force constant bonds instead of constraints.'",
        "'- Trp has an extra constrain added to the sidechain.'",
        "'- The Backbone sidechain bonds with high force constants are replaced by constraints except for Trp and His and the polar sidechains.'",
        "'- Cysteine bonds are 0.24 nm constraints, instead of the published 0.39nm/5000kJ/mol.'",
        "'Elnedyn topologies might not give numerical stable simulations with a 20fs timestep.'",
        "'This can be solved by setting all S-type bead masses to 72amu.'",
        "'Martini version 2.2 is in beta release. It has not been extensively tested and problems might occur.'",
        "'martini21'",
        "\"Qd\"",
        "\"Qa\"",
        "\"SQd\"",
        "\"SQa\"",
        "\"RQd\"",
        "\"AQa\"",
        "\" N0   Nda    N0    Nd    Na   Nda   Nda    P5    P5\"",
        "\"ALA\"",
        "\" C5    N0    C5    N0    N0    N0    N0    P4    P4\"",
        "\"PRO\"",
        "\" C5    N0    C5    N0    Na    N0    N0    Na    Na\"",
        "\"HYP\"",
        "\" C5    N0    C5    N0    N0    N0    N0    Na    Na\"",
        "\"PRO\"",
        "\"HYP\"",
        "\"PRO\"",
        "\"HYP\"",
        "'short'",
        "'long'",
        "\"TRP\"",
        "\"SC4 SP1 SC4 SC4\"",
        "\"TYR\"",
        "\"SC4 SC4 SP1\"",
        "\"PHE\"",
        "\"SC4 SC4 SC4\"",
        "\"HIS\"",
        "\"SC4 SP1 SP1\"",
        "\"HIH\"",
        "\"SC4 SP1 SQd\"",
        "\"ARG\"",
        "\"N0 Qd\"",
        "\"LYS\"",
        "\"C3 Qd\"",
        "\"CYS\"",
        "\"C5\"",
        "\"ASP\"",
        "\"Qa\"",
        "\"GLU\"",
        "\"Qa\"",
        "\"ILE\"",
        "\"AC1\"",
        "\"LEU\"",
        "\"AC1\"",
        "\"MET\"",
        "\"C5\"",
        "\"ASN\"",
        "\"P5\"",
        "\"PRO\"",
        "\"AC2\"",
        "\"HYP\"",
        "\"P1\"",
        "\"GLN\"",
        "\"P4\"",
        "\"SER\"",
        "\"P1\"",
        "\"THR\"",
        "\"P1\"",
        "\"VAL\"",
        "\"AC2\"",
        "\"ALA\"",
        "\"GLY\"",
        "\"TRP\"",
        "\"TYR\"",
        "\"PHE\"",
        "\"HIS\"",
        "\"HIH\"",
        "\"GLN\"",
        "\"ASN\"",
        "\"SER\"",
        "\"THR\"",
        "\"ARG\"",
        "\"LYS\"",
        "\"ASP\"",
        "\"GLU\"",
        "\"CYS\"",
        "\"ILE\"",
        "\"LEU\"",
        "\"MET\"",
        "\"PRO\"",
        "\"HYP\"",
        "\"VAL\"",
        "\"ALA\"",
        "\"GLY\"",
        "\"SC1\"",
        "\"CYS\"",
        "\"SC1\"",
        "\"CYS\"",
        "\"C\"",
        "\"PRO\"",
        "\"H123\"",
        "\"PRO\"",
        "'Note: Cysteine bonds are 0.24 nm constraints, instead of the published 0.39nm/5000kJ/mol.'",
        "'elnedyn'",
        "\"Qd\"",
        "\"Qa\"",
        "\"RQd\"",
        "\"AQa\"",
        "\" N0   Nda    N0    Nd    Na   Nda   Nda    P5    P5\"",
        "\"ALA\"",
        "\" C5    N0    C5    N0    N0    N0    N0    P4    P4\"",
        "\"PRO\"",
        "\" C5    N0    C5    N0    Na    N0    N0    Na    Na\"",
        "\"HYP\"",
        "\" C5    N0    C5    N0    N0    N0    N0    Na    Na\"",
        "\"PRO\"",
        "\"HYP\"",
        "\"PRO\"",
        "\"HYP\"",
        "'short'",
        "'long'",
        "'TRP'",
        "\"SC4 SP1 SC4 SC4\"",
        "'TYR'",
        "\"SC4 SC4 SP1\"",
        "'PHE'",
        "\"SC4 SC4 SC4\"",
        "'HIS'",
        "\"SC4 SP1 SP1\"",
        "'ARG'",
        "\"N0 Qd\"",
        "'LYS'",
        "\"C3 Qd\"",
        "'CYS'",
        "\"C5\"",
        "'ASP'",
        "\"Qa\"",
        "'GLU'",
        "\"Qa\"",
        "'ILE'",
        "\"C1\"",
        "'LEU'",
        "\"C1\"",
        "'MET'",
        "\"C5\"",
        "'ASN'",
        "\"P5\"",
        "'PRO'",
        "\"C2\"",
        "'GLN'",
        "\"P4\"",
        "'SER'",
        "\"P1\"",
        "'THR'",
        "\"P1\"",
        "'VAL'",
        "\"C2\"",
        "'GLY'",
        "'ALA'",
        "\"TRP\"",
        "\"TYR\"",
        "\"PHE\"",
        "\"HIS\"",
        "\"GLN\"",
        "\"ASN\"",
        "\"SER\"",
        "\"THR\"",
        "\"ARG\"",
        "\"LYS\"",
        "\"ASP\"",
        "\"GLU\"",
        "\"CYS\"",
        "\"ILE\"",
        "\"LEU\"",
        "\"MET\"",
        "\"PRO\"",
        "\"HYP\"",
        "\"VAL\"",
        "\"ALA\"",
        "\"GLY\"",
        "\"SC1\"",
        "\"CYS\"",
        "\"SC1\"",
        "\"CYS\"",
        "\"C\"",
        "'The Elnedyn forcefield has been implemented with some changes compared to the published parameters:'",
        "'- Backbone-Backbone bonds use high force constant bonds instead of constraints.'",
        "'- Trp has an extra constrain added to the sidechain.'",
        "'- The Backbone sidechain bonds with high force constants are replaced by constraints except for Trp and His.'",
        "'- Cysteine bonds are 0.24 nm constraints, instead of the published 0.39nm/5000kJ/mol.'",
        "'Elnedyn topologies might not give numerical stable simulations with a 20fs timestep.'",
        "'This can be solved by setting all S-type bead masses to 72amu.'",
        "'martini21p'",
        "\"Qd\"",
        "\"Qa\"",
        "\"SQd\"",
        "\"SQa\"",
        "\"RQd\"",
        "\"AQa\"",
        "\" N0   Nda    N0    Nd    Na   Nda   Nda    P5    P5\"",
        "\"ALA\"",
        "\" C5    N0    C5    N0    N0    N0    N0    P4    P4\"",
        "\"PRO\"",
        "\" C5    N0    C5    N0    Na    N0    N0    Na    Na\"",
        "\"HYP\"",
        "\" C5    N0    C5    N0    N0    N0    N0    Na    Na\"",
        "\"PRO\"",
        "\"HYP\"",
        "\"PRO\"",
        "\"HYP\"",
        "'short'",
        "'long'",
        "\"TRP\"",
        "\"SC4 SP1 SC4 SC4\"",
        "\"TYR\"",
        "\"SC4 SC4 SP1\"",
        "\"PHE\"",
        "\"SC4 SC4 SC4\"",
        "\"HIS\"",
        "\"SC4 SP1 SP1\"",
        "\"HIH\"",
        "\"SC4 SP1 SQd\"",
        "\"ARG\"",
        "\"N0 Qd\"",
        "\"LYS\"",
        "\"C3 Qd\"",
        "\"CYS\"",
        "\"C5\"",
        "\"ASP\"",
        "\"Qa\"",
        "\"GLU\"",
        "\"Qa\"",
        "\"ILE\"",
        "\"C1\"",
        "\"LEU\"",
        "\"C1\"",
        "\"MET\"",
        "\"C5\"",
        "\"ASN\"",
        "\"P5\"",
        "\"PRO\"",
        "\"C2\"",
        "\"HYP\"",
        "\"P1\"",
        "\"GLN\"",
        "\"P4\"",
        "\"SER\"",
        "\"P1\"",
        "\"THR\"",
        "\"P1\"",
        "\"VAL\"",
        "\"C2\"",
        "\"ALA\"",
        "\"GLY\"",
        "\"TRP\"",
        "\"TYR\"",
        "\"PHE\"",
        "\"HIS\"",
        "\"HIH\"",
        "\"GLN\"",
        "\"ASN\"",
        "\"SER\"",
        "\"THR\"",
        "\"ARG\"",
        "\"LYS\"",
        "\"ASP\"",
        "\"GLU\"",
        "\"CYS\"",
        "\"ILE\"",
        "\"LEU\"",
        "\"MET\"",
        "\"PRO\"",
        "\"HYP\"",
        "\"VAL\"",
        "\"ALA\"",
        "\"GLY\"",
        "\"SC1\"",
        "\"CYS\"",
        "\"SC1\"",
        "\"CYS\"",
        "\"C\"",
        "\"PRO\"",
        "\"H123\"",
        "\"PRO\"",
        "'Note: Cysteine bonds are 0.24 nm constraints, instead of the published 0.39nm/5000kJ/mol.'",
        "'elnedyn22'",
        "\"Qd\"",
        "\"Qa\"",
        "\"SQd\"",
        "\"SQa\"",
        "\"RQd\"",
        "\"AQa\"",
        "\" N0   Nda    N0    Nd    Na   Nda   Nda    P5    P5\"",
        "\"ALA\"",
        "\" C5    N0    C5    N0    N0    N0    N0    P4    P4\"",
        "\"PRO\"",
        "\" C5    N0    C5    N0    Na    N0    N0    P4    P4\"",
        "\"HYP\"",
        "\" C5    N0    C5    N0    N0    N0    N0    P4    P4\"",
        "\"PRO\"",
        "\"HYP\"",
        "\"PRO\"",
        "\"HYP\"",
        "'short'",
        "'long'",
        "'TRP'",
        "\"SC4 SNd SC5 SC5\"",
        "'TYR'",
        "\"SC4 SC4 SP1\"",
        "'PHE'",
        "\"SC5 SC5 SC5\"",
        "'HIS'",
        "\"SC4 SP1 SP1\"",
        "'HIH'",
        "\"SC4 SP1 SP1\"",
        "'ARG'",
        "\"N0 Qd\"",
        "'LYS'",
        "\"C3 Qd\"",
        "'CYS'",
        "\"C5\"",
        "'ASP'",
        "\"Qa\"",
        "'GLU'",
        "\"Qa\"",
        "'ILE'",
        "\"C1\"",
        "'LEU'",
        "\"C1\"",
        "'MET'",
        "\"C5\"",
        "'ASN'",
        "\"P5\"",
        "'PRO'",
        "\"C3\"",
        "'GLN'",
        "\"P4\"",
        "'SER'",
        "\"P1\"",
        "'THR'",
        "\"P1\"",
        "'VAL'",
        "\"C2\"",
        "'GLY'",
        "'ALA'",
        "\"TRP\"",
        "\"TYR\"",
        "\"PHE\"",
        "\"HIS\"",
        "\"HIH\"",
        "\"GLN\"",
        "\"ASN\"",
        "\"SER\"",
        "\"THR\"",
        "\"ARG\"",
        "\"LYS\"",
        "\"ASP\"",
        "\"GLU\"",
        "\"CYS\"",
        "\"ILE\"",
        "\"LEU\"",
        "\"MET\"",
        "\"PRO\"",
        "\"HYP\"",
        "\"VAL\"",
        "\"ALA\"",
        "\"GLY\"",
        "\"SC1\"",
        "\"CYS\"",
        "\"SC1\"",
        "\"CYS\"",
        "\"C\"",
        "'The elnedyn forcefield has been implemented with some changes compared to the published parameters:'",
        "'- Backbone-Backbone bonds use high force constant bonds instead of constraints.'",
        "'- Trp has an extra constrain added to the sidechain.'",
        "'- The Backbone sidechain bonds with high force constants are replaced by constraints except for Trp and His.'",
        "'- Cysteine bonds are 0.24 nm constraints, instead of the published 0.39nm/5000kJ/mol.'",
        "'Elnedyn topologies might not give numerical stable simulations with a 20fs timestep.'",
        "'This can be solved by setting all S-type bead masses to 72amu.'",
        "'Martini version 2.2 is in beta release. It has not been extensively tested and problems might occur.'",
        "'martini22'",
        "\"Qd\"",
        "\"Qa\"",
        "\"SQd\"",
        "\"SQa\"",
        "\"RQd\"",
        "\"AQa\"",
        "\" N0   Nda    N0    Nd    Na   Nda   Nda    P5    P5\"",
        "\"ALA\"",
        "\" C5    N0    C5    N0    N0    N0    N0    P4    P4\"",
        "\"PRO\"",
        "\" C5    N0    C5    N0    Na    N0    N0    P4    P4\"",
        "\"HYP\"",
        "\" C5    N0    C5    N0    N0    N0    N0    P4    P4\"",
        "\"PRO\"",
        "\"HYP\"",
        "\"PRO\"",
        "\"HYP\"",
        "'short'",
        "'long'",
        "\"TRP\"",
        "\"SC4 SNd SC5 SC5\"",
        "\"TYR\"",
        "\"SC4 SC4 SP1\"",
        "\"PHE\"",
        "\"SC5 SC5 SC5\"",
        "\"HIS\"",
        "\"SC4 SP1 SP1\"",
        "\"HIH\"",
        "\"SC4 SP1 SQd\"",
        "\"ARG\"",
        "\"N0 Qd\"",
        "\"LYS\"",
        "\"C3 Qd\"",
        "\"CYS\"",
        "\"C5\"",
        "\"ASP\"",
        "\"Qa\"",
        "\"GLU\"",
        "\"Qa\"",
        "\"ILE\"",
        "\"AC1\"",
        "\"LEU\"",
        "\"AC1\"",
        "\"MET\"",
        "\"C5\"",
        "\"ASN\"",
        "\"P5\"",
        "\"PRO\"",
        "\"C3\"",
        "\"HYP\"",
        "\"P1\"",
        "\"GLN\"",
        "\"P4\"",
        "\"SER\"",
        "\"P1\"",
        "\"THR\"",
        "\"P1\"",
        "\"VAL\"",
        "\"AC2\"",
        "\"ALA\"",
        "\"GLY\"",
        "\"TRP\"",
        "\"TYR\"",
        "\"PHE\"",
        "\"HIS\"",
        "\"HIH\"",
        "\"GLN\"",
        "\"ASN\"",
        "\"SER\"",
        "\"THR\"",
        "\"ARG\"",
        "\"LYS\"",
        "\"ASP\"",
        "\"GLU\"",
        "\"CYS\"",
        "\"ILE\"",
        "\"LEU\"",
        "\"MET\"",
        "\"PRO\"",
        "\"HYP\"",
        "\"VAL\"",
        "\"ALA\"",
        "\"GLY\"",
        "\"SC1\"",
        "\"CYS\"",
        "\"SC1\"",
        "\"CYS\"",
        "\"C\"",
        "\"PRO\"",
        "\"H123\"",
        "\"PRO\"",
        "'Martini version 2.2 is in beta release. It has not been extensively tested and problems might occur.'",
        "'Note: Cysteine bonds are 0.24 nm constraints, instead of the published 0.39nm/5000kJ/mol.'",
        "'martini22p'",
        "\"Qd\"",
        "\"Qa\"",
        "\"SQd\"",
        "\"SQa\"",
        "\"RQd\"",
        "\"AQa\"",
        "\" N0   Nda    N0    Nd    Na   Nda   Nda    P5    P5\"",
        "\"ALA\"",
        "\" C5    N0    C5    N0    N0    N0    N0    P4    P4\"",
        "\"PRO\"",
        "\" C5    N0    C5    N0    Na    N0    N0    P4    P4\"",
        "\"HYP\"",
        "\" C5    N0    C5    N0    N0    N0    N0    P4    P4\"",
        "\"PRO\"",
        "\"HYP\"",
        "\"PRO\"",
        "\"HYP\"",
        "'short'",
        "'long'",
        "\"TRP\"",
        "\"SC4 SNd SC5 SC5\"",
        "\"TYR\"",
        "\"SC4 SC4 SP1\"",
        "\"PHE\"",
        "\"SC5 SC5 SC5\"",
        "\"HIS\"",
        "\"SC4 SP1 SP1\"",
        "\"HIH\"",
        "\"SC4 SP1 SQd D\"",
        "\"GLN\"",
        "\"Nda D D\"",
        "\"ASN\"",
        "\"Nda D D\"",
        "\"SER\"",
        "\"N0 D D\"",
        "\"THR\"",
        "\"N0 D D\"",
        "\"ARG\"",
        "\"N0 Qd D\"",
        "\"LYS\"",
        "\"C3 Qd D\"",
        "\"ASP\"",
        "\"Qa D\"",
        "\"GLU\"",
        "\"Qa D\"",
        "\"CYS\"",
        "\"C5\"",
        "\"ILE\"",
        "\"C1\"",
        "\"LEU\"",
        "\"C1\"",
        "\"MET\"",
        "\"C5\"",
        "\"PRO\"",
        "\"C3\"",
        "\"HYP\"",
        "\"P1\"",
        "\"VAL\"",
        "\"C2\"",
        "\"ALA\"",
        "\"GLY\"",
        "\"GLN\"",
        "\"ASN\"",
        "\"SER\"",
        "\"THR\"",
        "\"ARG\"",
        "\"LYS\"",
        "\"ASP\"",
        "\"GLU\"",
        "\"HIH\"",
        "\"GLN\"",
        "\"ASN\"",
        "\"SER\"",
        "\"THR\"",
        "\"ARG\"",
        "\"LYS\"",
        "\"HIH\"",
        "\"ASP\"",
        "\"GLU\"",
        "\"TRP\"",
        "\"TYR\"",
        "\"PHE\"",
        "\"HIS\"",
        "\"HIH\"",
        "\"GLN\"",
        "\"ASN\"",
        "\"SER\"",
        "\"THR\"",
        "\"ARG\"",
        "\"LYS\"",
        "\"ASP\"",
        "\"GLU\"",
        "\"CYS\"",
        "\"ILE\"",
        "\"LEU\"",
        "\"MET\"",
        "\"PRO\"",
        "\"HYP\"",
        "\"VAL\"",
        "\"ALA\"",
        "\"GLY\"",
        "\"SC1\"",
        "\"CYS\"",
        "\"SC1\"",
        "\"CYS\"",
        "\"C\"",
        "\"PRO\"",
        "\"H123\"",
        "\"PRO\"",
        "'Martini version 2.2 is in beta release. It has not been extensively tested and problems might occur.'",
        "'Bead names of charges in sidechains differ between .top/.itp and .pdb.'",
        "'Using names in topology, as Gromacs does, gives the correct result.'",
        "'Note: Cysteine bonds are 0.24 nm constraints, instead of the published 0.39nm/5000kJ/mol.'",
        "\"\"",
        "\"\"",
        "'.'",
        "\"ff\"",
        "\".\"",
        "\"_ff.py\"",
        "\"GMXDATA\"",
        "\"GMXDATA\"",
        "\"/top/\"",
        "\"_ff.py\"",
        "'cystines'",
        "'merges'",
        "'links'",
        "'multi'",
        "\"-f\"",
        "\"Input file (PDB|GRO)\"",
        "\"-o\"",
        "\"Output topology (TOP)\"",
        "\"-x\"",
        "\"Output coarse grained structure (PDB)\"",
        "\"-n\"",
        "\"Output index file with CG (and multiscale) beads.\"",
        "\"-nmap\"",
        "\"Output index file containing per bead mapping.\"",
        "\"-v\"",
        "\"Verbose. Be load and noisy.\"",
        "\"-h\"",
        "\"Display this help.\"",
        "\"-ss\"",
        "\"Secondary structure (File or string)\"",
        "\"-ssc\"",
        "\"Cutoff fraction for ss in case of ambiguity (default: 0.5).\"",
        "\"-dssp\"",
        "\"DSSP executable for determining structure\"",
        "\"-collagen\"",
        "\"Use collagen parameters\"",
        "\"-his\"",
        "\"Interactively set the charge of each His-residue.\"",
        "\"-nt\"",
        "\"Set neutral termini (charged is default)\"",
        "\"-cb\"",
        "\"Set charges at chain breaks (neutral is default)\"",
        "\"-cys\"",
        "'cystines'",
        "\"Disulphide bond (+)\"",
        "\"-link\"",
        "'links'",
        "\"Link (+)\"",
        "\"-merge\"",
        "'merges'",
        "\"Merge chains: e.g. -merge A,B,C (+)\"",
        "\"-name\"",
        "\"Moleculetype name\"",
        "\"-p\"",
        "'None'",
        "\"Output position restraints (None/All/Backbone) (default: None)\"",
        "\"-pf\"",
        "\"Position restraints force constant (default: 1000 kJ/mol/nm^2)\"",
        "\"-ed\"",
        "\"Use dihedrals for extended regions rather than elastic bonds)\"",
        "\"-sep\"",
        "\"Write separate topologies for identical chains.\"",
        "\"-ff\"",
        "'martini21_ff'",
        "\"Which forcefield to use: \"",
        "' ,'",
        "\"-elastic\"",
        "\"Write elastic bonds\"",
        "\"-ef\"",
        "\"Elastic bond force constant Fc\"",
        "\"-el\"",
        "\"Elastic bond lower cutoff: F = Fc if rij < lo\"",
        "\"-eu\"",
        "\"Elastic bond upper cutoff: F = 0  if rij > up\"",
        "\"-ea\"",
        "\"Elastic bond decay factor a\"",
        "\"-ep\"",
        "\"Elastic bond decay power p\"",
        "\"-em\"",
        "\"Remove elastic bonds with force constant lower than this\"",
        "\"-eb\"",
        "'BB'",
        "\"Comma separated list of bead names for elastic bonds\"",
        "\"-multi\"",
        "'multi'",
        "\"Chain to be set up for multiscaling (+)\"",
        "\"Robert Benchley\"",
        "\"Why don't you get out of that wet coat and into a dry martini?\"",
        "\"James Thurber\"",
        "\"One martini is all right, two is two many, three is not enough\"",
        "\"Philip Larkin\"",
        "\"The chromatic scale is what you use to give the effect of drinking a quinine martini and having an enema simultaneously.\"",
        "\"William Emerson, Jr.\"",
        "\"And when that first martini hits the liver like a silver bullet, there is a sigh of contentment that can be heard in Dubuque.\"",
        "\"Alec Waugh\"",
        "\"I am prepared to believe that a dry martini slightly impairs the palate, but think what it does for the soul.\"",
        "\"Gerald R. Ford\"",
        "\"The three-martini lunch is the epitome of American efficiency. Where else can you get an earful, a bellyful and a snootful at the same time?\"",
        "\"P. G. Wodehouse\"",
        "\"He was white and shaken, like a dry martini.\"",
        "\"\"",
        "\"%10s  %s\"",
        "\"/\"",
        "'-h'",
        "'--help'",
        "'Version'",
        "'Arguments'",
        "\"-v\"",
        "'%(levelname)-7s    %(message)s'",
        "'MARTINIZE, script version %s'",
        "'If you use this script please cite:'",
        "'de Jong et al., J. Chem. Theory Comput., 2013, DOI:10.1021/ct300646g'",
        "'-ff'",
        "'ForceField'",
        "'-ff'",
        "'ForceField'",
        "'-ff'",
        "\"Forcefield '%s' can not be found.\"",
        "'-ff'",
        "'Collagen'",
        "'-collagen'",
        "'chHIS'",
        "'-his'",
        "'ChargesAtBreaks'",
        "'-cb'",
        "'NeutralTermini'",
        "'-nt'",
        "'ExtendedDihedrals'",
        "'-ed'",
        "'RetainHETATM'",
        "'SeparateTop'",
        "'-sep'",
        "'MixedChains'",
        "'ElasticNetwork'",
        "'-elastic'",
        "'ElasticMaximumForce'",
        "'-ef'",
        "'ElasticMinimumForce'",
        "'-em'",
        "'ElasticLowerBound'",
        "'-el'",
        "'ElasticUpperBound'",
        "'-eu'",
        "'ElasticDecayFactor'",
        "'-ea'",
        "'ElasticDecayPower'",
        "'-ep'",
        "'ElasticBeads'",
        "'-eb'",
        "','",
        "'PosResForce'",
        "'-pf'",
        "'PosRes'",
        "'-p'",
        "\",\"",
        "\"none\"",
        "'PosRes'",
        "'PosRes'",
        "\"backbone\"",
        "'PosRes'",
        "'PosRes'",
        "\"BB\"",
        "'ForceField'",
        "'ElasticNetwork'",
        "'mergeList'",
        "\"all\"",
        "'merges'",
        "\"all\"",
        "\",\"",
        "'merges'",
        "'links'",
        "\",\"",
        "'cystines'",
        "\"auto\"",
        "\".\"",
        "\"\"",
        "\",\"",
        "\"SG\"",
        "\"CYS\"",
        "\"SG\"",
        "\"CYS\"",
        "\"SC1\"",
        "\"CYS\"",
        "\"SC1\"",
        "\"CYS\"",
        "'linkList'",
        "'linkListCG'",
        "'CystineCheckBonds'",
        "'CystineMaxDist2'",
        "'multi'",
        "'multi'",
        "\"Chain termini will%s be charged\"",
        "'NeutralTermini'",
        "\" not\"",
        "\"\"",
        "\"Residues at chain brakes will%s be charged\"",
        "'ChargesAtBreaks'",
        "\" not\"",
        "\"\"",
        "'ForceField'",
        "\"The %s forcefield will be used.\"",
        "'ForceField'",
        "\"Forcefield '%s' has not been implemented.\"",
        "'-ff'",
        "'ExtendedDihedrals'",
        "'Dihedrals will be used for extended regions. (Elastic bonds may be more stable)'",
        "'Local elastic bonds will be used for extended regions.'",
        "'PosRes'",
        "\"Position restraints will be generated.\"",
        "\"Position restraints are only enabled if -DPOSRES is set in the MDP file\"",
        "'MixedChains'",
        "\"So far no parameters for mixed chains are available. This might crash the program!\"",
        "'RetainHETATM'",
        "\"I don't know how to handle HETATMs. This will probably crash the program.\"",
        "\".\"",
        "\"\\x00\"",
        "\"%5d\"",
        "\"%8.5f\"",
        "\" DA DC DG DT\"",
        "\" dA dC dG dT\"",
        "\"  A  C  G  U\"",
        "\" rA rC rG rU\"",
        "\"TRP TYR PHE HIS HIH ARG LYS CYS ASP GLU ILE LEU MET ASN PRO HYP GLN SER THR VAL ALA GLY\"",
        "\"  W   Y   F   H   H   R   K   C   D   E   I   L   M   N   P   O   Q   S   T   V   A   G\"",
        "\"HOH SOL TIP\"",
        "\"DPP DHP DLP DMP DSP POP DOP DAP DUP DPP DHP DLP DMP DSP PPC DSM DSD DSS\"",
        "\"DAD DCY DGU DTH ADE CYT GUA THY URA DA DC DG DT\"",
        "\"Protein\"",
        "\"Water\"",
        "\"Lipid\"",
        "\"Nucleic\"",
        "\"N CA C O H H1 H2 H3 O1 O2\"",
        "\"C1B C1C C1D C1E\"",
        "\"C1F C1G C1H C1I\"",
        "\"C1J C1K C1L C1M\"",
        "\"C1N C1O C1P\"",
        "\"C2B C2C C2D C2E\"",
        "\"C2F C2G C2H C2I\"",
        "\"C2J C2K C2L C2M\"",
        "\"C2N C2O C2P\"",
        "\"C1B C1C C1D C1E\"",
        "\"C1F C1G C1H\"",
        "\"C1I C1J\"",
        "\"C1K C1L C1M C1N\"",
        "\"C1O C1P C1Q C1R\"",
        "\"C2B C2C C2D C2E\"",
        "\"C2F C2G C2H\"",
        "\"C2I C2J\"",
        "\"C2K C2L C2M C2N\"",
        "\"C2O C2P C2Q C2R\"",
        "\"N H1 H2 H3 CA\"",
        "\"CB P OA OB OC OD\"",
        "\"CC CD OG C2A OH\"",
        "\"CE OE C1A OF\"",
        "\"H1 O1 CA H2 O2 CB\"",
        "\"CC P OA OB OC OD\"",
        "\"CD CE OG C2A OH\"",
        "\"CF OE C1A OF\"",
        "\"P OP1 OP2 O5' O3'\"",
        "\"C5' O4' C4'\"",
        "\"C3' O3' C2' C1'\"",
        "\"ALA\"",
        "\" CB\"",
        "\"CYS\"",
        "\"CB SG\"",
        "\"ASP\"",
        "\"CB CG OD1 OD2\"",
        "\"GLU\"",
        "\"CB CG CD OE1 OE2\"",
        "\"PHE\"",
        "\"CB CG CD1 HD1\"",
        "\"CD2 HD2 CE2 HE2\"",
        "\"CE1 HE1 CZ HZ\"",
        "\"GLY\"",
        "\"HIS\"",
        "\"CB CG\"",
        "\"CD2 HD2 NE2 HE2\"",
        "\"ND1 HD1 CE1 HE1\"",
        "\"HIH\"",
        "\"CB CG\"",
        "\"CD2 HD2 NE2 HE2\"",
        "\"ND1 HD1 CE1 HE1\"",
        "\"ILE\"",
        "\"CB CG1 CG2 CD CD1\"",
        "\"LYS\"",
        "\"CB CG CD\"",
        "\"CE NZ HZ1 HZ2 HZ3\"",
        "\"LEU\"",
        "\"CB CG CD1 CD2\"",
        "\"MET\"",
        "\"CB CG SD CE\"",
        "\"ASN\"",
        "\"CB CG ND1 ND2 OD1 OD2 HD11 HD12 HD21 HD22\"",
        "\"PRO\"",
        "\"CB CG CD\"",
        "\"HYP\"",
        "\"CB CG CD OD\"",
        "\"GLN\"",
        "\"CB CG CD OE1 OE2 NE1 NE2 HE11 HE12 HE21 HE22\"",
        "\"ARG\"",
        "\"CB CG CD\"",
        "\"NE HE CZ NH1 NH2 HH11 HH12 HH21 HH22\"",
        "\"SER\"",
        "\"CB OG HG\"",
        "\"THR\"",
        "\"CB OG1 HG1 CG2\"",
        "\"VAL\"",
        "\"CB CG1 CG2\"",
        "\"TRP\"",
        "\"CB CG CD2\"",
        "\"CD1 HD1 NE1 HE1 CE2\"",
        "\"CE3 HE3 CZ3 HZ3\"",
        "\"CZ2 HZ2 CH2 HH2\"",
        "\"TYR\"",
        "\"CB CG CD1 HD1\"",
        "\"CD2 HD2 CE2 HE2\"",
        "\"CE1 HE1 CZ OH HH\"",
        "\"POPE\"",
        "\"DOPE\"",
        "\"DPPE\"",
        "\"POPG\"",
        "\"DOPG\"",
        "\"DPPG\"",
        "\"DA\"",
        "\"P OP1 OP2 O5' O3' O1P O2P\"",
        "\"C5' O4' C4'\"",
        "\"C3' C2' C1'\"",
        "\"N9 C4\"",
        "\"C8 N7 C5\"",
        "\"C6 N6 N1\"",
        "\"C2 N3\"",
        "\"DG\"",
        "\"P OP1 OP2 O5' O3' O1P O2P\"",
        "\"C5' O4' C4'\"",
        "\"C3' C2' C1'\"",
        "\"N9 C4\"",
        "\"C8 N7 C5\"",
        "\"C6 O6 N1\"",
        "\"C2 N2 N3\"",
        "\"DC\"",
        "\"P OP1 OP2 O5' O3' O1P O2P\"",
        "\"C5' O4' C4'\"",
        "\"C3' C2' C1'\"",
        "\"N1 C6\"",
        "\"C5 C4 N4\"",
        "\"N3 C2 O2\"",
        "\"DT\"",
        "\"P OP1 OP2 O5' O3' O1P O2P\"",
        "\"C5' O4' C4'\"",
        "\"C3' C2' C1'\"",
        "\"N1 C6\"",
        "\"C5 C4 O4 C7 C5M\"",
        "\"N3 C2 O2\"",
        "\"BB SC1 SC2 SC3 SC4\"",
        "\"BB1 BB2 BB3 SC1 SC2 SC3 SC4\"",
        "\"POPE\"",
        "\"NH3 PO4 GL1 GL2 C1A C2A C3A C4A C1B C2B D3B C4B C5B\"",
        "\"POPG\"",
        "\"GLC PO4 GL1 GL2 C1A C2A C3A C4A C1B C2B D3B C4B C5B\"",
        "\"BB\"",
        "\"SC1\"",
        "\"SC2\"",
        "\"SC3\"",
        "\"SC4\"",
        "\"BB1\"",
        "\"BB2\"",
        "\"BB3\"",
        "\"SC1\"",
        "\"SC2\"",
        "\"SC3\"",
        "\"SC4\"",
        "\"POP\"",
        "'atoms[0] == \"CA\"'",
        "\"POPG\"",
        "'atoms[0] == \"N\"'",
        "\"POPE\"",
        "'H'",
        "'C'",
        "'N'",
        "'O'",
        "'S'",
        "'P'",
        "'M'",
        "\"CA\"",
        "\"CA\"",
        "\"F\"",
        "\"Collagenous Fiber\"",
        "\"E\"",
        "\"Extended structure (beta sheet)\"",
        "\"H\"",
        "\"Helix structure\"",
        "\"1\"",
        "\"Helix start (H-bond donor)\"",
        "\"2\"",
        "\"Helix end (H-bond acceptor)\"",
        "\"3\"",
        "\"Ambivalent helix type (short helices)\"",
        "\"T\"",
        "\"Turn\"",
        "\"S\"",
        "\"Bend\"",
        "\"C\"",
        "\"Coil\"",
        "\"  F     E     H     1     2     3     T     S     C\"",
        "\"dssp\"",
        "\".HGIBETSC~\"",
        "\"pymol\"",
        "\".H...S...L\"",
        "\"gmx\"",
        "\".H...ETS.C\"",
        "\"self\"",
        "\"FHHHEETSCC\"",
        "\"FHHHEETSCC\"",
        "\"H\"",
        "\".H. .HH. .HHH. .HHHH. .HHHHH. .HHHHHH. .HHHHHHH. .HHHH HHHH.\"",
        "\"H\"",
        "\".3. .33. .333. .3333. .13332. .113322. .1113222. .1111 2222.\"",
        "\"\"",
        "\"C\"",
        "\"\\x00\"",
        "\"dssp\"",
        "\"\"",
        "'dsspcmbi'",
        "'chain_%s.ssd'",
        "\" -V 2>/dev/null\"",
        "\"New version of DSSP; Executing '%s -i /dev/stdin -o %s'\"",
        "\"-i\"",
        "\"/dev/stdin\"",
        "\"-o\"",
        "\"Old version of DSSP; Executing '%s -- %s'\"",
        "\"--\"",
        "\"A problem occured calling %s.\"",
        "'O1'",
        "'O'",
        "'H'",
        "'O2'",
        "'TER\\n'",
        "''",
        "\"!\"",
        "'  #  RESIDUE AA'",
        "\"dssp\"",
        "\"atoms\"",
        "\"parameters\"",
        "\"RUBBER_FC*%f\"",
        "\"ATOM  %5d %4s%4s %1s%4d%1s   %8.3f%8.3f%8.3f%6.2f%6.2f\\n\"",
        "\"CRYST1%9.3f%9.3f%9.3f%7.2f%7.2f%7.2f P 1           1\\n\"",
        "\"TER\"",
        "\"ATOM  %5i  %-3s %3s%2s%4i%1s   %8.3f%8.3f%8.3f%6.2f%6.2f           %1s  \\n\"",
        "\"ATOM\"",
        "\"-hetatm\"",
        "\"HETATM\"",
        "\"TER\"",
        "\"Skipping empty chain definition\"",
        "\"ENDMDL\"",
        "\"\"",
        "\"TITLE\"",
        "\"CRYST1\"",
        "\"ATOM\"",
        "\"HETATM\"",
        "\"\"",
        "\"%5d%-5s%5s%5d%8.3f%8.3f%8.3f\\n\"",
        "\" \"",
        "'Which %s type do you want for residue %s:'",
        "'%s. %s'",
        "'Type a number:'",
        "\"gz\"",
        "'Read input structure from zipped file.'",
        "'Read input structure from file.'",
        "'Read input structure from command-line'",
        "\"Input structure is a GRO file. Chains will be labeled consecutively.\"",
        "\"GRO\"",
        "\"Input structure is a PDB file.\"",
        "\"PDB\"",
        "\"N\"",
        "\"CA\"",
        "\"C\"",
        "'SCD'",
        "'all'",
        "\"All chains will be merged in a single moleculetype.\"",
        "\"Merging chains %d and %d to allow link %s\"",
        "\"CYS\"",
        "\"CYS\"",
        "\"SG\"",
        "\"SG\"",
        "\"Found SS contact linking chains %d and %d (%f nm)\"",
        "\"Merging chains.\"",
        "\"This may change the order of atoms and will change the number of topology files.\"",
        "\"Merges: \"",
        "\", \"",
        "\"All chains will be merged in a single moleculetype\"",
        "\"residues\"",
        "\"sequence\"",
        "\"seq\"",
        "\"ss\"",
        "\"ssclass\"",
        "\"sstypes\"",
        "\"\"",
        "\"X\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"X\"",
        "\"\"",
        "\"Protein\"",
        "\"Mixed\"",
        "\"\"",
        "''",
        "\"+\"",
        "\"Unknown\"",
        "\"Unknown\"",
        "'Splitting chain %s in %s chains'",
        "\"_\"",
        "\"self\"",
        "\"Protein\"",
        "\"C\"",
        "\"-\"",
        "\"Unknown\"",
        "\"Mixed\"",
        "''",
        "\"O3'\"",
        "''",
        "\"SOL\"",
        "\"HOH\"",
        "\"TIP\"",
        "\"Skipped unknown residue %s\\n\"",
        "'ForceField'",
        "'ForceField'",
        "'ForceField'",
        "\"Too many atoms missing from residue %s %d(ch:%s):\"",
        "\"Unable to generate coarse grained structure due to missing atoms.\"",
        "\"BB\"",
        "\"_\"",
        "\"\"",
        "\"%5d\"",
        "\" %5d \"",
        "';'",
        "\" \"",
        "\"%s(%s)-%s(%s)\"",
        "\"category\"",
        "'ForceField'",
        "'Constraint'",
        "\"\"",
        "\"%s(%s)-%s(%s)-%s(%s)\"",
        "\"category\"",
        "'ForceField'",
        "\"%s\"",
        "\"category\"",
        "\"parameters\"",
        "\"%s\"",
        "\"category\"",
        "\"parameters\"",
        "\"%s(%s)-%s(%s)-%s(%s)-%s(%s)\"",
        "\"category\"",
        "''",
        "'FFFF'",
        "'ForceField'",
        "'F'",
        "''",
        "'EEEE'",
        "'ExtendedDihedrals'",
        "'ForceField'",
        "'E'",
        "\"H123\"",
        "'ForceField'",
        "'H'",
        "\"\"",
        "''",
        "\"\"",
        "'multi'",
        "\"atoms\"",
        "\"vsites\"",
        "\"bonds\"",
        "\"angles\"",
        "\"dihedrals\"",
        "\"impropers\"",
        "\"constraints\"",
        "\"posres\"",
        "\"Protein\"",
        "\"Nucleic\"",
        "\"Mixed\"",
        "'Mixed Amino Acid /Nucleic Acid chains are not yet implemented'",
        "\"bonds\"",
        "\"vsites\"",
        "\"angles\"",
        "\"dihedrals\"",
        "\"impropers\"",
        "\"constraints\"",
        "\"posres\"",
        "'; MARTINI (%s) Multiscale virtual sites topology section for \"%s\"'",
        "'ForceField'",
        "'; MARTINI (%s) Coarse Grained topology file for \"%s\"'",
        "'ForceField'",
        "'\\n; Created by py version %s \\n; Using the following options:  '",
        "'Version'",
        "' '",
        "'Arguments'",
        "'; Sequence:'",
        "'; '",
        "''",
        "'; Secondary Structure:'",
        "'; '",
        "'\\n[ moleculetype ]'",
        "'; Name         Exclusions'",
        "'%-15s %3d'",
        "'\\n[ atoms ]'",
        "'%5d %5s %5d %5s %5s %5d %7.4f ; %s'",
        "'%5d %5s %5d %5s %5s %5d %7.4f %7.4f ; %s'",
        "'\\n[ virtual_sites2 ]'",
        "'\\n[ exclusions ]'",
        "'\\n;\\n; Coarse grained to atomistic mapping\\n;'",
        "'#define mapping virtual_sitesn'",
        "'[ mapping ]'",
        "\"%5d     2 \"",
        "\" \"",
        "\"%5d\"",
        "'Created virtual sites section for multiscaled topology'",
        "\"\\n\"",
        "\"\\n[ bonds ]\"",
        "\"BB\"",
        "\"; Backbone bonds\"",
        "\"Rubber\"",
        "\"#ifndef NO_RUBBER_BANDS\"",
        "\"#ifndef RUBBER_FC\\n#define RUBBER_FC %f\\n#endif\"",
        "'ElasticMaximumForce'",
        "\"#endif\"",
        "\"SC\"",
        "\"; Sidechain bonds\"",
        "\"Elastic short\"",
        "\"; Short elastic bonds for extended regions\"",
        "\"Elastic long\"",
        "\"; Long elastic bonds for extended regions\"",
        "\"Cystine\"",
        "\"; Cystine bridges\"",
        "\"Link\"",
        "\"; Links/Cystine bridges\"",
        "\"\\n[ constraints ]\"",
        "\"Constraint\"",
        "\"\\n[ angles ]\"",
        "\"; Backbone angles\"",
        "\"BBB\"",
        "\"; Backbone-sidechain angles\"",
        "\"BBS\"",
        "\"; Sidechain angles\"",
        "\"SC\"",
        "\"\\n[ dihedrals ]\"",
        "\"; Backbone dihedrals\"",
        "\"BBBB\"",
        "\"; Sidechain improper dihedrals\"",
        "\"SC\"",
        "\"\\n#ifdef POSRES\"",
        "\"#ifndef POSRES_FC\\n#define POSRES_FC %.2f\\n#endif\"",
        "'PosResForce'",
        "\" [ position_restraints ]\"",
        "'  %5d    1    POSRES_FC    POSRES_FC    POSRES_FC'",
        "\"#endif\"",
        "'Created coarsegrained topology'",
        "\"\\n\"",
        "'multi'",
        "\"C\"",
        "\"C\"",
        "'ForceField'",
        "\"CA\"",
        "'ForceField'",
        "'NeutralTermini'",
        "\"Qd\"",
        "\"Qa\"",
        "'ChargesAtBreaks'",
        "\"Qd\"",
        "\"Qa\"",
        "\"BB\"",
        "\"BBB\"",
        "'ForceField'",
        "\"E\"",
        "\"E\"",
        "\"E\"",
        "\"E\"",
        "'ExtendedDihedrals'",
        "'ForceField'",
        "'short'",
        "\"%s(%s)-%s(%s) 1-3\"",
        "\"Elastic short\"",
        "'ForceField'",
        "'short'",
        "\"%s(%s)-%s(%s) 2-4\"",
        "\"Elastic short\"",
        "'ForceField'",
        "'long'",
        "\"%s(%s)-%s(%s) 1-4\"",
        "\"Elastic long\"",
        "\"BBBB\"",
        "'ForceField'",
        "'ForceField'",
        "\"%s(%s)-%s(%s) SBB\"",
        "\"BBS\"",
        "'ForceField'",
        "\"%s(%s)-%s(%s) SBB\"",
        "\"BBS\"",
        "'ForceField'",
        "\"Constraint\"",
        "\"SC\"",
        "\"SC\"",
        "\"SC\"",
        "\"SC\"",
        "'ForceField'",
        "'ForceField'",
        "'D'",
        "'%s(%s)'",
        "\"v\"",
        "\"v\"",
        "'ForceField'",
        "'ForceField'",
        "'SCP'",
        "'SCN'",
        "'ForceField'",
        "'all'",
        "'PosRes'",
        "'PosRes'",
        "\"Rubber band\"",
        "'multi'",
        "\"C\"",
        "\"C\"",
        "'ForceField'",
        "'ForceField'",
        "\"BB\"",
        "\"BBB\"",
        "\"BBBB\"",
        "'ForceField'",
        "\"Constraint\"",
        "\"SC\"",
        "\"SC\"",
        "\"BSC\"",
        "\"SC\"",
        "\"SC\"",
        "'%s(%s)'",
        "\"v\"",
        "\"v\"",
        "'ForceField'",
        "'all'",
        "'PosRes'",
        "'PosRes'",
        "\"-f\"",
        "\"-f\"",
        "\"GRO\"",
        "\"PDB\"",
        "\"all\"",
        "'multi'",
        "'multi'",
        "\"Several chains have identical chain identifiers in the PDB file.\"",
        "'MixedChains'",
        "\"Found %d chains:\"",
        "\"  %2d:   %s (%s), %d atoms in %d residues.\"",
        "\"Water\"",
        "\"Removing %d water molecules (chain %s).\"",
        "\"Protein\"",
        "\"Nucleic\"",
        "'RetainHETATM'",
        "\"Removing HETATM chain %s consisting of %d residues.\"",
        "'HIS'",
        "'chHIS'",
        "'HIH'",
        "'HIS'",
        "'mergeList'",
        "'linkList'",
        "'CystineCheckBonds'",
        "'CystineMaxDist2'",
        "'Total size of the system: %s residues.'",
        "''",
        "'Collagen'",
        "\"F\"",
        "\"-ss\"",
        "\"-ss\"",
        "'~'",
        "'L'",
        "' '",
        "'L'",
        "\"-ss\"",
        "\"-ss\"",
        "'Secondary structure read from command-line:\\n'",
        "\"-ss\"",
        "'Will read secondary structure from file (assuming Gromacs ssdump).'",
        "\"\"",
        "'Will read secondary structure from file (assuming DSSP output).'",
        "r\"^([ 0-9]{4}[0-9]){2}\"",
        "\"\"",
        "\"-ss\"",
        "\"-dssp\"",
        "\"dssp\"",
        "\"-dssp\"",
        "\"No secondary structure or determination method speficied. Protein chains will be set to 'COIL'.\"",
        "\"dssp\"",
        "'%s determined secondary structure:\\n'",
        "\"-x\"",
        "\"Writing coarse grained structure.\"",
        "\"-x\"",
        "\"w\"",
        "\"MODEL %8d\\n\"",
        "\"v\"",
        "\"TER\\n\"",
        "\"No mapping for coarse graining chain %s (%s); chain is skipped.\"",
        "\"ENDMDL\\n\"",
        "\"SG\"",
        "\"CYS\"",
        "\"-n\"",
        "\"Writing index file.\"",
        "\" %5d\"",
        "\" %5d\"",
        "\" %5d\"",
        "\"-n\"",
        "\"w\"",
        "\"\\n[ AA ]\\n\"",
        "\"\\n\"",
        "\" \"",
        "\"\\n[ VZ ]\\n\"",
        "\"\\n\"",
        "\" \"",
        "\"\\n[ CG ]\\n\"",
        "\"\\n\"",
        "\" \"",
        "\"-nmap\"",
        "\"Writing trajectory index file.\"",
        "\"-nmap\"",
        "\"w\"",
        "''",
        "\"SOL\"",
        "\"HOH\"",
        "\"TIP\"",
        "'[ Bead %i of residue %i ]\\n'",
        "''",
        "\"O3'\"",
        "'%s '",
        "'%i '",
        "'\\n'",
        "'-o'",
        "\"-ssc\"",
        "\" \"",
        "\"\"",
        "'(Average) Secondary structure has been determined (see head of .itp-file).'",
        "'CystineCheckBonds'",
        "\"Checking for cystine bridges, based on sulphur (SG) atoms lying closer than %.4f nm\"",
        "'CystineMaxDist2'",
        "'ForceField'",
        "\"SC1\"",
        "\"CYS\"",
        "\"SC1\"",
        "\"CYS\"",
        "'CystineMaxDist2'",
        "'linkListCG'",
        "\"SC1\"",
        "\"CYS\"",
        "\"SC1\"",
        "\"CYS\"",
        "\"Detected SS bridge between %s and %s (%f nm)\"",
        "'SeparateTop'",
        "\"+\"",
        "'-name'",
        "'linkListCG'",
        "'ForceField'",
        "\"CYS\"",
        "\"CYS\"",
        "\"Cystine\"",
        "\"Link\"",
        "'ElasticNetwork'",
        "'ForceField'",
        "'ElasticBeads'",
        "'ElasticLowerBound'",
        "'ElasticUpperBound'",
        "'ElasticDecayFactor'",
        "'ElasticDecayPower'",
        "'ElasticMaximumForce'",
        "'ElasticMinimumForce'",
        "\"Rubber band\"",
        "\"-o\"",
        "\".itp\"",
        "'w'",
        "'SeparateTop'",
        "'Written %d ITP file%s'",
        "\"s\"",
        "\"\"",
        "\"-o\"",
        "'-o'",
        "'w'",
        "'\\n'",
        "'#include \"%s.itp\"'",
        "\"Output contains %d molecules:\"",
        "\"s\"",
        "\" \"",
        "\" \"",
        "\"  %2d->  %s (chain%s %s)\"",
        "'\\n'",
        "'%s \\t 1'",
        "'ElasticNetwork'",
        "\"#define RUBBER_BANDS\"",
        "\"\"",
        "\"-f\"",
        "\"-f\"",
        "\"stdin\"",
        "'Written topology files'",
        "'ForceField'",
        "\"\\n\\tThere you are. One MARTINI. Shaken, not stirred.\\n\"",
        "\"\\n\"",
        "\"\\n%80s\"",
        "\"--\"",
        "\"\\n\"",
        "'__main__'"
    ],
    "variables": [
        "version",
        "authors",
        "notes",
        "ff",
        "name",
        "charges",
        "bbdef",
        "bbtyp",
        "bbldef",
        "bbkb",
        "bbltyp",
        "bbkbtyp",
        "bbadef",
        "bbka",
        "bbatyp",
        "bbkatyp",
        "bbddef",
        "bbkd",
        "bbdmul",
        "bbdtyp",
        "bbkdtyp",
        "ca2bb",
        "bbsangle",
        "ebonds",
        "sidechains",
        "UseBBSAngles",
        "UseBBBBDihedrals",
        "polar",
        "charged",
        "mass_charge",
        "connectivity",
        "special",
        "ElasticNetwork",
        "EBondType",
        "bbBeadDictD",
        "bbBeadDictS",
        "bbBondDictD",
        "bbBondDictS",
        "bbAngleDictD",
        "bbAngleDictS",
        "bbDihedDictD",
        "bbDihedDictS",
        "ff",
        "name",
        "charges",
        "bbdef",
        "bbtyp",
        "bbldef",
        "bbkb",
        "bbltyp",
        "bbkbtyp",
        "bbadef",
        "bbka",
        "bbatyp",
        "bbkatyp",
        "bbddef",
        "bbkd",
        "bbdmul",
        "bbdtyp",
        "bbkdtyp",
        "ca2bb",
        "bbsangle",
        "ebonds",
        "sidechains",
        "UseBBSAngles",
        "UseBBBBDihedrals",
        "polar",
        "charged",
        "mass_charge",
        "connectivity",
        "special",
        "ElasticNetwork",
        "EBondType",
        "bbBeadDictD",
        "bbBeadDictS",
        "bbBondDictD",
        "bbBondDictS",
        "bbAngleDictD",
        "bbAngleDictS",
        "bbDihedDictD",
        "bbDihedDictS",
        "b1",
        "b2",
        "a",
        "ff",
        "name",
        "charges",
        "bbdef",
        "bbtyp",
        "bbldef",
        "bbkb",
        "bbltyp",
        "bbkbtyp",
        "bbadef",
        "bbka",
        "bbatyp",
        "bbkatyp",
        "bbddef",
        "bbkd",
        "bbdmul",
        "bbdtyp",
        "bbkdtyp",
        "ca2bb",
        "bbsangle",
        "ebonds",
        "sidechains",
        "UseBBSAngles",
        "UseBBBBDihedrals",
        "polar",
        "charged",
        "mass_charge",
        "connectivity",
        "special",
        "ElasticNetwork",
        "EBondType",
        "bbBeadDictD",
        "bbBeadDictS",
        "bbBondDictD",
        "bbBondDictS",
        "bbAngleDictD",
        "bbAngleDictS",
        "bbDihedDictD",
        "bbDihedDictS",
        "ff",
        "name",
        "charges",
        "bbdef",
        "bbtyp",
        "bbldef",
        "bbkb",
        "bbltyp",
        "bbkbtyp",
        "bbadef",
        "bbka",
        "bbatyp",
        "bbkatyp",
        "bbddef",
        "bbkd",
        "bbdmul",
        "bbdtyp",
        "bbkdtyp",
        "ca2bb",
        "bbsangle",
        "ebonds",
        "sidechains",
        "UseBBSAngles",
        "UseBBBBDihedrals",
        "polar",
        "charged",
        "mass_charge",
        "connectivity",
        "special",
        "ElasticNetwork",
        "EBondType",
        "bbBeadDictD",
        "bbBeadDictS",
        "bbBondDictD",
        "bbBondDictS",
        "bbAngleDictD",
        "bbAngleDictS",
        "bbDihedDictD",
        "bbDihedDictS",
        "b1",
        "b2",
        "a",
        "ff",
        "name",
        "charges",
        "bbdef",
        "bbtyp",
        "bbldef",
        "bbkb",
        "bbltyp",
        "bbkbtyp",
        "bbadef",
        "bbka",
        "bbatyp",
        "bbkatyp",
        "bbddef",
        "bbkd",
        "bbdmul",
        "bbdtyp",
        "bbkdtyp",
        "ca2bb",
        "bbsangle",
        "ebonds",
        "sidechains",
        "UseBBSAngles",
        "UseBBBBDihedrals",
        "polar",
        "charged",
        "mass_charge",
        "connectivity",
        "special",
        "ElasticNetwork",
        "EBondType",
        "bbBeadDictD",
        "bbBeadDictS",
        "bbBondDictD",
        "bbBondDictS",
        "bbAngleDictD",
        "bbAngleDictS",
        "bbDihedDictD",
        "bbDihedDictS",
        "ff",
        "name",
        "charges",
        "bbdef",
        "bbtyp",
        "bbldef",
        "bbkb",
        "bbltyp",
        "bbkbtyp",
        "bbadef",
        "bbka",
        "bbatyp",
        "bbkatyp",
        "bbddef",
        "bbkd",
        "bbdmul",
        "bbdtyp",
        "bbkdtyp",
        "ca2bb",
        "bbsangle",
        "ebonds",
        "sidechains",
        "UseBBSAngles",
        "UseBBBBDihedrals",
        "polar",
        "charged",
        "mass_charge",
        "connectivity",
        "special",
        "ElasticNetwork",
        "EBondType",
        "bbBeadDictD",
        "bbBeadDictS",
        "bbBondDictD",
        "bbBondDictS",
        "bbAngleDictD",
        "bbAngleDictS",
        "bbDihedDictD",
        "bbDihedDictS",
        "b1",
        "b2",
        "a",
        "ff",
        "name",
        "charges",
        "bbdef",
        "bbtyp",
        "bbldef",
        "bbkb",
        "bbltyp",
        "bbkbtyp",
        "bbadef",
        "bbka",
        "bbatyp",
        "bbkatyp",
        "bbddef",
        "bbkd",
        "bbdmul",
        "bbdtyp",
        "bbkdtyp",
        "ca2bb",
        "bbsangle",
        "ebonds",
        "sidechains",
        "UseBBSAngles",
        "UseBBBBDihedrals",
        "polar",
        "charged",
        "mass_charge",
        "connectivity",
        "special",
        "ElasticNetwork",
        "EBondType",
        "bbBeadDictD",
        "bbBeadDictS",
        "bbBondDictD",
        "bbBondDictS",
        "bbAngleDictD",
        "bbAngleDictS",
        "bbDihedDictD",
        "bbDihedDictS",
        "b1",
        "b2",
        "a",
        "func",
        "num",
        "value",
        "description",
        "value",
        "value",
        "forcefields",
        "lists",
        "options",
        "martiniq",
        "desc",
        "a",
        "options",
        "options",
        "options",
        "ar",
        "logLevel",
        "_tmp",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "linkList",
        "linkListCG",
        "ln",
        "a",
        "b",
        "bl",
        "fc",
        "bl",
        "fc",
        "bl",
        "fc",
        "CystineCheckBonds",
        "CystineMaxDist2",
        "CystineCheckBonds",
        "CystineCheckBonds",
        "CystineMaxDist2",
        "cysA",
        "cysB",
        "constant",
        "options",
        "options",
        "options",
        "options",
        "options",
        "p",
        "q",
        "dnares3",
        "dnares1",
        "rnares3",
        "rnares1",
        "AA3",
        "AA1",
        "AA123",
        "AA321",
        "protein",
        "water",
        "lipids",
        "nucleic",
        "residueTypes",
        "bb",
        "palmitoyl1",
        "palmitoyl2",
        "oleyl1",
        "oleyl2",
        "phosphatydilethanolamine",
        "phosphatidylglycerol",
        "dna_bb",
        "mapping",
        "residue_bead_names",
        "residue_bead_names_dna",
        "names",
        "restest",
        "mass",
        "mwx",
        "ids",
        "tm",
        "p",
        "p",
        "a",
        "q",
        "p",
        "p",
        "a",
        "ss_names",
        "bbss",
        "bbss",
        "ssdefs",
        "cgss",
        "patterns",
        "pattypes",
        "ssnum",
        "ss2num",
        "programs",
        "ssd",
        "sstt",
        "sstd",
        "seq",
        "seq",
        "ss",
        "sep",
        "typ",
        "typ",
        "typ",
        "ssdfile",
        "p",
        "p",
        "atom",
        "data",
        "main",
        "ss",
        "main",
        "ssDetermination",
        "u2",
        "bi",
        "xi",
        "d2",
        "dij",
        "fscl",
        "d2r",
        "pdbAtomLine",
        "pdbBoxLine",
        "u",
        "v",
        "w",
        "nu",
        "nv",
        "nw",
        "alpha",
        "beta",
        "gamma",
        "insc",
        "resi",
        "pdbline",
        "fa",
        "fb",
        "fc",
        "aa",
        "ab",
        "ac",
        "ca",
        "cb",
        "cg",
        "sg",
        "wx",
        "wy",
        "wz",
        "chain",
        "chain",
        "chain",
        "title",
        "atoms",
        "box",
        "title",
        "atoms",
        "box",
        "box",
        "groline",
        "b",
        "constant",
        "title",
        "natoms",
        "natoms",
        "atoms",
        "box",
        "choice",
        "choice",
        "s",
        "s",
        "s",
        "x",
        "residue",
        "residue",
        "bb",
        "bb",
        "rla",
        "crd",
        "v",
        "norm_v",
        "vn",
        "m",
        "newName",
        "newBead",
        "chainIndex",
        "chainID",
        "merges",
        "dct",
        "merges",
        "pairs",
        "d2",
        "merges",
        "merges",
        "order",
        "_attributes",
        "residues",
        "_atoms",
        "sequence",
        "seq",
        "ss",
        "ssclass",
        "sstypes",
        "mapping",
        "multiscale",
        "options",
        "unknowns",
        "_type",
        "natoms",
        "breaks",
        "links",
        "id",
        "_cg",
        "newchain",
        "shift",
        "newchain",
        "breaks",
        "newchain",
        "links",
        "newchain",
        "natoms",
        "newchain",
        "multiscale",
        "newchain",
        "ch_sta",
        "ch_end",
        "newchain",
        "breaks",
        "newchain",
        "links",
        "newchain",
        "multiscale",
        "newchain",
        "natoms",
        "atnm",
        "resn",
        "resi",
        "chn",
        "match",
        "match",
        "_atoms",
        "chains",
        "chainStart",
        "chainStart",
        "name",
        "ss",
        "ss",
        "atomlist",
        "_type",
        "_type",
        "_type",
        "_cg",
        "atid",
        "bb",
        "fail",
        "previous",
        "store",
        "residue",
        "ind",
        "previous",
        "store",
        "previous",
        "residue",
        "beads",
        "ids",
        "beads",
        "beads",
        "beads",
        "fail",
        "cg",
        "bb",
        "bb",
        "conect",
        "nsc",
        "atoms",
        "parameters",
        "comments",
        "category",
        "options",
        "atoms",
        "s",
        "atoms",
        "ids",
        "r",
        "ss",
        "ca",
        "atoms",
        "positionCa",
        "comments",
        "category",
        "parameters",
        "category",
        "ids",
        "r",
        "ss",
        "ca",
        "atoms",
        "positionCa",
        "comments",
        "category",
        "parameters",
        "ids",
        "r",
        "ss",
        "ca",
        "atoms",
        "positionCa",
        "comments",
        "category",
        "parameters",
        "ids",
        "r",
        "ss",
        "ca",
        "atoms",
        "positionCa",
        "comments",
        "category",
        "parameters",
        "ids",
        "r",
        "ss",
        "ca",
        "atoms",
        "positionCa",
        "comments",
        "category",
        "parameters",
        "parameters",
        "parameters",
        "parameters",
        "name",
        "nrexcl",
        "atoms",
        "vsites",
        "exclusions",
        "bonds",
        "angles",
        "dihedrals",
        "impropers",
        "constraints",
        "posres",
        "sequence",
        "secstruc",
        "mapping",
        "natoms",
        "multiscale",
        "options",
        "options",
        "name",
        "other",
        "shift",
        "last",
        "atom",
        "other",
        "fs8",
        "fs9",
        "vsites",
        "exclusions",
        "bonds",
        "bonds",
        "bonds",
        "bonds",
        "bonds",
        "bonds",
        "bonds",
        "shift",
        "chain",
        "links",
        "breaks",
        "mapping",
        "multi",
        "secstruc",
        "sequence",
        "multiscale",
        "shift",
        "chain",
        "secstruc",
        "chain",
        "secstruc",
        "sc",
        "startAtom",
        "startResi",
        "bbid",
        "positionCa",
        "resid",
        "seqss",
        "bb",
        "bb",
        "bb",
        "bb",
        "i",
        "bb",
        "frg",
        "quadruples",
        "id",
        "rn",
        "ss",
        "ca",
        "dihed",
        "atid",
        "scatoms",
        "bon_par",
        "ang_par",
        "dih_par",
        "vsite_par",
        "bon_con",
        "ang_con",
        "dih_con",
        "vsite_con",
        "counter",
        "atype",
        "aname",
        "M",
        "Q",
        "aname",
        "rubberList",
        "shift",
        "chain",
        "links",
        "breaks",
        "mapping",
        "multi",
        "secstruc",
        "sequence",
        "multiscale",
        "shift",
        "chain",
        "secstruc",
        "chain",
        "secstruc",
        "sc",
        "startAtom",
        "startResi",
        "bbid",
        "bbid1",
        "resid",
        "seqss",
        "bb",
        "bb3",
        "frg",
        "frg",
        "quadruples",
        "id",
        "rn",
        "ss",
        "ca",
        "dihed",
        "atid",
        "resid3",
        "sequence3",
        "sc3",
        "secstruc3",
        "count",
        "scatoms",
        "bon_par",
        "ang_par",
        "dih_par",
        "imp_par",
        "vsite_par",
        "bon_con",
        "ang_con",
        "dih_con",
        "imp_con",
        "vsite_con",
        "counter",
        "bbbset",
        "atype",
        "aname",
        "inStream",
        "fileType",
        "frameIterator",
        "frameIterator",
        "model",
        "cgOutPDB",
        "ssTotal",
        "cysteines",
        "chains",
        "residuelist",
        "broken",
        "chains",
        "chains",
        "chain",
        "multiscale",
        "demixedChains",
        "chains",
        "n",
        "keep",
        "chains",
        "choices",
        "choice",
        "i",
        "order",
        "merge",
        "seqlength",
        "ss",
        "ss",
        "ss",
        "ssfile",
        "ss",
        "pss",
        "ss",
        "sstmp",
        "ln",
        "sstmp",
        "method",
        "executable",
        "method",
        "executable",
        "cgOutPDB",
        "atid",
        "ci",
        "insc",
        "coarseGrained",
        "insc",
        "name",
        "cyslist",
        "NAA",
        "NVZ",
        "NCG",
        "atid",
        "ci",
        "coarseGrained",
        "outNDX",
        "atid",
        "outNDX",
        "o3_shift",
        "nra",
        "names",
        "line",
        "o3_shift",
        "ssTotal",
        "ssAver",
        "si",
        "i",
        "si",
        "ssAver",
        "ssAver",
        "cyscoord",
        "cysteines",
        "bl",
        "kb",
        "rlc",
        "d2",
        "a",
        "b",
        "a",
        "b",
        "molecules",
        "itp",
        "moleculeTypes",
        "mol",
        "name",
        "moleculeTypes",
        "mol",
        "top",
        "mcg",
        "coords",
        "mcg",
        "bondlength",
        "forceconst",
        "atomA",
        "atomB",
        "cat",
        "rubberType",
        "rubberList",
        "destination",
        "moleculeTypes",
        "top",
        "itps",
        "n",
        "chainInfo",
        "molecules",
        "useRubber",
        "Q",
        "args",
        "options",
        "lists",
        "options"
    ],
    "comments": [
        "!/usr/bin/env python",
        "EDITABLE SECTIONS ARE MARKED WITH #@#",
        "",
        "This program has grown to be pretty complex.",
        "The routines have been organized in different files.",
        "For working versions, all files can be incorporated by using the option -cat.",
        "",
        "Index of the program files:",
        "",
        "1. Options and documentation                             @DOC.py",
        "2. Description, options and command line parsing         @CMD.py",
        "3. Helper functions and macros                           @FUNC.py",
        "4. Finegrained to coarsegrained mapping                  @MAP.py",
        "5. Secondary structure determination and interpretation  @SS.py",
        "6. Force field parameters (MARTINI/ELNEDYN)              @FF.py",
        "7. Elastic network                                       @ELN.py",
        "8. Structure I/O                                         @IO.py",
        "9. Topology generation                                   @TOP.py",
        "10. Main                                                  @MAIN.py",
        "11. Web-interface\t\t                \t\t\t     @WEB.py",
        "",
        "",
        "6 # FORCE FIELD PARAMETERS ##  -> @FF <-",
        "",
        "parameters are defined here for the following (protein) forcefields:",
        "Charged types:",
        "@#",
        "----+---------------------+",
        "A | BACKBONE PARAMETERS |",
        "----+---------------------+",
        "",
        "bbss  lists the one letter secondary structure code",
        "bbdef lists the corresponding default backbone beads",
        "bbtyp lists the corresponding residue specific backbone beads",
        "",
        "bbd   lists the structure specific backbone bond lengths",
        "bbkb  lists the corresponding bond force constants",
        "",
        "bba   lists the structure specific angles",
        "bbka  lists the corresponding angle force constants",
        "",
        "bbd   lists the structure specific dihedral angles",
        "bbkd  lists the corresponding force constants",
        "",
        "-=NOTE=-",
        "if the secondary structure types differ between bonded atoms",
        "the bond is assigned the lowest corresponding force constant",
        "",
        "-=NOTE=-",
        "if proline is anywhere in the helix, the BBB angle changes for",
        "all residues",
        "",
        "",
        "BEADS ##                                                                          #",
        "F     E     H     1     2     3     T     S     C    # SS one letter",
        "Default beads   #@#",
        "#@#",
        "ALA specific    #@#",
        "PRO specific    #@#",
        "HYP specific    #@#",
        "#@#",
        "BONDS ##                                                                          #",
        "BB bond lengths #@#",
        "BB bond kB      #@#",
        "#@#",
        "#@#",
        "ANGLES ##                                                                         #",
        "BBB angles      #@#",
        "BBB angle kB    #@#",
        "#@#",
        "PRO specific    #@#",
        "PRO specific    #@#",
        "#@#",
        "#@#",
        "PRO specific    #@#",
        "PRO specific    #@#",
        "#@#",
        "DIHEDRALS ##                                                                      #",
        "BBBB dihedrals  #@#",
        "BBBB kB         #@#",
        "BBBB mltplcty   #@#",
        "#@#",
        "#@#",
        "",
        "",
        "Some Forcefields use the Ca position to position the BB-bead (me like!)",
        "BBS angle, equal for all ss types",
        "Connects BB(i-1),BB(i),SC(i), except for first residue: BB(i+1),BB(i),SC(i)",
        "ANGLE   Ka",
        "@#",
        "Bonds for extended structures (more stable than using dihedrals)",
        "LENGTH FORCE",
        "@#",
        "@#",
        "@#",
        "@#",
        "----+-----------------------+",
        "B | SIDE CHAIN PARAMETERS |",
        "----+-----------------------+",
        "Sidechain parameters for Elnedyn. (read from cg-2.1.dat).",
        "For HIS the order of bonds is changed and a bond with fc=0 is added.",
        "In the elnedyn2, TRP has an extra, cross-ring constraint",
        "RES#   BEADS                      BONDS                                                                                      ANGLES                          DIHEDRALS  V-SITES",
        "Not all (eg Elnedyn) forcefields use backbone-backbone-sidechain angles and BBBB-dihedrals.",
        "Martini 2.2p has polar and charged residues with seperate charges.",
        "If masses or charged diverge from standard (45/72 and -/+1) they are defined here.",
        "RES   MASS               CHARGE",
        "Defines the connectivity between between beads",
        "The polar sidechains have charged dummy beads, connected with a constraint",
        "The charged sidechains have a charged dummy bead.",
        "RES       BONDS                                              ANGLES                            DIHEDRALS       V-SITE",
        "----+----------------+",
        "C | SPECIAL BONDS  |",
        "----+----------------+",
        "Used for sulfur bridges",
        "ATOM 1         ATOM 2          BOND LENGTH   FORCE CONSTANT",
        "By default use an elastic network",
        "Elastic networks bond shouldn't lead to exclusions (type 6)",
        "But Elnedyn has been parametrized with type 1.",
        "----+----------------+",
        "D | INTERNAL STUFF |",
        "----+----------------+",
        "BACKBONE BEAD TYPE ##",
        "Dictionary of default bead types (*D)",
        "Dictionary of dictionaries of types for specific residues (*S)",
        "BB BOND TYPE ##",
        "Dictionary of default abond types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "This is tricky to read, but it gives the right bondlength/force constant",
        "BBB ANGLE TYPE ##",
        "Dictionary of default angle types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "BBBB DIHEDRAL TYPE ##",
        "Dictionary of default dihedral types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "The following function returns the backbone bead for a given residue and",
        "secondary structure type.",
        "1. Look up the proper dictionary for the residue",
        "2. Get the proper type from it for the secondary structure",
        "If the residue is not in the dictionary of specials, use the default",
        "If the secondary structure is not listed (in the residue specific",
        "dictionary) revert to the default.",
        "For Elnedyn we need something else to get the bond length (much simpler due to Ca position BB's)",
        "The 150000 forceconstant gave an error message, turning to constraints would be better.",
        "Elnedyn takes angles from structure, with fc=40",
        "logging.info('- Backbone-Backbone bonds are constraints in stead of high force constant bonds.')",
        "",
        "6 # FORCE FIELD PARAMETERS ##  -> @FF <-",
        "",
        "parameters are defined here for the following (protein) forcefields:",
        "Charged types:",
        "@#",
        "----+---------------------+",
        "A | BACKBONE PARAMETERS |",
        "----+---------------------+",
        "",
        "bbss  lists the one letter secondary structure code",
        "bbdef lists the corresponding default backbone beads",
        "bbtyp lists the corresponding residue specific backbone beads",
        "",
        "bbd   lists the structure specific backbone bond lengths",
        "bbkb  lists the corresponding bond force constants",
        "",
        "bba   lists the structure specific angles",
        "bbka  lists the corresponding angle force constants",
        "",
        "bbd   lists the structure specific dihedral angles",
        "bbkd  lists the corresponding force constants",
        "",
        "-=NOTE=-",
        "if the secondary structure types differ between bonded atoms",
        "the bond is assigned the lowest corresponding force constant",
        "",
        "-=NOTE=-",
        "if proline is anywhere in the helix, the BBB angle changes for",
        "all residues",
        "",
        "",
        "BEADS ##                                                                         #",
        "F     E     H     1     2     3     T     S     C        # SS one letter",
        "Default beads   #@#",
        "#@#",
        "ALA specific    #@#",
        "PRO specific    #@#",
        "HYP specific    #@#",
        "#@#",
        "BONDS ##                                                                         #",
        "BB bond lengths #@#",
        "BB bond kB      #@#",
        "#@#",
        "#@#",
        "ANGLES ##                                                                        #",
        "BBB angles      #@#",
        "BBB angle kB    #@#",
        "#@#",
        "PRO specific    #@#",
        "PRO specific    #@#",
        "#@#",
        "#@#",
        "PRO specific    #@#",
        "PRO specific    #@#",
        "#@#",
        "DIHEDRALS ##                                                                     #",
        "BBBB dihedrals  #@#",
        "BBBB kB         #@#",
        "BBBB mltplcty   #@#",
        "#@#",
        "#@#",
        "",
        "",
        "Some Forcefields use the Ca position to position the BB-bead (me like!)",
        "martini 2.1 doesn't",
        "BBS angle, equal for all ss types",
        "Connects BB(i-1),BB(i),SC(i), except for first residue: BB(i+1),BB(i),SC(i)",
        "ANGLE   Ka",
        "@#",
        "Bonds for extended structures (more stable than using dihedrals)",
        "LENGTH FORCE",
        "@#",
        "@#",
        "@#",
        "@#",
        "----+-----------------------+",
        "B | SIDE CHAIN PARAMETERS |",
        "----+-----------------------+",
        "To be compatible with Elnedyn, all parameters are explicitly defined, even if they are double.",
        "RES#   BEADS                   BONDS                                                   ANGLES              DIHEDRALS",
        "BB-SC          SC-SC                                        BB-SC-SC  SC-SC-SC",
        "Not all (eg Elnedyn) forcefields use backbone-backbone-sidechain angles and BBBB-dihedrals.",
        "Martini 2.2p has polar and charged residues with seperate charges.",
        "If masses or charged diverge from standard (45/72 and -/+1) they are defined here.",
        "RES   MASS               CHARGE",
        "Defines the connectivity between between beads",
        "RES       BONDS                                   ANGLES             DIHEDRALS              V-SITE",
        "----+----------------+",
        "C | SPECIAL BONDS  |",
        "----+----------------+",
        "Used for sulfur bridges",
        "ATOM 1         ATOM 2          BOND LENGTH   FORCE CONSTANT",
        "By default use an elastic network",
        "Elastic networks bond shouldn't lead to exclusions (type 6)",
        "But Elnedyn has been parametrized with type 1.",
        "----+----------------+",
        "D | INTERNAL STUFF |",
        "----+----------------+",
        "BACKBONE BEAD TYPE ##",
        "Dictionary of default bead types (*D)",
        "Dictionary of dictionaries of types for specific residues (*S)",
        "BB BOND TYPE ##",
        "Dictionary of default abond types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "This is tricky to read, but it gives the right bondlength/force constant",
        "BBB ANGLE TYPE ##",
        "Dictionary of default angle types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "BBBB DIHEDRAL TYPE ##",
        "Dictionary of default dihedral types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "The following function returns the backbone bead for a given residue and",
        "secondary structure type.",
        "1. Look up the proper dictionary for the residue",
        "2. Get the proper type from it for the secondary structure",
        "If the residue is not in the dictionary of specials, use the default",
        "If the secondary structure is not listed (in the residue specific",
        "dictionary) revert to the default.",
        "Retrieve parameters for each residue from table defined above",
        "Determine which parameters to use for the bond",
        "PRO in helices is dominant",
        "Retrieve parameters for each residue from table defined above",
        "Sort according to force constant",
        "This selects the set with the smallest force constant and the smallest angle",
        "",
        "6 # FORCE FIELD PARAMETERS ##  -> @FF <-",
        "",
        "parameters are defined here for the following (protein) forcefields:",
        "Charged types:",
        "@#",
        "----+---------------------+",
        "A | BACKBONE PARAMETERS |",
        "----+---------------------+",
        "",
        "bbss  lists the one letter secondary structure code",
        "bbdef lists the corresponding default backbone beads",
        "bbtyp lists the corresponding residue specific backbone beads",
        "",
        "bbd   lists the structure specific backbone bond lengths",
        "bbkb  lists the corresponding bond force constants",
        "",
        "bba   lists the structure specific angles",
        "bbka  lists the corresponding angle force constants",
        "",
        "bbd   lists the structure specific dihedral angles",
        "bbkd  lists the corresponding force constants",
        "",
        "-=NOTE=-",
        "if the secondary structure types differ between bonded atoms",
        "the bond is assigned the lowest corresponding force constant",
        "",
        "-=NOTE=-",
        "if proline is anywhere in the helix, the BBB angle changes for",
        "all residues",
        "",
        "",
        "BEADS ##                                                                          #",
        "F     E     H     1     2     3     T     S     C    # SS one letter",
        "Default beads   #@#",
        "#@#",
        "ALA specific    #@#",
        "PRO specific    #@#",
        "HYP specific    #@#",
        "#@#",
        "BONDS ##                                                                          #",
        "BB bond lengths #@#",
        "BB bond kB      #@#",
        "#@#",
        "#@#",
        "ANGLES ##                                                                         #",
        "BBB angles      #@#",
        "BBB angle kB    #@#",
        "#@#",
        "PRO specific    #@#",
        "PRO specific    #@#",
        "#@#",
        "#@#",
        "PRO specific    #@#",
        "PRO specific    #@#",
        "#@#",
        "DIHEDRALS ##                                                                      #",
        "BBBB dihedrals  #@#",
        "BBBB kB         #@#",
        "BBBB mltplcty   #@#",
        "#@#",
        "#@#",
        "",
        "",
        "Some Forcefields use the Ca position to position the BB-bead (me like!)",
        "BBS angle, equal for all ss types",
        "Connects BB(i-1),BB(i),SC(i), except for first residue: BB(i+1),BB(i),SC(i)",
        "ANGLE   Ka",
        "@#",
        "Bonds for extended structures (more stable than using dihedrals)",
        "LENGTH FORCE",
        "@#",
        "@#",
        "@#",
        "@#",
        "----+-----------------------+",
        "B | SIDE CHAIN PARAMETERS |",
        "----+-----------------------+",
        "Sidechain parameters for Elnedyn. (read from cg-2.1.dat).",
        "For HIS the order of bonds is changed and a bond with fc=0 is added.",
        "In the elnedyn2, TRP has an extra, cross-ring constraint",
        "RES#   BEADS                      BONDS                                                                    ANGLES                          DIHEDRALS",
        "Not all (eg Elnedyn) forcefields use backbone-backbone-sidechain angles and BBBB-dihedrals.",
        "Martini 2.2p has polar and charged residues with seperate charges.",
        "If masses or charged diverge from standard (45/72 and -/+1) they are defined here.",
        "RES   MASS               CHARGE",
        "Defines the connectivity between between beads",
        "Connectivity records for Elnedyn (read from cg-2.1.dat).",
        "For HIS the order of bonds is changed and a bond with fc=0 is added.",
        "RES       BONDS                                     ANGLES                            DIHEDRALS       V-SITE",
        "----+----------------+",
        "C | SPECIAL BONDS  |",
        "----+----------------+",
        "Used for sulfur bridges",
        "ATOM 1         ATOM 2          BOND LENGTH   FORCE CONSTANT",
        "By default use an elastic network",
        "Elastic networks bond shouldn't lead to exclusions (type 6)",
        "But Elnedyn has been parametrized with type 1.",
        "----+----------------+",
        "D | INTERNAL STUFF |",
        "----+----------------+",
        "BACKBONE BEAD TYPE ##",
        "Dictionary of default bead types (*D)",
        "Dictionary of dictionaries of types for specific residues (*S)",
        "BB BOND TYPE ##",
        "Dictionary of default abond types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "This is tricky to read, but it gives the right bondlength/force constant",
        "BBB ANGLE TYPE ##",
        "Dictionary of default angle types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "BBBB DIHEDRAL TYPE ##",
        "Dictionary of default dihedral types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "The following function returns the backbone bead for a given residue and",
        "secondary structure type.",
        "1. Look up the proper dictionary for the residue",
        "2. Get the proper type from it for the secondary structure",
        "If the residue is not in the dictionary of specials, use the default",
        "If the secondary structure is not listed (in the residue specific",
        "dictionary) revert to the default.",
        "For Elnedyn we need something else to get the bond length (much simpler due to Ca position BB's)",
        "The 150000 forceconstant gave an error message, turning to constraints would be better.",
        "Elnedyn takes angles from structure, with fc=40",
        "",
        "6 # FORCE FIELD PARAMETERS ##  -> @FF <-",
        "",
        "parameters are defined here for the following (protein) forcefields:",
        "Charged types:",
        "@#",
        "----+---------------------+",
        "A | BACKBONE PARAMETERS |",
        "----+---------------------+",
        "",
        "bbss  lists the one letter secondary structure code",
        "bbdef lists the corresponding default backbone beads",
        "bbtyp lists the corresponding residue specific backbone beads",
        "",
        "bbd   lists the structure specific backbone bond lengths",
        "bbkb  lists the corresponding bond force constants",
        "",
        "bba   lists the structure specific angles",
        "bbka  lists the corresponding angle force constants",
        "",
        "bbd   lists the structure specific dihedral angles",
        "bbkd  lists the corresponding force constants",
        "",
        "-=NOTE=-",
        "if the secondary structure types differ between bonded atoms",
        "the bond is assigned the lowest corresponding force constant",
        "",
        "-=NOTE=-",
        "if proline is anywhere in the helix, the BBB angle changes for",
        "all residues",
        "",
        "",
        "BEADS ##                                                                         #",
        "F     E     H     1     2     3     T     S     C        # SS one letter",
        "Default beads   #@#",
        "#@#",
        "ALA specific    #@#",
        "PRO specific    #@#",
        "HYP specific    #@#",
        "#@#",
        "BONDS ##                                                                         #",
        "BB bond lengths #@#",
        "BB bond kB      #@#",
        "#@#",
        "#@#",
        "ANGLES ##                                                                        #",
        "BBB angles      #@#",
        "BBB angle kB    #@#",
        "#@#",
        "PRO specific    #@#",
        "PRO specific    #@#",
        "#@#",
        "#@#",
        "PRO specific    #@#",
        "PRO specific    #@#",
        "#@#",
        "DIHEDRALS ##                                                                     #",
        "BBBB dihedrals  #@#",
        "BBBB kB         #@#",
        "BBBB mltplcty   #@#",
        "#@#",
        "#@#",
        "",
        "",
        "Some Forcefields use the Ca position to position the BB-bead (me like!)",
        "martini 2.1 doesn't",
        "BBS angle, equal for all ss types",
        "Connects BB(i-1),BB(i),SC(i), except for first residue: BB(i+1),BB(i),SC(i)",
        "ANGLE   Ka",
        "@#",
        "Bonds for extended structures (more stable than using dihedrals)",
        "LENGTH FORCE",
        "@#",
        "@#",
        "@#",
        "@#",
        "----+-----------------------+",
        "B | SIDE CHAIN PARAMETERS |",
        "----+-----------------------+",
        "To be compatible with Elnedyn, all parameters are explicitly defined, even if they are double.",
        "RES#   BEADS                   BONDS                                                   ANGLES              DIHEDRALS",
        "BB-SC          SC-SC                                        BB-SC-SC  SC-SC-SC",
        "Not all (eg Elnedyn) forcefields use backbone-backbone-sidechain angles and BBBB-dihedrals.",
        "Martini 2.2p has polar and charged residues with seperate charges.",
        "If masses or charged diverge from standard (45/72 and -/+1) they are defined here.",
        "RES   MASS               CHARGE",
        "Defines the connectivity between between beads",
        "RES       BONDS                                   ANGLES             DIHEDRALS              V-SITE",
        "----+----------------+",
        "C | SPECIAL BONDS  |",
        "----+----------------+",
        "Used for sulfur bridges",
        "ATOM 1         ATOM 2          BOND LENGTH   FORCE CONSTANT",
        "By default use an elastic network",
        "Elastic networks bond shouldn't lead to exclusions (type 6)",
        "But Elnedyn has been parametrized with type 1.",
        "----+----------------+",
        "D | INTERNAL STUFF |",
        "----+----------------+",
        "BACKBONE BEAD TYPE ##",
        "Dictionary of default bead types (*D)",
        "Dictionary of dictionaries of types for specific residues (*S)",
        "BB BOND TYPE ##",
        "Dictionary of default abond types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "This is tricky to read, but it gives the right bondlength/force constant",
        "BBB ANGLE TYPE ##",
        "Dictionary of default angle types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "BBBB DIHEDRAL TYPE ##",
        "Dictionary of default dihedral types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "The following function returns the backbone bead for a given residue and",
        "secondary structure type.",
        "1. Look up the proper dictionary for the residue",
        "2. Get the proper type from it for the secondary structure",
        "If the residue is not in the dictionary of specials, use the default",
        "If the secondary structure is not listed (in the residue specific",
        "dictionary) revert to the default.",
        "Retrieve parameters for each residue from table defined above",
        "Determine which parameters to use for the bond",
        "PRO in helices is dominant",
        "Retrieve parameters for each residue from table defined above",
        "Sort according to force constant",
        "This selects the set with the smallest force constant and the smallest angle",
        "",
        "6 # FORCE FIELD PARAMETERS ##  -> @FF <-",
        "",
        "parameters are defined here for the following (protein) forcefields:",
        "Charged types:",
        "@#",
        "----+---------------------+",
        "A | BACKBONE PARAMETERS |",
        "----+---------------------+",
        "",
        "bbss  lists the one letter secondary structure code",
        "bbdef lists the corresponding default backbone beads",
        "bbtyp lists the corresponding residue specific backbone beads",
        "",
        "bbd   lists the structure specific backbone bond lengths",
        "bbkb  lists the corresponding bond force constants",
        "",
        "bba   lists the structure specific angles",
        "bbka  lists the corresponding angle force constants",
        "",
        "bbd   lists the structure specific dihedral angles",
        "bbkd  lists the corresponding force constants",
        "",
        "-=NOTE=-",
        "if the secondary structure types differ between bonded atoms",
        "the bond is assigned the lowest corresponding force constant",
        "",
        "-=NOTE=-",
        "if proline is anywhere in the helix, the BBB angle changes for",
        "all residues",
        "",
        "",
        "BEADS ##                                                                          #",
        "F     E     H     1     2     3     T     S     C    # SS one letter",
        "Default beads   #@#",
        "#@#",
        "ALA specific    #@#",
        "PRO specific    #@#",
        "HYP specific    #@#",
        "#@#",
        "BONDS ##                                                                          #",
        "BB bond lengths #@#",
        "BB bond kB      #@#",
        "#@#",
        "#@#",
        "ANGLES ##                                                                         #",
        "BBB angles      #@#",
        "BBB angle kB    #@#",
        "#@#",
        "PRO specific    #@#",
        "PRO specific    #@#",
        "#@#",
        "#@#",
        "PRO specific    #@#",
        "PRO specific    #@#",
        "#@#",
        "DIHEDRALS ##                                                                      #",
        "BBBB dihedrals  #@#",
        "BBBB kB         #@#",
        "BBBB mltplcty   #@#",
        "#@#",
        "#@#",
        "",
        "",
        "Some Forcefields use the Ca position to position the BB-bead (me like!)",
        "BBS angle, equal for all ss types",
        "Connects BB(i-1),BB(i),SC(i), except for first residue: BB(i+1),BB(i),SC(i)",
        "ANGLE   Ka",
        "@#",
        "Bonds for extended structures (more stable than using dihedrals)",
        "LENGTH FORCE",
        "@#",
        "@#",
        "@#",
        "@#",
        "----+-----------------------+",
        "B | SIDE CHAIN PARAMETERS |",
        "----+-----------------------+",
        "Sidechain parameters for Elnedyn. (read from cg-2.1.dat).",
        "For HIS the order of bonds is changed and a bond with fc=0 is added.",
        "In the elnedyn2, TRP has an extra, cross-ring constraint",
        "RES#   BEADS                      BONDS                                                                    ANGLES                          DIHEDRALS",
        "Not all (eg Elnedyn) forcefields use backbone-backbone-sidechain angles and BBBB-dihedrals.",
        "Martini 2.2p has polar and charged residues with seperate charges.",
        "If masses or charged diverge from standard (45/72 and -/+1) they are defined here.",
        "RES   MASS               CHARGE",
        "Defines the connectivity between between beads",
        "Connectivity records for Elnedyn (read from cg-2.1.dat).",
        "For HIS the order of bonds is changed and a bond with fc=0 is added.",
        "RES       BONDS                                             ANGLES                            DIHEDRALS       V-SITE",
        "----+----------------+",
        "C | SPECIAL BONDS  |",
        "----+----------------+",
        "Used for sulfur bridges",
        "ATOM 1         ATOM 2          BOND LENGTH   FORCE CONSTANT",
        "By default use an elastic network",
        "Elastic networks bond shouldn't lead to exclusions (type 6)",
        "But Elnedyn has been parametrized with type 1.",
        "----+----------------+",
        "D | INTERNAL STUFF |",
        "----+----------------+",
        "BACKBONE BEAD TYPE ##",
        "Dictionary of default bead types (*D)",
        "Dictionary of dictionaries of types for specific residues (*S)",
        "BB BOND TYPE ##",
        "Dictionary of default abond types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "This is tricky to read, but it gives the right bondlength/force constant",
        "BBB ANGLE TYPE ##",
        "Dictionary of default angle types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "BBBB DIHEDRAL TYPE ##",
        "Dictionary of default dihedral types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "The following function returns the backbone bead for a given residue and",
        "secondary structure type.",
        "1. Look up the proper dictionary for the residue",
        "2. Get the proper type from it for the secondary structure",
        "If the residue is not in the dictionary of specials, use the default",
        "If the secondary structure is not listed (in the residue specific",
        "dictionary) revert to the default.",
        "For Elnedyn we need something else to get the bond length (much simpler due to Ca position BB's)",
        "The 150000 forceconstant gave an error message, turning to constraints would be better.",
        "Elnedyn takes angles from structure, with fc=40",
        "logging.info('- Backbone-Backbone bonds are constraints in stead of high force constant bonds.')",
        "",
        "6 # FORCE FIELD PARAMETERS ##  -> @FF <-",
        "",
        "New martini 2.2 parameters.",
        "Changed:",
        "Unstructured Pro backbone bead",
        "Proline side chains",
        "Phe sidechain",
        "Trp sidechain",
        "Helix BB-bonds to constraint",
        "parameters are defined here for the following (protein) forcefields:",
        "Charged types:",
        "@#",
        "----+---------------------+",
        "A | BACKBONE PARAMETERS |",
        "----+---------------------+",
        "",
        "bbss  lists the one letter secondary structure code",
        "bbdef lists the corresponding default backbone beads",
        "bbtyp lists the corresponding residue specific backbone beads",
        "",
        "bbd   lists the structure specific backbone bond lengths",
        "bbkb  lists the corresponding bond force constants",
        "",
        "bba   lists the structure specific angles",
        "bbka  lists the corresponding angle force constants",
        "",
        "bbd   lists the structure specific dihedral angles",
        "bbkd  lists the corresponding force constants",
        "",
        "-=NOTE=-",
        "if the secondary structure types differ between bonded atoms",
        "the bond is assigned the lowest corresponding force constant",
        "",
        "-=NOTE=-",
        "if proline is anywhere in the helix, the BBB angle changes for",
        "all residues",
        "",
        "",
        "BEADS ##                                                                         #",
        "F     E     H     1     2     3     T     S     C    # SS one letter",
        "Default beads   #@#",
        "#@#",
        "ALA specific    #@#",
        "PRO specific    #@#",
        "HYP specific    #@#",
        "#@#",
        "BONDS ##                                                                         #",
        "BB bond lengths #@#",
        "BB bond kB      #@#",
        "#@#",
        "#@#",
        "ANGLES ##                                                                        #",
        "BBB angles      #@#",
        "BBB angle kB    #@#",
        "#@#",
        "PRO specific    #@#",
        "PRO specific    #@#",
        "#@#",
        "#@#",
        "PRO specific    #@#",
        "PRO specific    #@#",
        "#@#",
        "DIHEDRALS ##                                                                     #",
        "BBBB dihedrals  #@#",
        "BBBB kB         #@#",
        "BBBB mltplcty   #@#",
        "#@#",
        "#@#",
        "",
        "",
        "Some Forcefields use the Ca position to position the BB-bead (me like!)",
        "martini 2.1 doesn't",
        "BBS angle, equal for all ss types",
        "Connects BB(i-1),BB(i),SC(i), except for first residue: BB(i+1),BB(i),SC(i)",
        "ANGLE   Ka",
        "@#",
        "Bonds for extended structures (more stable than using dihedrals)",
        "LENGTH FORCE",
        "@#",
        "@#",
        "@#",
        "@#",
        "----+-----------------------+",
        "B | SIDE CHAIN PARAMETERS |",
        "----+-----------------------+",
        "To be compatible with Elnedyn, all parameters are explicitly defined, even if they are double.",
        "RES#   BEADS                   BONDS                                                   ANGLES              DIHEDRALS",
        "BB-SC          SC-SC                                        BB-SC-SC  SC-SC-SC",
        "Not all (eg Elnedyn) forcefields use backbone-backbone-sidechain angles and BBBB-dihedrals.",
        "Martini 2.2p has polar and charged residues with seperate charges.",
        "If masses or charged diverge from standard (45/72 and -/+1) they are defined here.",
        "RES   MASS               CHARGE",
        "Defines the connectivity between between beads",
        "RES       BONDS                                   ANGLES             DIHEDRALS              V-SITE",
        "----+----------------+",
        "C | SPECIAL BONDS  |",
        "----+----------------+",
        "Used for sulfur bridges",
        "ATOM 1         ATOM 2          BOND LENGTH   FORCE CONSTANT",
        "By default use an elastic network",
        "Elastic networks bond shouldn't lead to exclusions (type 6)",
        "But Elnedyn has been parametrized with type 1.",
        "----+----------------+",
        "D | INTERNAL STUFF |",
        "----+----------------+",
        "BACKBONE BEAD TYPE ##",
        "Dictionary of default bead types (*D)",
        "Dictionary of dictionaries of types for specific residues (*S)",
        "BB BOND TYPE ##",
        "Dictionary of default abond types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "This is tricky to read, but it gives the right bondlength/force constant",
        "BBB ANGLE TYPE ##",
        "Dictionary of default angle types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "BBBB DIHEDRAL TYPE ##",
        "Dictionary of default dihedral types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "The following function returns the backbone bead for a given residue and",
        "secondary structure type.",
        "1. Look up the proper dictionary for the residue",
        "2. Get the proper type from it for the secondary structure",
        "If the residue is not in the dictionary of specials, use the default",
        "If the secondary structure is not listed (in the residue specific",
        "dictionary) revert to the default.",
        "Retrieve parameters for each residue from table defined above",
        "Determine which parameters to use for the bond",
        "PRO in helices is dominant",
        "Retrieve parameters for each residue from table defined above",
        "Sort according to force constant",
        "This selects the set with the smallest force constant and the smallest angle",
        "",
        "6 # FORCE FIELD PARAMETERS ##  -> @FF <-",
        "",
        "New martini 2.2p parameters.",
        "Changed:",
        "Unstructured Pro backbone bead",
        "Proline side chains",
        "Phe sidechain",
        "Trp sidechain",
        "Polar beads",
        "Helix BB-bonds to constraint",
        "Todo:",
        "Helix BB-bond length",
        "parameters are defined here for the following (protein) forcefields:",
        "Charged types:",
        "@#",
        "----+---------------------+",
        "A | BACKBONE PARAMETERS |",
        "----+---------------------+",
        "",
        "bbss  lists the one letter secondary structure code",
        "bbdef lists the corresponding default backbone beads",
        "bbtyp lists the corresponding residue specific backbone beads",
        "",
        "bbd   lists the structure specific backbone bond lengths",
        "bbkb  lists the corresponding bond force constants",
        "",
        "bba   lists the structure specific angles",
        "bbka  lists the corresponding angle force constants",
        "",
        "bbd   lists the structure specific dihedral angles",
        "bbkd  lists the corresponding force constants",
        "",
        "-=NOTE=-",
        "if the secondary structure types differ between bonded atoms",
        "the bond is assigned the lowest corresponding force constant",
        "",
        "-=NOTE=-",
        "if proline is anywhere in the helix, the BBB angle changes for",
        "all residues",
        "",
        "",
        "BEADS ##                                                                         #",
        "F     E     H     1     2     3     T     S     C    # SS one letter",
        "Default beads   #@#",
        "#@#",
        "ALA specific    #@#",
        "PRO specific    #@#",
        "HYP specific    #@#",
        "#@#",
        "BONDS ##                                                                         #",
        "BB bond lengths #@#",
        "BB bond kB      #@#",
        "#@#",
        "#@#",
        "ANGLES ##                                                                        #",
        "BBB angles      #@#",
        "BBB angle kB    #@#",
        "#@#",
        "PRO specific    #@#",
        "PRO specific    #@#",
        "#@#",
        "#@#",
        "PRO specific    #@#",
        "PRO specific    #@#",
        "#@#",
        "DIHEDRALS ##                                                                     #",
        "BBBB dihedrals  #@#",
        "BBBB kB         #@#",
        "BBBB mltplcty   #@#",
        "#@#",
        "#@#",
        "",
        "",
        "Some Forcefields use the Ca position to position the BB-bead (me like!)",
        "martini 2.1 doesn't",
        "BBS angle, equal for all ss types",
        "Connects BB(i-1),BB(i),SC(i), except for first residue: BB(i+1),BB(i),SC(i)",
        "ANGLE   Ka",
        "@#",
        "Bonds for extended structures (more stable than using dihedrals)",
        "LENGTH FORCE",
        "@#",
        "@#",
        "@#",
        "@#",
        "----+-----------------------+",
        "B | SIDE CHAIN PARAMETERS |",
        "----+-----------------------+",
        "To be compatible with Elnedyn, all parameters are explicitly defined, even if they are double.",
        "RES#   BEADS                       BONDS                                                                   ANGLES                      DIHEDRALS        V-SITES",
        "BB-SC          SC-SC                                                    BB-SC-SC  SC-SC-SC",
        "Not all (eg Elnedyn) forcefields use backbone-backbone-sidechain angles and BBBB-dihedrals.",
        "Martini 2.2p has polar and charged residues with seperate charges.",
        "If masses or charged diverge from standard (45/72 and -/+1) they are defined here.",
        "RES   MASS               CHARGE",
        "RES       BONDS                                   ANGLES             DIHEDRALS              V-SITE",
        "----+----------------+",
        "C | SPECIAL BONDS  |",
        "----+----------------+",
        "Used for sulfur bridges",
        "ATOM 1         ATOM 2          BOND LENGTH   FORCE CONSTANT",
        "By default use an elastic network",
        "Elastic networks bond shouldn't lead to exclusions (type 6)",
        "But Elnedyn has been parametrized with type 1.",
        "----+----------------+",
        "D | INTERNAL STUFF |",
        "----+----------------+",
        "BACKBONE BEAD TYPE ##",
        "Dictionary of default bead types (*D)",
        "Dictionary of dictionaries of types for specific residues (*S)",
        "BB BOND TYPE ##",
        "Dictionary of default abond types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "This is tricky to read, but it gives the right bondlength/force constant",
        "BBB ANGLE TYPE ##",
        "Dictionary of default angle types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "BBBB DIHEDRAL TYPE ##",
        "Dictionary of default dihedral types (*D)",
        "Dictionary of dictionaries for specific types (*S)",
        "The following function returns the backbone bead for a given residue and",
        "secondary structure type.",
        "1. Look up the proper dictionary for the residue",
        "2. Get the proper type from it for the secondary structure",
        "If the residue is not in the dictionary of specials, use the default",
        "If the secondary structure is not listed (in the residue specific",
        "dictionary) revert to the default.",
        "Retrieve parameters for each residue from table defined above",
        "Determine which parameters to use for the bond",
        "PRO in helices is dominant",
        "Retrieve parameters for each residue from table defined above",
        "Sort according to force constant",
        "This selects the set with the smallest force constant and the smallest angle",
        "",
        "1 # OPTIONS AND DOCUMENTATION ##  -> @DOC <-",
        "",
        "This is a simple and versatily option class that allows easy",
        "definition and parsing of options.",
        "Parameters can be defined for multiple forcefields",
        "We look for them within the script...",
        "... in the local directory, ....",
        "... and in the GMXDATA dir.",
        "Lists for gathering arguments to options that can be specified",
        "multiple times on the command line.",
        "List of Help text and options.",
        "This way we can simply print this list if the user wants help.",
        "NOTE: Options marked with (+) can be given multiple times on the command line",
        "option              type number default description",
        "(\"-pymol\",    Option(str,                      1,     None, \"PyMOL executable for determining structure\")),",
        "(\"-mixed\",    Option(bool,                     0,    False, \"Allow chains of mixed type (default: False)\")),",
        "Fij = Fc exp( -a (rij - lo)**p )",
        "(\"-hetatm\",   Option(bool,                     0,    False, \"Include HETATM records from PDB file (Use with care!)\")),",
        "Martini Quotes",
        "",
        "2 # COMMAND LINE PARSING ##  -> @CMD <-",
        "",
        "Helper function to parse atom strings given on the command line:",
        "resid",
        "resname/resid",
        "chain/resname/resid",
        "resname/resid/atom",
        "chain/resname/resid/atom",
        "chain//resid",
        "chain/resname/atom",
        "Only a residue number:",
        "Residue name and number (CYS/123):",
        "Chain, residue name, residue number",
        "Residue name, residue number, atom name",
        "Check whether there is a request for help",
        "Convert the option list to a dictionary, discarding all comments",
        "This information we would like to print to some files, so let's put it in our information class",
        "LOGGING ##",
        "Set the log level and communicate which options are set and what is happening",
        "If 'Verbose' is set, change the logger level",
        "The make the program flexible, the forcefield parameters are defined",
        "for multiple forcefield. Check if a existing one is defined:",
        "_tmp  = __import__(options['-ff'].value.lower())",
        "options['ForceField']  = getattr(_tmp,options['-ff'].value.lower())()",
        "Try to load the forcefield class from a different file",
        "Try to load the forcefield class from the current file",
        "Process the raw options from the command line",
        "Boolean options are set to more intuitive variables",
        "options['-hetatm']",
        "options['-mixed']",
        "Parsing of some other options into variables",
        "Some forcefields, like elnedyn, always use an elatic network. This is set in the",
        "forcefield file, with the parameter ElasticNetwork.",
        "Merges, links and cystines",
        "Process links",
        "Bond with given length and force constant",
        "Constraint at given distance",
        "Constraint at distance in structure",
        "Store the link, but do not list the atom name in the",
        "atomistic link list. Otherwise it will not get noticed",
        "as a valid link when checking for merging chains",
        "Cystines -- This should be done for all special bonds listed in the _special_ dictionary",
        "By default, do not detect cystine bridges",
        "Maximum distance (A) for detection of SS bonds",
        "This item should be a pair of cysteines",
        "Internally we handle the residue number shifted by ord(' ')<<20. We have to add this to the",
        "cys-residue numbers given here as well.",
        "Now we have done everything to it, we can add Link/cystine related stuff to options",
        "'multi' is not stored anywhere else, so that we also add",
        "",
        "3 # HELPER FUNCTIONS, CLASSES AND SHORTCUTS ##  -> @FUNC <-",
        "",
        "----+------------------+",
        "A | STRING FUNCTIONS |",
        "----+------------------+",
        "Split a string",
        "Split each argument in a list",
        "Make a dictionary from two lists",
        "Function to reformat pattern strings",
        "Function to generate formatted strings according to the argument type",
        "----+----------------+",
        "B | MATH FUNCTIONS |",
        "----+----------------+",
        "",
        "4 # FG -> CG MAPPING ##  -> @MAP <-",
        "",
        "",
        "Amino acid nucleic acid codes:",
        "The naming (AA and '3') is not strictly correct when adding DNA/RNA, but we keep it like this for consistincy.",
        "@#",
        "@#",
        "Dictionaries for conversion from one letter code to three letter code v.v.",
        "Residue classes:",
        "remove eight to get rid of DNA/RNA here.",
        "Class for mapping an atomistic residue list to a coarsegrained one",
        "Should get an __init__ function taking a residuelist, atomlist, Pymol selection or ChemPy model",
        "The result should be stored in a list-type attribute",
        "The class should have pdbstr and grostr methods",
        "Standard mapping groups",
        "Protein backbone",
        "@#",
        "Lipid tails",
        "@#",
        "@#",
        "@#",
        "@#",
        "lauroyl1      = []",
        "stearoyl1     = []",
        "arachidonoyl1 = []",
        "linoleyl1     = []",
        "hexanoyl1     = []",
        "Lipid head groups",
        "phoshpatidylcholine      =",
        "@#",
        "@#",
        "phosphatidylserine       =",
        "This is the mapping dictionary",
        "For each residue it returns a list, each element of which",
        "lists the atom names to be mapped to the corresponding bead.",
        "The order should be the standard order of the coarse grained",
        "beads for the residue. Only atom names matching with those",
        "present in the list of atoms for the residue will be used",
        "to determine the bead position. This adds flexibility to the",
        "approach, as a single definition can be used for different",
        "states of a residue (e.g., GLU/GLUH).",
        "For convenience, the list can be specified as a set of strings,",
        "converted into a list of lists by 'nsplit' defined above.",
        "Charged Histidine.",
        "Generic names for side chain beads",
        "Generic names for DNA beads",
        "This dictionary contains the bead names for all residues,",
        "following the order in 'mapping'",
        "Add default bead names for all amino acids",
        "Add the default bead names for all DNA nucleic acids",
        "This dictionary allows determining four letter residue names",
        "for ones specified with three letters, e.g., resulting from",
        "truncation to adhere to the PDB format.",
        "Each entry returns a prototypical test, given as a string,",
        "and the residue name to be applied if eval(test) is True.",
        "This is particularly handy to determine lipid types.",
        "The test assumes there is a local or global array 'atoms'",
        "containing the atom names of the residue in correct order.",
        "Crude mass for weighted average. No consideration of united atoms.",
        "This will probably give only minor deviations, while also giving less headache",
        "Determine average position for a set of weights and coordinates",
        "This is a rather specific function that requires a list of items",
        "[(m,(x,y,z),id),..] and returns the weighted average of the",
        "coordinates and the list of ids mapped to this bead",
        "Weighted coordinates",
        "Sum of weights",
        "Centre of mass",
        "Return the CG beads for an atomistic residue, using the mapping specified above",
        "The residue 'r' is simply a list of atoms, and each atom is a list:",
        "[ name, resname, resid, chain, x, y, z ]",
        "Mapping for this residue",
        "Elnedyn maps BB to CA, ca2bb is False or True",
        "Get the name, mass and coordinates for all atoms in the residue",
        "Store weight, coordinate and index for atoms that match a bead",
        "Bead positions",
        "Mapping for index file",
        "Mapping for this residue",
        "Elnedyn maps BB to CA, ca2bb is False or True",
        "Get the name, mass and coordinates for all atoms in the residue",
        "Store weight, coordinate and index for atoms that match a bead",
        "",
        "5 # SECONDARY STRUCTURE ##  -> @SS <-",
        "",
        "----+--------------------------------------+",
        "A | SECONDARY STRUCTURE TYPE DEFINITIONS |",
        "----+--------------------------------------+",
        "This table lists all coarse grained secondary structure types",
        "The following are matched lists. Make sure they stay matched.",
        "The lists do not need to be of the same length. The longer list",
        "will be truncated when combined with a shorter list, e.g. with",
        "dihedral definitions, which are not present for coil and termini",
        "",
        "@#",
        "@#",
        "@#",
        "@#",
        "@#",
        "@#",
        "@#",
        "@#",
        "@#",
        "SS one letter",
        "The following dictionary contains secondary structure types as assigned by",
        "different programs. The corresponding Martini secondary structure types are",
        "listed in cgss",
        "",
        "NOTE:",
        "Each list of letters in the dictionary ss should exactly match the list",
        "in cgss.",
        "",
        "DSSP one letter secondary structure code     #@#",
        "Pymol one letter secondary structure code    #@#",
        "Gromacs secondary structure dump code        #@#",
        "Internal CG secondary structure codes        #@#",
        "Corresponding CG secondary structure types   #@#",
        "----+-------------------------------------------+",
        "B | SECONDARY STRUCTURE PATTERN SUBSTITUTIONS |",
        "----+-------------------------------------------+",
        "For all structure types specific dihedrals may be used if four or",
        "more consecutive residues are assigned that type.",
        "Helix start and end regions are special and require assignment of",
        "specific types. The following pattern substitutions are applied",
        "(in the given order). A dot matches any other type.",
        "Patterns can be added to the dictionaries. This only makes sense",
        "if for each key in patterns there is a matching key in pattypes.",
        "@#",
        "@#",
        "----+----------+",
        "C | INTERNAL |",
        "----+----------+",
        "Pymol Colors",
        "F   E   H   1   2   3   T   S   C",
        "@#",
        "Dictionary returning a number for a given type of secondary structure",
        "This can be used for setting the b-factor field for coloring",
        "List of programs for which secondary structure definitions can be processed",
        "Dictionaries mapping ss types to the CG ss types",
        "From the secondary structure dictionaries we create translation tables",
        "with which all secondary structure types can be processed. Anything",
        "not listed above will be mapped to C (coil).",
        "Note, a translation table is a list of 256 characters to map standard",
        "ascii characters to.",
        "The translation table depends on the program used to obtain the",
        "secondary structure definitions",
        "The following translation tables are used to identify stretches of",
        "a certain type of secondary structure. These translation tables have",
        "every character, except for the indicated secondary structure, set to",
        "\\x00. This allows summing the sequences after processing to obtain",
        "a single sequence summarizing all the features.",
        "Pattern substitutions",
        "The following function translates a string encoding the secondary structure",
        "to a string of corresponding Martini types, taking the origin of the",
        "secondary structure into account, and replacing termini if requested.",
        "Translate dssp/pymol/gmx ss to Martini ss",
        "Separate the different secondary structure types",
        "Do type substitutions based on patterns",
        "If the ss type is not in the patterns lists, do not substitute",
        "(use empty lists for substitutions)",
        "Translate all types to numerical values",
        "Sum characters back to get a full typed sequence",
        "Return both the actual as well as the fully typed sequence",
        "The following functions are for determination of secondary structure,",
        "given a list of atoms. The atom format is generic and can be written out",
        "as PDB or GRO. The coordinates are in Angstrom.",
        "NOTE: There is the *OLD* DSSP and the *NEW* DSSP, which require",
        "different calls. The old version uses '--' to indicate reading from stdin",
        "whereas the new version uses '-i /dev/stdin'",
        "",
        "7 # ELASTIC NETWORK ##  -> @ELN <-",
        "",
        "ELASTIC NETWORK ##",
        "Only the decay function is defined here, the network",
        "itself is set up through the Topology class",
        "The function to determine the decay scaling factor for the elastic network",
        "force constant, based on the distance and the parameters provided.",
        "This function is very versatile and can be fitted to most commonly used",
        "profiles, including a straight line (rate=0)",
        "Mind the nm/A conversion -- This has to be standardized! Global use of nm?",
        "",
        "8 # STRUCTURE I/O ##  -> @IO <-",
        "",
        "----+---------+",
        "A | PDB I/O |",
        "----+---------+",
        "Reformatting of lines in structure file",
        "Box vectors",
        "Box vector lengths",
        "Box vector angles",
        "01234567890123456789012345678901234567890123456789012345678901234567890123456789",
        "ATOM   2155 HH11 ARG C 203     116.140  48.800   6.280  1.00  0.00",
        "NOTE: The 27th field of an ATOM line in the PDB definition can contain an",
        "insertion code. We shift that 20 bits and add it to the residue number",
        "to ensure that residue numbers will be unique.",
        "===> atom name,       res name,        res id,                        chain,",
        "x,              y,              z",
        "Function for splitting a PDB file in chains, based",
        "on chain identifiers and TER statements",
        "Was a \"TER\" statement",
        "Simple PDB iterator",
        "----+---------+",
        "B | GRO I/O |",
        "----+---------+",
        "Padding for rectangular boxes",
        "Return full definition xx,xy,xz,yx,yy,yz,zx,zy,zz",
        "In PDB files, there might by an insertion code. To handle this, we internally add",
        "constant to all resids. To be consistent, we have to do the same for gro files.",
        "32 equal ord(' '), eg an empty insertion code",
        "012345678901234567890123456789012345678901234567890",
        "1PRN      N    1   4.168  11.132   5.291",
        "===> atom name,        res name,          res id,    chain,",
        "x,                 y,                 z",
        "Simple GRO iterator",
        "----+-------------+",
        "C | GENERAL I/O |",
        "----+-------------+",
        "It is not entirely clear where this fits in best.",
        "Called from main.",
        "reads in lines until either of a set of specified conditions",
        "is met, then setting the type and from thereon functioning as",
        "a normal stream.",
        "Tag the stream with the type of structure file",
        "If necessary, open the stream, taking care of",
        "opening using gzip for gzipped files",
        "First check whether we have have an open stream or a file",
        "If it's a file, check whether it's zipped and open it",
        "Read a few lines, but save them",
        "Must be a GRO file",
        "Must be a PDB file then",
        "Could wind further to see if we encounter an \"ATOM\" record",
        "Hand over the lines that were stored",
        "Now give the rest of the lines from the stream",
        "----+-----------------+",
        "D | STRUCTURE STUFF |",
        "----+-----------------+",
        "This list allows to retrieve atoms based on the name or the index",
        "If standard, dictionary type indexing is used, only exact matches are",
        "returned. Alternatively, partial matching can be achieved by setting",
        "a second 'True' argument.",
        "Call the parent class __getitem__",
        "Return partial matches",
        "Return exact matches only",
        "Residue name check",
        "Residue id check",
        "Chain id check",
        "Extract backbone atoms coordinates",
        "Needed to remove waters residues from mixed residues.",
        "We cannot rely on some standard order for the backbone atoms.",
        "Therefore breaks are inferred from the minimal distance between",
        "backbone atoms from adjacent residues.",
        "Generate a random vector in a sphere of -1 to +1, to add to the bead position",
        "Calculated the length of the vector and divide by the final distance of the dummy bead",
        "Resize the vector",
        "m sets the direction of the added vector, currently only works when adding one or two beads.",
        "Mark the combinations of chains that need to be merged",
        "Build a dictionary of chain IDs versus index",
        "To give higher priority to top chains the lists are reversed",
        "before building the dictionary",
        "Convert chains in the merge_list to numeric, if necessary",
        "NOTE The internal numbering is zero-based, while the",
        "command line chain indexing is one-based. We have to add",
        "one to the number in the dictionary to bring it on par with",
        "the numbering from the command line, but then from the",
        "result we need to subtract one again to make indexing",
        "zero-based",
        "Rearrange merge list to a list of pairs",
        "Check each combination of chains for connections based on",
        "ss-bridges, links and distance restraints",
        "Check whether any link links these two groups",
        "Check whether any cystine bond given links these two groups",
        "for a,b in s_list:",
        "if ((a in chains[i] and b in chains[j]) or",
        "(a in chains[j] and b in chains[i])):",
        "logging.info(\"Merging chains %d and %d to allow cystine bridge\"%(i+1,j+1))",
        "pairs.append( i<j and (i,j) or (j,i) )",
        "break",
        "if (i,j) in pairs:",
        "continue",
        "Check for cystine bridges based on distance",
        "Get SG atoms from cysteines from either chain",
        "Check this pair of chains",
        "Sort the combinations",
        "Determine the order for writing; merged chains go first",
        "!! NOTE !! ##",
        "XXX The chain class needs to be simplified by extracting things to separate functions/classes",
        "Attributes defining a chain",
        "When copying a chain, or slicing, the attributes in this list have to",
        "be handled accordingly.",
        "before proceeding.",
        "Unknown residues",
        "Determine the type of chain",
        "Determine number of atoms",
        "BREAKS: List of indices of residues where a new fragment starts",
        "Only when polymeric (protein, DNA, RNA, ...)",
        "For now, let's remove it for the Nucleic acids...",
        "LINKS:  List of pairs of pairs of indices of linked residues/atoms",
        "This list is used for cysteine bridges and peptide bonds involving side chains",
        "The list has items like ((#resi1, #atid1), (#resi2, #atid2))",
        "When merging chains, the residue number needs ot be update, but the atom id",
        "remains unchanged.",
        "For the coarse grained system, it needs to be checked which beads the respective",
        "atoms fall in, and bonded terms need to be added there.",
        "Chain identifier; try to read from residue definition if no name is given",
        "Container for coarse grained beads",
        "Return the number of residues",
        "DNA/RNA contain non-CAP d/r to indicate type. We remove those first.",
        "Combine the chain items that can be simply added",
        "Set chain items, shifting the residue numbers",
        "Return the merged chain",
        "Extract a residue by number or the list of residues of a given type",
        "This facilitates selecting residues for links, like chain[\"CYS\"]",
        "This functionality is set up for links",
        "between coarse grained beads. So these are",
        "checked first,",
        "Extract a piece of a chain as a new chain",
        "Extract the slices from all lists",
        "Breaks that fall within the start and end of this chain need to be passed on.",
        "Residue numbering is increased by 20 bits!!",
        "XXX I don't know if this works.",
        "Return the chain slice",
        "If the chain does not match, bail out",
        "Check if the whole tuple is in",
        "Fetch atoms with matching residue id",
        "Select atoms with matching residue name",
        "Check whether the atom is given and listed",
        "It just is not in the list!",
        "Split a chain based on residue types; each subchain can have only one type",
        "Use the __getslice__ method to take a part of the chain.",
        "Infer the Martini backbone secondary structure types",
        "The method should take a list of atoms and return a",
        "string of secondary structure classifications",
        "Determine the type of chain",
        "XXX The following (at least the greater part of it) should be made a separate function, put under \"MAPPING\"",
        "Generate the coarse grained structure",
        "Set the b-factor field to something that reflects the secondary structure",
        "If the coarse grained structure is set already, just return,",
        "unless regeneration is forced.",
        "For DNA we need to get the O3' to the following residue when calculating COM",
        "The force and com options ensure that this part does not affect itp generation or anything else",
        "Just an initialization, this should complain if it isn't updated in the loop",
        "We couldn't remove the O3' from the 5' end residue during the loop so we do it now",
        "Check if residues names has changed, for example because user has set residues interactively.",
        "Get the mapping for this residue",
        "CG.map returns bead coordinates and mapped atoms",
        "This will fail if there are (too many) atoms missing, which is",
        "only problematic if a mapped structure is written; the topology",
        "is inferred from the sequence. So this is the best place to raise",
        "an error",
        "Add the bead with coordinates and secondary structure id to the list",
        "Add the ids to the list, after converting them to indices to the list of atoms",
        "Increment the atom id; This pertains to the atoms that are included in the output.",
        "Keep track of the numbers for CONECTing",
        "Return pairs of numbers that should be CONECTed",
        "First extract the backbone IDs",
        "Set the backbone CONECTs (check whether the distance is consistent with binding)",
        "Now add CONECTs for sidechains",
        "",
        "7 # TOPOLOGY ##  -> @TOP <-",
        "",
        "This is a generic class for Topology Bonded Type definitions",
        "The init method is generic to the bonded types,",
        "but may call the set method if atoms are given",
        "as (ID, ResidueName, SecondaryStructure) tuples",
        "The set method is specific to the different types.",
        "If other is given, then copy the attributes",
        "if it is of the same class or set the",
        "attributes according to the key names if",
        "it is a dictionary",
        "For every item in the kwargs keys, set the attribute",
        "with the same name. This can be used to specify the",
        "attributes directly or to override attributes",
        "copied from the 'other' argument.",
        "If atoms are given as tuples of",
        "(ID, ResidueName[, SecondaryStructure])",
        "then determine the corresponding parameters",
        "from the lists above",
        "For exclusions, no type is defined, which equals -1",
        "Print integers and floats in proper format and neglect None terms",
        "This function needs to be overridden for descendents",
        "The set method of this class will look up parameters for backbone beads",
        "Side chain bonds ought to be set directly, using the constructor",
        "providing atom numbers, bond type, and parameters",
        "Constraints are bonds with kb = None, which can be extracted",
        "using the category",
        "The category can be used to keep bonds sorted",
        "Backbone bonds also can be constraints. We could change the type further on, but this is more general.",
        "Even better would be to add a new type: BB-Constraint",
        "Overriding __str__ method to suppress printing of bonds with Fc of 0",
        "Similar to the preceding class",
        "Similar to the preceding class",
        "Similar to the preceding class",
        "Similar to the preceding class",
        "Collagen",
        "Use dihedrals",
        "Helix",
        "This list allows to retrieve Bonded class items based on the category",
        "If standard, dictionary type indexing is used, only exact matches are",
        "returned. Alternatively, partial matching can be achieved by setting",
        "a second 'True' argument.",
        "Call the parent class __getitem__",
        "Okay, this is sort of funny; we will add a",
        "#define mapping virtual_sitesn",
        "to the topology file, followed by a header",
        "[ mapping ]",
        "For multiscaling we have to keep track of the number of",
        "real atoms that correspond to the beads in the topology",
        "Returning an empty instance",
        "Currently there are no Martini Nucleic Acids",
        "How can you have a mixed chain?",
        "Well, you could get a covalently bound lipid or piece of DNA to a protein :S",
        "But how to deal with that?",
        "Probably one should separate the chains into blocks of specified type,",
        "determine the locations of links, then construct the topologies for the",
        "blocks and combine them according to the links.",
        "This chain should not be polymeric, but a collection of molecules",
        "For each unique residue type fetch the proper moleculetype",
        "The following used work: zip>list expansions>zip back, but that only works if",
        "all the tuples in the original list of of equal length. With masses and charges",
        "that is not necessarly the case.",
        "Update atom numbers",
        "Update residue numbers",
        "Update charge group numbers",
        "Do not print a molecule name when multiscaling",
        "In that case, the topology created here needs to be appended",
        "at the end of an atomistic moleculetype",
        "For virtual sites and dummy beads we have to be able to specify the mass.",
        "Thus we need two different format strings:",
        "Print out the vsites only if they excist. Right now it can only be type 1 virual sites.",
        "Print out the exclusions only if they excist.",
        "Bonds in order: backbone, backbone-sidechain, sidechain, short elastic, long elastic",
        "Backbone-backbone",
        "Rubber Bands",
        "Add a CPP style directive to allow control over the elastic network",
        "Backbone-Sidechain/Sidechain-Sidechain",
        "Short elastic/Long elastic",
        "Cystine bridges",
        "Other links",
        "Constraints",
        "Angles",
        "Dihedrals",
        "Postition Restraints",
        "The sequence function can be used to generate the topology for",
        "a sequence :) either given as sequence or as chain",
        "Shift for the atom numbers of the atomistic part in a chain",
        "that is being multiscaled",
        "First check if we get a sequence or a Chain instance",
        "If the mapping is not specified, the actual mapping is taken,",
        "used to construct the coarse grained system from the atomistic one.",
        "The function argument \"mapping\" could be used to use a default",
        "mapping scheme in stead, like the mapping for the GROMOS96 force field.",
        "If anything hints towards multiscaling, do multiscaling",
        "If no secondary structure is provided, set all to coil",
        "If a secondary structure is provided, use that. chain is none.",
        "Fetch the sidechains",
        "Pad with empty lists for atoms, bonds, angles",
        "and dihedrals, and take the first four lists out",
        "This will avoid errors for residues for which",
        "these are not defined.",
        "ID of the first atom/residue",
        "The atom number and residue number follow from the last",
        "atom c.q. residue id in the list processed in the topology",
        "thus far. In the case of multiscaling, the real atoms need",
        "also be accounted for.",
        "Backbone bead atom IDs",
        "Calpha positions, to get Elnedyn BBB-angles and BB-bond lengths",
        "positionCa = [residue[1][4:] for residue in chain.residues]",
        "The old method (line above) assumed no hydrogens: Ca would always be",
        "the second atom of the residue. Now we look at the name.",
        "Residue numbers for this moleculetype topology",
        "This contains the information for deriving backbone bead types,",
        "bb bond types, bbb/bbs angle types, and bbbb dihedral types and",
        "Elnedyn BB-bondlength BBB-angles",
        "Fetch the proper backbone beads",
        "If termini need to be charged, change the bead types",
        "If breaks need to be charged, change the bead types",
        "For backbone parameters, iterate over fragments, inferred from breaks",
        "Extract the fragment",
        "Iterate over backbone bonds",
        "Iterate over backbone angles",
        "Don't skip the first and last residue in the fragment",
        "Get backbone quadruples",
        "No i-1,i,i+1,i+2 interactions defined for Elnedyn",
        "Process dihedrals",
        "Maybe do local elastic networks",
        "This one may already be listed as the 2-4 bond of a previous one",
        "Since dihedrals can return None, we first collect them separately and then",
        "add the non-None ones to the list",
        "Elnedyn does not use backbone-backbone-sidechain-angles",
        "Backbone-Backbone-Sidechain angles",
        "If the first residue has a sidechain, we take SBB, otherwise we skip it",
        "For other sidechains, we 'just' take BBS",
        "Start from first residue: connects sidechain of second residue",
        "Now do the atom list, and take the sidechains along",
        "",
        "AtomID AtomType ResidueID ResidueName AtomName ChargeGroup Charge ; Comments",
        "",
        "Side chain bonded terms",
        "Collect bond, angle and dihedral connectivity",
        "Side Chain Bonds/Constraints",
        "Shift the atom numbers",
        "Side Chain Angles",
        "Shift the atom numbers",
        "Side Chain Dihedrals",
        "Shift the atom numbers",
        "Side Chain V-Sites",
        "Shift the atom numbers",
        "Side Chain exclusions",
        "The new polarizable forcefield give problems with the charges in the sidechain, if the backbone is also charged.",
        "To avoid that, we add explicit exclusions",
        "All residue atoms",
        "Counts over beads",
        "If mass or charge diverse, we adopt it here.",
        "We don't want to do this for BB beads because of charged termini.",
        "Doing this here save going over all the atoms onesmore.",
        "Generate position restraints for all atoms or Backbone beads only.",
        "The rubber bands are best applied outside of the chain class, as that gives",
        "more control when chains need to be merged. The possibility to do it on the",
        "chain level is retained to allow building a complete chain topology in",
        "a straightforward manner after importing this script as module.",
        "Note the equivalent of atomistic atoms that have been processed",
        "Shift for the atom numbers of the atomistic part in a chain",
        "that is being multiscaled",
        "First check if we get a sequence or a Chain instance",
        "If the mapping is not specified, the actual mapping is taken,",
        "used to construct the coarse grained system from the atomistic one.",
        "The function argument \"mapping\" could be used to use a default",
        "mapping scheme in stead, like the mapping for the GROMOS96 force field.",
        "If anything hints towards multiscaling, do multiscaling",
        "If no secondary structure is provided, set all to coil",
        "If a secondary structure is provided, use that. chain is none.",
        "Fetch the base information",
        "Pad with empty lists for atoms, bonds, angles",
        "and dihedrals, and take the first five lists out",
        "This will avoid errors for residues for which",
        "these are not defined.",
        "ID of the first atom/residue",
        "The atom number and residue number follow from the last",
        "atom c.q. residue id in the list processed in the topology",
        "thus far. In the case of multiscaling, the real atoms need",
        "also be accounted for.",
        "Backbone bead atom IDs",
        "bbid.append(bbid[-1]+len(i)+1)",
        "Residue numbers for this moleculetype topology",
        "This contains the information for deriving backbone bead types,",
        "bb bond types, bbb/bbs angle types, and bbbb dihedral types.",
        "Fetch the proper backbone beads",
        "Since there are three beads we need to split these to the list",
        "This is going to be usefull for the type of the last backbone bead.",
        "If termini need to be charged, change the bead types",
        "if not self.options['NeutralTermini']:",
        "bb[0]  =\"Qd\"",
        "bb[-1] = \"Qa\"",
        "If breaks need to be charged, change the bead types",
        "if self.options['ChargesAtBreaks']:",
        "for i in breaks:",
        "bb[i]   = \"Qd\"",
        "bb[i-1] = \"Qa\"",
        "For backbone parameters, iterate over fragments, inferred from breaks",
        "Extract the fragment",
        "Expand the 3 bb beads per residue into one long list",
        "Resulting list contains three tuples per residue",
        "We use the useless ca parameter to get the correct backbone bond from bbGetBond",
        "Iterate over backbone bonds",
        "Iterate over backbone angles",
        "Don't skip the first and last residue in the fragment",
        "Get backbone quadruples",
        "No i-1,i,i+1,i+2 interactions defined for Elnedyn",
        "Process dihedrals",
        "Since dihedrals can return None, we first collect them separately and then",
        "add the non-None ones to the list",
        "Now do the atom list, and take the sidechains along",
        "",
        "We need to do some trickery to get all 3 bb beads in to these lists",
        "This adds each element to a list three times, feel free to shorten up",
        "We only want one side chain per three backbone beads so this skips the others",
        "Note added impropers in contrast to aa",
        "Side chain bonded terms",
        "Collect bond, angle and dihedral connectivity",
        "Impropers needed to be added here for DNA",
        "Side Chain Bonds/Constraints",
        "Shift the atom numbers",
        "Side Chain Angles",
        "Shift the atom numbers",
        "Side Chain Dihedrals",
        "Shift the atom numbers",
        "Side Chain Impropers",
        "Shift the atom numbers",
        "Side Chain V-Sites",
        "Shift the atom numbers",
        "Currently DNA needs exclusions for the base",
        "The loop runs over the first backbone bead so 3 needs to be added to the indices",
        "All residue atoms",
        "Counts over beads",
        "Need to tweak this to get all the backbone beads to the list with the side chain",
        "Doing this here saves going over all the atoms onesmore.",
        "Generate position restraints for all atoms or Backbone beads only.",
        "One more thing, we need to remove dihedrals (2) and an angle (1)  that reach beyond the 3' end",
        "This is stupid to do now but the total number of atoms seems not to be available before",
        "This iterate the list in reverse order so that removals don't affect later checks",
        "",
        "8 # MAIN #  -> @MAIN <-",
        "",
        "Check whether to read from a gro/pdb file or from stdin",
        "We use an iterator to wrap around the stream to allow",
        "inferring the file type, without consuming lines already",
        "The streamTag iterator first yields the file type, which",
        "is used to specify the function for reading frames",
        "ITERATE OVER FRAMES IN STRUCTURE FILE ##",
        "Now iterate over the frames in the stream",
        "This should become a StructureFile class with a nice .next method",
        "The PDB file can have chains, in which case we list and process them specifically",
        "TER statements are also interpreted as chain separators",
        "A chain may have breaks in which case the breaking residues are flagged",
        "The GRO file does not define chains. Here breaks in the backbone are",
        "interpreted as chain separators.",
        "The breaks are indices to residues",
        "Reorder, such that each chain is specified with (i,j,k)",
        "where i and j are the start and end of the chain, and",
        "k is a chain identifier",
        "Check the chain identifiers",
        "Ending down here means that non-consecutive blocks of atoms in the",
        "PDB file have the same chain ID. The warning pertains to PDB files only,",
        "since chains from GRO files get a unique chain identifier assigned.",
        "Check if chains are of mixed type. If so, split them.",
        "Note that in some cases HETATM residues are part of a",
        "chain. This will get problematic. But we cannot cover",
        "all, probably.",
        "Check all chains",
        "This is currently not active:",
        "Here we interactively check the charge state of resides",
        "Can be easily expanded to residues other than HIS",
        "Check which chains need merging",
        "Get the total length of the sequence",
        "SECONDARY STRUCTURE",
        "XXX We need error-catching here,",
        "in case the file doesn't excist, or the string contains bogus.",
        "If the string given for the sequence consists strictly of upper case letters",
        "and does not appear to be a file, assume it is the secondary structure",
        "There ought to be a file with the name specified",
        "Try to read the file as a Gromacs Secondary Structure Dump",
        "Those have an integer as first line",
        "Get the secondary structure type from DSSP output",
        "Now set the secondary structure for each of the chains",
        "elif options[\"-pymol\"]:",
        "method, executable = \"pymol\", options[\"-pymol\"].value",
        "Used to be: if method in (\"dssp\",\"pymol\"): but pymol is not supported",
        "Collect the secondary structure classifications for different frames",
        "Write the coarse grained structure if requested",
        "Gather cysteine sulphur coordinates",
        "Write the index file if requested.",
        "Mainly of interest for multiscaling.",
        "Could be improved by adding separte groups for BB, SC, etc.",
        "Lists for All-atom, Virtual sites and Coarse Grain.",
        "Write the index file for mapping AA trajectory if requested",
        "Get all AA atoms as lists of atoms in residues",
        "First we skip hetatoms and unknowns then iterate over beads",
        "In DNA the O3' atom is mapped together with atoms from the next residue",
        "This stores it until we get to the next residue",
        "This gives out a list of atoms in residue, each tuple has other",
        "stuff in it that's needed elsewhere so we just take the last",
        "element which is the atom index (in that residue)",
        "Evertything below here we only need, if we need to write a Topology",
        "Collect the secondary structure stuff and decide what to do with it",
        "First rearrange by the residue",
        "Only one type -- consensus",
        "Transitions between secondary structure types",
        "Divide the secondary structure according to the division in chains",
        "This will set the secondary structure types to be used for the",
        "topology.",
        "Now the chains are complete, each consisting of a residuelist,",
        "and a secondary structure designation if the chain is of type 'Protein'.",
        "There may be mixed chains, there may be HETATM things.",
        "Water has been discarded. Maybe this has to be changed at some point.",
        "The order in the coarse grained files matches the order in the set of chains.",
        "",
        "If there are no merges to be done, i.e. no global Elnedyn network, no",
        "disulphide bridges, no links, no distance restraints and no explicit merges,",
        "then we can write out the topology, which will match the coarse grained file.",
        "",
        "If there are merges to be done, the order of things may be changed, in which",
        "case the coarse grained structure will not match with the topology...",
        "CYSTINE BRIDGES ##",
        "Extract the cysteine coordinates (for all frames) and the cysteine identifiers",
        "Check the distances and add the cysteines to the link list if the",
        "SG atoms have a distance smaller than the cutoff.",
        "Checking the minimum distance over all frames",
        "But we could also take the maximum, or the mean",
        "REAL ITP STUFF ##",
        "Check whether we have identical chains, in which case we",
        "only write the ITP for one...",
        "This means making a distinction between chains and",
        "moleculetypes.",
        "At this point we should have a list or dictionary of chains",
        "Each chain should be given a unique name, based on the value",
        "of options[\"-o\"] combined with the chain identifier and possibly",
        "a number if there are chains with identical identifiers.",
        "For each chain we then write an ITP file using the name for",
        "moleculetype and name + \".itp\" for the topology include file.",
        "In addition we write a master topology file, using the value of",
        "options[\"-o\"], with an added extension \".top\" if not given.",
        "XXX *NOTE*: This should probably be gathered in a 'Universe' class",
        "Check if the moleculetype is already listed",
        "If not, generate the topology from the chain definition",
        "Name of the moleculetype",
        "XXX: The naming should be changed; now it becomes Protein_X+Protein_Y+...",
        "Write the molecule type topology",
        "Have to add the connections, like the connecting network",
        "Gather coordinates",
        "Run through the link list and add connections (links = cys bridges or hand specified links)",
        "Check whether this link applies to this group",
        "Elastic Network",
        "The elastic network is added after the topology is constructed, since that",
        "is where the correct atom list with numbering and the full set of",
        "coordinates for the merged chains are available.",
        "Write out the MoleculeType topology",
        "Check whether other chains are equal to this one",
        "Skip this step if we are to write all chains to separate moleculetypes",
        "Molecule j is equal to a molecule mi",
        "Set the name of the moleculetype to the one of that molecule",
        "WRITING THE MASTER TOPOLOGY",
        "Output stream",
        "ITP file listing",
        "Molecule listing",
        "Set a define if we are to use rubber bands",
        "XXX Specify a better, version specific base-itp name.",
        "Do not set a define for position restrains here, as people are more used to do it in mdp file?",
        "Maybe there are forcefield specific log messages?",
        "The following lines are always printed (if no errors occur).",
        "Get the possible commandline arguments arguments and help text.",
        "Parse commandline options."
    ],
    "docstrings": [
        "'''Prints any force-field specific logging messages.'''",
        "'''Prints any force-field specific logging messages.'''",
        "'''The forcefield has been implemented with some changes compared to the published parameters:\n        - Backbone-Backbone bonds are constraints in stead of strong bonds.\n        - Trp has an extra constrain added to the sidechain\n        - The Backbone sidechain bonds with high force constants are replaced by constraints except for Trp.\n        '''",
        "'''Prints any force-field specific logging messages.'''",
        "'''Prints any force-field specific logging messages.'''",
        "'''The forcefield has been implemented with some changes compared to the published parameters:\n    - Backbone-Backbone bonds are constraints in stead of strong bonds.\n    - Trp has an extra constrain added to the sidechain\n    - The Backbone-Sidechain bonds with high force constants are replaced by constraints except for Trp and His.\n    '''",
        "'''Prints any force-field specific logging messages.'''",
        "'''Prints any force-field specific logging messages.'''",
        "'''Prints any force-field specific logging messages.'''",
        "\"\"\"\nMARTINIZE.py is a script to create Coarse Grain Martini input files of\nproteins, ready for use in the molecular dynamics simulations package \nGromacs. For more information on the Martini forcefield, see:\nwww.cgmartini.nl\nand read our papers:\nMonticelli et al., J. Chem. Theory Comput., 2008, 4(5), 819-834\nde Jong et al., J. Chem. Theory Comput., 2013, DOI:10.1021/ct300646g\n\nPrimary input/output\n--------------------\nThe input file (-f) should be a coordinate file in PDB or GROMOS\nformat. The format is inferred from the structure of the file. The \ninput can also be provided through stdin, allowing piping of \nstructures. The input structure can have multiple frames/models. If an output\nstructure file (-x) is given, each frame will be coarse grained,\nresulting in a multimodel output structure. Having multiple frames may\nalso affect the topology. If secondary structure is determined\ninternally, the structure will be averaged over the frames. Likewise,\ninteratomic distances, as used for backbone bond lengths in Elnedyn\nand in elastic networks, are also averaged over the frames available.\n\nIf an output file (-o) is indicated for the topology, that file will\nbe used for the master topology, using #include statements to link the\nmoleculetype definitions, which are written to separate files. If no\noutput filename is given, the topology and the moleculetype\ndefinitions are written to stdout.\n\nSecondary structure\n-------------------\nThe secondary structure plays a central role in the assignment of atom\ntypes and bonded interactions in MARTINI. Martinize allows\nspecification of the secondary structure as a string (-ss), or as a\nfile containing a specification in GROMACS' ssdump format\n(-ss). Alternatively, DSSP can be used for an on-the-fly assignment of\nthe secondary structure. For this, the option -dssp has to be used\ngiving the location of the executable as the argument. \nThe option -collagen will set the whole structure to collagen. If this\nis not what you want (eg only part of the structure is collagen, you\ncan give a secondary structure file/string (-ss) and specifiy collagen\nas \"F\". Parameters for collagen are taken from: Gautieri et al., \nJ. Chem. Theory Comput., 2010, 6, 1210-1218. \nWith multimodel input files, the secondary structure as determined with\nDSSP will be averaged over the frames. In this case, a cutoff\ncan be specified (-ssc) indicating the fraction of frames to match a\ncertain secondary structure type for designation.\n\nTopology\n--------\nSeveral options are available to tune the resulting topology. By\ndefault, termini are charged, and chain breaks are kept neutral. This\nbehaviour can be changed using -nt and -cb, respectively.\n\nDisulphide bridges can be specified using -cys. This option can be\ngiven multiple times on the command line. The argument is a pair of\ncysteine residues, using the format\nchain/resn/resi,chain/resn/resi. \nIt is also possible to let martinize detect cysteine pairs based on a\ncut-off distance of 0.22nm, by giving the keyword 'auto' as argument to -cys.\nAlternatively, a different cut-off distance can be specified, which\nwill also trigger a search of pairs satisfying the distance\ncriterion (eg: -cys 0.32).\n\nIn addition to cystine bridges, links between other atoms can be\nspecified using -link. This requires specification of the atoms, using\nthe format\nchain/resi/resn/atom,chain/resi/resn/atom,bondlength,forceconstant.\nIf only two atoms are given, a constraint will be added with length\nequal to the (average) distance in the coordinate file. If a bond\nlength is added, but no force constant, then the bondlength will be\nused to set a constraint.\n\nLinking atoms requires that the atoms are part of the same\nmoleculetype. Therefore any link between chains will cause the chains\nto be merged. Merges can also be specified explicitly, using the\noption -merge with a comma-separated list of chain identifiers to be\njoined into one moleculetype. The option -merge can be used several\ntimes. Note that specifying a chain in several merge groups will cause\nall chains involved to be merged into a single moleculetype.\n\nThe moleculetype definitions are written to topology include (.itp)\nfiles, using a name consisting of the molecule class (e.g. Protein)\nand the chain identifier. With -name a name can be specified instead.\nBy default, martinize only writes a moleculetype for each unique\nmolecule, inferred from the sequence and the secondary structure\ndefinition. It is possible to force writing a moleculetype definition\nfor every single molecule, using -sep.\n\nThe option -p can be used to write position restraints, using the \nforce constant specified with -pf, which is set to 1000 kJ/mol \nby default.\n\nFor stability, elastic bonds are used to retain the structure of \nextended strands. The option -ed causes dihedrals to be used \ninstead.\n\nDifferent forcefields can be specified with -ff. All the parameters and\noptions belonging to that forcefield  will be set (eg. bonded interactions,\nBB-bead positions, Elastic Network, etc.). By default martini 2.1 is\nused.\n\nElastic network\n---------------\nMartinize can write an elastic network for atom pairs within a cutoff\ndistance. The force constant (-ef) and the upper distance bound (-eu) \ncan be speficied. If a force field with an intrinsic Elastic\nnetwork is specified (eg. Elnedyn) with -ff, -elastic in implied and\nthe default values for the force constant and upper cutoff are used.\nHowever, these can be overwritten.\n\nMultiscaling\n------------\nMartinize can process a structure to yield a multiscale system,\nconsisting of a coordinate file with atomistic parts and\ncorresponding, overlaid coarsegrained parts. For chains that are\nmultiscaled, rather than writing a full moleculetype definition, \nadditional [atoms] and [virtual_sitesn] sections are written, to \nbe appended to the atomistic moleculetype definitions. \nThe option -multi can be specified multiple times, and takes a chain\nidentifier as argument. Alternatively, the keyword 'all' can be given\nas argument, causing all chains to be multiscaled.\n========================================================================\\n\n\"\"\"",
        "\"\"\"Print help text and list of options and end the program.\"\"\"",
        "'''Get the secondary structure, by calling to dssp'''",
        "'''Get user input for the charge of residues, based on list with choises.'''",
        "*NOTE*: This should probably be a CheckableStream class that",
        "*NOTE*: Check for unknown residues and remove them if requested",
        "'''#include \"martini.itp\"\n    \n%s\n  \n%s\n    \n[ system ]\n; name\nMartini system from %s\n    \n[ molecules ]\n; name        number\n%s'''"
    ],
    "functions": [
        "bbGetBead",
        "bbGetBond",
        "bbGetAngle",
        "messages",
        "bbGetBead",
        "bbGetBond",
        "bbGetAngle",
        "messages",
        "bbGetBead",
        "bbGetBond",
        "bbGetAngle",
        "messages",
        "bbGetBead",
        "bbGetBond",
        "bbGetAngle",
        "messages",
        "bbGetBead",
        "bbGetBond",
        "bbGetAngle",
        "messages",
        "bbGetBead",
        "bbGetBond",
        "bbGetAngle",
        "messages",
        "bbGetBead",
        "bbGetBond",
        "bbGetAngle",
        "messages",
        "__nonzero__",
        "__str__",
        "setvalue",
        "help",
        "str2atom",
        "option_parser",
        "spl",
        "nsplit",
        "hash",
        "pat",
        "formatString",
        "cos_angle",
        "norm2",
        "norm",
        "distance2",
        "aver",
        "mapIndex",
        "tt",
        "typesub",
        "ssClassification",
        "call_dssp",
        "decayFunction",
        "rubberBands",
        "pdbBoxString",
        "pdbAtom",
        "pdbOut",
        "isPdbAtom",
        "pdbBoxRead",
        "pdbChains",
        "pdbFrameIterator",
        "groBoxRead",
        "groAtom",
        "groFrameIterator",
        "getChargeType",
        "streamTag",
        "__getitem__",
        "residues",
        "residueDistance2",
        "breaks",
        "contacts",
        "add_dummy",
        "check_merge",
        "__len__",
        "__add__",
        "__eq__",
        "__getitem__",
        "__getslice__",
        "_contains",
        "__contains__",
        "__hash__",
        "atoms",
        "split",
        "getname",
        "set_ss",
        "dss",
        "cg",
        "conect",
        "__nonzero__",
        "__str__",
        "__iadd__",
        "__add__",
        "__eq__",
        "__str__",
        "__getitem__",
        "__iadd__",
        "__add__",
        "__str__",
        "fromAminoAcidSequence",
        "fromNucleicAcidSequence",
        "fromMoleculeList",
        "main"
    ],
    "classes": [
        "elnedyn22p",
        "martini21",
        "elnedyn",
        "martini21p",
        "elnedyn22",
        "martini22",
        "martini22p",
        "Option",
        "CoarseGrained",
        "Residue",
        "Chain",
        "Bonded",
        "Bond",
        "Angle",
        "Vsite",
        "Exclusion",
        "Dihedral",
        "CategorizedList",
        "Topology"
    ]
}