{
    "identifiers": [
        "ts",
        "readFileSync",
        "glob",
        "node",
        "ts",
        "tc",
        "ts",
        "node",
        "ts",
        "ts",
        "node",
        "tc",
        "clazz",
        "tc",
        "clazzType",
        "props",
        "prop",
        "prop",
        "tc",
        "prop",
        "node",
        "propertyName",
        "tc",
        "propertyType",
        "ts",
        "node",
        "node",
        "inspect",
        "node",
        "tc",
        "glob",
        "ts",
        "ts",
        "ts",
        "files",
        "options",
        "program",
        "program",
        "program",
        "diagnostics",
        "diagnostic",
        "diagnostic",
        "diagnostic",
        "diagnostic",
        "diagnostics",
        "program",
        "sourceFile",
        "sourceFile",
        "sourceFile",
        "inspect",
        "sourceFile",
        "program"
    ],
    "literals": [
        "\"typescript\"",
        "\"fs\"",
        "\"glob\"",
        "\" - \"",
        "\"C:/Users/Yousef/Documents/Programming/tweetbeam-client/Beam/**/*.ts\"",
        "\"sync\"",
        "\" \"",
        "\" \"",
        "\"classic/Settings\""
    ],
    "variables": [
        "clazz",
        "clazzType",
        "props",
        "propertyName",
        "propertyType",
        "files",
        "options",
        "program",
        "diagnostics"
    ],
    "comments": [
        "<reference path=\"typings/typescript/typescript.d.ts\" />",
        "export function delint(sourceFile: ts.SourceFile) {\n    delintNode(sourceFile);\n\n    function delintNode(node: ts.Node) {\n     \n        if (node.kind == ts.SyntaxKind.ClassDeclaration) {\n            let clazz = <ts.ClassDeclaration>node;\n            clazz.members.forEach((member) => {\n                if (member.kind == ts.SyntaxKind.PropertyDeclaration) {\n                    let property = <ts.PropertyDeclaration>member;\n                    let propertyType = property.type.getText();\n                    let propertyName = property.name.getText();\n                    console.log(propertyName + \" - \" + propertyType);\n                }\n            });\n        } else {\n\n            ts.forEachChild(node, delintNode);\n        }\n    }\n\n}\n\n\n\n\nconst fileNames = [\"C:\\\\Users\\\\Yousef\\\\Documents\\\\Programming\\\\tweetbeam-client\\\\Beam\\\\view\\\\classic\\\\Settings.ts\"];//process.argv.slice(2);\nfileNames.forEach(fileName => {\n    // Parse a file\n    let sourceFile = ts.createSourceFile(fileName, readFileSync(fileName).toString(), ts.ScriptTarget.ES6, true);\n    \n    // delint it\n    delint(sourceFile);\n});",
        "props[0].getDocumentationComment()",
        "clazz.members.forEach((member) => {\n            if (member.kind == ts.SyntaxKind.PropertyDeclaration) {\n                let property = <ts.PropertyDeclaration>member;\n                let propertyType = tc.getTypeAtLocation(member);\n                let propertyName = property.name.getText();\n\n               \n                \n            \n                console.log(propertyName + \" - \" + tc.typeToString(propertyType));\n                if (property.decorators) {\n                    property.decorators.forEach((decorator) => console.log(decorator.getText()));\n                }\n            }\n        });"
    ],
    "docstrings": [],
    "functions": [
        "inspect"
    ],
    "classes": []
}