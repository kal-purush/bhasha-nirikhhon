{
    "identifiers": [
        "sys",
        "os",
        "pylab",
        "pl",
        "numpy",
        "np",
        "lmfit",
        "minimize",
        "Parameters",
        "report_errors",
        "x",
        "y",
        "bin_size",
        "medianbin",
        "np",
        "array",
        "x",
        "argsort",
        "x",
        "inds",
        "y",
        "inds",
        "i",
        "len",
        "y",
        "x_rebinned",
        "append",
        "x",
        "i",
        "medianbin",
        "j",
        "bin_size",
        "i",
        "len",
        "y",
        "bin_values",
        "append",
        "y",
        "i",
        "average",
        "y",
        "i",
        "j",
        "i",
        "average",
        "j",
        "average",
        "j",
        "bin_size",
        "i",
        "len",
        "y",
        "bin_values",
        "append",
        "y",
        "i",
        "j",
        "i",
        "np",
        "median",
        "bin_values",
        "np",
        "median",
        "np",
        "abs",
        "average",
        "np",
        "array",
        "bin_values",
        "len",
        "bin_values",
        "mad",
        "stdv_bins",
        "append",
        "stdv",
        "y_rebinned",
        "append",
        "average",
        "x_rebinned",
        "y_rebinned",
        "stdv_bins",
        "data",
        "sigma",
        "binsize",
        "dependent_var",
        "dependent_var",
        "i",
        "len",
        "data",
        "max",
        "i",
        "binsize",
        "min",
        "len",
        "data",
        "i",
        "binsize",
        "data",
        "bin_begin",
        "bin_end",
        "np",
        "nanstd",
        "np",
        "sort",
        "the_bin",
        "np",
        "median",
        "the_bin",
        "median",
        "sigma",
        "std",
        "median",
        "sigma",
        "std",
        "upperlist",
        "append",
        "upperbound",
        "lowerlist",
        "append",
        "lowerbound",
        "data",
        "i",
        "upperbound",
        "data",
        "i",
        "lowerbound",
        "data_clipped",
        "append",
        "data",
        "i",
        "dependent_var",
        "dep_var_clipped",
        "append",
        "dependent_var",
        "i",
        "i",
        "dependent_var",
        "data_clipped",
        "dep_var_clipped",
        "upperlist",
        "lowerlist",
        "data_clipped",
        "data",
        "sigma",
        "dependent_var",
        "iterative",
        "top_only",
        "repeat",
        "np",
        "array",
        "data",
        "np",
        "nanmean",
        "data",
        "np",
        "nanstd",
        "data",
        "top_only",
        "data",
        "mean",
        "sigma",
        "std",
        "data",
        "mean",
        "sigma",
        "std",
        "data",
        "mean",
        "sigma",
        "std",
        "data",
        "unclipped",
        "dependent_var",
        "np",
        "array",
        "dependent_var",
        "dependent_var",
        "unclipped",
        "iterative",
        "np",
        "sum",
        "unclipped",
        "dependent_var",
        "data",
        "dependent_var",
        "data",
        "y",
        "window_size",
        "order",
        "deriv",
        "rate",
        "numpy",
        "np",
        "math",
        "factorial",
        "np",
        "abs",
        "np",
        "window_size",
        "np",
        "abs",
        "np",
        "order",
        "ValueError",
        "msg",
        "ValueError",
        "window_size",
        "window_size",
        "window_size",
        "order",
        "order",
        "window_size",
        "np",
        "mat",
        "k",
        "i",
        "i",
        "order_range",
        "k",
        "half_window",
        "half_window",
        "np",
        "linalg",
        "pinv",
        "b",
        "A",
        "deriv",
        "rate",
        "deriv",
        "factorial",
        "deriv",
        "y",
        "np",
        "abs",
        "y",
        "half_window",
        "y",
        "y",
        "np",
        "abs",
        "y",
        "half_window",
        "y",
        "np",
        "concatenate",
        "firstvals",
        "y",
        "lastvals",
        "np",
        "convolve",
        "m",
        "y",
        "mode"
    ],
    "literals": [
        "r\"\"\"Smooth (and optionally differentiate) data with a Savitzky-Golay filter.\n    The Savitzky-Golay filter removes high frequency noise from data.\n    It has the advantage of preserving the original shape and\n    features of the signal better than other types of filtering\n    approaches, such as moving averages techniques.\n    Parameters\n    ----------\n    y : array_like, shape (N,)\n        the values of the time history of the signal.\n    window_size : int\n        the length of the window. Must be an odd integer number.\n    order : int\n        the order of the polynomial used in the filtering.\n        Must be less then `window_size` - 1.\n    deriv: int\n        the order of the derivative to compute (default = 0 means only smoothing)\n    Returns\n    -------\n    ys : ndarray, shape (N)\n        the smoothed signal (or it's n-th derivative).\n    Notes\n    -----\n    The Savitzky-Golay is a type of low-pass filter, particularly\n    suited for smoothing noisy data. The main idea behind this\n    approach is to make for each point a least-square fit with a\n    polynomial of high order over a odd-sized window centered at\n    the point.\n    Examples\n    --------\n    t = np.linspace(-4, 4, 500)\n    y = np.exp( -t**2 ) + np.random.normal(0, 0.05, t.shape)\n    ysg = savitzky_golay(y, window_size=31, order=4)\n    import matplotlib.pyplot as plt\n    plt.plot(t, y, label='Noisy signal')\n    plt.plot(t, np.exp(-t**2), 'k', lw=1.5, label='Original signal')\n    plt.plot(t, ysg, 'r', label='Filtered signal')\n    plt.legend()\n    plt.show()\n    References\n    ----------\n    .. [1] A. Savitzky, M. J. E. Golay, Smoothing and Differentiation of\n       Data by Simplified Least Squares Procedures. Analytical\n       Chemistry, 1964, 36 (8), pp 1627-1639.\n    .. [2] Numerical Recipes 3rd Edition: The Art of Scientific Computing\n       W.H. Press, S.A. Teukolsky, W.T. Vetterling, B.P. Flannery\n       Cambridge University Press ISBN-13: 9780521880688\n    \"\"\"",
        "\"window_size and order have to be of type int\"",
        "\"window_size size must be a positive odd number\"",
        "\"window_size is too small for the polynomials order\"",
        "'valid'"
    ],
    "variables": [
        "inds",
        "x",
        "y",
        "x_rebinned",
        "y_rebinned",
        "stdv_bins",
        "i",
        "j",
        "average",
        "bin_values",
        "j",
        "i",
        "average",
        "stdv",
        "j",
        "i",
        "average",
        "mad",
        "stdv",
        "dep_var_clipped",
        "data_clipped",
        "upperlist",
        "lowerlist",
        "i",
        "bin_begin",
        "bin_end",
        "the_bin",
        "std",
        "median",
        "upperbound",
        "lowerbound",
        "i",
        "repeat",
        "data",
        "mean",
        "std",
        "unclipped",
        "unclipped",
        "data",
        "dependent_var",
        "dependent_var",
        "repeat",
        "repeat",
        "window_size",
        "order",
        "order_range",
        "half_window",
        "b",
        "m",
        "firstvals",
        "lastvals",
        "y"
    ],
    "comments": [
        "general python files",
        "FIXME calculate proper stdv in case of medianbinning",
        "",
        "Auxiliary function to do a binning, either mean or median",
        "",
        "find stdv",
        "stdv = np.std(bin_values) / (len(bin_values)**0.5)",
        "",
        "Sigma clipping (running): find local outliers",
        "",
        "",
        "Auxiliary to sigma clip, option to run more than once, and to include only top data points (lower outliers may be transit events so we have to be careful what we clip)",
        "",
        "sigma clip data for outliers beyond sigma",
        "array of true and false",
        "print 'Data points removed:'",
        "print np.sum(~unclipped)",
        "print 'Repeating..'",
        "print 'End of sigma clipping, data points removed:'",
        "print np.sum(~unclipped)",
        "precompute coefficients",
        "pad the signal at the extremes with",
        "values taken from the signal itself"
    ],
    "docstrings": [],
    "functions": [
        "rebin_dataset",
        "running_sigma_clip",
        "sigma_clip",
        "savitzky_golay"
    ],
    "classes": []
}