{
    "identifiers": [
        "com",
        "noviumcollective",
        "weatherist",
        "android",
        "content",
        "ContentUris",
        "android",
        "content",
        "ContentValues",
        "android",
        "content",
        "Context",
        "android",
        "database",
        "Cursor",
        "android",
        "net",
        "Uri",
        "android",
        "os",
        "AsyncTask",
        "android",
        "text",
        "format",
        "Time",
        "android",
        "util",
        "Log",
        "com",
        "noviumcollective",
        "weatherist",
        "data",
        "WeatherContract",
        "org",
        "json",
        "JSONArray",
        "org",
        "json",
        "JSONException",
        "org",
        "json",
        "JSONObject",
        "java",
        "io",
        "BufferedReader",
        "java",
        "io",
        "java",
        "io",
        "InputStream",
        "java",
        "io",
        "InputStreamReader",
        "java",
        "net",
        "HttpURLConnection",
        "java",
        "net",
        "URL",
        "java",
        "util",
        "LOG_TAG",
        "getSimpleName",
        "mContext",
        "context",
        "mContext",
        "context",
        "DEBUG",
        "locationSetting",
        "cityName",
        "lat",
        "lon",
        "locationId",
        "locationCursor",
        "mContext",
        "getContentResolver",
        "query",
        "WeatherContract",
        "LocationEntry",
        "CONTENT_URI",
        "WeatherContract",
        "LocationEntry",
        "_ID",
        "WeatherContract",
        "LocationEntry",
        "COLUMN_LOCATION_SETTING",
        "locationSetting",
        "locationCursor",
        "moveToFirst",
        "locationIdIndex",
        "locationCursor",
        "getColumnIndex",
        "WeatherContract",
        "LocationEntry",
        "_ID",
        "locationId",
        "locationCursor",
        "getLong",
        "locationIdIndex",
        "locationValues",
        "locationValues",
        "put",
        "WeatherContract",
        "LocationEntry",
        "COLUMN_CITY_NAME",
        "cityName",
        "locationValues",
        "put",
        "WeatherContract",
        "LocationEntry",
        "COLUMN_LOCATION_SETTING",
        "locationSetting",
        "locationValues",
        "put",
        "WeatherContract",
        "LocationEntry",
        "COLUMN_COORD_LAT",
        "lat",
        "locationValues",
        "put",
        "WeatherContract",
        "LocationEntry",
        "COLUMN_COORD_LONG",
        "lon",
        "insertedUri",
        "mContext",
        "getContentResolver",
        "insert",
        "WeatherContract",
        "LocationEntry",
        "CONTENT_URI",
        "locationValues",
        "locationId",
        "ContentUris",
        "parseId",
        "insertedUri",
        "locationCursor",
        "close",
        "locationId",
        "forecastJsonStr",
        "locationSetting",
        "OWM_CITY",
        "OWM_CITY_NAME",
        "OWM_COORD",
        "OWM_LATITUDE",
        "OWM_LONGITUDE",
        "OWM_LIST",
        "OWM_PRESSURE",
        "OWM_HUMIDITY",
        "OWM_WINDSPEED",
        "OWM_WIND_DIRECTION",
        "OWM_TEMPERATURE",
        "OWM_MAX",
        "OWM_MIN",
        "OWM_WEATHER",
        "OWM_DESCRIPTION",
        "OWM_WEATHER_ID",
        "forecastJson",
        "forecastJsonStr",
        "weatherArray",
        "forecastJson",
        "getJSONArray",
        "OWM_LIST",
        "cityJson",
        "forecastJson",
        "getJSONObject",
        "OWM_CITY",
        "cityName",
        "cityJson",
        "getString",
        "OWM_CITY_NAME",
        "cityCoord",
        "cityJson",
        "getJSONObject",
        "OWM_COORD",
        "cityLatitude",
        "cityCoord",
        "getDouble",
        "OWM_LATITUDE",
        "cityLongitude",
        "cityCoord",
        "getDouble",
        "OWM_LONGITUDE",
        "locationId",
        "addLocation",
        "locationSetting",
        "cityName",
        "cityLatitude",
        "cityLongitude",
        "cVVector",
        "weatherArray",
        "length",
        "dayTime",
        "dayTime",
        "setToNow",
        "julianStartDay",
        "Time",
        "getJulianDay",
        "currentTimeMillis",
        "dayTime",
        "gmtoff",
        "dayTime",
        "i",
        "i",
        "weatherArray",
        "length",
        "i",
        "dateTime",
        "pressure",
        "humidity",
        "windSpeed",
        "windDirection",
        "high",
        "low",
        "description",
        "weatherId",
        "dayForecast",
        "weatherArray",
        "getJSONObject",
        "i",
        "dateTime",
        "dayTime",
        "setJulianDay",
        "julianStartDay",
        "i",
        "pressure",
        "dayForecast",
        "getDouble",
        "OWM_PRESSURE",
        "humidity",
        "dayForecast",
        "getInt",
        "OWM_HUMIDITY",
        "windSpeed",
        "dayForecast",
        "getDouble",
        "OWM_WINDSPEED",
        "windDirection",
        "dayForecast",
        "getDouble",
        "OWM_WIND_DIRECTION",
        "weatherObject",
        "dayForecast",
        "getJSONArray",
        "OWM_WEATHER",
        "getJSONObject",
        "description",
        "weatherObject",
        "getString",
        "OWM_DESCRIPTION",
        "weatherId",
        "weatherObject",
        "getInt",
        "OWM_WEATHER_ID",
        "temperatureObject",
        "dayForecast",
        "getJSONObject",
        "OWM_TEMPERATURE",
        "high",
        "temperatureObject",
        "getDouble",
        "OWM_MAX",
        "low",
        "temperatureObject",
        "getDouble",
        "OWM_MIN",
        "weatherValues",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_LOC_KEY",
        "locationId",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_DATE",
        "dateTime",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_HUMIDITY",
        "humidity",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_PRESSURE",
        "pressure",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_WIND_SPEED",
        "windSpeed",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_DEGREES",
        "windDirection",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_MAX_TEMP",
        "high",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_MIN_TEMP",
        "low",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_SHORT_DESC",
        "description",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_WEATHER_ID",
        "weatherId",
        "cVVector",
        "add",
        "weatherValues",
        "inserted",
        "cVVector",
        "size",
        "cvArray",
        "cVVector",
        "size",
        "cVVector",
        "toArray",
        "cvArray",
        "inserted",
        "mContext",
        "getContentResolver",
        "bulkInsert",
        "WeatherContract",
        "WeatherEntry",
        "CONTENT_URI",
        "cvArray",
        "Log",
        "d",
        "LOG_TAG",
        "inserted",
        "e",
        "Log",
        "e",
        "LOG_TAG",
        "e",
        "getMessage",
        "e",
        "e",
        "printStackTrace",
        "Override",
        "length",
        "locationQuery",
        "urlConnection",
        "reader",
        "forecastJsonStr",
        "format",
        "units",
        "numDays",
        "FORECAST_BASE_URL",
        "QUERY_PARAM",
        "FORMAT_PARAM",
        "UNITS_PARAM",
        "DAYS_PARAM",
        "builtUri",
        "Uri",
        "parse",
        "FORECAST_BASE_URL",
        "buildUpon",
        "appendQueryParameter",
        "QUERY_PARAM",
        "appendQueryParameter",
        "FORMAT_PARAM",
        "format",
        "appendQueryParameter",
        "UNITS_PARAM",
        "units",
        "appendQueryParameter",
        "DAYS_PARAM",
        "toString",
        "numDays",
        "build",
        "url",
        "builtUri",
        "toString",
        "urlConnection",
        "url",
        "openConnection",
        "urlConnection",
        "setRequestMethod",
        "urlConnection",
        "connect",
        "inputStream",
        "urlConnection",
        "getInputStream",
        "buffer",
        "inputStream",
        "reader",
        "inputStream",
        "line",
        "line",
        "reader",
        "readLine",
        "buffer",
        "append",
        "line",
        "buffer",
        "length",
        "forecastJsonStr",
        "buffer",
        "toString",
        "getWeatherDataFromJson",
        "forecastJsonStr",
        "locationQuery",
        "e",
        "Log",
        "e",
        "LOG_TAG",
        "e",
        "e",
        "Log",
        "e",
        "LOG_TAG",
        "e",
        "getMessage",
        "e",
        "e",
        "printStackTrace",
        "urlConnection",
        "urlConnection",
        "disconnect",
        "reader",
        "reader",
        "close",
        "e",
        "Log",
        "e",
        "LOG_TAG",
        "e"
    ],
    "literals": [
        "\" = ?\"",
        "\"city\"",
        "\"name\"",
        "\"coord\"",
        "\"lat\"",
        "\"lon\"",
        "\"list\"",
        "\"pressure\"",
        "\"humidity\"",
        "\"speed\"",
        "\"deg\"",
        "\"temp\"",
        "\"max\"",
        "\"min\"",
        "\"weather\"",
        "\"main\"",
        "\"id\"",
        "\"FetchWeatherTask Complete. \"",
        "\" Inserted\"",
        "\"json\"",
        "\"metric\"",
        "\"http://api.openweathermap.org/data/2.5/forecast/daily?\"",
        "\"q\"",
        "\"mode\"",
        "\"units\"",
        "\"cnt\"",
        "\"GET\"",
        "\"\\n\"",
        "\"Error \"",
        "\"Error closing stream\""
    ],
    "variables": [
        "mContext",
        "locationId",
        "dateTime",
        "pressure",
        "humidity",
        "windSpeed",
        "windDirection",
        "high",
        "low",
        "description",
        "weatherId",
        "params",
        "line"
    ],
    "comments": [
        "Now we have a String representing the complete forecast in JSON Format.",
        "Fortunately parsing is easy:  constructor takes the JSON string and converts it",
        "into an Object hierarchy for us.",
        "These are the names of the JSON objects that need to be extracted.",
        "Location information",
        "Location coordinate",
        "Weather information.  Each day's forecast info is an element of the \"list\" array.",
        "All temperatures are children of the \"temp\" object.",
        "Insert the new weather information into the database",
        "OWM returns daily forecasts based upon the local time of the city that is being",
        "asked for, which means that we need to know the GMT offset to translate this data",
        "properly.",
        "Since this data is also sent in-order and the first day is always the",
        "current day, we're going to take advantage of that to get a nice",
        "normalized UTC date for all of our weather.",
        "we start at the day returned by local time. Otherwise this is a mess.",
        "now we work exclusively in UTC",
        "These are the values that will be collected.",
        "Get the JSON object representing the day",
        "Cheating to convert this to UTC time, which is what we want anyhow",
        "Description is in a child array called \"weather\", which is 1 element long.",
        "That element also contains a weather code.",
        "Temperatures are in a child object called \"temp\".  Try not to name variables",
        "\"temp\" when working with temperature.  It confuses everybody.",
        "add to database",
        "If there's no zip code, there's nothing to look up.  Verify size of params.",
        "These two need to be declared outside the try/catch",
        "so that they can be closed in the finally block.",
        "Will contain the raw JSON response as a string.",
        "Construct the URL for the OpenWeatherMap query",
        "Possible parameters are avaiable at OWM's forecast API page, at",
        "http://openweathermap.org/API#forecast",
        "Create the request to OpenWeatherMap, and open the connection",
        "Read the input stream into a String",
        "Nothing to do.",
        "Since it's JSON, adding a newline isn't necessary (it won't affect parsing)",
        "But it does make debugging a *lot* easier if you print out the completed",
        "buffer for debugging.",
        "Stream was empty.  No point in parsing.",
        "If the code didn't successfully get the weather data, there's no point in attemping",
        "to parse it.",
        "This will only happen if there was an error getting or parsing the forecast."
    ],
    "docstrings": [
        "* Created by Nicholas on 9/22/15.",
        "* Helper method to handle insertion of a new location in the weather database.\n     *\n     * @param locationSetting The location string used to request updates from the server.\n     * @param cityName A human-readable city name, e.g \"Mountain View\"\n     * @param lat the latitude of the city\n     * @param lon the longitude of the city\n     * @return the row ID of the added location.",
        "* Take the String representing the complete forecast in JSON Format and\n     * pull out the data we need to construct the Strings needed for the wireframes.\n     *\n     * Fortunately parsing is easy:  constructor takes the JSON string and converts it\n     * into an Object hierarchy for us."
    ],
    "functions": [
        "FetchWeatherTask",
        "addLocation",
        "getWeatherDataFromJson",
        "Void",
        "doInBackground"
    ],
    "classes": [
        "FetchWeatherTask"
    ]
}