{
    "identifiers": [
        "key",
        "value",
        "value",
        "i",
        "len",
        "i",
        "value",
        "i",
        "mark",
        "match",
        "mark",
        "mark",
        "slices",
        "parseInt",
        "match",
        "parseInt",
        "match",
        "mark",
        "marksWithoutSlices",
        "parseInt",
        "match",
        "parseInt",
        "match",
        "mark",
        "value",
        "BLOCK_MARKER",
        "blockIndex",
        "blockBoundaryPositions",
        "blockIndex",
        "blockIndex",
        "value",
        "BLOCK_MARKER",
        "blockIndex",
        "blockBoundaryPositions",
        "value",
        "slices",
        "i",
        "len",
        "i",
        "slices",
        "i",
        "value",
        "start",
        "end",
        "blockBoundaryPositions",
        "j",
        "jlen",
        "j",
        "blockBoundaryPositions",
        "j",
        "position",
        "start",
        "position",
        "end",
        "value",
        "j",
        "blocks",
        "block",
        "blocks",
        "block",
        "block",
        "block",
        "parentIndex",
        "blocks",
        "offset",
        "text",
        "BLOCK_MARKER",
        "text",
        "blocks",
        "TEXT",
        "TEXT",
        "marksWithoutSlices",
        "j",
        "jlen",
        "j",
        "marksWithoutSlices",
        "j",
        "mark",
        "start",
        "mark",
        "end",
        "mark",
        "start",
        "mark",
        "end",
        "mark",
        "start",
        "offset",
        "mark",
        "start",
        "end",
        "start",
        "offset",
        "mark",
        "adjustedStart",
        "adjustedEnd",
        "mark",
        "mark",
        "marks",
        "mark",
        "mark",
        "adjustedStart",
        "adjustedEnd",
        "sliceMap",
        "rangesToDelete",
        "j",
        "jlen",
        "j",
        "rangesToDelete",
        "j",
        "start",
        "rangeToDelete",
        "start",
        "rangeToDelete",
        "rangeToDelete",
        "rangeToDelete",
        "end",
        "isRangeInserted",
        "end",
        "rangeToDelete",
        "end",
        "rangeToDelete",
        "rangeToDelete",
        "rangeToDelete",
        "start",
        "isRangeInserted",
        "isRangeInserted",
        "rangesToDelete",
        "start",
        "end",
        "rangesToDelete",
        "firstRange",
        "value",
        "firstRange",
        "firstRange",
        "firstRange",
        "rangesToDelete",
        "i",
        "len",
        "i",
        "text",
        "value",
        "rangesToDelete",
        "i",
        "rangesToDelete",
        "i",
        "lastEnd",
        "rangesToDelete",
        "i",
        "text",
        "text",
        "value",
        "lastEnd",
        "mark",
        "marksWithoutSlices",
        "rangesToDelete",
        "mark",
        "mark",
        "isKept",
        "mark",
        "mark",
        "startOffset",
        "mark",
        "mark",
        "startOffset",
        "mark",
        "mark",
        "endOffset",
        "mark",
        "mark",
        "endOffset",
        "isKept",
        "mark",
        "startOffset",
        "mark",
        "endOffset",
        "marks",
        "mark",
        "mark",
        "start",
        "end",
        "mark",
        "mark",
        "blockBoundaryPositions",
        "i",
        "len",
        "i",
        "blockBoundaryPositions",
        "i",
        "rangesToDelete",
        "isKept",
        "isKept",
        "position",
        "position",
        "isKept",
        "value",
        "i",
        "blocks",
        "value",
        "i",
        "sliceMap",
        "value",
        "value",
        "BLOCK_MARKER",
        "value",
        "value",
        "ROOT",
        "blocks",
        "i",
        "len",
        "i",
        "blocks",
        "i",
        "chunks",
        "i",
        "chunk",
        "chunk",
        "blockStart",
        "chunk",
        "block",
        "stack",
        "stack",
        "stack",
        "stack",
        "ROOT",
        "block",
        "block",
        "TEXT",
        "parentId",
        "block",
        "tree",
        "parentId",
        "tree",
        "parentId",
        "block",
        "TEXT",
        "tree",
        "parentId",
        "block",
        "tree",
        "blockId",
        "tree",
        "blockId",
        "blocks",
        "i",
        "nextBlock",
        "nextBlock",
        "nextBlock",
        "nextBlock",
        "block",
        "text",
        "nextBlock",
        "i",
        "chunk",
        "chunks",
        "i",
        "blockEnd",
        "chunk",
        "chunk",
        "text",
        "chunk",
        "nextBlock",
        "blocks",
        "i",
        "marks",
        "j",
        "jlen",
        "j",
        "marks",
        "j",
        "mark",
        "blockStart",
        "mark",
        "blockEnd",
        "mark",
        "blockStart",
        "mark",
        "blockEnd",
        "scopedMarks",
        "mark",
        "scopedMarks",
        "tree",
        "blockId",
        "text",
        "scopedMarks",
        "i",
        "len",
        "i",
        "scopedMarks",
        "i",
        "start",
        "blockStart",
        "start",
        "end",
        "blockEnd",
        "end",
        "indexes",
        "start",
        "indexes",
        "start",
        "indexes",
        "end",
        "indexes",
        "end",
        "indexes",
        "a",
        "b",
        "a",
        "b",
        "indexes",
        "i",
        "len",
        "i",
        "indexes",
        "i",
        "start",
        "end",
        "blockEnd",
        "start",
        "scopedMarks",
        "mark",
        "mark",
        "blockStart",
        "start",
        "mark",
        "mark",
        "a",
        "b",
        "b",
        "a",
        "scopedMarks",
        "mark",
        "mark",
        "blockEnd",
        "end",
        "markStack",
        "startingMarks",
        "markStack",
        "i",
        "len",
        "i",
        "markStack",
        "i",
        "parentId",
        "ROOT",
        "mark",
        "parentId",
        "mark",
        "tree",
        "parentId",
        "parent",
        "j",
        "jlen",
        "j",
        "parent",
        "j",
        "isInserted",
        "isInserted",
        "node",
        "node",
        "id",
        "isInserted",
        "tree",
        "parentId",
        "mark",
        "parentId",
        "id",
        "tree",
        "parentId",
        "tree",
        "parentId",
        "end",
        "blockStart",
        "consumedTextLength",
        "markEnd",
        "text",
        "part",
        "part",
        "part",
        "markEnd",
        "consumedTextLength",
        "tree",
        "parentId",
        "part",
        "markEnd",
        "consumedTextLength",
        "text",
        "part",
        "markEnd",
        "consumedTextLength",
        "consumedTextLength",
        "markEnd",
        "tree",
        "parentId",
        "part",
        "consumedTextLength",
        "part",
        "tree",
        "parentId",
        "part",
        "consumedTextLength",
        "closingMark",
        "closingMarks",
        "markStack",
        "closingMark",
        "index",
        "tree",
        "parentId",
        "closingMark",
        "tree",
        "closingMark",
        "markStack",
        "index",
        "start",
        "end",
        "tree",
        "blockId",
        "text",
        "block",
        "block",
        "TEXT",
        "stack",
        "block",
        "blockStart",
        "blockEnd",
        "tree"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"\\uFFFC\"",
        "\"root\"",
        "\"text\"",
        "string",
        "Malformed range ${mark.range}",
        "\"slice\"",
        "string",
        "string",
        "${slice.id}-${block.id}",
        "${BLOCK_MARKER}${text}",
        "${TEXT}-${slice.id}",
        "${mark.range[0]}${adjustedStart}..${adjustedEnd}${\n          mark.range[mark.range.length - 1]\n        }",
        "${slice.id}-${mark.id}",
        "\"\"",
        "${mark.range[0]}${start}..${end}${\n          mark.range[mark.range.length - 1]\n        }",
        "string",
        "\"\"",
        "string",
        "string",
        "string",
        "string",
        "${parentId}-${mark.id}",
        "\"string\"",
        "\"string\""
    ],
    "variables": [
        "BLOCK_MARKER",
        "ROOT",
        "TEXT",
        "marksWithoutSlices",
        "slices",
        "i",
        "len",
        "mark",
        "match",
        "sliceMap",
        "blockBoundaryPositions",
        "blockIndex",
        "rangesToDelete",
        "i",
        "len",
        "text",
        "blocks",
        "j",
        "jlen",
        "position",
        "block",
        "parentIndex",
        "offset",
        "marks",
        "j",
        "jlen",
        "mark",
        "adjustedStart",
        "adjustedEnd",
        "isRangeInserted",
        "j",
        "jlen",
        "rangeToDelete",
        "firstRange",
        "text",
        "lastEnd",
        "i",
        "len",
        "marks",
        "isKept",
        "startOffset",
        "endOffset",
        "start",
        "end",
        "blocks",
        "i",
        "len",
        "position",
        "isKept",
        "chunks",
        "blocks",
        "marks",
        "tree",
        "stack",
        "blockStart",
        "i",
        "len",
        "block",
        "chunk",
        "text",
        "blockEnd",
        "parentId",
        "blockId",
        "nextBlock",
        "scopedMarks",
        "j",
        "jlen",
        "mark",
        "indexes",
        "i",
        "len",
        "start",
        "blockStart",
        "consumedTextLength",
        "markStack",
        "i",
        "len",
        "end",
        "startingMarks",
        "closingMarks",
        "parentId",
        "blockId",
        "i",
        "len",
        "mark",
        "id",
        "parent",
        "isInserted",
        "j",
        "jlen",
        "node",
        "markEnd",
        "part",
        "index"
    ],
    "comments": [
        "eslint @typescript-eslint/no-empty-interface: 0",
        "A list of text ranges to remove for the remainder",
        "document. The remainder will be constructed after the",
        "slices are extracted so we don't have duplicated text.",
        "Keep searching forward",
        "Add the block to the slice blocks list",
        "If the block index is after the slice, we can safely break",
        "from the loop, saving some extra work.",
        "After collecting blocks, we'll need to do a pass",
        "over the text and blocks to ensure that it's well",
        "formed and there's a block parent for all text.",
        "For slicing purposes, we only consider marks whose",
        "boundaries are within the slice to be represented.",
        "After handling the slice map, we'll be handling the",
        "remainder of the document that excludes slices.",
        "For cases where the underlying range is retained,",
        "the content will be kept.",
        "If the slice is retained, we get to skip this",
        "step since we want marks to be kept intact",
        "Add the slice to the ranges to delete",
        "Extend the end of the range if the start is",
        "within the current range",
        "Extend the start of the range if the end is",
        "within the current range",
        "If the slice wasn't within a range or extended a range,",
        "append it to the list of ranges to remove",
        "If the mark is fully inside the range,",
        "it won't be represented in the remainder document",
        "Get range offset information",
        "for marks that are added",
        "If the start is inside of the range,",
        "clamp it to the range start.",
        "If the start is after the range,",
        "we can add the whole range to the offset",
        "If the end is inside of the range,",
        "clamp it to the range start.",
        "If the end is after the range,",
        "we can add the whole range to the offset",
        "Consume any self-closing tokens inside this block",
        "If there's no marks, we can return the text as a single chunk",
        "To chunk the text properly, we need to handle several cases:",
        "1. Overlapping marks",
        "2. Nested marks",
        "3. Marks going outside the block boundary",
        "First, we'll mark indexes where mark boundaries are",
        "Now with the mark boundaries, we can construct a tree",
        "of items in the block",
        "We'll walk through the ranges and insert nodes into",
        "the correct parent",
        "Then add marks that are starting from this position",
        "Check to see if the mark has already been inserted",
        "into the tree. There's no cases where we'll have",
        "marks that are disjoint at the same level of the",
        "tree, since marks are all treated the same.",
        "Remove from the stack marks that have ended first",
        "Self-closing mark"
    ],
    "docstrings": [
        "* The block boundary marker character,\n * used to indicate the start of block\n * boundaries.",
        "* The name of the root id for the map\n * of ids -> nodes. This is used as\n * a known entry point for rendering\n * the full tree.",
        "* Used for text type"
    ],
    "functions": [
        "extractSlices",
        "createTree"
    ],
    "classes": []
}