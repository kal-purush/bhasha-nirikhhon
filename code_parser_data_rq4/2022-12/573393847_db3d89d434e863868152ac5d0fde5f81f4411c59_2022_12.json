{
    "identifiers": [
        "argparse",
        "inspect",
        "datetime",
        "datetime",
        "timedelta",
        "importlib",
        "util",
        "module_from_spec",
        "spec_from_file_location",
        "inspect",
        "FullArgSpec",
        "getmembers",
        "isclass",
        "pathlib",
        "Path",
        "types",
        "FunctionType",
        "ModuleType",
        "typing",
        "Any",
        "Dict",
        "Optional",
        "unittest",
        "mock",
        "patch",
        "pandas",
        "pd",
        "pandas",
        "tseries",
        "holiday",
        "USFederalHolidayCalendar",
        "openbb_terminal",
        "openbb_terminal",
        "decorators",
        "disable_check_api",
        "openbb_terminal",
        "parent_classes",
        "BaseController",
        "CryptoBaseController",
        "disable_check_api",
        "pd",
        "DataFrame",
        "from_dict",
        "data",
        "pd",
        "Timestamp",
        "pd",
        "Timestamp",
        "orient",
        "datetime",
        "now",
        "pd",
        "bdate_range",
        "dt",
        "strftime",
        "dt",
        "timedelta",
        "days",
        "strftime",
        "freq",
        "pd",
        "offsets",
        "CustomBusinessDay",
        "calendar",
        "USFederalHolidayCalendar",
        "tolist",
        "x",
        "strftime",
        "x",
        "bdays_indx",
        "x",
        "weekday",
        "expiration",
        "get_expiration_date",
        "pd",
        "DataFrame",
        "DF_STOCK",
        "Dict",
        "DF_STOCK",
        "controller_cls",
        "BaseController",
        "Dict",
        "Any",
        "inspect",
        "signature",
        "controller_cls",
        "Dict",
        "Any",
        "param",
        "signature",
        "parameters",
        "values",
        "param",
        "name",
        "param",
        "name",
        "issubclass",
        "controller_cls",
        "CryptoBaseController",
        "param",
        "inspect",
        "Parameter",
        "empty",
        "param",
        "kind",
        "inspect",
        "Parameter",
        "VAR_KEYWORD",
        "param_name",
        "value",
        "param_name_to_value",
        "items",
        "param",
        "name",
        "param_name",
        "param",
        "name",
        "value",
        "param",
        "name",
        "kwargs",
        "param_type",
        "value",
        "param_type_to_value",
        "items",
        "isinstance",
        "param_type",
        "param",
        "annotation",
        "param_type",
        "param",
        "name",
        "value",
        "param",
        "annotation",
        "param_type",
        "param",
        "name",
        "value",
        "kwargs",
        "controller",
        "BaseController",
        "trailmap",
        "controller",
        "get_parameters",
        "controller",
        "trailmap",
        "trailmap",
        "split",
        "Dict",
        "argparse",
        "ArgumentParser",
        "Dict",
        "FunctionType",
        "Dict",
        "FullArgSpec",
        "get_commands",
        "get_all_command_parsers",
        "name",
        "_",
        "getmembers",
        "controller",
        "predicate",
        "inspect",
        "ismethod",
        "name",
        "startswith",
        "name",
        "ignore",
        "getattr",
        "controller",
        "name",
        "hasattr",
        "func",
        "func",
        "__wrapped__",
        "hasattr",
        "func",
        "func",
        "__wrapped__",
        "cmd_funcs",
        "func",
        "cmd_fullspec",
        "inspect",
        "getfullargspec",
        "func",
        "cmd_fullspec",
        "name",
        "args",
        "inspect",
        "getsource",
        "func",
        "commands",
        "append",
        "name",
        "commands",
        "command",
        "Optional",
        "argparse",
        "ArgumentParser",
        "command",
        "cmd_parsers",
        "_get_parser",
        "command",
        "command",
        "cmd_parsers",
        "cmd_parsers",
        "command",
        "command",
        "fparser",
        "argparse",
        "ArgumentParser",
        "args",
        "kwargs",
        "cmd_parsers",
        "fparser",
        "patch",
        "controller",
        "mock_func",
        "_",
        "cmd_fullspec",
        "command",
        "fullspec",
        "args",
        "len",
        "fullspec",
        "args",
        "args",
        "update",
        "arg",
        "arg",
        "fullspec",
        "args",
        "patch",
        "getattr",
        "controller",
        "command",
        "args",
        "SystemExit",
        "e",
        "e",
        "command",
        "commands",
        "get_command_parser",
        "command",
        "len",
        "commands",
        "Dict",
        "ControllerDoc",
        "get_controllers",
        "trailmap",
        "_get_modules",
        "items",
        "name",
        "obj",
        "getmembers",
        "name",
        "name",
        "isclass",
        "obj",
        "issubclass",
        "obj",
        "BaseController",
        "trailmap",
        "controller_docs",
        "ControllerDoc",
        "obj",
        "trailmap",
        "ctrl",
        "has_commands",
        "controller_docs",
        "ctrl",
        "Dict",
        "ModuleType",
        "Path",
        "openbb_terminal",
        "parent",
        "file",
        "terminal_path",
        "glob",
        "spec_from_file_location",
        "file",
        "stem",
        "file",
        "spec",
        "spec",
        "loader",
        "module_from_spec",
        "spec",
        "spec",
        "loader",
        "exec_module",
        "file",
        "replace",
        "terminal_path",
        "replace",
        "split",
        "sub_name",
        "abbr",
        "sub_folders_abbr",
        "items",
        "path",
        "lower",
        "replace",
        "sub_name",
        "abbr",
        "path",
        "ctrl_path",
        "join",
        "ctrl_path",
        "trailmap",
        "modules",
        "modules",
        "controller_name",
        "ControllerDoc",
        "controller_name",
        "controller_docs",
        "KeyError",
        "controller_name",
        "controller_docs",
        "controller_name",
        "ctrl",
        "ctrl",
        "controller_docs",
        "ctrl"
    ],
    "literals": [
        "\"2020-11-30 00:00:00\"",
        "\"Open\"",
        "\"High\"",
        "\"Low\"",
        "\"Close\"",
        "\"Adj Close\"",
        "\"Volume\"",
        "\"date_id\"",
        "\"OC_High\"",
        "\"OC_Low\"",
        "\"2020-12-01 00:00:00\"",
        "\"Open\"",
        "\"High\"",
        "\"Low\"",
        "\"Close\"",
        "\"Adj Close\"",
        "\"Volume\"",
        "\"date_id\"",
        "\"OC_High\"",
        "\"OC_Low\"",
        "\"index\"",
        "\"discovery\"",
        "\"disc\"",
        "\"due_diligence\"",
        "\"dd\"",
        "\"overview\"",
        "\"ov\"",
        "\"alternative\"",
        "\"alt\"",
        "\"cryptocurrency\"",
        "\"crypto\"",
        "\"behavioural_analysis\"",
        "\"ba\"",
        "\"comparison_analysis\"",
        "\"ca\"",
        "\"dark_pool_shorts\"",
        "\"dps\"",
        "\"portfolio_optimization\"",
        "\"po\"",
        "\"quantitative_analysis\"",
        "\"qa\"",
        "\"sector_industry_analysis\"",
        "\"sia\"",
        "\"technical_analysis\"",
        "\"ta\"",
        "\"tradinghours\"",
        "\"th\"",
        "\"fundamental_analysis\"",
        "\"fa\"",
        "\"mutual_funds\"",
        "\"funds\"",
        "\"government\"",
        "\"gov\"",
        "\"insider\"",
        "\"ins\"",
        "\"alt\"",
        "\"Alternative\"",
        "\"ba\"",
        "\"Behavioural Analysis\"",
        "\"ca\"",
        "\"Comparison Analysis\"",
        "\"crypto\"",
        "\"Cryptocurrency\"",
        "\"dd\"",
        "\"Due Diligence\"",
        "\"defi\"",
        "\"DeFi\"",
        "\"disc\"",
        "\"Discovery\"",
        "\"dps\"",
        "\"Darkpool Shorts\"",
        "\"etf\"",
        "\"ETFs\"",
        "\"fa\"",
        "\"Fundamental Analysis\"",
        "\"forecast\"",
        "\"Forecasting\"",
        "\"funds\"",
        "\"Mutual Funds\"",
        "\"gov\"",
        "\"Government\"",
        "\"ins\"",
        "\"Insiders\"",
        "\"keys\"",
        "\"Keys\"",
        "\"nft\"",
        "\"NFTs\"",
        "\"onchain\"",
        "\"OnChain\"",
        "\"ov\"",
        "\"Overview\"",
        "\"po\"",
        "\"Portfolio Optimization\"",
        "\"qa\"",
        "\"Quantitative Analysis\"",
        "\"screener\"",
        "\"Screener\"",
        "\"sia\"",
        "\"Sector Industry Analysis\"",
        "\"ta\"",
        "\"Technical Analysis\"",
        "\"th\"",
        "\"Trading Hours\"",
        "\"%Y-%m-%d\"",
        "\"%Y-%m-%d\"",
        "\"%Y-%m-%d\"",
        "\"expiration\"",
        "\"start_date\"",
        "\"2022-01-01\"",
        "\"start\"",
        "\"2022-01-01\"",
        "\"end_date\"",
        "\"2022-08-01\"",
        "\"end\"",
        "\"2022-08-01\"",
        "\"vs\"",
        "\"USDT\"",
        "\"AAPL\"",
        "\"\"",
        "\"ticker\"",
        "\"symbol\"",
        "\"AAPL\"",
        "\"BTC\"",
        "\".\"",
        "\"call_help\"",
        "\"call_exit\"",
        "\"call_clear\"",
        "\"call_cls\"",
        "\"call_quit\"",
        "\"call_about\"",
        "\"call_reset\"",
        "\"call_support\"",
        "\"call_glossary\"",
        "\"call_wiki\"",
        "\"call_record\"",
        "\"call_stop\"",
        "\"call_screenshot\"",
        "\"call_\"",
        "\"__wrapped__\"",
        "\"__wrapped__\"",
        "\"_\"",
        "\"from openbb_terminal.\"",
        "\"parse_known_args_and_warn\"",
        "\"_\"",
        "\"1234\"",
        "\"openbb_terminal.rich_config.console.print\"",
        "\"--help\"",
        "\"TerminalController\"",
        "\"BaseController\"",
        "\"**/*controller.py\"",
        "\"\"",
        "\"\\\\\"",
        "\"/\"",
        "\"/\"",
        "\".\"",
        "f\"Controller {controller_name} not found\"",
        "\"\""
    ],
    "variables": [
        "DF_STOCK",
        "sub_folders_abbr",
        "sub_names_full",
        "dt",
        "bdays_indx",
        "expiration",
        "param_name_to_value",
        "param_type_to_value",
        "signature",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs",
        "controller",
        "trailmap",
        "name",
        "cmd_parsers",
        "cmd_funcs",
        "cmd_fullspec",
        "ignore",
        "commands",
        "commands",
        "func",
        "func",
        "func",
        "name",
        "name",
        "command",
        "args",
        "fullspec",
        "_",
        "controller_docs",
        "ctrl",
        "trailmap",
        "modules",
        "terminal_path",
        "spec",
        "ctrl_path",
        "ctrl_path",
        "trailmap",
        "modules",
        "trailmap"
    ],
    "comments": [
        "pylint: disable=unused-argument"
    ],
    "docstrings": [
        "\"\"\"Gets the next expiration date for dummy data\"\"\"",
        "\"\"\"Gets the parameters of a controller's `__init__` signature. If required parameters are missing,\n        we get the type and create a dummy value for it.\n\n    Parameters\n    ----------\n    controller_class: Type[BaseController]\n        The controller class\n\n    Returns\n    -------\n    dict[str, Any]\n        The dummy parameters for the controller init\n    \"\"\"",
        "\"\"\"Class that retrieves the ArgumentParser for each command of the Controller and stores it in a dictionary\n        for use in auto-generating the documentation.\n\n    Parameters\n    ----------\n    controller: BaseController\n        The controller to get the commands from\n\n    Attributes\n    ----------\n    controller: BaseController\n        The controller to get the commands from\n    cmd_parsers: Dict[str, argparse.ArgumentParser]\n        A dictionary of the command name and the ArgumentParser for that command\n    cmd_funcs: Dict[str, FunctionType]\n        A dictionary of the command name and the function for that command\n    cmd_fullspec: Dict[str, FullArgSpec]\n        A dictionary of the command name and the full argument spec for that command\n    ignore: List[str]\n        A list of commands to ignore\n    commands: List[str]\n        A list of commands to document\n\n    Methods\n    -------\n    get_commands()\n        Get commands\n    get_command_parser(command: str)\n        Get the parser for a command\n    get_all_command_parsers()\n        Get all command parsers\n    has_commands()\n        Checks if controller has commands to document\n    \"\"\"",
        "\"\"\"Get commands\"\"\"",
        "\"\"\"Get command parser\"\"\"",
        "\"\"\"Get parser information from source\"\"\"",
        "\"\"\"Get all command parsers\"\"\"",
        "\"\"\"Checks if controller has commands\"\"\"",
        "\"\"\"Class that loads all controllers and creates a ControllerDoc class instance for each one\n\n\n    Attributes\n    ----------\n    controller_docs: Dict[str, ControllerDoc]\n        A dictionary of the controller name and the ControllerDoc class instance for that controller\n\n    Methods\n    -------\n    get_controllers()\n        Gets all controllers to create a ControllerDoc class instance for\n    get_controller_doc(controller: str)\n        Gets the ControllerDoc class instance for a controller\n    available_controllers()\n        Gets a list of available controllers names\n    \"\"\"",
        "\"\"\"Gets all controllers\"\"\"",
        "\"\"\"Gets all controllers modules\"\"\"",
        "\"\"\"Get the ControllerDoc instance for a controller\"\"\"",
        "\"\"\"Get available controllers\"\"\""
    ],
    "functions": [
        "get_expiration_date",
        "get_parameters",
        "get_commands",
        "get_command_parser",
        "_get_parser",
        "mock_func",
        "get_all_command_parsers",
        "has_commands",
        "get_controllers",
        "_get_modules",
        "get_controller_doc",
        "available_controllers"
    ],
    "classes": [
        "ControllerDoc",
        "LoadControllersDoc"
    ]
}