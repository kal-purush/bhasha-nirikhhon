{
    "identifiers": [
        "eu",
        "europeana",
        "metis",
        "sandbox",
        "repository",
        "java",
        "sql",
        "PreparedStatement",
        "org",
        "jetbrains",
        "annotations",
        "NotNull",
        "org",
        "postgresql",
        "util",
        "PSQLException",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "org",
        "springframework",
        "jdbc",
        "core",
        "JdbcTemplate",
        "org",
        "springframework",
        "jdbc",
        "core",
        "PreparedStatementCreator",
        "org",
        "springframework",
        "stereotype",
        "Repository",
        "Repository",
        "LOGGER",
        "LoggerFactory",
        "getLogger",
        "jdbcTemplate",
        "jdbcTemplate",
        "jdbcTemplate",
        "jdbcTemplate",
        "recordId",
        "europeanaId",
        "providerId",
        "datasetId",
        "result",
        "jdbcTemplate",
        "execute",
        "updateRecordIfNoConflict",
        "recordId",
        "europeanaId",
        "providerId",
        "datasetId",
        "preparedStatement",
        "preparedStatement",
        "executeUpdate",
        "e",
        "e",
        "getMessage",
        "contains",
        "LOGGER",
        "debug",
        "result",
        "result",
        "NotNull",
        "recordId",
        "europeanaId",
        "providerId",
        "datasetId",
        "connection",
        "statement",
        "connection",
        "prepareStatement",
        "statement",
        "setString",
        "europeanaId",
        "statement",
        "setString",
        "providerId",
        "statement",
        "setLong",
        "recordId",
        "statement",
        "setString",
        "datasetId",
        "statement",
        "setString",
        "europeanaId",
        "statement",
        "setString",
        "providerId",
        "statement"
    ],
    "literals": [
        "\"ERROR: duplicate key value violates unique constraint\"",
        "\"Counter after executing update: {}\"",
        "\"UPDATE record rec \"",
        "\"SET (europeana_id, provider_id) = (?, ?) \"",
        "\"WHERE rec.id = ? AND rec.dataset_id =? \"",
        "\"AND NOT EXISTS (\"",
        "\"SELECT * FROM record other WHERE other.europeana_id =? AND other.provider_id = ? \"",
        "\"AND rec.dataset_id = other.dataset_id)\""
    ],
    "variables": [
        "jdbcTemplate"
    ],
    "comments": [],
    "docstrings": [
        "* Jdbc repository for {@link RecordRepository}",
        "* Constructor with required parameters.\n   *\n   * @param jdbcTemplate the jdbc template",
        "* Update record with new values for europeana id and provider id\n   *\n   * @param recordId the id of the record to update\n   * @param europeanaId the europeana id value to update with\n   * @param providerId the provider id value to update with\n   * @param datasetId the dataset\n   * @return amount of records updated"
    ],
    "functions": [
        "RecordJdbcRepository",
        "updateRecord",
        "PreparedStatementCreator",
        "updateRecordIfNoConflict"
    ],
    "classes": [
        "RecordJdbcRepository"
    ]
}