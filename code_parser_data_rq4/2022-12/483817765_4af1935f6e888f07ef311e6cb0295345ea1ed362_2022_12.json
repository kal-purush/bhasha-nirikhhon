{
    "identifiers": [
        "subprocess",
        "sys",
        "pytest",
        "memray",
        "AllocatorType",
        "memray",
        "FileReader",
        "memray",
        "commands",
        "attach",
        "debugger_available",
        "tests",
        "utils",
        "filter_relevant_allocations",
        "pytest",
        "mark",
        "parametrize",
        "tmp_path",
        "method",
        "debugger_available",
        "method",
        "pytest",
        "skip",
        "method",
        "tmp_path",
        "subprocess",
        "Popen",
        "sys",
        "executable",
        "PROGRAM",
        "stdin",
        "subprocess",
        "PIPE",
        "stdout",
        "subprocess",
        "PIPE",
        "text",
        "tracked_process",
        "stdin",
        "tracked_process",
        "stdout",
        "tracked_process",
        "stdout",
        "readline",
        "sys",
        "executable",
        "method",
        "output",
        "tracked_process",
        "pid",
        "subprocess",
        "check_output",
        "attach_cmd",
        "stderr",
        "subprocess",
        "STDOUT",
        "text",
        "subprocess",
        "CalledProcessError",
        "exc",
        "exc",
        "output",
        "pytest",
        "xfail",
        "exc",
        "output",
        "tracked_process",
        "stdin",
        "write",
        "tracked_process",
        "stdin",
        "close",
        "tracked_process",
        "wait",
        "tracked_process",
        "stdout",
        "read",
        "tracked_process",
        "returncode",
        "FileReader",
        "output",
        "reader",
        "get_allocation_records",
        "record",
        "record",
        "filter_relevant_allocations",
        "records",
        "record",
        "allocator",
        "AllocatorType",
        "VALLOC",
        "vallocs",
        "f",
        "f",
        "valloc",
        "stack_trace",
        "functions"
    ],
    "literals": [
        "\"method\"",
        "\"lldb\"",
        "\"gdb\"",
        "f\"a supported {method} debugger isn't installed\"",
        "\"test.bin\"",
        "\"-uc\"",
        "\"ready\\n\"",
        "\"-m\"",
        "\"memray\"",
        "\"attach\"",
        "\"--verbose\"",
        "\"--method\"",
        "\"-o\"",
        "\"Couldn't write extended state status\"",
        "\"gdb < 8 does not support this CPU\"",
        "\"1\\n\"",
        "\"\"",
        "\"valloc\"",
        "\"baz\"",
        "\"bar\"",
        "\"foo\"",
        "\"<module>\""
    ],
    "variables": [
        "PROGRAM",
        "output",
        "tracked_process",
        "attach_cmd",
        "reader",
        "records",
        "vallocs",
        "valloc",
        "functions"
    ],
    "comments": [
        "GIVEN",
        "Help the type checker out...",
        "WHEN",
        "https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=898048",
        "THEN"
    ],
    "docstrings": [
        "\"\"\"\nimport sys\nimport threading\n\nfrom memray._test import MemoryAllocator\n\nstop_bg_thread = threading.Event()\n\n\ndef bg_thread_body():\n    bg_allocator = MemoryAllocator()\n    while not stop_bg_thread.is_set():\n        bg_allocator.malloc(1024)\n        bg_allocator.free()\n\n\ndef foo():\n    bar()\n\n\ndef bar():\n    baz()\n\n\ndef baz():\n    allocator = MemoryAllocator()\n    allocator.valloc(1024)\n    allocator.free()\n\n\n# attach waits for a call to an allocator or deallocator, so we can't just\n# block waiting for a signal. Allocate and free in a loop in the background.\nbg_thread = threading.Thread(target=bg_thread_body)\nbg_thread.start()\n\nprint(\"ready\")\nfor line in sys.stdin:\n    if not stop_bg_thread.is_set():\n        stop_bg_thread.set()\n        bg_thread.join()\n    foo()\n\"\"\""
    ],
    "functions": [
        "test_basic_attach"
    ],
    "classes": []
}