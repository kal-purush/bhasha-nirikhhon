{
    "identifiers": [
        "io",
        "openliberty",
        "security",
        "jakartasec",
        "fat",
        "config",
        "tests",
        "io",
        "openliberty",
        "security",
        "jakartasec",
        "fat",
        "utils",
        "OpenIdContextExpectationHelpers",
        "buildNonceString",
        "java",
        "util",
        "java",
        "util",
        "regex",
        "Matcher",
        "java",
        "util",
        "regex",
        "Pattern",
        "org",
        "junit",
        "BeforeClass",
        "org",
        "junit",
        "ClassRule",
        "org",
        "junit",
        "Test",
        "org",
        "junit",
        "runner",
        "RunWith",
        "com",
        "gargoylesoftware",
        "htmlunit",
        "Page",
        "com",
        "gargoylesoftware",
        "htmlunit",
        "WebClient",
        "com",
        "ibm",
        "ws",
        "security",
        "fat",
        "common",
        "expectations",
        "Expectations",
        "com",
        "ibm",
        "ws",
        "security",
        "fat",
        "common",
        "expectations",
        "ResponseFullExpectation",
        "com",
        "ibm",
        "ws",
        "security",
        "fat",
        "common",
        "expectations",
        "ResponseMessageExpectation",
        "com",
        "ibm",
        "ws",
        "security",
        "fat",
        "common",
        "expectations",
        "ResponseStatusExpectation",
        "com",
        "ibm",
        "ws",
        "security",
        "fat",
        "common",
        "expectations",
        "ResponseUrlExpectation",
        "com",
        "ibm",
        "ws",
        "security",
        "fat",
        "common",
        "expectations",
        "ServerMessageExpectation",
        "com",
        "ibm",
        "ws",
        "security",
        "fat",
        "common",
        "utils",
        "SecurityFatHttpUtils",
        "com",
        "ibm",
        "ws",
        "security",
        "fat",
        "common",
        "web",
        "WebResponseUtils",
        "componenttest",
        "annotation",
        "Server",
        "componenttest",
        "custom",
        "junit",
        "runner",
        "FATRunner",
        "componenttest",
        "rules",
        "repeater",
        "RepeatTests",
        "componenttest",
        "topology",
        "impl",
        "LibertyServer",
        "io",
        "openliberty",
        "security",
        "jakartasec",
        "fat",
        "commonTests",
        "CommonAnnotatedSecurityTests",
        "io",
        "openliberty",
        "security",
        "jakartasec",
        "fat",
        "configs",
        "TestConfigMaps",
        "io",
        "openliberty",
        "security",
        "jakartasec",
        "fat",
        "utils",
        "Constants",
        "io",
        "openliberty",
        "security",
        "jakartasec",
        "fat",
        "utils",
        "MessageConstants",
        "io",
        "openliberty",
        "security",
        "jakartasec",
        "fat",
        "utils",
        "ServletMessageConstants",
        "io",
        "openliberty",
        "security",
        "jakartasec",
        "fat",
        "utils",
        "ShrinkWrapHelpers",
        "SuppressWarnings",
        "RunWith",
        "thisClass",
        "Server",
        "opServer",
        "Server",
        "rpServer",
        "swh",
        "ClassRule",
        "repeat",
        "createRandomTokenTypeRepeats",
        "NONCE_REGEX",
        "Pattern",
        "compile",
        "BeforeClass",
        "setTokenTypeInBootstrap",
        "opServer",
        "updateTrackers",
        "opServer",
        "rpServer",
        "waitForMsgs",
        "opServer",
        "startServerUsingExpandedConfiguration",
        "waitForMsgs",
        "SecurityFatHttpUtils",
        "saveServerPorts",
        "opServer",
        "Constants",
        "BVT_SERVER_1_PORT_NAME_ROOT",
        "opHttpBase",
        "opServer",
        "getBvtPort",
        "opHttpsBase",
        "opServer",
        "getBvtSecurePort",
        "rpServer",
        "startServerUsingExpandedConfiguration",
        "waitForMsgs",
        "SecurityFatHttpUtils",
        "saveServerPorts",
        "rpServer",
        "Constants",
        "BVT_SERVER_2_PORT_NAME_ROOT",
        "rpHttpBase",
        "rpServer",
        "getBvtPort",
        "rpHttpsBase",
        "rpServer",
        "getBvtSecurePort",
        "deployMyApps",
        "swh",
        "opHttpBase",
        "opHttpsBase",
        "rpHttpBase",
        "rpHttpsBase",
        "swh",
        "defaultDropinApp",
        "rpServer",
        "swh",
        "defaultDropinApp",
        "rpServer",
        "swh",
        "deployConfigurableTestApps",
        "rpServer",
        "buildUpdatedConfigMap",
        "opServer",
        "rpServer",
        "TestConfigMaps",
        "getUseNonceExpressionTrue",
        "swh",
        "deployConfigurableTestApps",
        "rpServer",
        "buildUpdatedConfigMap",
        "opServer",
        "rpServer",
        "TestConfigMaps",
        "getUseNonceExpressionFalse",
        "swh",
        "deployConfigurableTestApps",
        "rpServer",
        "buildUpdatedConfigMap",
        "opServer",
        "rpServer",
        "TestConfigMaps",
        "getUseNonceExpressionTrue",
        "swh",
        "deployConfigurableTestApps",
        "rpServer",
        "buildUpdatedConfigMap",
        "opServer",
        "rpServer",
        "TestConfigMaps",
        "getUseNonceExpressionFalse",
        "appRoot",
        "app",
        "runGoodEndToEndWithNonceCheck",
        "appRoot",
        "app",
        "appRoot",
        "app",
        "runGoodEndToEndWithNonceCheck",
        "appRoot",
        "app",
        "appRoot",
        "app",
        "useNonce",
        "requester",
        "ServletMessageConstants",
        "SERVLET",
        "ServletMessageConstants",
        "OPENID_CONTEXT",
        "webClient",
        "getAndSaveWebClient",
        "url",
        "rpHttpsBase",
        "appRoot",
        "app",
        "response",
        "invokeAppReturnLoginPage",
        "webClient",
        "url",
        "webClient",
        "getOptions",
        "setRedirectEnabled",
        "response",
        "actions",
        "doFormLogin",
        "response",
        "Constants",
        "TESTUSER",
        "Constants",
        "TESTUSERPWD",
        "response",
        "actions",
        "invokeUrl",
        "_testName",
        "webClient",
        "WebResponseUtils",
        "getResponseHeaderField",
        "response",
        "Constants",
        "RESPONSE_HEADER_LOCATION",
        "authEndpointNonceRegex",
        "opServer",
        "getBvtSecurePort",
        "NONCE_REGEX",
        "expectations",
        "expectations",
        "addExpectation",
        "Constants",
        "REDIRECT_STATUS",
        "expectations",
        "addExpectation",
        "Constants",
        "STRING_CONTAINS",
        "Constants",
        "FOUND_MSG",
        "useNonce",
        "expectations",
        "addExpectation",
        "Constants",
        "STRING_MATCHES",
        "authEndpointNonceRegex",
        "expectations",
        "addExpectation",
        "Constants",
        "STRING_DOES_NOT_MATCH",
        "authEndpointNonceRegex",
        "validationUtils",
        "validateResult",
        "response",
        "expectations",
        "response",
        "actions",
        "invokeUrl",
        "_testName",
        "webClient",
        "WebResponseUtils",
        "getResponseHeaderField",
        "response",
        "Constants",
        "RESPONSE_HEADER_LOCATION",
        "response",
        "actions",
        "invokeUrl",
        "_testName",
        "webClient",
        "WebResponseUtils",
        "getResponseHeaderField",
        "response",
        "Constants",
        "RESPONSE_HEADER_LOCATION",
        "expectations",
        "expectations",
        "addSuccessCodeForCurrentAction",
        "useNonce",
        "expectations",
        "addExpectation",
        "Constants",
        "STRING_CONTAINS",
        "buildNonceString",
        "requester",
        "expectations",
        "addExpectation",
        "Constants",
        "STRING_DOES_NOT_CONTAIN",
        "buildNonceString",
        "requester",
        "validationUtils",
        "validateResult",
        "response",
        "expectations",
        "Test",
        "runGoodEndToEndTestWithNonce",
        "Test",
        "runGoodEndToEndTestWithoutNonce",
        "Test",
        "runGoodEndToEndTestWithNonce",
        "Test",
        "runGoodEndToEndTestWithoutNonce",
        "Test",
        "runGoodEndToEndTestWithNonce",
        "Test",
        "runGoodEndToEndTestWithoutNonce",
        "Test",
        "webClient",
        "getAndSaveWebClient",
        "webClient",
        "getOptions",
        "setRedirectEnabled",
        "app",
        "url",
        "rpHttpsBase",
        "app",
        "response",
        "actions",
        "invokeUrl",
        "_testName",
        "webClient",
        "url",
        "authenticationEndpoint",
        "WebResponseUtils",
        "getResponseHeaderField",
        "response",
        "Constants",
        "RESPONSE_HEADER_LOCATION",
        "matcher",
        "NONCE_REGEX",
        "matcher",
        "authenticationEndpoint",
        "matcher",
        "find",
        "authenticationEndpointWithModifiedNonce",
        "authenticationEndpoint",
        "replaceFirst",
        "NONCE_REGEX",
        "pattern",
        "matcher",
        "group",
        "toLowerCase",
        "authenticationEndpoint",
        "equals",
        "authenticationEndpointWithModifiedNonce",
        "authenticationEndpointWithModifiedNonce",
        "authenticationEndpointWithModifiedNonce",
        "toUpperCase",
        "webClient",
        "getOptions",
        "setRedirectEnabled",
        "response",
        "actions",
        "invokeUrl",
        "_testName",
        "webClient",
        "authenticationEndpointWithModifiedNonce",
        "response",
        "actions",
        "doFormLogin",
        "response",
        "Constants",
        "TESTUSER",
        "Constants",
        "TESTUSERPWD",
        "expectations",
        "expectations",
        "addExpectation",
        "Constants",
        "UNAUTHORIZED_STATUS",
        "expectations",
        "addExpectation",
        "Constants",
        "STRING_CONTAINS",
        "Constants",
        "UNAUTHORIZED_MESSAGE",
        "expectations",
        "addExpectation",
        "rpServer",
        "MessageConstants",
        "CWWKS2504E_CREDENTIAL_VALIDATION_ERROR",
        "expectations",
        "addExpectation",
        "rpServer",
        "MessageConstants",
        "CWWKS2415E_TOKEN_VALIDATION_EXCEPTION",
        "validationUtils",
        "validateResult",
        "response",
        "expectations"
    ],
    "literals": [
        "\"restriction\"",
        "\"jakartasec-3.0_fat.config.op\"",
        "\"jakartasec-3.0_fat.config.rp.useNonce\"",
        "\"nonce=[^&]+\"",
        "\"server_orig.xml\"",
        "\"http://localhost:\"",
        "\"https://localhost:\"",
        "\"server_orig.xml\"",
        "\"http://localhost:\"",
        "\"https://localhost:\"",
        "\"UseNonceTrue.war\"",
        "\"oidc.client.useNonceTrue.servlets\"",
        "\"oidc.client.base.*\"",
        "\"UseNonceFalse.war\"",
        "\"oidc.client.useNonceFalse.servlets\"",
        "\"oidc.client.base.*\"",
        "\"UseNonceTrueELTrue.war\"",
        "\"UseNonceTrueWithEL.war\"",
        "\"UseNonceTrueELTrue\"",
        "\"allValues.openIdConfig.properties\"",
        "\"oidc.client.useNonceTrueWithEL.servlets\"",
        "\"oidc.client.base.*\"",
        "\"UseNonceTrueELFalse.war\"",
        "\"UseNonceTrueWithEL.war\"",
        "\"UseNonceTrueELFalse\"",
        "\"allValues.openIdConfig.properties\"",
        "\"oidc.client.useNonceTrueWithEL.servlets\"",
        "\"oidc.client.base.*\"",
        "\"UseNonceFalseELTrue.war\"",
        "\"UseNonceFalseWithEL.war\"",
        "\"UseNonceFalseELTrue\"",
        "\"allValues.openIdConfig.properties\"",
        "\"oidc.client.useNonceFalseWithEL.servlets\"",
        "\"oidc.client.base.*\"",
        "\"UseNonceFalseELFalse.war\"",
        "\"UseNonceFalseWithEL.war\"",
        "\"UseNonceFalseELFalse\"",
        "\"allValues.openIdConfig.properties\"",
        "\"oidc.client.useNonceFalseWithEL.servlets\"",
        "\"oidc.client.base.*\"",
        "\"/\"",
        "\"/\"",
        "\"https:\\\\/\\\\/localhost:\"",
        "\"\\\\/oidc\\\\/endpoint\\\\/OP2\\\\/authorize\\\\?.*\"",
        "\"Did not receive the Found message.\"",
        "\"Did not find nonce in authorization endpoint request.\"",
        "\"Found nonce in authorization endpoint request.\"",
        "\"Did not find an nonce claim in the id token in the OpenIdContext.\"",
        "\"Found nonce claim in the id token in the OpenIdContext.\"",
        "\"UseNonceTrue\"",
        "\"UseNonceTrueServlet\"",
        "\"UseNonceFalse\"",
        "\"UseNonceFalseServlet\"",
        "\"UseNonceTrueELTrue\"",
        "\"UseNonceTrueWithELServlet\"",
        "\"UseNonceTrueELFalse\"",
        "\"UseNonceTrueWithELServlet\"",
        "\"UseNonceFalseELTrue\"",
        "\"UseNonceFalseWithELServlet\"",
        "\"UseNonceFalseELFalse\"",
        "\"UseNonceFalseWithELServlet\"",
        "\"UseNonceTrueServlet\"",
        "\"/UseNonceTrue/\"",
        "\"Did not receive the Unauthorize message.\"",
        "\"Did not receive an error stating that an error occurred while validaitng the client credentials.\"",
        "\"Did not receive an error stating that an error occured while validating the id token.\""
    ],
    "variables": [
        "opServer",
        "rpServer"
    ],
    "comments": [
        "write property that is used to configure the OP to generate JWT or Opaque tokens",
        "Add servers to server trackers that will be used to clean servers up and prevent servers",
        "from being restored at the end of each test (so far, the tests are not reconfiguring the servers)",
        "run this after starting the RP so we have the rp port to update the openIdConfig.properties file within the apps",
        "disable redirects so we can validate the 302 responses",
        "follow redirect from login page to the auth endpoint",
        "validates:",
        "- 302 response",
        "- if useNonce = true, then a nonce was included in the req to the auth endpoint",
        "- if useNonce = false, then a nonce was not included in the req to the auth endpoint",
        "follow redirect from auth endpoint to callback",
        "follow redirect from callback to original request",
        "validates:",
        "- 200 response",
        "- if useNonce = true, then a nonce was included in the id token claims",
        "- if useNonce = false, then a nonce was not included in the id token claims",
        "disable redirects, so we can intercept the 302 redirect from the",
        "original request to the auth endpoint",
        "modify nonce to be all lowercase",
        "if original auth endpoint did not have any uppercase, then turn it all uppercase",
        "re-enable redirect to finish the flow normally"
    ],
    "docstrings": [
        "*****************************************************************************\n * Copyright (c) 2022 IBM Corporation and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     IBM Corporation - initial API and implementation\n ******************************************************************************",
        "* Tests @OpenIdAuthenticationMechanismDefinition useNonce and useNonceExpression\n *\n * This class contains tests to validate that a nonce is added to the auth endpoint call\n * and id token claims if useNonce is set to true, and not added if useNonce is set to false.\n * Additionally, it validates that useNonceExpression overrides the value of useNonce.\n * Lastly, it contains a test to verify that an error occurs if the nonce claim in the\n * id token doesn't match the nonce value stored before the auth endpoint call.",
        "* Tests appSecurity-5.0",
        "* Deploy the apps that this test class uses\n     *\n     * @throws Exception",
        "*************************************************************************************************************",
        "Tests",
        "*************************************************************************************************************",
        "*\n     * Test with useNonce = true.\n     * A nonce should be included in the auth endpoint call and in the id token claims.\n     *\n     * @throws Exception",
        "*\n     * Test with useNonce = false.\n     * A nonce should not be included in the auth endpoint call nor in the id token claims.\n     *\n     * @throws Exception",
        "*\n     * Test with useNonce = true and useNonceExpression = true.\n     * The value used in useNonceExpression should take precedence.\n     *\n     * @throws Exception",
        "*\n     * Test with useNonce = true and useNonceExpression = false.\n     * The value used in useNonceExpression should take precedence.\n     *\n     * @throws Exception",
        "*\n     * Test with useNonce = false and useNonceExpression = true.\n     * The value used in useNonceExpression should take precedence.\n     *\n     * @throws Exception",
        "*\n     * Test with useNonce = false and useNonceExpression = false.\n     * The value used in useNonceExpression should take precedence.\n     *\n     * @throws Exception",
        "*\n     * Test with useNonceExpression = true.\n     * Intercepts the call to the auth endpoint and alters the nonce value to be all lowercase/uppercase.\n     * The test should fail, since the id token returned should contain the all lowercase/uppercase nonce,\n     * which will not match the nonce in the RP which was stored before the auth endpoint call as nonces\n     * are case-sensitive.\n     *\n     * @throws Exception"
    ],
    "functions": [
        "setUp",
        "deployMyApps",
        "runGoodEndToEndTestWithNonce",
        "runGoodEndToEndTestWithoutNonce",
        "runGoodEndToEndWithNonceCheck",
        "ConfigurationUseNonceTests_useNonce_true",
        "ConfigurationUseNonceTests_useNonce_false",
        "ConfigurationUseNonceTests_useNonce_true_useNonceExpression_true",
        "ConfigurationUseNonceTests_useNonce_true_useNonceExpression_false",
        "ConfigurationUseNonceTests_useNonce_false_useNonceExpression_true",
        "ConfigurationUseNonceTests_useNonce_false_useNonceExpression_false",
        "ConfigurationUseNonceTests_useNonce_true_nonceDoesntMatch"
    ],
    "classes": [
        "ConfigurationUseNonceTests"
    ]
}