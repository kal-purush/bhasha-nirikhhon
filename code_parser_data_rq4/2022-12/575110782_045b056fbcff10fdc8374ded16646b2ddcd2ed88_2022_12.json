{
    "identifiers": [
        "sys",
        "os",
        "argparse",
        "json",
        "numpy",
        "np",
        "sklearn",
        "model_selection",
        "train_test_split",
        "sklearn",
        "preprocessing",
        "normalize",
        "sklearn",
        "linear_model",
        "Perceptron",
        "MLPmodel",
        "mlp",
        "MLP",
        "desc",
        "argparse",
        "ArgumentParser",
        "prog",
        "description",
        "desc",
        "epilog",
        "parser",
        "add_argument",
        "help",
        "required",
        "parser",
        "add_argument",
        "help",
        "required",
        "parser",
        "add_argument",
        "help",
        "required",
        "parser",
        "add_argument",
        "help",
        "required",
        "parser",
        "add_argument",
        "help",
        "required",
        "parser",
        "dataFolder",
        "os",
        "getcwd",
        "os",
        "path",
        "join",
        "root",
        "dataFolder",
        "r",
        "d",
        "f",
        "os",
        "walk",
        "path",
        "file",
        "f",
        "file",
        "endswith",
        "jsonFiles",
        "append",
        "os",
        "path",
        "join",
        "r",
        "file",
        "jsonFiles",
        "jsonFiles",
        "jsonFile",
        "jsonFiles",
        "jsonFile",
        "endswith",
        "jsonFile",
        "open",
        "jsonFile",
        "json",
        "load",
        "f",
        "f",
        "close",
        "np",
        "zeros",
        "BEATSAMPLES",
        "BEATSAMPLES",
        "BEATSAMPLES",
        "BEATSAMPLES",
        "BEATSAMPLES",
        "jsonData",
        "beats",
        "BEATSAMPLES",
        "len",
        "samples",
        "BEATSAMPLES",
        "jsonData",
        "idx",
        "jsonData",
        "idx",
        "i",
        "counter",
        "len",
        "samples",
        "samples",
        "counter",
        "jsonData",
        "i",
        "jsonIdx",
        "idx",
        "counter",
        "len",
        "samples",
        "samples",
        "counter",
        "jsonData",
        "jsonIdx",
        "idx",
        "i",
        "counter",
        "len",
        "samples",
        "samples",
        "counter",
        "jsonData",
        "i",
        "jsonIdx",
        "idx",
        "counter",
        "len",
        "samples",
        "samples",
        "counter",
        "jsonData",
        "jsonIdx",
        "idx",
        "counter",
        "len",
        "samples",
        "samples",
        "counter",
        "jsonData",
        "jsonIdx",
        "idx",
        "idx",
        "len",
        "xEntry",
        "X",
        "append",
        "xEntry",
        "jsonData",
        "genreMap",
        "jsonData",
        "len",
        "genreMap",
        "y",
        "append",
        "genreMap",
        "jsonData",
        "X",
        "y",
        "genreMap",
        "args",
        "args",
        "data",
        "getJsonFiles",
        "dataFolder",
        "extractData",
        "jsonFilenames",
        "normalize",
        "X",
        "axis",
        "train_test_split",
        "X",
        "y",
        "test_size",
        "Perceptron",
        "max_iter",
        "clf",
        "fit",
        "X_train",
        "y_train",
        "clf",
        "predict",
        "X_test",
        "clf",
        "score",
        "X_test",
        "y_test",
        "label",
        "pred",
        "y_test",
        "preds",
        "pred",
        "label",
        "correct",
        "correct",
        "len",
        "y_test",
        "preds",
        "y_test",
        "getArgParser",
        "parser",
        "parse_args",
        "main",
        "args"
    ],
    "literals": [
        "'This driver runs a genre classification Multi Level Perceptron neural netwrok\\n\\n'",
        "'A preprocessiong of mp3 files to json files is required'",
        "'genreClassificationDriver: MLP genre classification'",
        "\"\"",
        "'--data'",
        "'folder containing database of json files'",
        "'--lr'",
        "'learning rate'",
        "'--epochs'",
        "'maximum number of epochs'",
        "'--hiddenLayers'",
        "'number of hidden layers'",
        "'--hiddenLayerNodes'",
        "'number of nodes in each hidden layer'",
        "'.json'",
        "'mp3Metadata.json'",
        "'Extracting data for %s'",
        "'beats'",
        "'tempo'",
        "'tuning'",
        "'chromagram'",
        "'spec_bw'",
        "'contrast'",
        "'maxRolloff'",
        "'minRolloff'",
        "'genre'",
        "'genre'",
        "'genre'",
        "'__main__'"
    ],
    "variables": [
        "BEATSAMPLES",
        "desc",
        "parser",
        "root",
        "path",
        "jsonFiles",
        "X",
        "y",
        "genreMap",
        "f",
        "jsonData",
        "xEntry",
        "beats",
        "samples",
        "idx",
        "xEntry",
        "idx",
        "xEntry",
        "idx",
        "jsonIdx",
        "xEntry",
        "idx",
        "jsonIdx",
        "xEntry",
        "idx",
        "jsonIdx",
        "xEntry",
        "idx",
        "jsonIdx",
        "xEntry",
        "idx",
        "jsonIdx",
        "xEntry",
        "idx",
        "genreMap",
        "dataFolder",
        "jsonFilenames",
        "X",
        "y",
        "genreMap",
        "X",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "clf",
        "preds",
        "correct",
        "parser",
        "args"
    ],
    "comments": [
        "TODO add more",
        "TODO",
        "xEntry = np.zeros(1 + 1 + BEATSAMPLES*12 + BEATSAMPLES + BEATSAMPLES*6 + BEATSAMPLES + BEATSAMPLES)",
        "TODO what if BEATSAMPLES > len(beats)",
        "song too short, throw out",
        "tempo",
        "tuning",
        "chromagram samples 12 bands",
        "numSamples = len(jsonData['chromagram'][0])",
        "spec_bw samples",
        "numSamples = len(jsonData['spec_bw'][0])",
        "maxSample = np.max(jsonData['spec_bw'])",
        "constrast samples 6 bands",
        "numSamples = len(jsonData['contrast'][0])",
        "maxSample = np.max(jsonData['contrast'])",
        "maxRolloff samples",
        "numSamples = len(jsonData['maxRolloff'][0])",
        "maxSample = np.max(jsonData['maxRolloff'])",
        "minRolloff samples",
        "numSamples = len(jsonData['minRolloff'][0])",
        "maxSample = np.max(jsonData['minRolloff'])",
        "for train_index, val_index in kf.split(X, y):",
        "X_train, X_val = X[train_index,:], X[val_index,:]",
        "y_train, y_val = y[train_index], y[val_index]"
    ],
    "docstrings": [],
    "functions": [
        "getArgParser",
        "getJsonFiles",
        "extractData",
        "main"
    ],
    "classes": []
}