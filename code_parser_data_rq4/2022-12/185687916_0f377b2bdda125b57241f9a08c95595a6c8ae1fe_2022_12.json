{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "inquirer",
        "process",
        "configJson",
        "require",
        "Ajv",
        "ajv",
        "schema",
        "validate",
        "configJson",
        "validate",
        "fileOrBuffer",
        "fileOrBuffer",
        "contents",
        "fs",
        "fileOrBuffer",
        "Buffer",
        "fileOrBuffer",
        "contents",
        "fileOrBuffer",
        "contents",
        "contents",
        "contents",
        "contents",
        "contents",
        "hjson",
        "contents",
        "e",
        "yaml",
        "contents",
        "e",
        "fileOrBuffer",
        "loadConfigFile",
        "fileOrBuffer",
        "validateConfig",
        "res",
        "configIsValid",
        "configErrors",
        "message",
        "res",
        "parentDir",
        "flags",
        "writeAio",
        "appConfig",
        "parentDir",
        "flags",
        "json",
        "json",
        "filePath",
        "fs",
        "filePath",
        "prompt",
        "filePath",
        "answer",
        "json",
        "result",
        "prefix",
        "AIO_ENV_PREFIX",
        "separator",
        "AIO_ENV_SEPARATOR",
        "json",
        "key",
        "key",
        "json",
        "key",
        "result",
        "prefix",
        "_key",
        "json",
        "key",
        "result",
        "json",
        "key",
        "flattenObjectWithSeparator",
        "json",
        "key",
        "result",
        "prefix",
        "_key",
        "separator",
        "result",
        "prefix",
        "_key",
        "json",
        "key",
        "result",
        "result",
        "line",
        "line",
        "trimmedLine",
        "aioLogger",
        "line",
        "trimmedLine",
        "line",
        "items",
        "items",
        "items",
        "key",
        "value",
        "aioLogger",
        "line",
        "oldEnv",
        "newEnv",
        "aioLogger",
        "oldEnv",
        "aioLogger",
        "newEnv",
        "aioLogger",
        "oldEnv",
        "aioLogger",
        "newEnv",
        "splitHelper",
        "line",
        "splitEnvLine",
        "line",
        "result",
        "oldEnv",
        "NEWLINES",
        "splitHelper",
        "newEnv",
        "NEWLINES",
        "splitHelper",
        "result",
        "key",
        "result",
        "key",
        "key",
        "result",
        "key",
        "key",
        "EOL",
        "EOL",
        "aioLogger",
        "mergedEnv",
        "mergedEnv",
        "oldData",
        "newData",
        "loadConfigFile",
        "Buffer",
        "oldData",
        "loadConfigFile",
        "Buffer",
        "newData",
        "aioLogger",
        "prettyPrintJson",
        "oldJson",
        "aioLogger",
        "prettyPrintJson",
        "newJson",
        "prettyPrintJson",
        "oldJson",
        "newJson",
        "aioLogger",
        "mergedJson",
        "mergedJson",
        "oldData",
        "newData",
        "fileFormat",
        "aioLogger",
        "oldData",
        "aioLogger",
        "newData",
        "fileFormat",
        "FILE_FORMAT_ENV",
        "mergeEnv",
        "oldData",
        "newData",
        "mergeJson",
        "oldData",
        "newData",
        "destination",
        "data",
        "flags",
        "FILE_FORMAT_JSON",
        "aioLogger",
        "destination",
        "flags",
        "aioLogger",
        "data",
        "interactive",
        "answer",
        "checkFileConflict",
        "destination",
        "aioLogger",
        "answer",
        "answer",
        "answer",
        "fs",
        "destination",
        "fs",
        "destination",
        "data",
        "mergeData",
        "oldData",
        "data",
        "fileFormat",
        "fs",
        "destination",
        "data",
        "answer",
        "answer",
        "json",
        "parentFolder",
        "flags",
        "extraEnvVars",
        "aioLogger",
        "json",
        "parentFolder",
        "flags",
        "extraEnvVars",
        "path",
        "parentFolder",
        "ENV_FILE",
        "aioLogger",
        "destination",
        "flattenObjectWithSeparator",
        "json",
        "extraEnvVars",
        "aioLogger",
        "prettyPrintJson",
        "resultObject",
        "resultObject",
        "key",
        "key",
        "resultObject",
        "key",
        "EOL",
        "EOL",
        "aioLogger",
        "data",
        "writeFile",
        "destination",
        "data",
        "flags",
        "FILE_FORMAT_ENV",
        "json",
        "aioLogger",
        "json",
        "org",
        "org",
        "org",
        "project",
        "project",
        "project",
        "project",
        "org",
        "workspace",
        "workspace",
        "config",
        "CONSOLE_CONFIG_KEY",
        "data",
        "json",
        "parentFolder",
        "flags",
        "aioLogger",
        "parentFolder",
        "flags",
        "aioLogger",
        "prettyPrintJson",
        "json",
        "path",
        "parentFolder",
        "AIO_FILE",
        "aioLogger",
        "destination",
        "prettyPrintJson",
        "json",
        "writeFile",
        "destination",
        "data",
        "flags",
        "runtime",
        "runtime",
        "runtime",
        "newRuntime",
        "newRuntime",
        "newRuntime",
        "newRuntime",
        "newRuntime",
        "defaultOwApihost",
        "newRuntime",
        "credentials",
        "imsOrgId",
        "credentials",
        "credential",
        "credential",
        "credential",
        "credential",
        "credential",
        "aioLogger",
        "credential",
        "imsOrgId",
        "credentials",
        "acc",
        "credential",
        "credential",
        "credential",
        "credential",
        "credential",
        "acc",
        "name",
        "value",
        "acc",
        "credentials",
        "credentials",
        "c",
        "c",
        "c",
        "c",
        "configFileOrBuffer",
        "destinationFolder",
        "process",
        "flags",
        "extraEnvVars",
        "aioLogger",
        "configFileOrBuffer",
        "destinationFolder",
        "flags",
        "extraEnvVars",
        "loadAndValidateConfigFile",
        "configFileOrBuffer",
        "aioLogger",
        "format",
        "prettyPrintJson",
        "config",
        "config",
        "writeEnv",
        "transformRuntime",
        "runtime",
        "transformCredentials",
        "credentials",
        "config",
        "destinationFolder",
        "flags",
        "extraEnvVars",
        "config",
        "config",
        "credentialsReferences",
        "config",
        "writeConsoleConfig",
        "config",
        "writeAio",
        "config",
        "destinationFolder",
        "flags"
    ],
    "literals": [
        "'@adobe/aio-lib-core-logging'",
        "'@adobe/aio-cli-plugin-app:import'",
        "'debug'",
        "'@adobe/aio-lib-core-config'",
        "'./defaults'",
        "'path'",
        "'fs-extra'",
        "'inquirer'",
        "'js-yaml'",
        "'hjson'",
        "'ajv'",
        "'os'",
        "'.aio'",
        "'.env'",
        "'AIO_'",
        "'_'",
        "'env'",
        "'json'",
        "'console'",
        "'../../schema/config.schema.json'",
        "'string'",
        "'utf-8'",
        "'utf-8'",
        "''",
        "'{'",
        "'json'",
        "'Cannot parse json'",
        "'yaml'",
        "'Cannot parse yaml'",
        "'json'",
        "Missing or invalid keys in config: ${JSON.stringify(configErrors, null, 2)}",
        "'actions'",
        "'dist'",
        "'web-src'",
        "'expand'",
        "The file ${filePath} already exists:",
        "'conflict'",
        "'o'",
        "'Overwrite'",
        "'overwrite'",
        "'m'",
        "'Merge'",
        "'merge'",
        "'x'",
        "'Abort'",
        "'abort'",
        "'overwrite'",
        "'merge'",
        "'abort'",
        "'__'",
        "${prefix}${_key}",
        "'object'",
        "${prefix}${_key}${separator}",
        "${prefix}${_key}",
        "'#'",
        "splitEnvLine - processing comment: ${line}",
        "'='",
        "'='",
        "splitEnvLine - cannot process line: ${line}",
        "mergeEnv - oldEnv: ${oldEnv}",
        "mergeEnv - newEnv:${newEnv}",
        "mergeEnv - oldEnv:${oldEnv}",
        "mergeEnv - newEnv:${newEnv}",
        "${key}=${result[key]}",
        "mergeEnv - mergedEnv:${mergedEnv}",
        "mergeJson - oldJson:${prettyPrintJson(oldJson)}",
        "mergeJson - newJson:${prettyPrintJson(newJson)}",
        "mergeJson - mergedJson:${mergedJson}",
        "mergeData - oldData: ${oldData}",
        "mergeData - newData: ${newData}",
        "writeFile - destination: ${destination} flags:${flags}",
        "writeFile - data: ${data}",
        "writeFile - answer (interactive): ${JSON.stringify(answer)}",
        "'utf-8'",
        "'w'",
        "'wx'",
        "writeEnv - json: ${JSON.stringify(json)} parentFolder:${parentFolder} flags:${flags} extraEnvVars:${extraEnvVars}",
        "writeEnv - destination: ${destination}",
        "convertJsonToEnv - flattened and separated json: ${prettyPrintJson(resultObject)}",
        "${key}=${resultObject[key]}",
        "writeEnv - data:${data}",
        "writeConsoleConfig - json: ${JSON.stringify(json)}",
        "writeAio - parentFolder:${parentFolder} flags:${flags}",
        "writeAio - json: ${prettyPrintJson(json)}",
        "writeAio - destination: ${destination}",
        "'object'",
        "'adding ims_org_id to ims.jwt config'",
        "'_'",
        "'_'",
        "importConfigJson - configFileOrBuffer: ${configFileOrBuffer} destinationFolder:${destinationFolder} flags:${flags} extraEnvVars:${extraEnvVars}",
        "importConfigJson - format: ${format} config:${prettyPrintJson(config)}"
    ],
    "variables": [
        "aioLogger",
        "config",
        "path",
        "fs",
        "inquirer",
        "yaml",
        "hjson",
        "Ajv",
        "AIO_FILE",
        "ENV_FILE",
        "AIO_ENV_PREFIX",
        "AIO_ENV_SEPARATOR",
        "FILE_FORMAT_ENV",
        "FILE_FORMAT_JSON",
        "CONSOLE_CONFIG_KEY",
        "prompt",
        "schema",
        "ajv",
        "validate",
        "contents",
        "res",
        "configIsValid",
        "configErrors",
        "message",
        "appConfig",
        "answer",
        "_key",
        "trimmedLine",
        "items",
        "key",
        "value",
        "result",
        "NEWLINES",
        "splitHelper",
        "mergedEnv",
        "oldJson",
        "newJson",
        "mergedJson",
        "flags",
        "answer",
        "oldData",
        "destination",
        "resultObject",
        "data",
        "json",
        "project",
        "data",
        "destination",
        "data",
        "newRuntime",
        "credential",
        "value",
        "name",
        "config"
    ],
    "comments": [
        "Copyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.",
        "make sure to prompt to stderr",
        "Note: if this get's turned into a lib make sure to call",
        "this into an init/constructor as it might create mocking issues in jest",
        "eslint-disable-next-line node/no-unpublished-require",
        "write app config to .aio file",
        "replace any underscores in key with double underscores",
        "skip comments",
        "pop first element",
        "join the rest",
        "add a new line",
        "FILE_FORMAT_JSON default",
        "for non-interactive, get from the flags",
        "apihost is not sent in console config",
        "find jwt credential",
        "enrich jwt credentials with ims org id",
        "the json schema enforces for jwt OR oauth2 OR apiKey in a credential",
        "replace any spaces with underscores",
        "remove the credentials",
        "keep only a reference to the credentials in the aio config (hiding secrets)",
        "write to the console config (for the `aio console` commands)"
    ],
    "docstrings": [
        "* Validate the config json\n *\n * @param {object} configJson the json to validate\n * @returns {object} with keys valid (boolean) and errors (object). errors is null if no errors",
        "* Load a config file\n *\n * @param {string} fileOrBuffer the path to the config file or a Buffer\n * @returns {object} object with properties `value` and `format`",
        "* Load and validate a config file\n *\n * @param {string} fileOrBuffer the path to the config file or a Buffer\n * @returns {object} object with properties `value` and `format`",
        "* Writes default app config to .aio file\n *\n * @param {string} parentDir the parent folder to write the .aio file to\n * @param {object} [flags] flags for file writing\n * @param {boolean} [flags.overwrite=false] set to true to overwrite the existing .env file\n * @param {boolean} [flags.merge=false] set to true to merge in the existing .env file (takes precedence over overwrite)\n * @param {boolean} [flags.interactive=false] set to true to prompt the user for file overwrite\n * @returns {Promise} promise from writeFile call",
        "* Pretty prints the json object as a string.\n * Delimited by 2 spaces.\n *\n * @param {object} json the json to pretty print\n * @returns {string} the transformed json as a string",
        "* Confirmation prompt for overwriting, or merging a file if it already exists.\n *\n * @param {string} filePath the file to ovewrite\n * @returns {object} ovewrite, merge, abort (properties, that are set to true if chosen)",
        "* Transform a json object to a flattened version. Any nesting is separated by the `separator` string.\n * For example, if you have the `_` separator string, flattening this:\n *\n * {\n *    foo: {\n *      bar: 'a',\n *      baz: {\n *        faz: 'b'\n *      }\n *    }\n * }\n *\n * const result = flattenObjectWithSeparator(json, {}, '', '_)\n * The result would then be:\n * {\n *    'foo_bar': 'a',\n *    'foo_baz_faz': 'b'\n * }\n *\n * Any underscores in the object key are escaped with an underscore.\n *\n * @param {object} json the json object to transform\n * @param {object} result the result object to initialize the function with\n * @param {string} prefix the prefix to add to the final key\n * @param {string} separator the separator string to separate the nested levels with\n * @returns {object} the transformed json",
        "* Split line from .env\n *\n * @param {string} line env line to split\n * @returns {Array} tuple, first item is key, second item is value or null if it's a comment",
        "* Merge .env data\n * (we don't want to go through the .env to json conversion)\n * Note that comments will not be preserved.\n *\n * @param {string} oldEnv existing env values\n * @param {string} newEnv new env values (takes precedence)\n * @returns {string} the merged env data",
        "* Merge json data\n *\n * @param {string} oldData existing values\n * @param {string} newData new values (takes precedence)\n * @returns {object} the merged json",
        "* Merge .env or json data\n *\n * @param {string} oldData the data to merge to\n * @param {string} newData the new data to merge from (these contents take precedence)\n * @param {*} fileFormat the file format of the data (env, json)\n * @returns {string | object} the merged env or json data",
        "* Writes the data to file.\n * Checks for conflicts and gives options to overwrite, merge, or abort.\n *\n * @param {string} destination the file to write to\n * @param {string} data the data to write to disk\n * @param {object} [flags] flags for file writing\n * @param {boolean} [flags.overwrite=false] set to true to overwrite the existing .env file\n * @param {boolean} [flags.merge=false] set to true to merge in the existing .env file (takes precedence over overwrite)\n * @param {boolean} [flags.interactive=false] set to true to prompt the user for file overwrite\n * @param {boolean} [flags.fileFormat=json] set the file format to write (defaults to json)\n * @returns {Promise} the writefile",
        "* Writes the json object as AIO_ env vars to the .env file in the specified parent folder.\n *\n * @param {object} json the json object to transform and write to disk\n * @param {string} parentFolder the parent folder to write the .env file to\n * @param {object} [flags] flags for file writing\n * @param {boolean} [flags.overwrite=false] set to true to overwrite the existing .env file\n * @param {boolean} [flags.merge=false] set to true to merge in the existing .env file (takes precedence over overwrite)\n * @param {boolean} [flags.interactive=false] set to true to prompt the user for file overwrite\n * @param {object} [extraEnvVars={}] extra environment variables key/value pairs to add to the generated .env.\n *        Extra variables are treated as raw and won't be rewritten to comply with aio-lib-core-config\n * @returns {Promise} promise from writeFile call",
        "* Writes the org, project, and workspace information to the global console config.\n *\n * @param {object} json the json object to write to the console config",
        "* Writes the json object to the .aio file in the specified parent folder.\n *\n * @param {object} json the json object to write to disk\n * @param {string} parentFolder the parent folder to write the .aio file to\n * @param {object} [flags] flags for file writing\n * @param {boolean} [flags.overwrite=false] set to true to overwrite the existing .env file\n * @param {boolean} [flags.merge=false] set to true to merge in the existing .env file (takes precedence over overwrite)\n * @param {boolean} [flags.interactive=false] set to true to prompt the user for file overwrite\n * @returns {Promise} promise from writeFile call",
        "* Transform runtime object value to what this plugin expects (single runtime namespace).\n *\n * @example\n * from:\n * {\n *   \"namespaces\": [\n *     {\n *       \"name\": \"abc\",\n *       \"auth\": \"123\"\n *     }\n *   ]\n * }\n * to:\n * {\n *   \"namespace\": \"abc\",\n *   \"auth\": \"123\"\n * }\n *\n * @param {object} runtime the runtime value to transform\n * @returns {object} the transformed runtime object\n * @private",
        "* Transforms a credentials array to an object, to what this plugin expects.\n * Enrich with ims_org_id if it is a jwt credential.\n *\n * @example\n * from:\n * [{\n *   \"id\": \"17561142\",\n *   \"name\": \"Project Foo\",\n *   \"integration_type\": \"oauthweb\",\n *   \"oauth2\": {\n *       \"client_id\": \"XYXYXYXYXYXYXYXYX\",\n *       \"client_secret\": \"XYXYXYXYZZZZZZ\",\n *       \"redirect_uri\": \"https://test123\"\n *   }\n * }]\n * to:\n * {\n *   \"Project Foo\": {\n *       \"client_id\": \"XYXYXYXYXYXYXYXYX\",\n *       \"client_secret\": \"XYXYXYXYZZZZZZ\",\n *       \"redirect_uri\": \"https://test123\"\n *   }\n * }\n *\n * @param {Array} credentials array from Downloadable File Format\n * @param {string} imsOrgId the ims org id\n * @returns {object} the Credentials object\n * @private",
        "* Trim the credentials array to only keep a reference to each integration credential.\n * Replace spaces in the name with _ and lowercase the name\n *\n * @example\n * from:\n * [{\n *   \"id\": \"17561142\",\n *   \"name\": \"Project Foo\",\n *   \"integration_type\": \"oauthweb\",\n *   \"oauth2\": {\n *       \"client_id\": \"XYXYXYXYXYXYXYXYX\",\n *       \"client_secret\": \"XYXYXYXYZZZZZZ\",\n *       \"redirect_uri\": \"https://test123\"\n *   }\n * }]\n * to:\n * [{\n *   \"id\": \"17561142\",\n *   \"name\": \"project_foo\",\n *   \"integration_type\": \"oauthweb\"\n * }]\n *\n * @param {Array} credentials array from Downloadable File Format\n * @returns {object} an array holding only the references to the credentials\n * @private",
        "* Import a downloadable config and write to the appropriate .env (credentials) and .aio (non-credentials) files.\n *\n * @param {string} configFileOrBuffer the path to the config file to import or a buffer\n * @param {string} [destinationFolder=the current working directory] the path to the folder to write the .env and .aio files to\n * @param {object} [flags={}] flags for file writing\n * @param {boolean} [flags.overwrite=false] set to true to overwrite the existing .env file\n * @param {boolean} [flags.merge=false] set to true to merge in the existing .env file (takes precedence over overwrite)\n * @param {object} [extraEnvVars={}] extra environment variables key/value pairs to add to the generated .env.\n *        Extra variables are treated as raw and won't be rewritten to comply with aio-lib-core-config\n * @returns {Promise} promise from writeAio call"
    ],
    "functions": [
        "validateConfig",
        "loadConfigFile",
        "loadAndValidateConfigFile",
        "writeDefaultAppConfig",
        "prettyPrintJson",
        "checkFileConflict",
        "flattenObjectWithSeparator",
        "splitEnvLine",
        "mergeEnv",
        "mergeJson",
        "mergeData",
        "writeFile",
        "writeEnv",
        "writeConsoleConfig",
        "writeAio",
        "transformRuntime",
        "transformCredentials",
        "credentialsReferences",
        "importConfigJson"
    ],
    "classes": []
}