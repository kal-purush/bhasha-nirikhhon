{
    "identifiers": [
        "time",
        "os",
        "logging",
        "sys",
        "pickle",
        "pulsar",
        "openai",
        "pandas",
        "pd",
        "matplotlib",
        "pyplot",
        "plt",
        "pickle",
        "load",
        "open",
        "input_text",
        "openai",
        "Embedding",
        "create",
        "input",
        "input_text",
        "model",
        "response",
        "input_text",
        "pickled_model",
        "predict_proba",
        "encode",
        "input_text",
        "argmax",
        "pickled_model",
        "classes_",
        "max_id",
        "os",
        "getenv",
        "os",
        "getenv",
        "pulsar",
        "Client",
        "service_url",
        "authentication",
        "pulsar",
        "AuthenticationToken",
        "token",
        "client",
        "subscribe",
        "subscription",
        "consumer",
        "receive",
        "msg",
        "data",
        "classify_text",
        "tweet",
        "labels",
        "append",
        "sentiment",
        "tweets",
        "append",
        "tweet",
        "logging",
        "info",
        "format",
        "tweet",
        "sentiment",
        "len",
        "labels",
        "pd",
        "DataFrame",
        "tweets",
        "labels",
        "df",
        "value_counts",
        "values",
        "plot",
        "kind",
        "figsize",
        "width",
        "color",
        "plt",
        "title",
        "plt",
        "ylabel",
        "plt",
        "xticks",
        "rotation",
        "plt",
        "xlabel",
        "plt",
        "savefig",
        "df",
        "to_csv",
        "df",
        "values",
        "consumer",
        "acknowledge",
        "msg",
        "logging",
        "info",
        "time",
        "sleep",
        "Consumer",
        "consumer",
        "read_messages",
        "consumer",
        "client",
        "close",
        "logging",
        "basicConfig",
        "stream",
        "sys",
        "stdout",
        "level",
        "logging",
        "INFO",
        "read_messages"
    ],
    "literals": [
        "\"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\"",
        "'/Users/justincun/DSC180A/project-info/starter-stream-py/src/astra_streaming/logistic_regression_model.pkl'",
        "'rb'",
        "\"text-similarity-davinci-001\"",
        "'data'",
        "'embedding'",
        "\"ASTRA_STREAMING_TOKEN\"",
        "\"ASTRA_STREAMING_URL\"",
        "\"persistent://twitter-test-1/default/preprocess-topic\"",
        "'my-subscription'",
        "'UTF-8'",
        "\"Tweet Classified! '{}', sentiment='{}' \\n\"",
        "'Tweet'",
        "'Sentiment'",
        "'Sentiment'",
        "'bar'",
        "'#2BAC6B'",
        "'#EE9926'",
        "'#959997'",
        "'Sentiment Analysis'",
        "'Counts'",
        "'Sentiment'",
        "'/Users/justincun/DSC180A/project-info/starter-stream-py/src/astra_streaming/results_chart.png'",
        "'/Users/justincun/DSC180A/project-info/starter-stream-py/src/astra_streaming/results_df.csv'",
        "\"Still waiting for a message...\"",
        "\"__main__\""
    ],
    "variables": [
        "openai",
        "api_key",
        "pickled_model",
        "response",
        "max_id",
        "token",
        "service_url",
        "subscription",
        "client",
        "consumer",
        "labels",
        "tweets",
        "msg",
        "tweet",
        "sentiment",
        "df",
        "values",
        "consumer"
    ],
    "comments": [
        "Log Tweet and Sentiment on terminal",
        "Output DataFrame and Barchart",
        "Acknowledging the message to remove from message backlog"
    ],
    "docstrings": [
        "\"\"\"\n    Create a pulsar consumer that consumes tweets to a topic\n    \"\"\"",
        "\"\"\"\n        Create and send random messages\n        \"\"\"",
        "\"\"\"\n    Create an instance of the consumer and\n    Fire it up to read messages until the program is terminated\n    \"\"\""
    ],
    "functions": [
        "encode",
        "classify_text",
        "read_messages",
        "read_messages"
    ],
    "classes": [
        "Consumer"
    ]
}