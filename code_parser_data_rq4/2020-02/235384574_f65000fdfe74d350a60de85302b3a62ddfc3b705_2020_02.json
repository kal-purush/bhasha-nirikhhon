{
    "identifiers": [
        "Token",
        "AST",
        "Operator",
        "Op",
        "Op",
        "Op",
        "Op",
        "Op",
        "Op",
        "Op",
        "Op",
        "Op",
        "program",
        "tokens",
        "ast",
        "compiled"
    ],
    "literals": [
        "'../../types'",
        "\\\nmutable foo = (1 + 2) * 3\nmutable bar = 1 + 2 * (3 - 4)\nbar = 1 * ((foo + bar) / 2)",
        "'keyword'",
        "'mutable'",
        "'ident'",
        "'foo'",
        "'eq'",
        "'='",
        "'lparen'",
        "'('",
        "'number'",
        "'1'",
        "'plus'",
        "'+'",
        "'number'",
        "'2'",
        "'rparen'",
        "')'",
        "'asterisk'",
        "'*'",
        "'number'",
        "'3'",
        "'newline'",
        "'\\n'",
        "'keyword'",
        "'mutable'",
        "'ident'",
        "'bar'",
        "'eq'",
        "'='",
        "'number'",
        "'1'",
        "'plus'",
        "'+'",
        "'number'",
        "'2'",
        "'asterisk'",
        "'*'",
        "'lparen'",
        "'('",
        "'number'",
        "'3'",
        "'dash'",
        "'-'",
        "'number'",
        "'4'",
        "'rparen'",
        "')'",
        "'newline'",
        "'\\n'",
        "'ident'",
        "'bar'",
        "'eq'",
        "'='",
        "'number'",
        "'1'",
        "'asterisk'",
        "'*'",
        "'lparen'",
        "'('",
        "'lparen'",
        "'('",
        "'ident'",
        "'foo'",
        "'plus'",
        "'+'",
        "'ident'",
        "'bar'",
        "'rparen'",
        "')'",
        "'slash'",
        "'/'",
        "'number'",
        "'2'",
        "'rparen'",
        "')'",
        "'newline'",
        "'\\n'",
        "'VarDeclaration'",
        "'Void'",
        "'IdentLiteral'",
        "'foo'",
        "'Num'",
        "'BinaryOpExpr'",
        "'Num'",
        "'PrioritizedExpr'",
        "'Num'",
        "'BinaryOpExpr'",
        "'Num'",
        "'NumberLiteral'",
        "'1'",
        "'Num'",
        "'NumberLiteral'",
        "'2'",
        "'Num'",
        "'NumberLiteral'",
        "'3'",
        "'Num'",
        "'VarDeclaration'",
        "'Void'",
        "'IdentLiteral'",
        "'bar'",
        "'Num'",
        "'BinaryOpExpr'",
        "'Num'",
        "'NumberLiteral'",
        "'1'",
        "'Num'",
        "'BinaryOpExpr'",
        "'Num'",
        "'NumberLiteral'",
        "'2'",
        "'Num'",
        "'PrioritizedExpr'",
        "'Num'",
        "'BinaryOpExpr'",
        "'Num'",
        "'NumberLiteral'",
        "'3'",
        "'Num'",
        "'NumberLiteral'",
        "'4'",
        "'Num'",
        "'VarAssignmentExpr'",
        "'Void'",
        "'IdentLiteral'",
        "'bar'",
        "'Num'",
        "'BinaryOpExpr'",
        "'Num'",
        "'NumberLiteral'",
        "'1'",
        "'Num'",
        "'PrioritizedExpr'",
        "'Num'",
        "'BinaryOpExpr'",
        "'Num'",
        "'PrioritizedExpr'",
        "'Num'",
        "'BinaryOpExpr'",
        "'Num'",
        "'IdentLiteral'",
        "'foo'",
        "'Num'",
        "'IdentLiteral'",
        "'bar'",
        "'Num'",
        "'NumberLiteral'",
        "'2'",
        "'Num'",
        "\\\nlet foo = (1 + 2) * 3;\nlet bar = 1 + (2 * (3 - 4));\nbar = 1 * ((foo + bar) / 2);"
    ],
    "variables": [
        "program",
        "tokens",
        "ast",
        "compiled"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [],
    "classes": []
}