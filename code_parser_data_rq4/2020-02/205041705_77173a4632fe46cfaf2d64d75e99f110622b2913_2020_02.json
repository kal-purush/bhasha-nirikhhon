{
    "identifiers": [
        "unicode_literals",
        "logging",
        "codecs",
        "os",
        "stat",
        "docker",
        "turbinia",
        "TurbiniaException",
        "logging",
        "getLogger",
        "path",
        "os",
        "path",
        "exists",
        "path",
        "os",
        "stat",
        "path",
        "st_mode",
        "stat",
        "S_ISBLK",
        "mode",
        "_create_client",
        "docker",
        "from_env",
        "docker",
        "errors",
        "APIError",
        "exception",
        "TurbiniaException",
        "format",
        "exception",
        "docker_client",
        "image_id",
        "client",
        "images",
        "get",
        "image_id",
        "docker",
        "errors",
        "ImageNotFound",
        "exception",
        "TurbiniaException",
        "message",
        "format",
        "image_id",
        "exception",
        "image",
        "return_filter",
        "client",
        "images",
        "return_filter",
        "accepted_vars",
        "getattr",
        "img",
        "return_filter",
        "replace",
        "img",
        "images",
        "docker",
        "errors",
        "APIError",
        "exception",
        "TurbiniaException",
        "format",
        "exception",
        "images",
        "DockerManager",
        "image_id",
        "ContainerManager",
        "get_image",
        "image_id",
        "mount_paths",
        "mode",
        "mode",
        "accepted_vars",
        "mpath",
        "mount_paths",
        "format",
        "mpath",
        "mpath",
        "file_paths",
        "keys",
        "device_mpath",
        "device_paths",
        "IsBlockDevice",
        "mpath",
        "device_paths",
        "append",
        "device_mpath",
        "mpath",
        "mode",
        "TurbiniaException",
        "format",
        "mode",
        "device_paths",
        "file_paths",
        "cmd",
        "shell",
        "ro_paths",
        "rw_paths",
        "kwargs",
        "shell",
        "format",
        "cmd",
        "join",
        "cmd",
        "format",
        "cmd",
        "rw_paths",
        "_create_mount_points",
        "rw_paths",
        "device_paths",
        "extend",
        "dwpath",
        "file_paths",
        "update",
        "fwpath",
        "ro_paths",
        "_create_mount_points",
        "ro_paths",
        "mode",
        "device_paths",
        "extend",
        "drpath",
        "file_paths",
        "update",
        "frpath",
        "device_paths",
        "file_paths",
        "key",
        "value",
        "kwargs",
        "items",
        "value",
        "client",
        "containers",
        "create",
        "image",
        "cmd",
        "args",
        "container",
        "start",
        "container",
        "logs",
        "stream",
        "stdo",
        "stdstream",
        "codecs",
        "decode",
        "stdo",
        "strip",
        "log",
        "debug",
        "stdo",
        "stdout",
        "stdo",
        "container",
        "wait",
        "docker",
        "errors",
        "APIError",
        "exception",
        "container",
        "container",
        "remove",
        "v",
        "format",
        "exception",
        "log",
        "error",
        "message",
        "TurbiniaException",
        "message",
        "results",
        "results",
        "container",
        "container",
        "remove",
        "v",
        "stdout",
        "stderr",
        "ret"
    ],
    "literals": [
        "'turbinia'",
        "'An issue has occurred connecting to the Docker daemon: {0!s}'",
        "'The Docker image {0!s} could not be found: {1!s}'",
        "'short_id'",
        "'id'",
        "'sha256:'",
        "''",
        "'An error occurred retrieving the images: {0!s}'",
        "'rw'",
        "'rw'",
        "'ro'",
        "'{0:s}:{0:s}:{1:s}'",
        "'r'",
        "'bind'",
        "'mode'",
        "'An incorrect mode was passed: {0:s}. Unable to create the correct '",
        "'mount points for the Docker container.'",
        "''",
        "'entrypoint'",
        "'/bin/sh'",
        "'-c '",
        "'\\\"{0:s}\\\"'",
        "' '",
        "'-c '",
        "'\\\"{0:s}\\\"'",
        "'ro'",
        "'devices'",
        "'volumes'",
        "'utf-8'",
        "'An error has occurred with the container: {0!s}'",
        "'Error'",
        "'StatusCode'"
    ],
    "variables": [
        "log",
        "mode",
        "client",
        "docker_client",
        "image",
        "message",
        "accepted_vars",
        "images",
        "images",
        "image",
        "accepted_vars",
        "device_paths",
        "file_paths",
        "device_mpath",
        "file_paths",
        "mpath",
        "container",
        "args",
        "stdout",
        "kwargs",
        "cmd",
        "cmd",
        "cmd",
        "device_paths",
        "file_paths",
        "dwpath",
        "fwpath",
        "drpath",
        "frpath",
        "args",
        "args",
        "args",
        "key",
        "container",
        "stdstream",
        "stdo",
        "results",
        "message",
        "stderr",
        "ret"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "Copyright 2020 Google Inc.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "short_id and id will always start with sha256:",
        "Override the entrypoint to /bin/sh",
        "Create the device and file mount paths",
        "Add any additional arguments",
        "Stream program stdout from container"
    ],
    "docstrings": [
        "\"\"\"Library to handle docker related queries.\"\"\"",
        "\"\"\"Checks path to determine whether it is a block device.\n\n  Args:\n      path: String of path to check.\n\n  Returns:\n      Bool indicating success.\n  \"\"\"",
        "\"\"\"Class handling Docker management.\"\"\"",
        "\"\"\"Initialize the Docker manager client.\"\"\"",
        "\"\"\"Creates a Docker client.\n\n    Initializes a connection to the Docker daemon using\n    preconfigured Docker environment variables.\n\n    Returns:\n      docker_client(DockerClient): The Docker daemon client.\n\n    Raises:\n      TurbiniaException: If the Docker daemon could not be connected to.\n    \"\"\"",
        "\"\"\"Retrieve the Docker Image object.\n\n    Args:\n      image_id(str): The short image id.\n\n    Returns:\n      image(Image): The Image object.\n\n    Raises:\n      TurbiniaException: If the Docker Image is not found.\n    \"\"\"",
        "\"\"\"Lists all available Docker images.\n\n    Args:\n     return_filter(str): If provided, will return a subset of the Images data.\n        Allowed values are 'short_id' and 'id'.\n\n    Returns:\n      list: containing:\n        Images: The Image objects\n        str: The Image ids if a filter was specified.\n\n    Raises:\n      TurbiniaException: If an error occurred retrieving the images.\n    \"\"\"",
        "\"\"\"Class representing Docker containers.\n\n  Attributes:\n    image_id(str): Docker image id.\n  \"\"\"",
        "\"\"\"Initialize the ContainerManager object.\n\n    Args:\n      image_id(str): The image id to create a container from.\n    \"\"\"",
        "\"\"\"Creates file and device mounting arguments.\n\n    The arguments will be passed into the container with the appropiate\n    mounting parameters. All device blocks will be mounted as read only,\n    regardless of the specified mode.\n\n    Attributes:\n      mount_paths(list): The paths on the host system to be mounted.\n      mode(str): The mode the path will be mounted in. The acceptable\n                 parameters are rw for read write and ro for read only.\n\n    Returns:\n      tuple: containing:\n        list: The device blocks that will be mounted.\n        dict: The file paths that will be mounted.\n\n    Raises:\n      TurbiniaException: If an incorrect mode was passed.\n    \"\"\"",
        "\"\"\"Executes a Docker container.\n\n    A new Docker container will be created from the image id,\n    executed, and then removed.\n\n    Attributes:\n      cmd(str|list): command to be executed.\n      shell (bool): Whether the cmd is in the form of a string or a list.\n      mount_paths(list): A list of paths to mount to the container.\n      **kwargs: Any additional keywords to pass to the container.\n\n    Returns:\n      stdout(str): stdout of the container.\n      stderr(str): stderr of the container.\n      ret(int): the return code of the process run.\n\n    Raises:\n      TurbiniaException: If an error occurred with the Docker container.\n    \"\"\""
    ],
    "functions": [
        "IsBlockDevice",
        "_create_client",
        "get_image",
        "list_images",
        "_create_mount_points",
        "execute_container"
    ],
    "classes": [
        "DockerManager",
        "ContainerManager"
    ]
}