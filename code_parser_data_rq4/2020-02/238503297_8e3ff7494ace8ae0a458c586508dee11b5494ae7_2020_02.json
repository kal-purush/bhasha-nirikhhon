{
    "identifiers": [
        "com",
        "company",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "regex",
        "Matcher",
        "java",
        "util",
        "regex",
        "Pattern",
        "count",
        "words",
        "split",
        "i",
        "i",
        "words",
        "length",
        "i",
        "words",
        "i",
        "length",
        "words",
        "i",
        "charAt",
        "words",
        "i",
        "length",
        "words",
        "i",
        "charAt",
        "words",
        "i",
        "length",
        "count",
        "count",
        "word",
        "happy",
        "i",
        "i",
        "word",
        "length",
        "i",
        "word",
        "charAt",
        "i",
        "word",
        "charAt",
        "i",
        "word",
        "charAt",
        "i",
        "happy",
        "happy",
        "happy",
        "maxSub",
        "i",
        "i",
        "length",
        "i",
        "subs",
        "substring",
        "i",
        "startsWith",
        "subs",
        "endsWith",
        "subs",
        "subs",
        "length",
        "maxSub",
        "length",
        "maxSub",
        "subs",
        "maxSub",
        "numString",
        "i",
        "i",
        "length",
        "i",
        "isDigit",
        "charAt",
        "i",
        "numString",
        "charAt",
        "i",
        "numString",
        "numWords",
        "numString",
        "split",
        "result",
        "item",
        "numWords",
        "item",
        "item",
        "trim",
        "item",
        "length",
        "result",
        "parseInt",
        "item",
        "result",
        "a",
        "b",
        "a",
        "replaceAll",
        "b",
        "count",
        "i",
        "i",
        "length",
        "i",
        "charAt",
        "i",
        "charAt",
        "i",
        "charAt",
        "i",
        "charAt",
        "i",
        "count",
        "count",
        "reverse",
        "index",
        "i",
        "length",
        "i",
        "i",
        "reverse",
        "charAt",
        "i",
        "equals",
        "reverse",
        "i",
        "i",
        "length",
        "i",
        "charAt",
        "i",
        "reverse",
        "charAt",
        "i",
        "index",
        "i",
        "substring",
        "index",
        "words",
        "split",
        "result",
        "word",
        "words",
        "word",
        "equals",
        "result",
        "result",
        "word",
        "result",
        "trim",
        "isCount",
        "notCount",
        "i",
        "i",
        "length",
        "i",
        "charAt",
        "i",
        "charAt",
        "i",
        "isCount",
        "i",
        "i",
        "length",
        "i",
        "charAt",
        "i",
        "charAt",
        "i",
        "charAt",
        "i",
        "notCount",
        "isCount",
        "notCount",
        "result",
        "i",
        "i",
        "length",
        "i",
        "isDigit",
        "charAt",
        "i",
        "result",
        "parseInt",
        "charAt",
        "i",
        "result",
        "args",
        "obj",
        "obj",
        "sumNumbers",
        "obj",
        "sumNumbers",
        "obj",
        "sumNumbers"
    ],
    "literals": [
        "\" \"",
        "\"\"",
        "\"\"",
        "\" \"",
        "\" \"",
        "\"\"",
        "\"\"",
        "\" \"",
        "\"\"",
        "\"is\"",
        "\" is not \"",
        "\"\"",
        "\"hoopla123asq\"",
        "\"aasas11basd33\"",
        "\"7 11\""
    ],
    "variables": [],
    "comments": [
        "Given a string, count the number of words ending in 'y' or 'z' -- so the 'y' in \"heavy\" and the 'z' in \"fez\"",
        "count, but not the 'y' in \"yellow\" (not case sensitive). We'll say that a y or z is at the end of a word if there",
        "is not an alphabetic letter immediately following it.",
        "We'll say that a lowercase 'g' in a string is \"happy\" if there is another 'g' immediately to its left or right.",
        "Return true if all the g's in the given string are happy.",
        "Given a string, return the longest substring that appears at both the beginning and end of the string without",
        "overlapping. For example, sameEnds(\"abXab\") is \"ab\".",
        "Given a string, return the sum of the numbers appearing in the string, ignoring all other characters.",
        "A number is a series of 1 or more digit chars in a row. (Note: Character.isDigit(char) tests if a char is",
        "one of the chars '0', '1', .. '9'. Integer.parseInt(string) converts a string to an int.)",
        "Given two strings, base and remove, return a version of the base string where all instances of the remove string",
        "have been removed (not case sensitive). You may assume that the remove string is length 1 or more. Remove only",
        "non-overlapping instances, so with \"xxx\" removing \"xx\" leaves \"x\".",
        "We'll say that a \"triple\" in a string is a char appearing three times in a row. Return the number of triples",
        "in the given string. The triples may overlap.",
        "Given a string, look for a mirror image (backwards) string at both the beginning and end of the given string.",
        "In other words, zero or more characters at the very begining of the given string, and at the very end of the string",
        "in reverse order (possibly overlapping). For example, the string \"abXYZba\" has the mirror end \"ab\".",
        "Given a string, return a string where every appearance of the lowercase word \"is\" has been replaced with \"is not\".",
        "The word \"is\" should not be immediately preceeded or followed by a letter -- so for example the \"is\" in \"this\" does",
        "not count. (Note: Character.isLetter(char) tests if a char is a letter.)",
        "Given a string, return true if the number of appearances of \"is\" anywhere in the string is equal to the",
        "number of appearances of \"not\" anywhere in the string (case sensitive).",
        "Given a string, return the sum of the digits 0-9 that appear in the string, ignoring all other characters. Return",
        "0 if there are no digits in the string. (Note: Character.isDigit(char) tests if a char is one of the chars",
        "'0', '1', .. '9'. Integer.parseInt(string) converts a string to an int.)"
    ],
    "docstrings": [],
    "functions": [
        "countYZ",
        "gHappy",
        "sameEnds",
        "sumNumbers",
        "withoutString",
        "countTriple",
        "mirrorEnds",
        "notReplace",
        "equalIsNot",
        "sumDigits",
        "main"
    ],
    "classes": [
        "String3"
    ]
}