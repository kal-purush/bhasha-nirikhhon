{
    "identifiers": [],
    "literals": [],
    "variables": [],
    "comments": [],
    "docstrings": [
        "package com.wj.jpademo;\n\nimport com.wj.jpademo.model.Coffee;\nimport com.wj.jpademo.model.CoffeeOrder;\nimport com.wj.jpademo.model.OrderState;\nimport com.wj.jpademo.repository.CoffeeOrderRepository;\nimport com.wj.jpademo.repository.CoffeeRepository;\nimport com.wj.jpademo.service.CoffeeOrderService;\nimport com.wj.jpademo.service.CoffeeService;\nimport io.lettuce.core.ReadFrom;\nimport lombok.extern.slf4j.Slf4j;\nimport org.joda.money.CurrencyUnit;\nimport org.joda.money.Money;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.ApplicationArguments;\nimport org.springframework.boot.ApplicationRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.data.redis.LettuceClientConfigurationBuilderCustomizer;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@SpringBootApplication\n@EnableJpaRepositories //开启JPA的注解\n@Slf4j\n@EnableCaching(proxyTargetClass = true) //开启SpringBoot缓存，基于类的拦截\npublic class JpaDemoApplication implements ApplicationRunner{\n\n\t @Autowired\n\t private CoffeeRepository coffeeRepository;\n\n\t @Autowired\n\t private CoffeeOrderRepository orderRepository;\n\n\t@Autowired\n\tprivate CoffeeService coffeeService;\n\n\t@Autowired\n\tprivate CoffeeOrderService orderService;",
        "Autowired\n\tprivate JedisPool jedisPool;\n\n\t@Autowired\n\tprivate JedisPoolConfig jedisPoolConfig;",
        "@Bean\n\tpublic RedisTemplate<String,Coffee> redisTemplate(RedisConnectionFactory redisConnectionFactory){\n          RedisTemplate<String,Coffee> templates = new RedisTemplate<>();\n          templates.setConnectionFactory(redisConnectionFactory);\n          return templates;\n\t}\n\n\t@Bean\n\tpublic LettuceClientConfigurationBuilderCustomizer customizer(){\n\t\treturn builder ->builder.readFrom(ReadFrom.MASTER_PREFERRED);\n\t}",
        "@Bean\n\t@ConfigurationProperties(\"redis\")\n\tpublic JedisPoolConfig jedisPoolConfig(){\n\t\treturn new JedisPoolConfig();\n\t}\n\n\t@Bean(destroyMethod = \"close\")\n\tpublic JedisPool jedisPool(@Value(\"${redis.host}\") String host){\n\t\tlog.info(\"host:{}\",host);\n \t\treturn new JedisPool(host);\n\t}",
        "@Override\n\t//@Transactional\n\tpublic void run(ApplicationArguments args) throws Exception {\n\t\tOptional<Coffee> mocha = coffeeService.findOneCoffee(\"mocha\"); //Optional作为一个容器存放对象，可以减少空指针异常。\n         log.info(\"coffee:{}\",mocha);\n\n\t\tfor (int i = 0; i <5 ; i++) {\n\t\t\tmocha = coffeeService.findOneCoffee(\"mocha\");\n\t\t}\n\t\tlog.info(\"Value from redis.....{}\",mocha);\n\n\n\t}\n\n\tprivate void testCacheSpringAndRedis() throws InterruptedException {\n\t\tlog.info(\"count:{}\",coffeeService.findAllCoffee().size());\n\t\tfor (int i = 0; i <10; i++) {\n\t\t\tlog.info(\"Reading from cache....\");\n\t\t\tcoffeeService.findAllCoffee();\n\t\t}\n\t\t//coffeeService.reload();\n\t\tThread.sleep(5000);\n\t\tlog.info(\"Reading after reload....\");\n\n\t\tcoffeeService.findAllCoffee()\n\t\t.forEach(coffee -> log.info(\"Coffee:{}\",coffee));\n\t}",
        "rivate void testJedis() {\n\t\tlog.info(\"jedisPoolConfig:{}\",jedisPoolConfig.toString());\n\t\ttry(Jedis jedis = jedisPool.getResource()) {\n          coffeeRepository.findAll().forEach(coffee ->\n\t\t  jedis.hset(\"springbuks-menu\",coffee.getName(),Long.toString(coffee.getPrice().getAmountMajorInt())));\n\t\t\tMap<String,String> map = jedis.hgetAll(\"springbuks-menu\");\n\t\t\tlog.info(\"menu:{}\",map);\n\t\t\tString price = jedis.hget(\"springbuks-menu\",\"espresso\");\n\t\t\tlog.info(\"the price of espresso is :{}\", Money.of(CurrencyUnit.of(\"CNY\"),Long.parseLong(price)));\n\t\t}\n\t}",
        "private void updateOrder() {\n\t\tlog.info(\"All coffees\",coffeeRepository.findAll());\n\t\tOptional<Coffee> latte = coffeeService.findOneCoffee(\"Latte\"); //Optional作为一个容器存放对象，可以减少空指针异常。\n\t\tif (latte.isPresent()){ //表示对象不为空\n\t\t\tCoffeeOrder order = orderService.createOder(\"wangjie\",latte.get());\n\t\t\tlog.info(\"update init to paid:{}\",orderService.updateOrder(order, OrderState.PAID));\n\t\t\tlog.info(\"update paid to init:{}\",orderService.updateOrder(order,OrderState.INIT));\n\n\t\t}\n\t}\n\n\tprivate void initOrders() {\n\t\tCoffee espresso = Coffee.builder().name(\"espresso\")\n\t\t\t\t.price(Money.of(CurrencyUnit.of(\"CNY\"), 20.0))\n\t\t\t\t.build();\n\t\tcoffeeRepository.save(espresso);\n\t\tlog.info(\"Coffee: {}\", espresso);\n\n\t\tCoffee latte = Coffee.builder().name(\"latte\")\n\t\t\t\t.price(Money.of(CurrencyUnit.of(\"CNY\"),30.0))\n\t\t\t\t.build();\n\t\tcoffeeRepository.save(latte);\n\t\tlog.info(\"Coffee: {}\", latte);\n\n\t\tCoffeeOrder order = CoffeeOrder.builder()\n\t\t\t\t.customer(\"Li Lei\")\n\t\t\t\t.items(Collections.singletonList(espresso))\n\t\t\t\t.state(OrderState.INIT)\n\t\t\t\t.build();\n\t\torderRepository.save(order);\n\t\tlog.info(\"Order: {}\", order);\n\n\t\torder = CoffeeOrder.builder()\n\t\t\t\t.customer(\"Li Lei\")\n\t\t\t\t.items(Arrays.asList(espresso, latte))\n\t\t\t\t.state(OrderState.INIT)\n\t\t\t\t.build();\n\t\torderRepository.save(order);\n\t\tlog.info(\"Order: {}\", order);\n\t}\n\tprivate void findOrders(){\n\t\t//1-\n\t\tcoffeeRepository.findAll(Sort.by(Sort.Direction.DESC,\"id\"))\n\t\t.forEach(o ->log.info(\"loading,{}\",o));\n\t\t//2-",
        "List<CoffeeOrder> list = orderRepository.findTop3ByOrderByUpdateTimeDescIdAsc();\n        log.info(\"findTop3ByOrderByUpdateTimeDescIdAsc:{}\",getJoninedOrderId(list));\n\t\t//不开启事务，会报错\n        list.forEach(o->{\n\t\t\tlog.info(\"Order:{}\",o.getId());\n\t\t\to.getItems().forEach(i ->log.info(\"Item,{}\",i));\n\t\t});\n        //3-\n\t\tlist = orderRepository.findByItems_Name(\"latte\");\n\t\tlog.info(\"findByItems_Name,{}\",getJoninedOrderId(list));",
        "}\n\tprivate String getJoninedOrderId(List<CoffeeOrder> list){\n\t\treturn list.stream().map(o ->o.getId().toString())\n\t\t\t\t.collect(Collectors.joining(\",\"));\n\t}\n}"
    ],
    "functions": [],
    "classes": []
}