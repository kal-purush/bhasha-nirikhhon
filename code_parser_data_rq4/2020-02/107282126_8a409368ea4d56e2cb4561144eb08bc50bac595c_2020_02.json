{
    "identifiers": [
        "ICompetitionProposalState",
        "Competition",
        "CompetitionSuggestion",
        "ICompetitionSuggestionState",
        "CompetitionVote",
        "Address",
        "Redux",
        "ThunkAction",
        "moment",
        "getArc",
        "operationNotifierObserver",
        "IRootState",
        "Observable",
        "of",
        "mergeMap",
        "toArray",
        "first",
        "CompetitionStatusEnum",
        "status",
        "now",
        "moment",
        "competition",
        "hasWinners",
        "CompetitionStatusEnum",
        "CompetitionStatusEnum",
        "CompetitionStatusEnum",
        "CompetitionStatusEnum",
        "CompetitionStatusEnum",
        "CompetitionStatusEnum",
        "CompetitionStatusEnum",
        "CompetitionStatusEnum",
        "CompetitionStatusEnum",
        "competitionStatus",
        "competition",
        "submissions",
        "moment",
        "moment",
        "competition",
        "moment",
        "competition",
        "moment",
        "competition",
        "moment",
        "competition",
        "submissions",
        "submission",
        "submission",
        "now",
        "startTime",
        "status",
        "CompetitionStatusEnum",
        "now",
        "votingStartTime",
        "now",
        "submissionsEndTime",
        "status",
        "submissions",
        "CompetitionStatusEnum",
        "CompetitionStatusEnum",
        "status",
        "CompetitionStatusEnum",
        "now",
        "endTime",
        "status",
        "submissions",
        "CompetitionStatusEnum",
        "CompetitionStatusEnum",
        "status",
        "submissions",
        "hasWinners",
        "CompetitionStatusEnum",
        "CompetitionStatusEnum",
        "CompetitionStatusEnum",
        "CompetitionStatus",
        "status",
        "now",
        "competition",
        "hasWinners",
        "createCompetitionSubmission",
        "proposalId",
        "options",
        "dispatch",
        "Redux",
        "_getState",
        "operationNotifierObserver",
        "dispatch",
        "Competition",
        "proposalId",
        "getArc",
        "competition",
        "options",
        "observer",
        "err",
        "err",
        "err",
        "voteForSubmission",
        "options",
        "dispatch",
        "Redux",
        "_getState",
        "operationNotifierObserver",
        "dispatch",
        "CompetitionSuggestion",
        "options",
        "getArc",
        "submission",
        "observer",
        "err",
        "err",
        "err",
        "redeemForSubmission",
        "options",
        "dispatch",
        "Redux",
        "_getState",
        "operationNotifierObserver",
        "dispatch",
        "CompetitionSuggestion",
        "options",
        "getArc",
        "submission",
        "observer",
        "err",
        "err",
        "err",
        "getSubmissions",
        "proposalId",
        "options",
        "subscribe",
        "Competition",
        "proposalId",
        "getArc",
        "competition",
        "options",
        "mergeMap",
        "submissions",
        "of",
        "submissions",
        "mergeMap",
        "submissions",
        "submissions",
        "mergeMap",
        "submission",
        "submission",
        "first",
        "toArray",
        "getProposalSubmissions",
        "proposalId",
        "subscribe",
        "getSubmissions",
        "proposalId",
        "subscribe",
        "getProposalSubmission",
        "proposalId",
        "id",
        "subscribe",
        "getSubmissions",
        "proposalId",
        "subscribe",
        "suggestions",
        "suggestions",
        "suggestions",
        "getCompetitionVotes",
        "competitionId",
        "voterAddress",
        "subscribe",
        "competitionId",
        "voterAddress",
        "voterAddress",
        "CompetitionVote",
        "getArc",
        "options",
        "subscribe",
        "getSubmissionVotes",
        "submissionId",
        "voterAddress",
        "subscribe",
        "CompetitionSuggestion",
        "submissionId",
        "getArc",
        "submission",
        "voterAddress",
        "voterAddress",
        "getSubmissionVoterHasVoted",
        "submissionId",
        "voterAddress",
        "subscribe",
        "voterAddress",
        "of",
        "getSubmissionVotes",
        "submissionId",
        "voterAddress",
        "subscribe",
        "votes",
        "votes"
    ],
    "literals": [
        "\"@daostack/client\"",
        "\"redux\"",
        "\"redux-thunk\"",
        "\"moment\"",
        "\"arc\"",
        "\"actions/arcActions\"",
        "\"reducers\"",
        "\"rxjs\"",
        "\"rxjs/operators\"",
        "\"Voting started!\"",
        "\"Paused\"",
        "\"Open for submissions\"",
        "\"Not open yet\"",
        "\"Ending, no submissions\"",
        "\"Ended with winners\"",
        "\"Ended, no winners\"",
        "\"Ended, no submissions\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Create Submission\"",
        "string",
        "\"Vote Submission\"",
        "string",
        "\"Redeem Submission\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "competitionStatus",
        "now",
        "startTime",
        "submissionsEndTime",
        "votingStartTime",
        "endTime",
        "hasWinners",
        "status",
        "createCompetitionSubmission",
        "observer",
        "competition",
        "voteForSubmission",
        "observer",
        "submission",
        "redeemForSubmission",
        "observer",
        "submission",
        "getSubmissions",
        "competition",
        "getProposalSubmissions",
        "getProposalSubmission",
        "getCompetitionVotes",
        "options",
        "getSubmissionVotes",
        "submission",
        "getSubmissionVoterHasVoted"
    ],
    "comments": [
        "eslint-disable-next-line no-console",
        "actual id, not the counter",
        "eslint-disable-next-line no-console",
        "actual id, not the counter",
        "eslint-disable-next-line no-console",
        "id of the competition",
        "the \"suggestionId\" is a counter that is unique to the scheme",
        "- and is not to be confused with suggestion.id",
        "fetchAllData so .state() comes from cache",
        "submissionId is the actual id, not the count",
        "submissionId is the actual id, not the count"
    ],
    "docstrings": [
        "* Defined in the order that Competition cards should be sorted in the List component.\n * The string values are how the stati should appear in the GUI.",
        "* open for submissions",
        "* In between submissions and voting period, and there exist submissions.",
        "* in voting period, but not implying there are any submissions",
        "* in voting period and there are submissions",
        "* Voting can no longer occur. Implies neither thatn any voting has occurred,\n   * nor the actual current stage (entire competition may or may not be over).",
        "* competition is over, with or without submissions or winners",
        "* Competition is over with winners",
        "* must be an exact subset of ICompetitionSuggestionQueryOptions"
    ],
    "functions": [
        "notStarted",
        "open",
        "paused",
        "inVotingPeriod",
        "voting",
        "votingIsOver",
        "over",
        "overWithWinners",
        "text"
    ],
    "classes": [
        "CompetitionStatus"
    ]
}