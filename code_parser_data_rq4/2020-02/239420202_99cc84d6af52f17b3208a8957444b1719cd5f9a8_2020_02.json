{
    "identifiers": [
        "com",
        "edurekademo",
        "tutorial",
        "addressbook",
        "javax",
        "servlet",
        "annotation",
        "WebServlet",
        "com",
        "vaadin",
        "annotations",
        "Theme",
        "com",
        "vaadin",
        "annotations",
        "Title",
        "com",
        "vaadin",
        "annotations",
        "VaadinServletConfiguration",
        "com",
        "vaadin",
        "annotations",
        "Widgetset",
        "com",
        "vaadin",
        "server",
        "VaadinRequest",
        "com",
        "vaadin",
        "server",
        "VaadinServlet",
        "com",
        "edurekademo",
        "tutorial",
        "addressbook",
        "backend",
        "Contact",
        "com",
        "edurekademo",
        "tutorial",
        "addressbook",
        "backend",
        "ContactService",
        "com",
        "vaadin",
        "ui",
        "Button",
        "com",
        "vaadin",
        "ui",
        "HorizontalLayout",
        "com",
        "vaadin",
        "ui",
        "UI",
        "com",
        "vaadin",
        "ui",
        "VerticalLayout",
        "com",
        "vaadin",
        "v7",
        "data",
        "util",
        "BeanItemContainer",
        "com",
        "vaadin",
        "v7",
        "ui",
        "Grid",
        "com",
        "vaadin",
        "v7",
        "ui",
        "TextField",
        "Title",
        "Theme",
        "Widgetset",
        "contactList",
        "newContact",
        "contactForm",
        "service",
        "ContactService",
        "createDemoService",
        "Override",
        "request",
        "configureComponents",
        "buildLayout",
        "newContact",
        "addClickListener",
        "e",
        "contactForm",
        "edit",
        "setInputPrompt",
        "addTextChangeListener",
        "e",
        "refreshContacts",
        "e",
        "getText",
        "contactList",
        "setContainerDataSource",
        "contactList",
        "setColumnOrder",
        "contactList",
        "removeColumn",
        "contactList",
        "removeColumn",
        "contactList",
        "removeColumn",
        "contactList",
        "setSelectionMode",
        "Grid",
        "SelectionMode",
        "SINGLE",
        "contactList",
        "addSelectionListener",
        "e",
        "contactForm",
        "edit",
        "contactList",
        "getSelectedRow",
        "refreshContacts",
        "actions",
        "newContact",
        "actions",
        "setWidth",
        "setWidth",
        "actions",
        "setExpandRatio",
        "left",
        "actions",
        "contactList",
        "left",
        "setSizeFull",
        "contactList",
        "setSizeFull",
        "left",
        "setExpandRatio",
        "contactList",
        "mainLayout",
        "left",
        "contactForm",
        "mainLayout",
        "setSizeFull",
        "mainLayout",
        "setExpandRatio",
        "left",
        "setContent",
        "mainLayout",
        "refreshContacts",
        "getValue",
        "stringFilter",
        "contactList",
        "setContainerDataSource",
        "service",
        "findAll",
        "stringFilter",
        "contactForm",
        "setVisible",
        "WebServlet",
        "urlPatterns",
        "VaadinServletConfiguration",
        "ui",
        "productionMode"
    ],
    "literals": [
        "\"Addressbook\"",
        "\"valo\"",
        "\"com.vaadin.v7.Vaadin7WidgetSet\"",
        "\"New contact\"",
        "\"Filter contacts...\"",
        "\"firstName\"",
        "\"lastName\"",
        "\"email\"",
        "\"id\"",
        "\"birthDate\"",
        "\"phone\"",
        "\"100%\"",
        "\"100%\"",
        "\"/*\""
    ],
    "variables": [],
    "comments": [
        "ContactForm is an example of a custom component class",
        "ContactService is a in-memory mock DAO that mimics",
        "a real-world datasource. Typically implemented for",
        "example as EJB or Spring Data based service.",
        "Split and allow resizing"
    ],
    "docstrings": [
        "User Interface written in Java.\n *\n * Define the user interface shown on the Vaadin generated web page by extending the UI class.\n * By default, a new UI instance is automatically created when the page is loaded. To reuse\n * the same instance, add @PreserveOnRefresh.",
        "* Hundreds of widgets. Vaadin's user interface components are just Java\n     * objects that encapsulate and handle cross-browser support and\n     * client-server communication. The default Vaadin components are in the\n     * com.vaadin.ui package and there are over 500 more in\n     * vaadin.com/directory.",
        "* The \"Main method\".\n     *\n     * This is the entry point method executed to initialize and configure the\n     * visible user interface. Executed on every browser reload because a new\n     * instance is created for each web page loaded.",
        "* Synchronous event handling.\n         *\n         * Receive user interaction events on the server-side. This allows you\n         * to synchronously handle those events. Vaadin automatically sends only\n         * the needed changes to the web page without loading a new page.",
        "* Robust layouts.\n     *\n     * Layouts are components that contain other components. HorizontalLayout\n     * contains TextField and Button. It is wrapped with a Grid into\n     * VerticalLayout for the left side of the screen. Allow user to resize the\n     * components with a SplitPanel.\n     *\n     * In addition to programmatically building layout in Java, you may also\n     * choose to setup layout declaratively with Vaadin Designer, CSS and HTML.",
        "* Choose the design patterns you like.\n     *\n     * It is good practice to have separate data access methods that handle the\n     * back-end access and/or the user interface updates. You can further split\n     * your code into classes to easier maintenance. With Vaadin you can follow\n     * MVC, MVP or any other design pattern you choose.",
        "* Deployed as a Servlet or Portlet.\n     *\n     * You can specify additional servlet parameters like the URI and UI class\n     * name and turn on production mode when you have finished developing the\n     * application."
    ],
    "functions": [
        "init",
        "configureComponents",
        "buildLayout",
        "refreshContacts",
        "refreshContacts"
    ],
    "classes": [
        "AddressbookUI",
        "MyUIServlet"
    ]
}