{
    "identifiers": [
        "net",
        "efabrika",
        "util",
        "java",
        "sql",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "StringJoiner",
        "DEFAULT_MAX_ROWS",
        "DEFAULT_MAX_TEXT_COL_WIDTH",
        "CATEGORY_STRING",
        "CATEGORY_INTEGER",
        "CATEGORY_DOUBLE",
        "CATEGORY_DATETIME",
        "CATEGORY_BOOLEAN",
        "CATEGORY_OTHER",
        "label",
        "typeName",
        "width",
        "values",
        "justifyFlag",
        "typeCategory",
        "label",
        "typeName",
        "label",
        "label",
        "typeName",
        "typeName",
        "label",
        "typeName",
        "width",
        "width",
        "width",
        "width",
        "value",
        "values",
        "add",
        "value",
        "i",
        "values",
        "get",
        "i",
        "justifyFlag",
        "justifyFlag",
        "typeCategory",
        "typeCategory",
        "typeCategory",
        "typeCategory",
        "con",
        "s",
        "printTable",
        "con",
        "s",
        "DEFAULT_MAX_ROWS",
        "DEFAULT_MAX_TEXT_COL_WIDTH",
        "conn",
        "tableName",
        "maxRows",
        "printTable",
        "conn",
        "tableName",
        "maxRows",
        "DEFAULT_MAX_TEXT_COL_WIDTH",
        "conn",
        "tableName",
        "maxRows",
        "maxStringColWidth",
        "conn",
        "err",
        "tableName",
        "err",
        "tableName",
        "length",
        "err",
        "maxRows",
        "err",
        "maxRows",
        "DEFAULT_MAX_ROWS",
        "stmt",
        "rs",
        "conn",
        "isClosed",
        "err",
        "sqlSelectAll",
        "tableName",
        "maxRows",
        "stmt",
        "conn",
        "createStatement",
        "rs",
        "stmt",
        "executeQuery",
        "sqlSelectAll",
        "printResultSet",
        "rs",
        "maxStringColWidth",
        "e",
        "err",
        "err",
        "e",
        "getMessage",
        "stmt",
        "stmt",
        "close",
        "rs",
        "rs",
        "close",
        "ignore",
        "rs",
        "printResultSet",
        "rs",
        "DEFAULT_MAX_TEXT_COL_WIDTH",
        "rs",
        "maxStringColWidth",
        "rs",
        "err",
        "rs",
        "isClosed",
        "err",
        "maxStringColWidth",
        "err",
        "maxStringColWidth",
        "DEFAULT_MAX_TEXT_COL_WIDTH",
        "rsmd",
        "rsmd",
        "rs",
        "getMetaData",
        "columnCount",
        "rsmd",
        "getColumnCount",
        "columns",
        "columnCount",
        "tableNames",
        "columnCount",
        "i",
        "i",
        "columnCount",
        "i",
        "c",
        "rsmd",
        "getColumnLabel",
        "i",
        "rsmd",
        "getColumnType",
        "i",
        "rsmd",
        "getColumnTypeName",
        "i",
        "c",
        "setWidth",
        "c",
        "getLabel",
        "length",
        "c",
        "setTypeCategory",
        "whichCategory",
        "c",
        "getType",
        "columns",
        "add",
        "c",
        "tableNames",
        "contains",
        "rsmd",
        "getTableName",
        "i",
        "tableNames",
        "add",
        "rsmd",
        "getTableName",
        "i",
        "rowCount",
        "rs",
        "next",
        "i",
        "i",
        "columnCount",
        "i",
        "c",
        "columns",
        "get",
        "i",
        "value",
        "category",
        "c",
        "getTypeCategory",
        "category",
        "CATEGORY_OTHER",
        "value",
        "c",
        "getTypeName",
        "value",
        "rs",
        "getString",
        "i",
        "rs",
        "getString",
        "i",
        "category",
        "CATEGORY_DOUBLE",
        "value",
        "equals",
        "dValue",
        "rs",
        "getDouble",
        "i",
        "value",
        "format",
        "dValue",
        "CATEGORY_STRING",
        "c",
        "justifyLeft",
        "value",
        "length",
        "maxStringColWidth",
        "value",
        "value",
        "substring",
        "maxStringColWidth",
        "c",
        "setWidth",
        "value",
        "length",
        "c",
        "getWidth",
        "value",
        "length",
        "c",
        "getWidth",
        "c",
        "addValue",
        "value",
        "rowCount",
        "strToPrint",
        "rowSeparator",
        "c",
        "columns",
        "width",
        "c",
        "getWidth",
        "toPrint",
        "name",
        "c",
        "getLabel",
        "diff",
        "width",
        "name",
        "length",
        "diff",
        "width",
        "diff",
        "c",
        "setWidth",
        "width",
        "paddingSize",
        "diff",
        "padding",
        "paddingSize",
        "replace",
        "toPrint",
        "padding",
        "name",
        "padding",
        "strToPrint",
        "append",
        "toPrint",
        "rowSeparator",
        "append",
        "rowSeparator",
        "append",
        "width",
        "replace",
        "lineSeparator",
        "getProperty",
        "lineSeparator",
        "lineSeparator",
        "lineSeparator",
        "rowSeparator",
        "append",
        "append",
        "lineSeparator",
        "strToPrint",
        "append",
        "append",
        "lineSeparator",
        "strToPrint",
        "insert",
        "rowSeparator",
        "strToPrint",
        "append",
        "rowSeparator",
        "sj",
        "name",
        "tableNames",
        "sj",
        "add",
        "name",
        "strToPrint",
        "toString",
        "format",
        "i",
        "i",
        "rowCount",
        "i",
        "c",
        "columns",
        "format",
        "format",
        "c",
        "getJustifyFlag",
        "c",
        "getWidth",
        "format",
        "format",
        "c",
        "getValue",
        "i",
        "rowSeparator",
        "e",
        "err",
        "err",
        "e",
        "getMessage",
        "Types",
        "BIGINT",
        "Types",
        "TINYINT",
        "Types",
        "SMALLINT",
        "Types",
        "INTEGER",
        "CATEGORY_INTEGER",
        "Types",
        "REAL",
        "Types",
        "DOUBLE",
        "Types",
        "DECIMAL",
        "CATEGORY_DOUBLE",
        "Types",
        "DATE",
        "Types",
        "TIME",
        "Types",
        "TIME_WITH_TIMEZONE",
        "Types",
        "TIMESTAMP",
        "Types",
        "TIMESTAMP_WITH_TIMEZONE",
        "CATEGORY_DATETIME",
        "Types",
        "BOOLEAN",
        "CATEGORY_BOOLEAN",
        "Types",
        "VARCHAR",
        "Types",
        "NVARCHAR",
        "Types",
        "LONGVARCHAR",
        "Types",
        "LONGNVARCHAR",
        "Types",
        "CHAR",
        "Types",
        "NCHAR",
        "CATEGORY_STRING",
        "CATEGORY_OTHER"
    ],
    "literals": [
        "\"\"",
        "\"-\"",
        "\"DBTablePrinter Error: No connection to database (Connection is null)!\"",
        "\"DBTablePrinter Error: No table name (tableName is null)!\"",
        "\"DBTablePrinter Error: Empty table name!\"",
        "\"DBTablePrinter Info: Invalid max. rows number. Using default!\"",
        "\"DBTablePrinter Error: Connection is closed!\"",
        "\"SELECT * FROM \"",
        "\" LIMIT \"",
        "\"SQL exception in DBTablePrinter. Message:\"",
        "\"DBTablePrinter Error: Result set is null!\"",
        "\"DBTablePrinter Error: Result Set is closed!\"",
        "\"DBTablePrinter Info: Invalid max. varchar column width. Using default!\"",
        "\"(\"",
        "\")\"",
        "\"NULL\"",
        "\"NULL\"",
        "\"%.3f\"",
        "\"...\"",
        "\"\\0\"",
        "\" \"",
        "\"| \"",
        "\" \"",
        "\"+\"",
        "\"\\0\"",
        "\"-\"",
        "\"line.separator\"",
        "\"\\n\"",
        "\"+\"",
        "\"|\"",
        "\", \"",
        "\"| %%%s%ds \"",
        "\"|\"",
        "\"SQL exception in DBTablePrinter. Message:\""
    ],
    "variables": [
        "label",
        "type",
        "typeName",
        "rsmd",
        "value",
        "toPrint",
        "format"
    ],
    "comments": [
        "ignore",
        "Get the meta data object of this ResultSet.",
        "Total number of columns in this ResultSet",
        "List of Column objects to store each columns of the ResultSet",
        "and the String representation of their values.",
        "List of table names. Can be more than one if it is a joined",
        "table query",
        "Get the columns and their meta data.",
        "NOTE: columnIndex for rsmd.getXXX methods STARTS AT 1 NOT 0",
        "Go through each row, get values of each column and adjust",
        "column widths.",
        "NOTE: columnIndex for rs.getXXX methods STARTS AT 1 NOT 0",
        "Use generic SQL type name instead of the actual value",
        "for column types BLOB, BINARY etc.",
        "For real numbers, format the string value to have 3 digits",
        "after the point. THIS IS TOTALLY ARBITRARY and can be",
        "improved to be CONFIGURABLE.",
        "Left justify the text columns",
        "and apply the width limit",
        "Adjust the column width",
        "END of for loop columnCount",
        "END of while (rs.next)",
        "For the fun of it, I will use StringBuilder",
        "Iterate over columns",
        "Center the column label",
        "diff is not divisible by 2, add 1 to width (and diff)",
        "so that we can have equal padding to the left and right",
        "of the column label.",
        "InteliJ says casting to int is redundant.",
        "Cool String repeater code thanks to user102008 at stackoverflow.com",
        "(http://tinyurl.com/7x9qtyg) \"Simple way to repeat a string in java\"",
        "END centering the column label",
        "Is this really necessary ??",
        "",
        "String info = \"Printing \" + rowCount;",
        "info += rowCount > 1 ? \" rows from \" : \" row from \";",
        "info += tableNames.size() > 1 ? \"tables \" : \"table \";",
        "info += sj.toString();",
        "",
        "System.out.println(info);",
        "Print out the formatted column labels",
        "Print out the rows",
        "This should form a format string like: \"%-60s\""
    ],
    "docstrings": [
        "Database Table Printer\nCopyright (C) 2014  Hami Galip Torun\nEmail: hamitorun@e-fabrika.net\nProject Home: https://github.com/htorun/dbtableprinter\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.",
        "This is my first Java program that does something more or less\nuseful. It is part of my effort to learn Java, how to use\nan IDE (IntelliJ IDEA 13.1.15 in this case), how to apply an\nopen source license and how to use Git and GitHub (https://github.com)\nfor version control and publishing an open source software.\nHami",
        "* Just a utility to print rows from a given DB table or a\n * <code>ResultSet</code> to standard out, formatted to look\n * like a table with rows and columns with borders.\n *\n * <p>Stack Overflow website\n * (<a target=\"_blank\" href=\"http://stackoverflow.com\">stackoverflow.com</a>)\n * was the primary source of inspiration and help to put this\n * code together. Especially the questions and answers of\n * the following people were very useful:</p>\n *\n * <p>Question:\n * <a target=\"_blank\" href=\"http://tinyurl.com/q7lbqeh\">How to display or\n * print the contents of a database table as is</a><br>\n *     People: sky scraper</p>\n *\n * <p>Question:\n * <a target=\"_blank\" href=\"http://tinyurl.com/pbwgess\">System.out.println()\n * from database into a table</a><br>\n *     People: Simon Cottrill, Tony Toews, Costis Aivali, Riggy, corsiKa</p>\n *\n * <p>Question:\n * <a target=\"_blank\" href=\"http://tinyurl.com/7x9qtyg\">Simple way to repeat\n * a string in java</a><br>\n *     People: Everybody who contributed but especially user102008</p>\n *",
        "* Default maximum number of rows to query and print.",
        "* Default maximum width for text columns\n     * (like a <code>VARCHAR</code>) column.",
        "* Column type category for <code>CHAR</code>, <code>VARCHAR</code>\n     * and similar text columns.",
        "* Column type category for <code>TINYINT</code>, <code>SMALLINT</code>,\n     * <code>INT</code> and <code>BIGINT</code> columns.",
        "* Column type category for <code>REAL</code>, <code>DOUBLE</code>,\n     * and <code>DECIMAL</code> columns.",
        "* Column type category for date and time related columns like\n     * <code>DATE</code>, <code>TIME</code>, <code>TIMESTAMP</code> etc.",
        "* Column type category for <code>BOOLEAN</code> columns.",
        "* Column type category for types for which the type name\n     * will be printed instead of the content, like <code>BLOB</code>,\n     * <code>BINARY</code>, <code>ARRAY</code> etc.",
        "* Represents a database table column.",
        "* Column label.",
        "* Generic SQL type of the column as defined in\n         * <a target=\"_blank\"\n         * href=\"http://docs.oracle.com/javase/8/docs/api/java/sql/Types.html\">\n         * java.sql.Types\n         * </a>.",
        "* Generic SQL type name of the column as defined in\n         * <a target=\"_blank\"\n         * href=\"http://docs.oracle.com/javase/8/docs/api/java/sql/Types.html\">\n         * java.sql.Types\n         * </a>.",
        "* Width of the column that will be adjusted according to column label\n         * and values to be printed.",
        "* Column values from each row of a <code>ResultSet</code>.",
        "* Flag for text justification using <code>String.format</code>.\n         * Empty string (<code>\"\"</code>) to justify right,\n         * dash (<code>-</code>) to justify left.\n         *\n         * @see #justifyLeft()",
        "* Column type category. The columns will be categorised according\n         * to their column types and specific needs to print them correctly.",
        "* Constructs a new <code>Column</code> with a column label,\n         * generic SQL type and type name (as defined in\n         * <a target=\"_blank\"\n         * href=\"http://docs.oracle.com/javase/8/docs/api/java/sql/Types.html\">\n         * java.sql.Types\n         * </a>)\n         *\n         * @param label Column label or name\n         * @param type Generic SQL type\n         * @param typeName Generic SQL type name",
        "* Returns the column label\n         *\n         * @return Column label",
        "* Returns the generic SQL type of the column\n         *\n         * @return Generic SQL type",
        "* Returns the generic SQL type name of the column\n         *\n         * @return Generic SQL type name",
        "* Returns the width of the column\n         *\n         * @return Column width",
        "* Sets the width of the column to <code>width</code>\n         *\n         * @param width Width of the column",
        "* Adds a <code>String</code> representation (<code>value</code>)\n         * of a value to this column object's {@link #values} list.\n         * These values will come from each row of a\n         * <a target=\"_blank\"\n         * href=\"http://docs.oracle.com/javase/8/docs/api/java/sql/ResultSet.html\">\n         * ResultSet\n         * </a> of a database query.\n         *\n         * @param value The column value to add to {@link #values}",
        "* Returns the column value at row index <code>i</code>.\n         * Note that the index starts at 0 so that <code>getValue(0)</code>\n         * will get the value for this column from the first row\n         * of a <a target=\"_blank\"\n         * href=\"http://docs.oracle.com/javase/8/docs/api/java/sql/ResultSet.html\">\n         * ResultSet</a>.\n         *\n         * @param i The index of the column value to get\n         * @return The String representation of the value",
        "* Returns the value of the {@link #justifyFlag}. The column\n         * values will be printed using <code>String.format</code> and\n         * this flag will be used to right or left justify the text.\n         *\n         * @return The {@link #justifyFlag} of this column\n         * @see #justifyLeft()",
        "* Sets {@link #justifyFlag} to <code>\"-\"</code> so that\n         * the column value will be left justified when printed with\n         * <code>String.format</code>. Typically numbers will be right\n         * justified and text will be left justified.",
        "* Returns the generic SQL type category of the column\n         *\n         * @return The {@link #typeCategory} of the column",
        "* Sets the {@link #typeCategory} of the column\n         *\n         * @param typeCategory The type category",
        "* Overloaded method that prints rows from table <code>tableName</code>\n     * to standard out using the given database connection\n     * <code>conn</code>. Total number of rows will be limited to\n     * {@link #DEFAULT_MAX_ROWS} and\n     * {@link #DEFAULT_MAX_TEXT_COL_WIDTH} will be used to limit\n     * the width of text columns (like a <code>VARCHAR</code> column).\n     *\n     * @param con\n     * @param s",
        "* Overloaded method that prints rows from table <code>tableName</code>\n     * to standard out using the given database connection\n     * <code>conn</code>. Total number of rows will be limited to\n     * <code>maxRows</code> and\n     * {@link #DEFAULT_MAX_TEXT_COL_WIDTH} will be used to limit\n     * the width of text columns (like a <code>VARCHAR</code> column).\n     *\n     * @param conn Database connection object (java.sql.Connection)\n     * @param tableName Name of the database table\n     * @param maxRows Number of max. rows to query and print",
        "* Overloaded method that prints rows from table <code>tableName</code>\n     * to standard out using the given database connection\n     * <code>conn</code>. Total number of rows will be limited to\n     * <code>maxRows</code> and\n     * <code>maxStringColWidth</code> will be used to limit\n     * the width of text columns (like a <code>VARCHAR</code> column).\n     *\n     * @param conn Database connection object (java.sql.Connection)\n     * @param tableName Name of the database table\n     * @param maxRows Number of max. rows to query and print\n     * @param maxStringColWidth Max. width of text columns",
        "* Overloaded method to print rows of a <a target=\"_blank\"\n     * href=\"http://docs.oracle.com/javase/8/docs/api/java/sql/ResultSet.html\">\n     * ResultSet</a> to standard out using {@link #DEFAULT_MAX_TEXT_COL_WIDTH}\n     * to limit the width of text columns.\n     *\n     * @param rs The <code>ResultSet</code> to print",
        "* Overloaded method to print rows of a <a target=\"_blank\"\n     * href=\"http://docs.oracle.com/javase/8/docs/api/java/sql/ResultSet.html\">\n     * ResultSet</a> to standard out using <code>maxStringColWidth</code>\n     * to limit the width of text columns.\n     *\n     * @param rs The <code>ResultSet</code> to print\n     * @param maxStringColWidth Max. width of text columns",
        "At this point we have gone through meta data, get the\n            columns and created all Column objects, iterated over the\n            ResultSet rows, populated the column values and adjusted\n            the column widths.\n            We cannot start printing just yet because we have to prepare\n            a row separator String.",
        "Prepare column labels to print as well as the row separator.\n            It should look something like this:\n            +--------+------------+------------+-----------+  (row separator)\n            | EMP_NO | BIRTH_DATE | FIRST_NAME | LAST_NAME |  (labels row)\n            +--------+------------+------------+-----------+  (row separator)",
        "Hopefully this should have printed something like this:\n                +--------+------------+------------+-----------+--------+-------------+\n                | EMP_NO | BIRTH_DATE | FIRST_NAME | LAST_NAME | GENDER |  HIRE_DATE  |\n                +--------+------------+------------+-----------+--------+-------------+\n                |  10001 | 1953-09-02 | Georgi     | Facello   | M      |  1986-06-26 |\n                +--------+------------+------------+-----------+--------+-------------+\n                |  10002 | 1964-06-02 | Bezalel    | Simmel    | F      |  1985-11-21 |\n                +--------+------------+------------+-----------+--------+-------------+",
        "* Takes a generic SQL type and returns the category this type\n     * belongs to. Types are categorized according to print formatting\n     * needs:\n     * <p>\n     * Integers should not be truncated so column widths should\n     * be adjusted without a column width limit. Text columns should be\n     * left justified and can be truncated to a max. column width etc...</p>\n     *\n     * See also: <a target=\"_blank\"\n     * href=\"http://docs.oracle.com/javase/8/docs/api/java/sql/Types.html\">\n     * java.sql.Types</a>\n     *\n     * @param type Generic SQL type\n     * @return The category this type belongs to"
    ],
    "functions": [
        "Column",
        "getLabel",
        "getType",
        "getTypeName",
        "getWidth",
        "setWidth",
        "addValue",
        "getValue",
        "getJustifyFlag",
        "justifyLeft",
        "getTypeCategory",
        "setTypeCategory",
        "printTable",
        "printTable",
        "printTable",
        "printResultSet",
        "printResultSet",
        "whichCategory"
    ],
    "classes": [
        "DBTablePrinter",
        "Column"
    ]
}