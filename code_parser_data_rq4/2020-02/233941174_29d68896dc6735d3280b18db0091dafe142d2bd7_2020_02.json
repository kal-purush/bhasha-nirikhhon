{
    "identifiers": [
        "css",
        "Theme",
        "SerializedStyles",
        "createShouldForwardProp",
        "space",
        "SpaceProps",
        "color",
        "ColorProps",
        "typography",
        "TypographyProps",
        "layout",
        "LayoutProps",
        "flexbox",
        "FlexboxProps",
        "grid",
        "GridProps",
        "background",
        "BackgroundProps",
        "border",
        "BorderProps",
        "position",
        "PositionProps",
        "shadow",
        "ShadowProps",
        "get",
        "createShouldForwardProp",
        "space",
        "color",
        "typography",
        "layout",
        "flexbox",
        "grid",
        "background",
        "border",
        "position",
        "shadow",
        "space",
        "color",
        "typography",
        "layout",
        "flexbox",
        "grid",
        "background",
        "border",
        "position",
        "shadow",
        "props",
        "css",
        "props",
        "props",
        "css",
        "get",
        "theme",
        "variantKey",
        "variantKey",
        "variant",
        "variant",
        "get",
        "theme",
        "variantKey",
        "theme"
    ],
    "literals": [
        "'theme-ui'",
        "'@emotion/serialize'",
        "'@styled-system/should-forward-prop'",
        "'styled-system'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "${variantKey}.${variant}",
        "string",
        "string"
    ],
    "variables": [
        "shouldForwardProp",
        "systemProps"
    ],
    "comments": [],
    "docstrings": [
        "* propNames are typed as string[] | undefined. Undefined is not\n * an iterator so we have to cast propNames to only a string[]",
        "* sx function to pass the sx prop and theme\n * into Theme UI's css function with parses the values in the\n * prop and serializing them with the theme values\n *\n * @param props any",
        "* variant\n *\n * Returns a function that accept's the components\n * props. The variant and theme props are passed into `css`\n * to generate the Emotion css that will be applied to the\n * component\n *\n * Variants are defined in the theme with a key and then variant.\n *\n * {\n *   buttons: {\n *     primary: {\n *       bg: 'primary',\n *       color: 'white',\n *     }\n *   }\n * }"
    ],
    "functions": [
        "sx",
        "variant"
    ],
    "classes": []
}