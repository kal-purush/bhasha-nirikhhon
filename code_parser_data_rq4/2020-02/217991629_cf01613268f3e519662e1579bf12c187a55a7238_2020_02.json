{
    "identifiers": [
        "IRefinementFilter",
        "IRefinementValue",
        "RefinementOperator",
        "UrlHelper",
        "IRefinerConfiguration",
        "RefinerTemplateOption",
        "selectedFilters",
        "encodeTokens",
        "selectedFilters",
        "value",
        "value",
        "encodeTokens",
        "encodeURIComponent",
        "value",
        "value",
        "refinementQueryConditions",
        "conditions",
        "encodeTokens",
        "encodeURIComponent",
        "refinementQueryConditions",
        "refinementToken",
        "refinementQueryConditions",
        "UrlHelper",
        "decodeURIComponent",
        "urlParamValue",
        "urlFilters",
        "refinementFilters",
        "urlFilters",
        "refinersConfiguration",
        "refiner",
        "refiner",
        "refinerConfiguration",
        "RefinerTemplateOption",
        "RefinerTemplateOption",
        "filterValues",
        "RefinerTemplateOption",
        "filterValues",
        "RefinerTemplateOption",
        "filterValues",
        "refinerConfiguration",
        "refinementFilters",
        "filterOperator",
        "filterValues",
        "refinementFilters",
        "filterName",
        "filterValue",
        "filterValue",
        "filterName",
        "filterValue",
        "filterValue",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "filterValues",
        "filterValues",
        "value",
        "filterValues",
        "filterName",
        "filterValue",
        "filterValue",
        "filterValue",
        "matches",
        "matches",
        "match",
        "match",
        "filterValues",
        "filterName",
        "filterValue",
        "filterValue",
        "filterValues",
        "filterValue",
        "filterValue",
        "filterValues",
        "filterValue",
        "filterValue",
        "filterValue",
        "filterValue",
        "value",
        "filterValues",
        "value",
        "value",
        "value",
        "filterValues",
        "value",
        "i",
        "value",
        "i",
        "value",
        "i",
        "tokenValue",
        "charCode",
        "tokenValue",
        "refinerConfiguration",
        "refinerConfiguration",
        "RefinerTemplateOption",
        "RefinerTemplateOption",
        "RefinementOperator",
        "RefinerTemplateOption",
        "RefinerTemplateOption",
        "RefinementOperator",
        "RefinementOperator",
        "daysToSubstract",
        "daysToSubstract"
    ],
    "literals": [
        "\"../models/ISearchResult\"",
        "\"./UrlHelper\"",
        "\"../models/IRefinerConfiguration\"",
        "\"../models/RefinerTemplateOption\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "${filter.FilterName}:${filter.Operator}(${conditions.join(',')})",
        "','",
        "${filter.FilterName}:${refinementToken}",
        "\"filters\"",
        "string",
        "string",
        "string",
        "\"string\"",
        "\"\"",
        "\"yesterday\"",
        "range(${this._getISOPastDate(1)},max)",
        "\"weekAgo\"",
        "range(${this._getISOPastDate(7)},max)",
        "\"monthAgo\"",
        "range(${this._getISOPastDate(30)},max)",
        "\"threeMonthsAgo\"",
        "range(${this._getISOPastDate(90)},max)",
        "\"yearAgo\"",
        "range(${this._getISOPastDate(365)},max)",
        "\"olderThanYear\"",
        "range(min,${this._getISOPastDate(365)})",
        "string",
        "string",
        "string",
        "\"string\"",
        "string",
        "string",
        "string",
        "\"string\"",
        "\"ǂǂ${this._getRefinerTokenValue(filterValue)}\"",
        "string",
        "\"ǂǂ${this._getRefinerTokenValue(value)}\"",
        "string",
        "string",
        "\"\"",
        "string"
    ],
    "variables": [
        "refinementQueryConditions",
        "conditions",
        "refinementToken",
        "refinementFilters",
        "urlParamValue",
        "urlFilters",
        "refinerConfiguration",
        "filterValues",
        "filterOperator",
        "filterValues",
        "value",
        "filterValues",
        "matches",
        "filterValues",
        "tokenValue",
        "i",
        "charCode"
    ],
    "comments": [
        "A refiner can have multiple values selected in a multi or mon multi selection scenario",
        "The correct operator is determined by the refiner display template according to its behavior",
        "See https://sharepoint.stackexchange.com/questions/258081/how-to-hex-encode-refiners/258161",
        "Get and parse filters param for url",
        "Return if url param is not found",
        "Map to refinementFilters if:",
        "-filterName is provided",
        "-filterValues are provided",
        "-filter configuration is found",
        "Get configuration",
        "Map filter values",
        "Get operator",
        "-if provided in Url, use that one",
        "-otherwise, get based on configured template",
        "The following values are accepted",
        "-yesterday",
        "-weekAgo",
        "-monthAgo",
        "-threeMonthsAgo",
        "-yearAgo",
        "-olderThanYear",
        "For dates we expect a 'range(date 1,date 2)' format",
        "-Date 1: Should be an ISO formatted UTC date OR min",
        "-Date 2: Should be an ISO formatted UTC date OR max"
    ],
    "docstrings": [
        "* Build the refinement condition in FQL format\n    * @param selectedFilters The selected filter array\n    * @param encodeTokens If true, encodes the taxonomy refinement tokens in UTF-8 to work with GET requests. Javascript encodes natively in UTF-16 by default.",
        "* Get the default pre-selected filters based on the url parameters",
        "* Converst the filter value from the url to a date range refinement value\n     * @param filterName the filter name provided in the url\n     * @param filterValue the filter value provided in the url (has a set of possible values)",
        "* Converst the filter value from the url to a date range refinement value\n     * @param filterName the filter name provided in the url\n     * @param filterValue the filter value provided in the url",
        "* Converts the string or array of strings to a valide refinement value\n     * @param filterValue as string of array of strings of the refiner value provided in the url"
    ],
    "functions": [
        "buildRefinementQueryString",
        "getRefinementFiltersFromUrl",
        "_getDateIntervalFilterValues",
        "_getDateRangeFilterValues",
        "_getStringFilterValues",
        "_getRefinerTokenValue",
        "_getFilterOperatorFromConfig",
        "_getISOPastDate"
    ],
    "classes": [
        "SearchHelper"
    ]
}