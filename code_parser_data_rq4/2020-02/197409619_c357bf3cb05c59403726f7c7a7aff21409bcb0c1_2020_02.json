{
    "identifiers": [
        "argparse",
        "logging",
        "pathlib",
        "Path",
        "farm",
        "data_handler",
        "data_silo",
        "DataSilo",
        "farm",
        "data_handler",
        "processor",
        "TextClassificationProcessor",
        "farm",
        "modeling",
        "adaptive_model",
        "AdaptiveModel",
        "farm",
        "modeling",
        "language_model",
        "LanguageModel",
        "farm",
        "modeling",
        "optimization",
        "initialize_optimizer",
        "farm",
        "modeling",
        "prediction_head",
        "TextClassificationHead",
        "farm",
        "modeling",
        "tokenization",
        "Tokenizer",
        "farm",
        "train",
        "Trainer",
        "farm",
        "utils",
        "set_all_seeds",
        "MLFlowLogger",
        "initialize_device_settings",
        "args",
        "logging",
        "basicConfig",
        "format",
        "datefmt",
        "level",
        "logging",
        "INFO",
        "MLFlowLogger",
        "tracking_uri",
        "ml_logger",
        "init_experiment",
        "experiment_name",
        "run_name",
        "set_all_seeds",
        "seed",
        "Path",
        "initialize_device_settings",
        "use_cuda",
        "use_amp",
        "use_amp",
        "Tokenizer",
        "load",
        "pretrained_model_name_or_path",
        "args",
        "base_lm_model",
        "do_lower_case",
        "TextClassificationProcessor",
        "tokenizer",
        "tokenizer",
        "max_seq_len",
        "args",
        "max_seq_len",
        "data_dir",
        "Path",
        "label_list",
        "label_list",
        "metric",
        "metric",
        "label_column_name",
        "DataSilo",
        "processor",
        "processor",
        "batch_size",
        "args",
        "batch_size",
        "LanguageModel",
        "load",
        "args",
        "base_lm_model",
        "TextClassificationHead",
        "class_weights",
        "data_silo",
        "calculate_class_weights",
        "task_name",
        "num_labels",
        "len",
        "label_list",
        "AdaptiveModel",
        "language_model",
        "language_model",
        "prediction_heads",
        "prediction_head",
        "embeds_dropout_prob",
        "lm_output_types",
        "device",
        "device",
        "initialize_optimizer",
        "model",
        "model",
        "learning_rate",
        "device",
        "device",
        "n_batches",
        "len",
        "data_silo",
        "loaders",
        "n_epochs",
        "args",
        "n_epochs",
        "use_amp",
        "use_amp",
        "Trainer",
        "model",
        "model",
        "optimizer",
        "optimizer",
        "data_silo",
        "data_silo",
        "epochs",
        "args",
        "n_epochs",
        "n_gpu",
        "n_gpu",
        "lr_schedule",
        "lr_schedule",
        "evaluate_every",
        "args",
        "evaluate_every",
        "device",
        "device",
        "trainer",
        "train",
        "model",
        "save",
        "save_dir",
        "processor",
        "save",
        "save_dir",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "doc_classification",
        "parser",
        "parse_args"
    ],
    "literals": [
        "\"%(asctime)s - %(levelname)s - %(name)s -   %(message)s\"",
        "\"%m/%d/%Y %H:%M:%S\"",
        "\"\"",
        "\"Public_FARM\"",
        "\"Run_doc_classification\"",
        "\"/opt/ml/model\"",
        "\"OTHER\"",
        "\"OFFENSE\"",
        "\"f1_macro\"",
        "\"../data/germeval18\"",
        "\"coarse_label\"",
        "\"text_classification\"",
        "\"per_sequence\"",
        "\"train\"",
        "\"__main__\"",
        "\"--n_epochs\"",
        "\"number of epochs (default: 2)\"",
        "\"--batch_size\"",
        "\"batch size (default: 4)\"",
        "\"--max_seq_len\"",
        "\"batch size (default: 64)\"",
        "\"--base_lm_model\"",
        "\"bert-base-uncased\"",
        "\"base language model to use (default: bert-base-uncased)\"",
        "\"--evaluate_every\"",
        "\"perform evaluation every n steps (default: 100)\""
    ],
    "variables": [
        "ml_logger",
        "save_dir",
        "use_amp",
        "device",
        "n_gpu",
        "tokenizer",
        "label_list",
        "metric",
        "processor",
        "data_silo",
        "language_model",
        "prediction_head",
        "model",
        "model",
        "optimizer",
        "lr_schedule",
        "trainer",
        "parser"
    ],
    "comments": [
        "1.Create a tokenizer",
        "2. Create a DataProcessor that handles all the conversion from raw text into a pytorch Dataset",
        "Here we load GermEval 2018 Data.",
        "3. Create a DataSilo that loads several datasets (train/dev/test), provides DataLoaders for them and calculates a",
        "few descriptive statistics of our datasets",
        "4. Create an AdaptiveModel",
        "a) which consists of a pretrained language model as a basis",
        "b) and a prediction head on top that is suited for our task => Text classification",
        "5. Create an optimizer",
        "6. Feed everything to the Trainer, which keeps care of growing our model into powerful plant and evaluates it from time to time",
        "7. Let it grow",
        "8. Hooray! You have a model. Store it:"
    ],
    "docstrings": [],
    "functions": [
        "doc_classification"
    ],
    "classes": []
}