{
    "identifiers": [
        "azure",
        "core",
        "exceptions",
        "HttpResponseError",
        "ResourceNotFoundError",
        "azure",
        "keyvault",
        "secrets",
        "_shared",
        "_polling",
        "DeleteRecoverPollingMethod",
        "pytest",
        "_shared",
        "helpers",
        "mock",
        "mock_response",
        "DeleteRecoverPollingMethod",
        "__module__",
        "message",
        "mock",
        "Mock",
        "side_effect",
        "message",
        "raise_exception",
        "DeleteRecoverPollingMethod",
        "command",
        "final_resource",
        "finished",
        "polling_method",
        "finished",
        "mock",
        "patch",
        "SLEEP",
        "raise_exception",
        "polling_method",
        "run",
        "_command",
        "operation_complete",
        "_command",
        "calls",
        "_command",
        "calls",
        "ResourceNotFoundError",
        "DeleteRecoverPollingMethod",
        "command",
        "final_resource",
        "finished",
        "mock",
        "patch",
        "SLEEP",
        "sleep",
        "polling_method",
        "run",
        "sleep",
        "call_count",
        "_command",
        "calls",
        "_command",
        "operation_complete",
        "_command",
        "calls",
        "max_calls",
        "_command",
        "calls",
        "ResourceNotFoundError",
        "DeleteRecoverPollingMethod",
        "command",
        "final_resource",
        "resource",
        "finished",
        "polling_method",
        "finished",
        "mock",
        "patch",
        "SLEEP",
        "sleep",
        "polling_method",
        "run",
        "_command",
        "calls",
        "max_calls",
        "sleep",
        "call_count",
        "_command",
        "calls",
        "mock",
        "patch",
        "SLEEP",
        "raise_exception",
        "_",
        "polling_method",
        "resource",
        "resource",
        "polling_method",
        "finished",
        "polling_method",
        "run",
        "DeleteRecoverPollingMethod",
        "command",
        "final_resource",
        "resource",
        "finished",
        "resource",
        "resource",
        "mock",
        "Mock",
        "DeleteRecoverPollingMethod",
        "command",
        "final_resource",
        "resource",
        "finished",
        "polling_method",
        "resource",
        "resource",
        "polling_method",
        "run",
        "polling_method",
        "resource",
        "resource",
        "mock",
        "Mock",
        "DeleteRecoverPollingMethod",
        "command",
        "final_resource",
        "finished",
        "mock",
        "patch",
        "SLEEP",
        "raise_exception",
        "polling_method",
        "run",
        "command",
        "call_count",
        "polling_method",
        "finished",
        "mock_response",
        "status_code",
        "json_payload",
        "HttpResponseError",
        "response",
        "response",
        "mock",
        "Mock",
        "side_effect",
        "error",
        "DeleteRecoverPollingMethod",
        "command",
        "final_resource",
        "finished",
        "mock",
        "patch",
        "SLEEP",
        "raise_exception",
        "pytest",
        "raises",
        "HttpResponseError",
        "polling_method",
        "run",
        "command",
        "call_count"
    ],
    "literals": [
        "\".time.sleep\"",
        "\"polling method shouldn't invoke the command\"",
        "\"the polling method shouldn't sleep\"",
        "\"polling method shouldn't invoke the command after completion\"",
        "\"polling method shouldn't invoke the command after completion\"",
        "\"polling method shouldn't sleep when 'run' is called after completion\"",
        "\"polling method shouldn't sleep after the operation completes\"",
        "\"error\"",
        "\"code\"",
        "\"message\"",
        "\"I'm a teapot.\"",
        "\"polling method shouldn't sleep after an unexpected error\""
    ],
    "variables": [
        "SLEEP",
        "raise_exception",
        "command",
        "polling_method",
        "calls",
        "operation_complete",
        "_command",
        "operation_complete",
        "polling_method",
        "max_calls",
        "calls",
        "operation_complete",
        "_command",
        "operation_complete",
        "resource",
        "polling_method",
        "resource",
        "command",
        "polling_method",
        "command",
        "polling_method",
        "response",
        "error",
        "command",
        "polling_method"
    ],
    "comments": [
        "------------------------------------",
        "Copyright (c) Microsoft Corporation.",
        "Licensed under the MIT License.",
        "------------------------------------",
        "when run is first called, the polling method should invoke the command until it indicates completion",
        "invoking run again should not change the resource or finished status, invoke the command, or sleep"
    ],
    "docstrings": [
        "\"\"\"When the polling method is initialized as finished, it shouldn't invoke the command or sleep\"\"\"",
        "\"\"\"Simulate service responding 404 a few times before 2xx\"\"\"",
        "\"\"\"After the polling method completes, calling 'run' again shouldn't change state or invoke the command\"\"\"",
        "\"\"\"Simulate service responding 404 a few times before 2xx\"\"\"",
        "\"\"\"The polling method should always expose the final resource\"\"\"",
        "\"\"\"The polling method shouldn't sleep when Key Vault's first response indicates the operation is complete\"\"\"",
        "\"\"\"The polling method should raise when Key Vault responds with an unexpected error\"\"\""
    ],
    "functions": [
        "test_initialized_finished",
        "test_continues_polling_when_resource_not_found",
        "command",
        "test_run_idempotence",
        "command",
        "test_final_resource",
        "test_terminal_first_response",
        "test_propagates_unexpected_error"
    ],
    "classes": [
        "_command",
        "_command"
    ]
}