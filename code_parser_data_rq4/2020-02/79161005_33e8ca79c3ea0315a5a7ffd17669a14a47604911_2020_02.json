{
    "identifiers": [
        "numpy",
        "afqmctools",
        "hamiltonian",
        "converter",
        "read_qmcpack_hamiltonian",
        "afqmctools",
        "wavefunction",
        "converter",
        "read_qmcpack_wavefunction",
        "hamil_file",
        "wfn_file",
        "read_qmcpack_hamiltonian",
        "hamil_file",
        "read_qmcpack_wavefunction",
        "wfn_file",
        "isinstance",
        "hamil",
        "numpy",
        "ndarray",
        "hamil",
        "hamil",
        "toarray",
        "local_energy_mol",
        "hamil",
        "chol",
        "hamil",
        "wfn",
        "nelec",
        "hcore",
        "chol",
        "enuc",
        "psi",
        "nelec",
        "nelec",
        "hcore",
        "shape",
        "psi",
        "shape",
        "na",
        "nb",
        "psi",
        "shape",
        "nbasis",
        "chol",
        "shape",
        "nbasis",
        "nbasis",
        "chol",
        "shape",
        "numpy",
        "dot",
        "psi",
        "na",
        "T",
        "psi",
        "na",
        "conj",
        "numpy",
        "dot",
        "numpy",
        "linalg",
        "inv",
        "O",
        "psi",
        "na",
        "T",
        "numpy",
        "dot",
        "psi",
        "na",
        "T",
        "psi",
        "na",
        "conj",
        "numpy",
        "dot",
        "numpy",
        "linalg",
        "inv",
        "O",
        "psi",
        "na",
        "T",
        "numpy",
        "tensordot",
        "psi",
        "na",
        "conj",
        "chol",
        "reshape",
        "nbasis",
        "nbasis",
        "axes",
        "reshape",
        "nbasis",
        "na",
        "numpy",
        "tensordot",
        "psi",
        "na",
        "conj",
        "chol",
        "reshape",
        "nbasis",
        "nbasis",
        "axes",
        "reshape",
        "nbasis",
        "nb",
        "rchol_a",
        "T",
        "dot",
        "Ga",
        "ravel",
        "rchol_b",
        "T",
        "dot",
        "Gb",
        "ravel",
        "numpy",
        "dot",
        "Xa",
        "Xa",
        "ecoul",
        "numpy",
        "dot",
        "Xb",
        "Xb",
        "ecoul",
        "numpy",
        "dot",
        "Xa",
        "Xb",
        "numpy",
        "tensordot",
        "Ga",
        "rchol_a",
        "reshape",
        "na",
        "nbasis",
        "axes",
        "numpy",
        "tensordot",
        "Ta",
        "Ta",
        "axes",
        "numpy",
        "tensordot",
        "Gb",
        "rchol_b",
        "reshape",
        "nb",
        "nbasis",
        "axes",
        "numpy",
        "tensordot",
        "Tb",
        "Tb",
        "axes",
        "exxa",
        "exxb",
        "ecoul",
        "exx",
        "numpy",
        "dot",
        "psi",
        "na",
        "conj",
        "Ga",
        "numpy",
        "dot",
        "psi",
        "na",
        "conj",
        "Gb",
        "numpy",
        "sum",
        "hcore",
        "Ga",
        "Gb",
        "e1b",
        "e2b",
        "enuc",
        "e1b",
        "enuc",
        "e2b"
    ],
    "literals": [
        "'chol'",
        "'chol'",
        "'chol'",
        "'hcore'",
        "'enuc'",
        "r\"\"\"Calculate local for generic two-body hamiltonian.\n\n    This uses the cholesky decomposed two-electron integrals.\n\n    Parameters\n    ----------\n\n    Returns\n    -------\n    \"\"\""
    ],
    "variables": [
        "hamil",
        "wfn",
        "psi0",
        "nelec",
        "chol",
        "chol",
        "na",
        "nb",
        "nbasis",
        "nchol",
        "O",
        "Ga",
        "O",
        "Gb",
        "rchol_a",
        "rchol_b",
        "Xa",
        "Xb",
        "ecoul",
        "Ta",
        "exxa",
        "Tb",
        "exxb",
        "exx",
        "e2b",
        "Ga",
        "Gb",
        "e1b"
    ],
    "comments": [
        "(M^2, nchol)",
        "Half-rotated green's functions",
        "Construct half rotated cholesky",
        "L[ak,n] = \\sum_i A*[i,a] L[i,k,n]",
        "T_{abn} = \\sum_k Theta_{ak} LL_{ak,n}",
        "LL_{ak,n} = \\sum_i L_{ik,n} A^*_{ia}"
    ],
    "docstrings": [],
    "functions": [
        "calculate_hf_energy",
        "local_energy_mol"
    ],
    "classes": []
}