{
    "identifiers": [
        "pandas",
        "pd",
        "numpy",
        "np",
        "json",
        "lxml",
        "etree",
        "urllib",
        "sqlite3",
        "time",
        "swifter",
        "pymongo",
        "MongoClient",
        "pymongo",
        "errors",
        "DuplicateKeyError",
        "OperationFailure",
        "os",
        "rel",
        "pd",
        "DataFrame",
        "rel",
        "fillna",
        "k",
        "ret",
        "keys",
        "ret",
        "k",
        "astype",
        "ret",
        "rel",
        "name",
        "name",
        "rel",
        "rel",
        "pop",
        "name",
        "json",
        "loads",
        "ret2",
        "replace",
        "isinstance",
        "ret2",
        "ret2",
        "rel",
        "ret",
        "append",
        "item",
        "r",
        "ret2",
        "r",
        "isinstance",
        "item",
        "rel",
        "item",
        "rel",
        "item",
        "item",
        "pop",
        "index",
        "index",
        "ret",
        "append",
        "item",
        "ret",
        "file",
        "dbname",
        "filetype",
        "LIMIT",
        "filetype",
        "open",
        "file",
        "filetype",
        "file",
        "urllib",
        "request",
        "urlopen",
        "file",
        "sqlite3",
        "connect",
        "dbname",
        "line",
        "linked_in",
        "i",
        "START",
        "LIMIT",
        "i",
        "START",
        "json",
        "loads",
        "line",
        "extract_relation",
        "person",
        "extract_relation",
        "person",
        "extract_relation",
        "person",
        "extract_relation",
        "person",
        "extract_relation",
        "person",
        "extract_relation",
        "person",
        "extract_relation",
        "person",
        "extract_relation",
        "person",
        "person",
        "person",
        "pop",
        "lines",
        "append",
        "person",
        "names",
        "nam",
        "education",
        "edu",
        "groups",
        "grp",
        "skills",
        "skl",
        "experience",
        "exp",
        "honors",
        "hon",
        "also_view",
        "als",
        "events",
        "eve",
        "i",
        "i",
        "i",
        "get_df",
        "pd",
        "DataFrame",
        "lines",
        "get_df",
        "pd",
        "DataFrame",
        "names",
        "get_df",
        "pd",
        "DataFrame",
        "education",
        "get_df",
        "pd",
        "DataFrame",
        "groups",
        "get_df",
        "pd",
        "DataFrame",
        "skills",
        "get_df",
        "pd",
        "DataFrame",
        "experience",
        "get_df",
        "pd",
        "DataFrame",
        "honors",
        "get_df",
        "pd",
        "DataFrame",
        "also_view",
        "get_df",
        "pd",
        "DataFrame",
        "events",
        "people_df",
        "to_sql",
        "conn",
        "if_exists",
        "index",
        "names_df",
        "to_sql",
        "conn",
        "if_exists",
        "index",
        "education_df",
        "to_sql",
        "conn",
        "if_exists",
        "index",
        "groups_df",
        "to_sql",
        "conn",
        "if_exists",
        "index",
        "skills_df",
        "to_sql",
        "conn",
        "if_exists",
        "index",
        "experience_df",
        "to_sql",
        "conn",
        "if_exists",
        "index",
        "honors_df",
        "to_sql",
        "conn",
        "if_exists",
        "index",
        "also_view_df",
        "to_sql",
        "conn",
        "if_exists",
        "index",
        "events_df",
        "to_sql",
        "conn",
        "if_exists",
        "index"
    ],
    "literals": [
        "''",
        "'\\''",
        "'\\\"'",
        "'person'",
        "'_id'",
        "'person'",
        "'_id'",
        "'value'",
        "'person'",
        "'_id'",
        "'affilition'",
        "'affiliation'",
        "'affilition'",
        "'pos'",
        "'linkedin.db'",
        "'localobj'",
        "'localpath'",
        "'localobj'",
        "'name'",
        "'education'",
        "'group'",
        "'skills'",
        "'experience'",
        "'honors'",
        "'also_view'",
        "'events'",
        "'interval'",
        "'interval'",
        "'people'",
        "'replace'",
        "'names'",
        "'replace'",
        "'education'",
        "'replace'",
        "'groups'",
        "'replace'",
        "'skills'",
        "'replace'",
        "'experience'",
        "'replace'",
        "'honors'",
        "'replace'",
        "'also_view'",
        "'replace'",
        "'events'",
        "'replace'"
    ],
    "variables": [
        "ret",
        "ret",
        "k",
        "ret",
        "ret2",
        "ret2",
        "item",
        "item",
        "index",
        "item",
        "item",
        "item",
        "item",
        "item",
        "index",
        "linked_in",
        "linked_in",
        "linked_in",
        "START",
        "names",
        "people",
        "groups",
        "education",
        "skills",
        "experience",
        "honors",
        "also_view",
        "events",
        "conn",
        "lines",
        "i",
        "person",
        "nam",
        "edu",
        "grp",
        "skl",
        "exp",
        "hon",
        "als",
        "eve",
        "names",
        "education",
        "groups",
        "skills",
        "experience",
        "honors",
        "also_view",
        "events",
        "i",
        "people_df",
        "names_df",
        "education_df",
        "groups_df",
        "skills_df",
        "experience_df",
        "honors_df",
        "also_view_df",
        "events_df"
    ],
    "comments": [
        "JSON parsing",
        "HTML parsing",
        "SQLite RDBMS",
        "Time conversions",
        "Parallel processing",
        "NoSQL DB",
        "We'll return a list",
        "Try to parse the string as a dictionary",
        "If we get an error in parsing, we'll leave as a string",
        "If it's a dictionary, add it to our return results after",
        "adding a key to the parent",
        "If it's a list, iterate over each item",
        "A fix to a typo in the data",
        "cwd = os.getcwd()",
        "print(cwd)",
        "linked_in = urllib.request.urlopen('file://' + cwd + '/' + file)",
        "URL",
        "LIMIT = 100000",
        "print(i, 'break')",
        "By inspection, all of these are nested dictionary or list content",
        "This doesn't seem relevant and it's the only",
        "non-string field that's sometimes null",
        "Save these to an SQLite database",
        "return (people_df, names_df, education_df, groups_df, skills_df, experience_df, honors_df, also_view_df, events_df)"
    ],
    "docstrings": [
        "'''\nSimple code to pull out data from JSON and load into sqllite\n'''",
        "'''\n    Pull out a nested list that has a key, and return it as a list\n    of dictionaries suitable for treating as a relation / dataframe\n    '''"
    ],
    "functions": [
        "get_df",
        "extract_relation",
        "data_loading"
    ],
    "classes": []
}