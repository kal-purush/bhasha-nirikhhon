{
    "identifiers": [
        "tkinter",
        "tk",
        "tkinter",
        "filedialog",
        "Label",
        "Button",
        "messagebox",
        "PIL",
        "Image",
        "ImageTk",
        "UnidentifiedImageError",
        "torch",
        "torchvision",
        "models",
        "torchvision",
        "models",
        "ResNet18_Weights",
        "MobileNet_V2_Weights",
        "torchvision",
        "transforms",
        "json",
        "urllib",
        "urllib",
        "request",
        "urlopen",
        "url",
        "json",
        "loads",
        "response",
        "read",
        "labels",
        "tk",
        "Tk",
        "title",
        "title",
        "title",
        "geometry",
        "BaseWindow",
        "title",
        "title",
        "load_imagenet_labels",
        "models",
        "resnet18",
        "weights",
        "ResNet18_Weights",
        "IMAGENET1K_V1",
        "model",
        "eval",
        "create_widgets",
        "Button",
        "text",
        "command",
        "upload_image",
        "upload_button",
        "pack",
        "pady",
        "Label",
        "text",
        "model_label",
        "pack",
        "pady",
        "tk",
        "StringVar",
        "value",
        "tk",
        "Radiobutton",
        "text",
        "variable",
        "model_selection",
        "value",
        "command",
        "switch_model",
        "resnet_button",
        "pack",
        "tk",
        "Radiobutton",
        "text",
        "variable",
        "model_selection",
        "value",
        "command",
        "switch_model",
        "mobilenet_button",
        "pack",
        "Label",
        "text",
        "font",
        "result_label",
        "pack",
        "pady",
        "Label",
        "image_label",
        "pack",
        "model_selection",
        "get",
        "selected_model",
        "models",
        "resnet18",
        "weights",
        "ResNet18_Weights",
        "IMAGENET1K_V1",
        "selected_model",
        "models",
        "mobilenet_v2",
        "weights",
        "MobileNet_V2_Weights",
        "IMAGENET1K_V1",
        "model",
        "eval",
        "filedialog",
        "askopenfilename",
        "filetypes",
        "file_path",
        "messagebox",
        "showwarning",
        "display_image",
        "file_path",
        "classify_image",
        "file_path",
        "UnidentifiedImageError",
        "messagebox",
        "showerror",
        "e",
        "messagebox",
        "showerror",
        "e",
        "file_path",
        "Image",
        "open",
        "file_path",
        "image",
        "resize",
        "Image",
        "Resampling",
        "LANCZOS",
        "ImageTk",
        "PhotoImage",
        "image",
        "image_label",
        "config",
        "image",
        "image",
        "image_label",
        "image",
        "file_path",
        "Image",
        "open",
        "file_path",
        "transform_image",
        "image",
        "torch",
        "no_grad",
        "model",
        "transformed_image",
        "output",
        "max",
        "get_class_name",
        "predicted_class",
        "item",
        "result_label",
        "config",
        "text",
        "class_name",
        "image",
        "image",
        "mode",
        "image",
        "convert",
        "transforms",
        "Compose",
        "transforms",
        "Resize",
        "transforms",
        "CenterCrop",
        "transforms",
        "ToTensor",
        "transforms",
        "Normalize",
        "mean",
        "std",
        "preprocess",
        "image",
        "image_tensor",
        "unsqueeze",
        "class_idx",
        "class_idx",
        "len",
        "imagenet_labels",
        "imagenet_labels",
        "class_idx",
        "ImageClassifierApp",
        "app",
        "mainloop"
    ],
    "literals": [
        "\"https://raw.githubusercontent.com/anishathalye/imagenet-simple-labels/master/imagenet-simple-labels.json\"",
        "\"Image Classifier\"",
        "\"800x600\"",
        "\"Image Classifier\"",
        "\"Upload Image\"",
        "\"Select Classification Model:\"",
        "\"ResNet18\"",
        "\"ResNet18\"",
        "\"ResNet18\"",
        "\"MobileNet\"",
        "\"MobileNet\"",
        "\"Classification Result: \"",
        "\"Helvetica\"",
        "\"ResNet18\"",
        "\"MobileNet\"",
        "\"JPEG files\"",
        "\"*.jpg\"",
        "\"PNG files\"",
        "\"*.png\"",
        "\"Warning\"",
        "\"No file selected!\"",
        "\"Error\"",
        "\"Unsupported image format. Please select a valid image.\"",
        "\"Error\"",
        "f\"Failed to process the image: {str(e)}\"",
        "f\"Classification Result: {class_name}\"",
        "\"RGB\"",
        "\"RGB\"",
        "\"Unknown\"",
        "\"__main__\"",
        "\"AI-Powered Image Classifier\""
    ],
    "variables": [
        "url",
        "response",
        "labels",
        "imagenet_labels",
        "model",
        "upload_button",
        "model_label",
        "model_selection",
        "resnet_button",
        "mobilenet_button",
        "result_label",
        "image_label",
        "selected_model",
        "model",
        "model",
        "file_path",
        "image",
        "image",
        "image",
        "image",
        "image",
        "transformed_image",
        "output",
        "_",
        "predicted_class",
        "class_name",
        "image",
        "preprocess",
        "image_tensor",
        "app"
    ],
    "comments": [
        "Function to download and load ImageNet class labels from a URL",
        "Base class for the Tkinter window",
        "Main class for Image Classification Application",
        "Load the ImageNet class labels",
        "Initialize ResNet18 as the default model",
        "Set model to evaluation mode (disable training)",
        "Call function to create and display widgets",
        "Button to upload image",
        "Label and radio buttons for model selection",
        "Default model selection",
        "Radio button for ResNet18 model",
        "Radio button for MobileNet model",
        "Label to display the classification result",
        "Label to preview the uploaded image",
        "Ensure the model is in evaluation mode",
        "If no file is selected, show a warning message",
        "Display the uploaded image and classify it",
        "Handle generic errors",
        "Resize image to fit the display area (using LANCZOS for better quality)",
        "Update the image_label widget to show the image",
        "Keep a reference to avoid garbage collection",
        "Disable gradient computation for inference",
        "Get the predicted class",
        "Update the result label with the classification result",
        "Convert to RGB if the image has an alpha channel (e.g., PNG with transparency)",
        "Define the transformation steps: resize, crop, convert to tensor, and normalize",
        "Apply the transformations and add a batch dimension (1, C, H, W)",
        "Entry point to start the application"
    ],
    "docstrings": [
        "\"\"\"\n    Downloads and loads ImageNet labels for classification from a URL.\n    Returns:\n        labels (list): A list of class labels used for classification.\n    \"\"\"",
        "\"\"\"\n    A base class for initializing a Tkinter window.\n    Inheritance and Encapsulation principles are used.\n\n    Args:\n        title (str): The title of the window.\n    \"\"\"",
        "\"\"\"\n    Image Classification application using ResNet and MobileNet models.\n    Demonstrates Multiple Inheritance and Polymorphism.\n\n    Args:\n        title (str): The title of the window (default is \"Image Classifier\").\n    \"\"\"",
        "\"\"\"\n        Creates and displays the widgets in the window, including buttons,\n        labels, and image preview.\n        \"\"\"",
        "\"\"\"\n        Switch between ResNet18 and MobileNet models based on user selection.\n        Demonstrates Polymorphism by dynamically changing the model.\n        \"\"\"",
        "\"\"\"\n        Opens a file dialog to allow the user to upload an image.\n        The image is displayed and classified using the selected model.\n        \"\"\"",
        "\"\"\"\n        Displays the uploaded image in the GUI window.\n\n        Args:\n            file_path (str): Path of the image to be displayed.\n        \"\"\"",
        "\"\"\"\n        Classifies the uploaded image using the selected AI model.\n\n        Args:\n            file_path (str): Path of the image to be classified.\n        \"\"\"",
        "\"\"\"\n        Transforms the image into the required format (tensor) for classification.\n\n        Args:\n            image (PIL.Image): The image to be transformed.\n\n        Returns:\n            image_tensor (torch.Tensor): Transformed image tensor with batch dimension.\n        \"\"\"",
        "\"\"\"\n        Maps the class index to the corresponding human-readable class name.\n\n        Args:\n            class_idx (int): Index of the predicted class.\n\n        Returns:\n            class_name (str): Human-readable label for the predicted class.\n        \"\"\""
    ],
    "functions": [
        "load_imagenet_labels",
        "create_widgets",
        "switch_model",
        "upload_image",
        "display_image",
        "classify_image",
        "transform_image",
        "get_class_name"
    ],
    "classes": [
        "BaseWindow",
        "ImageClassifierApp"
    ]
}