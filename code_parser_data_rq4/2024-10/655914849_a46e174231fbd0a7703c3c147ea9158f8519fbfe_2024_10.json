{
    "identifiers": [
        "InstancePresenceRecordType",
        "TLAnyShapeUtilConstructor",
        "TLInstancePresence",
        "TLRecord",
        "TLStoreWithStatus",
        "computed",
        "createPresenceStateDerivation",
        "createTLStore",
        "defaultShapeUtils",
        "defaultUserPreferences",
        "getUserPreferences",
        "setUserPreferences",
        "react",
        "SerializedSchema",
        "useEffect",
        "useMemo",
        "useState",
        "YKeyValue",
        "HocuspocusProvider",
        "Y",
        "useState",
        "createTLStore",
        "defaultShapeUtils",
        "shapeUtils",
        "store",
        "useState",
        "useMemo",
        "Y",
        "yDoc",
        "roomId",
        "YKeyValue",
        "yArr",
        "yDoc",
        "HocuspocusProvider",
        "hostUrl",
        "roomId",
        "yDoc",
        "hostUrl",
        "roomId",
        "useEffect",
        "setStoreWithStatus",
        "unsubs",
        "store",
        "yDoc",
        "changes",
        "record",
        "yStore",
        "record",
        "record",
        "changes",
        "yStore",
        "record",
        "record",
        "changes",
        "record",
        "yStore",
        "record",
        "handleChange",
        "changes",
        "transaction",
        "Y",
        "transaction",
        "changes",
        "change",
        "id",
        "change",
        "yStore",
        "id",
        "toPut",
        "record",
        "toRemove",
        "id",
        "store",
        "toRemove",
        "store",
        "toRemove",
        "toPut",
        "store",
        "toPut",
        "yStore",
        "handleChange",
        "unsubs",
        "yStore",
        "handleChange",
        "room",
        "room",
        "setUserPreferences",
        "yClientId",
        "computed",
        "getUserPreferences",
        "user",
        "user",
        "defaultUserPreferences",
        "user",
        "defaultUserPreferences",
        "InstancePresenceRecordType",
        "yClientId",
        "createPresenceStateDerivation",
        "userPreferences",
        "presenceId",
        "store",
        "room",
        "room",
        "room",
        "presenceDerivation",
        "unsubs",
        "react",
        "presenceDerivation",
        "requestAnimationFrame",
        "room",
        "room",
        "room",
        "presence",
        "handleUpdate",
        "update",
        "room",
        "room",
        "clientId",
        "update",
        "states",
        "clientId",
        "state",
        "state",
        "presenceId",
        "toPut",
        "state",
        "clientId",
        "update",
        "states",
        "clientId",
        "state",
        "state",
        "presenceId",
        "toPut",
        "state",
        "clientId",
        "update",
        "toRemove",
        "InstancePresenceRecordType",
        "clientId",
        "store",
        "toRemove",
        "store",
        "toRemove",
        "toPut",
        "store",
        "toPut",
        "handleMetaUpdate",
        "meta",
        "theirSchema",
        "store",
        "theirSchema",
        "newMigrations",
        "newMigrations",
        "yDoc",
        "meta",
        "handleMetaUpdate",
        "unsubs",
        "meta",
        "handleMetaUpdate",
        "room",
        "room",
        "handleUpdate",
        "unsubs",
        "room",
        "room",
        "room",
        "handleUpdate",
        "yStore",
        "store",
        "meta",
        "theirSchema",
        "yStore",
        "val",
        "store",
        "theirSchema",
        "records",
        "record",
        "record",
        "record",
        "migrationResult",
        "migrationResult",
        "yDoc",
        "r",
        "records",
        "migrationResult",
        "r",
        "yStore",
        "r",
        "r",
        "migrationResult",
        "yStore",
        "r",
        "r",
        "meta",
        "ourSchema",
        "store",
        "migrationResult",
        "ourSchema",
        "yDoc",
        "record",
        "store",
        "yStore",
        "record",
        "record",
        "meta",
        "store",
        "setStoreWithStatus",
        "status",
        "setStoreWithStatus",
        "room",
        "handleSync",
        "status",
        "hasConnectedBefore",
        "hasConnectedBefore",
        "room",
        "handleSync",
        "unsubs",
        "room",
        "handleSync",
        "room",
        "handleStatusChange",
        "unsubs",
        "room",
        "handleStatusChange",
        "unsubs",
        "fn",
        "fn",
        "unsubs",
        "room",
        "yDoc",
        "store",
        "yStore",
        "meta",
        "storeWithStatus"
    ],
    "literals": [
        "'tldraw'",
        "'react'",
        "'y-utility/y-keyvalue'",
        "'@hocuspocus/provider'",
        "'yjs'",
        "'test/slate-yjs-demo'",
        "'wss://hocus.xieffect.ru'",
        "string",
        "string",
        "'loading'",
        "string",
        "tl_${roomId}",
        "'meta'",
        "'token'",
        "'loading'",
        "'user'",
        "'document'",
        "string",
        "'delete'",
        "'update'",
        "'add'",
        "'id'",
        "'add'",
        "'update'",
        "'delete'",
        "'id'",
        "'change'",
        "'change'",
        "string",
        "string",
        "string",
        "'userPreferences'",
        "'presence'",
        "'when presence changes'",
        "'presence'",
        "'id'",
        "'schema'",
        "'No schema found in the yjs doc'",
        "'The schema has been updated. Please refresh the page.'",
        "'update'",
        "'update'",
        "'schema'",
        "'No schema found in the yjs doc'",
        "'error'",
        "'The schema has been updated. Please refresh the page.'",
        "'schema'",
        "'schema'",
        "'synced-remote'",
        "'online'",
        "'disconnected'",
        "'connected'",
        "'disconnected'",
        "'synced-remote'",
        "'offline'",
        "'synced'",
        "'connected'",
        "'synced'",
        "'synced'",
        "'status'",
        "'status'"
    ],
    "variables": [
        "store",
        "store",
        "storeWithStatus",
        "setStoreWithStatus",
        "yDoc",
        "yArr",
        "yStore",
        "meta",
        "unsubs",
        "_",
        "record",
        "handleChange",
        "toRemove",
        "toPut",
        "record",
        "yClientId",
        "userPreferences",
        "user",
        "presenceId",
        "presenceDerivation",
        "presence",
        "handleUpdate",
        "states",
        "toRemove",
        "toPut",
        "state",
        "state",
        "handleMetaUpdate",
        "theirSchema",
        "newMigrations",
        "ourSchema",
        "theirSchema",
        "records",
        "migrationResult",
        "hasConnectedBefore"
    ],
    "comments": [
        "eslint-disable no-unused-vars",
        "eslint-disable @typescript-eslint/no-unused-vars",
        "room: new WebsocketProvider(hostUrl, roomId, yDoc, { connect: true }),",
        "1.",
        "Connect store to yjs store and vis versa, for both the document and awareness",
        "-------------------- Document --------------------",
        "Sync store changes to the yjs doc",
        "only sync user's document changes",
        "Sync the yjs doc changes to the store",
        "put / remove the records in the store",
        "-------------------- Awareness -------------------",
        "Create the instance presence derivation",
        "Set our initial presence from the derivation's current value",
        "When the derivation change, sync presence to to yjs awareness",
        "Sync yjs awareness changes to the store",
        "Connect records to put / remove",
        "put / remove the records in the store",
        "If the shared schema is newer than our schema, the user must refresh",
        "2.",
        "Initialize the store with the yjs doc recordsâ€”or, if the yjs doc",
        "is empty, initialize the yjs doc with the default store records.",
        "Replace the store records with the yjs doc records",
        "if the schema is newer than ours, the user must refresh",
        "delete any deleted records from the yjs doc",
        "Create the initial store records",
        "Sync the store records to the yjs doc",
        "If we're disconnected, set the store status to 'synced-remote'",
        "and the connection status to 'offline'"
    ],
    "docstrings": [],
    "functions": [
        "useYjsStore",
        "handleSync",
        "handleStatusChange"
    ],
    "classes": []
}