{
    "identifiers": [
        "IGeminiSchema",
        "IGeminiSchema",
        "IGeminiSchema",
        "IGeminiSchema",
        "IGeminiSchema",
        "IGeminiSchema",
        "IGeminiSchema",
        "IGeminiSchema",
        "IGeminiSchema"
    ],
    "literals": [
        "\"boolean\"",
        "\"integer\"",
        "\"number\"",
        "\"string\"",
        "string",
        "string",
        "\"binary\"",
        "\"byte\"",
        "\"password\"",
        "\"regex\"",
        "\"uuid\"",
        "\"email\"",
        "\"hostname\"",
        "\"idn-email\"",
        "\"idn-hostname\"",
        "\"iri\"",
        "\"iri-reference\"",
        "\"ipv4\"",
        "\"ipv6\"",
        "\"uri\"",
        "\"uri-reference\"",
        "\"uri-template\"",
        "\"url\"",
        "\"date-time\"",
        "\"date\"",
        "\"time\"",
        "\"duration\"",
        "\"json-pointer\"",
        "\"relative-json-pointer\"",
        "string",
        "string",
        "string",
        "\"array\"",
        "\"object\"",
        "string",
        "string",
        "\"null\"",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Type schema info of the Gemini.\n *\n * `IGeminiSchema` iis a type metadata of LLM (Large Language Model)\n * function calling in the Geminimi.\n *\n * `IGeminiSchema` basically follows the JSON schema definition of the\n * OpenAPI v3.0 specification; {@link OpenApiV3.IJsonSchema}. However,\n * `IGeminiSchema` cannot understand union and reference types, referenced\n * by the `oneOf` and `$ref` properties. Also, as OpenAPI v3.0 specification\n * does not support the tuple type, `IGeminiSchema` does not support the\n * tuple type either.\n *\n * - Does not support\n *   - {@link OpenApi.IJsonSchema.IReference}\n *   - {@link OpenApi.IJsonSchema.IOneOf}\n *   - {@link OpenApi.IJsonSchema.ITuple}\n *\n * Also, by the documents of Gemini, these additional properties are not\n * supported, either. However, I can't sure that these additional properties\n * are really not supported in the Geimni, because the Gemini seems like\n * understanding them. Therefore, I've decided to keep them alive.\n *\n * - ex) additional properties\n *   - {@link IGeminiSchema.IString.default}\n *   - {@link IGeminiSchema.__IAttribute.example}\n *   - {@link IGeminiSchema.__IAttribute.examples}\n *   - {@link IGeminiSchema.INumber.maximum}\n *   - {@link IGeminiSchema.IObject.additionalProperties}\n *\n * @reference https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/function-calling\n * @reference https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/function-calling\n * @author Jeongho Nam - https://github.com/samchon",
        "* Boolean type schema info.",
        "* Enumeration values.",
        "* Default value.\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Integer type schema info.",
        "* Enumeration values.\n     *\n     * @type int64",
        "* Default value.\n     *\n     * @type int64\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Minimum value restriction.\n     *\n     * @type int64\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Maximum value restriction.\n     *\n     * @type int64\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Exclusive minimum value restriction.\n     *\n     * For reference, even though your Swagger document has defined the\n     * `exclusiveMinimum` value as `number`, it has been forcibly converted\n     * to `boolean` type, and assigns the numeric value to the\n     * {@link minimum} property in the {@link OpenApi} conversion.\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Exclusive maximum value restriction.\n     *\n     * For reference, even though your Swagger document has defined the\n     * `exclusiveMaximum` value as `number`, it has been forcibly converted\n     * to `boolean` type, and assigns the numeric value to the\n     * {@link maximum} property in the {@link OpenApi} conversion.\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Multiple of value restriction.\n     *\n     * @type uint64\n     * @exclusiveMinimum 0\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Number type schema info.",
        "* Enumeration values.",
        "* Default value.\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Minimum value restriction.\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Maximum value restriction.\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Exclusive minimum value restriction.\n     *\n     * For reference, even though your Swagger (or OpenAPI) document has\n     * defined the `exclusiveMinimum` value as `number`, {@link OpenAiComposer}\n     * forcibly converts it to `boolean` type, and assign the numeric value to\n     * the {@link minimum} property.\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Exclusive maximum value restriction.\n     *\n     * For reference, even though your Swagger (or OpenAPI) document has\n     * defined the `exclusiveMaximum` value as `number`, {@link OpenAiComposer}\n     * forcibly converts it to `boolean` type, and assign the numeric value to\n     * the {@link maximum} property.\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Multiple of value restriction.\n     *\n     * @exclusiveMinimum 0\n     * @warning document of Gemini says not supported, but cannot sure",
        "* String type schema info.",
        "* Enumeration values.",
        "* Default value.\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Format restriction.\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Pattern restriction.\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Minimum length restriction.\n     *\n     * @type uint64\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Maximum length restriction.\n     *\n     * @type uint64\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Content media type restriction.\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Array type schema info.",
        "* Items type schema info.\n     *\n     * The `items` means the type of the array elements. In other words, it is\n     * the type schema info of the `T` in the TypeScript array type `Array<T>`.",
        "* Unique items restriction.\n     *\n     * If this property value is `true`, target array must have unique items.\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Minimum items restriction.\n     *\n     * Restriction of minumum number of items in the array.\n     *\n     * @type uint64\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Maximum items restriction.\n     *\n     * Restriction of maximum number of items in the array.\n     *\n     * @type uint64\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Object type schema info.",
        "* Properties of the object.\n     *\n     * The `properties` means a list of key-value pairs of the object's\n     * regular properties. The key is the name of the regular property,\n     * and the value is the type schema info.\n     *\n     * If you need additional properties that is represented by dynamic key,\n     * you can use the {@link additionalProperties} instead.",
        "* List of key values of the required properties.\n     *\n     * The `required` means a list of the key values of the required\n     * {@link properties}. If some property key is not listed in the `required`\n     * list, it means that property is optional. Otherwise some property key\n     * exists in the `required` list, it means that the property must be filled.\n     *\n     * Below is an example of the {@link properties} and `required`.\n     *\n     * ```typescript\n     * interface SomeObject {\n     *   id: string;\n     *   email: string;\n     *   name?: string;\n     * }\n     * ```\n     *\n     * As you can see, `id` and `email` {@link properties} are {@link required},\n     * so that they are listed in the `required` list.\n     *\n     * ```json\n     * {\n     *   \"type\": \"object\",\n     *   \"properties\": {\n     *     \"id\": { \"type\": \"string\" },\n     *     \"email\": { \"type\": \"string\" },\n     *     \"name\": { \"type\": \"string\" }\n     *   },\n     *   \"required\": [\"id\", \"email\"]\n     * }\n     * ```",
        "* Additional properties' info.\n     *\n     * The `additionalProperties` means the type schema info of the additional\n     * properties that are not listed in the {@link properties}.\n     *\n     * If the value is `true`, it means that the additional properties\n     * are not restricted. They can be any type. Otherwise, if the value is\n     * {@link IGeminiSchema} type, it means that the additional properties\n     * must follow the type schema info.\n     *\n     * - `false`: only regular properties\n     * - `true`: `Record<string, any>`\n     * - `IGeminiSchema`: `Record<string, T>`\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Unknown type schema info.\n   *\n   * It means the type of the value is `any`.",
        "* Type is never be defined.",
        "* Null only type schema info.",
        "* Type is always `null`.",
        "* Default value.\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Significant attributes that can be applied to the most types.",
        "* Discriminator value of the type.",
        "* Whether to allow `null` value or not.",
        "* Common attributes that can be applied to all types.",
        "* Title of the schema.",
        "* Detailed description of the schema.",
        "* Whether the type is deprecated or not.\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* Example value.\n     *\n     * @warning document of Gemini says not supported, but cannot sure",
        "* List of example values as key-value pairs.\n     *\n     * @warning document of Gemini says not supported, but cannot sure"
    ],
    "functions": [],
    "classes": []
}