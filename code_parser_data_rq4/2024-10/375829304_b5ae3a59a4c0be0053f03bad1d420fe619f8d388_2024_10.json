{
    "identifiers": [
        "IWallet",
        "closeWallet",
        "createNewWallet",
        "DataStore",
        "SYNC_MARKER_TYPE",
        "initializeCloudWallet",
        "createDataStore",
        "edvService",
        "process",
        "process",
        "describe",
        "beforeAll",
        "edvService",
        "dataStore",
        "createDataStore",
        "initializeCloudWallet",
        "EDV_URL",
        "EDV_AUTH_KEY",
        "clearEdvDocuments",
        "wallet",
        "createNewWallet",
        "it",
        "newDocId",
        "edvService",
        "newDoc",
        "pullDocuments",
        "dataStore",
        "newDocId",
        "expect",
        "sdkDocument",
        "newDoc",
        "afterAll",
        "closeWallet"
    ],
    "literals": [
        "'@docknetwork/wallet-sdk-core/lib/types'",
        "'./helpers/wallet-helpers'",
        "'@docknetwork/wallet-sdk-data-store/src/types'",
        "'@docknetwork/wallet-sdk-core/src/cloud-wallet'",
        "'@docknetwork/wallet-sdk-data-store-typeorm/src'",
        "'@docknetwork/wallet-sdk-wasm/src/services/edv'",
        "'Cloud wallet'",
        "':memory:'",
        "'sqlite'",
        "'testnet'",
        "'should see a document added directly to the EDV appear in the wallet after pulling'",
        "${Date.now()}",
        "'test'",
        "'test'"
    ],
    "variables": [
        "EDV_URL",
        "EDV_AUTH_KEY",
        "dataStore",
        "waitForEdvIdle",
        "pushSyncMarker",
        "findDocumentByContentId",
        "updateDocumentByContentId",
        "pullDocuments",
        "getSyncMarkerDiff",
        "clearEdvDocuments",
        "wallet",
        "newDocId",
        "newDoc",
        "sdkDocument"
    ],
    "comments": [
        "it('should sync a document added to the wallet to the EDV', async () => {",
        "const doc = {",
        "type: 'test',",
        "data: 'test',",
        "};",
        "const {id: addedDocId} = await wallet.addDocument(doc);",
        "await waitForEdvIdle();",
        "const edvDocument = await findDocumentByContentId(addedDocId);",
        "expect(edvDocument.content.id).toBe(addedDocId);",
        "});",
        "it('should update a document in the wallet and see it updated in the EDV', async () => {",
        "const doc = {",
        "type: 'test',",
        "data: 'test',",
        "};",
        "const {id: addedDocId} = await wallet.addDocument(doc);",
        "await waitForEdvIdle();",
        "await wallet.updateDocument({",
        "id: addedDocId,",
        "...doc,",
        "data: 'updated',",
        "});",
        "await waitForEdvIdle();",
        "const updatedEdvDocument = await findDocumentByContentId(addedDocId);",
        "expect(updatedEdvDocument.content.data).toBe('updated');",
        "});",
        "it('should remove a document from the wallet and see it removed from the EDV', async () => {",
        "const doc = {",
        "type: 'test',",
        "data: 'test',",
        "};",
        "const {id: addedDocId} = await wallet.addDocument(doc);",
        "await waitForEdvIdle();",
        "await wallet.removeDocument(addedDocId);",
        "await waitForEdvIdle();",
        "const removedEdvDocument = await findDocumentByContentId(addedDocId);",
        "expect(removedEdvDocument).toBeUndefined();",
        "});",
        "it('should have zero sync marker diff after pushing sync marker', async () => {",
        "await pushSyncMarker();",
        "await waitForEdvIdle();",
        "const syncMarkerDiff = await getSyncMarkerDiff();",
        "expect(syncMarkerDiff).toBe(0);",
        "});",
        "it('should detect sync marker diff after updating sync marker directly in EDV', async () => {",
        "await updateDocumentByContentId({",
        "id: SYNC_MARKER_TYPE,",
        "type: SYNC_MARKER_TYPE,",
        "updatedAt: Date.now() + 1000,",
        "});",
        "const syncMarkerDiff = await getSyncMarkerDiff();",
        "expect(syncMarkerDiff > 0).toBeTruthy();",
        "});"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}