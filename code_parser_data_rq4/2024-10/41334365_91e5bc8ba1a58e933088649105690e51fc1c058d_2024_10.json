{
    "identifiers": [
        "io",
        "github",
        "dsheirer",
        "audio",
        "broadcast",
        "io",
        "github",
        "dsheirer",
        "alias",
        "Alias",
        "io",
        "github",
        "dsheirer",
        "alias",
        "AliasList",
        "io",
        "github",
        "dsheirer",
        "alias",
        "id",
        "broadcast",
        "BroadcastChannel",
        "io",
        "github",
        "dsheirer",
        "alias",
        "id",
        "talkgroup",
        "Talkgroup",
        "io",
        "github",
        "dsheirer",
        "audio",
        "AudioSegment",
        "io",
        "github",
        "dsheirer",
        "dsp",
        "oscillator",
        "ScalarRealOscillator",
        "io",
        "github",
        "dsheirer",
        "identifier",
        "patch",
        "PatchGroup",
        "io",
        "github",
        "dsheirer",
        "identifier",
        "radio",
        "RadioIdentifier",
        "io",
        "github",
        "dsheirer",
        "identifier",
        "talkgroup",
        "TalkgroupIdentifier",
        "io",
        "github",
        "dsheirer",
        "message",
        "TimeslotMessage",
        "io",
        "github",
        "dsheirer",
        "decode",
        "p25",
        "identifier",
        "patch",
        "APCO25PatchGroup",
        "io",
        "github",
        "dsheirer",
        "decode",
        "p25",
        "identifier",
        "radio",
        "APCO25RadioIdentifier",
        "io",
        "github",
        "dsheirer",
        "decode",
        "p25",
        "identifier",
        "talkgroup",
        "APCO25Talkgroup",
        "io",
        "github",
        "dsheirer",
        "preference",
        "UserPreferences",
        "io",
        "github",
        "dsheirer",
        "protocol",
        "Protocol",
        "io",
        "github",
        "dsheirer",
        "sample",
        "Listener",
        "java",
        "io",
        "java",
        "nio",
        "file",
        "Files",
        "java",
        "nio",
        "file",
        "Path",
        "java",
        "util",
        "concurrent",
        "CountDownLatch",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "java",
        "util",
        "stream",
        "Stream",
        "org",
        "junit",
        "jupiter",
        "api",
        "Test",
        "org",
        "junit",
        "jupiter",
        "api",
        "Assertions",
        "assertTrue",
        "TALKGROUP_1",
        "TALKGROUP_2",
        "TALKGROUP_3",
        "RADIO_1",
        "Test",
        "expectedRecordingsCount",
        "latch",
        "expectedRecordingsCount",
        "listener",
        "audioRecording",
        "latch",
        "countDown",
        "userPreferences",
        "userPreferences",
        "getCallManagementPreference",
        "setPatchGroupStreamingOption",
        "PatchGroupStreamingOption",
        "PATCH_GROUP",
        "manager",
        "listener",
        "BroadcastFormat",
        "MP3",
        "userPreferences",
        "manager",
        "start",
        "manager",
        "receive",
        "getAudioSegment",
        "success",
        "success",
        "latch",
        "await",
        "TimeUnit",
        "SECONDS",
        "e",
        "e",
        "cleanupStreamingDirectory",
        "userPreferences",
        "getDirectoryPreference",
        "getDirectoryStreaming",
        "assertTrue",
        "success",
        "latch",
        "getCount",
        "expectedRecordingsCount",
        "Test",
        "expectedRecordingsCount",
        "latch",
        "expectedRecordingsCount",
        "listener",
        "audioRecording",
        "latch",
        "countDown",
        "userPreferences",
        "userPreferences",
        "getCallManagementPreference",
        "setPatchGroupStreamingOption",
        "PatchGroupStreamingOption",
        "TALKGROUPS",
        "manager",
        "listener",
        "BroadcastFormat",
        "MP3",
        "userPreferences",
        "manager",
        "start",
        "manager",
        "receive",
        "getAudioSegment",
        "success",
        "success",
        "latch",
        "await",
        "TimeUnit",
        "SECONDS",
        "e",
        "e",
        "cleanupStreamingDirectory",
        "userPreferences",
        "getDirectoryPreference",
        "getDirectoryStreaming",
        "assertTrue",
        "success",
        "latch",
        "getCount",
        "expectedRecordingsCount",
        "streamingDirectory",
        "Files",
        "exists",
        "streamingDirectory",
        "fileStream",
        "Files",
        "streamingDirectory",
        "fileStream",
        "forEach",
        "path",
        "Files",
        "path",
        "e",
        "e",
        "printStackTrace",
        "e",
        "e",
        "printStackTrace",
        "aliasList",
        "getAliasList",
        "audioSegment",
        "aliasList",
        "TimeslotMessage",
        "TIMESLOT_0",
        "oscillator",
        "x",
        "x",
        "x",
        "audioSegment",
        "addAudio",
        "oscillator",
        "generate",
        "audioSegment",
        "addIdentifier",
        "getPatchGroup",
        "audioSegment",
        "addIdentifier",
        "getRadio",
        "audioSegment",
        "completeProperty",
        "audioSegment",
        "aliasList",
        "patchAlias",
        "patchAlias",
        "addAliasID",
        "Protocol",
        "APCO25",
        "patchAlias",
        "addAliasID",
        "aliasList",
        "addAlias",
        "patchAlias",
        "talkgroupAlias1",
        "talkgroupAlias1",
        "addAliasID",
        "Protocol",
        "APCO25",
        "talkgroupAlias1",
        "addAliasID",
        "aliasList",
        "addAlias",
        "talkgroupAlias1",
        "talkgroupAlias2",
        "talkgroupAlias2",
        "addAliasID",
        "Protocol",
        "APCO25",
        "talkgroupAlias2",
        "addAliasID",
        "aliasList",
        "addAlias",
        "talkgroupAlias2",
        "aliasList",
        "talkgroup1",
        "APCO25Talkgroup",
        "create",
        "TALKGROUP_1",
        "talkgroup2",
        "APCO25Talkgroup",
        "create",
        "TALKGROUP_2",
        "talkgroup3",
        "APCO25Talkgroup",
        "create",
        "TALKGROUP_3",
        "pg",
        "talkgroup1",
        "pg",
        "addPatchedTalkgroup",
        "talkgroup2",
        "pg",
        "addPatchedTalkgroup",
        "talkgroup3",
        "APCO25PatchGroup",
        "create",
        "pg",
        "APCO25RadioIdentifier",
        "createFrom",
        "RADIO_1"
    ],
    "literals": [
        "\"Stream patch group audio as PATCHED GROUP failed to produce [\"",
        "\"/\"",
        "\"] streaming recordings\"",
        "\"Stream patch group audio as INDIVIDUAL TALKGROUPS failed to produce [\"",
        "\"/\"",
        "\"] streaming recordings\"",
        "\"test\"",
        "\"patch\"",
        "\"Stream A\"",
        "\"talkgroup1\"",
        "\"Stream B\"",
        "\"talkgroup2\"",
        "\"Stream C\""
    ],
    "variables": [],
    "comments": [
        "We use a countdown latch to count the number of expected audio recordings produced.",
        "We use a countdown latch to count the number of expected audio recordings produced.  In this case, we expect",
        "two audio recordings, one for stream B and one for stream C associated with the two patched talkgroups."
    ],
    "docstrings": [
        "* *****************************************************************************\n * Copyright (C) 2014-2024 Dennis Sheirer\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>\n * ****************************************************************************",
        "* Automated testing for the AudioStreamingManager that includes for testing streaming a patch group audio segment as\n * an individual stream aliased against the patch group, or broken up into the set of patched talkgroups and streamed\n * according to the aliases for each patched talkgroup.",
        "* Cleanup any generated streaming recordings.\n     * @param streamingDirectory",
        "* Creates an audio segment with audio using the supplied alias list.\n     * @return audio segment",
        "* Creates a patch group\n     * @return p25 patch group",
        "* Creates a source radio identifier.\n     * @return radio"
    ],
    "functions": [
        "testPatchGroupStreamingAsPatchGroup",
        "testPatchGroupStreamingAsIndividualGroups",
        "cleanupStreamingDirectory",
        "AudioSegment",
        "getAudioSegment",
        "AliasList",
        "getAliasList",
        "APCO25PatchGroup",
        "getPatchGroup",
        "RadioIdentifier",
        "getRadio"
    ],
    "classes": [
        "AudioStreamingManagerTest"
    ]
}