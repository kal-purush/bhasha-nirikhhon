{
    "identifiers": [
        "inspect",
        "dataclasses",
        "dataclass",
        "typing",
        "Callable",
        "Optional",
        "Union",
        "numpy",
        "np",
        "torch",
        "diffusers",
        "DDIMScheduler",
        "DiffusionPipeline",
        "DPMSolverMultistepScheduler",
        "EulerAncestralDiscreteScheduler",
        "EulerDiscreteScheduler",
        "LMSDiscreteScheduler",
        "PNDMScheduler",
        "diffusers",
        "image_processor",
        "VaeImageProcessor",
        "diffusers",
        "utils",
        "BaseOutput",
        "diffusers",
        "utils",
        "torch_utils",
        "randn_tensor",
        "einops",
        "rearrange",
        "repeat",
        "tqdm",
        "tqdm",
        "models",
        "mutual_self_attention",
        "ReferenceAttentionControl",
        "dataclass",
        "BaseOutput",
        "Union",
        "torch",
        "Tensor",
        "np",
        "ndarray",
        "DiffusionPipeline",
        "vae",
        "reference_unet",
        "denoising_unet",
        "face_locator",
        "image_proj",
        "scheduler",
        "Union",
        "DDIMScheduler",
        "PNDMScheduler",
        "LMSDiscreteScheduler",
        "EulerDiscreteScheduler",
        "EulerAncestralDiscreteScheduler",
        "DPMSolverMultistepScheduler",
        "register_modules",
        "vae",
        "vae",
        "reference_unet",
        "reference_unet",
        "denoising_unet",
        "denoising_unet",
        "face_locator",
        "face_locator",
        "scheduler",
        "scheduler",
        "image_proj",
        "image_proj",
        "len",
        "vae",
        "config",
        "block_out_channels",
        "VaeImageProcessor",
        "vae_scale_factor",
        "vae_scale_factor",
        "do_convert_rgb",
        "property",
        "device",
        "torch",
        "device",
        "hasattr",
        "unet",
        "device",
        "unet",
        "modules",
        "hasattr",
        "hasattr",
        "_hf_hook",
        "_hf_hook",
        "execution_device",
        "torch",
        "device",
        "_hf_hook",
        "execution_device",
        "device",
        "batch_size",
        "num_channels_latents",
        "width",
        "height",
        "video_length",
        "dtype",
        "torch",
        "dtype",
        "device",
        "torch",
        "device",
        "generator",
        "Optional",
        "torch",
        "Generator",
        "latents",
        "Optional",
        "torch",
        "Tensor",
        "batch_size",
        "num_channels_latents",
        "video_length",
        "height",
        "vae_scale_factor",
        "width",
        "vae_scale_factor",
        "isinstance",
        "generator",
        "len",
        "generator",
        "batch_size",
        "ValueError",
        "len",
        "generator",
        "batch_size",
        "latents",
        "randn_tensor",
        "shape",
        "generator",
        "generator",
        "device",
        "device",
        "dtype",
        "dtype",
        "latents",
        "to",
        "device",
        "latents",
        "scheduler",
        "init_noise_sigma",
        "latents",
        "generator",
        "eta",
        "inspect",
        "signature",
        "scheduler",
        "step",
        "parameters",
        "keys",
        "accepts_eta",
        "eta",
        "inspect",
        "signature",
        "scheduler",
        "step",
        "parameters",
        "keys",
        "accepts_generator",
        "generator",
        "extra_step_kwargs",
        "latents",
        "latents",
        "shape",
        "latents",
        "rearrange",
        "latents",
        "frame_idx",
        "tqdm",
        "latents",
        "shape",
        "video",
        "append",
        "vae",
        "decode",
        "latents",
        "frame_idx",
        "frame_idx",
        "sample",
        "torch",
        "cat",
        "video",
        "rearrange",
        "video",
        "f",
        "video_length",
        "video",
        "clamp",
        "video",
        "cpu",
        "numpy",
        "video",
        "torch",
        "no_grad",
        "ref_image",
        "face_emb",
        "audio_tensor",
        "face_mask",
        "pixel_values_full_mask",
        "pixel_values_face_mask",
        "pixel_values_lip_mask",
        "width",
        "height",
        "video_length",
        "num_inference_steps",
        "guidance_scale",
        "num_images_per_prompt",
        "eta",
        "motion_scale",
        "Optional",
        "torch",
        "Tensor",
        "generator",
        "Optional",
        "Union",
        "torch",
        "Generator",
        "torch",
        "Generator",
        "output_type",
        "Optional",
        "return_dict",
        "callback",
        "Optional",
        "Callable",
        "torch",
        "FloatTensor",
        "callback_steps",
        "Optional",
        "kwargs",
        "height",
        "unet",
        "config",
        "sample_size",
        "vae_scale_factor",
        "width",
        "unet",
        "config",
        "sample_size",
        "vae_scale_factor",
        "_execution_device",
        "guidance_scale",
        "scheduler",
        "set_timesteps",
        "num_inference_steps",
        "device",
        "device",
        "scheduler",
        "timesteps",
        "face_emb",
        "clip_image_embeds",
        "to",
        "image_proj",
        "device",
        "image_proj",
        "dtype",
        "image_proj",
        "clip_image_embeds",
        "image_proj",
        "torch",
        "zeros_like",
        "clip_image_embeds",
        "do_classifier_free_guidance",
        "torch",
        "cat",
        "uncond_encoder_hidden_states",
        "encoder_hidden_states",
        "dim",
        "ReferenceAttentionControl",
        "reference_unet",
        "do_classifier_free_guidance",
        "do_classifier_free_guidance",
        "mode",
        "batch_size",
        "batch_size",
        "fusion_blocks",
        "ReferenceAttentionControl",
        "denoising_unet",
        "do_classifier_free_guidance",
        "do_classifier_free_guidance",
        "mode",
        "batch_size",
        "batch_size",
        "fusion_blocks",
        "denoising_unet",
        "in_channels",
        "prepare_latents",
        "batch_size",
        "num_images_per_prompt",
        "num_channels_latents",
        "width",
        "height",
        "video_length",
        "clip_image_embeds",
        "dtype",
        "device",
        "generator",
        "prepare_extra_step_kwargs",
        "generator",
        "eta",
        "rearrange",
        "ref_image",
        "ref_image_processor",
        "preprocess",
        "ref_image_tensor",
        "height",
        "height",
        "width",
        "width",
        "ref_image_tensor",
        "to",
        "dtype",
        "vae",
        "dtype",
        "device",
        "vae",
        "device",
        "vae",
        "encode",
        "ref_image_tensor",
        "latent_dist",
        "mean",
        "ref_image_latents",
        "face_mask",
        "unsqueeze",
        "to",
        "dtype",
        "face_locator",
        "dtype",
        "device",
        "face_locator",
        "device",
        "repeat",
        "face_mask",
        "repeat",
        "video_length",
        "face_mask",
        "transpose",
        "face_locator",
        "face_mask",
        "torch",
        "cat",
        "torch",
        "zeros_like",
        "face_mask",
        "face_mask",
        "dim",
        "do_classifier_free_guidance",
        "face_mask",
        "torch",
        "cat",
        "mask",
        "mask",
        "pixel_values_full_mask",
        "do_classifier_free_guidance",
        "pixel_values_full_mask",
        "torch",
        "cat",
        "mask",
        "mask",
        "pixel_values_face_mask",
        "do_classifier_free_guidance",
        "pixel_values_face_mask",
        "torch",
        "cat",
        "mask",
        "mask",
        "pixel_values_lip_mask",
        "do_classifier_free_guidance",
        "pixel_values_lip_mask",
        "mask",
        "pixel_values_face_mask",
        "pixel_values_face_mask_",
        "append",
        "mask",
        "to",
        "device",
        "denoising_unet",
        "device",
        "dtype",
        "denoising_unet",
        "dtype",
        "pixel_values_face_mask_",
        "mask",
        "pixel_values_lip_mask",
        "pixel_values_lip_mask_",
        "append",
        "mask",
        "to",
        "device",
        "denoising_unet",
        "device",
        "dtype",
        "denoising_unet",
        "dtype",
        "pixel_values_lip_mask_",
        "mask",
        "pixel_values_full_mask",
        "pixel_values_full_mask_",
        "append",
        "mask",
        "to",
        "device",
        "denoising_unet",
        "device",
        "dtype",
        "denoising_unet",
        "dtype",
        "pixel_values_full_mask_",
        "torch",
        "zeros_like",
        "audio_tensor",
        "torch",
        "cat",
        "uncond_audio_tensor",
        "audio_tensor",
        "dim",
        "audio_tensor",
        "to",
        "dtype",
        "denoising_unet",
        "dtype",
        "device",
        "denoising_unet",
        "device",
        "len",
        "timesteps",
        "num_inference_steps",
        "scheduler",
        "order",
        "progress_bar",
        "total",
        "num_inference_steps",
        "progress_bar",
        "i",
        "t",
        "timesteps",
        "i",
        "reference_unet",
        "ref_image_latents",
        "repeat",
        "do_classifier_free_guidance",
        "torch",
        "zeros_like",
        "t",
        "encoder_hidden_states",
        "encoder_hidden_states",
        "return_dict",
        "reference_control_reader",
        "update",
        "reference_control_writer",
        "torch",
        "cat",
        "latents",
        "do_classifier_free_guidance",
        "latents",
        "scheduler",
        "scale_model_input",
        "latent_model_input",
        "t",
        "denoising_unet",
        "latent_model_input",
        "t",
        "encoder_hidden_states",
        "encoder_hidden_states",
        "mask_cond_fea",
        "face_mask",
        "full_mask",
        "pixel_values_full_mask",
        "face_mask",
        "pixel_values_face_mask",
        "lip_mask",
        "pixel_values_lip_mask",
        "audio_embedding",
        "audio_tensor",
        "motion_scale",
        "motion_scale",
        "return_dict",
        "do_classifier_free_guidance",
        "noise_pred",
        "chunk",
        "noise_pred_uncond",
        "guidance_scale",
        "noise_pred_text",
        "noise_pred_uncond",
        "scheduler",
        "step",
        "noise_pred",
        "t",
        "latents",
        "extra_step_kwargs",
        "return_dict",
        "i",
        "len",
        "timesteps",
        "i",
        "num_warmup_steps",
        "i",
        "scheduler",
        "order",
        "progress_bar",
        "update",
        "callback",
        "i",
        "callback_steps",
        "i",
        "getattr",
        "scheduler",
        "callback",
        "step_idx",
        "t",
        "latents",
        "reference_control_reader",
        "clear",
        "reference_control_writer",
        "clear",
        "decode_latents",
        "latents",
        "output_type",
        "torch",
        "from_numpy",
        "images",
        "return_dict",
        "images",
        "FaceAnimatePipelineOutput",
        "videos",
        "images"
    ],
    "literals": [
        "\"meta\"",
        "\"_hf_hook\"",
        "\"_hf_hook\"",
        "\"execution_device\"",
        "f\"You have passed a list of generators of length {len(generator)}, but requested an effective batch\"",
        "f\" size of {batch_size}. Make sure the batch size matches the length of the generators.\"",
        "\"eta\"",
        "\"eta\"",
        "\"generator\"",
        "\"generator\"",
        "\"b c f h w -> (b f) c h w\"",
        "\"(b f) c h w -> b c f h w\"",
        "\"tensor\"",
        "\"write\"",
        "\"full\"",
        "\"read\"",
        "\"full\"",
        "\"b f c h w -> (b f) c h w\"",
        "\"b f c h w -> b (repeat f) c h w\"",
        "\"order\"",
        "\"tensor\""
    ],
    "variables": [
        "videos",
        "vae_scale_factor",
        "ref_image_processor",
        "shape",
        "latents",
        "latents",
        "latents",
        "accepts_eta",
        "extra_step_kwargs",
        "extra_step_kwargs",
        "accepts_generator",
        "extra_step_kwargs",
        "video_length",
        "latents",
        "latents",
        "video",
        "video",
        "video",
        "video",
        "video",
        "height",
        "width",
        "device",
        "do_classifier_free_guidance",
        "timesteps",
        "batch_size",
        "clip_image_embeds",
        "clip_image_embeds",
        "encoder_hidden_states",
        "uncond_encoder_hidden_states",
        "encoder_hidden_states",
        "reference_control_writer",
        "reference_control_reader",
        "num_channels_latents",
        "latents",
        "extra_step_kwargs",
        "ref_image_tensor",
        "ref_image_tensor",
        "ref_image_tensor",
        "ref_image_latents",
        "ref_image_latents",
        "face_mask",
        "face_mask",
        "face_mask",
        "face_mask",
        "face_mask",
        "pixel_values_full_mask",
        "pixel_values_face_mask",
        "pixel_values_lip_mask",
        "pixel_values_face_mask_",
        "pixel_values_face_mask",
        "pixel_values_lip_mask_",
        "pixel_values_lip_mask",
        "pixel_values_full_mask_",
        "pixel_values_full_mask",
        "uncond_audio_tensor",
        "audio_tensor",
        "audio_tensor",
        "num_warmup_steps",
        "latent_model_input",
        "latent_model_input",
        "noise_pred",
        "noise_pred_uncond",
        "noise_pred_text",
        "noise_pred",
        "latents",
        "step_idx",
        "images",
        "images"
    ],
    "comments": [
        "pylint: disable=R0801",
        "Number of videos to generate in parallel",
        "Number of channels in the latents",
        "Width of the video frame",
        "Height of the video frame",
        "Length of the video in frames",
        "Data type of the latents",
        "Device to store the latents on",
        "Random number generator for reproducibility",
        "Pre-generated latents (optional)",
        "scale the initial noise by the standard deviation required by the scheduler",
        "prepare extra kwargs for the scheduler step, since not all schedulers have the same signature",
        "eta (η) is only used with the DDIMScheduler, it will be ignored for other schedulers.",
        "eta corresponds to η in DDIM paper: https://arxiv.org/abs/2010.02502",
        "and should be between [0, 1]",
        "check if the scheduler accepts generator",
        "video = self.vae.decode(latents).sample",
        "we always cast to float32 as this does not cause significant overhead and is compatible with bfloa16",
        "Default height and width to unet",
        "Prepare timesteps",
        "prepare clip image embeddings",
        "print(encoder_hidden_states.shape,\"a1\") #torch.Size([1, 4, 768])",
        "print(encoder_hidden_states.shape, \"a2\") #torch.Size([2, 4, 768]) a2",
        "Prepare extra step kwargs.",
        "Prepare ref image latents",
        "(bs, c, width, height)",
        "(b, 4, h, w)",
        "(bs, f, c, H, W)",
        "(bs, c, f, H, W)",
        "denoising loop",
        "Forward reference image",
        "expand the latents if we are doing classifier free guidance",
        "perform guidance",
        "compute the previous noisy sample x_t -> x_t-1",
        "call the callback, if provided",
        "Post-processing",
        "(b, c, f, h, w)",
        "Convert to tensor"
    ],
    "docstrings": [
        "\"\"\"\nThis module is responsible for animating faces in videos using a combination of deep learning techniques.\nIt provides a pipeline for generating face animations by processing video frames and extracting face features. \nThe module utilizes various schedulers and utilities for efficient face animation and supports different types \n    of latents for more control over the animation process.\n\nFunctions and Classes:\n- FaceAnimatePipeline: A class that extends the DiffusionPipeline class from the diffusers library to handle face animation tasks.\n  - __init__: Initializes the pipeline with the necessary components (VAE, UNets, face locator, etc.).\n  - prepare_latents: Generates or loads latents for the animation process, scaling them according to the scheduler's requirements.\n  - prepare_extra_step_kwargs: Prepares extra keyword arguments for the scheduler step, ensuring compatibility with different schedulers.\n  - decode_latents: Decodes the latents into video frames, ready for animation.\n\nUsage:\n- Import the necessary packages and classes.\n- Create a FaceAnimatePipeline instance with the required components.\n- Prepare the latents for the animation process.\n- Use the pipeline to generate the animated video.\n\nNote:\n- This module is designed to work with the diffusers library, which provides the underlying framework for face animation using deep learning.\n- The module is intended for research and development purposes, and further optimization and customization may be required for specific use cases.\n\"\"\"",
        "\"\"\"\n    FaceAnimatePipelineOutput is a custom class that inherits from BaseOutput and represents the output of the FaceAnimatePipeline.\n    \n    Attributes:\n        videos (Union[torch.Tensor, np.ndarray]): A tensor or numpy array containing the generated video frames.\n    \n    Methods:\n        __init__(self, videos: Union[torch.Tensor, np.ndarray]): Initializes the FaceAnimatePipelineOutput object with the generated video frames.\n    \"\"\"",
        "\"\"\"\n    FaceAnimatePipeline is a custom DiffusionPipeline for animating faces.\n    \n    It inherits from the DiffusionPipeline class and is used to animate faces by\n    utilizing a variational autoencoder (VAE), a reference UNet, a denoising UNet,\n    a face locator, and an image processor. The pipeline is responsible for generating\n    and animating face latents, and decoding the latents to produce the final video output.\n    \n    Attributes:\n        vae (VaeImageProcessor): Variational autoencoder for processing images.\n        reference_unet (nn.Module): Reference UNet for mutual self-attention.\n        denoising_unet (nn.Module): Denoising UNet for image denoising.\n        face_locator (nn.Module): Face locator for detecting and cropping faces.\n        image_proj (nn.Module): Image projector for processing images.\n        scheduler (Union[DDIMScheduler, PNDMScheduler, LMSDiscreteScheduler,\n                         EulerDiscreteScheduler, EulerAncestralDiscreteScheduler,\n                         DPMSolverMultistepScheduler]): Diffusion scheduler for\n                         controlling the noise level.\n    \n    Methods:\n        __init__(self, vae, reference_unet, denoising_unet, face_locator,\n                 image_proj, scheduler): Initializes the FaceAnimatePipeline\n                 with the given components and scheduler.\n        prepare_latents(self, batch_size, num_channels_latents, width, height,\n                       video_length, dtype, device, generator=None, latents=None):\n                       Prepares the initial latents for video generation.\n        prepare_extra_step_kwargs(self, generator, eta): Prepares extra keyword\n                       arguments for the scheduler step.\n        decode_latents(self, latents): Decodes the latents to produce the final\n                       video output.\n    \"\"\"",
        "\"\"\"\n        Prepares the initial latents for video generation.\n\n        Args:\n            batch_size (int): Number of videos to generate in parallel.\n            num_channels_latents (int): Number of channels in the latents.\n            width (int): Width of the video frame.\n            height (int): Height of the video frame.\n            video_length (int): Length of the video in frames.\n            dtype (torch.dtype): Data type of the latents.\n            device (torch.device): Device to store the latents on.\n            generator (Optional[torch.Generator]): Random number generator for reproducibility.\n            latents (Optional[torch.Tensor]): Pre-generated latents (optional).\n\n        Returns:\n            latents (torch.Tensor): Tensor of shape (batch_size, num_channels_latents, width, height)\n            containing the initial latents for video generation.\n        \"\"\"",
        "\"\"\"\n        Prepares extra keyword arguments for the scheduler step.\n\n        Args:\n            generator (Optional[torch.Generator]): Random number generator for reproducibility.\n            eta (float): The eta (η) parameter used with the DDIMScheduler. \n            It corresponds to η in the DDIM paper (https://arxiv.org/abs/2010.02502) and should be between [0, 1].\n\n        Returns:\n            dict: A dictionary containing the extra keyword arguments for the scheduler step.\n        \"\"\"",
        "\"\"\"\n        Decode the latents to produce a video.\n\n        Parameters:\n        latents (torch.Tensor): The latents to be decoded.\n\n        Returns:\n        video (torch.Tensor): The decoded video.\n        video_length (int): The length of the video in frames.\n        \"\"\""
    ],
    "functions": [
        "_execution_device",
        "prepare_latents",
        "prepare_extra_step_kwargs",
        "decode_latents",
        "__call__"
    ],
    "classes": [
        "FaceAnimatePipelineOutput",
        "FaceAnimatePipeline"
    ]
}