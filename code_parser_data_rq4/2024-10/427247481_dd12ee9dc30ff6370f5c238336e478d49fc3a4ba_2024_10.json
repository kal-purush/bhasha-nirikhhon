{
    "identifiers": [
        "otel",
        "otel",
        "Util",
        "WIDGET_COLOR",
        "otel",
        "Util",
        "WIDGET_SHAPE",
        "otel",
        "Util",
        "computeWidgetColor",
        "otel",
        "Util",
        "computeWidgetShape",
        "io",
        "opentelemetry",
        "api",
        "common",
        "Attributes",
        "io",
        "opentelemetry",
        "api",
        "metrics",
        "Meter",
        "io",
        "opentelemetry",
        "api",
        "metrics",
        "ObservableLongCounter",
        "java",
        "util",
        "concurrent",
        "atomic",
        "AtomicLong",
        "WIDGET_RED_CIRCLE",
        "Util",
        "WIDGET_RED_CIRCLE",
        "meter",
        "widgetCount",
        "asyncCounter",
        "meter",
        "counterBuilder",
        "setDescription",
        "setUnit",
        "buildWithCallback",
        "observableMeasurement",
        "currentWidgetCount",
        "widgetCount",
        "get",
        "observableMeasurement",
        "record",
        "currentWidgetCount",
        "observableMeasurement",
        "record",
        "currentWidgetCount",
        "WIDGET_RED_CIRCLE",
        "observableMeasurement",
        "record",
        "currentWidgetCount",
        "Attributes",
        "of",
        "WIDGET_SHAPE",
        "computeWidgetShape",
        "WIDGET_COLOR",
        "computeWidgetColor",
        "asyncCounter",
        "close"
    ],
    "literals": [
        "\"fully.qualified.counter\"",
        "\"A count of produced widgets\"",
        "\"{widget}\""
    ],
    "variables": [],
    "comments": [
        "Pre-allocate attributes whenever possible",
        "Construct an async counter to observe an existing counter in a callback",
        "Uncomment to optionally change the type to double",
        ".ofDoubles()",
        "the callback is invoked a MetricReader reads metrics",
        "Record a measurement with no attributes.",
        "Attributes defaults to Attributes.empty().",
        "Record a measurement with attributes, using pre-allocated attributes whenever",
        "possible.",
        "Sometimes, attributes must be computed using application context.",
        "Optionally close the counter to unregister the callback when required"
    ],
    "docstrings": [],
    "functions": [
        "asyncCounterUsage"
    ],
    "classes": [
        "AsyncCounterUsage"
    ]
}