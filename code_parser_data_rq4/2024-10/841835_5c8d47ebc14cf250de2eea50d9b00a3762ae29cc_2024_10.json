{
    "identifiers": [
        "json",
        "readthedocs",
        "builds",
        "models",
        "Version",
        "readthedocs",
        "filetreediff",
        "dataclasses",
        "FileTreeDiff",
        "FileTreeDiffManifest",
        "readthedocs",
        "projects",
        "constants",
        "MEDIA_TYPE_DIFF",
        "readthedocs",
        "storage",
        "build_media_storage",
        "version_a",
        "Version",
        "version_b",
        "Version",
        "FileTreeDiff",
        "FileTreeDiffManifest",
        "version",
        "version_a",
        "version_b",
        "get_manifest",
        "version",
        "manifest",
        "version",
        "latest_successful_build",
        "latest_build",
        "latest_build",
        "id",
        "manifest",
        "build",
        "id",
        "manifests",
        "append",
        "manifest",
        "manifests",
        "version_a_manifest",
        "files",
        "keys",
        "version_b_manifest",
        "files",
        "keys",
        "files_a",
        "files_b",
        "files_b",
        "files_a",
        "file_path",
        "files_a",
        "files_b",
        "version_a_manifest",
        "files",
        "file_path",
        "version_b_manifest",
        "files",
        "file_path",
        "file_a",
        "main_content_hash",
        "file_b",
        "main_content_hash",
        "files_modified",
        "append",
        "file_path",
        "FileTreeDiff",
        "added",
        "files_added",
        "deleted",
        "files_deleted",
        "modified",
        "files_modified",
        "outdated",
        "outdated",
        "version",
        "Version",
        "FileTreeDiffManifest",
        "version",
        "project",
        "get_storage_path",
        "type_",
        "MEDIA_TYPE_DIFF",
        "version_slug",
        "version",
        "slug",
        "include_file",
        "version_type",
        "version",
        "build_media_storage",
        "join",
        "storage_path",
        "MANIFEST_FILE_NAME",
        "build_media_storage",
        "open",
        "manifest_path",
        "manifest_file",
        "json",
        "load",
        "manifest_file",
        "FileNotFoundError",
        "FileTreeDiffManifest",
        "from_dict",
        "manifest",
        "version",
        "Version",
        "manifest",
        "FileTreeDiffManifest",
        "version",
        "project",
        "get_storage_path",
        "type_",
        "MEDIA_TYPE_DIFF",
        "version_slug",
        "version",
        "slug",
        "include_file",
        "version_type",
        "version",
        "build_media_storage",
        "join",
        "storage_path",
        "MANIFEST_FILE_NAME",
        "build_media_storage",
        "open",
        "manifest_path",
        "f",
        "json",
        "dump",
        "manifest",
        "as_dict",
        "f"
    ],
    "literals": [
        "\"manifest.json\"",
        "\"w\""
    ],
    "variables": [
        "MANIFEST_FILE_NAME",
        "outdated",
        "manifests",
        "manifest",
        "latest_build",
        "outdated",
        "version_a_manifest",
        "version_b_manifest",
        "files_a",
        "files_b",
        "files_added",
        "files_deleted",
        "files_modified",
        "file_a",
        "file_b",
        "storage_path",
        "manifest_path",
        "manifest",
        "storage_path",
        "manifest_path"
    ],
    "comments": [
        "pylint: disable=unbalanced-tuple-unpacking"
    ],
    "docstrings": [
        "\"\"\"\nModule for the file tree diff feature (FTD).\n\nThis feature is used to compare the files of two versions of a project.\n\nThe process is as follows:\n\n- A build is triggered for a version.\n- A task is triggered after the build has succeeded\n  to generate a manifest of the files of the version.\n  Currently, we only consider the latest version and pull request previews.\n- The manifest contains the hash of the main content of each file.\n  Only HTML files are considered for now.\n- The manifest is stored in the diff media storage.\n- Then our application can compare the manifest to get a list of added,\n  deleted, and modified files between two versions.\n\"\"\"",
        "\"\"\"\n    Get the file tree diff between two versions.\n\n    If any of the versions don't have a manifest, return None.\n    If the latest build of any of the versions is different from the manifest build,\n    the diff is marked as outdated. The client is responsible for deciding\n    how to handle this case.\n\n    Set operations are used to calculate the added, deleted, and modified files.\n    To get the modified files, we compare the main content hash of each common file.\n    If there are no changes between the versions, all lists will be empty.\n    \"\"\"",
        "\"\"\"\n    Get the file manifest for a version.\n\n    If the manifest file does not exist, return None.\n    \"\"\""
    ],
    "functions": [
        "get_diff",
        "get_manifest",
        "write_manifest"
    ],
    "classes": []
}