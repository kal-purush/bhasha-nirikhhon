{
    "identifiers": [
        "random",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "deap",
        "creator",
        "tools",
        "algorithms",
        "random",
        "randint",
        "random",
        "randint",
        "_",
        "num_locations",
        "creator",
        "create",
        "Fitness",
        "weights",
        "creator",
        "create",
        "fitness",
        "creator",
        "FitnessMin",
        "Toolbox",
        "toolbox",
        "register",
        "random",
        "sample",
        "num_locations",
        "num_locations",
        "toolbox",
        "register",
        "tools",
        "initIterate",
        "creator",
        "Individual",
        "toolbox",
        "indices",
        "toolbox",
        "register",
        "tools",
        "initRepeat",
        "toolbox",
        "individual",
        "individual",
        "i",
        "num_vehicles",
        "depot",
        "locations",
        "individual",
        "j",
        "j",
        "i",
        "len",
        "individual",
        "num_vehicles",
        "depot",
        "sum",
        "np",
        "linalg",
        "norm",
        "np",
        "array",
        "vehicle_route",
        "k",
        "np",
        "array",
        "vehicle_route",
        "k",
        "k",
        "len",
        "vehicle_route",
        "total_distance",
        "vehicle_distance",
        "distances",
        "append",
        "vehicle_distance",
        "np",
        "std",
        "distances",
        "total_distance",
        "balance_penalty",
        "toolbox",
        "register",
        "evalVRP",
        "toolbox",
        "register",
        "tools",
        "cxPartialyMatched",
        "toolbox",
        "register",
        "tools",
        "mutShuffleIndexes",
        "indpb",
        "toolbox",
        "register",
        "tools",
        "selTournament",
        "tournsize",
        "individual",
        "title",
        "plt",
        "figure",
        "x",
        "y",
        "locations",
        "plt",
        "plot",
        "x",
        "y",
        "plt",
        "plot",
        "depot",
        "depot",
        "i",
        "num_vehicles",
        "depot",
        "locations",
        "individual",
        "j",
        "j",
        "i",
        "len",
        "individual",
        "num_vehicles",
        "depot",
        "plt",
        "plot",
        "vehicle_route",
        "plt",
        "title",
        "title",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "show",
        "random",
        "seed",
        "toolbox",
        "population",
        "n",
        "tools",
        "HallOfFame",
        "tools",
        "Statistics",
        "ind",
        "ind",
        "fitness",
        "values",
        "stats",
        "register",
        "np",
        "mean",
        "stats",
        "register",
        "np",
        "min",
        "algorithms",
        "eaSimple",
        "pop",
        "toolbox",
        "stats",
        "stats",
        "halloffame",
        "hof",
        "plot_routes",
        "hof",
        "pop",
        "stats",
        "hof",
        "main"
    ],
    "literals": [
        "\"FitnessMin\"",
        "\"Individual\"",
        "\"indices\"",
        "\"individual\"",
        "\"population\"",
        "\"evaluate\"",
        "\"mate\"",
        "\"mutate\"",
        "\"select\"",
        "\"Routes\"",
        "'bo'",
        "'rs'",
        "'-'",
        "'X Coordinate'",
        "'Y Coordinate'",
        "\"avg\"",
        "\"min\"",
        "\"Optimal Route\"",
        "\"__main__\""
    ],
    "variables": [
        "num_locations",
        "locations",
        "depot",
        "num_vehicles",
        "toolbox",
        "total_distance",
        "distances",
        "vehicle_route",
        "vehicle_distance",
        "balance_penalty",
        "vehicle_route",
        "pop",
        "hof",
        "stats"
    ],
    "comments": [
        "Required Libraries",
        "Task 1 - Defining the number of locations and vehicles",
        "total delivery locations excluding depot",
        "Creating a list of tuples representing location coordinates using random number generator",
        "Defining the coordinates for the depot",
        "Taking central point as depot",
        "Defining the number of vehicles available",
        "Genetic Algorithm Setup",
        "Defined fitness function to minimize. The two objectives are total distance and balance penalty.",
        "Defined individual structure. Individuals are lists with a fitness attribute.",
        "TASK 2 - Finishing setting up the individuals and population",
        "Function to generate a list of unique, randomly ordered location indices",
        "Function to create an individual as a shuffled list of location indices",
        "Function to create a population of individuals",
        "Fitness Function",
        "Tracking the distance traveled by each vehicle for balance calculation",
        "Splited the list of locations among vehicles, ensuring each starts and ends at the depot",
        "Calculated total distance traveled by this vehicle",
        "Used standard deviation of distances as a penalty for imbalance among vehicles",
        "Registered the evaluation function",
        "Registered the crossover function suitable for permutation-based representation",
        "Registered the mutation function to shuffle indices with a 5% chance per index",
        "Registered the selection function using tournament selection",
        "Mating Methods for sequence of indices",
        "https://deap.readthedocs.io/en/master/api/tools.html#deap.tools.cxPartialyMatched",
        "https://deap.readthedocs.io/en/master/api/tools.html#deap.tools.cxUniformPartialyMatched",
        "https://deap.readthedocs.io/en/master/api/tools.html#deap.tools.cxOrdered",
        "Mutation Methods for Sequences",
        "https://deap.readthedocs.io/en/master/api/tools.html#deap.tools.mutShuffleIndexes",
        "Plotting Function",
        "Plot locations as blue dots and the depot as a red square",
        "Draw routes for each vehicle",
        "HINT: Refer to the Maze Solver in terms of how to plot and display. OR refer Pyplot docs - https://matplotlib.org/stable/tutorials/pyplot.html",
        "Running the Genetic Algorithm",
        "Seed for reproducibility",
        "Generate initial population",
        "Hall of Fame to store the best individual",
        "Setup statistics to track",
        "Run the genetic algorithm",
        "Plot the best route found",
        "Additional Tasks for the Vehicle Routing Project (Optional but highly recommended)",
        "1. Parameter Tuning:",
        "Task: Vary parameters like population size, mutation rate, or tournament size. Analyze their impact on the results.",
        "Purpose: Learn the importance of parameter tuning in genetic algorithms and how it affects outcomes.",
        "2. Fitness Score Analysis Over Generations:",
        "Task: Plot the fitness score of the best individual over generations for different configurations.",
        "Purpose: Visualize and understand the convergence behavior of the algorithm under different settings.",
        "3. Solution Diversity Analysis:",
        "Task: Implement a method to measure and report the diversity of solutions in the population over time.",
        "Purpose: Explore the balance between exploration and exploitation in genetic algorithms."
    ],
    "docstrings": [],
    "functions": [
        "evalVRP",
        "plot_routes",
        "main"
    ],
    "classes": []
}