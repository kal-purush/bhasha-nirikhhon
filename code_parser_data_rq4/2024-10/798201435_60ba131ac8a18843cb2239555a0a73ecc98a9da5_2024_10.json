{
    "identifiers": [
        "bs4",
        "BeautifulSoup",
        "Tag",
        "re",
        "typing",
        "Optional",
        "re",
        "compile",
        "re",
        "I",
        "re",
        "compile",
        "re",
        "I",
        "clean_html",
        "clean_html",
        "isinstance",
        "clean_html",
        "BeautifulSoup",
        "clean_html",
        "extract_main_content",
        "soup",
        "main_content",
        "clean_element",
        "main_content",
        "super_clean_element",
        "soup",
        "BeautifulSoup",
        "Optional",
        "Tag",
        "element",
        "soup",
        "find_all",
        "priority_tags",
        "is_non_content_tag",
        "element",
        "has_negative_class_id",
        "element",
        "calculate_content_score",
        "element",
        "candidates",
        "append",
        "score",
        "element",
        "candidates",
        "candidates",
        "sort",
        "key",
        "x",
        "x",
        "reverse",
        "candidates",
        "best_element",
        "element",
        "Tag",
        "is_priority_tag",
        "element",
        "score",
        "has_positive_class_id",
        "element",
        "score",
        "has_negative_class_id",
        "element",
        "score",
        "is_high_text_density",
        "element",
        "score",
        "is_low_link_density",
        "element",
        "score",
        "has_sufficient_content",
        "element",
        "score",
        "has_headings",
        "element",
        "score",
        "calculate_dom_depth",
        "element",
        "score",
        "min",
        "dom_depth",
        "max_dom_depth",
        "score",
        "element",
        "Tag",
        "element",
        "name",
        "priority_tags",
        "element",
        "Tag",
        "element",
        "name",
        "non_content_tags",
        "element",
        "Tag",
        "join",
        "get_attr_str",
        "element",
        "get",
        "element",
        "get",
        "negative_patterns",
        "search",
        "class_id",
        "element",
        "Tag",
        "join",
        "get_attr_str",
        "element",
        "get",
        "element",
        "get",
        "positive_patterns",
        "search",
        "class_id",
        "staticmethod",
        "attr",
        "isinstance",
        "attr",
        "join",
        "attr",
        "isinstance",
        "attr",
        "attr",
        "element",
        "Tag",
        "calculate_text_density",
        "element",
        "text_density",
        "text_density_threshold",
        "element",
        "Tag",
        "len",
        "element",
        "get_text",
        "strip",
        "len",
        "element",
        "find_all",
        "tag_count",
        "text_length",
        "tag_count",
        "element",
        "Tag",
        "calculate_link_density",
        "element",
        "link_density",
        "link_density_threshold",
        "element",
        "Tag",
        "element",
        "get_text",
        "strip",
        "text",
        "join",
        "a",
        "get_text",
        "strip",
        "a",
        "element",
        "find_all",
        "len",
        "link_text",
        "len",
        "text",
        "text",
        "element",
        "Tag",
        "len",
        "element",
        "get_text",
        "strip",
        "split",
        "word_count",
        "min_word_count",
        "element",
        "Tag",
        "element",
        "current_element",
        "parent",
        "depth",
        "max_dom_depth",
        "depth",
        "current_element",
        "parent",
        "depth",
        "element",
        "Tag",
        "element",
        "find",
        "element",
        "Tag",
        "Tag",
        "tag",
        "element",
        "find_all",
        "tag",
        "decompose",
        "tag",
        "element",
        "find_all",
        "tag",
        "attrs",
        "attr",
        "attrs",
        "attr",
        "tag",
        "attrs",
        "attr",
        "element"
    ],
    "literals": [
        "r'nav|footer|header|sidebar|ads|comment'",
        "r'content|article|main|post'",
        "'article'",
        "'main'",
        "'section'",
        "'div'",
        "'nav'",
        "'footer'",
        "'header'",
        "'aside'",
        "''",
        "'html.parser'",
        "''",
        "''",
        "' '",
        "'class'",
        "'id'",
        "''",
        "' '",
        "'class'",
        "'id'",
        "''",
        "' '",
        "''",
        "' '",
        "'a'",
        "'h1'",
        "'h2'",
        "'h3'",
        "'script'",
        "'style'",
        "'aside'",
        "'style'",
        "'onclick'",
        "'onmouseover'",
        "'align'",
        "'bgcolor'"
    ],
    "variables": [
        "negative_patterns",
        "positive_patterns",
        "priority_tags",
        "non_content_tags",
        "text_density_threshold",
        "min_word_count",
        "link_density_threshold",
        "max_dom_depth",
        "soup",
        "main_content",
        "super_clean_element",
        "candidates",
        "score",
        "best_element",
        "score",
        "dom_depth",
        "class_id",
        "class_id",
        "text_density",
        "text_length",
        "tag_count",
        "tag_count",
        "link_density",
        "text",
        "link_text",
        "word_count",
        "depth",
        "current_element",
        "current_element",
        "attrs"
    ],
    "comments": [
        "Precompile regex patterns for performance",
        "Thresholds",
        "To prevent excessive DOM traversal",
        "Handle exceptions silently or log them as needed",
        "Sort candidates by score in descending order",
        "Select the element with the highest score",
        "Adjust weight as needed",
        "Prevent division by zero"
    ],
    "docstrings": [
        "\"\"\"\n        Main function that takes cleaned HTML and returns super cleaned HTML.\n\n        Args:\n            clean_html (str): The cleaned HTML content.\n\n        Returns:\n            str: The super cleaned HTML containing only the main content.\n        \"\"\"",
        "\"\"\"\n        Identifies and extracts the main content element from the HTML.\n\n        Args:\n            soup (BeautifulSoup): The parsed HTML soup.\n\n        Returns:\n            Optional[Tag]: The Tag object containing the main content, or None if not found.\n        \"\"\"",
        "\"\"\"\n        Calculates a score for an element based on various heuristics.\n\n        Args:\n            element (Tag): The HTML element to score.\n\n        Returns:\n            float: The content score of the element.\n        \"\"\"",
        "\"\"\"Checks if the element is a priority tag.\"\"\"",
        "\"\"\"Checks if the element is a non-content tag.\"\"\"",
        "\"\"\"Checks if the element has negative indicators in its class or id.\"\"\"",
        "\"\"\"Checks if the element has positive indicators in its class or id.\"\"\"",
        "\"\"\"Converts an attribute value to a string.\"\"\"",
        "\"\"\"Determines if the element has high text density.\"\"\"",
        "\"\"\"Calculates the text density of an element.\"\"\"",
        "\"\"\"Determines if the element has low link density.\"\"\"",
        "\"\"\"Calculates the link density of an element.\"\"\"",
        "\"\"\"Checks if the element has sufficient word count.\"\"\"",
        "\"\"\"Calculates the depth of an element in the DOM tree.\"\"\"",
        "\"\"\"Checks if the element contains heading tags.\"\"\"",
        "\"\"\"\n        Cleans the selected element by removing unnecessary attributes and nested non-content elements.\n\n        Args:\n            element (Tag): The HTML element to clean.\n\n        Returns:\n            Tag: The cleaned HTML element.\n        \"\"\""
    ],
    "functions": [
        "clean",
        "extract_main_content",
        "calculate_content_score",
        "is_priority_tag",
        "is_non_content_tag",
        "has_negative_class_id",
        "has_positive_class_id",
        "get_attr_str",
        "is_high_text_density",
        "calculate_text_density",
        "is_low_link_density",
        "calculate_link_density",
        "has_sufficient_content",
        "calculate_dom_depth",
        "has_headings",
        "clean_element"
    ],
    "classes": [
        "ContentCleaningStrategy"
    ]
}