{
    "identifiers": [
        "logging",
        "re",
        "importlib",
        "resources",
        "files",
        "databricks",
        "labs",
        "remorph",
        "resources",
        "databricks",
        "labs",
        "blueprint",
        "tui",
        "Prompts",
        "databricks",
        "sdk",
        "WorkspaceClient",
        "databricks",
        "labs",
        "remorph",
        "helpers",
        "db_sql",
        "logging",
        "getLogger",
        "sql_text",
        "re",
        "sub",
        "pattern",
        "sql_text",
        "flags",
        "re",
        "DOTALL",
        "parsed_sql_text",
        "sql_text",
        "sql_text",
        "sql_text",
        "index",
        "sql_text",
        "index",
        "strip",
        "split",
        "column_with_datatype",
        "column_with_datatype",
        "strip",
        "strip",
        "split",
        "table_name",
        "full_table_name",
        "files",
        "databricks",
        "labs",
        "remorph",
        "resources",
        "resources",
        "joinpath",
        "query_dir",
        "joinpath",
        "table_name",
        "read_text",
        "replace",
        "table_name",
        "full_table_name",
        "table_name",
        "full_table_name",
        "replace_patterns",
        "table_original_query",
        "table_name",
        "full_table_name",
        "extract_column_name",
        "main_table_column",
        "main_table_column",
        "extract_columns_with_datatype",
        "main_sql",
        "main_table_columns",
        "ws",
        "WorkspaceClient",
        "table_identifier",
        "db_sql",
        "get_sql_backend",
        "ws",
        "fetch",
        "table_identifier",
        "row",
        "col_name",
        "row",
        "main_table_columns",
        "installed_table",
        "current_table",
        "len",
        "installed_table",
        "len",
        "current_table",
        "sorted",
        "installed_table",
        "sorted",
        "current_table",
        "table_identifier",
        "installed_table",
        "current_table",
        "prompts",
        "Prompts",
        "table_identifier",
        "split",
        "table_identifier",
        "join",
        "current_table",
        "table_identifier",
        "current_table",
        "issubset",
        "installed_table",
        "prompts",
        "confirm",
        "table_identifier",
        "table_identifier",
        "table_original_query",
        "table_name",
        "table_identifier",
        "logger",
        "error",
        "table_identifier",
        "table_identifier",
        "sql"
    ],
    "literals": [
        "r'(STRUCT<[^<>]*?(?:<[^<>]*?>[^<>]*?)*>|MAP<[^<>]*?(?:<[^<>]*?>[^<>]*?)*>)'",
        "\"\"",
        "\"(\"",
        "\")\"",
        "\",\"",
        "\"\\n\"",
        "\" \"",
        "\"reconcile/queries/installation\"",
        "f\"{table_name}.sql\"",
        "f\"CREATE TABLE IF NOT EXISTS {table_name}\"",
        "f\"CREATE OR REPLACE TABLE {full_table_name}\"",
        "f\"DESC {table_identifier}\"",
        "'.'",
        "f\"CREATE OR REPLACE TABLE {table_identifier} AS SELECT {','.join(current_table)} FROM {table_identifier}\"",
        "','",
        "f\"The `{table_identifier}` table columns are not as expected. Do you want to recreate the `{table_identifier}` table?\"",
        "f\"The `{table_identifier}` table columns are not as expected. Please check and recreate the `{table_identifier}` table.\""
    ],
    "variables": [
        "logger",
        "pattern",
        "parsed_sql_text",
        "resources",
        "query_dir",
        "main_sql",
        "main_table_columns",
        "main_table_columns",
        "table_name",
        "sql",
        "sql",
        "sql"
    ],
    "comments": [
        "Pattern to match nested STRUCT and MAP datatypes",
        "Compare the current main table columns with the installed main table columns"
    ],
    "docstrings": [
        "\"\"\"\n    Replace the STRUCT and MAP datatypes in the SQL text with empty string\n    \"\"\"",
        "\"\"\"\n    Extract the columns with datatype from the SQL text\n    Example:\n        Input: CREATE TABLE main (\n            recon_table_id BIGINT NOT NULL,\n            report_type STRING NOT NULL\n            );\n       Output:  [recon_table_id BIGINT NOT NULL,\n                      report_type STRING NOT NULL]\n    \"\"\"",
        "\"\"\"\n    Extract the column name from the column with datatype.\n    Example:\n        Input: \\n    recon_table_id BIGINT NOT NULL,\n        Output: recon_table_id\n    \"\"\"",
        "\"\"\"\n    Get the main table DDL from the main.sql file\n    :return: str\n    \"\"\"",
        "\"\"\"\n    Extract the column names from the main table DDL\n    :return: column_names: list[str]\n    \"\"\"",
        "\"\"\"\n    Fetch the column names from the installed table on Databricks Workspace using SQL Backend\n    :return: column_names: list[str]\n    \"\"\"",
        "\"\"\"\n    * Verify all the current main table columns are present in the installed main table and then use CTAS to recreate the main table\n       * If any of the current main table columns are missing in the installed main table, prompt the user to recreate the main table:\n            - If the user confirms, recreate the main table using the main DDL file, else log an error message and exit\n    :param table_identifier:\n    :param installed_table:\n    :param current_table:\n    :param prompts:\n    :return:\n    \"\"\""
    ],
    "functions": [
        "replace_patterns",
        "extract_columns_with_datatype",
        "extract_column_name",
        "table_original_query",
        "current_table_columns",
        "installed_table_columns",
        "check_table_mismatch",
        "recreate_table_sql"
    ],
    "classes": []
}