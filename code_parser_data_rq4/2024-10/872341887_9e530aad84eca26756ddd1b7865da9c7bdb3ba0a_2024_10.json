{
    "identifiers": [
        "csv",
        "getopt",
        "os",
        "os",
        "path",
        "re",
        "sys",
        "subprocess",
        "sp",
        "difflib",
        "getopt",
        "gnu_getopt",
        "sys",
        "argv",
        "sOptions",
        "getopt",
        "GetoptError",
        "err",
        "err",
        "usage",
        "sys",
        "argv",
        "opt",
        "arg",
        "optList",
        "opt",
        "usage",
        "sys",
        "argv",
        "len",
        "remainArgs",
        "usage",
        "sys",
        "argv",
        "os",
        "getcwd",
        "os",
        "path",
        "abspath",
        "remainArgs",
        "remainArgs",
        "os",
        "path",
        "join",
        "sOrigPath",
        "remainArgs",
        "remainArgs",
        "sImpl",
        "setValidImpl",
        "sImpl",
        "sys",
        "exit",
        "os",
        "chdir",
        "sCodeDir",
        "os",
        "path",
        "isfile",
        "sExec",
        "sExec",
        "j",
        "sInLoopFile",
        "lsInFile",
        "os",
        "path",
        "join",
        "sOrigPath",
        "sInLoopFile",
        "os",
        "path",
        "splitext",
        "os",
        "path",
        "basename",
        "sInFile",
        "os",
        "path",
        "join",
        "sCodeDir",
        "sTestName",
        "sImpl",
        "os",
        "path",
        "splitext",
        "sInFile",
        "os",
        "path",
        "isfile",
        "sExpectedFile",
        "sExpectedFile",
        "format",
        "sExec",
        "sExec",
        "sImpl",
        "sImpl",
        "sDataFile",
        "sDataFile",
        "sInFile",
        "sInFile",
        "sOutputFile",
        "sOutputFile",
        "bVerbose",
        "sCommand",
        "sp",
        "Popen",
        "sCommand",
        "shell",
        "stderr",
        "sp",
        "PIPE",
        "proc",
        "communicate",
        "bVerbose",
        "len",
        "sStderr",
        "sStderr",
        "evaluate",
        "sExpectedFile",
        "sOutputFile",
        "bPassed",
        "passedNum",
        "lsTestPassed",
        "append",
        "sTestName",
        "failedNum",
        "lsTestFailed",
        "append",
        "sTestName",
        "bVerbose",
        "bFailedOutput",
        "line",
        "bFailedOutput",
        "line",
        "os",
        "chdir",
        "sOrigPath",
        "sExec",
        "passedNum",
        "len",
        "lsInFile",
        "join",
        "lsTestPassed",
        "join",
        "lsTestFailed",
        "sExpectedFile",
        "sOutputFile",
        "open",
        "sExpectedFile",
        "fExpected",
        "line",
        "fExpected",
        "len",
        "line",
        "strip",
        "expected_results",
        "append",
        "line",
        "strip",
        "lower",
        "open",
        "sOutputFile",
        "fOut",
        "line",
        "fOut",
        "len",
        "line",
        "strip",
        "output_results",
        "append",
        "line",
        "strip",
        "lower",
        "index",
        "line",
        "expected_results",
        "index",
        "len",
        "output_results",
        "test_failed_output",
        "append",
        "format",
        "index",
        "index",
        "expected",
        "line",
        "line",
        "output_results",
        "index",
        "test_failed_output",
        "append",
        "format",
        "index",
        "index",
        "expected",
        "line",
        "output",
        "output_results",
        "index",
        "test_passed",
        "test_failed_output",
        "sProg",
        "sProg",
        "sys",
        "exit",
        "main"
    ],
    "literals": [
        "\"v\"",
        "\"-v\"",
        "\"array\"",
        "\"linkedlist\"",
        "\"trie\"",
        "\" is not a valid implementation name.\"",
        "\"dictionary_file_based.py\"",
        "''",
        "\" does not exists in directory.\"",
        "\"-\"",
        "\".out\"",
        "\".exp\"",
        "\" is missing.\"",
        "'python {sExec} {sImpl} \"{sDataFile}\" \"{sInFile}\" \"{sOutputFile}\"'",
        "\"Testing: \"",
        "\"\\nWarnings and error messages from running python program:\\n\"",
        "\"\\nSUMMARY: \"",
        "\" has passed \"",
        "\" out of \"",
        "\" tests.\"",
        "\"PASSED: \"",
        "\", \"",
        "\"FAILED: \"",
        "\", \"",
        "\"\\n\"",
        "\"r\"",
        "\"r\"",
        "\"At line {index} expected : {expected} actual: End of File\"",
        "\"At line {index} expected : {expected} actual: {output}\"",
        "\" [-v] <code directory> <name of implementation to test> <input data file> <list of test command files>\"",
        "\"__main__\""
    ],
    "variables": [
        "sOptions",
        "optList",
        "remainArgs",
        "bVerbose",
        "bVerbose",
        "sOrigPath",
        "sCodeDir",
        "sImpl",
        "sDataFile",
        "lsInFile",
        "setValidImpl",
        "sExec",
        "passedNum",
        "failedNum",
        "lsTestPassed",
        "lsTestFailed",
        "sInFile",
        "sTestName",
        "sOutputFile",
        "sExpectedFile",
        "sCommand",
        "proc",
        "sStdout",
        "sStderr",
        "bPassed",
        "bFailedOutput",
        "test_passed",
        "test_failed_output",
        "expected_results",
        "output_results",
        "test_passed",
        "test_passed"
    ],
    "comments": [
        "",
        "Script to perform automated testing for Assignment 1 of Algorithms & Analysis class, 2022 Semester 2",
        "The script is designed to be ran",
        "",
        "The provided Python script will be the same one used to test your implementation. The script runs one of the three",
        "implementations then runs a series of test. Each test consists of sequence of operations to execute, whose results",
        "will be saved to file, then compared against the expected output.  If output from the tested implementation is the",
        "same as expected (script is tolerant for some formatting differences but if you don't change the IO functionality",
        "of the supplied files, you'll be fine), then you'll pass that test. Otherwise, difference will be printed (",
        "if in verbose mode, see below).",
        "",
        "Usage, assuming you are in the directory where the test script \"dictionary_test_script.py\" is located.",
        "",
        "> python dictionary_test_script.py [-v] <codeDirectory> <name of implementation to test> <data filename> <list of input files to test on>",
        "",
        "options:",
        "",
        "-v : verbose mode",
        "",
        "Input:",
        "",
        "code directory : directory where the python files reside.  E.g., if directory specified is Assign1-s1234,",
        "then Assign1-s1234/dictionary_file_based.py should exist.",
        "name of implementation to test: This is the name of the implementation to test.  The names",
        "should be the same as specified in the script or in dictionary_file_based.py. E.g.- \"list\", or \"hashtable\", or \"tst\"",
        "data filename: This is the input data file consists of a list of point information.",
        "NOTE- the script expects the data file to be in the same directory as the script.",
        "E.g. if the script is in the directory path /home/s1234/dictionary_test_script.py and",
        "the data file name is sampleData.txt then the code will search the data file as",
        "/home/s1234/sampleData.txt",
        "input files: these are the input command files, where each file is a list of commands to execute.",
        "NOTE- the script expects the input files to be in the same directory as the script (just like the data file).",
        "IMPORTANT, the expected output file must be in the same directory",
        "as the input files, and the should have the same basename - e.g., if we have input operation",
        "file of \"test1.in\", then we should have expected files \"test1.out\".",
        "",
        "",
        "As an example, I can run the code as follows when testing code directory \"Assign1-s1234\",",
        "the data file is named \"sampleData.txt\",",
        "all my input command and expected files are located in the same folder,",
        "and named \"test1.in\" and testing for \"list\" implementation:",
        "",
        "> python assign1TestScript.py -v   Assign1-s1234    list    sampleData.txt    test1.in",
        "",
        "Note that for each tests, the output will be stored within the code directory.  For example, above",
        "that would mean test1-list.out will be created in Assign1-s1234.",
        "",
        "",
        "",
        "@Son Hoang Dau, 2022",
        "",
        "process command line arguments",
        "option list",
        "get options",
        "code directory",
        "which implementation to test (see NearestNeighFileBased.java for the implementation strings)",
        "data file name",
        "set of input files that contains the operation commands",
        "check implementation",
        "python file to run",
        "variable to store the number of tests passed",
        "check if python file exists",
        "loop through each input test file",
        "check if expected files exist",
        "print(sCommand)",
        "compare expected with output",
        "print difference if failed",
        "change back to original path",
        "print out the mark",
        "if sImpl in [\"array\", \"linkedlist\"]:",
        "print(str(0.4 * passedNum) + \" marks\\n\\n\")",
        "if sImpl == \"trie\":",
        "print(str(passedNum) + \" marks\\n\\n\")",
        "",
        "Fetch expected results. Remove any empty lines",
        "Fetch output results. Remove any empty lines",
        "Check if EOF reached for output results"
    ],
    "docstrings": [
        "\"\"\"\n    Evaluate if the output is the same as expected input for the vertices operation.\n    \"\"\""
    ],
    "functions": [
        "main",
        "evaluate",
        "usage"
    ],
    "classes": []
}