{
    "identifiers": [
        "bumpVersion",
        "commitRelease",
        "createTag",
        "getConventionalBump",
        "getNewVersion",
        "stageFiles",
        "updateChangelog",
        "cliRootDir",
        "indent",
        "isCi",
        "releasePrefix",
        "logVerboseError",
        "logVerboseInfo",
        "parseOptionsFile",
        "preflightChecks",
        "doActionAndLog",
        "getFullPackageName",
        "isNullishOrEmpty",
        "blueBright",
        "cyan",
        "yellow",
        "Command",
        "readFile",
        "URL",
        "URL",
        "cliRootDir",
        "readFile",
        "packageFile",
        "Command",
        "packageJson",
        "isCi",
        "command",
        "process",
        "parseOptionsFile",
        "program",
        "logVerboseInfo",
        "indent",
        "options",
        "indent",
        "options",
        "indent",
        "options",
        "indent",
        "options",
        "indent",
        "options",
        "indent",
        "options",
        "indent",
        "options",
        "options",
        "preflightChecks",
        "options",
        "doActionAndLog",
        "getConventionalBump",
        "options",
        "isNullishOrEmpty",
        "reason",
        "isNullishOrEmpty",
        "releaseType",
        "logVerboseError",
        "getFullPackageName",
        "options",
        "options",
        "cyan",
        "yellow",
        "releasePrefix",
        "releaseType",
        "blueBright",
        "getFullPackageName",
        "options",
        "yellow",
        "reason",
        "options",
        "options",
        "bumpVersion",
        "options",
        "releaseType",
        "options",
        "getNewVersion",
        "options",
        "options",
        "getFullPackageName",
        "options",
        "newVersion",
        "newVersion",
        "updateChangelog",
        "options",
        "tag",
        "stageFiles",
        "commitRelease",
        "options",
        "newVersion",
        "createTag",
        "tag"
    ],
    "literals": [
        "'#commands/bump-version'",
        "'#commands/commit-release'",
        "'#commands/create-tag'",
        "'#commands/get-conventional-bump'",
        "'#commands/get-new-version'",
        "'#commands/stage-files'",
        "'#commands/update-changelog'",
        "'#lib/constants'",
        "'#lib/logger'",
        "'#lib/optionsParser'",
        "'#lib/preflight-checks'",
        "'#lib/utils'",
        "'@sapphire/utilities'",
        "'colorette'",
        "'commander'",
        "'node:fs/promises'",
        "'node:url'",
        "'package.json'",
        "'utf-8'",
        "'-n, --name <string>'",
        "'The package name to release'",
        "'-p, --package-path <string>'",
        "'The path to the current package. For non-monorepos this is just \".\"'",
        "'-b, --bump [boolean]'",
        "'Whether the package should be bumped or not'",
        "'--first-release [boolean]'",
        "'Whether this is the first release (skips bumping the version)'",
        "'-o, --org <string>'",
        "'The NPM org scope that should be used WITHOUT \"@\" sign or trailing \"/\"'",
        "''",
        "'--preid [string]'",
        "'The \"prerelease identifier\" to use as a prefix for the \"prerelease\" part of a semver'",
        "''",
        "'-t, --skip-tag [boolean]'",
        "'Whether to skip creating a git tag (default `true` when CI=true, `false` otherwise)'",
        "'-v, --verbose'",
        "'Whether to print verbose information'",
        "'Resolved options: '",
        "${indent}name: ${JSON.stringify(options.name)}",
        "${indent}package path: ${JSON.stringify(options.packagePath)}",
        "${indent}bump: ${JSON.stringify(options.bump)}",
        "${indent}npm org: ${JSON.stringify(options.org)}",
        "${indent}preid: ${JSON.stringify(options.preid)}",
        "${indent}skip tag: ${JSON.stringify(options.skipTag)}",
        "${indent}verbose: ${JSON.stringify(options.verbose)}",
        "''",
        "'Retrieving the strategy to use for bumping the package'",
        "No recommended bump level found for ${getFullPackageName(options)}",
        "ℹ️ Bumping the ${yellow(`${releasePrefix}${releaseType}`)} version of ${blueBright(getFullPackageName(options))}: ${yellow(reason!)}",
        "${releasePrefix}${releaseType}",
        "${getFullPackageName(options)}@${newVersion}",
        "v${newVersion}"
    ],
    "variables": [
        "packageFile",
        "packageJson",
        "command",
        "program",
        "options",
        "newVersion",
        "tag"
    ],
    "comments": [
        ""
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}