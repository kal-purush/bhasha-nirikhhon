{
    "identifiers": [
        "data",
        "target",
        "train_size",
        "sampling",
        "sample_estimator",
        "categorical_features",
        "categorical_imputation",
        "ordinal_features",
        "high_cardinality_features",
        "high_cardinality_method",
        "numeric_features",
        "numeric_imputation",
        "date_features",
        "ignore_features",
        "normalize",
        "normalize_method",
        "transformation",
        "transformation_method",
        "handle_unknown_categorical",
        "unknown_categorical_method",
        "pca",
        "pca_method",
        "pca_components",
        "ignore_low_variance",
        "combine_rare_levels",
        "rare_level_threshold",
        "bin_numeric_features",
        "remove_outliers",
        "outliers_threshold",
        "remove_multicollinearity",
        "multicollinearity_threshold",
        "create_clusters",
        "cluster_iter",
        "polynomial_features",
        "polynomial_degree",
        "trigonometry_features",
        "polynomial_threshold",
        "group_features",
        "group_names",
        "feature_selection",
        "feature_selection_threshold",
        "feature_interaction",
        "feature_ratio",
        "interaction_threshold",
        "session_id",
        "silent",
        "profile",
        "resample",
        "resample_method",
        "sys",
        "train_size",
        "sys",
        "exit",
        "sampling",
        "sys",
        "exit",
        "target",
        "data",
        "columns",
        "sys",
        "exit",
        "session_id",
        "session_id",
        "sys",
        "exit",
        "profile",
        "sys",
        "exit",
        "normalize",
        "sys",
        "exit",
        "transformation",
        "sys",
        "exit",
        "categorical_imputation",
        "allowed_categorical_imputation",
        "sys",
        "exit",
        "ordinal_features",
        "ordinal_features",
        "sys",
        "exit",
        "ordinal_features",
        "data",
        "columns",
        "data_cols",
        "drop",
        "target",
        "ordinal_features",
        "keys",
        "i",
        "ord_keys",
        "i",
        "data_cols",
        "sys",
        "exit",
        "k",
        "ord_keys",
        "data",
        "k",
        "nunique",
        "len",
        "ordinal_features",
        "get",
        "k",
        "sys",
        "exit",
        "i",
        "ord_keys",
        "ordinal_features",
        "get",
        "i",
        "data",
        "i",
        "unique",
        "astype",
        "j",
        "value_in_keys",
        "j",
        "value_in_data",
        "i",
        "j",
        "sys",
        "exit",
        "text",
        "high_cardinality_features",
        "high_cardinality_features",
        "sys",
        "exit",
        "high_cardinality_features",
        "data",
        "columns",
        "data_cols",
        "drop",
        "target",
        "i",
        "high_cardinality_features",
        "i",
        "data_cols",
        "sys",
        "exit",
        "high_cardinality_method",
        "high_cardinality_allowed_methods",
        "sys",
        "exit",
        "numeric_imputation",
        "allowed_numeric_imputation",
        "sys",
        "exit",
        "normalize_method",
        "allowed_normalize_method",
        "sys",
        "exit",
        "transformation_method",
        "allowed_transformation_method",
        "sys",
        "exit",
        "handle_unknown_categorical",
        "sys",
        "exit",
        "unknown_categorical_method",
        "unknown_categorical_method_available",
        "sys",
        "exit",
        "pca",
        "sys",
        "exit",
        "pca_method",
        "allowed_pca_methods",
        "sys",
        "exit",
        "pca",
        "pca_method",
        "pca_components",
        "pca_components",
        "sys",
        "exit",
        "pca",
        "pca_method",
        "pca_components",
        "pca_components",
        "len",
        "data",
        "columns",
        "sys",
        "exit",
        "pca",
        "pca_method",
        "pca_components",
        "pca_components",
        "pca_components",
        "len",
        "data",
        "columns",
        "sys",
        "exit",
        "ignore_low_variance",
        "sys",
        "exit",
        "combine_rare_levels",
        "sys",
        "exit",
        "rare_level_threshold",
        "sys",
        "exit",
        "bin_numeric_features",
        "data",
        "columns",
        "all_cols",
        "remove",
        "target",
        "i",
        "bin_numeric_features",
        "i",
        "all_cols",
        "sys",
        "exit",
        "remove_outliers",
        "sys",
        "exit",
        "outliers_threshold",
        "sys",
        "exit",
        "remove_multicollinearity",
        "sys",
        "exit",
        "multicollinearity_threshold",
        "sys",
        "exit",
        "create_clusters",
        "sys",
        "exit",
        "cluster_iter",
        "sys",
        "exit",
        "polynomial_features",
        "sys",
        "exit",
        "polynomial_degree",
        "sys",
        "exit",
        "trigonometry_features",
        "sys",
        "exit",
        "polynomial_threshold",
        "sys",
        "exit",
        "group_features",
        "group_features",
        "sys",
        "exit",
        "group_names",
        "group_names",
        "sys",
        "exit",
        "ignore_features",
        "target",
        "ignore_features",
        "sys",
        "exit",
        "feature_selection",
        "sys",
        "exit",
        "feature_selection_threshold",
        "sys",
        "exit",
        "feature_interaction",
        "sys",
        "exit",
        "feature_ratio",
        "sys",
        "exit",
        "interaction_threshold",
        "sys",
        "exit",
        "data",
        "columns",
        "all_cols",
        "remove",
        "target",
        "categorical_features",
        "i",
        "categorical_features",
        "i",
        "all_cols",
        "sys",
        "exit",
        "numeric_features",
        "i",
        "numeric_features",
        "i",
        "all_cols",
        "sys",
        "exit",
        "date_features",
        "i",
        "date_features",
        "i",
        "all_cols",
        "sys",
        "exit",
        "ignore_features",
        "i",
        "ignore_features",
        "i",
        "all_cols",
        "sys",
        "exit",
        "silent",
        "sys",
        "exit",
        "resample",
        "resample_method",
        "resampling_method_available",
        "sys",
        "exit",
        "pandas",
        "pd",
        "ipywidgets",
        "ipw",
        "IPython",
        "display",
        "display",
        "clear_output",
        "update_display",
        "datetime",
        "time",
        "pd",
        "set_option",
        "pd",
        "set_option",
        "sampling",
        "ipw",
        "IntProgress",
        "value",
        "min",
        "max",
        "max_steps",
        "step",
        "description",
        "display",
        "progress",
        "datetime",
        "datetime",
        "now",
        "strftime",
        "pd",
        "DataFrame",
        "timestampStr",
        "columns",
        "set_index",
        "display",
        "monitor",
        "display_id",
        "numpy",
        "np",
        "sklearn",
        "linear_model",
        "LogisticRegression",
        "sklearn",
        "model_selection",
        "train_test_split",
        "sklearn",
        "metrics",
        "random",
        "plotly",
        "express",
        "px",
        "s",
        "s",
        "v",
        "v",
        "is_max",
        "cufflinks",
        "cf",
        "cf",
        "go_offline",
        "cf",
        "set_config_file",
        "offline",
        "world_readable",
        "warnings",
        "warnings",
        "filterwarnings",
        "isinstance",
        "data",
        "pd",
        "DataFrame",
        "data",
        "replace",
        "np",
        "inf",
        "np",
        "inf",
        "np",
        "nan",
        "inplace",
        "data",
        "copy",
        "X",
        "y",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "seed",
        "prep_pipe",
        "experiment__",
        "session_id",
        "random",
        "randint",
        "session_id",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "categorical_features",
        "categorical_features",
        "numeric_features",
        "numeric_features",
        "ignore_features",
        "ignore_features",
        "date_features",
        "date_features",
        "categorical_imputation",
        "categorical_imputation",
        "categorical_imputation",
        "transformation_method",
        "transformation_method",
        "pca_method",
        "pca_method",
        "pca_method",
        "pca_method",
        "pca",
        "pca_components",
        "pca_method",
        "len",
        "data",
        "columns",
        "pca_components",
        "bin_numeric_features",
        "bin_numeric_features",
        "trigonometry_features",
        "group_features",
        "apply_grouping_pass",
        "group_features",
        "group_features_pass",
        "append",
        "group_features",
        "group_features",
        "apply_grouping_pass",
        "group_names",
        "len",
        "group_names",
        "len",
        "group_features_pass",
        "np",
        "arange",
        "len",
        "group_features_pass",
        "i",
        "i",
        "group_names_pass",
        "group_names",
        "feature_interaction",
        "feature_ratio",
        "feature_interaction",
        "interactions_to_apply_pass",
        "append",
        "feature_ratio",
        "interactions_to_apply_pass",
        "append",
        "unknown_categorical_method",
        "unknown_categorical_method",
        "ordinal_features",
        "apply_ordinal_encoding_pass",
        "ordinal_features",
        "high_cardinality_features",
        "high_cardinality_method",
        "high_cardinality_method",
        "apply_cardinality_reduction_pass",
        "high_cardinality_features",
        "silent",
        "MLFlow_Preprocess",
        "preprocess",
        "preprocess",
        "Preprocess_Path_One",
        "train_data",
        "data",
        "target_variable",
        "target",
        "categorical_features",
        "cat_features_pass",
        "apply_ordinal_encoding",
        "apply_ordinal_encoding_pass",
        "ordinal_columns_and_categories",
        "ordinal_columns_and_categories_pass",
        "apply_cardinality_reduction",
        "apply_cardinality_reduction_pass",
        "cardinal_method",
        "cardinal_method_pass",
        "cardinal_features",
        "cardinal_features_pass",
        "numerical_features",
        "numeric_features_pass",
        "time_features",
        "date_features_pass",
        "features_todrop",
        "ignore_features_pass",
        "numeric_imputation_strategy",
        "numeric_imputation",
        "categorical_imputation_strategy",
        "categorical_imputation_pass",
        "scale_data",
        "normalize",
        "scaling_method",
        "normalize_method",
        "Power_transform_data",
        "transformation",
        "Power_transform_method",
        "trans_method_pass",
        "apply_untrained_levels_treatment",
        "handle_unknown_categorical",
        "untrained_levels_treatment_method",
        "unknown_categorical_method_pass",
        "apply_pca",
        "pca",
        "pca_method",
        "pca_method_pass",
        "pca_variance_retained_or_number_of_components",
        "pca_components_pass",
        "apply_zero_nearZero_variance",
        "ignore_low_variance",
        "club_rare_levels",
        "combine_rare_levels",
        "rara_level_threshold_percentage",
        "rare_level_threshold",
        "apply_binning",
        "apply_binning_pass",
        "features_to_binn",
        "features_to_bin_pass",
        "remove_outliers",
        "remove_outliers",
        "outlier_contamination_percentage",
        "outliers_threshold",
        "outlier_methods",
        "remove_multicollinearity",
        "remove_multicollinearity",
        "maximum_correlation_between_features",
        "multicollinearity_threshold",
        "remove_perfect_collinearity",
        "cluster_entire_data",
        "create_clusters",
        "range_of_clusters_to_try",
        "cluster_iter",
        "apply_polynomial_trigonometry_features",
        "polynomial_features",
        "max_polynomial",
        "polynomial_degree",
        "trigonometry_calculations",
        "trigonometry_features_pass",
        "top_poly_trig_features_to_select_percentage",
        "polynomial_threshold",
        "apply_grouping",
        "apply_grouping_pass",
        "features_to_group_ListofList",
        "group_features_pass",
        "group_name",
        "group_names_pass",
        "apply_feature_selection",
        "feature_selection",
        "feature_selection_top_features_percentage",
        "feature_selection_threshold",
        "apply_feature_interactions",
        "apply_feature_interactions_pass",
        "feature_interactions_to_apply",
        "interactions_to_apply_pass",
        "feature_interactions_top_features_to_select_percentage",
        "interaction_threshold",
        "display_types",
        "display_dtypes_pass",
        "target_transformation",
        "random_state",
        "seed",
        "progress",
        "value",
        "hasattr",
        "preprocess",
        "dtypes",
        "preprocess",
        "dtypes",
        "replacement",
        "label_encoded",
        "replace",
        "label_encoded",
        "replace",
        "label_encoded",
        "replace",
        "preprocess",
        "dtypes",
        "response",
        "res",
        "res_type",
        "sys",
        "exit",
        "preprocess",
        "pipe",
        "data_before_preprocess",
        "isna",
        "sum",
        "sum",
        "missing_values",
        "normalize",
        "normalize_method",
        "transformation",
        "transformation_method",
        "pca",
        "pca_method",
        "pca",
        "pca_components_pass",
        "combine_rare_levels",
        "rare_level_threshold",
        "bin_numeric_features",
        "remove_outliers",
        "outliers_threshold",
        "remove_multicollinearity",
        "multicollinearity_threshold",
        "create_clusters",
        "cluster_iter",
        "polynomial_features",
        "polynomial_degree",
        "polynomial_features",
        "trigonometry_features",
        "polynomial_threshold",
        "feature_selection",
        "feature_selection_threshold",
        "feature_interaction",
        "feature_ratio",
        "interaction_threshold",
        "ordinal_features",
        "handle_unknown_categorical",
        "unknown_categorical_method",
        "group_features",
        "high_cardinality_features",
        "high_cardinality_features_grid",
        "high_cardinality_method",
        "preprocess",
        "dtypes",
        "learent_dtypes",
        "learned_types",
        "drop",
        "target",
        "inplace",
        "i",
        "preprocess",
        "dtypes",
        "learent_dtypes",
        "i",
        "float_type",
        "i",
        "cat_type",
        "i",
        "float_type",
        "pd",
        "reset_option",
        "pd",
        "reset_option",
        "sample_estimator",
        "LogisticRegression",
        "sample_estimator",
        "model",
        "split",
        "model_name",
        "data",
        "drop",
        "target",
        "axis",
        "data",
        "target",
        "y",
        "value_counts",
        "count",
        "progress",
        "value",
        "sampling",
        "data",
        "shape",
        "i",
        "split_perc",
        "progress",
        "value",
        "time",
        "time",
        "split_perc_text",
        "counter",
        "monitor",
        "iloc",
        "perc_text",
        "update_display",
        "monitor",
        "display_id",
        "train_test_split",
        "X",
        "y",
        "test_size",
        "i",
        "stratify",
        "y",
        "random_state",
        "seed",
        "train_test_split",
        "X_",
        "y_",
        "test_size",
        "stratify",
        "y_",
        "random_state",
        "seed",
        "model",
        "fit",
        "X_train",
        "y_train",
        "model",
        "predict",
        "X_test",
        "model",
        "predict_proba",
        "X_test",
        "metrics",
        "accuracy_score",
        "y_test",
        "pred_",
        "metric_results",
        "append",
        "acc",
        "metric_name",
        "append",
        "split_percent",
        "append",
        "i",
        "y",
        "value_counts",
        "count",
        "metrics",
        "roc_auc_score",
        "y_test",
        "pred_prob",
        "metric_results",
        "append",
        "auc",
        "metric_name",
        "append",
        "split_percent",
        "append",
        "i",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "y_test",
        "pred_",
        "average",
        "metric_results",
        "append",
        "recall",
        "metric_name",
        "append",
        "split_percent",
        "append",
        "i",
        "metrics",
        "recall_score",
        "y_test",
        "pred_",
        "metric_results",
        "append",
        "recall",
        "metric_name",
        "append",
        "split_percent",
        "append",
        "i",
        "y",
        "value_counts",
        "count",
        "metrics",
        "precision_score",
        "y_test",
        "pred_",
        "average",
        "metric_results",
        "append",
        "precision",
        "metric_name",
        "append",
        "split_percent",
        "append",
        "i",
        "metrics",
        "precision_score",
        "y_test",
        "pred_",
        "metric_results",
        "append",
        "precision",
        "metric_name",
        "append",
        "split_percent",
        "append",
        "i",
        "y",
        "value_counts",
        "count",
        "metrics",
        "f1_score",
        "y_test",
        "pred_",
        "average",
        "metric_results",
        "append",
        "f1",
        "metric_name",
        "append",
        "split_percent",
        "append",
        "i",
        "metrics",
        "precision_score",
        "y_test",
        "pred_",
        "metric_results",
        "append",
        "f1",
        "metric_name",
        "append",
        "split_percent",
        "append",
        "i",
        "metrics",
        "cohen_kappa_score",
        "y_test",
        "pred_",
        "metric_results",
        "append",
        "kappa",
        "metric_name",
        "append",
        "split_percent",
        "append",
        "i",
        "time",
        "time",
        "t1",
        "t0",
        "tt",
        "i",
        "split_perc_tt",
        "pop",
        "remain",
        "split_perc_tt",
        "total_tt",
        "remain",
        "split_perc_tt_total",
        "append",
        "ss",
        "sum",
        "split_perc_tt_total",
        "np",
        "around",
        "ttt",
        "ttt",
        "np",
        "around",
        "ttt",
        "ttt",
        "ttt",
        "ttt",
        "monitor",
        "iloc",
        "ETC",
        "update_display",
        "monitor",
        "display_id",
        "counter",
        "pd",
        "DataFrame",
        "split_percent",
        "metric_results",
        "metric_name",
        "px",
        "line",
        "model_results",
        "x",
        "y",
        "color",
        "line_shape",
        "range_y",
        "fig",
        "update_layout",
        "plot_bgcolor",
        "model_name",
        "fig",
        "update_layout",
        "title",
        "title",
        "fig",
        "show",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "input",
        "sample_size",
        "sample_size",
        "train_test_split",
        "X",
        "y",
        "test_size",
        "train_size",
        "stratify",
        "y",
        "random_state",
        "seed",
        "clear_output",
        "profile",
        "pd",
        "DataFrame",
        "seed",
        "target_type",
        "label_encoded",
        "data_before_preprocess",
        "shape",
        "missing_flag",
        "float_type",
        "cat_type",
        "ordinal_features_grid",
        "high_cardinality_features_grid",
        "high_cardinality_method_grid",
        "X_train",
        "shape",
        "X_test",
        "shape",
        "data_before_preprocess",
        "shape",
        "X_train",
        "shape",
        "X_test",
        "shape",
        "numeric_imputation",
        "categorical_imputation",
        "normalize",
        "normalize_grid",
        "transformation",
        "transformation_grid",
        "pca",
        "pca_method_grid",
        "pca_components_grid",
        "ignore_low_variance",
        "combine_rare_levels",
        "rare_level_threshold_grid",
        "numeric_bin_grid",
        "remove_outliers",
        "outliers_threshold_grid",
        "remove_multicollinearity",
        "multicollinearity_threshold_grid",
        "create_clusters",
        "cluster_iter_grid",
        "polynomial_features",
        "polynomial_degree_grid",
        "trigonometry_features",
        "polynomial_threshold_grid",
        "group_features_grid",
        "feature_selection",
        "feature_selection_threshold_grid",
        "feature_interaction",
        "feature_ratio",
        "interaction_threshold_grid",
        "columns",
        "functions",
        "style",
        "apply",
        "highlight_max",
        "display",
        "functions_",
        "profile",
        "pandas_profiling",
        "pandas_profiling",
        "ProfileReport",
        "data_before_preprocess",
        "clear_output",
        "display",
        "pf",
        "experiment__",
        "append",
        "functions",
        "experiment__",
        "append",
        "X",
        "experiment__",
        "append",
        "y",
        "experiment__",
        "append",
        "X_train",
        "experiment__",
        "append",
        "y_train",
        "experiment__",
        "append",
        "X_test",
        "experiment__",
        "append",
        "y_test",
        "experiment__",
        "append",
        "prep_pipe",
        "X",
        "y",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "seed",
        "prep_pipe",
        "experiment__",
        "sample_size",
        "train_test_split",
        "X",
        "y",
        "test_size",
        "sample_n",
        "stratify",
        "y",
        "random_state",
        "seed",
        "train_test_split",
        "X_selected",
        "y_selected",
        "test_size",
        "train_size",
        "stratify",
        "y_selected",
        "random_state",
        "seed",
        "clear_output",
        "clear_output",
        "profile",
        "pd",
        "DataFrame",
        "seed",
        "target_type",
        "label_encoded",
        "data_before_preprocess",
        "shape",
        "missing_flag",
        "float_type",
        "cat_type",
        "ordinal_features_grid",
        "high_cardinality_features_grid",
        "high_cardinality_method_grid",
        "X_train",
        "shape",
        "X_test",
        "shape",
        "data_before_preprocess",
        "shape",
        "X_train",
        "shape",
        "X_test",
        "shape",
        "numeric_imputation",
        "categorical_imputation",
        "normalize",
        "normalize_grid",
        "transformation",
        "transformation_grid",
        "pca",
        "pca_method_grid",
        "pca_components_grid",
        "ignore_low_variance",
        "combine_rare_levels",
        "rare_level_threshold_grid",
        "numeric_bin_grid",
        "remove_outliers",
        "outliers_threshold_grid",
        "remove_multicollinearity",
        "multicollinearity_threshold_grid",
        "create_clusters",
        "cluster_iter_grid",
        "polynomial_features",
        "polynomial_degree_grid",
        "trigonometry_features",
        "polynomial_threshold_grid",
        "group_features_grid",
        "feature_selection",
        "feature_selection_threshold_grid",
        "feature_interaction",
        "feature_ratio",
        "interaction_threshold_grid",
        "columns",
        "functions",
        "style",
        "apply",
        "highlight_max",
        "display",
        "functions_",
        "profile",
        "pandas_profiling",
        "pandas_profiling",
        "ProfileReport",
        "data_before_preprocess",
        "clear_output",
        "display",
        "pf",
        "experiment__",
        "append",
        "functions",
        "experiment__",
        "append",
        "X",
        "experiment__",
        "append",
        "y",
        "experiment__",
        "append",
        "X_train",
        "experiment__",
        "append",
        "y_train",
        "experiment__",
        "append",
        "X_test",
        "experiment__",
        "append",
        "y_test",
        "experiment__",
        "append",
        "prep_pipe",
        "X",
        "y",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "seed",
        "prep_pipe",
        "experiment__",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "train_test_split",
        "X",
        "y",
        "test_size",
        "train_size",
        "stratify",
        "y",
        "random_state",
        "seed",
        "progress",
        "value",
        "resample",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "preprocess",
        "ResamplerTransformer",
        "resample_method",
        "resampler",
        "fit",
        "X_train",
        "y_train",
        "resampler",
        "fit_transform",
        "X_train",
        "y_train",
        "pd",
        "DataFrame",
        "X_train_res",
        "columns",
        "X_train",
        "columns",
        "clear_output",
        "clear_output",
        "profile",
        "pd",
        "DataFrame",
        "seed",
        "target_type",
        "label_encoded",
        "data_before_preprocess",
        "shape",
        "missing_flag",
        "float_type",
        "cat_type",
        "ordinal_features_grid",
        "high_cardinality_features_grid",
        "high_cardinality_method_grid",
        "X_train",
        "shape",
        "X_test",
        "shape",
        "data_before_preprocess",
        "shape",
        "X_train",
        "shape",
        "X_test",
        "shape",
        "numeric_imputation",
        "categorical_imputation",
        "normalize",
        "normalize_grid",
        "transformation",
        "transformation_grid",
        "pca",
        "pca_method_grid",
        "pca_components_grid",
        "ignore_low_variance",
        "combine_rare_levels",
        "rare_level_threshold_grid",
        "numeric_bin_grid",
        "remove_outliers",
        "outliers_threshold_grid",
        "remove_multicollinearity",
        "multicollinearity_threshold_grid",
        "create_clusters",
        "cluster_iter_grid",
        "polynomial_features",
        "polynomial_degree_grid",
        "trigonometry_features",
        "polynomial_threshold_grid",
        "group_features_grid",
        "feature_selection",
        "feature_selection_threshold_grid",
        "feature_interaction",
        "feature_ratio",
        "interaction_threshold_grid",
        "resample",
        "resample_method",
        "columns",
        "functions",
        "style",
        "apply",
        "highlight_max",
        "display",
        "functions_",
        "profile",
        "pandas_profiling",
        "pandas_profiling",
        "ProfileReport",
        "data_before_preprocess",
        "clear_output",
        "display",
        "pf",
        "experiment__",
        "append",
        "functions",
        "experiment__",
        "append",
        "X",
        "experiment__",
        "append",
        "y",
        "experiment__",
        "append",
        "X_train",
        "experiment__",
        "append",
        "y_train",
        "experiment__",
        "append",
        "X_test",
        "experiment__",
        "append",
        "y_test",
        "experiment__",
        "append",
        "prep_pipe",
        "X",
        "y",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "seed",
        "prep_pipe",
        "experiment__",
        "estimator",
        "ensemble",
        "method",
        "fold",
        "round",
        "verbose",
        "kwargs",
        "sys",
        "estimator",
        "available_estimators",
        "sys",
        "exit",
        "ensemble",
        "sys",
        "exit",
        "ensemble",
        "method",
        "sys",
        "exit",
        "ensemble",
        "method",
        "sys",
        "exit",
        "ensemble",
        "method",
        "available_method",
        "sys",
        "exit",
        "fold",
        "sys",
        "exit",
        "round",
        "sys",
        "exit",
        "verbose",
        "sys",
        "exit",
        "method",
        "estimator",
        "boosting_not_supported",
        "sys",
        "exit",
        "pandas",
        "pd",
        "ipywidgets",
        "ipw",
        "IPython",
        "display",
        "display",
        "clear_output",
        "update_display",
        "datetime",
        "time",
        "ipw",
        "IntProgress",
        "value",
        "min",
        "max",
        "fold",
        "step",
        "description",
        "pd",
        "DataFrame",
        "columns",
        "display",
        "progress",
        "datetime",
        "datetime",
        "now",
        "strftime",
        "pd",
        "DataFrame",
        "timestampStr",
        "columns",
        "set_index",
        "display",
        "monitor",
        "display_id",
        "verbose",
        "display",
        "master_display",
        "display_id",
        "display_",
        "display_id",
        "warnings",
        "warnings",
        "filterwarnings",
        "X_train",
        "copy",
        "y_train",
        "copy",
        "data_X",
        "reset_index",
        "drop",
        "inplace",
        "data_y",
        "reset_index",
        "drop",
        "inplace",
        "numpy",
        "np",
        "sklearn",
        "metrics",
        "sklearn",
        "model_selection",
        "StratifiedKFold",
        "progress",
        "value",
        "StratifiedKFold",
        "fold",
        "random_state",
        "seed",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "estimator",
        "sklearn",
        "linear_model",
        "LogisticRegression",
        "LogisticRegression",
        "random_state",
        "seed",
        "kwargs",
        "estimator",
        "sklearn",
        "neighbors",
        "KNeighborsClassifier",
        "KNeighborsClassifier",
        "kwargs",
        "estimator",
        "sklearn",
        "naive_bayes",
        "GaussianNB",
        "GaussianNB",
        "kwargs",
        "estimator",
        "sklearn",
        "tree",
        "DecisionTreeClassifier",
        "DecisionTreeClassifier",
        "random_state",
        "seed",
        "kwargs",
        "estimator",
        "sklearn",
        "linear_model",
        "SGDClassifier",
        "SGDClassifier",
        "max_iter",
        "tol",
        "random_state",
        "seed",
        "kwargs",
        "estimator",
        "sklearn",
        "svm",
        "SVC",
        "SVC",
        "gamma",
        "C",
        "probability",
        "kernel",
        "random_state",
        "seed",
        "kwargs",
        "estimator",
        "sklearn",
        "gaussian_process",
        "GaussianProcessClassifier",
        "GaussianProcessClassifier",
        "random_state",
        "seed",
        "kwargs",
        "estimator",
        "sklearn",
        "neural_network",
        "MLPClassifier",
        "MLPClassifier",
        "max_iter",
        "random_state",
        "seed",
        "kwargs",
        "estimator",
        "sklearn",
        "linear_model",
        "RidgeClassifier",
        "RidgeClassifier",
        "random_state",
        "seed",
        "kwargs",
        "estimator",
        "sklearn",
        "ensemble",
        "RandomForestClassifier",
        "RandomForestClassifier",
        "n_estimators",
        "random_state",
        "seed",
        "kwargs",
        "estimator",
        "sklearn",
        "discriminant_analysis",
        "QuadraticDiscriminantAnalysis",
        "QuadraticDiscriminantAnalysis",
        "estimator",
        "sklearn",
        "ensemble",
        "AdaBoostClassifier",
        "AdaBoostClassifier",
        "random_state",
        "seed",
        "kwargs",
        "estimator",
        "sklearn",
        "ensemble",
        "GradientBoostingClassifier",
        "GradientBoostingClassifier",
        "random_state",
        "seed",
        "kwargs",
        "estimator",
        "sklearn",
        "discriminant_analysis",
        "LinearDiscriminantAnalysis",
        "LinearDiscriminantAnalysis",
        "estimator",
        "sklearn",
        "ensemble",
        "ExtraTreesClassifier",
        "ExtraTreesClassifier",
        "random_state",
        "seed",
        "kwargs",
        "estimator",
        "xgboost",
        "XGBClassifier",
        "XGBClassifier",
        "random_state",
        "seed",
        "n_jobs",
        "verbosity",
        "kwargs",
        "estimator",
        "lightgbm",
        "lgb",
        "lgb",
        "LGBMClassifier",
        "random_state",
        "seed",
        "kwargs",
        "estimator",
        "catboost",
        "CatBoostClassifier",
        "CatBoostClassifier",
        "random_state",
        "seed",
        "silent",
        "kwargs",
        "estimator",
        "model",
        "split",
        "progress",
        "value",
        "method",
        "sklearn",
        "ensemble",
        "BaggingClassifier",
        "BaggingClassifier",
        "model",
        "bootstrap",
        "n_estimators",
        "random_state",
        "seed",
        "method",
        "sklearn",
        "ensemble",
        "AdaBoostClassifier",
        "AdaBoostClassifier",
        "model",
        "n_estimators",
        "random_state",
        "seed",
        "y",
        "value_counts",
        "count",
        "sklearn",
        "multiclass",
        "OneVsRestClassifier",
        "OneVsRestClassifier",
        "model",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "train_i",
        "test_i",
        "kf",
        "split",
        "data_X",
        "data_y",
        "time",
        "time",
        "monitor",
        "iloc",
        "fold_num",
        "fold",
        "update_display",
        "monitor",
        "display_id",
        "data_X",
        "iloc",
        "train_i",
        "data_X",
        "iloc",
        "test_i",
        "data_y",
        "iloc",
        "train_i",
        "data_y",
        "iloc",
        "test_i",
        "hasattr",
        "model",
        "model",
        "fit",
        "Xtrain",
        "ytrain",
        "model",
        "predict_proba",
        "Xtest",
        "pred_prob",
        "model",
        "predict",
        "Xtest",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "roc_auc_score",
        "ytest",
        "pred_prob",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "pos_label",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "np",
        "append",
        "score_acc",
        "sca",
        "np",
        "append",
        "score_auc",
        "sc",
        "np",
        "append",
        "score_recall",
        "recall",
        "np",
        "append",
        "score_specificity",
        "specificity",
        "np",
        "append",
        "score_precision",
        "precision",
        "np",
        "append",
        "score_f1",
        "f1",
        "np",
        "append",
        "score_kappa",
        "kappa",
        "np",
        "append",
        "score_hosmer",
        "hosmer",
        "np",
        "append",
        "score_spiegel",
        "spiegel",
        "np",
        "append",
        "score_brier",
        "brier",
        "model",
        "fit",
        "Xtrain",
        "ytrain",
        "model",
        "predict",
        "Xtest",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "roc_auc_score",
        "ytest",
        "pred_prob",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "pos_label",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "np",
        "append",
        "score_acc",
        "sca",
        "np",
        "append",
        "score_auc",
        "sc",
        "np",
        "append",
        "score_recall",
        "recall",
        "np",
        "append",
        "score_specificity",
        "specificity",
        "np",
        "append",
        "score_precision",
        "precision",
        "np",
        "append",
        "score_f1",
        "f1",
        "np",
        "append",
        "score_kappa",
        "kappa",
        "np",
        "append",
        "score_hosmer",
        "hosmer",
        "np",
        "append",
        "score_spiegel",
        "spiegel",
        "np",
        "append",
        "score_brier",
        "brier",
        "progress",
        "value",
        "pd",
        "DataFrame",
        "sca",
        "sc",
        "recall",
        "specificity",
        "precision",
        "f1",
        "kappa",
        "hosmer",
        "spiegel",
        "brier",
        "round",
        "round",
        "pd",
        "concat",
        "master_display",
        "fold_results",
        "ignore_index",
        "time",
        "time",
        "t1",
        "t0",
        "fold",
        "fold_num",
        "np",
        "around",
        "tt",
        "tt",
        "np",
        "around",
        "tt",
        "tt",
        "tt",
        "tt",
        "monitor",
        "iloc",
        "ETC",
        "update_display",
        "monitor",
        "display_id",
        "fold_num",
        "verbose",
        "update_display",
        "master_display",
        "display_id",
        "display_id",
        "np",
        "mean",
        "score_acc",
        "np",
        "mean",
        "score_auc",
        "np",
        "mean",
        "score_recall",
        "np",
        "mean",
        "score_specificity",
        "np",
        "mean",
        "score_precision",
        "np",
        "mean",
        "score_f1",
        "np",
        "mean",
        "score_kappa",
        "np",
        "mean",
        "score_hosmer",
        "np",
        "mean",
        "score_spiegel",
        "np",
        "mean",
        "score_brier",
        "np",
        "std",
        "score_acc",
        "np",
        "std",
        "score_auc",
        "np",
        "std",
        "score_recall",
        "np",
        "std",
        "score_specificity",
        "np",
        "std",
        "score_precision",
        "np",
        "std",
        "score_f1",
        "np",
        "std",
        "score_kappa",
        "np",
        "std",
        "score_hosmer",
        "np",
        "std",
        "score_spiegel",
        "np",
        "std",
        "score_brier",
        "np",
        "append",
        "avgs_acc",
        "mean_acc",
        "np",
        "append",
        "avgs_acc",
        "std_acc",
        "np",
        "append",
        "avgs_auc",
        "mean_auc",
        "np",
        "append",
        "avgs_auc",
        "std_auc",
        "np",
        "append",
        "avgs_recall",
        "mean_recall",
        "np",
        "append",
        "avgs_recall",
        "std_recall",
        "np",
        "append",
        "avgs_specificity",
        "mean_specificity",
        "np",
        "append",
        "avgs_specificity",
        "std_specificity",
        "np",
        "append",
        "avgs_precision",
        "mean_precision",
        "np",
        "append",
        "avgs_precision",
        "std_precision",
        "np",
        "append",
        "avgs_f1",
        "mean_f1",
        "np",
        "append",
        "avgs_f1",
        "std_f1",
        "np",
        "append",
        "avgs_kappa",
        "mean_kappa",
        "np",
        "append",
        "avgs_kappa",
        "std_kappa",
        "np",
        "append",
        "avgs_hosmer",
        "mean_hosmer",
        "np",
        "append",
        "avgs_hosmer",
        "std_hosmer",
        "np",
        "append",
        "avgs_spiegel",
        "mean_spiegel",
        "np",
        "append",
        "avgs_spiegel",
        "std_spiegel",
        "np",
        "append",
        "avgs_brier",
        "mean_brier",
        "np",
        "append",
        "avgs_brier",
        "std_brier",
        "progress",
        "value",
        "pd",
        "DataFrame",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_specificity",
        "score_precision",
        "score_f1",
        "score_kappa",
        "score_hosmer",
        "score_spiegel",
        "score_brier",
        "pd",
        "DataFrame",
        "avgs_acc",
        "avgs_auc",
        "avgs_recall",
        "avgs_specificity",
        "avgs_precision",
        "avgs_f1",
        "avgs_kappa",
        "avgs_hosmer",
        "avgs_spiegel",
        "avgs_brier",
        "index",
        "model_results",
        "append",
        "model_avgs",
        "model_results",
        "round",
        "round",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "model",
        "fit",
        "data_X",
        "data_y",
        "progress",
        "value",
        "full_name",
        "model",
        "experiment__",
        "append",
        "tup",
        "full_name",
        "nam",
        "model_results",
        "experiment__",
        "append",
        "tup",
        "verbose",
        "clear_output",
        "display",
        "model_results",
        "model",
        "clear_output",
        "model",
        "estimator",
        "method",
        "fold",
        "n_estimators",
        "round",
        "verbose",
        "sys",
        "method",
        "available_method",
        "sys",
        "exit",
        "method",
        "sklearn",
        "ensemble",
        "AdaBoostClassifier",
        "hasattr",
        "estimator",
        "estimator",
        "n_classes_",
        "estimator",
        "estimator",
        "AdaBoostClassifier",
        "check_model",
        "n_estimators",
        "random_state",
        "seed",
        "sklearn",
        "multiclass",
        "OneVsRestClassifier",
        "OneVsRestClassifier",
        "check_model",
        "check_model",
        "fit",
        "X_train",
        "y_train",
        "AdaBoostClassifier",
        "estimator",
        "n_estimators",
        "random_state",
        "seed",
        "check_model",
        "fit",
        "X_train",
        "y_train",
        "sys",
        "exit",
        "fold",
        "sys",
        "exit",
        "n_estimators",
        "sys",
        "exit",
        "round",
        "sys",
        "exit",
        "verbose",
        "sys",
        "exit",
        "pandas",
        "pd",
        "datetime",
        "time",
        "ipywidgets",
        "ipw",
        "IPython",
        "display",
        "display",
        "clear_output",
        "update_display",
        "ipw",
        "IntProgress",
        "value",
        "min",
        "max",
        "fold",
        "step",
        "description",
        "pd",
        "DataFrame",
        "columns",
        "display",
        "progress",
        "datetime",
        "datetime",
        "now",
        "strftime",
        "pd",
        "DataFrame",
        "timestampStr",
        "columns",
        "set_index",
        "display",
        "monitor",
        "display_id",
        "verbose",
        "display",
        "master_display",
        "display_id",
        "display_",
        "display_id",
        "numpy",
        "np",
        "sklearn",
        "metrics",
        "sklearn",
        "model_selection",
        "StratifiedKFold",
        "warnings",
        "warnings",
        "filterwarnings",
        "X_train",
        "copy",
        "y_train",
        "copy",
        "data_X",
        "reset_index",
        "drop",
        "inplace",
        "data_y",
        "reset_index",
        "drop",
        "inplace",
        "progress",
        "value",
        "estimator",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "hasattr",
        "estimator",
        "estimator",
        "n_classes_",
        "estimator",
        "estimator",
        "method",
        "sklearn",
        "ensemble",
        "BaggingClassifier",
        "BaggingClassifier",
        "model",
        "bootstrap",
        "n_estimators",
        "n_estimators",
        "random_state",
        "seed",
        "sklearn",
        "ensemble",
        "AdaBoostClassifier",
        "AdaBoostClassifier",
        "model",
        "n_estimators",
        "n_estimators",
        "random_state",
        "seed",
        "y",
        "value_counts",
        "count",
        "sklearn",
        "multiclass",
        "OneVsRestClassifier",
        "OneVsRestClassifier",
        "model",
        "progress",
        "value",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "StratifiedKFold",
        "fold",
        "random_state",
        "seed",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "train_i",
        "test_i",
        "kf",
        "split",
        "data_X",
        "data_y",
        "time",
        "time",
        "monitor",
        "iloc",
        "fold_num",
        "fold",
        "update_display",
        "monitor",
        "display_id",
        "data_X",
        "iloc",
        "train_i",
        "data_X",
        "iloc",
        "test_i",
        "data_y",
        "iloc",
        "train_i",
        "data_y",
        "iloc",
        "test_i",
        "hasattr",
        "model",
        "model",
        "fit",
        "Xtrain",
        "ytrain",
        "model",
        "predict_proba",
        "Xtest",
        "pred_prob",
        "model",
        "predict",
        "Xtest",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "roc_auc_score",
        "ytest",
        "pred_prob",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "np",
        "append",
        "score_acc",
        "sca",
        "np",
        "append",
        "score_auc",
        "sc",
        "np",
        "append",
        "score_recall",
        "recall",
        "np",
        "append",
        "score_precision",
        "precision",
        "np",
        "append",
        "score_f1",
        "f1",
        "np",
        "append",
        "score_kappa",
        "kappa",
        "model",
        "fit",
        "Xtrain",
        "ytrain",
        "model",
        "predict",
        "Xtest",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "roc_auc_score",
        "ytest",
        "pred_prob",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "np",
        "append",
        "score_acc",
        "sca",
        "np",
        "append",
        "score_auc",
        "sc",
        "np",
        "append",
        "score_recall",
        "recall",
        "np",
        "append",
        "score_precision",
        "precision",
        "np",
        "append",
        "score_f1",
        "f1",
        "np",
        "append",
        "score_kappa",
        "kappa",
        "progress",
        "value",
        "pd",
        "DataFrame",
        "sca",
        "sc",
        "recall",
        "precision",
        "f1",
        "kappa",
        "round",
        "round",
        "pd",
        "concat",
        "master_display",
        "fold_results",
        "ignore_index",
        "time",
        "time",
        "t1",
        "t0",
        "fold",
        "fold_num",
        "np",
        "around",
        "tt",
        "tt",
        "np",
        "around",
        "tt",
        "tt",
        "tt",
        "tt",
        "update_display",
        "ETC",
        "display_id",
        "fold_num",
        "monitor",
        "iloc",
        "ETC",
        "update_display",
        "monitor",
        "display_id",
        "verbose",
        "update_display",
        "master_display",
        "display_id",
        "display_id",
        "np",
        "mean",
        "score_acc",
        "np",
        "mean",
        "score_auc",
        "np",
        "mean",
        "score_recall",
        "np",
        "mean",
        "score_precision",
        "np",
        "mean",
        "score_f1",
        "np",
        "mean",
        "score_kappa",
        "np",
        "std",
        "score_acc",
        "np",
        "std",
        "score_auc",
        "np",
        "std",
        "score_recall",
        "np",
        "std",
        "score_precision",
        "np",
        "std",
        "score_f1",
        "np",
        "std",
        "score_kappa",
        "np",
        "append",
        "avgs_acc",
        "mean_acc",
        "np",
        "append",
        "avgs_acc",
        "std_acc",
        "np",
        "append",
        "avgs_auc",
        "mean_auc",
        "np",
        "append",
        "avgs_auc",
        "std_auc",
        "np",
        "append",
        "avgs_recall",
        "mean_recall",
        "np",
        "append",
        "avgs_recall",
        "std_recall",
        "np",
        "append",
        "avgs_precision",
        "mean_precision",
        "np",
        "append",
        "avgs_precision",
        "std_precision",
        "np",
        "append",
        "avgs_f1",
        "mean_f1",
        "np",
        "append",
        "avgs_f1",
        "std_f1",
        "np",
        "append",
        "avgs_kappa",
        "mean_kappa",
        "np",
        "append",
        "avgs_kappa",
        "std_kappa",
        "pd",
        "DataFrame",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "pd",
        "melt",
        "model_results",
        "value_vars",
        "pd",
        "DataFrame",
        "avgs_acc",
        "avgs_auc",
        "avgs_recall",
        "avgs_precision",
        "avgs_f1",
        "avgs_kappa",
        "index",
        "model_results",
        "append",
        "model_avgs",
        "model_results",
        "round",
        "round",
        "progress",
        "value",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "model",
        "fit",
        "data_X",
        "data_y",
        "progress",
        "value",
        "model",
        "split",
        "model_name",
        "model",
        "experiment__",
        "append",
        "tup",
        "model_name",
        "nam",
        "model_results",
        "experiment__",
        "append",
        "tup",
        "verbose",
        "clear_output",
        "display",
        "model_results",
        "model",
        "clear_output",
        "model",
        "estimator",
        "plot",
        "sys",
        "plot",
        "available_plots",
        "sys",
        "exit",
        "y",
        "value_counts",
        "count",
        "plot",
        "multiclass_not_available",
        "sys",
        "exit",
        "estimator",
        "sys",
        "exit",
        "hasattr",
        "estimator",
        "plot",
        "sys",
        "exit",
        "hasattr",
        "estimator",
        "plot",
        "estimator",
        "max_features_",
        "X_train",
        "shape",
        "sys",
        "exit",
        "hasattr",
        "estimator",
        "hasattr",
        "estimator",
        "plot",
        "sys",
        "exit",
        "pandas",
        "pd",
        "matplotlib",
        "pyplot",
        "plt",
        "pd",
        "set_option",
        "plt",
        "rcParams",
        "plt",
        "style",
        "use",
        "plt",
        "rcParams",
        "plt",
        "rcParams",
        "plt",
        "rcParams",
        "plt",
        "rcParams",
        "plt",
        "rcParams",
        "plt",
        "rcParams",
        "plt",
        "rcParams",
        "plt",
        "rcParams",
        "plt",
        "rcParams",
        "plt",
        "rcParams",
        "plt",
        "rcParams",
        "ipywidgets",
        "ipw",
        "IPython",
        "display",
        "display",
        "clear_output",
        "ipw",
        "IntProgress",
        "value",
        "min",
        "max",
        "step",
        "description",
        "display",
        "progress",
        "warnings",
        "warnings",
        "filterwarnings",
        "matplotlib",
        "pyplot",
        "plt",
        "numpy",
        "np",
        "progress",
        "value",
        "estimator",
        "progress",
        "value",
        "plot",
        "yellowbrick",
        "classifier",
        "ROCAUC",
        "hasattr",
        "estimator",
        "progress",
        "value",
        "ROCAUC",
        "model",
        "visualizer",
        "fit",
        "X_train",
        "y_train",
        "progress",
        "value",
        "visualizer",
        "score",
        "X_test",
        "y_test",
        "progress",
        "value",
        "clear_output",
        "visualizer",
        "poof",
        "model",
        "decision_function",
        "X_test",
        "sklearn",
        "metrics",
        "metrics",
        "roc_curve",
        "y_test",
        "scores_dec_func",
        "metrics",
        "auc",
        "fpr",
        "tpr",
        "metrics",
        "auc",
        "fpr",
        "tpr",
        "model",
        "split",
        "plt",
        "plot",
        "fpr",
        "tpr",
        "label",
        "roc_auc",
        "plt",
        "legend",
        "loc",
        "plt",
        "title",
        "model_name",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "show",
        "plot",
        "yellowbrick",
        "classifier",
        "DiscriminationThreshold",
        "progress",
        "value",
        "DiscriminationThreshold",
        "model",
        "random_state",
        "seed",
        "visualizer",
        "fit",
        "X_train",
        "y_train",
        "progress",
        "value",
        "visualizer",
        "score",
        "X_test",
        "y_test",
        "progress",
        "value",
        "clear_output",
        "visualizer",
        "poof",
        "plot",
        "seaborn",
        "sns",
        "pandas",
        "pd",
        "sns",
        "pairplot",
        "pd",
        "concat",
        "X_train",
        "y_train",
        "axis",
        "hue",
        "y_train",
        "name",
        "diag_kind",
        "plot",
        "yellowbrick",
        "classifier",
        "PrecisionRecallCurve",
        "progress",
        "value",
        "PrecisionRecallCurve",
        "model",
        "random_state",
        "seed",
        "visualizer",
        "fit",
        "X_train",
        "y_train",
        "progress",
        "value",
        "visualizer",
        "score",
        "X_test",
        "y_test",
        "progress",
        "value",
        "clear_output",
        "visualizer",
        "poof",
        "plot",
        "yellowbrick",
        "classifier",
        "ConfusionMatrix",
        "progress",
        "value",
        "ConfusionMatrix",
        "model",
        "random_state",
        "seed",
        "fontsize",
        "cmap",
        "visualizer",
        "fit",
        "X_train",
        "y_train",
        "progress",
        "value",
        "visualizer",
        "score",
        "X_test",
        "y_test",
        "progress",
        "value",
        "clear_output",
        "visualizer",
        "poof",
        "plot",
        "yellowbrick",
        "classifier",
        "ClassPredictionError",
        "progress",
        "value",
        "ClassPredictionError",
        "model",
        "random_state",
        "seed",
        "visualizer",
        "fit",
        "X_train",
        "y_train",
        "progress",
        "value",
        "visualizer",
        "score",
        "X_test",
        "y_test",
        "progress",
        "value",
        "clear_output",
        "visualizer",
        "poof",
        "plot",
        "yellowbrick",
        "classifier",
        "ClassificationReport",
        "progress",
        "value",
        "ClassificationReport",
        "model",
        "random_state",
        "seed",
        "support",
        "visualizer",
        "fit",
        "X_train",
        "y_train",
        "progress",
        "value",
        "visualizer",
        "score",
        "X_test",
        "y_test",
        "progress",
        "value",
        "clear_output",
        "visualizer",
        "poof",
        "plot",
        "sklearn",
        "preprocessing",
        "StandardScaler",
        "sklearn",
        "decomposition",
        "PCA",
        "yellowbrick",
        "contrib",
        "classifier",
        "DecisionViz",
        "copy",
        "deepcopy",
        "deepcopy",
        "estimator",
        "progress",
        "value",
        "X_train",
        "copy",
        "X_test",
        "copy",
        "X_train_transformed",
        "select_dtypes",
        "include",
        "X_test_transformed",
        "select_dtypes",
        "include",
        "StandardScaler",
        "fit_transform",
        "X_train_transformed",
        "StandardScaler",
        "fit_transform",
        "X_test_transformed",
        "PCA",
        "n_components",
        "random_state",
        "seed",
        "pca",
        "fit_transform",
        "X_train_transformed",
        "pca",
        "fit_transform",
        "X_test_transformed",
        "progress",
        "value",
        "y_train",
        "copy",
        "y_test",
        "copy",
        "np",
        "array",
        "y_train_transformed",
        "np",
        "array",
        "y_test_transformed",
        "DecisionViz",
        "model2",
        "viz_",
        "fit",
        "X_train_transformed",
        "y_train_transformed",
        "features",
        "classes",
        "viz_",
        "draw",
        "X_test_transformed",
        "y_test_transformed",
        "progress",
        "value",
        "clear_output",
        "viz_",
        "poof",
        "plot",
        "yellowbrick",
        "model_selection",
        "RFECV",
        "progress",
        "value",
        "RFECV",
        "model",
        "cv",
        "progress",
        "value",
        "visualizer",
        "fit",
        "X_train",
        "y_train",
        "progress",
        "value",
        "clear_output",
        "visualizer",
        "poof",
        "plot",
        "yellowbrick",
        "model_selection",
        "LearningCurve",
        "progress",
        "value",
        "np",
        "linspace",
        "LearningCurve",
        "model",
        "cv",
        "train_sizes",
        "sizes",
        "n_jobs",
        "random_state",
        "seed",
        "progress",
        "value",
        "visualizer",
        "fit",
        "X_train",
        "y_train",
        "progress",
        "value",
        "clear_output",
        "visualizer",
        "poof",
        "plot",
        "yellowbrick",
        "features",
        "Manifold",
        "progress",
        "value",
        "X_train",
        "select_dtypes",
        "include",
        "Manifold",
        "manifold",
        "random_state",
        "seed",
        "progress",
        "value",
        "visualizer",
        "fit_transform",
        "X_train_transformed",
        "y_train",
        "progress",
        "value",
        "clear_output",
        "visualizer",
        "poof",
        "plot",
        "sklearn",
        "calibration",
        "calibration_curve",
        "model",
        "split",
        "plt",
        "figure",
        "figsize",
        "plt",
        "subplot2grid",
        "rowspan",
        "ax1",
        "plot",
        "label",
        "progress",
        "value",
        "model",
        "predict_proba",
        "X_test",
        "calibration_curve",
        "y_test",
        "prob_pos",
        "n_bins",
        "progress",
        "value",
        "ax1",
        "plot",
        "mean_predicted_value",
        "fraction_of_positives",
        "label",
        "model_name",
        "ax1",
        "set_ylabel",
        "ax1",
        "set_ylim",
        "ax1",
        "set_xlim",
        "ax1",
        "legend",
        "loc",
        "ax1",
        "set_title",
        "ax1",
        "grid",
        "b",
        "color",
        "linewidth",
        "linestyle",
        "plt",
        "tight_layout",
        "progress",
        "value",
        "clear_output",
        "plt",
        "show",
        "plot",
        "sklearn",
        "calibration",
        "calibration_curve",
        "model",
        "split",
        "plt",
        "figure",
        "figsize",
        "plt",
        "subplot2grid",
        "rowspan",
        "colspan",
        "plt",
        "subplot2grid",
        "colspan",
        "sharex",
        "ax1",
        "ax1",
        "plot",
        "label",
        "progress",
        "value",
        "model",
        "predict_proba",
        "X_test",
        "calibration_curve",
        "y_test",
        "prob_pos",
        "n_bins",
        "progress",
        "value",
        "ax1",
        "plot",
        "mean_predicted_value",
        "fraction_of_positives",
        "label",
        "model_name",
        "ax1",
        "set_ylabel",
        "ax1",
        "set_ylim",
        "ax1",
        "set_xlim",
        "ax1",
        "legend",
        "loc",
        "ax1",
        "set_title",
        "x_hist_axes",
        "hist",
        "prob_pos",
        "bins",
        "color",
        "plt",
        "setp",
        "x_hist_axes",
        "get_xticklabels",
        "visible",
        "x_hist_axes",
        "axis",
        "ax1",
        "grid",
        "b",
        "color",
        "linewidth",
        "linestyle",
        "plt",
        "tight_layout",
        "progress",
        "value",
        "clear_output",
        "plt",
        "show",
        "plot",
        "model",
        "predict_proba",
        "X_test",
        "accuracy_plot",
        "y_test",
        "y_pred_pos",
        "plot",
        "seaborn",
        "sns",
        "model",
        "predict_proba",
        "X_test",
        "model",
        "predict",
        "X_test",
        "progress",
        "value",
        "i",
        "p",
        "y_pred_pos",
        "y_test",
        "iloc",
        "i",
        "res_1",
        "append",
        "p",
        "res_0",
        "append",
        "p",
        "i",
        "res_0",
        "normalized_res_0",
        "append",
        "remap",
        "i",
        "progress",
        "value",
        "i",
        "res_1",
        "normalized_res_1",
        "append",
        "remap",
        "i",
        "sns",
        "distplot",
        "normalized_res_0",
        "hist",
        "kde_kws",
        "color",
        "label",
        "sns",
        "distplot",
        "normalized_res_1",
        "hist",
        "kde_kws",
        "color",
        "label",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "legend",
        "plt",
        "show",
        "plot",
        "model",
        "split",
        "model",
        "predict_proba",
        "X_test",
        "X_test",
        "shape",
        "k_tops",
        "model",
        "predict",
        "X_test",
        "pd",
        "DataFrame",
        "ytest_prob",
        "y_test_hat",
        "y_test",
        "values",
        "ravel",
        "np",
        "where",
        "y_k",
        "y_k",
        "y_k",
        "sort_values",
        "ascending",
        "display",
        "sorted_y",
        "head",
        "k_tops",
        "np",
        "sum",
        "y_test",
        "axis",
        "np",
        "sum",
        "sorted_y",
        "head",
        "k_tops",
        "axis",
        "total_ktops",
        "total_ktops",
        "np",
        "sum",
        "y_test",
        "axis",
        "perc",
        "progress",
        "value",
        "plot",
        "model",
        "split",
        "model_name",
        "np",
        "arange",
        "model_name",
        "sys",
        "exit",
        "hasattr",
        "model",
        "np",
        "arange",
        "hasattr",
        "model",
        "np",
        "arange",
        "hasattr",
        "model",
        "np",
        "arange",
        "hasattr",
        "model",
        "np",
        "arange",
        "hasattr",
        "model",
        "np",
        "arange",
        "hasattr",
        "model",
        "np",
        "arange",
        "hasattr",
        "model",
        "np",
        "arange",
        "hasattr",
        "model",
        "np",
        "arange",
        "hasattr",
        "model",
        "np",
        "arange",
        "clear_output",
        "sys",
        "exit",
        "progress",
        "value",
        "yellowbrick",
        "model_selection",
        "ValidationCurve",
        "ValidationCurve",
        "model",
        "param_name",
        "param_name",
        "param_range",
        "param_range",
        "cv",
        "random_state",
        "seed",
        "viz",
        "fit",
        "X_train",
        "y_train",
        "progress",
        "value",
        "clear_output",
        "viz",
        "poof",
        "plot",
        "yellowbrick",
        "features",
        "RadViz",
        "sklearn",
        "preprocessing",
        "StandardScaler",
        "sklearn",
        "decomposition",
        "PCA",
        "progress",
        "value",
        "X_train",
        "select_dtypes",
        "include",
        "StandardScaler",
        "fit_transform",
        "X_train_transformed",
        "np",
        "array",
        "y_train",
        "min",
        "round",
        "len",
        "X_train",
        "columns",
        "features",
        "PCA",
        "n_components",
        "features",
        "random_state",
        "seed",
        "pca",
        "fit_transform",
        "X_train_transformed",
        "progress",
        "value",
        "y_train",
        "unique",
        "tolist",
        "RadViz",
        "classes",
        "classes",
        "alpha",
        "visualizer",
        "fit",
        "X_train_transformed",
        "y_train_transformed",
        "visualizer",
        "transform",
        "X_train_transformed",
        "progress",
        "value",
        "clear_output",
        "visualizer",
        "poof",
        "plot",
        "hasattr",
        "estimator",
        "abs",
        "model",
        "coef_",
        "abs",
        "model",
        "feature_importances_",
        "np",
        "array",
        "X_train",
        "columns",
        "pd",
        "DataFrame",
        "X_train",
        "columns",
        "variables",
        "coef_df",
        "sort_values",
        "by",
        "sorted_df",
        "sort_values",
        "by",
        "ascending",
        "sorted_df",
        "head",
        "sorted_df",
        "sort_values",
        "by",
        "len",
        "sorted_df",
        "index",
        "progress",
        "value",
        "plt",
        "figure",
        "figsize",
        "plt",
        "hlines",
        "y",
        "my_range",
        "xmin",
        "xmax",
        "sorted_df",
        "color",
        "plt",
        "plot",
        "sorted_df",
        "my_range",
        "progress",
        "value",
        "plt",
        "yticks",
        "my_range",
        "sorted_df",
        "plt",
        "title",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "progress",
        "value",
        "clear_output",
        "plot",
        "clear_output",
        "pd",
        "DataFrame",
        "from_dict",
        "estimator",
        "get_params",
        "estimator",
        "orient",
        "columns",
        "display",
        "param_df",
        "plot",
        "clear_output",
        "interpret_model",
        "estimator",
        "blacklist",
        "fold",
        "round",
        "sort",
        "turbo",
        "sys",
        "blacklist",
        "i",
        "blacklist",
        "i",
        "available_estimators",
        "sys",
        "exit",
        "fold",
        "sys",
        "exit",
        "round",
        "sys",
        "exit",
        "sort",
        "allowed_sort",
        "sys",
        "exit",
        "y",
        "value_counts",
        "count",
        "sort",
        "sys",
        "exit",
        "pandas",
        "pd",
        "time",
        "datetime",
        "ipywidgets",
        "ipw",
        "IPython",
        "display",
        "display",
        "clear_output",
        "update_display",
        "blacklist",
        "len",
        "blacklist",
        "turbo",
        "len_of_blacklist",
        "len_of_blacklist",
        "ipw",
        "IntProgress",
        "value",
        "min",
        "max",
        "fold",
        "len_mod",
        "step",
        "description",
        "pd",
        "DataFrame",
        "columns",
        "display",
        "progress",
        "datetime",
        "datetime",
        "now",
        "strftime",
        "pd",
        "DataFrame",
        "timestampStr",
        "columns",
        "set_index",
        "display",
        "monitor",
        "display_id",
        "display",
        "master_display",
        "display_id",
        "display_",
        "display_id",
        "warnings",
        "warnings",
        "filterwarnings",
        "numpy",
        "np",
        "sklearn",
        "metrics",
        "sklearn",
        "model_selection",
        "StratifiedKFold",
        "X_train",
        "y_train",
        "progress",
        "value",
        "sklearn",
        "linear_model",
        "LogisticRegression",
        "sklearn",
        "neighbors",
        "KNeighborsClassifier",
        "sklearn",
        "naive_bayes",
        "GaussianNB",
        "sklearn",
        "tree",
        "DecisionTreeClassifier",
        "sklearn",
        "linear_model",
        "SGDClassifier",
        "sklearn",
        "svm",
        "SVC",
        "sklearn",
        "gaussian_process",
        "GaussianProcessClassifier",
        "sklearn",
        "neural_network",
        "MLPClassifier",
        "sklearn",
        "linear_model",
        "RidgeClassifier",
        "sklearn",
        "ensemble",
        "RandomForestClassifier",
        "sklearn",
        "discriminant_analysis",
        "QuadraticDiscriminantAnalysis",
        "sklearn",
        "ensemble",
        "AdaBoostClassifier",
        "sklearn",
        "ensemble",
        "GradientBoostingClassifier",
        "sklearn",
        "discriminant_analysis",
        "LinearDiscriminantAnalysis",
        "sklearn",
        "ensemble",
        "ExtraTreesClassifier",
        "sklearn",
        "multiclass",
        "OneVsRestClassifier",
        "xgboost",
        "XGBClassifier",
        "catboost",
        "CatBoostClassifier",
        "lightgbm",
        "lgb",
        "progress",
        "value",
        "sort",
        "sort",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "LogisticRegression",
        "random_state",
        "seed",
        "KNeighborsClassifier",
        "GaussianNB",
        "DecisionTreeClassifier",
        "random_state",
        "seed",
        "SGDClassifier",
        "max_iter",
        "tol",
        "random_state",
        "seed",
        "SVC",
        "gamma",
        "C",
        "probability",
        "kernel",
        "random_state",
        "seed",
        "GaussianProcessClassifier",
        "random_state",
        "seed",
        "MLPClassifier",
        "max_iter",
        "random_state",
        "seed",
        "RidgeClassifier",
        "random_state",
        "seed",
        "RandomForestClassifier",
        "n_estimators",
        "random_state",
        "seed",
        "QuadraticDiscriminantAnalysis",
        "AdaBoostClassifier",
        "random_state",
        "seed",
        "GradientBoostingClassifier",
        "random_state",
        "seed",
        "LinearDiscriminantAnalysis",
        "ExtraTreesClassifier",
        "random_state",
        "seed",
        "XGBClassifier",
        "random_state",
        "seed",
        "n_jobs",
        "verbosity",
        "lgb",
        "LGBMClassifier",
        "random_state",
        "seed",
        "CatBoostClassifier",
        "random_state",
        "seed",
        "silent",
        "progress",
        "value",
        "lr",
        "knn",
        "nb",
        "dt",
        "svm",
        "rbfsvm",
        "gpc",
        "mlp",
        "ridge",
        "rf",
        "qda",
        "ada",
        "gbc",
        "lda",
        "et",
        "xgboost",
        "lightgbm",
        "catboost",
        "blacklist",
        "turbo",
        "blacklist",
        "internal_blacklist",
        "compiled_blacklist",
        "blacklist",
        "i",
        "blacklist",
        "model_library_str_",
        "remove",
        "i",
        "i",
        "model_library_str_",
        "model_library_str",
        "index",
        "i",
        "si",
        "append",
        "s",
        "i",
        "si",
        "model_library_",
        "append",
        "model_library",
        "i",
        "model_names_",
        "append",
        "model_names",
        "i",
        "model_library_",
        "model_names_",
        "blacklist",
        "turbo",
        "lr",
        "knn",
        "nb",
        "dt",
        "svm",
        "ridge",
        "rf",
        "qda",
        "ada",
        "gbc",
        "lda",
        "et",
        "xgboost",
        "lightgbm",
        "catboost",
        "y",
        "value_counts",
        "count",
        "i",
        "model_library",
        "OneVsRestClassifier",
        "i",
        "model_library_multiclass",
        "append",
        "model",
        "model_library_multiclass",
        "progress",
        "value",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "StratifiedKFold",
        "fold",
        "random_state",
        "seed",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "model",
        "model_library",
        "progress",
        "value",
        "monitor",
        "iloc",
        "model_names",
        "name_counter",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "train_i",
        "test_i",
        "kf",
        "split",
        "data_X",
        "data_y",
        "progress",
        "value",
        "time",
        "time",
        "monitor",
        "iloc",
        "fold_num",
        "fold",
        "update_display",
        "monitor",
        "display_id",
        "data_X",
        "iloc",
        "train_i",
        "data_X",
        "iloc",
        "test_i",
        "data_y",
        "iloc",
        "train_i",
        "data_y",
        "iloc",
        "test_i",
        "hasattr",
        "model",
        "model",
        "fit",
        "Xtrain",
        "ytrain",
        "model",
        "predict_proba",
        "Xtest",
        "pred_prob",
        "model",
        "predict",
        "Xtest",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "roc_auc_score",
        "ytest",
        "pred_prob",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "pos_label",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "np",
        "append",
        "score_acc",
        "sca",
        "np",
        "append",
        "score_auc",
        "sc",
        "np",
        "append",
        "score_recall",
        "recall",
        "np",
        "append",
        "score_specificity",
        "specificity",
        "np",
        "append",
        "score_precision",
        "precision",
        "np",
        "append",
        "score_f1",
        "f1",
        "np",
        "append",
        "score_kappa",
        "kappa",
        "np",
        "append",
        "score_hosmer",
        "hosmer",
        "np",
        "append",
        "score_spiegel",
        "spiegel",
        "np",
        "append",
        "score_brier",
        "brier",
        "model",
        "fit",
        "Xtrain",
        "ytrain",
        "model",
        "decision_function",
        "Xtrain",
        "np",
        "exp",
        "d",
        "np",
        "sum",
        "np",
        "exp",
        "d",
        "model",
        "predict",
        "Xtest",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "model",
        "decision_function",
        "Xtest",
        "metrics",
        "roc_curve",
        "ytest",
        "scores_dec_func",
        "metrics",
        "auc",
        "fpr",
        "tpr",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "pos_label",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "np",
        "append",
        "score_acc",
        "sca",
        "np",
        "append",
        "score_auc",
        "sc",
        "np",
        "append",
        "score_recall",
        "recall",
        "np",
        "append",
        "score_specificity",
        "specificity",
        "np",
        "append",
        "score_precision",
        "precision",
        "np",
        "append",
        "score_f1",
        "f1",
        "np",
        "append",
        "score_kappa",
        "kappa",
        "np",
        "append",
        "score_hosmer",
        "hosmer",
        "np",
        "append",
        "score_spiegel",
        "spiegel",
        "np",
        "append",
        "score_brier",
        "brier",
        "time",
        "time",
        "t1",
        "t0",
        "fold",
        "fold_num",
        "np",
        "around",
        "tt",
        "tt",
        "np",
        "around",
        "tt",
        "tt",
        "tt",
        "tt",
        "fold_num",
        "monitor",
        "iloc",
        "ETC",
        "update_display",
        "monitor",
        "display_id",
        "np",
        "append",
        "avg_acc",
        "np",
        "mean",
        "score_acc",
        "np",
        "append",
        "avg_auc",
        "np",
        "mean",
        "score_auc",
        "np",
        "append",
        "avg_recall",
        "np",
        "mean",
        "score_recall",
        "np",
        "append",
        "avg_specificity",
        "np",
        "mean",
        "score_specificity",
        "np",
        "append",
        "avg_precision",
        "np",
        "mean",
        "score_precision",
        "np",
        "append",
        "avg_f1",
        "np",
        "mean",
        "score_f1",
        "np",
        "append",
        "avg_kappa",
        "np",
        "mean",
        "score_kappa",
        "np",
        "append",
        "avg_hosmer",
        "np",
        "mean",
        "score_hosmer",
        "np",
        "append",
        "avg_spiegel",
        "np",
        "mean",
        "score_spiegel",
        "np",
        "append",
        "avg_brier",
        "np",
        "mean",
        "score_brier",
        "pd",
        "DataFrame",
        "model_names",
        "name_counter",
        "avg_acc",
        "avg_auc",
        "avg_recall",
        "avg_specificity",
        "avg_precision",
        "avg_f1",
        "avg_kappa",
        "avg_hosmer",
        "avg_spiegel",
        "avg_brier",
        "pd",
        "concat",
        "master_display",
        "compare_models_",
        "ignore_index",
        "master_display",
        "round",
        "round",
        "master_display",
        "sort_values",
        "by",
        "sort",
        "ascending",
        "master_display",
        "reset_index",
        "drop",
        "inplace",
        "update_display",
        "master_display",
        "display_id",
        "display_id",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "name_counter",
        "progress",
        "value",
        "model_name",
        "master_display",
        "experiment__",
        "append",
        "tup",
        "s",
        "s",
        "s",
        "max",
        "v",
        "v",
        "is_max",
        "y",
        "value_counts",
        "count",
        "master_display",
        "style",
        "apply",
        "highlight_max",
        "subset",
        "master_display",
        "style",
        "apply",
        "highlight_max",
        "subset",
        "compare_models_",
        "set_properties",
        "compare_models_",
        "set_table_styles",
        "selector",
        "props",
        "progress",
        "value",
        "clear_output",
        "compare_models_",
        "estimator",
        "fold",
        "round",
        "n_iter",
        "optimize",
        "ensemble",
        "hyperopt",
        "method",
        "verbose",
        "kwargs",
        "sys",
        "estimator",
        "available_estimators",
        "sys",
        "exit",
        "ensemble",
        "sys",
        "exit",
        "ensemble",
        "method",
        "sys",
        "exit",
        "ensemble",
        "method",
        "sys",
        "exit",
        "ensemble",
        "method",
        "available_method",
        "sys",
        "exit",
        "fold",
        "sys",
        "exit",
        "round",
        "sys",
        "exit",
        "n_iter",
        "sys",
        "exit",
        "optimize",
        "allowed_optimize",
        "sys",
        "exit",
        "y",
        "value_counts",
        "count",
        "optimize",
        "sys",
        "exit",
        "n_iter",
        "sys",
        "exit",
        "verbose",
        "sys",
        "exit",
        "method",
        "estimator",
        "boosting_not_supported",
        "sys",
        "exit",
        "pandas",
        "pd",
        "time",
        "datetime",
        "ipywidgets",
        "ipw",
        "IPython",
        "display",
        "display",
        "clear_output",
        "update_display",
        "ipw",
        "IntProgress",
        "value",
        "min",
        "max",
        "fold",
        "step",
        "description",
        "y",
        "value_counts",
        "count",
        "pd",
        "DataFrame",
        "columns",
        "pd",
        "DataFrame",
        "columns",
        "display",
        "progress",
        "datetime",
        "datetime",
        "now",
        "strftime",
        "pd",
        "DataFrame",
        "timestampStr",
        "columns",
        "set_index",
        "display",
        "monitor",
        "display_id",
        "verbose",
        "display",
        "master_display",
        "display_id",
        "display_",
        "display_id",
        "warnings",
        "warnings",
        "filterwarnings",
        "warnings",
        "warnings",
        "filterwarnings",
        "X_train",
        "copy",
        "y_train",
        "copy",
        "data_X",
        "reset_index",
        "drop",
        "inplace",
        "data_y",
        "reset_index",
        "drop",
        "inplace",
        "progress",
        "value",
        "numpy",
        "np",
        "sklearn",
        "metrics",
        "sklearn",
        "model_selection",
        "StratifiedKFold",
        "sklearn",
        "model_selection",
        "RandomizedSearchCV",
        "hyperopt",
        "hp",
        "np",
        "random",
        "seed",
        "seed",
        "optimize",
        "optimize",
        "optimize",
        "y",
        "value_counts",
        "count",
        "metrics",
        "make_scorer",
        "metrics",
        "recall_score",
        "average",
        "optimize",
        "y",
        "value_counts",
        "count",
        "metrics",
        "make_scorer",
        "metrics",
        "precision_score",
        "average",
        "optimize",
        "y",
        "value_counts",
        "count",
        "metrics",
        "make_scorer",
        "metrics",
        "f1_score",
        "average",
        "optimize",
        "y",
        "value_counts",
        "count",
        "metrics",
        "make_scorer",
        "metrics",
        "average_precision_score",
        "average",
        "progress",
        "value",
        "StratifiedKFold",
        "fold",
        "random_state",
        "seed",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "estimator",
        "sklearn",
        "neighbors",
        "KNeighborsClassifier",
        "RandomizedSearchCV",
        "estimator",
        "KNeighborsClassifier",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "n_jobs",
        "iid",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "sklearn",
        "linear_model",
        "LogisticRegression",
        "np",
        "arange",
        "RandomizedSearchCV",
        "estimator",
        "LogisticRegression",
        "random_state",
        "seed",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "iid",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "sklearn",
        "tree",
        "DecisionTreeClassifier",
        "np",
        "random",
        "randint",
        "len",
        "X_train",
        "columns",
        "np",
        "random",
        "randint",
        "len",
        "X_train",
        "columns",
        "RandomizedSearchCV",
        "estimator",
        "DecisionTreeClassifier",
        "random_state",
        "seed",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "iid",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "sklearn",
        "neural_network",
        "MLPClassifier",
        "hyperopt",
        "hp",
        "choice",
        "hp",
        "choice",
        "hp",
        "choice",
        "np",
        "arange",
        "hp",
        "choice",
        "np",
        "arange",
        "hp",
        "choice",
        "np",
        "arange",
        "hp",
        "choice",
        "np",
        "arange",
        "hp",
        "choice",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "run_hyperopt_classification",
        "model_space",
        "X_train",
        "y_train",
        "scoring",
        "optimize",
        "max_evals",
        "n_iter",
        "cv",
        "cv",
        "seed",
        "seed",
        "verbose",
        "persistIterations",
        "MLPClassifier",
        "best",
        "random_state",
        "seed",
        "model",
        "best",
        "np",
        "arange",
        "RandomizedSearchCV",
        "estimator",
        "MLPClassifier",
        "max_iter",
        "random_state",
        "seed",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "iid",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "sklearn",
        "gaussian_process",
        "GaussianProcessClassifier",
        "RandomizedSearchCV",
        "estimator",
        "GaussianProcessClassifier",
        "random_state",
        "seed",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "sklearn",
        "svm",
        "SVC",
        "hyperopt",
        "hp",
        "choice",
        "hp",
        "choice",
        "hp",
        "choice",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "run_hyperopt_classification",
        "model_space",
        "X_train",
        "y_train",
        "scoring",
        "optimize",
        "max_evals",
        "n_iter",
        "cv",
        "cv",
        "verbose",
        "persistIterations",
        "SVC",
        "best",
        "probability",
        "random_state",
        "seed",
        "model",
        "best",
        "np",
        "arange",
        "RandomizedSearchCV",
        "estimator",
        "SVC",
        "gamma",
        "C",
        "probability",
        "kernel",
        "random_state",
        "seed",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "sklearn",
        "naive_bayes",
        "GaussianNB",
        "RandomizedSearchCV",
        "estimator",
        "GaussianNB",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "sklearn",
        "linear_model",
        "SGDClassifier",
        "hyperopt",
        "hp",
        "choice",
        "hp",
        "choice",
        "hp",
        "choice",
        "hp",
        "choice",
        "hp",
        "choice",
        "hp",
        "choice",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "run_hyperopt_classification",
        "model_space",
        "X_train",
        "y_train",
        "scoring",
        "optimize",
        "max_evals",
        "n_iter",
        "cv",
        "cv",
        "verbose",
        "persistIterations",
        "SGDClassifier",
        "best",
        "random_state",
        "seed",
        "model",
        "best",
        "np",
        "arange",
        "RandomizedSearchCV",
        "estimator",
        "SGDClassifier",
        "loss",
        "random_state",
        "seed",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "sklearn",
        "linear_model",
        "RidgeClassifier",
        "np",
        "arange",
        "RandomizedSearchCV",
        "estimator",
        "RidgeClassifier",
        "random_state",
        "seed",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "sklearn",
        "ensemble",
        "RandomForestClassifier",
        "hyperopt",
        "hp",
        "choice",
        "hp",
        "choice",
        "np",
        "linspace",
        "dtype",
        "hp",
        "choice",
        "hp",
        "choice",
        "np",
        "linspace",
        "dtype",
        "hp",
        "choice",
        "np",
        "arange",
        "hp",
        "choice",
        "np",
        "arange",
        "hp",
        "choice",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "run_hyperopt_classification",
        "model_space",
        "X_train",
        "y_train",
        "scoring",
        "optimize",
        "max_evals",
        "n_iter",
        "cv",
        "cv",
        "seed",
        "seed",
        "verbose",
        "persistIterations",
        "RandomForestClassifier",
        "best",
        "n_jobs",
        "random_state",
        "seed",
        "kwargs",
        "model",
        "best",
        "x",
        "x",
        "np",
        "linspace",
        "num",
        "RandomizedSearchCV",
        "estimator",
        "RandomForestClassifier",
        "random_state",
        "seed",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "sklearn",
        "ensemble",
        "AdaBoostClassifier",
        "np",
        "arange",
        "np",
        "arange",
        "RandomizedSearchCV",
        "estimator",
        "AdaBoostClassifier",
        "random_state",
        "seed",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "sklearn",
        "ensemble",
        "GradientBoostingClassifier",
        "np",
        "arange",
        "np",
        "arange",
        "np",
        "arange",
        "x",
        "x",
        "np",
        "linspace",
        "num",
        "RandomizedSearchCV",
        "estimator",
        "GradientBoostingClassifier",
        "random_state",
        "seed",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "sklearn",
        "discriminant_analysis",
        "QuadraticDiscriminantAnalysis",
        "np",
        "arange",
        "RandomizedSearchCV",
        "estimator",
        "QuadraticDiscriminantAnalysis",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "sklearn",
        "discriminant_analysis",
        "LinearDiscriminantAnalysis",
        "RandomizedSearchCV",
        "estimator",
        "LinearDiscriminantAnalysis",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "sklearn",
        "ensemble",
        "ExtraTreesClassifier",
        "np",
        "arange",
        "x",
        "x",
        "np",
        "linspace",
        "num",
        "RandomizedSearchCV",
        "estimator",
        "ExtraTreesClassifier",
        "random_state",
        "seed",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "xgboost",
        "XGBClassifier",
        "hyperopt",
        "hp",
        "choice",
        "hp",
        "choice",
        "np",
        "round",
        "np",
        "arange",
        "hp",
        "choice",
        "np",
        "round",
        "np",
        "arange",
        "hp",
        "choice",
        "np",
        "round",
        "np",
        "arange",
        "hp",
        "choice",
        "np",
        "arange",
        "hp",
        "choice",
        "np",
        "arange",
        "dtype",
        "hp",
        "quniform",
        "hp",
        "quniform",
        "hp",
        "quniform",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "run_hyperopt_classification",
        "model_space",
        "X_train",
        "y_train",
        "scoring",
        "optimize",
        "max_evals",
        "n_iter",
        "cv",
        "cv",
        "seed",
        "seed",
        "verbose",
        "persistIterations",
        "XGBClassifier",
        "best",
        "random_state",
        "seed",
        "n_jobs",
        "model",
        "best",
        "y",
        "value_counts",
        "count",
        "y",
        "value_counts",
        "count",
        "np",
        "arange",
        "np",
        "arange",
        "x",
        "x",
        "np",
        "linspace",
        "num",
        "num_class",
        "num_class",
        "np",
        "arange",
        "x",
        "x",
        "np",
        "linspace",
        "num",
        "RandomizedSearchCV",
        "estimator",
        "XGBClassifier",
        "random_state",
        "seed",
        "n_jobs",
        "verbosity",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "lightgbm",
        "lgb",
        "hyperopt",
        "hp",
        "choice",
        "hp",
        "choice",
        "np",
        "linspace",
        "dtype",
        "hp",
        "choice",
        "np",
        "arange",
        "dtype",
        "hp",
        "uniform",
        "hp",
        "uniform",
        "hp",
        "uniform",
        "hp",
        "choice",
        "np",
        "arange",
        "dtype",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "run_hyperopt_classification",
        "model_space",
        "X_train",
        "y_train",
        "scoring",
        "optimize",
        "max_evals",
        "n_iter",
        "cv",
        "cv",
        "seed",
        "seed",
        "verbose",
        "persistIterations",
        "lgb",
        "LGBMClassifier",
        "best",
        "n_jobs",
        "random_state",
        "seed",
        "model",
        "best",
        "x",
        "x",
        "np",
        "linspace",
        "num",
        "RandomizedSearchCV",
        "estimator",
        "lgb",
        "LGBMClassifier",
        "random_state",
        "seed",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "n_jobs",
        "RandomizedSearchCV",
        "estimator",
        "lgb",
        "LGBMClassifier",
        "random_state",
        "seed",
        "n_jobs",
        "verbosity",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "estimator",
        "catboost",
        "CatBoostClassifier",
        "hyperopt",
        "hyperopt",
        "hp",
        "choice",
        "np",
        "arange",
        "hp",
        "choice",
        "np",
        "arange",
        "hp",
        "uniform",
        "hp",
        "quniform",
        "hp",
        "choice",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "run_hyperopt_classification",
        "model_space",
        "X_train",
        "y_train",
        "scoring",
        "optimize",
        "max_evals",
        "n_iter",
        "cv",
        "cv",
        "seed",
        "seed",
        "verbose",
        "persistIterations",
        "CatBoostClassifier",
        "best",
        "random_state",
        "seed",
        "silent",
        "kwargs",
        "model",
        "best",
        "RandomizedSearchCV",
        "estimator",
        "CatBoostClassifier",
        "random_state",
        "seed",
        "silent",
        "kwargs",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "progress",
        "value",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "estimator",
        "ensemble",
        "method",
        "sklearn",
        "ensemble",
        "BaggingClassifier",
        "np",
        "arange",
        "np",
        "random",
        "randint",
        "len",
        "X_train",
        "columns",
        "RandomizedSearchCV",
        "estimator",
        "DecisionTreeClassifier",
        "random_state",
        "seed",
        "param_distributions",
        "param_grid_dt",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "iid",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "BaggingClassifier",
        "best_model",
        "random_state",
        "seed",
        "RandomizedSearchCV",
        "estimator",
        "best_model",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "iid",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "progress",
        "value",
        "ensemble",
        "method",
        "sklearn",
        "ensemble",
        "BaggingClassifier",
        "np",
        "arange",
        "BaggingClassifier",
        "best_model",
        "random_state",
        "seed",
        "RandomizedSearchCV",
        "estimator",
        "best_model",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "iid",
        "n_jobs",
        "model_grid",
        "fit",
        "X_train",
        "y_train",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_estimator_",
        "model_grid",
        "best_params_",
        "ensemble",
        "method",
        "sklearn",
        "ensemble",
        "AdaBoostClassifier",
        "np",
        "arange",
        "np",
        "arange",
        "AdaBoostClassifier",
        "best_model",
        "random_state",
        "seed",
        "RandomizedSearchCV",
        "estimator",
        "best_model",
        "param_distributions",
        "param_grid",
        "scoring",
        "optimize",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "random_state",
        "seed",
        "iid",
        "n_jobs",
        "progress",
        "value",
        "y",
        "value_counts",
        "count",
        "sklearn",
        "multiclass",
        "OneVsRestClassifier",
        "OneVsRestClassifier",
        "model",
        "model",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "train_i",
        "test_i",
        "kf",
        "split",
        "data_X",
        "data_y",
        "time",
        "time",
        "monitor",
        "iloc",
        "fold_num",
        "fold",
        "update_display",
        "monitor",
        "display_id",
        "data_X",
        "iloc",
        "train_i",
        "data_X",
        "iloc",
        "test_i",
        "data_y",
        "iloc",
        "train_i",
        "data_y",
        "iloc",
        "test_i",
        "hasattr",
        "model",
        "model",
        "fit",
        "Xtrain",
        "ytrain",
        "model",
        "predict_proba",
        "Xtest",
        "pred_prob",
        "model",
        "predict",
        "Xtest",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "roc_auc_score",
        "ytest",
        "pred_prob",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "pos_label",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "np",
        "append",
        "score_acc",
        "sca",
        "np",
        "append",
        "score_auc",
        "sc",
        "np",
        "append",
        "score_recall",
        "recall",
        "np",
        "append",
        "score_specificity",
        "specificity",
        "np",
        "append",
        "score_precision",
        "precision",
        "np",
        "append",
        "score_f1",
        "f1",
        "np",
        "append",
        "score_kappa",
        "kappa",
        "np",
        "append",
        "score_hosmer",
        "hosmer",
        "np",
        "append",
        "score_spiegel",
        "spiegel",
        "np",
        "append",
        "score_brier",
        "brier",
        "model",
        "fit",
        "Xtrain",
        "ytrain",
        "model",
        "predict",
        "Xtest",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "model",
        "decision_function",
        "Xtest",
        "metrics",
        "roc_curve",
        "ytest",
        "scores_dec_func",
        "metrics",
        "auc",
        "fpr",
        "tpr",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "pos_label",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "np",
        "append",
        "score_acc",
        "sca",
        "np",
        "append",
        "score_auc",
        "sc",
        "np",
        "append",
        "score_recall",
        "recall",
        "np",
        "append",
        "score_specificity",
        "specificity",
        "np",
        "append",
        "score_precision",
        "precision",
        "np",
        "append",
        "score_f1",
        "f1",
        "np",
        "append",
        "score_kappa",
        "kappa",
        "np",
        "append",
        "score_hosmer",
        "hosmer",
        "np",
        "append",
        "score_spiegel",
        "spiegel",
        "np",
        "append",
        "score_brier",
        "brier",
        "progress",
        "value",
        "y",
        "value_counts",
        "count",
        "pd",
        "DataFrame",
        "sca",
        "sc",
        "recall",
        "specificity",
        "precision",
        "f1",
        "kappa",
        "hosmer",
        "spiegel",
        "brier",
        "round",
        "round",
        "pd",
        "DataFrame",
        "sca",
        "sc",
        "recall",
        "precision",
        "f1",
        "kappa",
        "hosmer",
        "spiegel",
        "brier",
        "round",
        "round",
        "pd",
        "concat",
        "master_display",
        "fold_results",
        "ignore_index",
        "time",
        "time",
        "t1",
        "t0",
        "fold",
        "fold_num",
        "np",
        "around",
        "tt",
        "tt",
        "np",
        "around",
        "tt",
        "tt",
        "tt",
        "tt",
        "update_display",
        "ETC",
        "display_id",
        "fold_num",
        "monitor",
        "iloc",
        "ETC",
        "update_display",
        "monitor",
        "display_id",
        "verbose",
        "update_display",
        "master_display",
        "display_id",
        "display_id",
        "progress",
        "value",
        "np",
        "mean",
        "score_acc",
        "np",
        "mean",
        "score_auc",
        "np",
        "mean",
        "score_recall",
        "np",
        "mean",
        "score_precision",
        "np",
        "mean",
        "score_specificity",
        "np",
        "mean",
        "score_f1",
        "np",
        "mean",
        "score_kappa",
        "np",
        "mean",
        "score_hosmer",
        "np",
        "mean",
        "score_spiegel",
        "np",
        "mean",
        "score_brier",
        "np",
        "std",
        "score_acc",
        "np",
        "std",
        "score_auc",
        "np",
        "std",
        "score_recall",
        "np",
        "std",
        "score_specificity",
        "np",
        "std",
        "score_precision",
        "np",
        "std",
        "score_f1",
        "np",
        "std",
        "score_kappa",
        "np",
        "mean",
        "score_brier",
        "np",
        "mean",
        "score_hosmer",
        "np",
        "mean",
        "score_spiegel",
        "np",
        "append",
        "avgs_acc",
        "mean_acc",
        "np",
        "append",
        "avgs_acc",
        "std_acc",
        "np",
        "append",
        "avgs_auc",
        "mean_auc",
        "np",
        "append",
        "avgs_auc",
        "std_auc",
        "np",
        "append",
        "avgs_recall",
        "mean_recall",
        "np",
        "append",
        "avgs_recall",
        "std_recall",
        "np",
        "append",
        "avgs_specificity",
        "mean_specificity",
        "np",
        "append",
        "avgs_specificity",
        "std_specificity",
        "np",
        "append",
        "avgs_precision",
        "mean_precision",
        "np",
        "append",
        "avgs_precision",
        "std_precision",
        "np",
        "append",
        "avgs_f1",
        "mean_f1",
        "np",
        "append",
        "avgs_f1",
        "std_f1",
        "np",
        "append",
        "avgs_kappa",
        "mean_kappa",
        "np",
        "append",
        "avgs_kappa",
        "std_kappa",
        "np",
        "append",
        "avgs_hosmer",
        "mean_hosmer",
        "np",
        "append",
        "avgs_hosmer",
        "std_hosmer",
        "np",
        "append",
        "avgs_spiegel",
        "mean_spiegel",
        "np",
        "append",
        "avgs_spiegel",
        "std_spiegel",
        "np",
        "append",
        "avgs_brier",
        "mean_brier",
        "np",
        "append",
        "avgs_brier",
        "std_brier",
        "progress",
        "value",
        "pd",
        "DataFrame",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_specificity",
        "score_precision",
        "score_f1",
        "score_kappa",
        "score_hosmer",
        "score_spiegel",
        "score_brier",
        "pd",
        "DataFrame",
        "avgs_acc",
        "avgs_auc",
        "avgs_recall",
        "avgs_specificity",
        "avgs_precision",
        "avgs_f1",
        "avgs_kappa",
        "avgs_hosmer",
        "avgs_spiegel",
        "avgs_brier",
        "index",
        "model_results",
        "append",
        "model_avgs",
        "model_results",
        "round",
        "round",
        "progress",
        "value",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "best_model",
        "fit",
        "data_X",
        "data_y",
        "progress",
        "value",
        "model",
        "split",
        "model_name",
        "best_model",
        "experiment__",
        "append",
        "tup",
        "model_name",
        "nam",
        "model_results",
        "experiment__",
        "append",
        "tup",
        "verbose",
        "clear_output",
        "display",
        "model_results",
        "best_model",
        "clear_output",
        "best_model",
        "model_name",
        "model_space",
        "x_train",
        "y_train",
        "scoring",
        "cv",
        "max_evals",
        "seed",
        "verbose",
        "persistIterations",
        "pandas",
        "pd",
        "numpy",
        "np",
        "time",
        "datetime",
        "hyperopt",
        "fmin",
        "tpe",
        "Trials",
        "space_eval",
        "sklearn",
        "model_selection",
        "cross_val_score",
        "space",
        "model_name",
        "sklearn",
        "linear_model",
        "LogisticRegression",
        "LogisticRegression",
        "space",
        "random_state",
        "seed",
        "model_name",
        "sklearn",
        "ensemble",
        "RandomForestClassifier",
        "RandomForestClassifier",
        "space",
        "n_jobs",
        "random_state",
        "seed",
        "verbose",
        "space",
        "model_name",
        "xgboost",
        "XGBClassifier",
        "XGBClassifier",
        "space",
        "objective",
        "random_state",
        "seed",
        "verbose",
        "space",
        "model_name",
        "sklearn",
        "tree",
        "DecisionTreeClassifier",
        "DecisionTreeClassifier",
        "space",
        "random_state",
        "seed",
        "verbose",
        "space",
        "model_name",
        "catboost",
        "CatBoostClassifier",
        "CatBoostClassifier",
        "space",
        "silent",
        "random_state",
        "seed",
        "verbose",
        "space",
        "model_name",
        "sklearn",
        "ensemble",
        "ExtraTreesClassifier",
        "ExtraTreesClassifier",
        "space",
        "random_state",
        "seed",
        "n_jobs",
        "verbose",
        "space",
        "model_name",
        "sklearn",
        "svm",
        "SVC",
        "SVC",
        "space",
        "random_state",
        "seed",
        "verbose",
        "space",
        "model_name",
        "sklearn",
        "neural_network",
        "neural_network",
        "MLPClassifier",
        "space",
        "random_state",
        "seed",
        "verbose",
        "space",
        "model_name",
        "lightgbm",
        "lgb",
        "lgb",
        "LGBMClassifier",
        "space",
        "n_jobs",
        "random_state",
        "seed",
        "verbose",
        "space",
        "model_name",
        "sklearn",
        "neighbors",
        "KNeighborsClassifier",
        "KNeighborsClassifier",
        "space",
        "random_state",
        "seed",
        "verbose",
        "space",
        "np",
        "random",
        "seed",
        "seed",
        "cross_val_score",
        "model",
        "x_train",
        "y_train",
        "cv",
        "cv",
        "scoring",
        "scoring",
        "verbose",
        "n_jobs",
        "mean",
        "score",
        "score",
        "time",
        "time",
        "Trials",
        "np",
        "random",
        "RandomState",
        "seed",
        "fmin",
        "objective",
        "space",
        "model_space",
        "algo",
        "tpe",
        "suggest",
        "max_evals",
        "max_evals",
        "trials",
        "trials",
        "rstate",
        "rstate",
        "persistIterations",
        "x",
        "x",
        "trials",
        "trials",
        "key",
        "value",
        "key",
        "x",
        "value",
        "x",
        "key",
        "x",
        "param_values",
        "space_eval",
        "model_space",
        "x",
        "x",
        "param_values",
        "pd",
        "DataFrame",
        "param_values",
        "x",
        "x",
        "trials",
        "losses",
        "param_df",
        "index",
        "time",
        "time",
        "datetime",
        "datetime",
        "fromtimestamp",
        "ts",
        "strftime",
        "param_df",
        "to_csv",
        "model_name",
        "st",
        "model_name",
        "st",
        "max_evals",
        "time",
        "time",
        "start",
        "space_eval",
        "model_space",
        "best",
        "space_eval",
        "model_space",
        "best",
        "estimator_list",
        "fold",
        "round",
        "method",
        "turbo",
        "verbose",
        "sys",
        "estimator_list",
        "i",
        "estimator_list",
        "i",
        "i",
        "sys",
        "exit",
        "estimator_list",
        "method",
        "i",
        "estimator_list",
        "hasattr",
        "i",
        "check",
        "check",
        "sys",
        "exit",
        "estimator_list",
        "i",
        "estimator_list",
        "i",
        "sys",
        "exit",
        "fold",
        "sys",
        "exit",
        "round",
        "sys",
        "exit",
        "method",
        "available_method",
        "sys",
        "exit",
        "turbo",
        "sys",
        "exit",
        "verbose",
        "sys",
        "exit",
        "pandas",
        "pd",
        "time",
        "datetime",
        "ipywidgets",
        "ipw",
        "IPython",
        "display",
        "display",
        "HTML",
        "clear_output",
        "update_display",
        "ipw",
        "IntProgress",
        "value",
        "min",
        "max",
        "fold",
        "step",
        "description",
        "pd",
        "DataFrame",
        "columns",
        "display",
        "progress",
        "datetime",
        "datetime",
        "now",
        "strftime",
        "pd",
        "DataFrame",
        "timestampStr",
        "columns",
        "set_index",
        "display",
        "monitor",
        "display_id",
        "verbose",
        "display",
        "master_display",
        "display_id",
        "display_",
        "display_id",
        "warnings",
        "warnings",
        "filterwarnings",
        "numpy",
        "np",
        "sklearn",
        "metrics",
        "sklearn",
        "model_selection",
        "StratifiedKFold",
        "sklearn",
        "ensemble",
        "VotingClassifier",
        "re",
        "X_train",
        "copy",
        "y_train",
        "copy",
        "data_X",
        "reset_index",
        "drop",
        "inplace",
        "data_y",
        "reset_index",
        "drop",
        "inplace",
        "progress",
        "value",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "StratifiedKFold",
        "fold",
        "random_state",
        "seed",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "estimator_list",
        "sklearn",
        "linear_model",
        "LogisticRegression",
        "sklearn",
        "neighbors",
        "KNeighborsClassifier",
        "sklearn",
        "naive_bayes",
        "GaussianNB",
        "sklearn",
        "tree",
        "DecisionTreeClassifier",
        "sklearn",
        "linear_model",
        "SGDClassifier",
        "sklearn",
        "svm",
        "SVC",
        "sklearn",
        "gaussian_process",
        "GaussianProcessClassifier",
        "sklearn",
        "neural_network",
        "MLPClassifier",
        "sklearn",
        "linear_model",
        "RidgeClassifier",
        "sklearn",
        "ensemble",
        "RandomForestClassifier",
        "sklearn",
        "discriminant_analysis",
        "QuadraticDiscriminantAnalysis",
        "sklearn",
        "ensemble",
        "AdaBoostClassifier",
        "sklearn",
        "ensemble",
        "GradientBoostingClassifier",
        "sklearn",
        "discriminant_analysis",
        "LinearDiscriminantAnalysis",
        "sklearn",
        "ensemble",
        "ExtraTreesClassifier",
        "sklearn",
        "ensemble",
        "BaggingClassifier",
        "xgboost",
        "XGBClassifier",
        "lightgbm",
        "lgb",
        "LogisticRegression",
        "random_state",
        "seed",
        "KNeighborsClassifier",
        "GaussianNB",
        "DecisionTreeClassifier",
        "random_state",
        "seed",
        "SGDClassifier",
        "max_iter",
        "tol",
        "random_state",
        "seed",
        "SVC",
        "gamma",
        "C",
        "probability",
        "kernel",
        "random_state",
        "seed",
        "GaussianProcessClassifier",
        "random_state",
        "seed",
        "MLPClassifier",
        "max_iter",
        "random_state",
        "seed",
        "RidgeClassifier",
        "random_state",
        "seed",
        "RandomForestClassifier",
        "n_estimators",
        "random_state",
        "seed",
        "QuadraticDiscriminantAnalysis",
        "AdaBoostClassifier",
        "random_state",
        "seed",
        "GradientBoostingClassifier",
        "random_state",
        "seed",
        "LinearDiscriminantAnalysis",
        "ExtraTreesClassifier",
        "random_state",
        "seed",
        "XGBClassifier",
        "random_state",
        "seed",
        "n_jobs",
        "verbosity",
        "lgb",
        "LGBMClassifier",
        "random_state",
        "seed",
        "progress",
        "value",
        "turbo",
        "method",
        "lr",
        "knn",
        "nb",
        "dt",
        "svm",
        "ridge",
        "rf",
        "qda",
        "ada",
        "gbc",
        "lda",
        "et",
        "xgboost",
        "lightgbm",
        "method",
        "lr",
        "knn",
        "nb",
        "dt",
        "rf",
        "qda",
        "ada",
        "gbc",
        "lda",
        "et",
        "xgboost",
        "lightgbm",
        "method",
        "lr",
        "knn",
        "nb",
        "dt",
        "svm",
        "rbfsvm",
        "gpc",
        "mlp",
        "ridge",
        "rf",
        "qda",
        "ada",
        "gbc",
        "lda",
        "et",
        "xgboost",
        "lightgbm",
        "method",
        "lr",
        "knn",
        "nb",
        "dt",
        "rbfsvm",
        "gpc",
        "mlp",
        "rf",
        "qda",
        "ada",
        "gbc",
        "lda",
        "et",
        "xgboost",
        "lightgbm",
        "estimator_list",
        "method",
        "names",
        "estimator_list",
        "np",
        "append",
        "model_names",
        "names",
        "split",
        "input",
        "re",
        "findall",
        "input",
        "join",
        "words",
        "words",
        "i",
        "model_names",
        "model_names_modified",
        "append",
        "putSpace",
        "i",
        "model_names_modified",
        "j",
        "model_names_modified",
        "j",
        "model_names_final",
        "append",
        "j",
        "model_names_final",
        "append",
        "j",
        "model_names_final",
        "append",
        "j",
        "model_names_final",
        "append",
        "j",
        "model_names_final",
        "append",
        "j",
        "model_names_final",
        "append",
        "model_names_final",
        "append",
        "j",
        "model_names_final",
        "i",
        "model_names",
        "i",
        "counter",
        "model_names_n",
        "append",
        "mn",
        "counter",
        "model_names_n",
        "estimator_list",
        "model_names",
        "estimator_list",
        "estimator_list_",
        "estimator_list_",
        "VotingClassifier",
        "estimators",
        "estimator_list_",
        "voting",
        "voting",
        "n_jobs",
        "model",
        "fit",
        "Xtrain",
        "ytrain",
        "VotingClassifier",
        "estimators",
        "estimator_list_",
        "voting",
        "voting",
        "progress",
        "value",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "train_i",
        "test_i",
        "kf",
        "split",
        "data_X",
        "data_y",
        "progress",
        "value",
        "time",
        "time",
        "monitor",
        "iloc",
        "fold_num",
        "fold",
        "update_display",
        "monitor",
        "display_id",
        "data_X",
        "iloc",
        "train_i",
        "data_X",
        "iloc",
        "test_i",
        "data_y",
        "iloc",
        "train_i",
        "data_y",
        "iloc",
        "test_i",
        "voting",
        "model",
        "fit",
        "Xtrain",
        "ytrain",
        "model",
        "predict",
        "Xtest",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "np",
        "append",
        "score_acc",
        "sca",
        "np",
        "append",
        "score_auc",
        "sc",
        "np",
        "append",
        "score_recall",
        "recall",
        "np",
        "append",
        "score_precision",
        "precision",
        "np",
        "append",
        "score_f1",
        "f1",
        "np",
        "append",
        "score_kappa",
        "kappa",
        "model",
        "fit",
        "Xtrain",
        "ytrain",
        "model",
        "predict",
        "Xtest",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "model",
        "predict_proba",
        "Xtest",
        "pred_prob",
        "metrics",
        "roc_auc_score",
        "ytest",
        "pred_prob",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "np",
        "append",
        "score_acc",
        "sca",
        "np",
        "append",
        "score_auc",
        "sc",
        "np",
        "append",
        "score_recall",
        "recall",
        "np",
        "append",
        "score_precision",
        "precision",
        "np",
        "append",
        "score_f1",
        "f1",
        "np",
        "append",
        "score_kappa",
        "kappa",
        "pd",
        "DataFrame",
        "sca",
        "sc",
        "recall",
        "precision",
        "f1",
        "kappa",
        "round",
        "round",
        "pd",
        "concat",
        "master_display",
        "fold_results",
        "ignore_index",
        "time",
        "time",
        "t1",
        "t0",
        "fold",
        "fold_num",
        "np",
        "around",
        "tt",
        "tt",
        "np",
        "around",
        "tt",
        "tt",
        "tt",
        "tt",
        "fold_num",
        "monitor",
        "iloc",
        "ETC",
        "update_display",
        "monitor",
        "display_id",
        "verbose",
        "update_display",
        "master_display",
        "display_id",
        "display_id",
        "np",
        "mean",
        "score_acc",
        "np",
        "mean",
        "score_auc",
        "np",
        "mean",
        "score_recall",
        "np",
        "mean",
        "score_precision",
        "np",
        "mean",
        "score_f1",
        "np",
        "mean",
        "score_kappa",
        "np",
        "std",
        "score_acc",
        "np",
        "std",
        "score_auc",
        "np",
        "std",
        "score_recall",
        "np",
        "std",
        "score_precision",
        "np",
        "std",
        "score_f1",
        "np",
        "std",
        "score_kappa",
        "np",
        "append",
        "avgs_acc",
        "mean_acc",
        "np",
        "append",
        "avgs_acc",
        "std_acc",
        "np",
        "append",
        "avgs_auc",
        "mean_auc",
        "np",
        "append",
        "avgs_auc",
        "std_auc",
        "np",
        "append",
        "avgs_recall",
        "mean_recall",
        "np",
        "append",
        "avgs_recall",
        "std_recall",
        "np",
        "append",
        "avgs_precision",
        "mean_precision",
        "np",
        "append",
        "avgs_precision",
        "std_precision",
        "np",
        "append",
        "avgs_f1",
        "mean_f1",
        "np",
        "append",
        "avgs_f1",
        "std_f1",
        "np",
        "append",
        "avgs_kappa",
        "mean_kappa",
        "np",
        "append",
        "avgs_kappa",
        "std_kappa",
        "progress",
        "value",
        "pd",
        "DataFrame",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "pd",
        "DataFrame",
        "avgs_acc",
        "avgs_auc",
        "avgs_recall",
        "avgs_precision",
        "avgs_f1",
        "avgs_kappa",
        "index",
        "model_results",
        "append",
        "model_avgs",
        "model_results",
        "round",
        "round",
        "progress",
        "value",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "model",
        "fit",
        "data_X",
        "data_y",
        "progress",
        "value",
        "model_name",
        "model",
        "experiment__",
        "append",
        "tup",
        "model_name",
        "nam",
        "model_results",
        "experiment__",
        "append",
        "tup",
        "verbose",
        "clear_output",
        "display",
        "model_results",
        "model",
        "clear_output",
        "model",
        "estimator_list",
        "meta_model",
        "fold",
        "round",
        "method",
        "restack",
        "plot",
        "finalize",
        "verbose",
        "y",
        "value_counts",
        "count",
        "sys",
        "i",
        "estimator_list",
        "i",
        "i",
        "sys",
        "exit",
        "meta_model",
        "meta_model",
        "meta_model",
        "sys",
        "exit",
        "y",
        "value_counts",
        "count",
        "method",
        "sys",
        "exit",
        "fold",
        "sys",
        "exit",
        "round",
        "sys",
        "exit",
        "method",
        "available_method",
        "sys",
        "exit",
        "restack",
        "sys",
        "exit",
        "restack",
        "sys",
        "exit",
        "verbose",
        "sys",
        "exit",
        "pandas",
        "pd",
        "ipywidgets",
        "ipw",
        "IPython",
        "display",
        "display",
        "clear_output",
        "update_display",
        "time",
        "datetime",
        "copy",
        "deepcopy",
        "deepcopy",
        "estimator_list",
        "meta_model",
        "sklearn",
        "linear_model",
        "LogisticRegression",
        "LogisticRegression",
        "deepcopy",
        "meta_model",
        "clear_output",
        "len",
        "estimator_list",
        "fold",
        "ipw",
        "IntProgress",
        "value",
        "min",
        "max",
        "max_progress",
        "step",
        "description",
        "pd",
        "DataFrame",
        "columns",
        "display",
        "progress",
        "datetime",
        "datetime",
        "now",
        "strftime",
        "pd",
        "DataFrame",
        "timestampStr",
        "columns",
        "set_index",
        "display",
        "monitor",
        "display_id",
        "verbose",
        "display",
        "master_display",
        "display_id",
        "display_",
        "display_id",
        "warnings",
        "warnings",
        "filterwarnings",
        "numpy",
        "np",
        "sklearn",
        "metrics",
        "sklearn",
        "model_selection",
        "StratifiedKFold",
        "sklearn",
        "model_selection",
        "cross_val_predict",
        "seaborn",
        "sns",
        "matplotlib",
        "pyplot",
        "plt",
        "progress",
        "value",
        "method",
        "method",
        "finalize",
        "X",
        "copy",
        "y",
        "copy",
        "X_train",
        "copy",
        "y_train",
        "copy",
        "data_X",
        "reset_index",
        "drop",
        "inplace",
        "data_y",
        "reset_index",
        "drop",
        "inplace",
        "np",
        "zeros",
        "item",
        "estimator_list",
        "np",
        "append",
        "model_names",
        "item",
        "split",
        "i",
        "model_names",
        "i",
        "model_names_fixed",
        "append",
        "a",
        "model_names_fixed",
        "append",
        "i",
        "model_names_fixed",
        "i",
        "model_names",
        "i",
        "counter",
        "model_names_fixed",
        "append",
        "s",
        "counter",
        "np",
        "zeros",
        "pd",
        "DataFrame",
        "data_y",
        "base_prediction",
        "reset_index",
        "drop",
        "model",
        "estimator_list",
        "monitor",
        "iloc",
        "model_names",
        "counter",
        "update_display",
        "monitor",
        "display_id",
        "model",
        "fit",
        "data_X",
        "data_y",
        "models_",
        "append",
        "model",
        "progress",
        "value",
        "cross_val_predict",
        "model",
        "data_X",
        "data_y",
        "cv",
        "fold",
        "method",
        "predict_method",
        "cross_val_predict",
        "model",
        "data_X",
        "data_y",
        "cv",
        "fold",
        "method",
        "method",
        "base_array",
        "base_array",
        "method",
        "base_array",
        "pd",
        "DataFrame",
        "base_array",
        "pd",
        "concat",
        "base_prediction",
        "base_array_df",
        "axis",
        "np",
        "empty",
        "counter",
        "base_prediction",
        "fillna",
        "value",
        "inplace",
        "np",
        "array",
        "base_prediction",
        "columns",
        "np",
        "append",
        "target_col_name",
        "model_names_fixed",
        "model_names",
        "base_prediction",
        "drop",
        "base_prediction",
        "columns",
        "axis",
        "inplace",
        "restack",
        "pd",
        "concat",
        "data_X",
        "base_prediction",
        "axis",
        "base_prediction",
        "base_prediction",
        "corr",
        "meta_model",
        "model",
        "fit",
        "data_X",
        "data_y",
        "models_",
        "append",
        "model",
        "StratifiedKFold",
        "fold",
        "random_state",
        "seed",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "progress",
        "value",
        "train_i",
        "test_i",
        "kf",
        "split",
        "data_X",
        "data_y",
        "time",
        "time",
        "monitor",
        "iloc",
        "fold_num",
        "fold",
        "update_display",
        "monitor",
        "display_id",
        "progress",
        "value",
        "data_X",
        "iloc",
        "train_i",
        "data_X",
        "iloc",
        "test_i",
        "data_y",
        "iloc",
        "train_i",
        "data_y",
        "iloc",
        "test_i",
        "model",
        "fit",
        "Xtrain",
        "ytrain",
        "model",
        "predict_proba",
        "Xtest",
        "pred_prob",
        "model",
        "predict",
        "Xtest",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "metrics",
        "roc_auc_score",
        "ytest",
        "pred_prob",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "np",
        "append",
        "score_acc",
        "sca",
        "np",
        "append",
        "score_auc",
        "sc",
        "np",
        "append",
        "score_recall",
        "recall",
        "np",
        "append",
        "score_precision",
        "precision",
        "np",
        "append",
        "score_f1",
        "f1",
        "np",
        "append",
        "score_kappa",
        "kappa",
        "pd",
        "DataFrame",
        "sca",
        "sc",
        "recall",
        "precision",
        "f1",
        "kappa",
        "round",
        "round",
        "pd",
        "concat",
        "master_display",
        "fold_results",
        "ignore_index",
        "time",
        "time",
        "t1",
        "t0",
        "fold",
        "fold_num",
        "np",
        "around",
        "tt",
        "tt",
        "np",
        "around",
        "tt",
        "tt",
        "tt",
        "tt",
        "monitor",
        "iloc",
        "ETC",
        "update_display",
        "monitor",
        "display_id",
        "fold_num",
        "verbose",
        "update_display",
        "master_display",
        "display_id",
        "display_id",
        "np",
        "mean",
        "score_acc",
        "np",
        "mean",
        "score_auc",
        "np",
        "mean",
        "score_recall",
        "np",
        "mean",
        "score_precision",
        "np",
        "mean",
        "score_f1",
        "np",
        "mean",
        "score_kappa",
        "np",
        "std",
        "score_acc",
        "np",
        "std",
        "score_auc",
        "np",
        "std",
        "score_recall",
        "np",
        "std",
        "score_precision",
        "np",
        "std",
        "score_f1",
        "np",
        "std",
        "score_kappa",
        "np",
        "append",
        "avgs_acc",
        "mean_acc",
        "np",
        "append",
        "avgs_acc",
        "std_acc",
        "np",
        "append",
        "avgs_auc",
        "mean_auc",
        "np",
        "append",
        "avgs_auc",
        "std_auc",
        "np",
        "append",
        "avgs_recall",
        "mean_recall",
        "np",
        "append",
        "avgs_recall",
        "std_recall",
        "np",
        "append",
        "avgs_precision",
        "mean_precision",
        "np",
        "append",
        "avgs_precision",
        "std_precision",
        "np",
        "append",
        "avgs_f1",
        "mean_f1",
        "np",
        "append",
        "avgs_f1",
        "std_f1",
        "np",
        "append",
        "avgs_kappa",
        "mean_kappa",
        "np",
        "append",
        "avgs_kappa",
        "std_kappa",
        "pd",
        "DataFrame",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "pd",
        "DataFrame",
        "avgs_acc",
        "avgs_auc",
        "avgs_recall",
        "avgs_precision",
        "avgs_f1",
        "avgs_kappa",
        "index",
        "model_results",
        "append",
        "model_avgs",
        "model_results",
        "round",
        "round",
        "progress",
        "value",
        "models_",
        "append",
        "method",
        "models_",
        "append",
        "restack",
        "model_name",
        "models_",
        "experiment__",
        "append",
        "tup",
        "model_name",
        "nam",
        "model_results",
        "experiment__",
        "append",
        "tup",
        "plot",
        "clear_output",
        "plt",
        "subplots",
        "figsize",
        "sns",
        "heatmap",
        "base_prediction_cor",
        "vmin",
        "vmax",
        "center",
        "cmap",
        "square",
        "annot",
        "linewidths",
        "ax",
        "set_ylim",
        "sorted",
        "ax",
        "get_xlim",
        "reverse",
        "verbose",
        "clear_output",
        "display",
        "model_results",
        "models_",
        "clear_output",
        "models_",
        "estimator_list",
        "meta_model",
        "fold",
        "round",
        "method",
        "restack",
        "finalize",
        "verbose",
        "y",
        "value_counts",
        "count",
        "sys",
        "estimator_list",
        "sys",
        "exit",
        "len",
        "estimator_list",
        "sys",
        "exit",
        "i",
        "estimator_list",
        "j",
        "i",
        "j",
        "j",
        "sys",
        "exit",
        "meta_model",
        "meta_model",
        "meta_model",
        "sys",
        "exit",
        "y",
        "value_counts",
        "count",
        "method",
        "sys",
        "exit",
        "fold",
        "sys",
        "exit",
        "round",
        "sys",
        "exit",
        "method",
        "available_method",
        "sys",
        "exit",
        "restack",
        "sys",
        "exit",
        "verbose",
        "sys",
        "exit",
        "pandas",
        "pd",
        "ipywidgets",
        "ipw",
        "IPython",
        "display",
        "display",
        "clear_output",
        "update_display",
        "time",
        "datetime",
        "copy",
        "deepcopy",
        "sklearn",
        "clone",
        "deepcopy",
        "estimator_list",
        "meta_model",
        "sklearn",
        "linear_model",
        "LogisticRegression",
        "LogisticRegression",
        "deepcopy",
        "meta_model",
        "clear_output",
        "len",
        "estimator_list",
        "fold",
        "ipw",
        "IntProgress",
        "value",
        "min",
        "max",
        "max_progress",
        "step",
        "description",
        "display",
        "progress",
        "datetime",
        "datetime",
        "now",
        "strftime",
        "pd",
        "DataFrame",
        "timestampStr",
        "columns",
        "set_index",
        "display",
        "monitor",
        "display_id",
        "verbose",
        "pd",
        "DataFrame",
        "columns",
        "display",
        "master_display",
        "display_id",
        "display_",
        "display_id",
        "warnings",
        "warnings",
        "filterwarnings",
        "numpy",
        "np",
        "sklearn",
        "metrics",
        "sklearn",
        "model_selection",
        "StratifiedKFold",
        "sklearn",
        "model_selection",
        "cross_val_predict",
        "progress",
        "value",
        "estimator_list",
        "item",
        "base_level",
        "np",
        "append",
        "base_level_names",
        "item",
        "split",
        "i",
        "base_level_names",
        "i",
        "base_level_fixed",
        "append",
        "a",
        "base_level_fixed",
        "append",
        "i",
        "i",
        "base_level_names",
        "i",
        "counter",
        "base_level_fixed_2",
        "append",
        "s",
        "counter",
        "base_level_fixed_2",
        "estimator_list",
        "item",
        "inter_level",
        "m",
        "item",
        "m",
        "split",
        "level_list",
        "append",
        "level_list",
        "append",
        "m",
        "split",
        "inter_level_names",
        "append",
        "level_list",
        "finalize",
        "X",
        "copy",
        "y",
        "copy",
        "X_train",
        "copy",
        "y_train",
        "copy",
        "data_X",
        "reset_index",
        "drop",
        "inplace",
        "data_y",
        "reset_index",
        "drop",
        "inplace",
        "method",
        "method",
        "np",
        "zeros",
        "pd",
        "DataFrame",
        "pd",
        "DataFrame",
        "data_y",
        "base_prediction",
        "reset_index",
        "drop",
        "model",
        "base_level",
        "base_models_",
        "append",
        "model",
        "fit",
        "data_X",
        "data_y",
        "monitor",
        "iloc",
        "base_level_names",
        "base_counter",
        "update_display",
        "monitor",
        "display_id",
        "progress",
        "value",
        "method",
        "cross_val_predict",
        "model",
        "data_X",
        "data_y",
        "cv",
        "fold",
        "method",
        "predict_method",
        "base_array",
        "cross_val_predict",
        "model",
        "data_X",
        "data_y",
        "cv",
        "fold",
        "method",
        "cross_val_predict",
        "model",
        "data_X",
        "data_y",
        "cv",
        "fold",
        "method",
        "pd",
        "DataFrame",
        "base_array",
        "pd",
        "concat",
        "base_array_df",
        "base_array",
        "axis",
        "np",
        "empty",
        "base_counter",
        "base_array_df",
        "fillna",
        "value",
        "inplace",
        "base_level_fixed",
        "restack",
        "pd",
        "concat",
        "data_X",
        "base_array_df",
        "axis",
        "base_array_df",
        "copy",
        "models_",
        "append",
        "base_models_",
        "level",
        "inter_level",
        "pd",
        "DataFrame",
        "model",
        "level",
        "monitor",
        "iloc",
        "inter_level_names",
        "inter_counter",
        "model_counter",
        "update_display",
        "monitor",
        "display_id",
        "clone",
        "model",
        "inter_inner",
        "append",
        "model",
        "fit",
        "X",
        "base_array_df",
        "y",
        "data_y",
        "method",
        "cross_val_predict",
        "model",
        "X",
        "base_array_df",
        "y",
        "data_y",
        "cv",
        "fold",
        "method",
        "predict_method",
        "base_array",
        "cross_val_predict",
        "model",
        "X",
        "base_array_df",
        "y",
        "data_y",
        "cv",
        "fold",
        "method",
        "cross_val_predict",
        "model",
        "X",
        "base_array_df",
        "y",
        "data_y",
        "cv",
        "fold",
        "method",
        "pd",
        "DataFrame",
        "base_array",
        "model",
        "split",
        "col",
        "col",
        "inter_counter",
        "model_counter",
        "col",
        "pd",
        "concat",
        "inter_array_df",
        "base_array",
        "axis",
        "np",
        "empty",
        "model_counter",
        "pd",
        "concat",
        "base_array_df",
        "inter_array_df",
        "axis",
        "base_array_df",
        "fillna",
        "value",
        "inplace",
        "models_",
        "append",
        "inter_inner",
        "restack",
        "base_array_df",
        "shape",
        "len",
        "level",
        "base_array_df",
        "iloc",
        "i",
        "inter_counter",
        "progress",
        "value",
        "meta_model",
        "base_array_df",
        "copy",
        "model",
        "fit",
        "data_X",
        "data_y",
        "StratifiedKFold",
        "fold",
        "random_state",
        "seed",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "train_i",
        "test_i",
        "kf",
        "split",
        "data_X",
        "data_y",
        "time",
        "time",
        "monitor",
        "iloc",
        "fold_num",
        "fold",
        "update_display",
        "monitor",
        "display_id",
        "data_X",
        "iloc",
        "train_i",
        "data_X",
        "iloc",
        "test_i",
        "data_y",
        "iloc",
        "train_i",
        "data_y",
        "iloc",
        "test_i",
        "model",
        "fit",
        "Xtrain",
        "ytrain",
        "model",
        "predict_proba",
        "Xtest",
        "pred_prob",
        "model",
        "predict",
        "Xtest",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "metrics",
        "roc_auc_score",
        "ytest",
        "pred_prob",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "np",
        "append",
        "score_acc",
        "sca",
        "np",
        "append",
        "score_auc",
        "sc",
        "np",
        "append",
        "score_recall",
        "recall",
        "np",
        "append",
        "score_precision",
        "precision",
        "np",
        "append",
        "score_f1",
        "f1",
        "np",
        "append",
        "score_kappa",
        "kappa",
        "progress",
        "value",
        "pd",
        "DataFrame",
        "sca",
        "sc",
        "recall",
        "precision",
        "f1",
        "kappa",
        "round",
        "round",
        "verbose",
        "pd",
        "concat",
        "master_display",
        "fold_results",
        "ignore_index",
        "time",
        "time",
        "t1",
        "t0",
        "fold",
        "fold_num",
        "np",
        "around",
        "tt",
        "tt",
        "np",
        "around",
        "tt",
        "tt",
        "tt",
        "tt",
        "fold_num",
        "monitor",
        "iloc",
        "ETC",
        "update_display",
        "monitor",
        "display_id",
        "verbose",
        "update_display",
        "master_display",
        "display_id",
        "display_id",
        "np",
        "mean",
        "score_acc",
        "np",
        "mean",
        "score_auc",
        "np",
        "mean",
        "score_recall",
        "np",
        "mean",
        "score_precision",
        "np",
        "mean",
        "score_f1",
        "np",
        "mean",
        "score_kappa",
        "np",
        "std",
        "score_acc",
        "np",
        "std",
        "score_auc",
        "np",
        "std",
        "score_recall",
        "np",
        "std",
        "score_precision",
        "np",
        "std",
        "score_f1",
        "np",
        "std",
        "score_kappa",
        "np",
        "append",
        "avgs_acc",
        "mean_acc",
        "np",
        "append",
        "avgs_acc",
        "std_acc",
        "np",
        "append",
        "avgs_auc",
        "mean_auc",
        "np",
        "append",
        "avgs_auc",
        "std_auc",
        "np",
        "append",
        "avgs_recall",
        "mean_recall",
        "np",
        "append",
        "avgs_recall",
        "std_recall",
        "np",
        "append",
        "avgs_precision",
        "mean_precision",
        "np",
        "append",
        "avgs_precision",
        "std_precision",
        "np",
        "append",
        "avgs_f1",
        "mean_f1",
        "np",
        "append",
        "avgs_f1",
        "std_f1",
        "np",
        "append",
        "avgs_kappa",
        "mean_kappa",
        "np",
        "append",
        "avgs_kappa",
        "std_kappa",
        "progress",
        "value",
        "pd",
        "DataFrame",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "pd",
        "DataFrame",
        "avgs_acc",
        "avgs_auc",
        "avgs_recall",
        "avgs_precision",
        "avgs_f1",
        "avgs_kappa",
        "index",
        "model_results",
        "append",
        "model_avgs",
        "model_results",
        "round",
        "round",
        "progress",
        "value",
        "models_",
        "append",
        "meta_model_",
        "models_",
        "append",
        "method",
        "models_",
        "append",
        "restack",
        "model_name",
        "models_",
        "experiment__",
        "append",
        "tup",
        "model_name",
        "nam",
        "model_results",
        "experiment__",
        "append",
        "tup",
        "verbose",
        "clear_output",
        "display",
        "model_results",
        "models_",
        "clear_output",
        "models_",
        "estimator",
        "plot",
        "feature",
        "observation",
        "sys",
        "estimator",
        "split",
        "model_name",
        "find",
        "model_name",
        "allowed_models",
        "sys",
        "exit",
        "plot",
        "allowed_types",
        "sys",
        "exit",
        "shap",
        "estimator",
        "plot",
        "model_name",
        "type1",
        "shap",
        "TreeExplainer",
        "model",
        "explainer",
        "shap_values",
        "X_test",
        "shap",
        "summary_plot",
        "shap_values",
        "X_test",
        "model_name",
        "type2",
        "shap",
        "TreeExplainer",
        "model",
        "explainer",
        "shap_values",
        "X_test",
        "shap",
        "summary_plot",
        "shap_values",
        "X_test",
        "plot",
        "feature",
        "X_test",
        "columns",
        "feature",
        "model_name",
        "type1",
        "shap",
        "TreeExplainer",
        "model",
        "explainer",
        "shap_values",
        "X_test",
        "shap",
        "dependence_plot",
        "dependence",
        "shap_values",
        "X_test",
        "model_name",
        "type2",
        "shap",
        "TreeExplainer",
        "model",
        "explainer",
        "shap_values",
        "X_test",
        "shap",
        "dependence_plot",
        "dependence",
        "shap_values",
        "X_test",
        "plot",
        "model_name",
        "type1",
        "observation",
        "shap",
        "TreeExplainer",
        "model",
        "explainer",
        "shap_values",
        "X_test",
        "shap",
        "initjs",
        "shap",
        "force_plot",
        "explainer",
        "expected_value",
        "shap_values",
        "X_test",
        "model_name",
        "observation",
        "X_test",
        "iloc",
        "row_to_show",
        "shap",
        "TreeExplainer",
        "model",
        "explainer",
        "shap_values",
        "X_test",
        "shap",
        "initjs",
        "shap",
        "force_plot",
        "explainer",
        "expected_value",
        "shap_values",
        "row_to_show",
        "data_for_prediction",
        "observation",
        "X_test",
        "iloc",
        "row_to_show",
        "shap",
        "TreeExplainer",
        "model",
        "explainer",
        "shap_values",
        "data_for_prediction",
        "shap",
        "initjs",
        "shap",
        "force_plot",
        "explainer",
        "expected_value",
        "shap_values",
        "data_for_prediction",
        "model_name",
        "type2",
        "observation",
        "shap",
        "TreeExplainer",
        "model",
        "explainer",
        "shap_values",
        "X_test",
        "shap",
        "initjs",
        "shap",
        "force_plot",
        "explainer",
        "expected_value",
        "shap_values",
        "X_test",
        "observation",
        "X_test",
        "iloc",
        "row_to_show",
        "shap",
        "TreeExplainer",
        "model",
        "explainer",
        "shap_values",
        "X_test",
        "shap",
        "initjs",
        "shap",
        "force_plot",
        "explainer",
        "expected_value",
        "shap_values",
        "row_to_show",
        "X_test",
        "iloc",
        "row_to_show",
        "estimator",
        "method",
        "fold",
        "round",
        "verbose",
        "sys",
        "estimator",
        "split",
        "model_name",
        "find",
        "model_name",
        "not_allowed",
        "sys",
        "exit",
        "fold",
        "sys",
        "exit",
        "round",
        "sys",
        "exit",
        "verbose",
        "sys",
        "exit",
        "pandas",
        "pd",
        "ipywidgets",
        "ipw",
        "IPython",
        "display",
        "display",
        "clear_output",
        "update_display",
        "datetime",
        "time",
        "ipw",
        "IntProgress",
        "value",
        "min",
        "max",
        "fold",
        "step",
        "description",
        "pd",
        "DataFrame",
        "columns",
        "display",
        "progress",
        "datetime",
        "datetime",
        "now",
        "strftime",
        "pd",
        "DataFrame",
        "timestampStr",
        "columns",
        "set_index",
        "display",
        "monitor",
        "display_id",
        "verbose",
        "display",
        "master_display",
        "display_id",
        "display_",
        "display_id",
        "warnings",
        "warnings",
        "filterwarnings",
        "X_train",
        "copy",
        "y_train",
        "copy",
        "data_X",
        "reset_index",
        "drop",
        "inplace",
        "data_y",
        "reset_index",
        "drop",
        "inplace",
        "numpy",
        "np",
        "sklearn",
        "metrics",
        "sklearn",
        "model_selection",
        "StratifiedKFold",
        "sklearn",
        "calibration",
        "CalibratedClassifierCV",
        "progress",
        "value",
        "StratifiedKFold",
        "fold",
        "random_state",
        "seed",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "np",
        "empty",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "CalibratedClassifierCV",
        "base_estimator",
        "estimator",
        "method",
        "method",
        "cv",
        "fold",
        "model",
        "split",
        "progress",
        "value",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "train_i",
        "test_i",
        "kf",
        "split",
        "data_X",
        "data_y",
        "time",
        "time",
        "monitor",
        "iloc",
        "fold_num",
        "fold",
        "update_display",
        "monitor",
        "display_id",
        "data_X",
        "iloc",
        "train_i",
        "data_X",
        "iloc",
        "test_i",
        "data_y",
        "iloc",
        "train_i",
        "data_y",
        "iloc",
        "test_i",
        "hasattr",
        "model",
        "model",
        "fit",
        "Xtrain",
        "ytrain",
        "model",
        "predict_proba",
        "Xtest",
        "pred_prob",
        "model",
        "predict",
        "Xtest",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "roc_auc_score",
        "ytest",
        "pred_prob",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "pos_label",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "np",
        "append",
        "score_acc",
        "sca",
        "np",
        "append",
        "score_auc",
        "sc",
        "np",
        "append",
        "score_recall",
        "recall",
        "np",
        "append",
        "score_precision",
        "precision",
        "np",
        "append",
        "score_f1",
        "f1",
        "np",
        "append",
        "score_kappa",
        "kappa",
        "np",
        "append",
        "score_specificity",
        "specificity",
        "np",
        "append",
        "score_hosmer",
        "hosmer",
        "np",
        "append",
        "score_spiegel",
        "spiegel",
        "np",
        "append",
        "score_brier",
        "brier",
        "model",
        "fit",
        "Xtrain",
        "ytrain",
        "model",
        "predict",
        "Xtest",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "roc_auc_score",
        "ytest",
        "pred_prob",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "pos_label",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "np",
        "append",
        "score_acc",
        "sca",
        "np",
        "append",
        "score_auc",
        "sc",
        "np",
        "append",
        "score_recall",
        "recall",
        "np",
        "append",
        "score_precision",
        "precision",
        "np",
        "append",
        "score_f1",
        "f1",
        "np",
        "append",
        "score_kappa",
        "kappa",
        "np",
        "append",
        "score_specificity",
        "specificity",
        "np",
        "append",
        "score_hosmer",
        "hosmer",
        "np",
        "append",
        "score_spiegel",
        "spiegel",
        "np",
        "append",
        "score_brier",
        "brier",
        "progress",
        "value",
        "pd",
        "DataFrame",
        "sca",
        "sc",
        "recall",
        "specificity",
        "precision",
        "f1",
        "kappa",
        "hosmer",
        "spiegel",
        "brier",
        "round",
        "round",
        "pd",
        "concat",
        "master_display",
        "fold_results",
        "ignore_index",
        "time",
        "time",
        "t1",
        "t0",
        "fold",
        "fold_num",
        "np",
        "around",
        "tt",
        "tt",
        "np",
        "around",
        "tt",
        "tt",
        "tt",
        "tt",
        "monitor",
        "iloc",
        "ETC",
        "update_display",
        "monitor",
        "display_id",
        "fold_num",
        "verbose",
        "update_display",
        "master_display",
        "display_id",
        "display_id",
        "np",
        "mean",
        "score_acc",
        "np",
        "mean",
        "score_auc",
        "np",
        "mean",
        "score_recall",
        "np",
        "mean",
        "score_precision",
        "np",
        "mean",
        "score_f1",
        "np",
        "mean",
        "score_kappa",
        "np",
        "mean",
        "score_specificity",
        "np",
        "mean",
        "score_hosmer",
        "np",
        "mean",
        "score_spiegel",
        "np",
        "mean",
        "score_brier",
        "np",
        "std",
        "score_acc",
        "np",
        "std",
        "score_auc",
        "np",
        "std",
        "score_recall",
        "np",
        "std",
        "score_precision",
        "np",
        "std",
        "score_f1",
        "np",
        "std",
        "score_kappa",
        "np",
        "std",
        "score_specificity",
        "np",
        "std",
        "score_hosmer",
        "np",
        "std",
        "score_spiegel",
        "np",
        "std",
        "score_brier",
        "np",
        "append",
        "avgs_acc",
        "mean_acc",
        "np",
        "append",
        "avgs_acc",
        "std_acc",
        "np",
        "append",
        "avgs_auc",
        "mean_auc",
        "np",
        "append",
        "avgs_auc",
        "std_auc",
        "np",
        "append",
        "avgs_recall",
        "mean_recall",
        "np",
        "append",
        "avgs_recall",
        "std_recall",
        "np",
        "append",
        "avgs_precision",
        "mean_precision",
        "np",
        "append",
        "avgs_precision",
        "std_precision",
        "np",
        "append",
        "avgs_f1",
        "mean_f1",
        "np",
        "append",
        "avgs_f1",
        "std_f1",
        "np",
        "append",
        "avgs_kappa",
        "mean_kappa",
        "np",
        "append",
        "avgs_kappa",
        "std_kappa",
        "np",
        "append",
        "avgs_specificity",
        "mean_specificity",
        "np",
        "append",
        "avgs_specificity",
        "std_specificity",
        "np",
        "append",
        "avgs_hosmer",
        "mean_hosmer",
        "np",
        "append",
        "avgs_hosmer",
        "std_hosmer",
        "np",
        "append",
        "avgs_spiegel",
        "mean_spiegel",
        "np",
        "append",
        "avgs_spiegel",
        "std_spiegel",
        "np",
        "append",
        "avgs_brier",
        "mean_brier",
        "np",
        "append",
        "avgs_brier",
        "std_brier",
        "progress",
        "value",
        "pd",
        "DataFrame",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_specificity",
        "score_precision",
        "score_f1",
        "score_kappa",
        "score_hosmer",
        "score_spiegel",
        "score_brier",
        "pd",
        "DataFrame",
        "avgs_acc",
        "avgs_auc",
        "avgs_recall",
        "avgs_specificity",
        "avgs_precision",
        "avgs_f1",
        "avgs_kappa",
        "avgs_hosmer",
        "avgs_spiegel",
        "avgs_brier",
        "index",
        "model_results",
        "append",
        "model_avgs",
        "model_results",
        "round",
        "round",
        "monitor",
        "iloc",
        "update_display",
        "monitor",
        "display_id",
        "model",
        "fit",
        "data_X",
        "data_y",
        "progress",
        "value",
        "full_name",
        "model",
        "experiment__",
        "append",
        "tup",
        "full_name",
        "nam",
        "model_results",
        "experiment__",
        "append",
        "tup",
        "verbose",
        "clear_output",
        "display",
        "model_results",
        "model",
        "clear_output",
        "model",
        "estimator",
        "ipywidgets",
        "widgets",
        "ipywidgets",
        "widgets",
        "interact",
        "widgets",
        "ToggleButtons",
        "options",
        "description",
        "disabled",
        "button_style",
        "icons",
        "interact",
        "plot_model",
        "estimator",
        "estimator",
        "plot",
        "a",
        "estimator",
        "warnings",
        "warnings",
        "filterwarnings",
        "IPython",
        "display",
        "clear_output",
        "sklearn",
        "clone",
        "copy",
        "deepcopy",
        "estimator",
        "estimator",
        "deepcopy",
        "estimator",
        "stacker_final",
        "pop",
        "stacker_final",
        "pop",
        "stacker_final",
        "pop",
        "stack_models",
        "estimator_list",
        "stacker_final",
        "meta_model",
        "stack_meta_final",
        "method",
        "stack_method_final",
        "restack",
        "stack_restack",
        "finalize",
        "verbose",
        "deepcopy",
        "estimator",
        "stacker_final",
        "pop",
        "stacker_final",
        "pop",
        "stacker_final",
        "pop",
        "create_stacknet",
        "estimator_list",
        "stacker_final",
        "meta_model",
        "stack_meta_final",
        "method",
        "stack_method_final",
        "restack",
        "stack_restack",
        "finalize",
        "verbose",
        "clone",
        "estimator",
        "clear_output",
        "model_final",
        "fit",
        "X",
        "y",
        "estimator",
        "split",
        "model_name",
        "model_name",
        "model_final",
        "experiment__",
        "append",
        "tup",
        "model_final",
        "model",
        "model_name",
        "verbose",
        "warnings",
        "warnings",
        "filterwarnings",
        "model_",
        "append",
        "prep_pipe",
        "model_",
        "append",
        "model",
        "joblib",
        "model_name",
        "joblib",
        "dump",
        "model_",
        "model_name",
        "verbose",
        "model_name",
        "platform",
        "authentication",
        "verbose",
        "warnings",
        "warnings",
        "filterwarnings",
        "sys",
        "platform",
        "authentication",
        "sys",
        "exit",
        "platform",
        "boto3",
        "authentication",
        "get",
        "model_name",
        "boto3",
        "resource",
        "s3",
        "Bucket",
        "bucketname",
        "download_file",
        "filename",
        "filename",
        "model_name",
        "load_model",
        "filename",
        "verbose",
        "verbose",
        "model",
        "joblib",
        "model_name",
        "verbose",
        "joblib",
        "load",
        "model_name",
        "experiment_name",
        "warnings",
        "warnings",
        "filterwarnings",
        "joblib",
        "experiment__",
        "experiment_name",
        "seed",
        "experiment_name",
        "experiment_name",
        "joblib",
        "dump",
        "experiment__",
        "experiment_name",
        "experiment_name",
        "replace_exp",
        "warnings",
        "warnings",
        "filterwarnings",
        "joblib",
        "pandas",
        "pd",
        "IPython",
        "display",
        "display",
        "experiment_name",
        "joblib",
        "load",
        "experiment_name",
        "replace_exp",
        "X",
        "y",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "seed",
        "prep_pipe",
        "temp",
        "temp",
        "Description",
        "temp",
        "temp",
        "temp",
        "temp",
        "temp",
        "temp",
        "temp",
        "i",
        "temp",
        "name",
        "append",
        "i",
        "exp",
        "append",
        "i",
        "pd",
        "DataFrame",
        "name",
        "columns",
        "display",
        "ind",
        "exp",
        "estimator",
        "data",
        "probability_threshold",
        "platform",
        "authentication",
        "warnings",
        "warnings",
        "filterwarnings",
        "sys",
        "numpy",
        "np",
        "pandas",
        "pd",
        "re",
        "sklearn",
        "metrics",
        "copy",
        "deepcopy",
        "IPython",
        "display",
        "clear_output",
        "IPython",
        "display",
        "display",
        "estimator",
        "split",
        "probability_threshold",
        "model_name",
        "sys",
        "exit",
        "probability_threshold",
        "probability_threshold",
        "allowed_types",
        "sys",
        "exit",
        "probability_threshold",
        "probability_threshold",
        "sys",
        "exit",
        "probability_threshold",
        "probability_threshold",
        "sys",
        "exit",
        "deepcopy",
        "estimator",
        "clear_output",
        "estimator",
        "platform",
        "load_model",
        "estimator",
        "platform",
        "authentication",
        "authentication",
        "get",
        "verbose",
        "load_model",
        "estimator",
        "verbose",
        "estimator",
        "estimator_",
        "estimator_",
        "estimator_",
        "pop",
        "estimator_",
        "estimator_",
        "prep_pipe",
        "estimator",
        "estimator",
        "sys",
        "exit",
        "prep_pipe",
        "estimator",
        "estimator",
        "sys",
        "exit",
        "data",
        "X_test",
        "copy",
        "y_test",
        "copy",
        "X_test",
        "copy",
        "y_test",
        "copy",
        "Xtest",
        "reset_index",
        "drop",
        "inplace",
        "ytest",
        "reset_index",
        "drop",
        "inplace",
        "X_test_",
        "reset_index",
        "drop",
        "inplace",
        "y_test_",
        "reset_index",
        "drop",
        "inplace",
        "estimator",
        "estimator",
        "prep_pipe_transformer",
        "transform",
        "data",
        "data",
        "copy",
        "Xtest",
        "reset_index",
        "drop",
        "inplace",
        "X_test_",
        "reset_index",
        "drop",
        "inplace",
        "estimator",
        "estimator",
        "estimator",
        "model",
        "stacker",
        "pop",
        "stacker",
        "pop",
        "stacker",
        "pop",
        "stacker",
        "pop",
        "i",
        "stacker_base",
        "i",
        "split",
        "base_model_names",
        "append",
        "b",
        "i",
        "base_model_names",
        "i",
        "base_level_fixed",
        "append",
        "a",
        "base_level_fixed",
        "append",
        "i",
        "i",
        "base_level_fixed",
        "i",
        "counter",
        "base_level_fixed_2",
        "append",
        "s",
        "counter",
        "base_level_fixed_2",
        "i",
        "stacker_base",
        "stacker_method",
        "i",
        "predict_proba",
        "Xtest",
        "a",
        "i",
        "predict",
        "Xtest",
        "i",
        "predict",
        "Xtest",
        "base_pred",
        "append",
        "a",
        "pd",
        "DataFrame",
        "i",
        "base_pred",
        "pd",
        "DataFrame",
        "i",
        "pd",
        "concat",
        "base_pred_df",
        "a",
        "axis",
        "base_level_fixed",
        "base_pred_df",
        "copy",
        "pd",
        "concat",
        "Xtest",
        "base_pred_df",
        "axis",
        "pd",
        "DataFrame",
        "base_pred_df",
        "level",
        "stacker",
        "pd",
        "DataFrame",
        "model",
        "level",
        "inter_counter",
        "stacker_method",
        "model",
        "predict_proba",
        "base_pred_df",
        "p",
        "model",
        "predict_proba",
        "base_pred_df_no_restack",
        "p",
        "model",
        "predict",
        "base_pred_df",
        "model",
        "predict",
        "base_pred_df_no_restack",
        "model",
        "predict",
        "base_pred_df",
        "model",
        "predict",
        "base_pred_df_no_restack",
        "stacker_method",
        "model",
        "predict_proba",
        "last_level_df",
        "p",
        "model",
        "predict",
        "last_level_df",
        "model",
        "predict",
        "last_level_df",
        "stacker_method",
        "model",
        "predict_proba",
        "combined_df",
        "p",
        "model",
        "predict",
        "combined_df",
        "pd",
        "DataFrame",
        "p",
        "model",
        "split",
        "col",
        "col",
        "inter_counter",
        "model_counter",
        "col",
        "pd",
        "concat",
        "inter_pred_df",
        "p",
        "axis",
        "model_counter",
        "inter_pred_df",
        "copy",
        "inter_counter",
        "pd",
        "concat",
        "combined_df",
        "inter_pred_df",
        "axis",
        "stacker_meta",
        "predict",
        "combined_df",
        "stacker_meta",
        "predict",
        "inter_pred_df",
        "stacker_meta",
        "predict_proba",
        "combined_df",
        "len",
        "pred_prob",
        "i",
        "len",
        "pred_prob",
        "d",
        "append",
        "pred_prob",
        "i",
        "pred_",
        "p_counter",
        "p_counter",
        "d",
        "pred_prob",
        "stacker_meta",
        "predict_proba",
        "inter_pred_df",
        "len",
        "pred_prob",
        "i",
        "len",
        "pred_prob",
        "d",
        "append",
        "pred_prob",
        "i",
        "pred_",
        "p_counter",
        "p_counter",
        "d",
        "pred_prob",
        "probability_threshold",
        "pred_prob",
        "probability_threshold",
        "astype",
        "data",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "metrics",
        "roc_auc_score",
        "ytest",
        "pred_prob",
        "average",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "pos_label",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "pd",
        "DataFrame",
        "sca",
        "sc",
        "recall",
        "specificity",
        "precision",
        "f1",
        "kappa",
        "hosmer",
        "spiegel",
        "brier",
        "df_score",
        "round",
        "display",
        "df_score",
        "pd",
        "DataFrame",
        "pred_",
        "label",
        "astype",
        "data",
        "pd",
        "concat",
        "Xtest",
        "ytest",
        "label",
        "axis",
        "pd",
        "concat",
        "X_test_",
        "label",
        "axis",
        "hasattr",
        "stacker_meta",
        "pd",
        "DataFrame",
        "pred_prob",
        "score",
        "round",
        "pd",
        "concat",
        "X_test_",
        "score",
        "axis",
        "model",
        "stacker",
        "pop",
        "stacker",
        "pop",
        "stacker",
        "pop",
        "i",
        "stacker",
        "np",
        "append",
        "model_names",
        "i",
        "split",
        "i",
        "model_names",
        "i",
        "model_names_fixed",
        "append",
        "a",
        "model_names_fixed",
        "append",
        "i",
        "model_names_fixed",
        "i",
        "model_names",
        "i",
        "counter",
        "model_names_fixed",
        "append",
        "s",
        "counter",
        "model_names_fixed",
        "i",
        "stacker",
        "method",
        "i",
        "predict",
        "Xtest",
        "i",
        "predict_proba",
        "Xtest",
        "p",
        "i",
        "predict",
        "Xtest",
        "base_pred",
        "append",
        "p",
        "pd",
        "DataFrame",
        "i",
        "base_pred",
        "pd",
        "DataFrame",
        "i",
        "pd",
        "concat",
        "df",
        "i",
        "axis",
        "model_names",
        "pd",
        "concat",
        "Xtest",
        "df",
        "axis",
        "df",
        "fillna",
        "value",
        "inplace",
        "df_restack",
        "fillna",
        "value",
        "inplace",
        "meta_model",
        "predict",
        "df",
        "meta_model",
        "predict",
        "df_restack",
        "meta_model",
        "predict_proba",
        "df",
        "len",
        "pred_prob",
        "i",
        "len",
        "pred_prob",
        "d",
        "append",
        "pred_prob",
        "i",
        "pred_",
        "p_counter",
        "p_counter",
        "d",
        "pred_prob",
        "meta_model",
        "predict_proba",
        "df_restack",
        "len",
        "pred_prob",
        "i",
        "len",
        "pred_prob",
        "d",
        "append",
        "pred_prob",
        "i",
        "pred_",
        "p_counter",
        "p_counter",
        "d",
        "pred_prob",
        "probability_threshold",
        "pred_prob",
        "probability_threshold",
        "astype",
        "data",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "metrics",
        "roc_auc_score",
        "ytest",
        "pred_prob",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "pos_label",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "pd",
        "DataFrame",
        "sca",
        "sc",
        "recall",
        "specificity",
        "precision",
        "f1",
        "kappa",
        "hosmer",
        "spiegel",
        "brier",
        "df_score",
        "round",
        "display",
        "df_score",
        "pd",
        "DataFrame",
        "pred_",
        "label",
        "astype",
        "data",
        "pd",
        "concat",
        "Xtest",
        "ytest",
        "label",
        "axis",
        "pd",
        "concat",
        "X_test_",
        "label",
        "axis",
        "hasattr",
        "meta_model",
        "pd",
        "DataFrame",
        "pred_prob",
        "score",
        "round",
        "pd",
        "concat",
        "X_test_",
        "score",
        "axis",
        "model",
        "split",
        "input",
        "re",
        "findall",
        "input",
        "join",
        "words",
        "words",
        "putSpace",
        "full_name",
        "full_name",
        "full_name",
        "full_name",
        "full_name",
        "full_name",
        "full_name",
        "full_name",
        "model",
        "predict",
        "Xtest",
        "model",
        "predict_proba",
        "Xtest",
        "len",
        "pred_prob",
        "i",
        "len",
        "pred_prob",
        "d",
        "append",
        "pred_prob",
        "i",
        "pred_",
        "p_counter",
        "p_counter",
        "d",
        "pred_prob",
        "probability_threshold",
        "pred_prob",
        "probability_threshold",
        "astype",
        "data",
        "metrics",
        "accuracy_score",
        "ytest",
        "pred_",
        "metrics",
        "roc_auc_score",
        "ytest",
        "pred_prob",
        "y",
        "value_counts",
        "count",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "average",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "average",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "metrics",
        "recall_score",
        "ytest",
        "pred_",
        "pos_label",
        "metrics",
        "precision_score",
        "ytest",
        "pred_",
        "metrics",
        "f1_score",
        "ytest",
        "pred_",
        "hosmer_lemeshow",
        "ytest",
        "pred_prob",
        "spiegelhalter",
        "ytest",
        "pred_prob",
        "scaled_brier_score",
        "ytest",
        "pred_prob",
        "metrics",
        "cohen_kappa_score",
        "ytest",
        "pred_",
        "pd",
        "DataFrame",
        "full_name",
        "sca",
        "sc",
        "recall",
        "specificity",
        "precision",
        "f1",
        "kappa",
        "hosmer",
        "spiegel",
        "brier",
        "df_score",
        "round",
        "display",
        "df_score",
        "pd",
        "DataFrame",
        "pred_",
        "label",
        "astype",
        "data",
        "pd",
        "concat",
        "Xtest",
        "ytest",
        "label",
        "axis",
        "pd",
        "concat",
        "X_test_",
        "label",
        "axis",
        "hasattr",
        "model",
        "pd",
        "DataFrame",
        "pred_prob",
        "score",
        "round",
        "pd",
        "concat",
        "X_test_",
        "score",
        "axis",
        "X_test_",
        "model",
        "model_name",
        "authentication",
        "platform",
        "warnings",
        "warnings",
        "filterwarnings",
        "IPython",
        "display",
        "clear_output",
        "finalize_model",
        "model",
        "platform",
        "boto3",
        "save_model",
        "model",
        "model_name",
        "model_name",
        "verbose",
        "boto3",
        "client",
        "model_name",
        "model_name",
        "authentication",
        "get",
        "s3",
        "upload_file",
        "filename",
        "bucket_name",
        "key",
        "clear_output",
        "estimator",
        "true_positive",
        "true_negative",
        "false_positive",
        "false_negative",
        "sys",
        "pandas",
        "pd",
        "numpy",
        "np",
        "plotly",
        "express",
        "px",
        "IPython",
        "display",
        "clear_output",
        "cufflinks",
        "cf",
        "cf",
        "go_offline",
        "cf",
        "set_config_file",
        "offline",
        "world_readable",
        "y",
        "value_counts",
        "count",
        "sys",
        "exit",
        "estimator",
        "split",
        "model_name",
        "sys",
        "exit",
        "estimator",
        "hasattr",
        "estimator",
        "sys",
        "exit",
        "true_positive",
        "allowed_types",
        "sys",
        "exit",
        "true_negative",
        "allowed_types",
        "sys",
        "exit",
        "false_positive",
        "allowed_types",
        "sys",
        "exit",
        "false_negative",
        "allowed_types",
        "sys",
        "exit",
        "estimator",
        "model",
        "split",
        "model_name",
        "np",
        "array",
        "y_test",
        "model",
        "predict_model",
        "model",
        "clear_output",
        "np",
        "array",
        "predicted",
        "sys",
        "exit",
        "model",
        "predict_proba",
        "X_test",
        "predicted",
        "actual",
        "predicted",
        "tp_cost",
        "true_positive",
        "tn_cost",
        "true_negative",
        "fp_cost",
        "false_positive",
        "fn_cost",
        "false_negative",
        "predicted",
        "actual",
        "np",
        "where",
        "tp",
        "tp",
        "sum",
        "predicted",
        "actual",
        "np",
        "where",
        "tn",
        "tn",
        "sum",
        "predicted",
        "actual",
        "astype",
        "np",
        "where",
        "fp",
        "fp",
        "sum",
        "predicted",
        "actual",
        "astype",
        "np",
        "where",
        "fn",
        "fn",
        "sum",
        "tp_cost",
        "tp",
        "tn_cost",
        "tn",
        "fp_cost",
        "fp",
        "fn_cost",
        "fn",
        "total_cost",
        "np",
        "arange",
        "i",
        "grid",
        "predicted",
        "i",
        "astype",
        "cost",
        "append",
        "calculate_loss",
        "actual",
        "pred_prob",
        "pd",
        "DataFrame",
        "grid",
        "cost",
        "px",
        "line",
        "optimize_results",
        "x",
        "y",
        "line_shape",
        "fig",
        "update_layout",
        "plot_bgcolor",
        "model_name",
        "optimize_results",
        "min",
        "optimize_results",
        "max",
        "optimize_results",
        "sort_values",
        "by",
        "ascending",
        "iloc",
        "x0",
        "x0",
        "round",
        "fig",
        "add_shape",
        "x0",
        "x0",
        "y0",
        "y0",
        "x1",
        "x1",
        "y1",
        "y1",
        "line",
        "color",
        "width",
        "fig",
        "update_layout",
        "title",
        "title",
        "fig",
        "show",
        "t",
        "y1",
        "y_true",
        "y_score",
        "numpy",
        "np",
        "pandas",
        "pd",
        "scipy",
        "stats",
        "chi2",
        "y_true",
        "np",
        "ndarray",
        "y_true",
        "values",
        "ravel",
        "pd",
        "DataFrame",
        "y_score",
        "y_true",
        "df",
        "sort_values",
        "np",
        "clip",
        "df",
        "df",
        "shape",
        "pd",
        "qcut",
        "df",
        "n_grp",
        "duplicates",
        "df",
        "groupby",
        "df",
        "score_decile",
        "sum",
        "df",
        "groupby",
        "df",
        "score_decile",
        "count",
        "obsPos",
        "df",
        "groupby",
        "df",
        "score_decile",
        "sum",
        "df",
        "groupby",
        "df",
        "score_decile",
        "count",
        "exPos",
        "obsPos",
        "exPos",
        "exPos",
        "obsNeg",
        "exNeg",
        "exNeg",
        "sum",
        "chi2",
        "cdf",
        "hl",
        "n_grp",
        "p_value",
        "y_true",
        "y_score",
        "numpy",
        "np",
        "scipy",
        "stats",
        "norm",
        "y_true",
        "np",
        "ndarray",
        "y_true",
        "values",
        "ravel",
        "np",
        "sum",
        "y_true",
        "y_score",
        "y_score",
        "np",
        "sum",
        "y_score",
        "y_score",
        "y_score",
        "top",
        "np",
        "sqrt",
        "bot",
        "norm",
        "sf",
        "np",
        "abs",
        "sh",
        "p_value",
        "y_true",
        "y_score",
        "numpy",
        "np",
        "sklearn",
        "metrics",
        "brier_score_loss",
        "y_true",
        "np",
        "ndarray",
        "y_true",
        "values",
        "ravel",
        "brier_score_loss",
        "y_true",
        "y_score",
        "pos_label",
        "np",
        "mean",
        "y_true",
        "brier",
        "p",
        "p",
        "brier_scaled",
        "y_true",
        "y_pred",
        "remove_tr",
        "pandas",
        "pd",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "a",
        "tr",
        "p",
        "v",
        "a",
        "tr",
        "round",
        "p",
        "v",
        "plt",
        "gca",
        "pd",
        "DataFrame",
        "y_true",
        "values",
        "np",
        "arange",
        "min_x",
        "max_x",
        "num_bins",
        "np",
        "arange",
        "min_x",
        "max_x",
        "epsilon",
        "num_bins",
        "np",
        "histogram",
        "y_pred",
        "bins",
        "score_bins",
        "np",
        "histogram",
        "y_pred",
        "bins",
        "score_bins_with_endpoint",
        "np",
        "append",
        "bin_edges",
        "np",
        "digitize",
        "y_pred",
        "bin_edges",
        "bin_edges",
        "bin_indexes",
        "np",
        "setdiff1d",
        "score_bins_with_endpoint",
        "remove_tr",
        "ax",
        "hist",
        "y_pred",
        "bins",
        "score_bins_with_endpoint",
        "rwidth",
        "bar_width",
        "color",
        "edgecolor",
        "alpha",
        "ax",
        "set_xticks",
        "score_bins_with_endpoint",
        "np",
        "hstack",
        "element_bins",
        "reshape",
        "y_true",
        "y_pred",
        "reshape",
        "merged",
        "merged",
        "argsort",
        "np",
        "split",
        "merged_sorted",
        "np",
        "cumsum",
        "np",
        "unique",
        "merged_sorted",
        "return_counts",
        "np",
        "hstack",
        "np",
        "unique",
        "merged_sorted",
        "reshape",
        "np",
        "array",
        "np",
        "mean",
        "g",
        "g",
        "grouped",
        "reshape",
        "score_bins_with_endpoint",
        "tr",
        "bin_edges",
        "round",
        "tr",
        "hist2",
        "p",
        "get_qtd",
        "averages_by_bucket",
        "round",
        "tr",
        "i",
        "qt",
        "qtd_corr",
        "append",
        "round",
        "tr",
        "ax",
        "hist",
        "qtd_corr",
        "bins",
        "score_bins_with_endpoint",
        "rwidth",
        "bar_width",
        "color",
        "hatch",
        "edgecolor",
        "alpha",
        "facecolor",
        "ax",
        "set_ylabel",
        "ax",
        "set_xlabel",
        "ax",
        "set_title",
        "ax",
        "plot",
        "plt",
        "show",
        "x",
        "oMin",
        "oMax",
        "nMin",
        "nMax",
        "oMin",
        "oMax",
        "nMin",
        "nMax",
        "min",
        "oMin",
        "oMax",
        "max",
        "oMin",
        "oMax",
        "oldMin",
        "oMin",
        "min",
        "nMin",
        "nMax",
        "max",
        "nMin",
        "nMax",
        "newMin",
        "nMin",
        "x",
        "oldMin",
        "newMax",
        "newMin",
        "oldMax",
        "oldMin",
        "reverseInput",
        "oldMax",
        "x",
        "newMax",
        "newMin",
        "oldMax",
        "oldMin",
        "portion",
        "newMin",
        "reverseOutput",
        "newMax",
        "portion",
        "result"
    ],
    "literals": [
        "\"constant\"",
        "\"frequency\"",
        "\"mean\"",
        "\"zscore\"",
        "\"yeo-johnson\"",
        "\"least_frequent\"",
        "\"linear\"",
        "\"(Type Error): train_size parameter only accepts float value.\"",
        "\"(Type Error): sampling parameter only accepts True or False.\"",
        "\"(Value Error): Target parameter doesnt exist in the data provided.\"",
        "\"(Type Error): session_id parameter must be an integer.\"",
        "\"(Type Error): profile parameter only accepts True or False.\"",
        "\"(Type Error): normalize parameter only accepts True or False.\"",
        "\"(Type Error): transformation parameter only accepts True or False.\"",
        "\"constant\"",
        "\"mode\"",
        "\"ignore\"",
        "\"(Value Error): categorical_imputation param only accepts 'constant' 'mode' or 'ignore' \"",
        "\"(Type Error): ordinal_features must be of type dictionary with column name as key and ordered values as list. \"",
        "\"(Value Error) Column name passed as a key in ordinal_features param doesnt exist. \"",
        "\"(Value Error) Levels passed in ordinal_features param doesnt match with levels in data. \"",
        "\"Column name '\"",
        "\"' doesnt contain any level named '\"",
        "\"'.\"",
        "\"(Type Error): high_cardinality_features param only accepts name of columns as a list. \"",
        "\"(Value Error): Column type forced is either target column or doesn't exist in the dataset.\"",
        "\"frequency\"",
        "\"clustering\"",
        "\"(Value Error): high_cardinality_method param only accepts 'frequency' or 'clustering' \"",
        "\"mean\"",
        "\"median\"",
        "\"ignore\"",
        "\"(Value Error): numeric_imputation param only accepts 'mean', 'median' or 'ignore'  \"",
        "\"zscore\"",
        "\"minmax\"",
        "\"maxabs\"",
        "\"robust\"",
        "\"(Value Error): normalize_method param only accepts 'zscore', 'minxmax', 'maxabs' or 'robust'. \"",
        "\"yeo-johnson\"",
        "\"quantile\"",
        "\"(Value Error): transformation_method param only accepts 'yeo-johnson' or 'quantile'. \"",
        "\"(Type Error): handle_unknown_categorical parameter only accepts True or False.\"",
        "\"least_frequent\"",
        "\"most_frequent\"",
        "\"(Type Error): unknown_categorical_method only accepts 'least_frequent' or 'most_frequent'.\"",
        "\"(Type Error): PCA parameter only accepts True or False.\"",
        "\"linear\"",
        "\"kernel\"",
        "\"incremental\"",
        "\"(Value Error): pca method param only accepts 'linear', 'kernel', or 'incremental'. \"",
        "\"linear\"",
        "\"(Type Error): pca_components parameter must be integer when pca_method is not 'linear'. \"",
        "\"linear\"",
        "\"(Type Error): pca_components parameter cannot be greater than original features space.\"",
        "\"linear\"",
        "\"(Type Error): pca_components parameter cannot be greater than original features space or float between 0 - 1.\"",
        "\"(Type Error): ignore_low_variance parameter only accepts True or False.\"",
        "\"(Type Error): combine_rare_levels parameter only accepts True or False.\"",
        "\"(Type Error): rare_level_threshold must be a float between 0 and 1. \"",
        "\"(Value Error): Column type forced is either target column or doesn't exist in the dataset.\"",
        "\"(Type Error): remove_outliers parameter only accepts True or False.\"",
        "\"(Type Error): outliers_threshold must be a float between 0 and 1. \"",
        "\"(Type Error): remove_multicollinearity parameter only accepts True or False.\"",
        "\"(Type Error): multicollinearity_threshold must be a float between 0 and 1. \"",
        "\"(Type Error): create_clusters parameter only accepts True or False.\"",
        "\"(Type Error): cluster_iter must be a integer greater than 1. \"",
        "\"(Type Error): polynomial_features only accepts True or False. \"",
        "\"(Type Error): polynomial_degree must be an integer. \"",
        "\"(Type Error): trigonometry_features only accepts True or False. \"",
        "\"(Type Error): polynomial_threshold must be a float between 0 and 1. \"",
        "\"(Type Error): group_features must be of type list. \"",
        "\"(Type Error): group_names must be of type list. \"",
        "\"(Value Error): cannot drop target column. \"",
        "\"(Type Error): feature_selection only accepts True or False. \"",
        "\"(Type Error): feature_selection_threshold must be a float between 0 and 1. \"",
        "\"(Type Error): feature_interaction only accepts True or False. \"",
        "\"(Type Error): feature_ratio only accepts True or False. \"",
        "\"(Type Error): interaction_threshold must be a float between 0 and 1. \"",
        "\"(Value Error): Column type forced is either target column or doesn't exist in the dataset.\"",
        "\"(Value Error): Column type forced is either target column or doesn't exist in the dataset.\"",
        "\"(Value Error): Column type forced is either target column or doesn't exist in the dataset.\"",
        "\"(Value Error): Feature ignored is either target column or doesn't exist in the dataset.\"",
        "\"(Type Error): silent parameter only accepts True or False. \"",
        "\"oss\"",
        "\"enn\"",
        "\"random_under\"",
        "\"smoteenn\"",
        "\"smote\"",
        "\"random_over\"",
        "\"(Type Error): invalid resampling method'.\"",
        "\"display.max_columns\"",
        "\"display.max_rows\"",
        "\"Processing: \"",
        "\"%H:%M:%S\"",
        "\"Initiated\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Status\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Loading Dependencies\"",
        "\"ETC\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Calculating ETC\"",
        "\"\"",
        "\" \"",
        "\"   \"",
        "\"\"",
        "\"monitor\"",
        "\"background-color: lightgreen\"",
        "\"\"",
        "\"ignore\"",
        "\"Preparing Data for Modeling\"",
        "\"monitor\"",
        "\"constant\"",
        "\"not_available\"",
        "\"mode\"",
        "\"most frequent\"",
        "\"ignore\"",
        "\"ignore\"",
        "\"yeo-johnson\"",
        "\"yj\"",
        "\"quantile\"",
        "\"quantile\"",
        "\"linear\"",
        "\"pca_liner\"",
        "\"kernel\"",
        "\"pca_kernal\"",
        "\"incremental\"",
        "\"incremental\"",
        "\"pls\"",
        "\"pls\"",
        "\"linear\"",
        "\"sin\"",
        "\"cos\"",
        "\"tan\"",
        "\"group_\"",
        "\"multiply\"",
        "\"divide\"",
        "\"least_frequent\"",
        "\"least frequent\"",
        "\"most_frequent\"",
        "\"most frequent\"",
        "\"frequency\"",
        "\"count\"",
        "\"clustering\"",
        "\"cluster\"",
        "\"pca\"",
        "\"replacement\"",
        "\"'\"",
        "\"\"",
        "\"{\"",
        "\"\"",
        "\"}\"",
        "\"\"",
        "\"None\"",
        "\"quit\"",
        "\"Quit\"",
        "\"exit\"",
        "\"EXIT\"",
        "\"q\"",
        "\"Q\"",
        "\"e\"",
        "\"E\"",
        "\"QUIT\"",
        "\"Exit\"",
        "\"(Process Exit): setup has been interupted with user command 'quit'. setup must rerun.\"",
        "\"None\"",
        "\"None\"",
        "\"None\"",
        "\"None\"",
        "\"None\"",
        "\"float\"",
        "\"object\"",
        "\"int\"",
        "\"display.max_rows\"",
        "\"display.max_columns\"",
        "\"(\"",
        "\"CatBoostClassifier\"",
        "\"CatBoostClassifier\"",
        "\"Multiclass\"",
        "\"Binary\"",
        "\"10%\"",
        "\"20%\"",
        "\"30%\"",
        "\"40%\"",
        "\"50%\"",
        "\"60%\"",
        "\"70%\"",
        "\"80%\"",
        "\"90%\"",
        "\"100%\"",
        "\"Fitting Model on \"",
        "\" sample\"",
        "\"monitor\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"macro\"",
        "\"Recall\"",
        "\"Recall\"",
        "\"weighted\"",
        "\"Precision\"",
        "\"Precision\"",
        "\"weighted\"",
        "\"F1\"",
        "\"F1\"",
        "\"Kappa\"",
        "\" Seconds Remaining\"",
        "\" Minutes Remaining\"",
        "\"monitor\"",
        "\"Sample\"",
        "\"Metric\"",
        "\"Metric Name\"",
        "\"Sample\"",
        "\"Metric\"",
        "\"Metric Name\"",
        "\"linear\"",
        "\"rgb(245,245,245)\"",
        "\" Metrics and Sample %\"",
        "\"text\"",
        "\"y\"",
        "\"x\"",
        "\"xanchor\"",
        "\"center\"",
        "\"yanchor\"",
        "\"top\"",
        "\"Waiting for input\"",
        "\"monitor\"",
        "\"Please Enter the sample % of data you would like to use for modeling. Example: Enter 0.3 for 30%.\"",
        "\"Press Enter if you would like to use 100% of the data.\"",
        "\" \"",
        "\"Sample Size: \"",
        "\"\"",
        "\"1\"",
        "\" \"",
        "\"Setup Succesfully Completed! Loading Profile Now... Please Wait!\"",
        "\"Setup Succesfully Completed!\"",
        "\"session_id\"",
        "\"Target Type\"",
        "\"Label Encoded\"",
        "\"Original Data\"",
        "\"Missing Values \"",
        "\"Numeric Features \"",
        "\"Categorical Features \"",
        "\"Ordinal Features \"",
        "\"High Cardinality Features \"",
        "\"High Cardinality Method \"",
        "\"Sampled Data\"",
        "\"(\"",
        "\", \"",
        "\")\"",
        "\"Transformed Train Set\"",
        "\"Transformed Test Set\"",
        "\"Numeric Imputer \"",
        "\"Categorical Imputer \"",
        "\"Normalize \"",
        "\"Normalize Method \"",
        "\"Transformation \"",
        "\"Transformation Method \"",
        "\"PCA \"",
        "\"PCA Method \"",
        "\"PCA Components \"",
        "\"Ignore Low Variance \"",
        "\"Combine Rare Levels \"",
        "\"Rare Level Threshold \"",
        "\"Numeric Binning \"",
        "\"Remove Outliers \"",
        "\"Outliers Threshold \"",
        "\"Remove Multicollinearity \"",
        "\"Multicollinearity Threshold \"",
        "\"Clustering \"",
        "\"Clustering Iteration \"",
        "\"Polynomial Features \"",
        "\"Polynomial Degree \"",
        "\"Trignometry Features \"",
        "\"Polynomial Threshold \"",
        "\"Group Features \"",
        "\"Feature Selection \"",
        "\"Features Selection Threshold \"",
        "\"Feature Interaction \"",
        "\"Feature Ratio \"",
        "\"Interaction Threshold \"",
        "\"Description\"",
        "\"Value\"",
        "\"Data Profiler Failed. No output to show, please continue with Modeling.\"",
        "\"Classification Setup Config\"",
        "\"X Set\"",
        "\"y Set\"",
        "\"X_training Set\"",
        "\"y_training Set\"",
        "\"X_test Set\"",
        "\"y_test Set\"",
        "\"Transformation Pipeline\"",
        "\" \"",
        "\"Setup Succesfully Completed! Loading Profile Now... Please Wait!\"",
        "\"Setup Succesfully Completed!\"",
        "\"session_id\"",
        "\"Target Type\"",
        "\"Label Encoded\"",
        "\"Original Data\"",
        "\"Missing Values \"",
        "\"Numeric Features \"",
        "\"Categorical Features \"",
        "\"Ordinal Features \"",
        "\"High Cardinality Features \"",
        "\"High Cardinality Method \"",
        "\"Sampled Data\"",
        "\"(\"",
        "\", \"",
        "\")\"",
        "\"Transformed Train Set\"",
        "\"Transformed Test Set\"",
        "\"Numeric Imputer \"",
        "\"Categorical Imputer \"",
        "\"Normalize \"",
        "\"Normalize Method \"",
        "\"Transformation \"",
        "\"Transformation Method \"",
        "\"PCA \"",
        "\"PCA Method \"",
        "\"PCA Components \"",
        "\"Ignore Low Variance \"",
        "\"Combine Rare Levels \"",
        "\"Rare Level Threshold \"",
        "\"Numeric Binning \"",
        "\"Remove Outliers \"",
        "\"Outliers Threshold \"",
        "\"Remove Multicollinearity \"",
        "\"Multicollinearity Threshold \"",
        "\"Clustering \"",
        "\"Clustering Iteration \"",
        "\"Polynomial Features \"",
        "\"Polynomial Degree \"",
        "\"Trignometry Features \"",
        "\"Polynomial Threshold \"",
        "\"Group Features \"",
        "\"Feature Selection \"",
        "\"Features Selection Threshold \"",
        "\"Feature Interaction \"",
        "\"Feature Ratio \"",
        "\"Interaction Threshold \"",
        "\"Description\"",
        "\"Value\"",
        "\"Data Profiler Failed. No output to show, please continue with Modeling.\"",
        "\"Classification Setup Config\"",
        "\"X Set\"",
        "\"y Set\"",
        "\"X_training Set\"",
        "\"y_training Set\"",
        "\"X_test Set\"",
        "\"y_test Set\"",
        "\"Transformation Pipeline\"",
        "\"Splitting Data\"",
        "\"monitor\"",
        "\"Resampling Data\"",
        "\"monitor\"",
        "\" \"",
        "\"Setup Succesfully Completed! Loading Profile Now... Please Wait!\"",
        "\"Setup Succesfully Completed!\"",
        "\"session_id\"",
        "\"Target Type\"",
        "\"Label Encoded\"",
        "\"Original Data\"",
        "\"Missing Values \"",
        "\"Numeric Features \"",
        "\"Categorical Features \"",
        "\"Ordinal Features \"",
        "\"High Cardinality Features \"",
        "\"High Cardinality Method \"",
        "\"Sampled Data\"",
        "\"(\"",
        "\", \"",
        "\")\"",
        "\"Transformed Train Set\"",
        "\"Transformed Test Set\"",
        "\"Numeric Imputer \"",
        "\"Categorical Imputer \"",
        "\"Normalize \"",
        "\"Normalize Method \"",
        "\"Transformation \"",
        "\"Transformation Method \"",
        "\"PCA \"",
        "\"PCA Method \"",
        "\"PCA Components \"",
        "\"Ignore Low Variance \"",
        "\"Combine Rare Levels \"",
        "\"Rare Level Threshold \"",
        "\"Numeric Binning \"",
        "\"Remove Outliers \"",
        "\"Outliers Threshold \"",
        "\"Remove Multicollinearity \"",
        "\"Multicollinearity Threshold \"",
        "\"Clustering \"",
        "\"Clustering Iteration \"",
        "\"Polynomial Features \"",
        "\"Polynomial Degree \"",
        "\"Trignometry Features \"",
        "\"Polynomial Threshold \"",
        "\"Group Features \"",
        "\"Feature Selection \"",
        "\"Features Selection Threshold \"",
        "\"Feature Interaction \"",
        "\"Feature Ratio \"",
        "\"Interaction Threshold \"",
        "\"Resample Train Data \"",
        "\"Resample Method\"",
        "\"Description\"",
        "\"Value\"",
        "\"Data Profiler Failed. No output to show, please continue with Modeling.\"",
        "\"Classification Setup Config\"",
        "\"X Set\"",
        "\"y Set\"",
        "\"X_training Set\"",
        "\"y_training Set\"",
        "\"X_test Set\"",
        "\"y_test Set\"",
        "\"Transformation Pipeline\"",
        "\"lr\"",
        "\"knn\"",
        "\"nb\"",
        "\"dt\"",
        "\"svm\"",
        "\"rbfsvm\"",
        "\"gpc\"",
        "\"mlp\"",
        "\"ridge\"",
        "\"rf\"",
        "\"qda\"",
        "\"ada\"",
        "\"gbc\"",
        "\"lda\"",
        "\"et\"",
        "\"xgboost\"",
        "\"lightgbm\"",
        "\"catboost\"",
        "\"(Value Error): Estimator Not Available. Please see docstring for list of available estimators.\"",
        "\"(Type Error): Ensemble parameter can only take argument as True or False.\"",
        "\"(Type Error): Method parameter only accepts value when ensemble is set to True.\"",
        "\"(Type Error): Method parameter missing. Pass method = 'Bagging' or 'Boosting'.\"",
        "\"Bagging\"",
        "\"Boosting\"",
        "\"(Value Error): Method parameter only accepts two values 'Bagging' or 'Boosting'.\"",
        "\"(Type Error): Fold parameter only accepts integer value.\"",
        "\"(Type Error): Round parameter only accepts integer value.\"",
        "\"(Type Error): Verbose parameter can only take argument as True or False.\"",
        "\"lda\"",
        "\"qda\"",
        "\"ridge\"",
        "\"mlp\"",
        "\"gpc\"",
        "\"svm\"",
        "\"knn\"",
        "\"catboost\"",
        "\"Boosting\"",
        "\"(Type Error): Estimator does not provide class_weights or predict_proba function and hence not supported for the Boosting method. Change the estimator or method to 'Bagging'.\"",
        "\"Processing: \"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"%H:%M:%S\"",
        "\"Initiated\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Status\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Loading Dependencies\"",
        "\"ETC\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Calculating ETC\"",
        "\"\"",
        "\" \"",
        "\"   \"",
        "\"\"",
        "\"monitor\"",
        "\"ignore\"",
        "\"Selecting Estimator\"",
        "\"monitor\"",
        "\"lr\"",
        "\"Logistic Regression\"",
        "\"knn\"",
        "\"K Nearest Neighbours\"",
        "\"nb\"",
        "\"Naive Bayes\"",
        "\"dt\"",
        "\"Decision Tree\"",
        "\"svm\"",
        "\"Support Vector Machine\"",
        "\"rbfsvm\"",
        "\"auto\"",
        "\"rbf\"",
        "\"RBF SVM\"",
        "\"gpc\"",
        "\"Gaussian Process Classifier\"",
        "\"mlp\"",
        "\"Multi Layer Perceptron\"",
        "\"ridge\"",
        "\"Ridge Classifier\"",
        "\"rf\"",
        "\"Random Forest Classifier\"",
        "\"qda\"",
        "\"Quadratic Discriminant Analysis\"",
        "\"ada\"",
        "\"AdaBoost Classifier\"",
        "\"gbc\"",
        "\"Gradient Boosting Classifier\"",
        "\"lda\"",
        "\"Linear Discriminant Analysis\"",
        "\"et\"",
        "\"Extra Trees Classifier\"",
        "\"xgboost\"",
        "\"Extreme Gradient Boosting\"",
        "\"lightgbm\"",
        "\"Light Gradient Boosting Machine\"",
        "\"catboost\"",
        "\"CatBoost Classifier\"",
        "\"(\"",
        "\"Bagging\"",
        "\"Boosting\"",
        "\"Initializing CV\"",
        "\"monitor\"",
        "\"Fitting Fold \"",
        "\" of \"",
        "\"monitor\"",
        "\"predict_proba\"",
        "\"macro\"",
        "\"weighted\"",
        "\"weighted\"",
        "\"macro\"",
        "\"weighted\"",
        "\"weighted\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\" Seconds Remaining\"",
        "\" Minutes Remaining\"",
        "\"monitor\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"Mean\"",
        "\"SD\"",
        "\"Compiling Final Model\"",
        "\"monitor\"",
        "\" Score Grid\"",
        "\"Bagging\"",
        "\"Bagging\"",
        "\"Boosting\"",
        "\"(Value Error): Method parameter only accepts two values 'Bagging' or 'Boosting'.\"",
        "\"Boosting\"",
        "\"n_classes_\"",
        "\"(Type Error): Estimator does not provide class_weights or predict_proba function and hence not supported for the Boosting method. Change the estimator or method to 'Bagging'.\"",
        "\"(Type Error): Fold parameter only accepts integer value.\"",
        "\"(Type Error): n_estimators parameter only accepts integer value.\"",
        "\"(Type Error): Round parameter only accepts integer value.\"",
        "\"(Type Error): Verbose parameter can only take argument as True or False.\"",
        "\"Processing: \"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"%H:%M:%S\"",
        "\"Initiated\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Status\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Loading Dependencies\"",
        "\"ETC\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Calculating ETC\"",
        "\"\"",
        "\" \"",
        "\"   \"",
        "\"\"",
        "\"monitor\"",
        "\"ignore\"",
        "\"Selecting Estimator\"",
        "\"monitor\"",
        "\"n_classes_\"",
        "\"Bagging\"",
        "\"Initializing CV\"",
        "\"monitor\"",
        "\"Fitting Fold \"",
        "\" of \"",
        "\"monitor\"",
        "\"predict_proba\"",
        "\"macro\"",
        "\"weighted\"",
        "\"weighted\"",
        "\"macro\"",
        "\"weighted\"",
        "\"weighted\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\" Seconds Remaining\"",
        "\" Minutes Remaining\"",
        "\"ETC\"",
        "\"monitor\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Metric\"",
        "\"Measure\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Mean\"",
        "\"SD\"",
        "\"Compiling Final Model\"",
        "\"monitor\"",
        "\"(\"",
        "\" Score Grid\"",
        "\"auc\"",
        "\"auc\"",
        "\"threshold\"",
        "\"pr\"",
        "\"confusion_matrix\"",
        "\"error\"",
        "\"class_report\"",
        "\"boundary\"",
        "\"rfe\"",
        "\"learning\"",
        "\"manifold\"",
        "\"calibration\"",
        "\"calibration_histogram\"",
        "\"vc\"",
        "\"dimension\"",
        "\"feature\"",
        "\"parameter\"",
        "\"ktops\"",
        "\"accuracy\"",
        "\"risk_density\"",
        "\"pairplot\"",
        "\"shapley\"",
        "\"(Value Error): Plot Not Available. Please see docstring for list of available Plots.\"",
        "\"calibration\"",
        "\"threshold\"",
        "\"manifold\"",
        "\"rfe\"",
        "\"ktops\"",
        "\"accuracy\"",
        "\"risk_density\"",
        "\"pairplot\"",
        "\"(Value Error): Plot Not Available for multiclass problems. Please see docstring for list of available Plots.\"",
        "\"CatBoostClassifier\"",
        "\"(Estimator Error): CatBoost estimator is not compatible with plot_model function, try using Catboost with interpret_model instead. You can also use MLFlowUtils.binary_classification_metrics.\"",
        "\"predict_proba\"",
        "\"calibration\"",
        "\"(Type Error): Calibration plot not available for estimators with no predict_proba attribute.\"",
        "\"max_features\"",
        "\"rfe\"",
        "\"(Type Error): RFE plot not available when max_features parameter is not set to None.\"",
        "\"coef_\"",
        "\"feature_importances_\"",
        "\"feature\"",
        "\"(Type Error): Feature Importance plot not available for estimators that doesnt support coef_ or feature_importances_ attribute.\"",
        "\"display.max_columns\"",
        "\"figure.figsize\"",
        "\"ggplot\"",
        "\"font.family\"",
        "\"serif\"",
        "\"font.serif\"",
        "\"Ubuntu\"",
        "\"font.monospace\"",
        "\"Ubuntu Mono\"",
        "\"font.size\"",
        "\"axes.labelsize\"",
        "\"axes.labelweight\"",
        "\"bold\"",
        "\"xtick.labelsize\"",
        "\"ytick.labelsize\"",
        "\"legend.fontsize\"",
        "\"figure.titlesize\"",
        "\"axes.titlesize\"",
        "\"Processing: \"",
        "\"ignore\"",
        "\"auc\"",
        "\"predict_proba\"",
        "\"(\"",
        "'b'",
        "'AUC = %0.2f'",
        "'lower right'",
        "\"ROC Curves for \"",
        "\"False Positive Rate\"",
        "\"True Positive Rate\"",
        "\"threshold\"",
        "\"pairplot\"",
        "'Plot generated using training data'",
        "'hist'",
        "\"pr\"",
        "\"confusion_matrix\"",
        "\"Greens\"",
        "\"error\"",
        "\"class_report\"",
        "\"boundary\"",
        "\"float64\"",
        "\"float64\"",
        "\"Feature One\"",
        "\"Feature Two\"",
        "\"A\"",
        "\"B\"",
        "\"rfe\"",
        "\"learning\"",
        "\"manifold\"",
        "\"float64\"",
        "\"tsne\"",
        "\"calibration\"",
        "\"(\"",
        "\"k:\"",
        "\"Perfectly calibrated\"",
        "\"s-\"",
        "\"%s\"",
        "\"Fraction of positives\"",
        "\"lower right\"",
        "\"Calibration plots  (reliability curve)\"",
        "\"grey\"",
        "\"-\"",
        "\"calibration_histogram\"",
        "\"(\"",
        "\"k:\"",
        "\"Perfectly calibrated\"",
        "\"s-\"",
        "\"%s\"",
        "\"Fraction of positives\"",
        "\"lower right\"",
        "\"Calibration plots  (reliability curve)\"",
        "'darkgray'",
        "'off'",
        "\"grey\"",
        "\"-\"",
        "\"accuracy\"",
        "\"risk_density\"",
        "\"shade\"",
        "'b'",
        "'Class 0'",
        "\"shade\"",
        "'r'",
        "'Class 1'",
        "'risk scores'",
        "'Density'",
        "\"ktops\"",
        "\"(\"",
        "f'Using 20% rows of the test set (n = {k_tops})'",
        "\"prob\"",
        "\"predicted_class\"",
        "\"real\"",
        "\"result\"",
        "\"predicted_class\"",
        "\"real\"",
        "\"prob\"",
        "f\"Positive rows in the test set= {np.sum(y_test, axis=0)}\"",
        "\"result\"",
        "f\"True positive predictions in the 20% k-tops =  {total_ktops}\"",
        "f\"% of accuracy = {perc * 100}%\"",
        "\"vc\"",
        "\"(\"",
        "\"SGDClassifier\"",
        "\"l1_ratio\"",
        "\"LinearDiscriminantAnalysis\"",
        "\"(Value Error): Shrinkage Parameter not supported in Validation Curve Plot.\"",
        "\"max_depth\"",
        "\"max_depth\"",
        "\"n_neighbors\"",
        "\"n_neighbors\"",
        "\"alpha\"",
        "\"alpha\"",
        "\"C\"",
        "\"C\"",
        "\"n_estimators\"",
        "\"n_estimators\"",
        "\"n_estimators\"",
        "\"n_estimators\"",
        "\"var_smoothing\"",
        "\"var_smoothing\"",
        "\"reg_param\"",
        "\"reg_param\"",
        "\"max_iter_predict\"",
        "\"max_iter_predict\"",
        "\"(Type Error): Plot not supported for this estimator. Try different estimator.\"",
        "\"dimension\"",
        "\"float64\"",
        "\"feature\"",
        "\"coef_\"",
        "\"Variable\"",
        "\"Value\"",
        "\"Value\"",
        "\"Value\"",
        "\"Value\"",
        "\"Value\"",
        "\"skyblue\"",
        "\"Value\"",
        "\"o\"",
        "\"Variable\"",
        "\"Feature Importance Plot\"",
        "\"Variable Importance\"",
        "\"Features\"",
        "\"parameter\"",
        "\"index\"",
        "\"Parameters\"",
        "\"shapley\"",
        "\"AUC\"",
        "\"lr\"",
        "\"knn\"",
        "\"nb\"",
        "\"dt\"",
        "\"svm\"",
        "\"rbfsvm\"",
        "\"gpc\"",
        "\"mlp\"",
        "\"ridge\"",
        "\"rf\"",
        "\"qda\"",
        "\"ada\"",
        "\"gbc\"",
        "\"lda\"",
        "\"et\"",
        "\"xgboost\"",
        "\"lightgbm\"",
        "\"catboost\"",
        "\"(Value Error): Estimator Not Available. Please see docstring for list of available estimators.\"",
        "\"(Type Error): Fold parameter only accepts integer value.\"",
        "\"(Type Error): Round parameter only accepts integer value.\"",
        "\"Accuracy\"",
        "\"Recall\"",
        "\"Precision\"",
        "\"F1\"",
        "\"AUC\"",
        "\"Kappa\"",
        "\"(Value Error): Sort method not supported. See docstring for list of available parameters.\"",
        "\"AUC\"",
        "\"(Type Error): AUC metric not supported for multiclass problems. See docstring for list of other optimization parameters.\"",
        "\"Processing: \"",
        "\"Model\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"%H:%M:%S\"",
        "\"Initiated\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Status\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Loading Dependencies\"",
        "\"Estimator\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Compiling Library\"",
        "\"ETC\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Calculating ETC\"",
        "\"\"",
        "\" \"",
        "\"   \"",
        "\"\"",
        "\"monitor\"",
        "\"ignore\"",
        "\"Precision\"",
        "\"Prec.\"",
        "\"Loading Estimator\"",
        "\"monitor\"",
        "\"auto\"",
        "\"rbf\"",
        "\"Logistic Regression\"",
        "\"K Neighbors Classifier\"",
        "\"Naive Bayes\"",
        "\"Decision Tree Classifier\"",
        "\"SVM - Linear Kernel\"",
        "\"SVM - Radial Kernel\"",
        "\"Gaussian Process Classifier\"",
        "\"MLP Classifier\"",
        "\"Ridge Classifier\"",
        "\"Random Forest Classifier\"",
        "\"Quadratic Discriminant Analysis\"",
        "\"Ada Boost Classifier\"",
        "\"Gradient Boosting Classifier\"",
        "\"Linear Discriminant Analysis\"",
        "\"Extra Trees Classifier\"",
        "\"Extreme Gradient Boosting\"",
        "\"Light Gradient Boosting Machine\"",
        "\"CatBoost Classifier\"",
        "\"lr\"",
        "\"knn\"",
        "\"nb\"",
        "\"dt\"",
        "\"svm\"",
        "\"rbfsvm\"",
        "\"gpc\"",
        "\"mlp\"",
        "\"ridge\"",
        "\"rf\"",
        "\"qda\"",
        "\"ada\"",
        "\"gbc\"",
        "\"lda\"",
        "\"et\"",
        "\"xgboost\"",
        "\"lightgbm\"",
        "\"catboost\"",
        "\"lr\"",
        "\"knn\"",
        "\"nb\"",
        "\"dt\"",
        "\"svm\"",
        "\"rbfsvm\"",
        "\"gpc\"",
        "\"mlp\"",
        "\"ridge\"",
        "\"rf\"",
        "\"qda\"",
        "\"ada\"",
        "\"gbc\"",
        "\"lda\"",
        "\"et\"",
        "\"xgboost\"",
        "\"lightgbm\"",
        "\"catboost\"",
        "\"rbfsvm\"",
        "\"gpc\"",
        "\"mlp\"",
        "\"Logistic Regression\"",
        "\"K Neighbors Classifier\"",
        "\"Naive Bayes\"",
        "\"Decision Tree Classifier\"",
        "\"SVM - Linear Kernel\"",
        "\"Ridge Classifier\"",
        "\"Random Forest Classifier\"",
        "\"Quadratic Discriminant Analysis\"",
        "\"Ada Boost Classifier\"",
        "\"Gradient Boosting Classifier\"",
        "\"Linear Discriminant Analysis\"",
        "\"Extra Trees Classifier\"",
        "\"Extreme Gradient Boosting\"",
        "\"Light Gradient Boosting Machine\"",
        "\"CatBoost Classifier\"",
        "\"Initializing CV\"",
        "\"monitor\"",
        "\"Calculating ETC\"",
        "\"monitor\"",
        "\"Fitting Fold \"",
        "\" of \"",
        "\"monitor\"",
        "\"predict_proba\"",
        "\"macro\"",
        "\"weighted\"",
        "\"weighted\"",
        "\"macro\"",
        "\"weighted\"",
        "\"weighted\"",
        "\" Seconds Remaining\"",
        "\" Minutes Remaining\"",
        "\"monitor\"",
        "\"Model\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"Compare Models Score Grid\"",
        "\"background-color: yellow\"",
        "\"\"",
        "\"Accuracy\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"text-align\"",
        "\"left\"",
        "\"th\"",
        "\"text-align\"",
        "\"left\"",
        "\"AUC\"",
        "\"lr\"",
        "\"knn\"",
        "\"nb\"",
        "\"dt\"",
        "\"svm\"",
        "\"rbfsvm\"",
        "\"gpc\"",
        "\"mlp\"",
        "\"ridge\"",
        "\"rf\"",
        "\"qda\"",
        "\"ada\"",
        "\"gbc\"",
        "\"lda\"",
        "\"et\"",
        "\"xgboost\"",
        "\"lightgbm\"",
        "\"catboost\"",
        "\"(Value Error): Estimator Not Available. Please see docstring for list of available estimators.\"",
        "\"(Type Error): Ensemble parameter can only take argument as True or False.\"",
        "\"(Type Error): Method parameter only accepts value when ensemble is set to True.\"",
        "\"(Type Error): Method parameter missing. Pass method = 'Bagging' or 'Boosting'.\"",
        "\"Bagging\"",
        "\"Boosting\"",
        "\"(Value Error): Method parameter only accepts two values 'Bagging' or 'Boosting'.\"",
        "\"(Type Error): Fold parameter only accepts integer value.\"",
        "\"(Type Error): Round parameter only accepts integer value.\"",
        "\"(Type Error): n_iter parameter only accepts integer value.\"",
        "\"Accuracy\"",
        "\"Recall\"",
        "\"Precision\"",
        "\"F1\"",
        "\"AUC\"",
        "\"Average_Precision\"",
        "\"(Value Error): Optimization method not supported. See docstring for list of available parameters.\"",
        "\"AUC\"",
        "\"(Type Error): AUC metric not supported for multiclass problems. See docstring for list of other optimization parameters.\"",
        "\"(Type Error): n_iter parameter only accepts integer value.\"",
        "\"(Type Error): Verbose parameter can only take argument as True or False.\"",
        "\"lda\"",
        "\"qda\"",
        "\"ridge\"",
        "\"mlp\"",
        "\"gpc\"",
        "\"svm\"",
        "\"knn\"",
        "\"catboost\"",
        "\"Boosting\"",
        "\"(Type Error): Estimator does not provide class_weights or predict_proba function and hence not supported for the Boosting method. Change the estimator or method to 'Bagging'.\"",
        "\"Processing: \"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"%H:%M:%S\"",
        "\"Initiated\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Status\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Loading Dependencies\"",
        "\"ETC\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Calculating ETC\"",
        "\"\"",
        "\" \"",
        "\"   \"",
        "\"\"",
        "\"monitor\"",
        "\"ignore\"",
        "\"ignore\"",
        "\"Accuracy\"",
        "\"accuracy\"",
        "\"AUC\"",
        "\"roc_auc\"",
        "\"Recall\"",
        "\"macro\"",
        "\"recall\"",
        "\"Precision\"",
        "\"weighted\"",
        "\"precision\"",
        "\"F1\"",
        "\"weighted\"",
        "\"f1\"",
        "\"Average_Precision\"",
        "\"weighted\"",
        "\"average_precision\"",
        "\"Tuning Hyperparameters\"",
        "\"monitor\"",
        "\"knn\"",
        "\"n_neighbors\"",
        "\"weights\"",
        "\"uniform\"",
        "\"distance\"",
        "\"metric\"",
        "\"euclidean\"",
        "\"manhattan\"",
        "\"lr\"",
        "\"C\"",
        "\"penalty\"",
        "\"l1\"",
        "\"l2\"",
        "\"class_weight\"",
        "\"balanced\"",
        "\"dt\"",
        "\"max_depth\"",
        "\"max_features\"",
        "\"min_samples_leaf\"",
        "\"criterion\"",
        "\"gini\"",
        "\"entropy\"",
        "\"mlp\"",
        "\"activation\"",
        "\"x_activation\"",
        "\"relu\"",
        "\"tanh\"",
        "\"solver\"",
        "\"x_solver\"",
        "\"adam\"",
        "\"lbfgs\"",
        "\"sgd\"",
        "\"alpha\"",
        "\"x_alpha\"",
        "\"max_iter\"",
        "\"max_iter\"",
        "\"hidden_layer_sizes\"",
        "\"hidden\"",
        "\"batch_size\"",
        "\"batch\"",
        "\"learning_rate_init\"",
        "\"learning\"",
        "\"Running Hyperopt\"",
        "\"monitor\"",
        "\"ann\"",
        "\"learning_rate\"",
        "\"constant\"",
        "\"invscaling\"",
        "\"adaptive\"",
        "\"solver\"",
        "\"lbfgs\"",
        "\"sgd\"",
        "\"adam\"",
        "\"alpha\"",
        "\"hidden_layer_sizes\"",
        "\"activation\"",
        "\"tanh\"",
        "\"identity\"",
        "\"logistic\"",
        "\"relu\"",
        "\"gpc\"",
        "\"max_iter_predict\"",
        "\"rbfsvm\"",
        "'C'",
        "\"x_C\"",
        "'gamma'",
        "\"x_gamma\"",
        "'kernel'",
        "\"x_kernel\"",
        "'rbf'",
        "\"Running Hyperopt\"",
        "\"monitor\"",
        "\"svc\"",
        "\"C\"",
        "\"class_weight\"",
        "\"balanced\"",
        "\"auto\"",
        "\"rbf\"",
        "\"nb\"",
        "\"var_smoothing\"",
        "\"svm\"",
        "'loss'",
        "\"x_loss\"",
        "\"hinge\"",
        "\"log\"",
        "\"squared_hinge\"",
        "\"modified_huber\"",
        "'alpha'",
        "\"x_alpha\"",
        "'penalty'",
        "\"x_penalty\"",
        "\"l2\"",
        "\"l1\"",
        "\"elasticnet\"",
        "\"none\"",
        "'fit_intercept'",
        "\"x_fit_intercept\"",
        "'eta0'",
        "\"x_eta0\"",
        "'learning_rate'",
        "\"x_learning_rate\"",
        "\"constant\"",
        "\"optimal\"",
        "\"invscaling\"",
        "\"adaptive\"",
        "\"Running Hyperopt\"",
        "\"monitor\"",
        "\"SGDClassifier\"",
        "\"penalty\"",
        "\"l2\"",
        "\"l1\"",
        "\"elasticnet\"",
        "\"l1_ratio\"",
        "\"alpha\"",
        "\"fit_intercept\"",
        "\"learning_rate\"",
        "\"constant\"",
        "\"optimal\"",
        "\"invscaling\"",
        "\"adaptive\"",
        "\"eta0\"",
        "\"hinge\"",
        "\"ridge\"",
        "\"alpha\"",
        "\"fit_intercept\"",
        "\"normalize\"",
        "\"rf\"",
        "\"criterion\"",
        "\"x_criterion\"",
        "\"gini\"",
        "\"entropy\"",
        "\"n_estimators\"",
        "\"x_n_estimators\"",
        "\"max_features\"",
        "\"x_max_features\"",
        "\"log2\"",
        "\"sqrt\"",
        "\"max_depth\"",
        "\"x_max_depth\"",
        "\"min_samples_split\"",
        "\"x_min_samples_split\"",
        "\"min_samples_leaf\"",
        "\"x_min_samples_leaf\"",
        "\"bootstrap\"",
        "\"x_boostrap\"",
        "\"Running Hyperopt\"",
        "\"monitor\"",
        "\"rf\"",
        "\"n_estimators\"",
        "\"criterion\"",
        "\"gini\"",
        "\"entropy\"",
        "\"max_depth\"",
        "\"min_samples_split\"",
        "\"min_samples_leaf\"",
        "\"max_features\"",
        "\"auto\"",
        "\"sqrt\"",
        "\"log2\"",
        "\"bootstrap\"",
        "\"ada\"",
        "\"n_estimators\"",
        "\"learning_rate\"",
        "\"algorithm\"",
        "\"SAMME\"",
        "\"SAMME.R\"",
        "\"gbc\"",
        "\"n_estimators\"",
        "\"learning_rate\"",
        "\"subsample\"",
        "\"min_samples_split\"",
        "\"min_samples_leaf\"",
        "\"max_depth\"",
        "\"max_features\"",
        "\"auto\"",
        "\"sqrt\"",
        "\"log2\"",
        "\"qda\"",
        "\"reg_param\"",
        "\"lda\"",
        "\"solver\"",
        "\"lsqr\"",
        "\"eigen\"",
        "\"shrinkage\"",
        "\"et\"",
        "\"n_estimators\"",
        "\"criterion\"",
        "\"gini\"",
        "\"entropy\"",
        "\"max_depth\"",
        "\"min_samples_split\"",
        "\"min_samples_leaf\"",
        "\"max_features\"",
        "\"auto\"",
        "\"sqrt\"",
        "\"log2\"",
        "\"bootstrap\"",
        "\"xgboost\"",
        "\"max_depth\"",
        "\"x_max_depth\"",
        "'learning_rate'",
        "'x_learning_rate'",
        "\"subsample\"",
        "\"x_subsample\"",
        "\"colsample_bytree\"",
        "\"x_colsample_bytree\"",
        "\"n_estimators\"",
        "\"x_n_estimators\"",
        "\"scale_pos_weight\"",
        "\"x_n_scale_pos_weight\"",
        "\"min_child_weight\"",
        "\"x_min_child_weight\"",
        "\"gamma\"",
        "\"x_gamma\"",
        "\"reg_alpha\"",
        "\"x_reg_alpha\"",
        "\"Running Hyperopt for xgboost\"",
        "\"monitor\"",
        "\"xgb\"",
        "\"learning_rate\"",
        "\"n_estimators\"",
        "\"subsample\"",
        "\"max_depth\"",
        "\"colsample_bytree\"",
        "\"min_child_weight\"",
        "\"num_class\"",
        "\"learning_rate\"",
        "\"n_estimators\"",
        "\"subsample\"",
        "\"max_depth\"",
        "\"colsample_bytree\"",
        "\"min_child_weight\"",
        "\"lightgbm\"",
        "'class_weight'",
        "'p1_class_weight'",
        "'balanced'",
        "'n_estimators'",
        "'x_n_estimators'",
        "\"num_leaves\"",
        "\"p3_num_leaves\"",
        "'reg_alpha'",
        "'p7_reg_alpha'",
        "'reg_lambda'",
        "'p8_reg_lambda'",
        "'colsample_bytree'",
        "'p9_colsample_bytree'",
        "'scale_pos_weight'",
        "'scale_pos_weight'",
        "\"Running Hyperopt\"",
        "\"monitor\"",
        "\"lgb\"",
        "\"num_leaves\"",
        "\"max_depth\"",
        "\"learning_rate\"",
        "\"n_estimators\"",
        "\"min_split_gain\"",
        "\"reg_alpha\"",
        "\"reg_lambda\"",
        "\"catboost\"",
        "'n_estimators'",
        "'n_estimators'",
        "'max_depth'",
        "'max_depth'",
        "'learning_rate'",
        "'learning_rate'",
        "'l2_leaf_reg'",
        "'l2_leaf_reg'",
        "'border_count'",
        "'border_count'",
        "\"Running Hyperopt\"",
        "\"monitor\"",
        "\"catboost\"",
        "\"depth\"",
        "\"iterations\"",
        "\"learning_rate\"",
        "\"l2_leaf_reg\"",
        "\"border_count\"",
        "\"Tuning Hyperparameters of Ensemble\"",
        "\"monitor\"",
        "\"dt\"",
        "\"Bagging\"",
        "\"n_estimators\"",
        "\"bootstrap\"",
        "\"bootstrap_features\"",
        "\"max_depth\"",
        "\"min_samples_leaf\"",
        "\"criterion\"",
        "\"gini\"",
        "\"entropy\"",
        "\"Bagging\"",
        "\"n_estimators\"",
        "\"bootstrap\"",
        "\"bootstrap_features\"",
        "\"Boosting\"",
        "\"n_estimators\"",
        "\"learning_rate\"",
        "\"Initializing CV\"",
        "\"monitor\"",
        "\"Fitting Fold \"",
        "\" of \"",
        "\"monitor\"",
        "\"predict_proba\"",
        "\"macro\"",
        "\"weighted\"",
        "\"weighted\"",
        "\"macro\"",
        "\"weighted\"",
        "\"weighted\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\" Seconds Remaining\"",
        "\" Minutes Remaining\"",
        "\"ETC\"",
        "\"monitor\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"Mean\"",
        "\"SD\"",
        "\"Compiling Final Model\"",
        "\"monitor\"",
        "\"Tuned \"",
        "\"(\"",
        "\" Score Grid\"",
        "\"f1\"",
        "\"Hyperopt --- Hyperopt Bayesian Optimization\"",
        "\"lr\"",
        "\"rf\"",
        "\"Hyperparameters: \"",
        "\"xgb\"",
        "\"binary:logistic\"",
        "\"Hyperparameters: \"",
        "\"dt\"",
        "\"Hyperparameters: \"",
        "\"catboost\"",
        "\"Hyperparameters: \"",
        "\"extratrees\"",
        "\"Hyperparameters: \"",
        "\"svc\"",
        "\"Hyperparameters: \"",
        "\"ann\"",
        "\"Hyperparameters: \"",
        "\"lgb\"",
        "\"Hyperparameters: \"",
        "\"knn\"",
        "\"Hyperparameters: \"",
        "\"Invalid model_name - Please specify one of the supported model_name: rf, xgb, ann, dt, svc, lgr, knn or catboost\"",
        "\"misc\"",
        "\"vals\"",
        "\"Iteration\"",
        "\"%Y%m%d-%H:%M\"",
        "f\"Hyperopt_{model_name}_{st}.csv\"",
        "f\"Arquivo Hyperopt_{model_name}_{st}.csv gerado com sucesso.\"",
        "f\"Hyperopt search took %.2f seconds for {max_evals} candidates\"",
        "\"** Best Hyperparameters are: **\"",
        "'All'",
        "'hard'",
        "'All'",
        "'sklearn'",
        "'CatBoostClassifier'",
        "\"(Value Error): estimator_list parameter only accepts 'All' as string or trained model object\"",
        "'All'",
        "'soft'",
        "'predict_proba'",
        "'(Type Error): Estimator list contains estimator that doesnt support probabilities and method is forced to soft. Either change the method or drop the estimator.'",
        "'All'",
        "'CatBoostClassifier'",
        "'(Type Error): CatBoost Classifier not supported in this function.'",
        "'(Type Error): Fold parameter only accepts integer value.'",
        "'(Type Error): Round parameter only accepts integer value.'",
        "'soft'",
        "'hard'",
        "\"(Value Error): Method parameter only accepts 'soft' or 'hard' as a parameter. See Docstring for details.\"",
        "'(Type Error): Turbo parameter can only take argument as True or False.'",
        "'(Type Error): Verbose parameter can only take argument as True or False.'",
        "'Processing: '",
        "'Accuracy'",
        "'AUC'",
        "'Recall'",
        "'Prec.'",
        "'F1'",
        "'Kappa'",
        "\"%H:%M:%S\"",
        "'Initiated'",
        "'. . . . . . . . . . . . . . . . . .'",
        "'Status'",
        "'. . . . . . . . . . . . . . . . . .'",
        "'Loading Dependencies'",
        "'ETC'",
        "'. . . . . . . . . . . . . . . . . .'",
        "'Calculating ETC'",
        "''",
        "' '",
        "'   '",
        "''",
        "'monitor'",
        "'ignore'",
        "'Compiling Estimators'",
        "'monitor'",
        "'All'",
        "'auto'",
        "'rbf'",
        "'hard'",
        "'hard'",
        "'soft'",
        "'soft'",
        "'hard'",
        "'hard'",
        "'soft'",
        "'soft'",
        "\"(\"",
        "'[A-Z][a-z]*'",
        "' '",
        "'Gaussian N B'",
        "'Naive Bayes'",
        "'M L P Classifier'",
        "'MLP Classifier'",
        "'S G D Classifier'",
        "'SVM - Linear Kernel'",
        "'S V C'",
        "'SVM - Radial Kernel'",
        "'X G B Classifier'",
        "'Extreme Gradient Boosting'",
        "'L G B M Classifier'",
        "'Light Gradient Boosting Machine'",
        "'_'",
        "'Initializing CV'",
        "'monitor'",
        "'Fitting Fold '",
        "' of '",
        "'monitor'",
        "'hard'",
        "'macro'",
        "'weighted'",
        "'weighted'",
        "'macro'",
        "'weighted'",
        "'weighted'",
        "'Accuracy'",
        "'AUC'",
        "'Recall'",
        "'Prec.'",
        "'F1'",
        "'Kappa'",
        "' Seconds Remaining'",
        "' Minutes Remaining'",
        "'monitor'",
        "'Accuracy'",
        "'AUC'",
        "'Recall'",
        "'Prec.'",
        "'F1'",
        "'Kappa'",
        "'Accuracy'",
        "'AUC'",
        "'Recall'",
        "'Prec.'",
        "'F1'",
        "'Kappa'",
        "'Mean'",
        "'SD'",
        "'Compiling Final Model'",
        "'monitor'",
        "'Voting Classifier'",
        "' Score Grid'",
        "\"soft\"",
        "\"hard\"",
        "\"sklearn\"",
        "\"CatBoostClassifier\"",
        "\"(Value Error): estimator_list parameter only trained model object\"",
        "\"sklearn\"",
        "\"CatBoostClassifier\"",
        "\"(Value Error): estimator_list parameter only accepts trained model object\"",
        "\"soft\"",
        "\"(Type Error): method 'soft' not supported for multiclass problems.\"",
        "\"(Type Error): Fold parameter only accepts integer value.\"",
        "\"(Type Error): Round parameter only accepts integer value.\"",
        "\"soft\"",
        "\"hard\"",
        "\"(Value Error): Method parameter only accepts 'soft' or 'hard' as a parameter. See Docstring for details.\"",
        "\"(Type Error): Restack parameter can only take argument as True or False.\"",
        "\"(Type Error): Plot parameter can only take argument as True or False.\"",
        "\"(Type Error): Verbose parameter can only take argument as True or False.\"",
        "\"Processing: \"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"%H:%M:%S\"",
        "\"Initiated\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Status\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Loading Dependencies\"",
        "\"ETC\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Calculating ETC\"",
        "\"\"",
        "\" \"",
        "\"   \"",
        "\"\"",
        "\"monitor\"",
        "\"ignore\"",
        "\"soft\"",
        "\"predict_proba\"",
        "\"hard\"",
        "\"predict\"",
        "\"(\"",
        "\"CatBoostClassifier\"",
        "\"CatBoostClassifier\"",
        "\"_\"",
        "\"Evaluating \"",
        "\"monitor\"",
        "\"predict\"",
        "\"soft\"",
        "\"hard\"",
        "\"Fitting Meta Model Fold \"",
        "\" of \"",
        "\"monitor\"",
        "\"macro\"",
        "\"weighted\"",
        "\"weighted\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\" Seconds Remaining\"",
        "\" Minutes Remaining\"",
        "\"monitor\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Mean\"",
        "\"SD\"",
        "\"Stacking Classifier (Single Layer)\"",
        "\" Score Grid\"",
        "\"magma\"",
        "\"soft\"",
        "\"hard\"",
        "\"(Type Error): estimator_list parameter must be list of list. \"",
        "\"(Type Error): Single Layer stacking must be performed using stack_models(). \"",
        "\"sklearn\"",
        "\"CatBoostClassifier\"",
        "\"(Value Error): estimator_list parameter only trained model object\"",
        "\"sklearn\"",
        "\"CatBoostClassifier\"",
        "\"(Value Error): estimator_list parameter only trained model object\"",
        "\"soft\"",
        "\"(Type Error): method 'soft' not supported for multiclass problems.\"",
        "\"(Type Error): Fold parameter only accepts integer value.\"",
        "\"(Type Error): Round parameter only accepts integer value.\"",
        "\"soft\"",
        "\"hard\"",
        "\"(Value Error): Method parameter only accepts 'soft' or 'hard' as a parameter. See Docstring for details.\"",
        "\"(Type Error): Restack parameter can only take argument as True or False.\"",
        "\"(Type Error): Verbose parameter can only take argument as True or False.\"",
        "\"Processing: \"",
        "\"%H:%M:%S\"",
        "\"Initiated\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Status\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Loading Dependencies\"",
        "\"ETC\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Calculating ETC\"",
        "\"\"",
        "\" \"",
        "\"   \"",
        "\"\"",
        "\"monitor\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"ignore\"",
        "\"(\"",
        "\"CatBoostClassifier\"",
        "\"CatBoostClassifier\"",
        "\"_\"",
        "\"BaseLevel_\"",
        "\"CatBoostClassifier\"",
        "\"(\"",
        "\"CatBoostClassifier\"",
        "\"(\"",
        "\"soft\"",
        "\"predict_proba\"",
        "\"hard\"",
        "\"predict\"",
        "\"Evaluating \"",
        "\"monitor\"",
        "\"soft\"",
        "\"predict\"",
        "\"predict\"",
        "\"Evaluating \"",
        "\"monitor\"",
        "\"soft\"",
        "\"predict\"",
        "\"predict\"",
        "\"(\"",
        "\"CatBoostClassifier\"",
        "\"CatBoostClassifier\"",
        "\"_InterLevel_\"",
        "\"_\"",
        "\"Fitting Meta Model Fold \"",
        "\" of \"",
        "\"monitor\"",
        "\"macro\"",
        "\"weighted\"",
        "\"weighted\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\" Seconds Remaining\"",
        "\" Minutes Remaining\"",
        "\"monitor\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Mean\"",
        "\"SD\"",
        "\"Stacking Classifier (Multi Layer)\"",
        "\" Score Grid\"",
        "\"summary\"",
        "\"RandomForestClassifier\"",
        "\"DecisionTreeClassifier\"",
        "\"ExtraTreesClassifier\"",
        "\"GradientBoostingClassifier\"",
        "\"XGBClassifier\"",
        "\"LGBMClassifier\"",
        "\"CatBoostClassifier\"",
        "\"(\"",
        "\"catboost.core.CatBoostClassifier\"",
        "\"CatBoostClassifier\"",
        "\"(Type Error): This function only supports tree based models for binary classification.\"",
        "\"summary\"",
        "\"correlation\"",
        "\"reason\"",
        "\"(Value Error): type parameter only accepts 'summary', 'correlation' or 'reason'.\"",
        "\"RandomForestClassifier\"",
        "\"DecisionTreeClassifier\"",
        "\"ExtraTreesClassifier\"",
        "\"LGBMClassifier\"",
        "\"GradientBoostingClassifier\"",
        "\"XGBClassifier\"",
        "\"CatBoostClassifier\"",
        "\"summary\"",
        "\"correlation\"",
        "\"reason\"",
        "\"LGBMClassifier\"",
        "\"sigmoid\"",
        "\"(\"",
        "\"catboost.core.CatBoostClassifier\"",
        "\"CatBoostClassifier\"",
        "\"CatBoostClassifier\"",
        "\"(Type Error): calibrate_model doesnt support CatBoost Classifier. Try different estimator.\"",
        "\"(Type Error): Fold parameter only accepts integer value.\"",
        "\"(Type Error): Round parameter only accepts integer value.\"",
        "\"(Type Error): Verbose parameter can only take argument as True or False.\"",
        "\"Processing: \"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"%H:%M:%S\"",
        "\"Initiated\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Status\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Loading Dependencies\"",
        "\"ETC\"",
        "\". . . . . . . . . . . . . . . . . .\"",
        "\"Calculating ETC\"",
        "\"\"",
        "\" \"",
        "\"   \"",
        "\"\"",
        "\"monitor\"",
        "\"ignore\"",
        "\"Selecting Estimator\"",
        "\"monitor\"",
        "\"(\"",
        "\"Initializing CV\"",
        "\"monitor\"",
        "\"Fitting Fold \"",
        "\" of \"",
        "\"monitor\"",
        "\"predict_proba\"",
        "\"macro\"",
        "\"weighted\"",
        "\"weighted\"",
        "\"macro\"",
        "\"weighted\"",
        "\"weighted\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\" Seconds Remaining\"",
        "\" Minutes Remaining\"",
        "\"monitor\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"Mean\"",
        "\"SD\"",
        "\"Compiling Final Model\"",
        "\"monitor\"",
        "\" Score Grid\"",
        "\"Hyperparameters\"",
        "\"parameter\"",
        "\"AUC\"",
        "\"auc\"",
        "\"Confusion Matrix\"",
        "\"confusion_matrix\"",
        "\"Threshold\"",
        "\"threshold\"",
        "\"Precision Recall\"",
        "\"pr\"",
        "\"Error\"",
        "\"error\"",
        "\"Class Report\"",
        "\"class_report\"",
        "\"Feature Selection\"",
        "\"rfe\"",
        "\"Learning Curve\"",
        "\"learning\"",
        "\"Manifold Learning\"",
        "\"manifold\"",
        "\"Calibration Curve\"",
        "\"calibration\"",
        "\"Calibration Curve + Hist\"",
        "\"calibration_histogram\"",
        "\"Validation Curve\"",
        "\"vc\"",
        "\"Dimensions\"",
        "\"dimension\"",
        "\"Feature Importance\"",
        "\"feature\"",
        "\"Decision Boundary\"",
        "\"boundary\"",
        "\"20% K-tops\"",
        "\"ktops\"",
        "\"Accuracy Plot\"",
        "\"accuracy\"",
        "\"Risk Density Plot\"",
        "\"risk_density\"",
        "\"Pairplot - Two Class\"",
        "\"pairplot\"",
        "\"Shapley Values\"",
        "\"shapley\"",
        "\"Plot Type:\"",
        "\"\"",
        "\"\"",
        "\"ignore\"",
        "\"(\"",
        "\"Final \"",
        "\"ignore\"",
        "\".pkl\"",
        "\"Transformation Pipeline and Model Succesfully Saved\"",
        "\"ignore\"",
        "\"(Value Error): Authentication is missing.\"",
        "\"aws\"",
        "\"bucket\"",
        "\".pkl\"",
        "\"s3\"",
        "\"Transformation Pipeline and Model Sucessfully Loaded\"",
        "\".pkl\"",
        "\"Transformation Pipeline and Model Sucessfully Loaded\"",
        "\"ignore\"",
        "\"experiment_\"",
        "\".pkl\"",
        "\"Experiment Succesfully Saved\"",
        "\"ignore\"",
        "\".pkl\"",
        "'session_id'",
        "'Value'",
        "'All objects were loaded into the current experiment.'",
        "\"Object\"",
        "\"ignore\"",
        "\"(\"",
        "\"OneVsRestClassifier\"",
        "\"(Type Error) probability_threshold parameter cannot be used when target is multi-class. \"",
        "\"(Type Error) probability_threshold parameter only accepts value between 0 to 1. \"",
        "\"(Type Error) probability_threshold parameter only accepts value between 0 to 1. \"",
        "\"(Type Error) probability_threshold parameter only accepts value between 0 to 1. \"",
        "\"aws\"",
        "\"aws\"",
        "\"bucket\"",
        "\"bucket\"",
        "\"sklearn.pipeline.Pipeline\"",
        "\"(Type Error): Transformation Pipe Missing. \"",
        "\"(Type Error): Transformation Pipe Missing. \"",
        "\"(\"",
        "\"CatBoostClassifier\"",
        "\"CatBoostClassifier\"",
        "\"_\"",
        "\"BaseLevel_\"",
        "\"soft\"",
        "\"soft\"",
        "\"soft\"",
        "\"soft\"",
        "\"(\"",
        "\"CatBoostClassifier\"",
        "\"CatBoostClassifier\"",
        "\"_InterLevel_\"",
        "\"_\"",
        "\"weighted\"",
        "\"macro\"",
        "\"weighted\"",
        "\"weighted\"",
        "\"Model\"",
        "\"Stacking Classifier\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"Label\"",
        "\"Label\"",
        "\"Label\"",
        "\"predict_proba\"",
        "\"Score\"",
        "\"(\"",
        "\"CatBoostClassifier\"",
        "\"CatBoostClassifier\"",
        "\"_\"",
        "\"hard\"",
        "\"macro\"",
        "\"weighted\"",
        "\"weighted\"",
        "\"Model\"",
        "\"Stacking Classifier\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"Label\"",
        "\"Label\"",
        "\"Label\"",
        "\"predict_proba\"",
        "\"Score\"",
        "\"(\"",
        "\"[A-Z][a-z]*\"",
        "\" \"",
        "\"Gaussian N B\"",
        "\"Naive Bayes\"",
        "\"M L P Classifier\"",
        "\"MLP Classifier\"",
        "\"S G D Classifier\"",
        "\"SVM - Linear Kernel\"",
        "\"S V C\"",
        "\"SVM - Radial Kernel\"",
        "\"X G B Classifier\"",
        "\"Extreme Gradient Boosting\"",
        "\"L G B M Classifier\"",
        "\"Light Gradient Boosting Machine\"",
        "\"Cat Boost Classifier\"",
        "\"CatBoost Classifier\"",
        "\"macro\"",
        "\"weighted\"",
        "\"weighted\"",
        "\"Model\"",
        "\"Accuracy\"",
        "\"AUC\"",
        "\"Recall\"",
        "\"Specificity\"",
        "\"Prec.\"",
        "\"F1\"",
        "\"Kappa\"",
        "\"Hosmer_lemeshow\"",
        "\"Spiegelhalter\"",
        "\"Scaled_brier\"",
        "\"Label\"",
        "\"Label\"",
        "\"Label\"",
        "\"predict_proba\"",
        "\"Score\"",
        "\"aws\"",
        "\"ignore\"",
        "\"aws\"",
        "\"s3\"",
        "\".pkl\"",
        "\".pkl\"",
        "\"bucket\"",
        "\"Model Succesfully Deployed on AWS S3\"",
        "\"(Type Error) optimize_threshold() cannot be used when target is multi-class. \"",
        "\"(\"",
        "\"OneVsRestClassifier\"",
        "\"(Type Error) optimize_threshold() cannot be used when target is multi-class. \"",
        "\"predict_proba\"",
        "\"(Type Error) Estimator doesn't support predict_proba function and cannot be used in optimize_threshold().  \"",
        "\"(Type Error) true_positive parameter only accepts float or integer value. \"",
        "\"(Type Error) true_negative parameter only accepts float or integer value. \"",
        "\"(Type Error) false_positive parameter only accepts float or integer value. \"",
        "\"(Type Error) false_negative parameter only accepts float or integer value. \"",
        "\"(\"",
        "\"CatBoostClassifier\"",
        "\"CatBoostClassifier\"",
        "\"Stacking\"",
        "\"Score\"",
        "\"(Type Error) Meta model doesn't support predict_proba function. Cannot be used in optimize_threshold(). \"",
        "\"Probability Threshold\"",
        "\"Cost Function\"",
        "\"Probability Threshold\"",
        "\"Cost Function\"",
        "\"linear\"",
        "\"rgb(245,245,245)\"",
        "\" Probability Threshold Optimization\"",
        "\"Cost Function\"",
        "\"Cost Function\"",
        "\"Cost Function\"",
        "\"line\"",
        "\"red\"",
        "\"text\"",
        "\"y\"",
        "\"x\"",
        "\"xanchor\"",
        "\"center\"",
        "\"yanchor\"",
        "\"top\"",
        "\"Optimized Probability Threshold: \"",
        "\" | \"",
        "\"Optimized Cost Function: \"",
        "\"score\"",
        "\"target\"",
        "\"score\"",
        "\"score\"",
        "\"score\"",
        "\"rank\"",
        "\"score_decile\"",
        "\"rank\"",
        "\"raise\"",
        "\"target\"",
        "\"target\"",
        "\"score\"",
        "\"score\"",
        "\"gray\"",
        "\"darkorange\"",
        "\"number of predictions in bucket\"",
        "\"average accuracy per bucket\"",
        "\"score buckets\"",
        "\"gray\"",
        "\"gray\"",
        "\"w\"",
        "\"///\"",
        "\"gray\"",
        "\"none\"",
        "\"Frequency\"",
        "\"Threshold\"",
        "'Accuracy Plot'",
        "\"Warning: Zero input range\"",
        "\"Warning: Zero output range\""
    ],
    "variables": [
        "allowed_categorical_imputation",
        "data_cols",
        "data_cols",
        "ord_keys",
        "value_in_keys",
        "value_in_data",
        "text",
        "data_cols",
        "data_cols",
        "high_cardinality_allowed_methods",
        "allowed_numeric_imputation",
        "allowed_normalize_method",
        "allowed_transformation_method",
        "unknown_categorical_method_available",
        "allowed_pca_methods",
        "all_cols",
        "all_cols",
        "resampling_method_available",
        "max_steps",
        "max_steps",
        "progress",
        "timestampStr",
        "monitor",
        "is_max",
        "data_before_preprocess",
        "seed",
        "seed",
        "cat_features_pass",
        "cat_features_pass",
        "numeric_features_pass",
        "numeric_features_pass",
        "ignore_features_pass",
        "ignore_features_pass",
        "date_features_pass",
        "date_features_pass",
        "categorical_imputation_pass",
        "categorical_imputation_pass",
        "categorical_imputation_pass",
        "trans_method_pass",
        "trans_method_pass",
        "pca_method_pass",
        "pca_method_pass",
        "pca_method_pass",
        "pca_method_pass",
        "pca_components_pass",
        "pca_components_pass",
        "pca_components_pass",
        "pca_components_pass",
        "apply_binning_pass",
        "features_to_bin_pass",
        "apply_binning_pass",
        "features_to_bin_pass",
        "trigonometry_features_pass",
        "trigonometry_features_pass",
        "apply_grouping_pass",
        "apply_grouping_pass",
        "group_features_pass",
        "group_features_pass",
        "group_features_pass",
        "group_names_pass",
        "group_names_pass",
        "group_names_pass",
        "group_names_pass",
        "apply_feature_interactions_pass",
        "apply_feature_interactions_pass",
        "interactions_to_apply_pass",
        "unknown_categorical_method_pass",
        "unknown_categorical_method_pass",
        "apply_ordinal_encoding_pass",
        "apply_ordinal_encoding_pass",
        "ordinal_columns_and_categories_pass",
        "ordinal_columns_and_categories_pass",
        "apply_cardinality_reduction_pass",
        "apply_cardinality_reduction_pass",
        "cardinal_method_pass",
        "cardinal_method_pass",
        "cardinal_features_pass",
        "cardinal_features_pass",
        "display_dtypes_pass",
        "display_dtypes_pass",
        "data",
        "label_encoded",
        "label_encoded",
        "label_encoded",
        "label_encoded",
        "label_encoded",
        "res_type",
        "res",
        "prep_pipe",
        "missing_values",
        "missing_flag",
        "missing_flag",
        "normalize_grid",
        "normalize_grid",
        "transformation_grid",
        "transformation_grid",
        "pca_method_grid",
        "pca_method_grid",
        "pca_components_grid",
        "pca_components_grid",
        "rare_level_threshold_grid",
        "rare_level_threshold_grid",
        "numeric_bin_grid",
        "numeric_bin_grid",
        "outliers_threshold_grid",
        "outliers_threshold_grid",
        "multicollinearity_threshold_grid",
        "multicollinearity_threshold_grid",
        "cluster_iter_grid",
        "cluster_iter_grid",
        "polynomial_degree_grid",
        "polynomial_degree_grid",
        "polynomial_threshold_grid",
        "polynomial_threshold_grid",
        "feature_selection_threshold_grid",
        "feature_selection_threshold_grid",
        "interaction_threshold_grid",
        "interaction_threshold_grid",
        "ordinal_features_grid",
        "ordinal_features_grid",
        "unknown_categorical_method_grid",
        "unknown_categorical_method_grid",
        "group_features_grid",
        "group_features_grid",
        "high_cardinality_features_grid",
        "high_cardinality_features_grid",
        "high_cardinality_method_grid",
        "high_cardinality_method_grid",
        "learned_types",
        "float_type",
        "cat_type",
        "experiment__",
        "model",
        "model",
        "model_name",
        "model_name",
        "X",
        "y",
        "target_type",
        "target_type",
        "split_perc",
        "split_perc_text",
        "split_perc_tt",
        "split_perc_tt_total",
        "split_percent",
        "metric_results",
        "metric_name",
        "counter",
        "t0",
        "perc_text",
        "X_",
        "X__",
        "y_",
        "y__",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "pred_",
        "pred_prob",
        "pred_prob",
        "acc",
        "auc",
        "recall",
        "recall",
        "precision",
        "precision",
        "f1",
        "f1",
        "kappa",
        "t1",
        "tt",
        "total_tt",
        "ss",
        "ttt",
        "ttt",
        "ttt",
        "ETC",
        "ttt",
        "ETC",
        "split_perc_tt_total",
        "model_results",
        "fig",
        "title",
        "sample_size",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "functions",
        "functions_",
        "pf",
        "sample_n",
        "X_selected",
        "X_discard",
        "y_selected",
        "y_discard",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "functions",
        "functions_",
        "pf",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "resampler",
        "X_train_res",
        "y_train",
        "X_train",
        "functions",
        "functions_",
        "pf",
        "available_estimators",
        "available_method",
        "boosting_not_supported",
        "progress",
        "master_display",
        "timestampStr",
        "monitor",
        "display_",
        "display_id",
        "data_X",
        "data_y",
        "kf",
        "score_auc",
        "score_acc",
        "score_recall",
        "score_specificity",
        "score_precision",
        "score_f1",
        "score_kappa",
        "score_hosmer",
        "score_spiegel",
        "score_brier",
        "avgs_auc",
        "avgs_acc",
        "avgs_recall",
        "avgs_specificity",
        "avgs_precision",
        "avgs_f1",
        "avgs_kappa",
        "avgs_hosmer",
        "avgs_spiegel",
        "avgs_brier",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "full_name",
        "model",
        "model",
        "model",
        "fold_num",
        "t0",
        "Xtrain",
        "Xtest",
        "ytrain",
        "ytest",
        "pred_prob",
        "pred_prob",
        "pred_",
        "sca",
        "sc",
        "specificity",
        "recall",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "sc",
        "sc",
        "recall",
        "specificity",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "kappa",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_specificity",
        "score_precision",
        "score_f1",
        "score_kappa",
        "score_hosmer",
        "score_spiegel",
        "score_brier",
        "pred_prob",
        "pred_",
        "sca",
        "sc",
        "specificity",
        "recall",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "sc",
        "sc",
        "recall",
        "specificity",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "kappa",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_specificity",
        "score_precision",
        "score_f1",
        "score_kappa",
        "score_hosmer",
        "score_spiegel",
        "score_brier",
        "fold_results",
        "master_display",
        "fold_results",
        "t1",
        "tt",
        "tt",
        "tt",
        "ETC",
        "tt",
        "ETC",
        "mean_acc",
        "mean_auc",
        "mean_recall",
        "mean_specificity",
        "mean_precision",
        "mean_f1",
        "mean_kappa",
        "mean_hosmer",
        "mean_spiegel",
        "mean_brier",
        "std_acc",
        "std_auc",
        "std_recall",
        "std_specificity",
        "std_precision",
        "std_f1",
        "std_kappa",
        "std_hosmer",
        "std_spiegel",
        "std_brier",
        "avgs_acc",
        "avgs_acc",
        "avgs_auc",
        "avgs_auc",
        "avgs_recall",
        "avgs_recall",
        "avgs_specificity",
        "avgs_specificity",
        "avgs_precision",
        "avgs_precision",
        "avgs_f1",
        "avgs_f1",
        "avgs_kappa",
        "avgs_kappa",
        "avgs_hosmer",
        "avgs_hosmer",
        "avgs_spiegel",
        "avgs_spiegel",
        "avgs_brier",
        "avgs_brier",
        "model_results",
        "model_avgs",
        "model_results",
        "model_results",
        "tup",
        "nam",
        "tup",
        "available_method",
        "check_model",
        "check_model",
        "check_model",
        "check_model",
        "progress",
        "master_display",
        "timestampStr",
        "monitor",
        "display_",
        "display_id",
        "data_X",
        "data_y",
        "model",
        "model",
        "model",
        "model",
        "model",
        "kf",
        "score_auc",
        "score_acc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "avgs_auc",
        "avgs_acc",
        "avgs_recall",
        "avgs_precision",
        "avgs_f1",
        "avgs_kappa",
        "fold_num",
        "t0",
        "Xtrain",
        "Xtest",
        "ytrain",
        "ytest",
        "pred_prob",
        "pred_prob",
        "pred_",
        "sca",
        "sc",
        "recall",
        "precision",
        "f1",
        "sc",
        "sc",
        "recall",
        "precision",
        "f1",
        "kappa",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "pred_prob",
        "pred_",
        "sca",
        "sc",
        "recall",
        "precision",
        "f1",
        "sc",
        "sc",
        "recall",
        "precision",
        "f1",
        "kappa",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "fold_results",
        "master_display",
        "fold_results",
        "t1",
        "tt",
        "tt",
        "tt",
        "ETC",
        "tt",
        "ETC",
        "mean_acc",
        "mean_auc",
        "mean_recall",
        "mean_precision",
        "mean_f1",
        "mean_kappa",
        "std_acc",
        "std_auc",
        "std_recall",
        "std_precision",
        "std_f1",
        "std_kappa",
        "avgs_acc",
        "avgs_acc",
        "avgs_auc",
        "avgs_auc",
        "avgs_recall",
        "avgs_recall",
        "avgs_precision",
        "avgs_precision",
        "avgs_f1",
        "avgs_f1",
        "avgs_kappa",
        "avgs_kappa",
        "model_results",
        "model_results_unpivot",
        "model_results_unpivot",
        "columns",
        "model_avgs",
        "model_results",
        "model_results",
        "model_name",
        "tup",
        "nam",
        "tup",
        "available_plots",
        "multiclass_not_available",
        "progress",
        "model",
        "visualizer",
        "scores_dec_func",
        "fpr",
        "tpr",
        "thresholds",
        "sc",
        "roc_auc",
        "model_name",
        "visualizer",
        "visualizer",
        "visualizer",
        "visualizer",
        "visualizer",
        "model2",
        "X_train_transformed",
        "X_test_transformed",
        "X_train_transformed",
        "X_test_transformed",
        "X_train_transformed",
        "X_test_transformed",
        "pca",
        "X_train_transformed",
        "X_test_transformed",
        "y_train_transformed",
        "y_test_transformed",
        "y_train_transformed",
        "y_test_transformed",
        "viz_",
        "visualizer",
        "sizes",
        "visualizer",
        "X_train_transformed",
        "visualizer",
        "model_name",
        "ax1",
        "prob_pos",
        "fraction_of_positives",
        "mean_predicted_value",
        "model_name",
        "fig",
        "ax1",
        "x_hist_axes",
        "prob_pos",
        "fraction_of_positives",
        "mean_predicted_value",
        "y_pred_pos",
        "progress",
        "value",
        "progress",
        "value",
        "y_pred_pos",
        "y_pred",
        "res_0",
        "res_1",
        "normalized_res_0",
        "normalized_res_1",
        "progress",
        "value",
        "model_name",
        "ytest_prob",
        "k_tops",
        "y_test_hat",
        "y_test_hat",
        "y_k",
        "y_k",
        "sorted_y",
        "total_ktops",
        "perc",
        "progress",
        "value",
        "model_name",
        "param_name",
        "param_range",
        "param_name",
        "param_range",
        "param_name",
        "param_range",
        "param_name",
        "param_range",
        "param_name",
        "param_range",
        "param_name",
        "param_range",
        "param_name",
        "param_range",
        "param_name",
        "param_range",
        "param_name",
        "param_range",
        "param_name",
        "param_range",
        "viz",
        "X_train_transformed",
        "X_train_transformed",
        "y_train_transformed",
        "features",
        "features",
        "pca",
        "X_train_transformed",
        "classes",
        "visualizer",
        "variables",
        "variables",
        "col_names",
        "coef_df",
        "sorted_df",
        "sorted_df",
        "sorted_df",
        "sorted_df",
        "my_range",
        "param_df",
        "available_estimators",
        "allowed_sort",
        "len_of_blacklist",
        "len_of_blacklist",
        "len_mod",
        "len_mod",
        "progress",
        "master_display",
        "timestampStr",
        "monitor",
        "display_",
        "display_id",
        "data_X",
        "data_y",
        "sort",
        "sort",
        "lr",
        "knn",
        "nb",
        "dt",
        "svm",
        "rbfsvm",
        "gpc",
        "mlp",
        "ridge",
        "rf",
        "qda",
        "ada",
        "gbc",
        "lda",
        "et",
        "xgboost",
        "lightgbm",
        "catboost",
        "model_library",
        "model_names",
        "model_library_str",
        "model_library_str_",
        "internal_blacklist",
        "compiled_blacklist",
        "blacklist",
        "blacklist",
        "si",
        "s",
        "model_library_",
        "model_names_",
        "model_library",
        "model_names",
        "model_library",
        "model_names",
        "model_library_multiclass",
        "model",
        "model_library",
        "kf",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_specificity",
        "score_precision",
        "score_f1",
        "score_kappa",
        "score_acc_running",
        "score_hosmer",
        "score_spiegel",
        "score_brier",
        "avg_acc",
        "avg_auc",
        "avg_recall",
        "avg_specificity",
        "avg_precision",
        "avg_f1",
        "avg_kappa",
        "avg_hosmer",
        "avg_spiegel",
        "avg_brier",
        "name_counter",
        "fold_num",
        "t0",
        "Xtrain",
        "Xtest",
        "ytrain",
        "ytest",
        "pred_prob",
        "pred_prob",
        "pred_",
        "sca",
        "sc",
        "specificity",
        "recall",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "sc",
        "sc",
        "recall",
        "specificity",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "kappa",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_specificity",
        "score_precision",
        "score_f1",
        "score_kappa",
        "score_hosmer",
        "score_spiegel",
        "score_brier",
        "pred_prob",
        "d",
        "pred_prob",
        "pred_",
        "sca",
        "sc",
        "recall",
        "precision",
        "f1",
        "scores_dec_func",
        "fpr",
        "tpr",
        "thresholds",
        "sc",
        "sc",
        "recall",
        "specificity",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "kappa",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_specificity",
        "score_precision",
        "score_f1",
        "score_kappa",
        "score_hosmer",
        "score_spiegel",
        "score_brier",
        "t1",
        "tt",
        "tt",
        "tt",
        "ETC",
        "tt",
        "ETC",
        "avg_acc",
        "avg_auc",
        "avg_recall",
        "avg_specificity",
        "avg_precision",
        "avg_f1",
        "avg_kappa",
        "avg_hosmer",
        "avg_spiegel",
        "avg_brier",
        "compare_models_",
        "master_display",
        "master_display",
        "master_display",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_specificity",
        "score_precision",
        "score_f1",
        "score_kappa",
        "score_hosmer",
        "score_spiegel",
        "score_brier",
        "avg_acc",
        "avg_auc",
        "avg_recall",
        "avg_specificity",
        "avg_precision",
        "avg_f1",
        "avg_kappa",
        "avg_hosmer",
        "avg_spiegel",
        "avg_brier",
        "model_name",
        "tup",
        "is_max",
        "compare_models_",
        "compare_models_",
        "compare_models_",
        "compare_models_",
        "available_estimators",
        "available_method",
        "allowed_optimize",
        "boosting_not_supported",
        "progress",
        "master_display",
        "master_display",
        "timestampStr",
        "monitor",
        "display_",
        "display_id",
        "data_X",
        "data_y",
        "optimize",
        "optimize",
        "optimize",
        "optimize",
        "optimize",
        "optimize",
        "optimize",
        "optimize",
        "optimize",
        "optimize",
        "optimize",
        "optimize",
        "kf",
        "score_auc",
        "score_acc",
        "score_recall",
        "score_specificity",
        "score_precision",
        "score_hosmer",
        "score_spiegel",
        "score_brier",
        "score_f1",
        "score_kappa",
        "avgs_auc",
        "avgs_acc",
        "avgs_recall",
        "avgs_specificity",
        "avgs_precision",
        "avgs_f1",
        "avgs_kappa",
        "avgs_hosmer",
        "avgs_spiegel",
        "avgs_brier",
        "cv",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "model_space",
        "best",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "model_space",
        "best",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "model_space",
        "best",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "model_space",
        "best",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "model_space",
        "best",
        "model",
        "best_model",
        "best_model_param",
        "num_class",
        "param_grid",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "model_space",
        "best",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "model_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "model_space",
        "best",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "param_grid_dt",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "best_model",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "best_model",
        "model_grid",
        "model",
        "best_model",
        "best_model_param",
        "param_grid",
        "best_model",
        "model_grid",
        "model",
        "best_model",
        "fold_num",
        "t0",
        "Xtrain",
        "Xtest",
        "ytrain",
        "ytest",
        "pred_prob",
        "pred_prob",
        "pred_",
        "sca",
        "sc",
        "specificity",
        "recall",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "sc",
        "sc",
        "recall",
        "specificity",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "kappa",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_specificity",
        "score_precision",
        "score_f1",
        "score_kappa",
        "score_hosmer",
        "score_spiegel",
        "score_brier",
        "pred_prob",
        "pred_",
        "sca",
        "sc",
        "specificity",
        "recall",
        "precision",
        "f1",
        "scores_dec_func",
        "fpr",
        "tpr",
        "thresholds",
        "sc",
        "sc",
        "recall",
        "precision",
        "specificity",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "kappa",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_specificity",
        "score_precision",
        "score_f1",
        "score_kappa",
        "score_hosmer",
        "score_spiegel",
        "score_brier",
        "fold_results",
        "fold_results",
        "master_display",
        "fold_results",
        "t1",
        "tt",
        "tt",
        "tt",
        "ETC",
        "tt",
        "ETC",
        "mean_acc",
        "mean_auc",
        "mean_recall",
        "mean_precision",
        "mean_specificity",
        "mean_f1",
        "mean_kappa",
        "mean_hosmer",
        "mean_spiegel",
        "mean_brier",
        "std_acc",
        "std_auc",
        "std_recall",
        "std_specificity",
        "std_precision",
        "std_f1",
        "std_kappa",
        "std_brier",
        "std_hosmer",
        "std_spiegel",
        "avgs_acc",
        "avgs_acc",
        "avgs_auc",
        "avgs_auc",
        "avgs_recall",
        "avgs_recall",
        "avgs_specificity",
        "avgs_specificity",
        "avgs_precision",
        "avgs_precision",
        "avgs_f1",
        "avgs_f1",
        "avgs_kappa",
        "avgs_kappa",
        "avgs_hosmer",
        "avgs_hosmer",
        "avgs_spiegel",
        "avgs_spiegel",
        "avgs_brier",
        "avgs_brier",
        "model_results",
        "model_avgs",
        "model_results",
        "model_results",
        "model_name",
        "tup",
        "nam",
        "tup",
        "model",
        "model",
        "model",
        "model",
        "model",
        "model",
        "model",
        "model",
        "model",
        "model",
        "score",
        "score",
        "start",
        "trials",
        "rstate",
        "best",
        "param_values",
        "param_values",
        "param_values",
        "param_df",
        "param_df",
        "scoring",
        "name",
        "ts",
        "st",
        "check",
        "available_method",
        "progress",
        "master_display",
        "timestampStr",
        "monitor",
        "display_",
        "display_id",
        "data_X",
        "data_y",
        "score_auc",
        "score_acc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "avgs_auc",
        "avgs_acc",
        "avgs_recall",
        "avgs_precision",
        "avgs_f1",
        "avgs_kappa",
        "avg_acc",
        "avg_auc",
        "avg_recall",
        "avg_precision",
        "avg_f1",
        "avg_kappa",
        "kf",
        "lr",
        "knn",
        "nb",
        "dt",
        "svm",
        "rbfsvm",
        "gpc",
        "mlp",
        "ridge",
        "rf",
        "qda",
        "ada",
        "gbc",
        "lda",
        "et",
        "xgboost",
        "lightgbm",
        "estimator_list",
        "voting",
        "estimator_list",
        "voting",
        "estimator_list",
        "voting",
        "estimator_list",
        "voting",
        "estimator_list",
        "voting",
        "model_names",
        "model_names",
        "words",
        "words",
        "model_names_modified",
        "model_names",
        "model_names_final",
        "model_names",
        "model_names_n",
        "counter",
        "mn",
        "model_names",
        "estimator_list",
        "estimator_list_",
        "estimator_list_",
        "estimator_list_",
        "model",
        "model",
        "fold_num",
        "t0",
        "Xtrain",
        "Xtest",
        "ytrain",
        "ytest",
        "pred_prob",
        "pred_",
        "sca",
        "sc",
        "recall",
        "precision",
        "f1",
        "recall",
        "precision",
        "f1",
        "kappa",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "pred_",
        "sca",
        "pred_prob",
        "sc",
        "recall",
        "precision",
        "f1",
        "pred_prob",
        "pred_prob",
        "sc",
        "sc",
        "recall",
        "precision",
        "f1",
        "kappa",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "fold_results",
        "master_display",
        "fold_results",
        "t1",
        "tt",
        "tt",
        "tt",
        "ETC",
        "tt",
        "ETC",
        "mean_acc",
        "mean_auc",
        "mean_recall",
        "mean_precision",
        "mean_f1",
        "mean_kappa",
        "std_acc",
        "std_auc",
        "std_recall",
        "std_precision",
        "std_f1",
        "std_kappa",
        "avgs_acc",
        "avgs_acc",
        "avgs_auc",
        "avgs_auc",
        "avgs_recall",
        "avgs_recall",
        "avgs_precision",
        "avgs_precision",
        "avgs_f1",
        "avgs_f1",
        "avgs_kappa",
        "avgs_kappa",
        "model_results",
        "model_avgs",
        "model_results",
        "model_results",
        "model_name",
        "tup",
        "nam",
        "tup",
        "method",
        "available_method",
        "estimator_list",
        "meta_model",
        "meta_model",
        "max_progress",
        "progress",
        "master_display",
        "timestampStr",
        "monitor",
        "display_",
        "display_id",
        "predict_method",
        "predict_method",
        "data_X",
        "data_y",
        "data_X",
        "data_y",
        "models_",
        "model_names",
        "model_names",
        "model_names_fixed",
        "a",
        "model_names",
        "model_names_fixed",
        "counter",
        "s",
        "base_array",
        "base_prediction",
        "base_prediction",
        "counter",
        "base_array",
        "base_array",
        "base_array",
        "base_array",
        "base_array",
        "base_array_df",
        "base_prediction",
        "base_array",
        "target_col_name",
        "model_names",
        "base_prediction",
        "columns",
        "data_X",
        "data_X",
        "base_prediction_cor",
        "model",
        "kf",
        "score_auc",
        "score_acc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "avgs_auc",
        "avgs_acc",
        "avgs_recall",
        "avgs_precision",
        "avgs_f1",
        "avgs_kappa",
        "fold_num",
        "t0",
        "Xtrain",
        "Xtest",
        "ytrain",
        "ytest",
        "pred_prob",
        "pred_prob",
        "pred_",
        "sca",
        "sc",
        "sc",
        "recall",
        "precision",
        "f1",
        "recall",
        "precision",
        "f1",
        "kappa",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "fold_results",
        "master_display",
        "fold_results",
        "t1",
        "tt",
        "tt",
        "tt",
        "ETC",
        "tt",
        "ETC",
        "mean_acc",
        "mean_auc",
        "mean_recall",
        "mean_precision",
        "mean_f1",
        "mean_kappa",
        "std_acc",
        "std_auc",
        "std_recall",
        "std_precision",
        "std_f1",
        "std_kappa",
        "avgs_acc",
        "avgs_acc",
        "avgs_auc",
        "avgs_auc",
        "avgs_recall",
        "avgs_recall",
        "avgs_precision",
        "avgs_precision",
        "avgs_f1",
        "avgs_f1",
        "avgs_kappa",
        "avgs_kappa",
        "model_results",
        "model_avgs",
        "model_results",
        "model_results",
        "model_name",
        "tup",
        "nam",
        "tup",
        "ax",
        "method",
        "available_method",
        "estimator_list",
        "meta_model",
        "meta_model",
        "max_progress",
        "progress",
        "timestampStr",
        "monitor",
        "master_display",
        "display_",
        "display_id",
        "models_",
        "base_level",
        "base_level_names",
        "base_level_names",
        "base_level_fixed",
        "a",
        "base_level_fixed_2",
        "counter",
        "s",
        "base_level_fixed",
        "inter_level",
        "inter_level_names",
        "level_list",
        "data_X",
        "data_y",
        "data_X",
        "data_y",
        "predict_method",
        "predict_method",
        "base_array",
        "base_array_df",
        "base_prediction",
        "base_prediction",
        "base_counter",
        "base_models_",
        "base_array",
        "base_array",
        "base_array",
        "base_array",
        "base_array",
        "base_array_df",
        "base_array",
        "base_array_df",
        "columns",
        "base_array_df",
        "early_break",
        "inter_counter",
        "inter_inner",
        "model_counter",
        "inter_array_df",
        "model",
        "base_array",
        "base_array",
        "base_array",
        "base_array",
        "base_array",
        "col",
        "col",
        "col",
        "base_array",
        "columns",
        "inter_array_df",
        "base_array",
        "base_array_df",
        "i",
        "base_array_df",
        "model",
        "data_X",
        "meta_model_",
        "kf",
        "score_auc",
        "score_acc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "avgs_auc",
        "avgs_acc",
        "avgs_recall",
        "avgs_precision",
        "avgs_f1",
        "avgs_kappa",
        "fold_num",
        "t0",
        "Xtrain",
        "Xtest",
        "ytrain",
        "ytest",
        "pred_prob",
        "pred_prob",
        "pred_",
        "sca",
        "sc",
        "sc",
        "recall",
        "precision",
        "f1",
        "recall",
        "precision",
        "f1",
        "kappa",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "fold_results",
        "master_display",
        "fold_results",
        "t1",
        "tt",
        "tt",
        "tt",
        "ETC",
        "tt",
        "ETC",
        "mean_acc",
        "mean_auc",
        "mean_recall",
        "mean_precision",
        "mean_f1",
        "mean_kappa",
        "std_acc",
        "std_auc",
        "std_recall",
        "std_precision",
        "std_f1",
        "std_kappa",
        "avgs_acc",
        "avgs_acc",
        "avgs_auc",
        "avgs_auc",
        "avgs_recall",
        "avgs_recall",
        "avgs_precision",
        "avgs_precision",
        "avgs_f1",
        "avgs_f1",
        "avgs_kappa",
        "avgs_kappa",
        "model_results",
        "model_avgs",
        "model_results",
        "model_results",
        "model_name",
        "tup",
        "nam",
        "tup",
        "allowed_models",
        "model_name",
        "model_name",
        "allowed_types",
        "model",
        "type1",
        "type2",
        "explainer",
        "shap_values",
        "explainer",
        "shap_values",
        "dependence",
        "dependence",
        "explainer",
        "shap_values",
        "explainer",
        "shap_values",
        "explainer",
        "shap_values",
        "row_to_show",
        "data_for_prediction",
        "explainer",
        "shap_values",
        "row_to_show",
        "data_for_prediction",
        "explainer",
        "shap_values",
        "explainer",
        "shap_values",
        "row_to_show",
        "data_for_prediction",
        "explainer",
        "shap_values",
        "model_name",
        "model_name",
        "not_allowed",
        "progress",
        "master_display",
        "timestampStr",
        "monitor",
        "display_",
        "display_id",
        "data_X",
        "data_y",
        "kf",
        "score_auc",
        "score_acc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "score_specificity",
        "score_hosmer",
        "score_spiegel",
        "score_brier",
        "avgs_auc",
        "avgs_acc",
        "avgs_recall",
        "avgs_precision",
        "avgs_f1",
        "avgs_kappa",
        "avgs_specificity",
        "avgs_hosmer",
        "avgs_spiegel",
        "avgs_brier",
        "model",
        "full_name",
        "fold_num",
        "t0",
        "Xtrain",
        "Xtest",
        "ytrain",
        "ytest",
        "pred_prob",
        "pred_prob",
        "pred_",
        "sca",
        "sc",
        "specificity",
        "recall",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "sc",
        "sc",
        "recall",
        "specificity",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "kappa",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "score_specificity",
        "score_hosmer",
        "score_spiegel",
        "score_brier",
        "pred_prob",
        "pred_",
        "sca",
        "sc",
        "specificity",
        "recall",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "sc",
        "sc",
        "recall",
        "specificity",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "kappa",
        "score_acc",
        "score_auc",
        "score_recall",
        "score_precision",
        "score_f1",
        "score_kappa",
        "score_specificity",
        "score_hosmer",
        "score_spiegel",
        "score_brier",
        "fold_results",
        "master_display",
        "fold_results",
        "t1",
        "tt",
        "tt",
        "tt",
        "ETC",
        "tt",
        "ETC",
        "mean_acc",
        "mean_auc",
        "mean_recall",
        "mean_precision",
        "mean_f1",
        "mean_kappa",
        "mean_specificity",
        "mean_hosmer",
        "mean_spiegel",
        "mean_brier",
        "std_acc",
        "std_auc",
        "std_recall",
        "std_precision",
        "std_f1",
        "std_kappa",
        "std_specificity",
        "std_hosmer",
        "std_spiegel",
        "std_brier",
        "avgs_acc",
        "avgs_acc",
        "avgs_auc",
        "avgs_auc",
        "avgs_recall",
        "avgs_recall",
        "avgs_precision",
        "avgs_precision",
        "avgs_f1",
        "avgs_f1",
        "avgs_kappa",
        "avgs_kappa",
        "avgs_specificity",
        "avgs_specificity",
        "avgs_hosmer",
        "avgs_hosmer",
        "avgs_spiegel",
        "avgs_spiegel",
        "avgs_brier",
        "avgs_brier",
        "model_results",
        "model_avgs",
        "model_results",
        "model_results",
        "tup",
        "nam",
        "tup",
        "a",
        "d",
        "stacker_final",
        "stack_restack",
        "stack_method_final",
        "stack_meta_final",
        "model_final",
        "stacker_final",
        "stack_restack",
        "stack_method_final",
        "stack_meta_final",
        "model_final",
        "model_final",
        "model_name",
        "model_name",
        "tup",
        "model_",
        "model_name",
        "bucketname",
        "filename",
        "s3",
        "filename",
        "model",
        "model_name",
        "experiment_name",
        "experiment_name",
        "experiment_name",
        "experiment_name",
        "temp",
        "name",
        "exp",
        "seed",
        "X",
        "y",
        "X_train",
        "y_train",
        "X_test",
        "y_test",
        "prep_pipe",
        "ind",
        "model_name",
        "allowed_types",
        "estimator",
        "estimator_",
        "estimator_",
        "estimator_",
        "prep_pipe_transformer",
        "model",
        "estimator",
        "prep_pipe_transformer",
        "model",
        "estimator",
        "prep_pipe_transformer",
        "model",
        "estimator",
        "Xtest",
        "ytest",
        "X_test_",
        "y_test_",
        "model",
        "estimator_",
        "Xtest",
        "X_test_",
        "estimator_",
        "stacker",
        "restack",
        "stacker_method",
        "stacker_meta",
        "stacker_base",
        "base_model_names",
        "b",
        "base_level_fixed",
        "a",
        "base_level_fixed_2",
        "counter",
        "s",
        "base_level_fixed",
        "base_pred",
        "a",
        "a",
        "a",
        "a",
        "base_pred_df",
        "a",
        "base_pred_df",
        "base_pred_df",
        "columns",
        "base_pred_df_no_restack",
        "base_pred_df",
        "inter_pred",
        "combined_df",
        "inter_counter",
        "inter_pred_df",
        "model_counter",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "col",
        "col",
        "col",
        "p",
        "columns",
        "inter_pred_df",
        "last_level_df",
        "combined_df",
        "pred_",
        "pred_",
        "pred_prob",
        "p_counter",
        "d",
        "pred_prob",
        "pred_prob",
        "pred_prob",
        "p_counter",
        "d",
        "pred_prob",
        "pred_prob",
        "pred_",
        "sca",
        "sc",
        "sc",
        "specificity",
        "recall",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "recall",
        "specificity",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "kappa",
        "df_score",
        "df_score",
        "label",
        "label",
        "columns",
        "label",
        "X_test_",
        "X_test_",
        "score",
        "score",
        "columns",
        "score",
        "X_test_",
        "stacker",
        "restack",
        "method",
        "meta_model",
        "model_names",
        "model_names",
        "model_names_fixed",
        "a",
        "model_names",
        "model_names_fixed",
        "counter",
        "s",
        "model_names",
        "base_pred",
        "p",
        "p",
        "p",
        "p",
        "df",
        "i",
        "df",
        "df",
        "columns",
        "df_restack",
        "pred_",
        "pred_",
        "pred_prob",
        "p_counter",
        "d",
        "pred_prob",
        "pred_prob",
        "pred_prob",
        "p_counter",
        "d",
        "pred_prob",
        "pred_prob",
        "pred_",
        "sca",
        "sc",
        "sc",
        "recall",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "specificity",
        "recall",
        "specificity",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "kappa",
        "df_score",
        "df_score",
        "label",
        "label",
        "columns",
        "label",
        "X_test_",
        "X_test_",
        "score",
        "score",
        "columns",
        "score",
        "X_test_",
        "full_name",
        "words",
        "words",
        "full_name",
        "full_name",
        "full_name",
        "full_name",
        "full_name",
        "full_name",
        "full_name",
        "full_name",
        "pred_",
        "pred_prob",
        "p_counter",
        "d",
        "pred_prob",
        "pred_prob",
        "pred_",
        "sca",
        "sc",
        "sc",
        "recall",
        "precision",
        "f1",
        "specificity",
        "hosmer",
        "spiegel",
        "brier",
        "recall",
        "specificity",
        "precision",
        "f1",
        "hosmer",
        "spiegel",
        "brier",
        "kappa",
        "df_score",
        "df_score",
        "label",
        "label",
        "columns",
        "label",
        "X_test_",
        "X_test_",
        "score",
        "score",
        "columns",
        "score",
        "X_test_",
        "model",
        "s3",
        "filename",
        "key",
        "bucket_name",
        "model_name",
        "allowed_types",
        "model",
        "model_name",
        "model_name",
        "actual",
        "predicted",
        "model_name",
        "predicted",
        "predicted",
        "predicted",
        "tp",
        "tp",
        "tp",
        "tn",
        "tn",
        "tn",
        "fp",
        "fp",
        "fp",
        "fn",
        "fn",
        "fn",
        "total_cost",
        "grid",
        "cost",
        "pred_prob",
        "optimize_results",
        "fig",
        "title",
        "y0",
        "y1",
        "x0",
        "x1",
        "t",
        "n_grp",
        "y_true",
        "df",
        "df",
        "df",
        "df",
        "df",
        "obsPos",
        "obsNeg",
        "exPos",
        "exNeg",
        "hl",
        "p_value",
        "y_true",
        "top",
        "bot",
        "sh",
        "p_value",
        "y_true",
        "brier",
        "p",
        "brier_scaled",
        "ax",
        "main_color",
        "secondary_color",
        "y_label_left",
        "y_label_right",
        "x_label",
        "bar_width",
        "num_bins",
        "num_ticks",
        "min_x",
        "max_x",
        "epsilon",
        "y_true",
        "score_bins",
        "score_bins_with_endpoint",
        "hist",
        "bin_edges",
        "hist2",
        "bin_edges2",
        "bin_edges_with_right_edge",
        "bin_indexes",
        "element_bins",
        "score_bins_with_endpoint",
        "merged",
        "merged_sorted",
        "grouped",
        "averages_by_bucket",
        "qtd_corr",
        "p",
        "qt",
        "reverseInput",
        "oldMin",
        "oldMax",
        "reverseInput",
        "reverseOutput",
        "newMin",
        "newMax",
        "reverseOutput",
        "portion",
        "portion",
        "result",
        "result"
    ],
    "comments": [
        "Module: Classification",
        "Author: Moez Ali <moez.ali@queensu.ca>",
        "Improvements and Customization: Andre Batista <andrefmb@usp.br>",
        "License: MIT",
        "latest",
        "latest",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "random seed",
        "exception checking",
        "checking train size parameter",
        "checking sampling parameter",
        "checking sampling parameter",
        "checking session_id",
        "checking sampling parameter",
        "checking normalize parameter",
        "checking transformation parameter",
        "checking categorical imputation",
        "ordinal_features",
        "ordinal features check",
        "high_cardinality_features",
        "high_cardinality_methods",
        "checking numeric imputation",
        "checking normalize method",
        "checking transformation method",
        "handle unknown categorical",
        "unknown categorical method",
        "check pca",
        "pca method check",
        "pca components check",
        "pca components check 2",
        "pca components check 3",
        "check ignore_low_variance",
        "check ignore_low_variance",
        "check rare_level_threshold",
        "bin numeric features",
        "remove_outliers",
        "outliers_threshold",
        "remove_multicollinearity",
        "multicollinearity_threshold",
        "create_clusters",
        "cluster_iter",
        "polynomial_features",
        "polynomial_degree",
        "polynomial_features",
        "polynomial threshold",
        "group features",
        "cannot drop target",
        "feature_selection",
        "feature_selection_threshold",
        "feature_interaction",
        "feature_ratio",
        "interaction_threshold",
        "forced type check",
        "categorical",
        "numeric",
        "date features",
        "drop features",
        "silent",
        "unknown resampling method",
        "pre-load libraries",
        "pandas option",
        "progress bar",
        "general dependencies",
        "define highlight function for function grid to display",
        "cufflinks",
        "ignore warnings",
        "replace infinite numbers with NaN",
        "copy original data for pandas profiler",
        "declaring global variables to be accessed by other functions",
        "generate seed to be used globally",
        "define parameters for preprocessor",
        "categorical features",
        "numeric features",
        "drop features",
        "date features",
        "categorical imputation strategy",
        "transformation method strategy",
        "pass method",
        "pca components",
        "trignometry",
        "group features",
        "=============#",
        "apply grouping",
        "group features listing",
        "group names",
        "feature interactions",
        "unknown categorical",
        "ordinal_features",
        "import library",
        "new",
        "new",
        "latest",
        "latest",
        "latest",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "pca hardcoded",
        "new",
        "new",
        "latest 2",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "this is for inferred input box",
        "not needed for classification",
        "save prep pipe",
        "generate values for grid show",
        "reset pandas option",
        "create an empty list for pickling later.",
        "sample estimator",
        "creating variables to be used later in the function",
        "determining target type",
        "change this back to 25000",
        "accuracy",
        "auc",
        "recall",
        "recall",
        "F1",
        "Kappa",
        "new",
        "latest",
        "latest",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "functions_ = functions.style.hide_index()",
        "log into experiment",
        "new",
        "latest",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "functions_ = functions.style.hide_index()",
        "log into experiment",
        "new",
        "latest",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "new",
        "functions = functions.style.hide_index()",
        "log into experiment",
        "exception checking",
        "checking error for estimator (string)",
        "checking error for ensemble:",
        "checking error for method:",
        "1 Check When method given and ensemble is not set to True.",
        "2 Check when ensemble is set to True and method is not passed.",
        "3 Check when ensemble is set to True and method is passed but not allowed.",
        "checking fold parameter",
        "checking round parameter",
        "checking verbose parameter",
        "checking boosting conflict with estimators",
        "pre-load libraries",
        "progress bar",
        "display monitor",
        "ignore warnings",
        "Storing X_train and y_train in data_X and data_y parameter",
        "reset index",
        "general dependencies",
        "cross validation setup starts here",
        "Silent is True to suppress CatBoost iteration results",
        "checking method when ensemble is set to True.",
        "multiclass checking",
        "refitting the model on complete X_train, y_train",
        "storing into experiment",
        "exception checking",
        "Check for allowed method",
        "check boosting conflict",
        "checking fold parameter",
        "checking n_estimators parameter",
        "checking round parameter",
        "checking verbose parameter",
        "pre-load libraries",
        "progress bar",
        "display monitor",
        "dependencies",
        "ignore warnings",
        "Storing X_train and y_train in data_X and data_y parameter",
        "reset index",
        "defining estimator as model",
        "refitting the model on complete X_train, y_train",
        "storing into experiment",
        "exception checking",
        "checking plots (string)",
        "multiclass plot exceptions:",
        "exception for CatBoost",
        "checking for auc plot",
        "if not hasattr(estimator, \"predict_proba\") and plot == \"auc\":",
        "sys.exit(",
        "\"(Type Error): AUC plot not available for estimators with no predict_proba attribute.\"",
        ")",
        "monitor.iloc[1, 1:] = \"Model do not have predict_prob, using decision_function instead\"",
        "update_display(monitor, display_id=\"monitor\")",
        "checking for auc plot",
        "if not hasattr(estimator, \"predict_proba\") and plot == \"auc\":",
        "sys.exit(",
        "\"(Type Error): AUC plot not available for estimators with no predict_proba attribute.\"",
        ")",
        "checking for calibration plot",
        "checking for rfe",
        "checking for feature plot",
        "pre-load libraries",
        "plt.style.use(\"fivethirtyeight\")",
        "Set the global font to be DejaVu Sans, size 10 (or any other sans-serif font of your choice!)",
        "rc(\"font\", **{\"family\": \"sans-serif\", \"sans-serif\": [\"DejaVu Sans\"], \"size\": 10})",
        "Set the font used for MathJax - more on this later",
        "rc(\"mathtext\", **{\"default\": \"regular\"})",
        "fim da customizacao",
        "progress bar",
        "ignore warnings",
        "general dependencies",
        "defining estimator as model locally",
        "sns.pairplot(pd.concat([X, y], axis=1), hue=y_train.name)",
        "prob_pos = (prob_pos - prob_pos.min()) / (prob_pos.max() - prob_pos.min())",
        "ax1.set_facecolor(\"white\")",
        "prob_pos = (prob_pos - prob_pos.min()) / (prob_pos.max() - prob_pos.min())",
        "ax1.set_facecolor(\"white\")",
        "print(X_test.shape)",
        "assumindo que a classe predita será sempre 1, para verificr o erro",
        "print(\"y_test_prob:\")",
        "display(ytest_prob)",
        "print(\"y_test_hat\")",
        "display(y_test_hat)",
        "print(\"ytest\")",
        "display(y_test)",
        "display(y_k.head(10))",
        "assumindo que a classe predita sera sempre 1.",
        "display(y_k)",
        "print(f\"TOP {k_tops} PREDICTIONS\\n\\n\")",
        "SGD Classifier",
        "tree based models",
        "knn",
        "MLP / Ridge",
        "Logistic Regression",
        "Bagging / Boosting",
        "Bagging / Boosting / gbc / ada /",
        "Naive Bayes",
        "QDA",
        "GPC",
        "max_iter_predict",
        "classes = [\"1\", \"0\"]",
        "exception checking",
        "checking error for blacklist (string)",
        "checking fold parameter",
        "checking round parameter",
        "checking sort parameter",
        "checking optimize parameter for multiclass",
        "pre-load libraries",
        "progress bar",
        "display monitor",
        "ignore warnings",
        "general dependencies",
        "defining X_train and y_train as data_X and data_y",
        "import sklearn dependencies",
        "defining sort parameter (making Precision equivalent to Prec. )",
        "creating model object",
        "checking for blacklist models",
        "multiclass check",
        "cross validation setup starts here",
        "running total",
        "storing into experiment",
        "exception checking",
        "checking error for estimator (string)",
        "checking error for ensemble:",
        "checking error for method:",
        "1 Check When method given and ensemble is not set to True.",
        "2 Check when ensemble is set to True and method is not passed.",
        "3 Check when ensemble is set to True and method is passed but not allowed.",
        "checking fold parameter",
        "checking round parameter",
        "checking n_iter parameter",
        "checking optimize parameter",
        "checking optimize parameter for multiclass",
        "checking verbose parameter",
        "checking boosting conflict with estimators",
        "pre-load libraries",
        "progress bar",
        "display monitor",
        "ignore warnings",
        "ignore warnings",
        "Storing X_train and y_train in data_X and data_y parameter",
        "reset index",
        "general dependencies",
        "setting numpy seed",
        "setting optimize parameter",
        "setting turbo parameters",
        "[1,5,10,25,50,100],",
        "[0.0001, 0.05],",
        "np.random.randint(5,15,5),",
        "[.5,1,10,50,100],",
        "[0,0.1,0.15,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],",
        "[0.0001,0.001,0.1,0.15,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],",
        "[10, 40, 70, 80, 90, 100, 120, 140, 150],",
        "[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],",
        "'loss': ['deviance', 'exponential'],",
        "[10, 40, 70, 80, 90, 100, 120, 140, 150],",
        "[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],",
        "[0.1,0.3,0.5,0.7,0.9,1],",
        "[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]",
        "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100],",
        "\"learning_rate\": hp.choice(",
        "\"x_learning_rate\", np.arange(0.05, 0.2)",
        "),",
        "[0.01, 0.02, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1],",
        "[10, 30, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],",
        "[0.01, 0.02, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1],",
        "'num_class' : [num_class, num_class]",
        "'boosting_type' : ['gbdt', 'dart', 'goss', 'rf'],",
        "'ctr_border_count':[50,5,10,20,100,200]",
        "when using normal BaggingClassifier() DT estimator raise's an exception for max_features parameter. Hence a separate",
        "call has been made for estimator='dt' and method = 'Bagging' where max_features has been removed from param_grid_dt.",
        "[10,15,20,25,30],",
        "[10,15,20,25,30],",
        "[25,35,50,60,70,75],",
        "[1,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2],",
        "multiclass checking",
        "refitting the model on complete X_train, y_train",
        "storing into experiment",
        "MODEL SELECTION",
        "logistic regression",
        "print(\"Setting model as RandomForestClassifier\")",
        "print(\"Setting model as XGBClassifier\")",
        "print(\"Setting model as DecisionTreeClassifier\")",
        "print(\"Setting model as CatBoost\")",
        "print(\"Setting model as CatBoost\")",
        "print(\"Setting model as ANN\")",
        "print(\"ERRO: Especifique um nome valido para model_name: rf, xgb, dt ou catboost\")",
        "ajusta para a funcao de minimizacao.",
        "Save the hyperparameter at each iteration to a csv file",
        "print(-best_score, best)",
        "exception checking",
        "checking error for estimator_list (string)",
        "checking method param with estimator list",
        "checking catboost:",
        "checking fold parameter",
        "checking round parameter",
        "checking method parameter",
        "checking verbose parameter",
        "checking verbose parameter",
        "testing",
        "no active testing",
        "pre-load libraries",
        "progress bar",
        "display monitor",
        "ignore warnings",
        "general dependencies",
        "Storing X_train and y_train in data_X and data_y parameter",
        "reset index",
        "from catboost import CatBoostClassifier",
        "creating CatBoost estimator",
        "catboost = CatBoostClassifier(random_state=seed, silent = True)",
        "adding n in model_names to avoid duplicate exception when custom list is passed for eg. BaggingClassifier",
        "refitting the model on complete X_train, y_train",
        "storing into experiment",
        "testing",
        "no active test",
        "change method param to 'hard' for multiclass",
        "exception checking",
        "checking error for estimator_list",
        "checking meta model",
        "stacking with multiclass",
        "checking fold parameter",
        "checking round parameter",
        "checking method parameter",
        "checking restack parameter",
        "checking plot parameter",
        "checking verbose parameter",
        "testing",
        "no active test",
        "pre-load libraries",
        "copy estimator_list",
        "Defining meta model.",
        "progress bar",
        "display monitor",
        "ignore warnings",
        "dependencies",
        "Capturing the method of stacking required by user. method='soft' means 'predict_proba' else 'predict'",
        "defining data_X and data_y",
        "reset index",
        "models_ for appending",
        "defining model_library model names",
        "changed to data_y",
        "fitting and appending",
        "fill nas for base_prediction",
        "defining column names now",
        "added fixed here",
        "defining colum names now",
        "defining data_X and data_y dataframe to be used in next stage.",
        "drop column from base_prediction",
        "Correlation matrix of base_prediction",
        "base_prediction_cor = base_prediction.drop(base_prediction.columns[0],axis=1)",
        "Meta Modeling Starts Here",
        "this defines model to be used below as model = meta_model (as captured above)",
        "appending in models",
        "capturing fold requested by user",
        "update_display(ETC, display_id = 'ETC')",
        "appending method into models_",
        "storing into experiment",
        "testing",
        "global inter_level_names",
        "change method param to 'hard' for multiclass",
        "exception checking",
        "checking estimator_list",
        "blocking stack_models usecase",
        "checking error for estimator_list",
        "checking meta model",
        "stacknet with multiclass",
        "checking fold parameter",
        "checking round parameter",
        "checking method parameter",
        "checking restack parameter",
        "checking verbose parameter",
        "pre-load libraries",
        "copy estimator_list",
        "copy meta_model",
        "progress bar",
        "display monitor",
        "ignore warnings",
        "models_ list",
        "general dependencies",
        "defining base_level_names",
        "defining inter_level names",
        "defining data_X and data_y",
        "reset index",
        "Capturing the method of stacking required by user. method='soft' means 'predict_proba' else 'predict'",
        "change to data_y",
        "changed to data_X and data_y",
        "fill na's with zero",
        "changed to data_y",
        "fill na's with zero",
        "redefine data_X and data_y",
        "capturing fold requested by user",
        "appending meta_model into models_",
        "appending method into models_",
        "appending restack param",
        "storing into experiment",
        "allowed models",
        "Statement to find CatBoost and change name :",
        "plot type",
        "general dependencies",
        "storing estimator in model variable",
        "defining type of classifier",
        "exception checking",
        "Statement to find CatBoost and change name",
        "catboost not allowed",
        "checking fold parameter",
        "checking round parameter",
        "checking verbose parameter",
        "pre-load libraries",
        "progress bar",
        "display monitor",
        "ignore warnings",
        "Storing X_train and y_train in data_X and data_y parameter",
        "reset index",
        "general dependencies",
        "cross validation setup starts here",
        "calibrating estimator",
        "refitting the model on complete X_train, y_train",
        "storing into experiment",
        "'success', 'info', 'warning', 'danger' or ''",
        "ignore warnings",
        "import depedencies",
        "storing into experiment",
        "ignore warnings",
        "ignore warnings",
        "exception checking",
        "cloud provider",
        "ignore warnings",
        "general dependencies",
        "defining experiment name",
        "ignore warnings",
        "general dependencies",
        "testing",
        "no active test",
        "ignore warnings",
        "general dependencies",
        "probability_threshold allowed types",
        "probability_threshold allowed types",
        "probability_threshold allowed types",
        "dataset",
        "original concater",
        "try:",
        "model = finalize_model(estimator)",
        "except:",
        "model = estimator",
        "utility",
        "stacker_method = stacker_method[0]",
        "base model names",
        "defining base_level_names",
        "change",
        "change",
        "change",
        "changed",
        "final meta predictions",
        "print('Success')",
        "change here",
        "copy",
        "restack",
        "method",
        "separate metamodel",
        "print('done')",
        "change",
        "change",
        "change",
        "change",
        "ytest = ytest #change",
        "meta predictions starts here",
        "restacking check",
        "changed",
        "change here",
        "model name",
        "prediction starts here",
        "ignore warnings",
        "general dependencies",
        "initiaze s3",
        "import libraries",
        "cufflinks",
        "exception 1 for multi-class",
        "check predict_proba value",
        "check cost function type",
        "define model as estimator",
        "generate predictions and store actual on y_test in numpy array",
        "true positives",
        "true negative",
        "false positive",
        "false negative",
        "loop starts here",
        "global optimize_results",
        "calculate vertical line",
        "Calibration Metrics",
        "A statistical goodness- of-fit test to evaluate the difference between the predicted and observed event rates. The Hosmer-Lemeshow C test statistic is defined with an equal number of predicted scores divided into 10 groups. A p-value of 1 indicates the model is well-calibrated.",
        "number of groups",
        "create the dataframe",
        "sort the values",
        "shift the score a bit",
        "cut them into 10 bins",
        "sum up based on each decile",
        "https://en.wikipedia.org/wiki/Pearson%27s_chi-squared_test",
        "Re: p-value, higher the better Goodness-of-Fit",
        "A statistical test to evaluate whether the Brier score is extreme. Spiegelhalter [24] observed that the expectation and variance of the Brier score could be cal- culated under the null hypothesis that the true unknown probability of the event was equivalent to the estimated probability. Thus, one could determine whether it was dif- ferent from the observed prevalence. A p-value of 1 denotes a well-calibrated model.",
        "https://en.wikipedia.org/wiki/Z-test",
        "Two-tailed test",
        "Re: p-value, higher the better Goodness-of-Fit",
        "ScaledBrierscore A standardized,prevalent-independent version of the Brier score with the range between 0 and 1. The score accounts for the mean prevalence of the event by dividing the Brier score by the “maximum\" Brier score achieved by simply predicting the prevalence of the event. A perfect model achieves a scaled Brier score of 1",
        "calculate the mean of the probability",
        "need to add epsilon otherwise arange wont include the last number",
        "hist contains the number of elements per bin",
        "print(hist2)",
        "will use these are the histogram bins",
        "print(f'edges={bin_edges}')",
        "print(element_bins)",
        "print(score_bins_with_endpoint)",
        "PLOT BUCKET HISTOGRAM",
        "score_bins_with_endpoint.delete([0.0])",
        "hatch=\"\\\\\\\\\\\\\",",
        "edgecolor=\"lightgray\",",
        "facecolor = 'none'",
        "print('hist:')",
        "print(hist)",
        "print(\"CUT\")",
        "print(bin_edges)",
        "print(tr)",
        "print(int(p))",
        "print(hist2[int(p)])",
        "print(get_qtd(averages_by_bucket, round(tr,1)))",
        "print(f'QT{tr} = {qt}')",
        "qtd = hist * averages_by_bucket[:,1]",
        "print(f'qtd = {qtd}')",
        "qtd_corr = []",
        "concat = list(zip(qtd, bin_edges))",
        "for qtd, val in concat:",
        "for i in range(int(qtd)):",
        "qtd_corr.append(val)",
        "print(qtd_corr)",
        "print(element_bins)",
        "print(bin_edges)",
        "print(hist.reshape(-1,1))",
        "print(averages_by_bucket[:, 1].reshape(-1,1))",
        "print(hist)",
        "print(averages_by_bucket)",
        "handles = [Rectangle((0,0),1,1,hatch=c,ec=\"k\", edgecolor=\"gray\", color='w', alpha=0.9) for c in ['\\\\\\\\\\\\\\\\', '////']]",
        "labels= [\"Total\",\"Óbitos\"]",
        "plt.legend(handles, labels)",
        "range check",
        "check reversed input range",
        "check reversed output range"
    ],
    "docstrings": [
        "\"\"\"\n        \n    Description:\n    ------------    \n    This function initializes the environment in pycaret and creates the transformation\n    pipeline to prepare the data for modeling and deployment. setup() must called before\n    executing any other function. It takes two mandatory parameters:\n    dataframe {array-like, sparse matrix} and name of the target column. \n    \n    All other parameters are optional.\n\n        Example\n        -------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        \n        experiment_name = setup(data = juice,  target = 'Purchase')\n\n        'juice' is a pandas DataFrame and 'Purchase' is the name of target column.\n        \n    Parameters\n    ----------\n    data : {array-like, sparse matrix}, shape (n_samples, n_features) where n_samples \n    is the number of samples and n_features is the number of features.\n\n    target: string\n    Name of the target column to be passed in as a string. The target variable could \n    be binary or multiclass. In case of a multiclass target, all estimators are wrapped\n    with a OneVsRest classifier.\n\n    train_size: float, default = 0.7\n    Size of the training set. By default, 70% of the data will be used for training \n    and validation. The remaining data will be used for a test / hold-out set.\n    \n \n\n    sampling: bool, default = True\n    When the sample size exceeds 25,000 samples, pycaret will build a base estimator\n    at various sample sizes from the original dataset. This will return a performance \n    plot of AUC, Accuracy, Recall, Precision, Kappa and F1 values at various sample \n    levels, that will assist in deciding the preferred sample size for modeling. \n    The desired sample size must then be entered for training and validation in the \n    pycaret environment. When sample_size entered is less than 1, the remaining dataset \n    (1 - sample) is used for fitting the model only when finalize_model() is called.\n    \n    sample_estimator: object, default = None\n    If None, Logistic Regression is used by default.\n    \n    categorical_features: string, default = None\n    If the inferred data types are not correct, categorical_features can be used to\n    overwrite the inferred type. If when running setup the type of 'column1' is\n    inferred as numeric instead of categorical, then this parameter can be used \n    to overwrite the type by passing categorical_features = ['column1'].\n    \n    categorical_imputation: string, default = 'constant'\n    If missing values are found in categorical features, they will be imputed with\n    a constant 'not_available' value. The other available option is 'mode' which \n    imputes the missing value using most frequent value in the training dataset. \n    If you wanna ignore  imputation you should use 'ignore'. Be aware that many ML\n    models will not work with missing data.\n    \n    ordinal_features: dictionary, default = None\n    When the data contains ordinal features, they must be encoded differently using \n    the ordinal_features param. If the data has a categorical variable with values\n    of 'low', 'medium', 'high' and it is known that low < medium < high, then it can \n    be passed as ordinal_features = { 'column_name' : ['low', 'medium', 'high'] }. \n    The list sequence must be in increasing order from lowest to highest.\n    \n    high_cardinality_features: string, default = None\n    When the data containts features with high cardinality, they can be compressed\n    into fewer levels by passing them as a list of column names with high cardinality.\n    Features are compressed using method defined in high_cardinality_method param.\n    \n    high_cardinality_method: string, default = 'frequency'\n    When method set to 'frequency' it will replace the original value of feature\n    with the frequency distribution and convert the feature into numeric. Other\n    available method is 'clustering' which performs the clustering on statistical\n    attribute of data and replaces the original value of feature with cluster label.\n    The number of clusters is determined using a combination of Calinski-Harabasz and \n    Silhouette criterion. \n          \n    numeric_features: string, default = None\n    If the inferred data types are not correct, numeric_features can be used to\n    overwrite the inferred type. If when running setup the type of 'column1' is \n    inferred as a categorical instead of numeric, then this parameter can be used \n    to overwrite by passing numeric_features = ['column1'].    \n\n    numeric_imputation: string, default = 'mean'\n    If missing values are found in numeric features, they will be imputed with the \n    mean value of the feature. The other available option is 'median' which imputes \n    the value using the median value in the training dataset.  If you wanna ignore \n     imputation you shoud use 'ignore'. Be aware that many ML  models will not work\n     with missing data.\n    \n    date_features: string, default = None\n    If the data has a DateTime column that is not automatically detected when running\n    setup, this parameter can be used by passing date_features = 'date_column_name'. \n    It can work with multiple date columns. Date columns are not used in modeling. \n    Instead, feature extraction is performed and date columns are dropped from the \n    dataset. If the date column includes a time stamp, features related to time will \n    also be extracted.\n    \n    ignore_features: string, default = None\n    If any feature should be ignored for modeling, it can be passed to the param\n    ignore_features. The ID and DateTime columns when inferred, are automatically \n    set to ignore for modeling. \n    \n    normalize: bool, default = False\n    When set to True, the feature space is transformed using the normalized_method\n    param. Generally, linear algorithms perform better with normalized data however, \n    the results may vary and it is advised to run multiple experiments to evaluate\n    the benefit of normalization.\n    \n    normalize_method: string, default = 'zscore'\n    Defines the method to be used for normalization. By default, normalize method\n    is set to 'zscore'. The standard zscore is calculated as z = (x - u) / s. The\n    other available options are:\n    \n    'minmax'    : scales and translates each feature individually such that it is in \n                  the range of 0 - 1.\n    \n    'maxabs'    : scales and translates each feature individually such that the maximal \n                  absolute value of each feature will be 1.0. It does not shift/center \n                  the data, and thus does not destroy any sparsity.\n    \n    'robust'    : scales and translates each feature according to the Interquartile range.\n                  When the dataset contains outliers, robust scaler often gives better\n                  results.\n    \n    transformation: bool, default = False\n    When set to True, a power transformation is applied to make the data more normal /\n    Gaussian-like. This is useful for modeling issues related to heteroscedasticity or \n    other situations where normality is desired. The optimal parameter for stabilizing \n    variance and minimizing skewness is estimated through maximum likelihood.\n    \n    transformation_method: string, default = 'yeo-johnson'\n    Defines the method for transformation. By default, the transformation method is set\n    to 'yeo-johnson'. The other available option is 'quantile' transformation. Both \n    the transformation transforms the feature set to follow a Gaussian-like or normal\n    distribution. Note that the quantile transformer is non-linear and may distort linear \n    correlations between variables measured at the same scale.\n    \n    handle_unknown_categorical: bool, default = True\n    When set to True, unknown categorical levels in new / unseen data are replaced by\n    the most or least frequent level as learned in the training data. The method is \n    defined under the unknown_categorical_method param.\n    \n    unknown_categorical_method: string, default = 'least_frequent'\n    Method used to replace unknown categorical levels in unseen data. Method can be\n    set to 'least_frequent' or 'most_frequent'.\n    \n    pca: bool, default = False\n    When set to True, dimensionality reduction is applied to project the data into \n    a lower dimensional space using the method defined in pca_method param. In \n    supervised learning pca is generally performed when dealing with high feature\n    space and memory is a constraint. Note that not all datasets can be decomposed\n    efficiently using a linear PCA technique and that applying PCA may result in loss \n    of information. As such, it is advised to run multiple experiments with different \n    pca_methods to evaluate the impact. \n\n    pca_method: string, default = 'linear'\n    The 'linear' method performs Linear dimensionality reduction using Singular Value \n    Decomposition. The other available options are:\n    \n    kernel      : dimensionality reduction through the use of RVF kernel.  \n    \n    incremental : replacement for 'linear' pca when the dataset to be decomposed is \n                  too large to fit in memory\n    \n    pca_components: int/float, default = 0.99\n    Number of components to keep. if pca_components is a float, it is treated as a \n    target percentage for information retention. When pca_components is an integer\n    it is treated as the number of features to be kept. pca_components must be strictly\n    less than the original number of features in the dataset.\n    \n    ignore_low_variance: bool, default = False\n    When set to True, all categorical features with statistically insignificant variances \n    are removed from the dataset. The variance is calculated using the ratio of unique \n    values to the number of samples, and the ratio of the most common value to the \n    frequency of the second most common value.\n    \n    combine_rare_levels: bool, default = False\n    When set to True, all levels in categorical features below the threshold defined \n    in rare_level_threshold param are combined together as a single level. There must be \n    atleast two levels under the threshold for this to take effect. rare_level_threshold\n    represents the percentile distribution of level frequency. Generally, this technique \n    is applied to limit a sparse matrix caused by high numbers of levels in categorical \n    features. \n    \n    rare_level_threshold: float, default = 0.1\n    Percentile distribution below which rare categories are combined. Only comes into\n    effect when combine_rare_levels is set to True.\n    \n    bin_numeric_features: list, default = None\n    When a list of numeric features is passed they are transformed into categorical\n    features using KMeans, where values in each bin have the same nearest center of a \n    1D k-means cluster. The number of clusters are determined based on the 'sturges' \n    method. It is only optimal for gaussian data and underestimates the number of bins \n    for large non-gaussian datasets.\n    \n    remove_outliers: bool, default = False\n    When set to True, outliers from the training data are removed using PCA linear\n    dimensionality reduction using the Singular Value Decomposition technique.\n    \n    outliers_threshold: float, default = 0.05\n    The percentage / proportion of outliers in the dataset can be defined using\n    the outliers_threshold param. By default, 0.05 is used which means 0.025 of the \n    values on each side of the distribution's tail are dropped from training data.\n    \n    remove_multicollinearity: bool, default = False\n    When set to True, the variables with inter-correlations higher than the threshold\n    defined under the multicollinearity_threshold param are dropped. When two features\n    are highly correlated with each other, the feature that is less correlated with \n    the target variable is dropped. \n    \n    multicollinearity_threshold: float, default = 0.9\n    Threshold used for dropping the correlated features. Only comes into effect when \n    remove_multicollinearity is set to True.\n    \n    create_clusters: bool, default = False\n    When set to True, an additional feature is created where each instance is assigned\n    to a cluster. The number of clusters is determined using a combination of \n    Calinski-Harabasz and Silhouette criterion. \n    \n    cluster_iter: int, default = 20\n    Number of iterations used to create a cluster. Each iteration represents cluster \n    size. Only comes into effect when create_clusters param is set to True.\n    \n    polynomial_features: bool, default = False\n    When set to True, new features are created based on all polynomial combinations \n    that exist within the numeric features in a dataset to the degree defined in \n    polynomial_degree param. \n    \n    polynomial_degree: int, default = 2\n    Degree of polynomial features. For example, if an input sample is two dimensional \n    and of the form [a, b], the polynomial features with degree = 2 are: \n    [1, a, b, a^2, ab, b^2].\n    \n    trigonometry_features: bool, default = False\n    When set to True, new features are created based on all trigonometric combinations \n    that exist within the numeric features in a dataset to the degree defined in the\n    polynomial_degree param.\n    \n    polynomial_threshold: float, default = 0.1\n    This is used to compress a sparse matrix of polynomial and trigonometric features.\n    Polynomial and trigonometric features whose feature importance based on the \n    combination of Random Forest, AdaBoost and Linear correlation falls within the \n    percentile of the defined threshold are kept in the dataset. Remaining features \n    are dropped before further processing.\n    \n    group_features: list or list of list, default = None\n    When a dataset contains features that have related characteristics, the group_features\n    param can be used for statistical feature extraction. For example, if a dataset has \n    numeric features that are related with each other (i.e 'Col1', 'Col2', 'Col3'), a list \n    containing the column names can be passed under group_features to extract statistical \n    information such as the mean, median, mode and standard deviation.\n    \n    group_names: list, default = None\n    When group_features is passed, a name of the group can be passed into the group_names \n    param as a list containing strings. The length of a group_names list must equal to the \n    length  of group_features. When the length doesn't match or the name is not passed, new \n    features are sequentially named such as group_1, group_2 etc.\n    \n    feature_selection: bool, default = False\n    When set to True, a subset of features are selected using a combination of various\n    permutation importance techniques including Random Forest, Adaboost and Linear \n    correlation with target variable. The size of the subset is dependent on the \n    feature_selection_param. Generally, this is used to constrain the feature space \n    in order to improve efficiency in modeling. When polynomial_features and \n    feature_interaction  are used, it is highly recommended to define the \n    feature_selection_threshold param with a lower value.\n\n    feature_selection_threshold: float, default = 0.8\n    Threshold used for feature selection (including newly created polynomial features).\n    A higher value will result in a higher feature space. It is recommended to do multiple\n    trials with different values of feature_selection_threshold specially in cases where \n    polynomial_features and feature_interaction are used. Setting a very low value may be \n    efficient but could result in under-fitting.\n    \n    feature_interaction: bool, default = False \n    When set to True, it will create new features by interacting (a * b) for all numeric \n    variables in the dataset including polynomial and trigonometric features (if created). \n    This feature is not scalable and may not work as expected on datasets with large \n    feature space.\n    \n    feature_ratio: bool, default = False\n    When set to True, it will create new features by calculating the ratios (a / b) of all \n    numeric variables in the dataset. This feature is not scalable and may not work as \n    expected on datasets with large feature space.\n    \n    interaction_threshold: bool, default = 0.01\n    Similar to polynomial_threshold, It is used to compress a sparse matrix of newly \n    created features through interaction. Features whose importance based on the \n    combination  of  Random Forest, AdaBoost and Linear correlation falls within the \n    percentile of the  defined threshold are kept in the dataset. Remaining features \n    are dropped before further processing.\n    \n    session_id: int, default = None\n    If None, a random seed is generated and returned in the Information grid. The \n    unique number is then distributed as a seed in all functions used during the \n    experiment. This can be used for later reproducibility of the entire experiment.\n    \n    silent: bool, default = False\n    When set to True, confirmation of data types is not required. All preprocessing will \n    be performed assuming automatically inferred data types. Not recommended for direct use \n    except for established pipelines.\n    \n    profile: bool, default = False\n    If set to true, a data profile for Exploratory Data Analysis will be displayed \n    in an interactive HTML report.\n\n    resample: bool, default = False\n    If set to true, performs a resample technique into the training data.\n\n    resample_method: string, default = None\n    When set resample to True, you must choose a valid resampling strategy method\n    Possible values: \"oss\", \"enn\", \"random_under\", \"smoteenn\", \"smote\", \"random_over\"\n    \n    Returns:\n    --------\n\n    info grid:    Information grid is printed.\n    -----------\n\n    Warnings:\n    ---------\n    None\n      \n       \n    \"\"\"",
        "\"\"\"\n    preprocessing starts here\n    \"\"\"",
        "\"\"\"\n    preprocessing ends here\n    \"\"\"",
        "\"\"\"\n            MONITOR UPDATE STARTS\n            \"\"\"",
        "\"\"\"\n            MONITOR UPDATE ENDS\n            \"\"\"",
        "\"\"\"\n            Time calculation begins\n            \"\"\"",
        "\"\"\"\n            Time calculation Ends\n            \"\"\"",
        "\"\"\"\n            Final display Starts\n            \"\"\"",
        "\"\"\"\n            Final display Ends\n            \"\"\"",
        "\"\"\"\n            Final display Starts\n            \"\"\"",
        "\"\"\"\n            Final display Ends\n            \"\"\"",
        "\"\"\"\n        Final display Starts\n        \"\"\"",
        "\"\"\"\n        Final display Ends\n        \"\"\"",
        "\"\"\"\n     \n    Description:\n    ------------\n    This function creates a model and scores it using Stratified Cross Validation. \n    The output prints a score grid that shows Accuracy, AUC, Recall, Precision, \n    F1 and Kappa by fold (default = 10 Fold). \n\n    This function returns a trained model object. \n\n    setup() function must be called before using create_model()\n\n        Example\n        -------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        experiment_name = setup(data = juice,  target = 'Purchase')\n        \n        lr = create_model('lr')\n\n        This will create a trained Logistic Regression model.\n\n    Parameters\n    ----------\n    estimator : string, default = None\n\n    Enter abbreviated string of the estimator class. All estimators support binary or \n    multiclass problem. List of estimators supported:\n\n    Estimator                   Abbreviated String     Original Implementation \n    ---------                   ------------------     -----------------------\n    Logistic Regression         'lr'                   linear_model.LogisticRegression\n    K Nearest Neighbour         'knn'                  neighbors.KNeighborsClassifier\n    Naives Bayes                'nb'                   naive_bayes.GaussianNB\n    Decision Tree               'dt'                   tree.DecisionTreeClassifier\n    SVM (Linear)                'svm'                  linear_model.SGDClassifier\n    SVM (RBF)                   'rbfsvm'               svm.SVC\n    Gaussian Process            'gpc'                  gaussian_process.GPC\n    Multi Layer Perceptron      'mlp'                  neural_network.MLPClassifier\n    Ridge Classifier            'ridge'                linear_model.RidgeClassifier\n    Random Forest               'rf'                   ensemble.RandomForestClassifier\n    Quadratic Disc. Analysis    'qda'                  discriminant_analysis.QDA\n    AdaBoost                    'ada'                  ensemble.AdaBoostClassifier\n    Gradient Boosting           'gbc'                  ensemble.GradientBoostingClassifier\n    Linear Disc. Analysis       'lda'                  discriminant_analysis.LDA\n    Extra Trees Classifier      'et'                   ensemble.ExtraTreesClassifier\n    Extreme Gradient Boosting   'xgboost'              xgboost.readthedocs.io\n    Light Gradient Boosting     'lightgbm'             github.com/microsoft/LightGBM\n    CatBoost Classifier         'catboost'             https://catboost.ai\n\n    ensemble: Boolean, default = False\n    True would result in an ensemble of estimator using the method parameter defined. \n\n    method: String, 'Bagging' or 'Boosting', default = None.\n    method must be defined when ensemble is set to True. Default method is set to None. \n\n    fold: integer, default = 10\n    Number of folds to be used in Kfold CV. Must be at least 2. \n\n    round: integer, default = 4\n    Number of decimal places the metrics in the score grid will be rounded to. \n\n    verbose: Boolean, default = True\n    Score grid is not printed when verbose is set to False.\n\n     **kwargs: Additional keyword arguments passed to the models\n\n    Returns:\n    --------\n\n    score grid:   A table containing the scores of the model across the kfolds. \n    -----------   Scoring metrics used are Accuracy, AUC, Recall, Specificity, Precision, F1,  \n                  Kappa and three calibration metrics. \n                  Mean and standard deviation of the scores across the \n                  folds are also returned.\n\n    model:        trained model object\n    -----------\n\n    Warnings:\n    ---------\n    - 'svm' and 'ridge' doesn't support predict_proba method. As such, AUC will be\n      returned as zero (0.0)\n     \n    - If target variable is multiclass (more than 2 classes), AUC will be returned \n      as zero (0.0)\n\n    - 'rbfsvm' and 'gpc' uses non-linear kernel and hence the fit time complexity is \n      more than quadratic. These estimators are hard to scale on datasets with more \n      than 10,000 samples.\n    \n      \n  \n    \"\"\"",
        "\"\"\"\n    \n    ERROR HANDLING STARTS HERE\n    \n    \"\"\"",
        "\"\"\"\n    \n    ERROR HANDLING ENDS HERE\n    \n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE STARTS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE ENDS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE STARTS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE ENDS\n    \"\"\"",
        "\"\"\"\n        MONITOR UPDATE STARTS\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE ENDS\n        \"\"\"",
        "\"\"\"\n        \n        This section handles time calculation and is created to update_display() as code loops through \n        the fold defined.\n        \n        \"\"\"",
        "\"\"\"\n        TIME CALCULATION SUB-SECTION STARTS HERE\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE STARTS\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE ENDS\n        \"\"\"",
        "\"\"\"\n        TIME CALCULATION ENDS HERE\n        \"\"\"",
        "\"\"\"\n        \n        Update_display() ends here\n        \n        \"\"\"",
        "\"\"\"\n       \n    \n    Description:\n    ------------\n    This function ensembles the trained base estimator using the method defined in \n    'method' param (default = 'Bagging'). The output prints a score grid that shows \n    Accuracy, AUC, Recall, Precision, F1 and Kappa by fold (default = 10 Fold). \n\n    This function returns a trained model object.  \n\n    Model must be created using create_model() or tune_model().\n\n        Example\n        -------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        experiment_name = setup(data = juice,  target = 'Purchase')\n        dt = create_model('dt')\n        \n        ensembled_dt = ensemble_model(dt)\n\n        This will return an ensembled Decision Tree model using 'Bagging'.\n        \n    Parameters\n    ----------\n    estimator : object, default = None\n\n    method: String, default = 'Bagging'\n    Bagging method will create an ensemble meta-estimator that fits base \n    classifiers each on random subsets of the original dataset. The other\n    available method is 'Boosting' which will create a meta-estimators by\n    fitting a classifier on the original dataset and then fits additional \n    copies of the classifier on the same dataset but where the weights of \n    incorrectly classified instances are adjusted such that subsequent \n    classifiers focus more on difficult cases.\n    \n    fold: integer, default = 10\n    Number of folds to be used in Kfold CV. Must be at least 2.\n    \n    n_estimators: integer, default = 10\n    The number of base estimators in the ensemble.\n    In case of perfect fit, the learning procedure is stopped early.\n\n    round: integer, default = 4\n    Number of decimal places the metrics in the score grid will be rounded to.\n\n    verbose: Boolean, default = True\n    Score grid is not printed when verbose is set to False.\n\n    Returns:\n    --------\n\n    score grid:   A table containing the scores of the model across the kfolds. \n    -----------   Scoring metrics used are Accuracy, AUC, Recall, Precision, F1 \n                  and Kappa. Mean and standard deviation of the scores across the \n                  folds are also returned.\n\n    model:        trained ensembled model object\n    -----------\n\n    Warnings:\n    ---------  \n    - If target variable is multiclass (more than 2 classes), AUC will be returned \n      as zero (0.0).\n        \n        \n    \n    \"\"\"",
        "\"\"\"\n    \n    ERROR HANDLING STARTS HERE\n    \n    \"\"\"",
        "\"\"\"\n    \n    ERROR HANDLING ENDS HERE\n    \n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE STARTS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE ENDS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE STARTS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE ENDS\n    \"\"\"",
        "\"\"\"\n        MONITOR UPDATE STARTS\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE ENDS\n        \"\"\"",
        "\"\"\"\n        \n        This section is created to update_display() as code loops through the fold defined.\n        \n        \"\"\"",
        "\"\"\"\n        \n        TIME CALCULATION SUB-SECTION STARTS HERE\n        \n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE STARTS\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE ENDS\n        \"\"\"",
        "\"\"\"\n        \n        TIME CALCULATION ENDS HERE\n        \n        \"\"\"",
        "\"\"\"\n        \n        Update_display() ends here\n        \n        \"\"\"",
        "\"\"\"\n          \n    Description:\n    ------------\n    This function takes a trained model object and returns a plot based on the\n    test / hold-out set. The process may require the model to be re-trained in\n    certain cases. See list of plots supported below. \n    \n    Model must be created using create_model() or tune_model().\n\n        Example:\n        --------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        experiment_name = setup(data = juice,  target = 'Purchase')\n        lr = create_model('lr')\n        \n        plot_model(lr)\n\n        This will return an AUC plot of a trained Logistic Regression model.\n\n    Parameters\n    ----------\n    estimator : object, default = none\n    A trained model object should be passed as an estimator. \n\n    plot : string, default = auc\n    Enter abbreviation of type of plot. The current list of plots supported are:\n\n    Name                        Abbreviated String     Original Implementation \n    ---------                   ------------------     -----------------------\n    Area Under the Curve         'auc'                 .. / rocauc.html\n    Discrimination Threshold     'threshold'           .. / threshold.html\n    Precision Recall Curve       'pr'                  .. / prcurve.html\n    Confusion Matrix             'confusion_matrix'    .. / confusion_matrix.html\n    Class Prediction Error       'error'               .. / class_prediction_error.html\n    Classification Report        'class_report'        .. / classification_report.html\n    Decision Boundary            'boundary'            .. / boundaries.html\n    Recursive Feat. Selection    'rfe'                 .. / rfecv.html\n    Learning Curve               'learning'            .. / learning_curve.html\n    Manifold Learning            'manifold'            .. / manifold.html\n    Calibration Curve            'calibration'         .. / calibration_curve.html\n    Calibration Curve + Hist     'calibration_histogram'     N/A\n    Validation Curve             'vc'                  .. / validation_curve.html\n    Dimension Learning           'dimension'           .. / radviz.html\n    Feature Importance           'feature'                   N/A \n    Model Hyperparameter         'parameter'                 N/A \n    20% K-tops                   'ktops'                     N/A\n    Accuracy Chart               'accuracy'                  N/A\n    Risk Density Chart           'risk_density'              N/A\n    Pair Plot                    'pairplot'                  N/A\n    Shapley Values               'shapley'                   N/A\n\n    ** https://www.scikit-yb.org/en/latest/api/classifier/<reference>\n\n    Returns:\n    --------\n\n    Visual Plot:  Prints the visual plot. \n    ------------\n\n    Warnings:\n    ---------\n    -  'svm' and 'ridge' doesn't support the predict_proba method. As such, AUC and \n        calibration plots are not available for these estimators.\n       \n    -   When the 'max_features' parameter of a trained model object is not equal to \n        the number of samples in training set, the 'rfe' plot is not available.\n              \n    -   'calibration', 'threshold', 'manifold' and 'rfe' plots are not available for\n         multiclass problems.\n           \n             \n\n    \"\"\"",
        "\"\"\"\n    \n    ERROR HANDLING STARTS HERE\n    \n    \"\"\"",
        "\"\"\"\n    \n    ERROR HANDLING ENDS HERE\n    \n    \"\"\"",
        "\"\"\"\n      \n    Description:\n    ------------\n    This function uses all models in the model library and scores them using Stratified \n    Cross Validation. The output prints a score grid that shows Accuracy, AUC, Recall,\n    Precision, F1 and Kappa by fold (default CV = 10 Folds) of all the available models \n    in the model library.\n    \n    When turbo is set to True ('rbfsvm', 'gpc' and 'mlp') are excluded due to longer\n    training times. By default turbo param is set to True.\n\n    List of models that support binary or multiclass problems in Model Library:\n\n    Estimator                   Abbreviated String     sklearn Implementation \n    ---------                   ------------------     -----------------------\n    Logistic Regression         'lr'                   linear_model.LogisticRegression\n    K Nearest Neighbour         'knn'                  neighbors.KNeighborsClassifier\n    Naives Bayes                'nb'                   naive_bayes.GaussianNB\n    Decision Tree               'dt'                   tree.DecisionTreeClassifier\n    SVM (Linear)                'svm'                  linear_model.SGDClassifier\n    SVM (RBF)                   'rbfsvm'               svm.SVC\n    Gaussian Process            'gpc'                  gaussian_process.GPC\n    Multi Layer Perceptron      'mlp'                  neural_network.MLPClassifier\n    Ridge Classifier            'ridge'                linear_model.RidgeClassifier\n    Random Forest               'rf'                   ensemble.RandomForestClassifier\n    Quadratic Disc. Analysis    'qda'                  discriminant_analysis.QDA \n    AdaBoost                    'ada'                  ensemble.AdaBoostClassifier\n    Gradient Boosting           'gbc'                  ensemble.GradientBoostingClassifier\n    Linear Disc. Analysis       'lda'                  discriminant_analysis.LDA \n    Extra Trees Classifier      'et'                   ensemble.ExtraTreesClassifier\n    Extreme Gradient Boosting   'xgboost'              xgboost.readthedocs.io\n    Light Gradient Boosting     'lightgbm'             github.com/microsoft/LightGBM\n    CatBoost Classifier         'catboost'             https://catboost.ai\n\n        Example:\n        --------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        experiment_name = setup(data = juice,  target = 'Purchase')\n        \n        compare_models() \n\n        This will return the averaged score grid of all the models except 'rbfsvm', 'gpc' \n        and 'mlp'. When turbo param is set to False, all models including 'rbfsvm', 'gpc' \n        and 'mlp' are used but this may result in longer training times.\n        \n        compare_models( blacklist = [ 'knn', 'gbc' ] , turbo = False) \n\n        This will return a comparison of all models except K Nearest Neighbour and\n        Gradient Boosting Classifier.\n        \n        compare_models( blacklist = [ 'knn', 'gbc' ] , turbo = True) \n\n        This will return comparison of all models except K Nearest Neighbour, \n        Gradient Boosting Classifier, SVM (RBF), Gaussian Process Classifier and\n        Multi Level Perceptron.\n        \n\n    Parameters\n    ----------\n    blacklist: string, default = None\n    In order to omit certain models from the comparison, the abbreviation string \n    (see above list) can be passed as list in blacklist param. This is normally\n    done to be more efficient with time. \n\n    fold: integer, default = 10\n    Number of folds to be used in Kfold CV. Must be at least 2. \n\n    round: integer, default = 4\n    Number of decimal places the metrics in the score grid will be rounded to.\n  \n    sort: string, default = 'Accuracy'\n    The scoring measure specified is used for sorting the average score grid\n    Other options are 'AUC', 'Recall', 'Precision', 'F1' and 'Kappa'.\n\n    turbo: Boolean, default = True\n    When turbo is set to True, it blacklists estimators that have longer\n    training times.\n    \n    Returns:\n    --------\n\n    score grid:   A table containing the scores of the model across the kfolds. \n    -----------   Scoring metrics used are Accuracy, AUC, Recall, Precision, F1 \n                  and Kappa. Mean and standard deviation of the scores across the \n                  folds are also returned.\n\n    Warnings:\n    ---------\n    - compare_models() though attractive, might be time consuming with large \n      datasets. By default turbo is set to True, which blacklists models that\n      have longer training times. Changing turbo parameter to False may result \n      in very high training times with datasets where number of samples exceed \n      10,000.\n      \n    - If target variable is multiclass (more than 2 classes), AUC will be \n      returned as zero (0.0)\n      \n    - This function doesn't return model object.\n      \n             \n    \n    \"\"\"",
        "\"\"\"\n    \n    ERROR HANDLING STARTS HERE\n    \n    \"\"\"",
        "\"\"\"\n    \n    ERROR HANDLING ENDS HERE\n    \n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE STARTS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE ENDS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE STARTS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE ENDS\n    \"\"\"",
        "\"\"\"\n        MONITOR UPDATE STARTS\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE ENDS\n        \"\"\"",
        "\"\"\"\n            MONITOR UPDATE STARTS\n            \"\"\"",
        "\"\"\"\n            MONITOR UPDATE ENDS\n            \"\"\"",
        "\"\"\"\n            TIME CALCULATION SUB-SECTION STARTS HERE\n            \"\"\"",
        "\"\"\"\n            MONITOR UPDATE STARTS\n            \"\"\"",
        "\"\"\"\n            MONITOR UPDATE ENDS\n            \"\"\"",
        "\"\"\"\n        \n    Description:\n    ------------\n    This function tunes the hyperparameters of a model and scores it using Stratified \n    Cross Validation. The output prints a score grid that shows Accuracy, AUC, Recall\n    Precision, F1 and Kappa by fold (by default = 10 Folds).\n\n    This function returns a trained model object.  \n\n    tune_model() only accepts a string parameter for estimator.\n\n        Example\n        -------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        experiment_name = setup(data = juice,  target = 'Purchase')\n        \n        tuned_xgboost = tune_model('xgboost') \n\n        This will tune the hyperparameters of Extreme Gradient Boosting Classifier.\n\n\n    Parameters\n    ----------\n    estimator : string, default = None\n\n    Enter abbreviated name of the estimator class. List of estimators supported:\n\n    Estimator                   Abbreviated String     Original Implementation \n    ---------                   ------------------     -----------------------\n    Logistic Regression         'lr'                   linear_model.LogisticRegression\n    K Nearest Neighbour         'knn'                  neighbors.KNeighborsClassifier\n    Naives Bayes                'nb'                   naive_bayes.GaussianNB\n    Decision Tree               'dt'                   tree.DecisionTreeClassifier\n    SVM (Linear)                'svm'                  linear_model.SGDClassifier\n    SVM (RBF)                   'rbfsvm'               svm.SVC\n    Gaussian Process            'gpc'                  gaussian_process.GPC\n    Multi Layer Perceptron      'mlp'                  neural_network.MLPClassifier\n    Ridge Classifier            'ridge'                linear_model.RidgeClassifier\n    Random Forest               'rf'                   ensemble.RandomForestClassifier\n    Quadratic Disc. Analysis    'qda'                  discriminant_analysis.QDA \n    AdaBoost                    'ada'                  ensemble.AdaBoostClassifier\n    Gradient Boosting           'gbc'                  ensemble.GradientBoostingClassifier\n    Linear Disc. Analysis       'lda'                  discriminant_analysis.LDA \n    Extra Trees Classifier      'et'                   ensemble.ExtraTreesClassifier\n    Extreme Gradient Boosting   'xgboost'              xgboost.readthedocs.io\n    Light Gradient Boosting     'lightgbm'             github.com/microsoft/LightGBM\n    CatBoost Classifier         'catboost'             https://catboost.ai\n\n    fold: integer, default = 10\n    Number of folds to be used in Kfold CV. Must be at least 2. \n\n    round: integer, default = 4\n    Number of decimal places the metrics in the score grid will be rounded to. \n\n    n_iter: integer, default = 10\n    Number of iterations within the Random Grid Search. For every iteration, \n    the model randomly selects one value from the pre-defined grid of hyperparameters.\n\n    optimize: string, default = 'accuracy'\n    Measure used to select the best model through hyperparameter tuning.\n    The default scoring measure is 'Accuracy'. Other measures include 'AUC',\n    'Recall', 'Precision', 'F1', 'Average_Precision'.\n\n    ensemble: Boolean, default = None\n    True enables ensembling of the model through method defined in 'method' param.\n\n    method: String, 'Bagging' or 'Boosting', default = None\n    method comes into effect only when ensemble = True. Default is set to None. \n\n    verbose: Boolean, default = True\n    Score grid is not printed when verbose is set to False.\n\n    **kwargs: Additional keyword arguments passed to the models\n\n    Returns:\n    --------\n\n    score grid:   A table containing the scores of the model across the kfolds. \n    -----------   Scoring metrics used are Accuracy, AUC, Recall, Precision, F1 \n                  and Kappa. Mean and standard deviation of the scores across the \n                  folds are also returned.\n\n    model:        trained and tuned model object. \n    -----------\n\n    Warnings:\n    ---------\n    - estimator parameter takes an abbreviated string. Passing a trained model object\n      returns an error. The tune_model() function internally calls create_model() \n      before tuning the hyperparameters.\n   \n    - If target variable is multiclass (more than 2 classes), optimize param 'AUC' is \n      not acceptable.\n      \n    - If target variable is multiclass (more than 2 classes), AUC will be returned as\n      zero (0.0)\n        \n          \n    \n  \"\"\"",
        "\"\"\"\n    \n    ERROR HANDLING STARTS HERE\n    \n    \"\"\"",
        "\"\"\"\n    \n    ERROR HANDLING ENDS HERE\n    \n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE STARTS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE ENDS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE STARTS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE ENDS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE STARTS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE ENDS\n    \"\"\"",
        "\"\"\"\n        MONITOR UPDATE STARTS\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE ENDS\n        \"\"\"",
        "\"\"\"\n        \n        This section is created to update_display() as code loops through the fold defined.\n        \n        \"\"\"",
        "\"\"\"\n        \n        TIME CALCULATION SUB-SECTION STARTS HERE\n        \n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE STARTS\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE ENDS\n        \"\"\"",
        "\"\"\"\n        \n        TIME CALCULATION ENDS HERE\n        \n        \"\"\"",
        "\"\"\"\n        \n        Update_display() ends here\n        \n        \"\"\"",
        "\"\"\"\n\n    Description:\n    ------------\n    This function creates a Soft Voting / Majority Rule classifier for all the\n    estimators in the model library (excluding the few when turbo is True) or\n    for specific trained estimators passed as a list in estimator_list param.\n    It scores it using Stratified Cross Validation. The output prints a score\n    grid that shows Accuracy,  AUC, Recall, Precision, F1 and Kappa by fold\n    (default CV = 10 Folds).\n    This function returns a trained model object.\n        Example:\n        --------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        experiment_name = setup(data = juice,  target = 'Purchase')\n\n        blend_all = blend_models()\n        This will create a VotingClassifier for all models in the model library\n        except for 'rbfsvm', 'gpc' and 'mlp'.\n        For specific models, you can use:\n        lr = create_model('lr')\n        rf = create_model('rf')\n        knn = create_model('knn')\n        blend_three = blend_models(estimator_list = [lr,rf,knn])\n\n        This will create a VotingClassifier of lr, rf and knn.\n    Parameters\n    ----------\n    estimator_list : string ('All') or list of object, default = 'All'\n    fold: integer, default = 10\n    Number of folds to be used in Kfold CV. Must be at least 2.\n    round: integer, default = 4\n    Number of decimal places the metrics in the score grid will be rounded to.\n    method: string, default = 'hard'\n    'hard' uses predicted class labels for majority rule voting.'soft', predicts\n    the class label based on the argmax of the sums of the predicted probabilities,\n    which is recommended for an ensemble of well-calibrated classifiers.\n    turbo: Boolean, default = True\n    When turbo is set to True, it blacklists estimator that uses Radial Kernel.\n    verbose: Boolean, default = True\n    Score grid is not printed when verbose is set to False.\n    Returns:\n    --------\n    score grid:   A table containing the scores of the model across the kfolds.\n    -----------   Scoring metrics used are Accuracy, AUC, Recall, Precision, F1\n                  and Kappa. Mean and standard deviation of the scores across the\n                  folds are also returned.\n    model:        trained Voting Classifier model object.\n    -----------\n    Warnings:\n    ---------\n    - When passing estimator_list with method set to 'soft'. All the models in the\n      estimator_list must support predict_proba function. 'svm' and 'ridge' doesnt\n      support the predict_proba and hence an exception will be raised.\n\n    - When estimator_list is set to 'All' and method is forced to 'soft', estimators\n      that doesnt support the predict_proba function will be dropped from the estimator\n      list.\n\n    - CatBoost Classifier not supported in blend_models().\n\n    - If target variable is multiclass (more than 2 classes), AUC will be returned as\n      zero (0.0).\n\n\n\n    \"\"\"",
        "'''\n\n    ERROR HANDLING STARTS HERE\n\n    '''",
        "'''\n\n    ERROR HANDLING ENDS HERE\n\n    '''",
        "'''\n    MONITOR UPDATE STARTS\n    '''",
        "'''\n    MONITOR UPDATE ENDS\n    '''",
        "'''\n    MONITOR UPDATE STARTS\n    '''",
        "'''\n    MONITOR UPDATE ENDS\n    '''",
        "'''\n        MONITOR UPDATE STARTS\n        '''",
        "'''\n        MONITOR UPDATE ENDS\n        '''",
        "'''\n\n        This section handles time calculation and is created to update_display() as code loops through \n        the fold defined.\n\n        '''",
        "'''\n        TIME CALCULATION SUB-SECTION STARTS HERE\n        '''",
        "'''\n        MONITOR UPDATE STARTS\n        '''",
        "'''\n        MONITOR UPDATE ENDS\n        '''",
        "'''\n        TIME CALCULATION ENDS HERE\n        '''",
        "'''\n\n        Update_display() ends here\n\n        '''",
        "\"\"\"\n            \n    Description:\n    ------------\n    This function creates a meta model and scores it using Stratified Cross Validation.\n    The predictions from the base level models as passed in the estimator_list param \n    are used as input features for the meta model. The restacking parameter controls\n    the ability to expose raw features to the meta model when set to True\n    (default = False).\n\n    The output prints the score grid that shows Accuracy, AUC, Recall, Precision, \n    F1 and Kappa by fold (default = 10 Folds). \n    \n    This function returns a container which is the list of all models in stacking. \n\n        Example:\n        --------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        experiment_name = setup(data = juice,  target = 'Purchase')\n        dt = create_model('dt')\n        rf = create_model('rf')\n        ada = create_model('ada')\n        ridge = create_model('ridge')\n        knn = create_model('knn')\n\n        stacked_models = stack_models(estimator_list=[dt,rf,ada,ridge,knn])\n\n        This will create a meta model that will use the predictions of all the \n        models provided in estimator_list param. By default, the meta model is \n        Logistic Regression but can be changed with meta_model param.\n\n    Parameters\n    ----------\n    estimator_list : list of objects\n\n    meta_model : object, default = None\n    if set to None, Logistic Regression is used as a meta model.\n\n    fold: integer, default = 10\n    Number of folds to be used in Kfold CV. Must be at least 2. \n\n    round: integer, default = 4\n    Number of decimal places the metrics in the score grid will be rounded to.\n\n    method: string, default = 'soft'\n    'soft', uses predicted probabilities as an input to the meta model.\n    'hard', uses predicted class labels as an input to the meta model. \n\n    restack: Boolean, default = True\n    When restack is set to True, raw data will be exposed to meta model when\n    making predictions, otherwise when False, only the predicted label or\n    probabilities is passed to meta model when making final predictions.\n\n    plot: Boolean, default = False\n    When plot is set to True, it will return the correlation plot of prediction\n    from all base models provided in estimator_list.\n    \n    finalize: Boolean, default = False\n    When finalize is set to True, it will fit the stacker on entire dataset\n    including the hold-out sample created during the setup() stage. It is not \n    recommended to set this to True here, If you would like to fit the stacker \n    on the entire dataset including the hold-out, use finalize_model().\n    \n    verbose: Boolean, default = True\n    Score grid is not printed when verbose is set to False.\n\n    Returns:\n    --------\n\n    score grid:   A table containing the scores of the model across the kfolds. \n    -----------   Scoring metrics used are Accuracy, AUC, Recall, Precision, F1 \n                  and Kappa. Mean and standard deviation of the scores across the \n                  folds are also returned.\n\n    container:    list of all the models where last element is meta model.\n    ----------\n\n    Warnings:\n    ---------\n    -  When the method is forced to be 'soft' and estimator_list param includes \n       estimators that donot support the predict_proba method such as 'svm' or \n       'ridge',  predicted values for those specific estimators only are used \n       instead of probability  when building the meta_model. The same rule applies\n       when the stacker is used under predict_model() function.\n        \n    -  If target variable is multiclass (more than 2 classes), AUC will be returned \n       as zero (0.0).\n       \n    -  method 'soft' not supported for when target is multiclass.\n         \n            \n    \"\"\"",
        "\"\"\"\n    \n    ERROR HANDLING STARTS HERE\n    \n    \"\"\"",
        "\"\"\"\n    \n    ERROR HANDLING ENDS HERE\n    \n    \"\"\"",
        "\"\"\"\n        MONITOR UPDATE STARTS\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE ENDS\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE STARTS\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE ENDS\n        \"\"\"",
        "\"\"\"\n        \n        This section handles time calculation and is created to update_display() as code loops through \n        the fold defined.\n        \n        \"\"\"",
        "\"\"\"\n        \n        TIME CALCULATION SUB-SECTION STARTS HERE\n        \n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE STARTS\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE ENDS\n        \"\"\"",
        "\"\"\"\n        \n        TIME CALCULATION ENDS HERE\n        \n        \"\"\"",
        "\"\"\"\n        \n        Update_display() ends here\n        \n        \"\"\"",
        "\"\"\"\n         \n    Description:\n    ------------\n    This function creates a sequential stack net using cross validated predictions \n    at each layer. The final score grid contains predictions from the meta model \n    using Stratified Cross Validation. Base level models can be passed as \n    estimator_list param, the layers can be organized as a sub list within the \n    estimator_list object.  Restacking param controls the ability to expose raw \n    features to meta model.\n\n        Example:\n        --------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        experiment_name = setup(data = juice,  target = 'Purchase')\n        dt = create_model('dt')\n        rf = create_model('rf')\n        ada = create_model('ada')\n        ridge = create_model('ridge')\n        knn = create_model('knn')\n\n        stacknet = create_stacknet(estimator_list =[[dt,rf],[ada,ridge,knn]])\n\n        This will result in the stacking of models in multiple layers. The first layer \n        contains dt and rf, the predictions of which are used by models in the second \n        layer to generate predictions which are then used by the meta model to generate\n        final predictions. By default, the meta model is Logistic Regression but can be \n        changed with meta_model param.\n\n    Parameters\n    ----------\n    estimator_list : nested list of objects\n\n    meta_model : object, default = None\n    if set to None, Logistic Regression is used as a meta model.\n\n    fold: integer, default = 10\n    Number of folds to be used in Kfold CV. Must be at least 2. \n\n    round: integer, default = 4\n    Number of decimal places the metrics in the score grid will be rounded to.\n  \n    method: string, default = 'soft'\n    'soft', uses predicted probabilities as an input to the meta model.\n    'hard', uses predicted class labels as an input to the meta model. \n    \n    restack: Boolean, default = True\n    When restack is set to True, raw data and prediction of all layers will be \n    exposed to the meta model when making predictions. When set to False, only \n    the predicted label or probabilities of last layer is passed to meta model \n    when making final predictions.\n    \n    finalize: Boolean, default = False\n    When finalize is set to True, it will fit the stacker on entire dataset\n    including the hold-out sample created during the setup() stage. It is not \n    recommended to set this to True here, if you would like to fit the stacker \n    on the entire dataset including the hold-out, use finalize_model().\n    \n    verbose: Boolean, default = True\n    Score grid is not printed when verbose is set to False.\n\n    Returns:\n    --------\n\n    score grid:   A table containing the scores of the model across the kfolds. \n    -----------   Scoring metrics used are Accuracy, AUC, Recall, Precision, F1 \n                  and Kappa. Mean and standard deviation of the scores across the \n                  folds are also returned.\n\n    container:    list of all models where the last element is the meta model.\n    ----------\n\n    Warnings:\n    ---------\n    -  When the method is forced to be 'soft' and estimator_list param includes \n       estimators that donot support the predict_proba method such as 'svm' or \n       'ridge',  predicted values for those specific estimators only are used \n       instead of probability  when building the meta_model. The same rule applies\n       when the stacker is used under predict_model() function.\n    \n    -  If target variable is multiclass (more than 2 classes), AUC will be returned \n       as zero (0.0)\n       \n    -  method 'soft' not supported for when target is multiclass.\n    \n      \n    \"\"\"",
        "\"\"\"\n    \n    ERROR HANDLING STARTS HERE\n    \n    \"\"\"",
        "\"\"\"\n    \n    ERROR HANDLING ENDS HERE\n    \n    \"\"\"",
        "\"\"\"\n        MONITOR UPDATE STARTS\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE ENDS\n        \"\"\"",
        "\"\"\"\n            MONITOR UPDATE STARTS\n            \"\"\"",
        "\"\"\"\n            MONITOR UPDATE ENDS\n            \"\"\"",
        "\"\"\"\n            defining columns\n            \"\"\"",
        "\"\"\"\n            defining columns end here\n            \"\"\"",
        "\"\"\"\n        MONITOR UPDATE STARTS\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE ENDS\n        \"\"\"",
        "\"\"\"\n        \n        This section handles time calculation and is created to update_display() as code loops through \n        the fold defined.\n        \n        \"\"\"",
        "\"\"\"\n        TIME CALCULATION SUB-SECTION STARTS HERE\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE STARTS\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE ENDS\n        \"\"\"",
        "\"\"\"\n        TIME CALCULATION ENDS HERE\n        \"\"\"",
        "\"\"\"\n        \n        Update_display() ends here\n        \n        \"\"\"",
        "\"\"\"\n          \n    Description:\n    ------------\n    This function takes a trained model object and returns an interpretation plot \n    based on the test / hold-out set. It only supports tree based algorithms. \n\n    This function is implemented based on the SHAP (SHapley Additive exPlanations),\n    which is a unified approach to explain the output of any machine learning model. \n    SHAP connects game theory with local explanations.\n\n    For more information : https://shap.readthedocs.io/en/latest/\n\n        Example\n        -------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        experiment_name = setup(data = juice,  target = 'Purchase')\n        dt = create_model('dt')\n        \n        interpret_model(dt)\n\n        This will return a summary interpretation plot of Decision Tree model.\n\n    Parameters\n    ----------\n    estimator : object, default = none\n    A trained tree based model object should be passed as an estimator. \n\n    plot : string, default = 'summary'\n    other available options are 'correlation' and 'reason'.\n\n    feature: string, default = None\n    This parameter is only needed when plot = 'correlation'. By default feature is \n    set to None which means the first column of the dataset will be used as a variable. \n    A feature parameter must be passed to change this.\n\n    observation: integer, default = None\n    This parameter only comes into effect when plot is set to 'reason'. If no observation\n    number is provided, it will return an analysis of all observations with the option\n    to select the feature on x and y axes through drop down interactivity. For analysis at\n    the sample level, an observation parameter must be passed with the index value of the\n    observation in test / hold-out set. \n\n    Returns:\n    --------\n\n    Visual Plot:  Returns the visual plot.\n    -----------   Returns the interactive JS plot when plot = 'reason'.\n\n    Warnings:\n    --------- \n    - interpret_model doesn't support multiclass problems.\n      \n         \n         \n    \"\"\"",
        "\"\"\"\n    Error Checking starts here\n    \n    \"\"\"",
        "\"\"\"\n    Error Checking Ends here\n    \n    \"\"\"",
        "\"\"\"\n     \n    Description:\n    ------------\n    This function takes the input of trained estimator and performs probability \n    calibration with sigmoid or isotonic regression. The output prints a score \n    grid that shows Accuracy, AUC, Recall, Precision, F1 and Kappa by fold \n    (default = 10 Fold). The ouput of the original estimator and the calibrated \n    estimator (created using this function) might not differ much. In order \n    to see the calibration differences, use 'calibration' plot in plot_model to \n    see the difference before and after.\n\n    This function returns a trained model object. \n\n        Example\n        -------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        experiment_name = setup(data = juice,  target = 'Purchase')\n        dt_boosted = create_model('dt', ensemble = True, method = 'Boosting')\n        \n        calibrated_dt = calibrate_model(dt_boosted)\n\n        This will return Calibrated Boosted Decision Tree Model.\n\n    Parameters\n    ----------\n    estimator : object\n    \n    method : string, default = 'sigmoid'\n    The method to use for calibration. Can be 'sigmoid' which corresponds to Platt's \n    method or 'isotonic' which is a non-parametric approach. It is not advised to use\n    isotonic calibration with too few calibration samples\n\n    fold: integer, default = 10\n    Number of folds to be used in Kfold CV. Must be at least 2. \n\n    round: integer, default = 4\n    Number of decimal places the metrics in the score grid will be rounded to. \n\n    verbose: Boolean, default = True\n    Score grid is not printed when verbose is set to False.\n\n    Returns:\n    --------\n\n    score grid:   A table containing the scores of the model across the kfolds. \n    -----------   Scoring metrics used are Accuracy, AUC, Recall, Precision, F1 \n                  and Kappa. Mean and standard deviation of the scores across the \n                  folds are also returned.\n\n    model:        trained and calibrated model object.\n    -----------\n\n    Warnings:\n    ---------\n    - Avoid isotonic calibration with too few calibration samples (<1000) since it \n      tends to overfit.\n      \n    - calibration plot not available for multiclass problems.\n      \n    \n  \n    \"\"\"",
        "\"\"\"\n    \n    ERROR HANDLING STARTS HERE\n    \n    \"\"\"",
        "\"\"\"\n    \n    ERROR HANDLING ENDS HERE\n    \n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE STARTS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE ENDS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE STARTS\n    \"\"\"",
        "\"\"\"\n    MONITOR UPDATE ENDS\n    \"\"\"",
        "\"\"\"\n        MONITOR UPDATE STARTS\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE ENDS\n        \"\"\"",
        "\"\"\"\n        \n        This section handles time calculation and is created to update_display() as code loops through \n        the fold defined.\n        \n        \"\"\"",
        "\"\"\"\n        TIME CALCULATION SUB-SECTION STARTS HERE\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE STARTS\n        \"\"\"",
        "\"\"\"\n        MONITOR UPDATE ENDS\n        \"\"\"",
        "\"\"\"\n        TIME CALCULATION ENDS HERE\n        \"\"\"",
        "\"\"\"\n        \n        Update_display() ends here\n        \n        \"\"\"",
        "\"\"\"\n          \n    Description:\n    ------------\n    This function displays a user interface for all of the available plots for \n    a given estimator. It internally uses the plot_model() function. \n    \n        Example:\n        --------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        experiment_name = setup(data = juice,  target = 'Purchase')\n        lr = create_model('lr')\n        \n        evaluate_model(lr)\n        \n        This will display the User Interface for all of the plots for a given\n        estimator.\n\n    Parameters\n    ----------\n    estimator : object, default = none\n    A trained model object should be passed as an estimator. \n\n    Returns:\n    --------\n\n    User Interface:  Displays the user interface for plotting.\n    --------------\n\n    Warnings:\n    ---------\n    None    \n       \n         \n    \"\"\"",
        "\"\"\"\n          \n    Description:\n    ------------\n    This function fits the estimator onto the complete dataset passed during the\n    setup() stage. The purpose of this function is to prepare for final model\n    deployment after experimentation. \n    \n        Example:\n        --------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        experiment_name = setup(data = juice,  target = 'Purchase')\n        lr = create_model('lr')\n        \n        final_lr = finalize_model(lr)\n        \n        This will return the final model object fitted to complete dataset. \n\n    Parameters\n    ----------\n    estimator : object, default = none\n    A trained model object should be passed as an estimator. \n\n    Returns:\n    --------\n\n    Model:  Trained model object fitted on complete dataset.\n    ------   \n\n    Warnings:\n    ---------\n    - If the model returned by finalize_model(), is used on predict_model() without \n      passing a new unseen dataset, then the information grid printed is misleading \n      as the model is trained on the complete dataset including test / hold-out sample. \n      Once finalize_model() is used, the model is considered ready for deployment and\n      should be used on new unseens dataset only.\n       \n         \n    \"\"\"",
        "\"\"\"\n            Single Layer Stacker\n            \"\"\"",
        "\"\"\"\n            multiple layer stacknet\n            \"\"\"",
        "\"\"\"\n          \n    Description:\n    ------------\n    This function saves the transformation pipeline and trained model object \n    into the current active directory as a pickle file for later use. \n    \n        Example:\n        --------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        experiment_name = setup(data = juice,  target = 'Purchase')\n        lr = create_model('lr')\n        \n        save_model(lr, 'lr_model_23122019')\n        \n        This will save the transformation pipeline and model as a binary pickle\n        file in the current directory. \n\n    Parameters\n    ----------\n    model : object, default = none\n    A trained model object should be passed as an estimator. \n    \n    model_name : string, default = none\n    Name of pickle file to be passed as a string.\n    \n    verbose: Boolean, default = True\n    Success message is not printed when verbose is set to False.\n\n    Returns:\n    --------    \n    Success Message\n    \n    Warnings:\n    ---------\n    None    \n       \n         \n    \"\"\"",
        "\"\"\"\n          \n    Description:\n    ------------\n    This function loads a previously saved transformation pipeline and model \n    from the current active directory into the current python environment. \n    Load object must be a pickle file.\n    \n        Example:\n        --------\n        saved_lr = load_model('lr_model_23122019')\n        \n        This will load the previously saved model in saved_lr variable. The file \n        must be in the current directory.\n\n    Parameters\n    ----------\n    model_name : string, default = none\n    Name of pickle file to be passed as a string.\n      \n    platform: string, default = None\n    Name of platform, if loading model from cloud. Current available options are:\n    'aws'.\n    \n    authentication : dict\n    dictionary of applicable authentication tokens. \n    \n     When platform = 'aws': \n     {'bucket' : 'Name of Bucket on S3'}\n    \n    verbose: Boolean, default = True\n    Success message is not printed when verbose is set to False.\n\n    Returns:\n    --------    \n    Success Message\n    \n    Warnings:\n    ---------\n    None    \n       \n         \n    \"\"\"",
        "\"\"\"\n          \n    Description:\n    ------------\n    This function saves the entire experiment into the current active directory. \n    All outputs using pycaret are internally saved into a binary list which is\n    pickilized when save_experiment() is used. \n    \n        Example:\n        --------\n        save_experiment()\n        \n        This will save the entire experiment into the current active directory. By \n        default, the name of the experiment will use the session_id generated during \n        setup(). To use a custom name, a string must be passed to the experiment_name \n        param. For example:\n        \n        save_experiment('experiment_23122019')\n\n    Parameters\n    ----------\n    experiment_name : string, default = none\n    Name of pickle file to be passed as a string.\n\n    Returns:\n    --------    \n    Success Message\n    \n    Warnings:\n    ---------\n    None    \n       \n         \n    \"\"\"",
        "\"\"\"\n          \n    Description:\n    ------------\n    This function loads a previously saved experiment from the current active \n    directory into current python environment. Load object must be a pickle file.\n    \n        Example:\n        --------\n        saved_experiment = load_experiment('experiment_23122019')\n        \n        This will load the entire experiment pipeline into the object saved_experiment.\n        The experiment file must be in current directory.\n        \n    Parameters\n    ---------- \n    experiment_name : string, default = none\n    Name of pickle file to be passed as a string.\n\n    replace_exp : bool, default = False\n    Boolean indicating that such loaded experiment will replace the current experiment (reproducibility purposes)\n\n    Returns:\n    --------    \n    Information Grid containing details of saved objects in experiment pipeline.\n    \n    Warnings:\n    ---------\n    None    \n       \n         \n    \"\"\"",
        "\"\"\"\n       \n    Description:\n    ------------\n    This function is used to predict new data using a trained estimator. It accepts\n    an estimator created using one of the function in pycaret that returns a trained \n    model object or a list of trained model objects created using stack_models() or \n    create_stacknet(). New unseen data can be passed to data param as pandas Dataframe. \n    If data is not passed, the test / hold-out set separated at the time of setup() is\n    used to generate predictions. \n    \n        Example:\n        --------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        experiment_name = setup(data = juice,  target = 'Purchase')\n        lr = create_model('lr')\n        \n        lr_predictions_holdout = predict_model(lr)\n        \n    Parameters\n    ----------\n    estimator : object or list of objects / string,  default = None\n    When estimator is passed as string, load_model() is called internally to load the\n    pickle file from active directory or cloud platform when platform param is passed.\n     \n    data : {array-like, sparse matrix}, shape (n_samples, n_features) where n_samples \n    is the number of samples and n_features is the number of features. All features \n    used during training must be present in the new dataset.\n    \n    probability_threshold : float, default = None\n    threshold used to convert probability values into binary outcome. By default the\n    probability threshold for all binary classifiers is 0.5 (50%). This can be changed\n    using probability_threshold param.\n    \n    platform: string, default = None\n    Name of platform, if loading model from cloud. Current available options are:\n    'aws'.\n    \n    authentication : dict\n    dictionary of applicable authentication tokens. \n    \n     When platform = 'aws': \n     {'bucket' : 'Name of Bucket on S3'}\n    \n    Returns:\n    --------\n\n    info grid:  Information grid is printed when data is None.\n    ----------      \n\n    Warnings:\n    ---------\n    - if the estimator passed is created using finalize_model() then the metrics \n      printed in the information grid maybe misleading as the model is trained on\n      the complete dataset including the test / hold-out set. Once finalize_model() \n      is used, the model is considered ready for deployment and should be used on new \n      unseen datasets only.\n         \n           \n    \n    \"\"\"",
        "\"\"\"\n    exception checking starts here\n    \"\"\"",
        "\"\"\"\n    exception checking ends here\n    \"\"\"",
        "\"\"\"\n            Multiple Layer Stacking\n            \"\"\"",
        "\"\"\"\n            base level predictions\n            \"\"\"",
        "\"\"\"\n            inter level predictions\n            \"\"\"",
        "\"\"\"\n            meta final predictions\n            \"\"\"",
        "\"\"\"\n            Single Layer Stacking\n            \"\"\"",
        "\"\"\"\n       \n    Description:\n    ------------\n    (In Preview)\n\n    This function deploys the transformation pipeline and trained model object for\n    production use. The platform of deployment can be defined under the platform\n    param along with the applicable authentication tokens which are passed as a\n    dictionary to the authentication param.\n    \n        Example:\n        --------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        experiment_name = setup(data = juice,  target = 'Purchase')\n        lr = create_model('lr')\n        \n        deploy_model(model = lr, model_name = 'deploy_lr', platform = 'aws', \n                     authentication = {'bucket' : 'pycaret-test'})\n        \n        This will deploy the model on an AWS S3 account under bucket 'pycaret-test'\n        \n        For AWS users:\n        --------------\n        Before deploying a model to an AWS S3 ('aws'), environment variables must be \n        configured using the command line interface. To configure AWS env. variables, \n        type aws configure in your python command line. The following information is\n        required which can be generated using the Identity and Access Management (IAM) \n        portal of your amazon console account:\n    \n           - AWS Access Key ID\n           - AWS Secret Key Access\n           - Default Region Name (can be seen under Global settings on your AWS console)\n           - Default output format (must be left blank)\n\n    Parameters\n    ----------\n    model : object\n    A trained model object should be passed as an estimator. \n    \n    model_name : string\n    Name of model to be passed as a string.\n    \n    authentication : dict\n    dictionary of applicable authentication tokens. \n      \n     When platform = 'aws': \n     {'bucket' : 'Name of Bucket on S3'}\n    \n    platform: string, default = 'aws'\n    Name of platform for deployment. Current available options are: 'aws'.\n\n    Returns:\n    --------    \n    Success Message\n    \n    Warnings:\n    ---------\n    - This function uses file storage services to deploy the model on cloud platform. \n      As such, this is efficient for batch-use. Where the production objective is to \n      obtain prediction at an instance level, this may not be the efficient choice as \n      it transmits the binary pickle file between your local python environment and\n      the platform. \n    \n    \"\"\"",
        "\"\"\"\n       \n    Description:\n    ------------\n    This function optimizes probability threshold for a trained model using custom cost\n    function that can be defined using combination of True Positives, True Negatives,\n    False Positives (also known as Type I error), and False Negatives (Type II error).\n    \n    This function returns a plot of optimized cost as a function of probability \n    threshold between 0 to 100. \n\n        Example\n        -------\n        from pycaret.datasets import get_data\n        juice = get_data('juice')\n        experiment_name = setup(data = juice,  target = 'Purchase')\n        \n        lr = create_model('lr')\n        \n        optimize_threshold(lr, true_negative = 10, false_negative = -100)\n\n        This will return a plot of optimized cost as a function of probability threshold.\n\n    Parameters\n    ----------\n    estimator : object\n    A trained model object should be passed as an estimator. \n    \n    true_positive : int, default = 0\n    Cost function or returns when prediction is true positive.  \n    \n    true_negative : int, default = 0\n    Cost function or returns when prediction is true negative.\n    \n    false_positive : int, default = 0\n    Cost function or returns when prediction is false positive.    \n    \n    false_negative : int, default = 0\n    Cost function or returns when prediction is false negative.       \n    \n    \n    Returns:\n    --------\n\n    Visual Plot:  Prints the visual plot. \n    ------------\n\n    Warnings:\n    ---------\n    - This function is not supported for multiclass problems.\n      \n       \n    \"\"\"",
        "\"\"\"\n    ERROR HANDLING STARTS HERE\n    \"\"\"",
        "\"\"\"\n    ERROR HANDLING ENDS HERE\n    \"\"\"",
        "\"\"\"\n    internal function to calculate loss starts here\n    \"\"\"",
        "\"\"\"\n    internal function to calculate loss ends here\n    \"\"\"",
        "\"\"\"\n    Calculate the Hosmer Lemeshow to assess whether\n    or not the observed event rates match expected\n    event rates.\n    Assume that there are 10 groups:\n    HL = \\\\sum_{g=1}^G \\\\frac{(O_{1g} - E_{1g})^2}{N_g \\\\pi_g (1- \\\\pi_g)}\n    \"\"\""
    ],
    "functions": [
        "setup",
        "highlight_max",
        "create_model",
        "ensemble_model",
        "plot_model",
        "compare_models",
        "highlight_max",
        "tune_model",
        "run_hyperopt_classification",
        "objective",
        "blend_models",
        "putSpace",
        "stack_models",
        "create_stacknet",
        "interpret_model",
        "calibrate_model",
        "evaluate_model",
        "finalize_model",
        "save_model",
        "load_model",
        "save_experiment",
        "load_experiment",
        "predict_model",
        "putSpace",
        "deploy_model",
        "optimize_threshold",
        "calculate_loss",
        "hosmer_lemeshow",
        "spiegelhalter",
        "scaled_brier_score",
        "accuracy_plot",
        "get_qtd",
        "remap"
    ],
    "classes": []
}