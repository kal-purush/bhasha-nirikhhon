{
    "identifiers": [
        "os",
        "argparse",
        "ArgumentParser",
        "nibabel",
        "nib",
        "src",
        "utils",
        "definitions",
        "run_infer_eval_all",
        "apply_bias_field_corrections",
        "src",
        "deep_learning",
        "inference_nnunet",
        "load_softmax",
        "src",
        "multi_atlas",
        "inference",
        "multi_atlas_segmentation",
        "src",
        "multi_atlas",
        "utils",
        "get_atlas_list",
        "src",
        "segmentations_fusion",
        "dempster_shaffer",
        "merge_deep_and_atlas_seg",
        "dempster_add_intensity_prior",
        "CONDITIONS",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "SUPPORTED_CONDITIONS",
        "parser",
        "add_argument",
        "action",
        "help",
        "condition",
        "ga",
        "condition",
        "get_atlas_list",
        "ga",
        "ga",
        "condition",
        "ga_delta_max",
        "DELTA_GA_CONTROL",
        "atlas_list",
        "get_atlas_list",
        "ga",
        "ga",
        "condition",
        "ga_delta_max",
        "DELTA_GA_SPINA_BIFIDA",
        "condition",
        "get_atlas_list",
        "ga",
        "ga",
        "condition",
        "ga_delta_max",
        "DELTA_GA_CONTROL",
        "condition",
        "condition",
        "get_atlas_list",
        "ga",
        "ga",
        "condition",
        "ga_delta_max",
        "DELTA_GA_SPINA_BIFIDA",
        "atlas_list",
        "ga",
        "round",
        "ga",
        "MAX_GA",
        "ga",
        "MAX_GA",
        "MAX_GA",
        "MIN_GA",
        "ga",
        "MIN_GA",
        "MIN_GA",
        "args",
        "args",
        "input",
        "args",
        "mask",
        "args",
        "output_folder",
        "_preproces_GA",
        "args",
        "ga",
        "ga",
        "MIN_GA",
        "MAX_GA",
        "args",
        "condition",
        "cond",
        "cond",
        "SUPPORTED_CONDITIONS",
        "SUPPORTED_CONDITIONS",
        "cond",
        "os",
        "path",
        "exists",
        "output_path",
        "os",
        "mkdir",
        "output_path",
        "args",
        "bfc",
        "os",
        "path",
        "join",
        "output_path",
        "apply_bias_field_corrections",
        "input_path",
        "mask_path",
        "pre_input_path",
        "pre_input_path",
        "input_path",
        "os",
        "path",
        "join",
        "output_path",
        "input_path",
        "mask_path",
        "output_backboneAI_path",
        "REPO_PATH",
        "cmd_options",
        "cmd",
        "os",
        "system",
        "cmd",
        "nib",
        "load",
        "input_path",
        "img_nii",
        "get_fdata",
        "astype",
        "np",
        "float32",
        "nib",
        "load",
        "mask_path",
        "mask_nii",
        "get_fdata",
        "astype",
        "np",
        "uint8",
        "os",
        "path",
        "split",
        "output_path",
        "os",
        "path",
        "join",
        "output_backboneAI_path",
        "f_n",
        "os",
        "path",
        "join",
        "output_backboneAI_path",
        "f_n",
        "load_softmax",
        "pred_softmax_path",
        "volume_info_path",
        "_get_atlas_volumes_path_list",
        "cond",
        "ga",
        "atlas_list",
        "os",
        "path",
        "join",
        "output_path",
        "multi_atlas_segmentation",
        "img_nii",
        "mask_nii",
        "atlas_folder_list",
        "atlas_list",
        "grid_spacing",
        "GRID_SPACING",
        "be",
        "BE",
        "le",
        "LE",
        "lp",
        "LP",
        "save_folder",
        "atlas_pred_save_folder",
        "only_affine",
        "merging_method",
        "MERGING_MULTI_ATLAS",
        "reuse_existing_pred",
        "force_recompute_heat_kernels",
        "np",
        "argmax",
        "pred_proba_atlas",
        "axis",
        "astype",
        "np",
        "uint8",
        "nib",
        "Nifti1Image",
        "pred_atlas",
        "img_nii",
        "affine",
        "os",
        "path",
        "join",
        "output_path",
        "os",
        "path",
        "exists",
        "output_fallback_path",
        "os",
        "mkdir",
        "output_fallback_path",
        "os",
        "path",
        "join",
        "output_fallback_path",
        "f_n",
        "nib",
        "save",
        "pred_atlas_nii",
        "pred_atlas_path",
        "np",
        "transpose",
        "pred_proba_atlas",
        "axes",
        "softmax",
        "pred_proba_atlas",
        "pred_proba_trustworthy",
        "merge_deep_and_atlas_seg",
        "deep_proba",
        "pred_proba_trustworthy",
        "atlas_seg",
        "pred_atlas",
        "condition",
        "cond",
        "dempster_add_intensity_prior",
        "deep_proba",
        "pred_proba_trustworthy",
        "image",
        "img",
        "mask",
        "mask",
        "denoise",
        "np",
        "argmax",
        "pred_proba_trustworthy",
        "axis",
        "astype",
        "np",
        "uint8",
        "nib",
        "Nifti1Image",
        "pred_trustworthy",
        "img_nii",
        "affine",
        "os",
        "path",
        "join",
        "output_path",
        "os",
        "path",
        "exists",
        "output_twai_path",
        "os",
        "mkdir",
        "output_twai_path",
        "os",
        "path",
        "join",
        "output_twai_path",
        "f_n",
        "nib",
        "save",
        "pred_trustworthy_nii",
        "pred_trustworthy_path",
        "output_backboneAI_path",
        "output_fallback_path",
        "output_twai_path",
        "os",
        "path",
        "exists",
        "pred_softmax_path",
        "os",
        "system",
        "pred_softmax_path",
        "os",
        "path",
        "exists",
        "volume_info_path",
        "os",
        "system",
        "volume_info_path",
        "parser",
        "parse_args",
        "main",
        "args"
    ],
    "literals": [
        "'GIF'",
        "'Segment a fetal brain 3D MRI for the backbone AI, '",
        "'the fallback, and the Trustworthy AI algorithms.'",
        "'--input'",
        "'Path to the fetal brain 3D MRI to be segmented.'",
        "'--mask'",
        "'Path to the 3D brain mask of the fetal brain 3D MRI to be segmented.'",
        "'--output_folder'",
        "'Path of the folder where the output will be saved.'",
        "'--ga'",
        "'Gestational age at the time of acquisition of the fetal brain 3D MRI to be segmented.'",
        "'--condition'",
        "'Brain condition of the fetal brain 3D MRI to be segmented. '",
        "'Must be one of %s.'",
        "'--bfc'",
        "'store_true'",
        "'Allow to use intensity bias field correction. '",
        "'Recommended if no correction for intensity bias field correction has been '",
        "'performed before.'",
        "'Pathological'",
        "'Neurotypical'",
        "'Spina Bifida'",
        "'Neurotypical'",
        "'Neurotypical'",
        "'Spina Bifida'",
        "'Unknown condition %s'",
        "'Spina Bifida'",
        "'Found ga=%d. Change it to %d (max value accepted)'",
        "'Found ga=%d. Change it to %d (min value accepted)'",
        "'Use GA=%d weeks (rounded to the closest integer in [%d, %d])'",
        "'Condition: %s'",
        "'--condition argument must be in %s.\\nFound %s'",
        "'srr_preprocessed.nii.gz'",
        "'\\nStart inference for fetal brain 3D MRI %s'",
        "'backboneAI'",
        "'--input %s --mask %s --output_folder %s --fold all --task Task225_FetalBrain3dTrust --save_npz'",
        "'python %s/src/deep_learning/inference_nnunet.py %s'",
        "'%s.npz'",
        "'%s.pkl'",
        "'\\nStart atlas propagation using the volumes'",
        "'atlas_pred'",
        "'fallback'",
        "'%s.nii.gz'",
        "'trustworthyAI'",
        "'%s.nii.gz'",
        "'\\nBackbone AI segmentation has been saved in %s'",
        "'Fallback segmentation has been saved in %s'",
        "'Trustworthy AI AI segmentation has been saved in %s'",
        "'rm %s'",
        "'rm %s'",
        "'__main__'"
    ],
    "variables": [
        "SUPPORTED_CONDITIONS",
        "MERGING_MULTI_ATLAS",
        "parser",
        "atlas_list",
        "atlas_list",
        "atlas_list",
        "input_path",
        "mask_path",
        "output_path",
        "ga",
        "cond",
        "pre_input_path",
        "input_path",
        "output_backboneAI_path",
        "cmd_options",
        "cmd",
        "img_nii",
        "img",
        "mask_nii",
        "mask",
        "f_n",
        "pred_softmax_path",
        "volume_info_path",
        "softmax",
        "atlas_list",
        "atlas_pred_save_folder",
        "pred_proba_atlas",
        "pred_atlas",
        "pred_atlas_nii",
        "output_fallback_path",
        "pred_atlas_path",
        "pred_proba_atlas",
        "pred_proba_trustworthy",
        "pred_proba_trustworthy",
        "pred_proba_trustworthy",
        "pred_trustworthy",
        "pred_trustworthy_nii",
        "output_twai_path",
        "pred_trustworthy_path",
        "args"
    ],
    "comments": [
        "GA is rounded to the closest week and clipped to the range of GA of the atlases",
        "Bias field correction (optional)",
        "Backbone AI inference",
        "Load the softmax prediction, img and mask",
        "info about the volume and preprocessing done by nnUNet",
        "Fallback inference",
        "Propagate the atlas volumes segmentation",
        "Save the atlas-based prediction",
        "Transpose the atlas proba to match PyTorch convention",
        "Take a weighted average of the CNN and atlas predicted proba",
        "5=nb of CNNs in the backbone AI",
        "Apply Dempster's rule with the atlas prior",
        "Used to know which margins to use",
        "Apply Dempster's rule with the intensity prior",
        "Save the trustworthy prediction",
        "Clean folder",
        "Remove the npz file (it takes a lot of space)",
        "Delete the pkl file"
    ],
    "docstrings": [],
    "functions": [
        "_get_atlas_volumes_path_list",
        "_preproces_GA",
        "main"
    ],
    "classes": []
}