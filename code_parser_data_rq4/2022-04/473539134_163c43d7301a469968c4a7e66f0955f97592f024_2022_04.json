{
    "identifiers": [
        "mobileapplication3",
        "java",
        "io",
        "java",
        "util",
        "Enumeration",
        "java",
        "util",
        "javax",
        "microedition",
        "io",
        "Connector",
        "javax",
        "microedition",
        "io",
        "file",
        "FileConnection",
        "javax",
        "microedition",
        "io",
        "file",
        "FileSystemRegistry",
        "javax",
        "microedition",
        "lcdui",
        "Command",
        "javax",
        "microedition",
        "lcdui",
        "CommandListener",
        "javax",
        "microedition",
        "lcdui",
        "Displayable",
        "javax",
        "microedition",
        "lcdui",
        "Form",
        "javax",
        "microedition",
        "lcdui",
        "Image",
        "javax",
        "microedition",
        "lcdui"
    ],
    "literals": [],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.",
        "*\n * @author junaed\n *\npublic class FileManager implements CommandListener\n{\n\n    public List directoryList;\n    private Command openCommand;\n    private Command upCommand;\n    private Command useCommand;\n    private Command cancelCommand;\n    private String[] roots = null;\n    private int selectionMode;\n    private Main application;\n    private Displayable backDisplay;\n    private String currentDirectory;\n    private Image folderIcon;\n    private Image songIcon;\n    private Image imageIcon;\n    public final static int DIRECTORY_SELECTION_ONLY = 0;\n    public final static int AUDIO_FILE_SELECTION_ONLY = 1;\n    public final static int IMAGE_FILE_SELECTION_ONLY = 2;\n    private final static String SEP_STR = (DeviceManager.getSystemFileSeparator() != null) ? System.getProperty(\"file.separator\") : \"/\";\n    private final static char SEP_CHAR = SEP_STR.charAt(0);\n    private final static String ROOT_PREFIX = \"file:///\";\n    private final static String FILE_BROWSER_TITLE = \"File Browser\";\n    private String selectedFileName;\n\n    public FileManager(int selectionMode, Main midlet, Displayable backDisplay)\n    {\n        this.selectionMode = selectionMode;\n        this.application = midlet;\n        this.backDisplay = backDisplay;\n\n        currentDirectory = \"\";\n        openCommand = new Command(\"Open\", Command.OK, 1);\n        upCommand = new Command(\"Up\", Command.BACK, 2);\n        useCommand = new Command(\"Use\", Command.ITEM, 3);\n        cancelCommand = new Command(\"Cancel\", Command.CANCEL, 4);\n        if (selectionMode == DIRECTORY_SELECTION_ONLY)\n        {\n            try\n            {\n                folderIcon = ImageUtil.getFolderIcon();\n            }\n            catch (IOException ex)\n            {\n                ex.printStackTrace();\n            }\n        }\n        else if (selectionMode == AUDIO_FILE_SELECTION_ONLY)\n        {\n            try\n            {\n                songIcon = ImageUtil.getSongIcon();\n            }\n            catch (Exception e)\n            {\n            }\n        }\n        else if(selectionMode == IMAGE_FILE_SELECTION_ONLY)\n        {\n            try\n            {\n                imageIcon = ImageUtil.getImageIcon();\n            }\n            catch (Exception e)\n            {\n            }\n        }\n\n    }\n\n    private void addCommands()\n    {\n        if (this.selectionMode == DIRECTORY_SELECTION_ONLY)\n        {\n        }\n        else\n        {\n        }\n        directoryList.addCommand(openCommand);\n        directoryList.addCommand(upCommand);\n        directoryList.addCommand(cancelCommand);\n        directoryList.setSelectCommand(useCommand);\n        directoryList.setCommandListener(this);\n\n    }\n\n    private final String[] getRoots()\n    {\n        try\n        {\n            if (!DeviceManager.isFileManagerSupported())\n            {\n                throw new Exception(\"File Browsing is not permitted in your hand set.\");\n            }\n            Enumeration enumeration = FileSystemRegistry.listRoots();\n            Vector temp = new Vector();\n            String root = \"\";\n            while (enumeration.hasMoreElements())\n            {\n                root = (String) enumeration.nextElement();\n                if (true)\n                {\n                    temp.addElement(root);\n                }\n                else\n                {\n                    temp.addElement(root);\n                }\n            }\n            String[] ret = new String[temp.size()];\n            temp.copyInto(ret);\n            return ret;\n\n        }\n        catch (Exception exception)\n        {\n            exception.printStackTrace();\n            return null;\n        }\n\n    }\n\n    private void printDir(String title, String dir)\n    {\n        System.out.println(title + \" = \" + ROOT_PREFIX + dir);\n    }\n\n    private Vector getDirectoryListing(String directory) throws Exception\n    {\n        try\n        {\n            Vector tempVector;\n            String tempString;\n\n            try\n            {\n                if (directory.equalsIgnoreCase(\"\"))\n                {\n                    if (roots == null)\n                    {\n                        roots = getRoots();\n                        if (roots == null)\n                        {\n                            return null;\n                        }\n                    }\n\n                    tempVector = new Vector();\n                    for (int i = 0; i < roots.length; i++)\n                    {\n                        tempVector.addElement(roots[i]);\n                    }\n                    directoryList.removeCommand(upCommand);\n\n                }\n                else\n                {\n                    FileConnection fileConnection = (FileConnection) Connector.open(ROOT_PREFIX + directory, Connector.READ);\n                    if (!fileConnection.exists())\n                    {\n                        throw new Exception(\"Cannot open file: \" + ROOT_PREFIX + directory);\n                    }\n                    tempVector = new Vector();\n                    for (Enumeration enumer = fileConnection.list(); enumer.hasMoreElements();)\n                    {\n                        tempString = (String) enumer.nextElement();\n                        tempVector.addElement(tempString);\n                    }\n                    fileConnection.close();\n                }\n            }\n            catch (Exception exception)\n            {\n                throw new Exception(exception.toString());\n            }\n            return tempVector;\n        }\n        catch (Exception e)\n        {\n            throw e;\n        }\n    }\n\n    public void show() throws Exception\n    {\n        try\n        {\n            directoryList = new List(FILE_BROWSER_TITLE, List.IMPLICIT);\n            addCommands();\n            Vector dir = getDirectoryListing(currentDirectory);\n\n            for (int i = 0; i < dir.size(); i++)\n            {\n                String fname = (String) dir.elementAt(i);\n                if (isDirectory(fname))\n                {\n                    directoryList.append(fname, folderIcon);\n                }\n\n                if (selectionMode == AUDIO_FILE_SELECTION_ONLY)\n                {\n                    if (isFileTypeSupported(fname))\n                    {\n                        directoryList.append(fname, songIcon);\n                    }\n                }\n                else if (selectionMode == IMAGE_FILE_SELECTION_ONLY)\n                {\n                    if (isFileTypeSupported(fname))\n                    {\n                        directoryList.append(fname, imageIcon);\n                    }\n                }            }\n            application.getDisplay().setCurrent(directoryList);\n        }\n        catch (Exception ex)\n        {\n            ex.printStackTrace();\n            throw ex;\n        }\n    }\n\n    private boolean isDirectory(String directory)\n    {\n        if (directory.charAt(directory.length() - 1) == SEP_CHAR)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n\n    }\n\n    private String getFileType(String fileName)\n    {\n        char ch = '.';\n        int index = fileName.lastIndexOf((int) ch);\n        return fileName.substring(index + 1);\n    }\n\n    private boolean isFileTypeSupported(String fileName)\n    {\n        String extension = getFileType(fileName);\n        if (selectionMode == AUDIO_FILE_SELECTION_ONLY)\n        {\n            if (extension.equalsIgnoreCase(\"mp3\"))\n            {\n                return true;\n            }\n        }\n        else if (selectionMode == IMAGE_FILE_SELECTION_ONLY)\n        {\n            if (extension.equalsIgnoreCase(\"png\") || extension.equalsIgnoreCase(\"jpg\") || extension.equalsIgnoreCase(\"jpeg\"))\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public void commandAction(Command c, Displayable d)\n    {\n        if (d == directoryList)\n        {\n            if (c == openCommand || c.getCommandType() == Command.OK)\n            {\n                String selected = directoryList.getString(directoryList.getSelectedIndex());\n                currentDirectory += selected;\n                if (isDirectory(selected))\n                {\n\n                    Thread t = new Thread(new Runnable()\n                    {\n\n                        public void run()\n                        {\n                            try\n                            {\n                                show();\n                            }\n                            catch (Exception ex)\n                            {\n                                ex.printStackTrace();\n                            }\n                        }\n                    });\n                    t.start();\n\n                }\n                else\n                {\n                    if (isFileTypeSupported(selected))\n                    {\n                        selectedFileName = selected;\n                        ((Form) backDisplay).append(currentDirectory);\n                        application.getDisplay().setCurrent(backDisplay);\n                    }\n                }\n            }\n            else if (c == upCommand || c.getCommandType() == Command.BACK)\n            {\n\n                Thread t = new Thread(new Runnable()\n                {\n\n                    public void run()\n                    {\n                        int index = currentDirectory.lastIndexOf(SEP_CHAR);\n                        currentDirectory = currentDirectory.substring(0, index);\n                        index = currentDirectory.lastIndexOf(SEP_CHAR);\n                        currentDirectory = currentDirectory.substring(0, index + 1);\n                        try\n                        {\n                            show();\n                        }\n                        catch (Exception ex)\n                        {\n                            ex.printStackTrace();\n                        }\n                    }\n                });\n                t.start();\n\n            }\n            else if (c == useCommand)\n            {\n                Thread t = new Thread(new Runnable()\n                {\n\n                    public void run()\n                    {\n                        selectedFileName = directoryList.getString(directoryList.getSelectedIndex());\n                        currentDirectory += selectedFileName;\n                        ((Form) backDisplay).append(currentDirectory);\n                        application.getDisplay().setCurrent(backDisplay);\n                    }\n                });\n                t.start();\n\n            }\n            else if (c == cancelCommand)\n            {\n                application.getDisplay().setCurrent(backDisplay);\n            }\n\n        }\n    }\n\n    /**\n     * @return the selectedFileName\n     *\n    public String getSelectedFileName()\n    {\n        return selectedFileName;\n    }\n}"
    ],
    "functions": [],
    "classes": []
}