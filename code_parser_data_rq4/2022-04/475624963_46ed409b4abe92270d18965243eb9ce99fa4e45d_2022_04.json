{
    "identifiers": [
        "require",
        "makeQueryExample",
        "fnName",
        "fnName",
        "fnName",
        "fnName",
        "fnName",
        "makeQueryValueExample",
        "fnName",
        "fnName",
        "fnName",
        "fnName",
        "makeQueryExample",
        "makeQueryExample",
        "makeQueryExample",
        "makeQueryExample",
        "makeQueryExample",
        "makeQueryValueExample",
        "makeQueryExample",
        "makeQueryExample",
        "makeQueryExample",
        "makeQueryExample",
        "makeJsdocComment",
        "description",
        "example",
        "line",
        "line",
        "readFileSync",
        "line",
        "jsdocExamples",
        "example",
        "example",
        "line",
        "example",
        "makeJsdocComment",
        "example",
        "line",
        "line",
        "typedefsWithJsdoc"
    ],
    "literals": [
        "'fs'",
        "viddy.${fnName}('element with text')\nviddy.${fnName}(/regex/i, { near: 'element with text' })\nviddy.${fnName}({ pattern: /regex/i, pickParent: 'p' })\nviddy.${fnName}({ selector: 'p', leftOf: 'text' })",
        "viddy.${fnName}('exact value', 'element with text')\nviddy.${fnName}(/okay/i, { selector: 'select', near: 'Choose:' })\nviddy.${fnName}('on', { selector: 'input[type=checkbox]' })",
        "'Return element matching query'",
        "'for'",
        "'Return nearest <input>, <select>, or <textarea> matching query'",
        "'forInput'",
        "'Return unique CSS selector matching query'",
        "'selectorOf'",
        "'Return value of nearest <input>, <select>, or <textarea> matching query'",
        "'valueOf'",
        "'Return Promise that awaits the query, returning matching elements'",
        "'waitFor'",
        "'Return Promise that awaits the query, returning nearest matching <input>, <select>, or <textarea> elements'",
        "'waitForValue'",
        "'Return Promise that waits for entire DOM to stop updating, or a portion of it if a query is specified'",
        "viddy.waitForIdle()\\n",
        "'waitForIdle'",
        "'Return innerText of the elements matching query'",
        "'innerText'",
        "'Return innerText of the elements matching query. If RegExp is specified as the pattern, only the matching-portion of the innerText will be returned. If a capturing-group is specified within the RegExp, the full result-array will be returned'",
        "'matchText'",
        "'Return true if elements are found matching the query'",
        "'hasContent'",
        "'Inject viddy API into a Puppeteer page object'",
        "const { viddyIn } = require('viddy/puppeteer')\n// later...\nconst page = await browser.newPage()\nconst viddy = viddyIn(page)\n\nawait viddy.waitFor('text')",
        "'Inject viddyWell API into a Puppeteer page object'",
        "const { viddyWellIn } = require('viddy/puppeteer')\n// later...\nconst page = await browser.newPage()\nconst viddy = viddyWellIn(page)\n\nawait viddy.waitFor('text')",
        "''",
        "/**\n    * ${description}\n    * @example\n${example\n  .split('\\n')\n  .map(line => `    * ${line}`)\n  .join('\\n')}\n    */",
        "'\\n'",
        "* ${line}",
        "'\\n'",
        "'./build-config/index.d.ts-base'",
        "'utf8'",
        "'\\n'",
        "'\\n'"
    ],
    "variables": [
        "makeQueryExample",
        "makeQueryValueExample",
        "jsdocExamples",
        "makeJsdocComment",
        "typedefsWithJsdoc",
        "example"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [],
    "classes": []
}