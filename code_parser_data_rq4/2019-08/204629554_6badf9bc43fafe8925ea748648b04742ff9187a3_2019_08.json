{
    "identifiers": [
        "require",
        "express",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "app",
        "bodyParser",
        "app",
        "express",
        "path",
        "__dirname",
        "http",
        "app",
        "WebSocket",
        "wss",
        "broadcast",
        "data",
        "wss",
        "each",
        "client",
        "client",
        "data",
        "client",
        "WebSocket",
        "client",
        "data",
        "e",
        "e",
        "CosmosClient",
        "config",
        "config",
        "TaskDao",
        "cosmosClient",
        "config",
        "config",
        "TaskList",
        "taskDao",
        "taskDao",
        "err",
        "err",
        "err",
        "err",
        "process",
        "app",
        "req",
        "res",
        "next",
        "taskList",
        "req",
        "res",
        "wss",
        "customerData",
        "res",
        "app",
        "req",
        "res",
        "next",
        "taskList",
        "req",
        "res",
        "wss",
        "customerData",
        "res",
        "app",
        "req",
        "res",
        "res",
        "require",
        "err",
        "err",
        "message",
        "message",
        "message",
        "data",
        "wss",
        "data",
        "EventHubClient",
        "connectionString",
        "client",
        "ehClient",
        "client",
        "ehClient",
        "ids",
        "ids",
        "ids",
        "id",
        "ehClient",
        "id",
        "printMessage",
        "printError",
        "EventPosition",
        "printError"
    ],
    "literals": [
        "\"express\"",
        "\"axios\"",
        "\"ws\"",
        "\"path\"",
        "\"http\"",
        "'body-parser'",
        "\"@azure/cosmos\"",
        "\"./config\"",
        "\"./routes/tasklist\"",
        "\"./models/taskDao\"",
        "\"morgan\"",
        "\"cookie-parser\"",
        "\"public\"",
        "\"Shutting down because there was an error setting up the database.\"",
        "\"/\"",
        "\"/\"",
        "\"PASSED Data\"",
        "\"/\"",
        "\"HostName=IoT-Hub-Innovation.azure-devices.net;DeviceId=pepsicodevice2;SharedAccessKey=5nYhtCOgk8ew/6u3lJvg255njOXsJNa/6bV5+BuGqso=\"",
        "\"@azure/event-hubs\"",
        "\"Telemetry received: \"",
        "\"-----\"",
        "\"utf8\"",
        "\"data recieved\"",
        "\"\"",
        "\"Successully created the EventHub Client from iothub connection string.\"",
        "\"The partition ids are: \""
    ],
    "variables": [
        "express",
        "app",
        "axios",
        "WebSocket",
        "path",
        "http",
        "bodyParser",
        "CosmosClient",
        "config",
        "TaskList",
        "TaskDao",
        "logger",
        "cookieParser",
        "server",
        "wss",
        "cosmosClient",
        "taskDao",
        "taskList",
        "customerData",
        "customerData",
        "connectionString",
        "printError",
        "printMessage",
        "data",
        "ehClient"
    ],
    "comments": [
        "Azure fetch data required module",
        "Broadcast to all.",
        "console.log(\"----my data ---\", data);",
        "console.log(\"----wss ---\", wss);",
        "console.log(\"client>>>>>>>>>>\", client)",
        "console.log(\"sending data \" + data);",
        "Todo App:",
        "const customerData = await taskList.showProductsData(req, res, req.body.id);",
        "let cusData = customerData;",
        "res.render('/', { customerData: customerData });",
        "res.redirect('/', { 'ID': userID });",
        "let cusData = customerData;",
        ", next",
        "console.log(\"Global Id has been init\", globalId);",
        "const server = http.createServer(app);",
        "Copyright (c) Microsoft. All rights reserved.",
        "Licensed under the MIT license. See LICENSE file in the project root for full license information.",
        "Connection string for the IoT Hub service",
        "",
        "NOTE:",
        "For simplicity, this sample sets the connection string in code.",
        "In a production environment, the recommended approach is to use",
        "an environment variable to make it available to your application",
        "or use an x509 certificate.",
        "https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security",
        "",
        "Using the Azure CLI:",
        "az iot hub show-connection-string --hub-name {YourIoTHubName} --output table",
        "HostName={YourIoTHubName}.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey={YourSharedAccessKey}",
        "var connectionString = 'HostName=hcliothub.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=m9GMCMmwhdvaK+L/cm4UUK05W2XSRxt4b9atOi8cCec=';",
        "var connectionString = 'HostName=azuredevtest-iot.azure-devices.net;DeviceId=MyCDevice;SharedAccessKeyName=iothubowner;SharedAccessKey=Z7sqao2etcmegxh5D5Nttk5aNgpghsuD5xhSlqT2NPU=';",
        "var connectionString =",
        "\"HostName=IoT-Hub-Innovation.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=GoStgJk+fFRlC7cIvV0QaoaEMbzU6UONRFvqV7UC0/o=\";",
        "var connectionString =",
        "\"HostName=PepsiCoIOT.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=H89Ly9g/fw4LuTc+9se0dNm77CbvXZW7ZRPrdHc81dQ=\"",
        "HostName=IoT-Hub-Innovation.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=5nYhtCOgk8ew/6u3lJvg255njOXsJNa/6bV5+BuGqso=",
        "Endpoint=sb://ihsuprodbyres043dednamespace.servicebus.windows.net/;SharedAccessKeyName=iothubowner;SharedAccessKey=GoStgJk+fFRlC7cIvV0QaoaEMbzU6UONRFvqV7UC0/o=;EntityPath=iothub-ehub-iot-hub-in-1184322-4dd8e7be6b",
        "Using the Node.js SDK for Azure Event hubs:",
        "https://github.com/Azure/azure-event-hubs-node",
        "The sample connects to an IoT hub's Event Hubs-compatible endpoint",
        "to read messages sent from a device.",
        "Display the message content - telemetry and properties.",
        "- Telemetry is sent in the message body",
        "- The device can add arbitrary application properties to the message",
        "- IoT Hub adds system properties, such as Device Id, to the message.",
        "console.log(JSON.stringify(message));",
        "var obj = {",
        "body: (msg.data).toString('utf8'),",
        "properties: msg.properties.propertyList",
        "}",
        "console.log('Application properties (set by device): ')",
        "console.log(JSON.stringify(message.applicationProperties));",
        "console.log('System properties (set by IoT Hub): ')",
        "console.log(JSON.stringify(message.annotations));",
        "Connect to the partitions on the IoT Hub's Event Hubs-compatible endpoint.",
        "This example only reads messages sent after this application started.",
        "return ehClient.send(\"hello world\");"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}