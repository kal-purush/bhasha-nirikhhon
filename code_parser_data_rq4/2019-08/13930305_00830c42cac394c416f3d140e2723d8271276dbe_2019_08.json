{
    "identifiers": [
        "os",
        "logging",
        "click",
        "click_log",
        "json",
        "datetime",
        "dateutil",
        "parser",
        "re",
        "requests",
        "requests_cache",
        "bs4",
        "BeautifulSoup",
        "element",
        "lxml",
        "etree",
        "lxml",
        "html",
        "soupparser",
        "logging",
        "getLogger",
        "click_log",
        "basic_config",
        "logger",
        "os",
        "path",
        "join",
        "os",
        "path",
        "dirname",
        "os",
        "path",
        "abspath",
        "requests_cache",
        "install_cache",
        "cache_path",
        "expire_after",
        "open",
        "config_json_file",
        "logger",
        "debug",
        "json",
        "load",
        "config_json_file",
        "config",
        "config",
        "config",
        "config",
        "config",
        "config",
        "config",
        "click",
        "formats",
        "open",
        "state_json_file",
        "logger",
        "debug",
        "json",
        "load",
        "state_json_file",
        "state",
        "json",
        "dumps",
        "state",
        "indent",
        "open",
        "state_json_file",
        "logger",
        "debug",
        "state_json_file",
        "write",
        "json_string",
        "e",
        "logger",
        "error",
        "format",
        "e",
        "getScraperState",
        "start",
        "end",
        "end",
        "start",
        "i",
        "delta",
        "days",
        "start",
        "datetime",
        "timedelta",
        "days",
        "i",
        "dates",
        "append",
        "date",
        "dates",
        "date",
        "date",
        "strftime",
        "ASSEMBLY_DOMAIN",
        "meeting_date_string",
        "logger",
        "debug",
        "format",
        "meeting_date_url",
        "requests",
        "get",
        "meeting_date_url",
        "meeting_page",
        "status_code",
        "meeting_page",
        "status_code",
        "logger",
        "info",
        "format",
        "date",
        "meeting_page",
        "status_code",
        "logger",
        "info",
        "format",
        "date",
        "parseAssemblyMeetingToSessions",
        "meeting_page",
        "content",
        "len",
        "scraped_data",
        "session",
        "scraped_data",
        "scraped_data",
        "scrapeSessionAtUrl",
        "session",
        "logger",
        "warning",
        "format",
        "date",
        "logger",
        "warning",
        "format",
        "date",
        "meeting_page",
        "status_code",
        "scraped_data",
        "content",
        "BeautifulSoup",
        "content",
        "soup",
        "find_all",
        "class_",
        "session",
        "sessions_in_content",
        "session",
        "a",
        "text",
        "session",
        "a",
        "get",
        "logger",
        "debug",
        "format",
        "session_title",
        "session_url",
        "sessions_in_meeting",
        "append",
        "session_url",
        "sessions_in_meeting",
        "session_url",
        "ASSEMBLY_DOMAIN",
        "session_url",
        "logger",
        "debug",
        "format",
        "session_full_url",
        "requests",
        "get",
        "session_full_url",
        "parseSessionToQuestions",
        "session_page",
        "content",
        "questions_in_session",
        "content",
        "BeautifulSoup",
        "content",
        "soup",
        "find_all",
        "class_",
        "question_row",
        "questions_in_content",
        "question_row",
        "findAll",
        "question_row_cells",
        "text",
        "logger",
        "debug",
        "format",
        "question_number",
        "questions_in_session",
        "append",
        "question_number",
        "questions_in_session",
        "question_id",
        "logger",
        "debug",
        "format",
        "question_id",
        "ASSEMBLY_DOMAIN",
        "question_id",
        "logger",
        "debug",
        "format",
        "question_full_url",
        "requests",
        "get",
        "question_full_url",
        "question_page",
        "status_code",
        "logger",
        "debug",
        "format",
        "question_id",
        "parseQuestionPage",
        "question_page",
        "content",
        "logger",
        "warning",
        "format",
        "question_id",
        "question_page",
        "status_code",
        "state",
        "question_id",
        "state",
        "question_id",
        "datetime",
        "datetime",
        "today",
        "question_parsed_data",
        "content",
        "BeautifulSoup",
        "content",
        "soup",
        "find",
        "soup",
        "find",
        "role",
        "main_content",
        "h1",
        "text",
        "strip",
        "logger",
        "debug",
        "format",
        "question_title",
        "main_content",
        "find",
        "class_",
        "find",
        "class_",
        "text",
        "strip",
        "getSpeakerObjectFromName",
        "asked_by_name",
        "logger",
        "debug",
        "format",
        "asked_by_person",
        "main_content",
        "find",
        "class_",
        "find",
        "class_",
        "main_content",
        "find",
        "class_",
        "findAll",
        "paragraph",
        "question_p_elements",
        "paragraph",
        "text",
        "strip",
        "question_paragraphs",
        "append",
        "paragraph",
        "splitTextToSpeeches",
        "question_text",
        "question_with_speaker",
        "question_title",
        "canonical_url",
        "question_text_paragraphs",
        "asked_by_person",
        "parseAnswersFromQuestionPage",
        "main_content",
        "len",
        "answers_object",
        "answers_object",
        "answers_object",
        "question_object",
        "page_content",
        "page_content",
        "find",
        "class_",
        "answers_div",
        "find",
        "class_",
        "logger",
        "debug",
        "answers_div",
        "find",
        "class_",
        "logger",
        "debug",
        "answers_div",
        "find",
        "class_",
        "answer_article",
        "find",
        "class_",
        "find",
        "class_",
        "text",
        "dateutil",
        "parser",
        "parse",
        "answer_date",
        "date",
        "logger",
        "debug",
        "format",
        "answers_object",
        "answer_article",
        "find",
        "class_",
        "find",
        "class_",
        "text",
        "strip",
        "getSpeakerObjectFromName",
        "answered_by_name",
        "logger",
        "debug",
        "format",
        "answered_by_person",
        "answer_article",
        "find",
        "class_",
        "findAll",
        "paragraph",
        "answer_p_elements",
        "paragraph",
        "text",
        "strip",
        "answer_paragraphs",
        "append",
        "paragraph",
        "logger",
        "debug",
        "format",
        "len",
        "answer_paragraphs",
        "splitTextToSpeeches",
        "answer_paragraphs",
        "logger",
        "debug",
        "format",
        "len",
        "answers_by_speech",
        "i",
        "answer",
        "answers_by_speech",
        "answer",
        "answers_object",
        "append",
        "answer",
        "answer",
        "i",
        "logger",
        "debug",
        "answers_object",
        "append",
        "answered_by_person",
        "answer",
        "logger",
        "warning",
        "format",
        "canonical_url",
        "answers_object",
        "name",
        "patterns_to_strip",
        "name",
        "pattern",
        "NAME_REGEX_TO_STRIP",
        "re",
        "sub",
        "pattern",
        "name",
        "name",
        "original_name",
        "name",
        "strip",
        "name",
        "name",
        "CURRENT_MAYOR_NAME",
        "name",
        "NAME_CORRECTIONS",
        "NAME_CORRECTIONS",
        "name",
        "ASSEMBLY_MEMBERS_BY_NAME",
        "name",
        "name",
        "stripPatternsFromName",
        "name",
        "getPersonIDFromName",
        "name",
        "name",
        "text",
        "text",
        "replace",
        "text",
        "strip",
        "text",
        "paragraph",
        "paragraph",
        "find",
        "name_candidate",
        "re",
        "match",
        "name_candidate",
        "text",
        "name_candidate",
        "extract",
        "getSpeakerObjectFromName",
        "speaker_name",
        "text",
        "replace",
        "strip",
        "speaker",
        "cleanParagraphText",
        "paragraph",
        "text",
        "text_paragraphs",
        "paragraph",
        "text_paragraphs",
        "isinstance",
        "paragraph",
        "element",
        "NavigableString",
        "logger",
        "debug",
        "paragraph",
        "text",
        "getSpeakerAndTextFromParagraph",
        "paragraph",
        "paragraph_with_speaker",
        "len",
        "paragraphs_in_speech",
        "answers_by_speech",
        "append",
        "paragraphs_in_speech",
        "current_speaker",
        "logger",
        "debug",
        "format",
        "len",
        "paragraphs_in_speech",
        "paragraph_with_speaker",
        "paragraph_with_speaker",
        "paragraphs_in_speech",
        "append",
        "paragraph_with_speaker",
        "len",
        "paragraphs_in_speech",
        "logger",
        "debug",
        "format",
        "len",
        "paragraphs_in_speech",
        "answers_by_speech",
        "append",
        "paragraphs_in_speech",
        "current_speaker",
        "logger",
        "debug",
        "format",
        "len",
        "text_paragraphs",
        "len",
        "answers_by_speech",
        "answers_by_speech",
        "questions",
        "etree",
        "Element",
        "question_id",
        "question",
        "questions",
        "items",
        "format",
        "question",
        "strftime",
        "question",
        "split",
        "format",
        "PUBLIC_WHIP_QUESTION_ID_PREFIX",
        "question_number",
        "pw_root_id",
        "etree",
        "SubElement",
        "pwxml",
        "nospeaker",
        "id",
        "pw_heading_id",
        "question",
        "pw_root_id",
        "etree",
        "SubElement",
        "pwxml",
        "id",
        "pw_question_id",
        "url",
        "question",
        "speakername",
        "question",
        "person_id",
        "question",
        "paragraph",
        "question",
        "etree",
        "SubElement",
        "question_element",
        "paragraph",
        "answer_index",
        "answer",
        "question",
        "pw_root_id",
        "answer_index",
        "etree",
        "SubElement",
        "pwxml",
        "id",
        "pw_answer_id",
        "speakername",
        "answer",
        "person_id",
        "answer",
        "paragraph",
        "answer",
        "etree",
        "SubElement",
        "answer_element",
        "paragraph",
        "pwxml",
        "lxml",
        "file",
        "etree",
        "ElementTree",
        "lxml",
        "open",
        "file",
        "outFile",
        "xmldoc",
        "write",
        "outFile",
        "pretty_print",
        "encoding",
        "logger",
        "debug",
        "format",
        "file",
        "meeting_scrape_data",
        "meeting_scrape_data",
        "meeting_scrape_data",
        "meeting_scrape_data",
        "datetime",
        "datetime",
        "today",
        "meeting_scrape_data",
        "len",
        "meeting_scrape_data",
        "meeting_scrape_data",
        "len",
        "meeting_scrape_data",
        "status_object",
        "members_file",
        "json",
        "load",
        "members_file",
        "logger",
        "debug",
        "format",
        "len",
        "members_raw_data",
        "members_file",
        "name",
        "person",
        "members_raw_data",
        "person",
        "person",
        "membership",
        "members_raw_data",
        "membership",
        "get",
        "getNameFromPerson",
        "people_by_id",
        "membership",
        "name",
        "person_ids_by_name",
        "membership",
        "logger",
        "debug",
        "format",
        "name",
        "person_ids_by_name",
        "name",
        "membership",
        "format",
        "name",
        "logger",
        "debug",
        "format",
        "len",
        "person_ids_by_name",
        "person_ids_by_name",
        "person",
        "name",
        "person",
        "get",
        "name",
        "name",
        "name",
        "format",
        "person",
        "click",
        "group",
        "click_log",
        "simple_verbosity_option",
        "logger",
        "cli",
        "command",
        "click",
        "option",
        "CLI_DATETIME_FORMAT",
        "help",
        "click",
        "option",
        "CLI_DATETIME_FORMAT",
        "help",
        "click",
        "option",
        "is_flag",
        "help",
        "click",
        "option",
        "is_flag",
        "help",
        "start",
        "end",
        "force_scrape_dates",
        "force_refresh_questions",
        "logger",
        "info",
        "start",
        "start",
        "date",
        "logger",
        "debug",
        "format",
        "start_date",
        "datetime",
        "datetime",
        "strptime",
        "DEFAULT_START_DATE",
        "date",
        "logger",
        "debug",
        "format",
        "start_date",
        "end",
        "end",
        "date",
        "logger",
        "debug",
        "format",
        "end_date",
        "datetime",
        "datetime",
        "today",
        "datetime",
        "timedelta",
        "days",
        "date",
        "logger",
        "debug",
        "format",
        "end_date",
        "end_date",
        "start_date",
        "logger",
        "error",
        "getDatesInRange",
        "start_date",
        "end_date",
        "logger",
        "info",
        "format",
        "len",
        "dates_in_range",
        "start_date",
        "end_date",
        "click",
        "progressbar",
        "dates_in_range",
        "bar",
        "date",
        "bar",
        "force_scrape_dates",
        "date",
        "state",
        "date",
        "state",
        "state",
        "date",
        "logger",
        "info",
        "format",
        "date",
        "scrapeAssemblyMeetingOnDate",
        "date",
        "meeting_scrape_data",
        "logger",
        "info",
        "format",
        "date",
        "len",
        "meeting_scrape_data",
        "questions_in_range",
        "meeting_scrape_data",
        "state",
        "date",
        "buildDateStatusObjectFromScrape",
        "meeting_scrape_data",
        "logger",
        "debug",
        "format",
        "date",
        "logger",
        "info",
        "format",
        "len",
        "questions_in_range",
        "question",
        "questions_in_range",
        "force_refresh_questions",
        "question",
        "state",
        "state",
        "datetime",
        "datetime",
        "today",
        "cli",
        "command",
        "click",
        "option",
        "help",
        "click",
        "option",
        "required",
        "click",
        "File",
        "help",
        "click",
        "option",
        "required",
        "click",
        "Path",
        "exists",
        "file_okay",
        "writable",
        "help",
        "click",
        "option",
        "is_flag",
        "help",
        "limit",
        "members",
        "dry_run",
        "ASSEMBLY_MEMBERS_BY_NAME",
        "loadMembershipsFromFile",
        "members",
        "logger",
        "debug",
        "format",
        "len",
        "state",
        "question_id",
        "question_state",
        "state",
        "items",
        "question_state",
        "questions_to_scrape",
        "append",
        "question_id",
        "limit",
        "questions_to_scrape",
        "limit",
        "logger",
        "info",
        "format",
        "len",
        "questions_to_scrape",
        "click",
        "progressbar",
        "questions_to_scrape",
        "bar",
        "question_id",
        "bar",
        "scrapeQuestionWithId",
        "question_id",
        "question_id",
        "question_object",
        "scraped_questions",
        "items",
        "question_object",
        "question_object",
        "dry_run",
        "state",
        "question_id",
        "logger",
        "info",
        "format",
        "len",
        "answered_questions",
        "len",
        "answered_questions",
        "file_needs_writing",
        "datetime",
        "datetime",
        "today",
        "strftime",
        "ascii_lowercase",
        "i",
        "XML_FILE_PREFIX",
        "date_string",
        "letter_suffix",
        "os",
        "path",
        "join",
        "output_filename",
        "os",
        "path",
        "exists",
        "output_file",
        "i",
        "writeXMLToFile",
        "buildXMLForQuestions",
        "answered_questions",
        "output_file",
        "cli",
        "command",
        "name",
        "click",
        "option",
        "required",
        "CLI_DATETIME_FORMAT",
        "help",
        "click",
        "option",
        "required",
        "help",
        "date",
        "scrape",
        "date",
        "date",
        "click",
        "echo",
        "format",
        "date",
        "scrape",
        "date",
        "state",
        "state",
        "date",
        "scrape",
        "state",
        "date",
        "scrape",
        "cli",
        "command",
        "name",
        "click",
        "option",
        "required",
        "help",
        "click",
        "option",
        "required",
        "help",
        "id",
        "scrape",
        "click",
        "echo",
        "format",
        "id",
        "scrape",
        "id",
        "state",
        "state",
        "id",
        "scrape",
        "state",
        "scrape",
        "cli",
        "command",
        "name",
        "state",
        "click",
        "secho",
        "bg",
        "fg",
        "click",
        "confirm",
        "abort",
        "logger",
        "info",
        "click",
        "echo",
        "cli",
        "resultcallback",
        "result",
        "kwargs",
        "writeScraperState",
        "cli",
        "obj"
    ],
    "literals": [
        "'cache'",
        "'config.json'",
        "'Reading config file'",
        "'assembly_domain'",
        "'default_start_date'",
        "'public_whip_question_id_prefix'",
        "'current_mayor_name'",
        "'name_regex_to_strip'",
        "'name_corrections'",
        "'xml_file_prefix'",
        "'%Y-%m-%d'",
        "'state.json'",
        "'Reading state file'",
        "'state.json'",
        "'w'",
        "'Writing state file'",
        "'Could not serialise to valid JSON: {}'",
        "'%Y/%m/%d'",
        "'/questions/meeting/mqt/'",
        "'Scraping meeting page at {}'",
        "'http_status'",
        "'Meeting on {} returned HTTP 404'",
        "'to_scrape'",
        "'Meeting on {} returned HTTP 200'",
        "'sessions'",
        "'questions'",
        "'sessions'",
        "'to_scrape'",
        "'sessions'",
        "'questions'",
        "'Meeting on {} doesn\\'t seem to have any sessions!'",
        "'to_scrape'",
        "'Meeting on {} returned HTTP {}'",
        "'to_scrape'",
        "'div'",
        "'entity-meetingsession'",
        "'href'",
        "'Found session \"{}\" at URL {}'",
        "'Scraping session page at {}'",
        "'tr'",
        "'question'",
        "'td'",
        "'Found question {}'",
        "'Scraping question {}'",
        "'/questions/'",
        "'Scraping question page at {}'",
        "'Question {} returned HTTP 200'",
        "'Question {} returned HTTP {}'",
        "'questions'",
        "'to_scrape'",
        "'questions'",
        "'scraped_at'",
        "'link'",
        "'rel'",
        "'canonical'",
        "'href'",
        "'div'",
        "'main'",
        "u'Question title is {}'",
        "'div'",
        "'field--name-field-asked-by'",
        "'div'",
        "'field__item'",
        "u'Question asked by {}'",
        "'name'",
        "'div'",
        "'field--name-body'",
        "'div'",
        "'field__item'",
        "'section'",
        "'question'",
        "'p'",
        "''",
        "'paragraphs'",
        "'title'",
        "'canonical_url'",
        "'question_text_paragraphs'",
        "'asked_by'",
        "'answers'",
        "'answered'",
        "'answers'",
        "'answers'",
        "'answered_date'",
        "'answered_date'",
        "'answered'",
        "'div'",
        "'answers'",
        "'answers'",
        "'p'",
        "'holding'",
        "'Question is awaiting an answer'",
        "'div'",
        "'no-answer'",
        "'Question has no available answers.'",
        "'article'",
        "'node--answer'",
        "'div'",
        "'field--name-post-date'",
        "'div'",
        "'field__item'",
        "'answered_date'",
        "'Question answered on {}'",
        "'answered_date'",
        "'div'",
        "'field--name-field-answered-by'",
        "'div'",
        "'field__item'",
        "u'Question answered by {}'",
        "'name'",
        "'div'",
        "'field--name-body'",
        "'p'",
        "''",
        "'Found {} paragraphs of non-empty answers on page'",
        "'Found {} individual speeches within this answer'",
        "'speaker'",
        "'answers'",
        "'speaker'",
        "'speaker'",
        "'paragraphs'",
        "'paragraphs'",
        "'First speech with no detected speaker, using \"Answered By\"'",
        "'answers'",
        "'speaker'",
        "'paragraphs'",
        "'paragraphs'",
        "'Speech with no detected speaker in question {}!'",
        "''",
        "'The Mayor'",
        "'id'",
        "'name'",
        "u'\\u00a0 '",
        "' '",
        "'strong'",
        "'^.:'",
        "':'",
        "''",
        "'speaker'",
        "'text'",
        "'Ignored NavigableString'",
        "''",
        "'speaker'",
        "'paragraphs'",
        "'speaker'",
        "'New speaker! Last speech was {} paragraphs'",
        "'text'",
        "'speaker'",
        "'text'",
        "'Final speech was {} paragraphs'",
        "'paragraphs'",
        "'speaker'",
        "'Split {} paragraphs into {} speeches'",
        "'publicwhip'",
        "'{}.{}'",
        "'answered_date'",
        "'%Y-%m-%d'",
        "'canonical_url'",
        "'/'",
        "'{}{}'",
        "'.h'",
        "'minor-heading'",
        "'true'",
        "'title'",
        "'.q0'",
        "'question'",
        "'canonical_url'",
        "'asked_by'",
        "'name'",
        "'asked_by'",
        "'id'",
        "'question_text_paragraphs'",
        "'p'",
        "'answers'",
        "'.r'",
        "'reply'",
        "'speaker'",
        "'name'",
        "'speaker'",
        "'id'",
        "'paragraphs'",
        "'p'",
        "'w'",
        "'utf-8'",
        "'Written XML to {}'",
        "'http_status'",
        "'http_status'",
        "'to_scrape'",
        "'to_scrape'",
        "'to_scrape'",
        "'updated'",
        "'sessions'",
        "'sessions_count'",
        "'sessions'",
        "'questions'",
        "'questions_count'",
        "'questions'",
        "'Loaded {} people from {}'",
        "'persons'",
        "'persons'",
        "'id'",
        "'memberships'",
        "'organization_id'",
        "'london-assembly'",
        "'person_id'",
        "'person_id'",
        "u'Added ID map for for {}'",
        "'person_id'",
        "'Multiple people with name {}'",
        "'Added {} names with Assembly memberships'",
        "'other_names'",
        "'note'",
        "'Main'",
        "'given_name'",
        "' '",
        "'family_name'",
        "'Unable to find main name for person {}'",
        "'id'",
        "'warning'",
        "'-s'",
        "'--start'",
        "'The first date of the range to be scrape.'",
        "'-e'",
        "'--end'",
        "'The last date of the range to be scraped.'",
        "'--force-scrape-dates'",
        "'Force all dates in the range to be re-scraped regardless of status'",
        "'--force-refresh-questions'",
        "'Force all detected questions to have their state refreshed'",
        "'Scraping London Assembly'",
        "'End date has been explicitly set to {} by CLI'",
        "'%Y-%m-%d'",
        "'Start date has been automatically set to {} by config'",
        "'End date has been explicitly set to {} by CLI'",
        "'End date has been automatically set to {} (yesterday)'",
        "'End date is before the start date. Aborting.'",
        "'Targetting {} dates between {} and {}.'",
        "'dates'",
        "'dates'",
        "'dates'",
        "'to_scrape'",
        "'Scraping date {}'",
        "'questions'",
        "'{} has {} questions'",
        "'questions'",
        "'questions'",
        "'dates'",
        "'Skipping date {} (already scraped successfully)'",
        "'{} questions found in this scrape'",
        "'questions'",
        "'questions'",
        "'to_scrape'",
        "'scrape_requested_on'",
        "'-l'",
        "'--limit'",
        "'The maximum number of questions to scrape'",
        "'-m'",
        "'--members'",
        "'The members.json file to match names against.'",
        "'-o'",
        "'--out'",
        "'The directory to place parsed XML files into.'",
        "'--dry-run'",
        "'Should questions be marked as not needing scraping in future?'",
        "'{} questions are known to exist'",
        "'questions'",
        "'questions'",
        "'to_scrape'",
        "'Scraping {} questions'",
        "'answered'",
        "'questions'",
        "'to_scrape'",
        "'{} questions have had answers found in this scrape'",
        "'%Y-%m-%d'",
        "'.xml'",
        "'set_date_scrape'",
        "'--date'",
        "'The date to alter the scrape status of.'",
        "'--scrape/--no-scrape'",
        "'Should the date be marked as needing scraping, or not?'",
        "'Setting scrape status of {} to {}'",
        "'dates'",
        "'dates'",
        "'to_scrape'",
        "'dates'",
        "'to_scrape'",
        "'set_question_scrape'",
        "'--id'",
        "'The question to alter the scrape status.'",
        "'--scrape/--no-scrape'",
        "'Should the question be marked as needing scraping, or not?'",
        "'Setting scrape status of {} to {}'",
        "'questions'",
        "'questions'",
        "'to_scrape'",
        "'questions'",
        "'to_scrape'",
        "'reset_state'",
        "'Resetting the state file will wipe all information about the states of dates and questions.'",
        "'red'",
        "'white'",
        "'Are you really sure you want to do this?'",
        "'Resetting scraper state file'",
        "'dates'",
        "'questions'",
        "'All done. Have a nice day.'",
        "'__main__'"
    ],
    "variables": [
        "logger",
        "cache_path",
        "config",
        "ASSEMBLY_DOMAIN",
        "DEFAULT_START_DATE",
        "PUBLIC_WHIP_QUESTION_ID_PREFIX",
        "CURRENT_MAYOR_NAME",
        "NAME_REGEX_TO_STRIP",
        "NAME_CORRECTIONS",
        "XML_FILE_PREFIX",
        "CLI_DATETIME_FORMAT",
        "state",
        "json_string",
        "state",
        "delta",
        "dates",
        "date",
        "meeting_date_string",
        "meeting_date_url",
        "meeting_page",
        "scraped_data",
        "scraped_data",
        "scraped_data",
        "scraped_data",
        "scraped_data",
        "scraped_data",
        "scraped_data",
        "soup",
        "sessions_in_content",
        "sessions_in_meeting",
        "session_title",
        "session_url",
        "session_full_url",
        "session_page",
        "questions_in_session",
        "soup",
        "questions_in_content",
        "questions_in_session",
        "question_row_cells",
        "question_number",
        "question_full_url",
        "question_page",
        "question_parsed_data",
        "question_parsed_data",
        "soup",
        "canonical_url",
        "main_content",
        "question_title",
        "asked_by_name",
        "asked_by_person",
        "question_text",
        "question_p_elements",
        "question_paragraphs",
        "question_with_speaker",
        "question_text_paragraphs",
        "question_object",
        "answers_object",
        "question_object",
        "question_object",
        "question_object",
        "question_object",
        "answers_div",
        "answers_object",
        "answer_article",
        "answer_date",
        "answers_object",
        "answered_by_name",
        "answered_by_person",
        "answer_p_elements",
        "answer_paragraphs",
        "answers_by_speech",
        "patterns_to_strip",
        "original_name",
        "name",
        "patterns_to_strip",
        "name",
        "name",
        "name",
        "text",
        "text",
        "name_candidate",
        "speaker_name",
        "speaker",
        "speaker",
        "speaker",
        "answers_by_speech",
        "paragraphs_in_speech",
        "current_speaker",
        "paragraph_with_speaker",
        "paragraphs_in_speech",
        "current_speaker",
        "pwxml",
        "question_number",
        "pw_root_id",
        "pw_heading_id",
        "heading_element",
        "heading_element",
        "text",
        "pw_question_id",
        "question_element",
        "paragraph_element",
        "paragraph_element",
        "text",
        "pw_answer_id",
        "answer_element",
        "paragraph_element",
        "paragraph_element",
        "text",
        "xmldoc",
        "status_object",
        "status_object",
        "status_object",
        "members_raw_data",
        "people_by_id",
        "people_by_id",
        "person_ids_by_name",
        "name",
        "person_ids_by_name",
        "name",
        "start_date",
        "start_date",
        "end_date",
        "end_date",
        "dates_in_range",
        "questions_in_range",
        "meeting_scrape_data",
        "question",
        "ASSEMBLY_MEMBERS_BY_NAME",
        "questions_to_scrape",
        "questions_to_scrape",
        "scraped_questions",
        "scraped_questions",
        "question_id",
        "answered_questions",
        "answered_questions",
        "question_id",
        "i",
        "file_needs_writing",
        "date_string",
        "letter_suffix",
        "output_filename",
        "output_file",
        "i",
        "file_needs_writing",
        "date",
        "id",
        "state"
    ],
    "comments": [
        "! /usr/bin/env python",
        "Set up logging",
        "Set up the requests cache",
        "Load and parsethe configuration file",
        "Set our constants",
        "This needs to match the type from xml2db.pl in TWFY",
        "Get the current state file, parse it and assign to the global state variable",
        "Convert it to a date rather than a datetime",
        "state['questions'][question_id]['to_scrape'] = False",
        "We use the canonical URL just in case anything exotic has happened with redirects.",
        "Pull the title",
        "Extract who asked it",
        "Try to extract the actual question",
        "Some paragraphs are helpfully empty. Deal with those",
        "NB at this point we're still sending BeautifulSoup objects",
        "We ignore the speaker which comes back with this, but this function otherwise does all the tidying needed",
        "Now we know the title and the question, assemble the basic question object to send back",
        "Try parse the actual answers out",
        "Got answers?",
        "Send the parsed data back upstream",
        "Look to see if there are any answers given",
        "If there's a paragraph with a class of 'holding', we're waiting for an answer.",
        "Sometimes the question just has no answer. Because this is \"currently\", still assume it's unanswered.",
        "We assume that we only need to bother about finding answers if there isn't a holding one.",
        "Get the date this was answered - this is the important one, not when it was asked,",
        "Find who answered it",
        "Some paragraphs are helpfully empty. Deal with those",
        "NB at this point we're still sending BeautifulSoup objects",
        "Send the paragraphs of answers off to be sliced if this is multiple parts of a conversation",
        "This makes sure the answer has a speaker - if it doesn't, something is wrong",
        "If this is the first speech with no speaker, it's the answerer.",
        "If this person's name has a correction, use that instead",
        "Remove non-breaking spaces followed by a space.",
        "Strip trailing whitespace",
        "Strong tags are used to mark speaker names in the source",
        "Sanity check if this matches the expected format of speaker names - a name followed by a colon",
        "extract() removes the element from the beautifulsoup tree and returns it",
        "Ignore entirely empty paragraphs",
        "If this paragraph is a new speaker, wrap up the answer and start a new one",
        "If this isn't a new speaker, just append to the current one",
        "Finally, wrap up the whole thing if there's anything remaining",
        "Make a new document tree",
        "Save to XML file",
        "We don't need to open this file, since Click deals with that",
        "This unpacks all the people in the JSON so we can pull a person's name back from their ID",
        "This loops through each membership, checks to see if it's for the Assembly, if so adds it to the map",
        "Yesterday",
        "Check to see if we should actually scrape this date",
        "Only do this if the question doesn't already exist, or we're forcing a refresh",
        "Try load in the Members data first - if that fails there's no point continuing.",
        "ASSEMBLY_MEMBERS_BY_NAME is global to avoid having to pass it down every function until names are turned to IDs",
        "If a limit is provided, set it. Otherwise, scrape the lot.",
        "Setting this question's scrape state to False means it won't be processed again",
        "If there are new answers, write out our file.",
        "The file doesn't exist, write it!"
    ],
    "docstrings": [
        "''' Load the scraper's state from file. '''",
        "''' Write the scraper's state back out to file. '''",
        "''' Return an array of dates between (and inclusive of) those given. '''",
        "''' Scrape the Mayor's Questions meeting page for the provided date '''",
        "''' Parse an assembly meeting page and return a list of its sessions. '''",
        "''' Scrape a given session URL and extract the questions within. '''",
        "''' Scrape the page for a given question ID and return structured data. '''",
        "''' Actually take the HTML from a scraped question page and turn it into a structured object. '''",
        "''' Given page content, see if we can get answers. '''",
        "''' Turn a name into a speaker ID. '''",
        "''' Given a name, try find a speaker ID and return a whole object. '''",
        "''' For the given paragraph text, try to detect if it is led by a speaker's name. '''",
        "''' Sometimes text has several speeches by different people within it. Try isolate those. '''",
        "''' Given a date, collect answered questions and output the appropriate XML file. '''",
        "''' Write an lxml element out to file. '''",
        "''' Format a date's status for storing in the state file. '''",
        "''' Parse the provided file and extract data on Assembly members. '''",
        "''' Get a list of questions from the London Assembly website asked between the dates given. '''",
        "''' Update all questions which are still pending a scrape. '''",
        "''' Explicitly set if a date should be scraped or not at the next run.\n\n    Used to either manually request a re-scraping of a date, or to suppress future scraping of a date. '''",
        "''' Explicitly set if a question should be scraped or not at the next run.\n\n    Used to either manually request a re-scraping of a question, or to suppress future scraping of a question. '''",
        "''' Reset the scraper's state file, wiping all knowledge of dates and questions. '''",
        "''' Called after anything in the CLI command group, to write the state back to the file. '''"
    ],
    "functions": [
        "getScraperState",
        "writeScraperState",
        "getDatesInRange",
        "scrapeAssemblyMeetingOnDate",
        "parseAssemblyMeetingToSessions",
        "scrapeSessionAtUrl",
        "parseSessionToQuestions",
        "scrapeQuestionWithId",
        "parseQuestionPage",
        "parseAnswersFromQuestionPage",
        "stripPatternsFromName",
        "getPersonIDFromName",
        "getSpeakerObjectFromName",
        "cleanParagraphText",
        "getSpeakerAndTextFromParagraph",
        "splitTextToSpeeches",
        "buildXMLForQuestions",
        "writeXMLToFile",
        "buildDateStatusObjectFromScrape",
        "loadMembershipsFromFile",
        "getNameFromPerson",
        "cli",
        "meetings",
        "questions",
        "set_date_scrape",
        "set_question_scrape",
        "reset_state",
        "process_result"
    ],
    "classes": []
}