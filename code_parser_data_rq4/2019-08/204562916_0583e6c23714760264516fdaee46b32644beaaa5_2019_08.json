{
    "identifiers": [
        "collections",
        "OrderedDict",
        "cimodel",
        "lib",
        "conf_tree",
        "ConfigNode",
        "cimodel",
        "data",
        "dimensions",
        "dimensions",
        "cuda_version",
        "cuda_version",
        "cuda_version",
        "OrderedDict",
        "manywheel",
        "conda",
        "dimensions",
        "STANDARD_PYTHON_VERSIONS",
        "libtorch",
        "OrderedDict",
        "linux",
        "dimensions",
        "CUDA_VERSIONS",
        "LINUX_PACKAGE_VARIANTS",
        "macos",
        "OrderedDict",
        "wheel",
        "dimensions",
        "STANDARD_PYTHON_VERSIONS",
        "conda",
        "dimensions",
        "STANDARD_PYTHON_VERSIONS",
        "libtorch",
        "ConfigNode",
        "node_name",
        "config_tree_data",
        "smoke",
        "TopLevelNode",
        "node_name",
        "config_tree_data",
        "props",
        "smoke",
        "OSConfigNode",
        "x",
        "c",
        "p",
        "x",
        "c",
        "p",
        "config_tree_data",
        "items",
        "ConfigNode",
        "parent",
        "os_name",
        "cuda_versions",
        "py_tree",
        "OSConfigNode",
        "parent",
        "os_name",
        "py_tree",
        "props",
        "os_name",
        "props",
        "cuda_versions",
        "PackageFormatConfigNode",
        "k",
        "v",
        "k",
        "v",
        "py_tree",
        "items",
        "find_prop",
        "x",
        "x",
        "get_label",
        "packaging_variants",
        "filtered_packaging_variants",
        "packaging_variants",
        "ConfigNode",
        "parent",
        "package_format",
        "python_versions",
        "PackageFormatConfigNode",
        "parent",
        "package_format",
        "props",
        "python_versions",
        "props",
        "package_format",
        "find_prop",
        "LinuxGccConfigNode",
        "v",
        "v",
        "DEVTOOLSET_VERSIONS",
        "ArchConfigNode",
        "v",
        "v",
        "find_prop",
        "ConfigNode",
        "parent",
        "devtoolset_version",
        "LinuxGccConfigNode",
        "parent",
        "devtoolset_version",
        "props",
        "devtoolset_version",
        "find_prop",
        "find_prop",
        "x",
        "x",
        "cuda_versions",
        "ArchConfigNode",
        "v",
        "v",
        "cuda_versions",
        "ConfigNode",
        "parent",
        "cu",
        "ArchConfigNode",
        "parent",
        "get_processor_arch_name",
        "cu",
        "props",
        "cu",
        "PyVersionConfigNode",
        "v",
        "v",
        "find_prop",
        "ConfigNode",
        "parent",
        "pyver",
        "PyVersionConfigNode",
        "parent",
        "pyver",
        "props",
        "pyver",
        "find_prop",
        "find_prop",
        "find_prop",
        "package_format",
        "os_name",
        "LINKING_DIMENSIONS",
        "has_libtorch_variants",
        "LinkingVariantConfigNode",
        "v",
        "v",
        "linking_variants",
        "ConfigNode",
        "parent",
        "linking_variant",
        "LinkingVariantConfigNode",
        "parent",
        "linking_variant",
        "DependencyInclusionConfigNode",
        "v",
        "v",
        "DEPS_INCLUSION_DIMENSIONS",
        "ConfigNode",
        "parent",
        "deps_variant",
        "DependencyInclusionConfigNode",
        "parent",
        "deps_variant",
        "props",
        "join",
        "parent",
        "get_label",
        "get_label"
    ],
    "literals": [
        "\"shared\"",
        "\"static\"",
        "\"with-deps\"",
        "\"without-deps\"",
        "\"cpu\"",
        "\"cu\"",
        "\"2.7m\"",
        "\"2.7mu\"",
        "\"3.5m\"",
        "\"3.6m\"",
        "\"3.7m\"",
        "\"2.7m\"",
        "\"2.7\"",
        "\"smoke\"",
        "\"os_name\"",
        "\"cuda_versions\"",
        "\"smoke\"",
        "\"libtorch\"",
        "\"python_versions\"",
        "\"package_format\"",
        "\"os_name\"",
        "\"linux\"",
        "\"cuda_versions\"",
        "\"DEVTOOLSET=\"",
        "\"devtoolset_version\"",
        "\"cuda_versions\"",
        "\"devtoolset_version\"",
        "\"90\"",
        "\"cu\"",
        "\"python_versions\"",
        "\"pyver\"",
        "\"smoke\"",
        "\"package_format\"",
        "\"os_name\"",
        "\"libtorch\"",
        "\"linux\"",
        "\"libtorch_variant\"",
        "\"-\""
    ],
    "variables": [
        "LINKING_DIMENSIONS",
        "DEPS_INCLUSION_DIMENSIONS",
        "LINUX_PACKAGE_VARIANTS",
        "CONFIG_TREE_DATA",
        "DEVTOOLSET_VERSIONS",
        "config_tree_data",
        "py_tree",
        "packaging_variants",
        "filtered_packaging_variants",
        "cuda_versions",
        "cuda_versions",
        "smoke",
        "package_format",
        "os_name",
        "has_libtorch_variants",
        "linking_variants"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "Why is this an option?",
        "All the nightlies used to be devtoolset3 and built with the old gcc ABI. We",
        "added a devtoolset7 option so that we could build nightlies with the new gcc",
        "ABI. That didn't work since devtoolset7 can't build with the new gcc ABI. But",
        "then we set devtoolset7 to be the default anyways, since devtoolset7",
        "understands avx512, which is needed for good fbgemm performance.",
        "This should be removed. The base dockers should just be upgraded to",
        "devtoolset7 so we don't have to reinstall this in every build job.",
        "The same machinery that this uses, though, should be retooled for a different",
        "compiler toolchain that can build with the new gcc ABI.",
        "XXX devtoolset7 on CUDA 9.0 is temporarily disabled",
        "see https://github.com/pytorch/pytorch/issues/20066"
    ],
    "docstrings": [
        "\"\"\"\nThis module models the tree of configuration variants\nfor \"smoketest\" builds.\n\nEach subclass of ConfigNode represents a layer of the configuration hierarchy.\nThese tree nodes encapsulate the logic for whether a branch of the hierarchy\nshould be \"pruned\".\n\nIn addition to generating config.yml content, the tree is also traversed\nto produce a visualization of config dimensions.\n\"\"\""
    ],
    "functions": [
        "get_processor_arch_name",
        "get_children",
        "get_children",
        "get_children",
        "get_children",
        "get_children",
        "get_children",
        "get_children"
    ],
    "classes": [
        "TopLevelNode",
        "OSConfigNode",
        "PackageFormatConfigNode",
        "LinuxGccConfigNode",
        "ArchConfigNode",
        "PyVersionConfigNode",
        "LinkingVariantConfigNode",
        "DependencyInclusionConfigNode"
    ]
}