{
    "identifiers": [
        "fakeAsync",
        "tick",
        "Observable",
        "Observer",
        "Subject",
        "Subscription",
        "Notification",
        "NotificationKind",
        "reduce",
        "fromWorkerPool",
        "describe",
        "jasmine",
        "beforeEach",
        "stubbedWorkers",
        "workerFactorySpy",
        "jasmine",
        "workerFactorySpy",
        "jasmine",
        "stubWorkerIndex",
        "stubbedWorkers",
        "stubWorker",
        "stubWorker",
        "describe",
        "beforeEach",
        "input$",
        "Subject",
        "stubbedWorkerStream",
        "fromWorkerPool",
        "workerFactorySpy",
        "input$",
        "it",
        "expect",
        "workerFactorySpy",
        "jasmine",
        "stubbedWorkerStream",
        "subscriptionSpy",
        "expect",
        "workerFactorySpy",
        "expect",
        "subscriptionSpy",
        "input$",
        "expect",
        "workerFactorySpy",
        "sub",
        "it",
        "jasmine",
        "stubbedWorkerStream",
        "subscriptionSpy",
        "i",
        "i",
        "input$",
        "i",
        "expect",
        "workerFactorySpy",
        "navigator",
        "expect",
        "stubbedWorkers",
        "jasmine",
        "NotificationKind",
        "sub",
        "it",
        "jasmine",
        "stubbedWorkerStream",
        "subscriptionSpy",
        "i",
        "i",
        "input$",
        "i",
        "i",
        "navigator",
        "i",
        "expect",
        "stubbedWorkers",
        "i",
        "sub",
        "i",
        "navigator",
        "i",
        "expect",
        "stubbedWorkers",
        "i",
        "it",
        "jasmine",
        "stubbedWorkerStream",
        "subscriptionSpy",
        "i",
        "i",
        "input$",
        "i",
        "i",
        "navigator",
        "i",
        "stubbedWorkers",
        "i",
        "stubWorker",
        "MessageEvent",
        "Notification",
        "NotificationKind",
        "i",
        "expect",
        "subscriptionSpy",
        "i",
        "stubWorker",
        "MessageEvent",
        "Notification",
        "NotificationKind",
        "expect",
        "stubbedWorkers",
        "i",
        "sub",
        "describe",
        "describe",
        "describe",
        "it",
        "fakeAsync",
        "fromWorkerPool",
        "workerFactorySpy",
        "input",
        "jasmine",
        "testWorkerStream$",
        "reduce",
        "res",
        "res",
        "subscriptionSpy",
        "i",
        "input",
        "i",
        "setTimeout",
        "stubbedWorkers",
        "i",
        "workerCount",
        "stubWorker",
        "MessageEvent",
        "Notification",
        "NotificationKind",
        "input",
        "i",
        "stubWorker",
        "MessageEvent",
        "Notification",
        "NotificationKind",
        "i",
        "tick",
        "expect",
        "subscriptionSpy",
        "sub",
        "it",
        "fakeAsync",
        "jasmine",
        "outerObservable$",
        "Observable",
        "observer",
        "outerObservable$",
        "innerObservable$",
        "innerSubs",
        "innerObservable$",
        "value",
        "observer",
        "value",
        "operatorSpy",
        "innerSubs",
        "s",
        "s",
        "outerSub",
        "fromWorkerPool",
        "workerFactorySpy",
        "input",
        "customOperator",
        "jasmine",
        "testWorkerStream$",
        "reduce",
        "res",
        "res",
        "subscriptionSpy",
        "i",
        "input",
        "i",
        "setTimeout",
        "stubbedWorkers",
        "i",
        "workerCount",
        "stubWorker",
        "MessageEvent",
        "Notification",
        "NotificationKind",
        "input",
        "i",
        "stubWorker",
        "MessageEvent",
        "Notification",
        "NotificationKind",
        "i",
        "tick",
        "expect",
        "subscriptionSpy",
        "expect",
        "operatorSpy",
        "sub"
    ],
    "literals": [
        "'@angular/core/testing'",
        "'rxjs'",
        "'rxjs/internal/Notification'",
        "'rxjs/operators'",
        "'./from-worker-pool'",
        "'fromWorkerPool'",
        "'workerFactorySpy'",
        "stubWorker${stubWorkerIndex++}",
        "'postMessage'",
        "'terminate'",
        "'with observable input'",
        "'constructs one worker for one piece of work'",
        "'subscriptionSpy'",
        "'constructs as many workers as concurrency allows when the input exceeds the output'",
        "'subscriptionSpy'",
        "'shuts down workers when subscriber unsubscribes'",
        "'subscriptionSpy'",
        "'does not shut down workers when outstanding work remains'",
        "'subscriptionSpy'",
        "'message'",
        "'message'",
        "'with array input'",
        "'with iterator input'",
        "'output strategy'",
        "'[default] outputs results as they are available'",
        "'subscriptionSpy'",
        "'message'",
        "'message'",
        "'outputs results as specified by custom passed flattening operator'",
        "'subscriptionSpy'",
        "'subscriptionSpy'",
        "'message'",
        "'message'"
    ],
    "variables": [
        "stubbedWorkers",
        "workerFactorySpy",
        "stubWorkerIndex",
        "stubWorker",
        "input$",
        "stubbedWorkerStream",
        "subscriptionSpy",
        "sub",
        "subscriptionSpy",
        "sub",
        "i",
        "subscriptionSpy",
        "sub",
        "i",
        "i",
        "i",
        "subscriptionSpy",
        "sub",
        "i",
        "i",
        "stubWorker",
        "workerCount",
        "input",
        "testWorkerStream$",
        "subscriptionSpy",
        "sub",
        "i",
        "stubWorker",
        "workerCount",
        "input",
        "operatorSpy",
        "innerSubs",
        "outerSub",
        "testWorkerStream$",
        "subscriptionSpy",
        "sub",
        "i",
        "stubWorker"
    ],
    "comments": [
        "output each result in successively less time for each value",
        "output each result in successively less time for each value"
    ],
    "docstrings": [],
    "functions": [
        "customOperator"
    ],
    "classes": []
}