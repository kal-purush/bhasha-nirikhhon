{
    "identifiers": [
        "anyTest",
        "TestInterface",
        "startServer",
        "SettlementServer",
        "ConnectSettlementEngine",
        "sinon",
        "SinonSpy",
        "axios",
        "AxiosError",
        "SettlementStore",
        "v4",
        "uuid",
        "getPort",
        "anyTest",
        "test",
        "t",
        "sinon",
        "createAccountSpy",
        "sinon",
        "sinon",
        "engineStub",
        "setupSpy",
        "settleSpy",
        "getPort",
        "startServer",
        "engineStub",
        "store",
        "t",
        "test",
        "t",
        "t",
        "test",
        "t",
        "uuid",
        "axios",
        "t",
        "accountId",
        "t",
        "t",
        "accountId",
        "t",
        "t",
        "accountId",
        "t",
        "status",
        "test",
        "t",
        "axios",
        "t",
        "accountId",
        "t",
        "t",
        "t",
        "t",
        "t",
        "status",
        "test",
        "t",
        "t",
        "axios",
        "t",
        "t",
        "t",
        "t",
        "t",
        "t",
        "response",
        "test"
    ],
    "literals": [
        "'ava'",
        "'..'",
        "'sinon'",
        "'axios'",
        "'../store'",
        "'uuid'",
        "'get-port'",
        "'Server -> Create new account -> Sets up the account'",
        "http://localhost:${t.context.port}/accounts/${accountId}",
        "'Server -> Create new account -> Fails with duplicate account ID'",
        "'alice'",
        "http://localhost:${t.context.port}/accounts/${accountId}",
        "'Server -> Create new account -> Fails with invalid account ID'",
        "http://localhost:${t.context.port}/accounts/alice:foo:bar",
        "'Server -> Create new account -> Re-creates account after deletion'"
    ],
    "variables": [
        "test",
        "createAccountSpy",
        "store",
        "setupSpy",
        "settleSpy",
        "engineStub",
        "port",
        "server",
        "accountId",
        "accountId"
    ],
    "comments": [
        "import mockttp from 'mockttp'",
        "import { connectRedis } from '../store/redis'",
        "import Redis from 'ioredis'",
        "const RedisMock = require('ioredis-mock') // TODO Add types for this!",
        "const mockServer = mockttp.getLocal()",
        "const store = await connectRedis({",
        "client: new RedisMock() as Redis.Redis",
        "})",
        "TODO Create account *is* called, it just throws",
        "TODO Should this be under delete instead?",
        "test('Server -> Send settlement -> TODO', async t => {",
        "const accountId = uuid()",
        "await axios.put(`http://localhost:${t.context.port}/accounts/${accountId}`)",
        "const { data, status } = await axios.post(",
        "`http://localhost:${t.context.port}/accounts/${accountId}/settlements`,",
        "{}",
        ")",
        "// t.set",
        "})"
    ],
    "docstrings": [
        "* What integration tests do I want? (use mock settlement engine implementation)\n *\n * TODO The goal is to test the HTTP API, and *not* any internal SE implementation\n *\n * TODO (What about testing behavior based on that internal SE implementation? e.g., refunding failed settlements?) (How would that be tested?)\n *\n * Create new account\n * - Correct response code\n * - Calls \"setup\" spy on SE implementation (should this await?)\n * - Test with invalid account ID\n * - Try to create the same account (should fail?)\n * - Should succeed after creating, deleting, then creating the same account\n *\n * Perform a settlement (use mock SE implementation + spies)\n *\n * 200 + engine.settle *should be called*\n * - Reasonable quantity/amount/scale\n * - Reasonable quantity/amount with a 0 scale\n *\n * TODO Anything testing effects of an engine.settle return value/refunding failed is an entirely different test!\n *\n * TODO How to test atomicity/race conditions?"
    ],
    "functions": [],
    "classes": []
}