{
    "identifiers": [
        "d",
        "fs",
        "join",
        "parse",
        "relative",
        "promisify",
        "inquirer",
        "exit",
        "promisify",
        "fs",
        "promisify",
        "fs",
        "config",
        "d",
        "flags",
        "d",
        "config",
        "config",
        "exit",
        "parse",
        "config",
        "config",
        "flags",
        "arg",
        "arg",
        "inquirer",
        "parse",
        "input",
        "componentName",
        "config",
        "exit",
        "chooseFilesToGenerate",
        "join",
        "baseDir",
        "srcDir",
        "dir",
        "componentName",
        "mkdir",
        "outDir",
        "extensionsToGenerate",
        "extension",
        "writeFileByExtension",
        "outDir",
        "componentName",
        "extension",
        "extensionsToGenerate",
        "error",
        "config",
        "error",
        "writtenFiles",
        "exit",
        "config",
        "config",
        "config",
        "input",
        "config",
        "config",
        "writtenFiles",
        "file",
        "config",
        "relative",
        "baseDir",
        "file",
        "chooseFilesToGenerate",
        "inquirer",
        "writeFileByExtension",
        "path",
        "name",
        "extension",
        "withCss",
        "join",
        "path",
        "name",
        "extension",
        "getBoilerplateByExtension",
        "name",
        "extension",
        "withCss",
        "writeFile",
        "outFile",
        "boilerplate",
        "outFile",
        "getBoilerplateByExtension",
        "name",
        "extension",
        "withCss",
        "extension",
        "getComponentBoilerplate",
        "name",
        "withCss",
        "getSpecTestBoilerplate",
        "name",
        "getE2eTestBoilerplate",
        "name",
        "getComponentBoilerplate",
        "name",
        "style",
        "name",
        "style",
        "name",
        "toPascalCase",
        "name",
        "getSpecTestBoilerplate",
        "name",
        "toPascalCase",
        "name",
        "name",
        "name",
        "toPascalCase",
        "name",
        "getE2eTestBoilerplate",
        "name",
        "name",
        "name",
        "name",
        "name",
        "toPascalCase",
        "res",
        "part",
        "res",
        "part",
        "part"
    ],
    "literals": [
        "'../declarations'",
        "'fs'",
        "'path'",
        "'util'",
        "'inquirer'",
        "'exit'",
        "'Please run this command in your root directory (i. e. the one containing stencil.config.ts).'",
        "'src'",
        "'-'",
        "'name'",
        "'Component name (dash-case):'",
        "'-'",
        "'The name needs to be in dash case.'",
        "'tsx'",
        "'components'",
        "'css'",
        "${config.logger.gray('$')} stencil generate ${input}",
        "'$'",
        "'The following files have been generated:'",
        "- ${relative(baseDir, file)}",
        "'filesToGenerate'",
        "'checkbox'",
        "'Which additional files do you want to generate?'",
        "'css'",
        "'Stylesheet'",
        "'spec.ts'",
        "'Spec Test'",
        "'e2e.ts'",
        "'E2E Test'",
        "string",
        "string",
        "${name}.${extension}",
        "'wx'",
        "string",
        "'tsx'",
        "'css'",
        "''",
        "'spec.ts'",
        "'e2e.ts'",
        "string",
        "import { h, Component, Host } from '@stencil/core';\n\n@Component({ tag: '${name}'${style ? `, styleUrl: '${name}.css'` : ''}, shadow: true })\nexport class ${toPascalCase(name)} {\n\trender() {\n\t\treturn (\n\t\t\t<Host>\n\t\t\t\t<slot></slot>\n\t\t\t</Host>\n\t\t);\n\t}\n}",
        ", styleUrl: '${name}.css'",
        "''",
        "string",
        "import { ${toPascalCase(name)} } from './${name}';\n\ndescribe('${name}', () => {\n  it('builds', () => {\n    expect(new ${toPascalCase(name)}()).toBeTruthy();\n  });\n});",
        "string",
        "import { newE2EPage } from '@stencil/core/testing';\n\ndescribe('${name}', () => {\n  it('renders', async () => {\n    const page = await newE2EPage();\n    await page.setContent('<${name}></${name}>');\n\n    const element = await page.find('${name}');\n    expect(element).toHaveClass('hydrated');\n  });\n});",
        "string",
        "'-'",
        "''",
        "'tsx'",
        "'css'",
        "'spec.ts'",
        "'e2e.ts'"
    ],
    "variables": [
        "writeFile",
        "mkdir",
        "baseDir",
        "srcDir",
        "input",
        "componentName",
        "extensionsToGenerate",
        "outDir",
        "writtenFiles",
        "chooseFilesToGenerate",
        "writeFileByExtension",
        "outFile",
        "boilerplate",
        "getBoilerplateByExtension",
        "getComponentBoilerplate",
        "getSpecTestBoilerplate",
        "getE2eTestBoilerplate",
        "toPascalCase"
    ],
    "comments": [],
    "docstrings": [
        "* Task to generate component boilerplate.",
        "* Show a checkbox prompt to select the files to be generated.",
        "* Get a file's boilerplate by its extension and write it to disk.",
        "* Get the boilerplate for a file by its extension.",
        "* Get the boilerplate for a component.",
        "* Get the boilerplate for a spec test.",
        "* Get the boilerplate for an E2E test.",
        "* Convert a dash case string to pascal case.",
        "* Extensions available to generate."
    ],
    "functions": [
        "taskGenerate"
    ],
    "classes": []
}