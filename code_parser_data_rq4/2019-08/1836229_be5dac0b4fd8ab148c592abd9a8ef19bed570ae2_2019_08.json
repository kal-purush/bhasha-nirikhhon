{
    "identifiers": [
        "re",
        "chars",
        "ENGLISH_REGEX_MAP",
        "get",
        "chars",
        "minimum",
        "maximum",
        "re",
        "compile",
        "minimum",
        "maximum",
        "minimum",
        "maximum",
        "chars",
        "re",
        "compile",
        "join",
        "chars",
        "join",
        "regex_chars_to_text",
        "chars",
        "chars",
        "re",
        "compile",
        "join",
        "chars",
        "join",
        "regex_chars_to_text",
        "chars",
        "classmethod",
        "cls",
        "cls",
        "__doc__",
        "cls",
        "__doc__",
        "cls",
        "__doc__",
        "join",
        "message",
        "regex",
        "message",
        "cls",
        "RULES",
        "classmethod",
        "cls",
        "rule",
        "message",
        "cls",
        "RULES",
        "rule",
        "match",
        "message",
        "UnicodeRuleChecker",
        "length",
        "not_starts_with",
        "allowed_characters"
    ],
    "literals": [
        "r'\\w'",
        "'alphanumeric'",
        "r'\\-'",
        "'-'",
        "r'\\.'",
        "'.'",
        "r'\\/'",
        "'/'",
        "r\"\"\"Return a string representing a regex component.\n\n    Examples:\n        >>> regex_chars_to_text(['a', 'b', 'c'])\n        ['a', 'b', 'c']\n        >>> regex_chars_to_text([r'\\-', r'\\.', r'\\/'])\n        ['-', '.', '/']\n        >>> regex_chars_to_text([r'\\w'])\n        ['alphanumeric']\n\n    \"\"\"",
        "r'^.{%d,%d}$'",
        "f'must be between {minimum} and {maximum} characters long'",
        "r'^[%s]+$'",
        "''",
        "f'can only contain: {\", \".join(regex_chars_to_text(chars))}'",
        "\", \"",
        "r'^[^%s]'",
        "''",
        "f'can not start with: {\", \".join(regex_chars_to_text(chars))}'",
        "\", \"",
        "'\\n'",
        "''",
        "'\\n'",
        "'\\n'",
        "f'* {message}'",
        "r'\\.'",
        "r'\\-'",
        "r'\\w'",
        "r'\\/'",
        "'_'",
        "'+'",
        "r'\\-'",
        "r'\\.'",
        "'@'"
    ],
    "variables": [
        "ENGLISH_REGEX_MAP",
        "RULES",
        "cls",
        "__doc__",
        "RULES"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"Module for unicode restrictions\"\"\"",
        "\"\"\"Restrict character length.\n\n    Example:\n        >>> regex, message = length(0, 5)\n        >>> message\n        'must be between 0 and 5 characters long'\n        >>> bool(regex.match('abcde'))\n        True\n        >>> bool(regex.match('abcdef'))\n        False\n\n    \"\"\"",
        "\"\"\"Restrict permitted characters.\n\n    Example:\n        >>> regex, message = allowed_characters('a', 'b', 'c')\n        >>> message\n        'can only contain: a, b, c'\n        >>> bool(regex.match('abc'))\n        True\n        >>> bool(regex.match('def'))\n        False\n\n    \"\"\"",
        "\"\"\"Restrict first character.\n\n    Example:\n        >>> regex, message = not_starts_with('a', 'b', 'c')\n        >>> message\n        'can not start with: a, b, c'\n        >>> bool(regex.match('def'))\n        True\n        >>> bool(regex.match('adef'))\n        False\n\n    \"\"\"",
        "\"\"\"Run this collection of rules against the given string.\n\n        Args:\n            string (str):\n                String to validate.\n\n        Returns:\n            tuple - (outcome, message)\n            outcome (bool) - True if all patterns match.\n            message (str) - User-friendly error message.\n\n        \"\"\"",
        "\"\"\"The rules for valid suite names:\"\"\""
    ],
    "functions": [
        "regex_chars_to_text",
        "length",
        "allowed_characters",
        "not_starts_with",
        "__init_subclass__",
        "validate"
    ],
    "classes": [
        "UnicodeRuleChecker",
        "SuiteNameValidator"
    ]
}