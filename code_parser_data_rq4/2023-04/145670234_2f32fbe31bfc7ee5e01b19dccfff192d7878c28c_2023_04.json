{
    "identifiers": [
        "backend_args",
        "backend_args",
        "with_bbox",
        "scale",
        "keep_ratio",
        "prob",
        "backend_args",
        "backend_args",
        "scale",
        "keep_ratio",
        "with_bbox",
        "meta_keys",
        "batch_size",
        "num_workers",
        "persistent_workers",
        "sampler",
        "shuffle",
        "batch_sampler",
        "dataset",
        "dataset_type",
        "data_root",
        "data_root",
        "ann_file",
        "train_ann",
        "filter_cfg",
        "filter_empty_gt",
        "min_size",
        "bbox_min_size",
        "pipeline",
        "train_pipeline",
        "batch_size",
        "num_workers",
        "persistent_workers",
        "drop_last",
        "sampler",
        "shuffle",
        "dataset",
        "dataset_type",
        "data_root",
        "data_root",
        "ann_file",
        "val_ann",
        "test_mode",
        "pipeline",
        "test_pipeline",
        "val_dataloader",
        "metric",
        "val_evaluator"
    ],
    "literals": [
        "'DSDLDetDataset'",
        "'path to dataset folder'",
        "'path to train yaml file'",
        "'path to val yaml file'",
        "'LoadImageFromFile'",
        "'LoadAnnotations'",
        "'Resize'",
        "'RandomFlip'",
        "'PackDetInputs'",
        "'LoadImageFromFile'",
        "'Resize'",
        "'LoadAnnotations'",
        "'PackDetInputs'",
        "'img_id'",
        "'img_path'",
        "'ori_shape'",
        "'img_shape'",
        "'scale_factor'",
        "'instances'",
        "'DefaultSampler'",
        "'AspectRatioBatchSampler'",
        "'DefaultSampler'",
        "'CocoMetric'",
        "'bbox'"
    ],
    "variables": [
        "dataset_type",
        "data_root",
        "train_ann",
        "val_ann",
        "backend_args",
        "train_pipeline",
        "test_pipeline",
        "train_dataloader",
        "val_dataloader",
        "test_dataloader",
        "val_evaluator",
        "test_evaluator"
    ],
    "comments": [
        "backend_args = dict(",
        "backend='petrel',",
        "path_mapping=dict({",
        "'./data/': \"s3://open_data/\",",
        "'data/': \"s3://open_data/\"",
        "}))",
        "If you don't have a gt annotation, delete the pipeline",
        "val_evaluator = dict(type='VOCMetric', metric='mAP', eval_mode='11points')"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}