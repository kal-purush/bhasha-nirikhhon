{
    "identifiers": [
        "pandas",
        "pd",
        "forex_python",
        "converter",
        "CurrencyRates",
        "RatesNotAvailableError",
        "matplotlib",
        "pyplot",
        "plt",
        "csv",
        "json",
        "config_file_path",
        "open",
        "config_file_path",
        "fp",
        "json",
        "load",
        "fp",
        "config",
        "data",
        "pd",
        "DataFrame",
        "genre",
        "n_percentile",
        "topN",
        "data",
        "contains",
        "genre",
        "condition",
        "fillna",
        "data",
        "condition",
        "genre_data",
        "genre_data",
        "condition",
        "genre_data",
        "describe",
        "percentiles",
        "n_percentile",
        "n_percentile",
        "topN",
        "metascore_desc",
        "format",
        "n_percentile",
        "genre_data",
        "genre_data",
        "top_n",
        "top_n_movies",
        "metascore_desc",
        "format",
        "n_percentile",
        "genre_data",
        "genre_data",
        "bottom_n",
        "bottom_n_movies",
        "data",
        "pd",
        "DataFrame",
        "genre",
        "n_percentile",
        "topN",
        "data",
        "contains",
        "genre",
        "condition",
        "fillna",
        "data",
        "condition",
        "genre_data",
        "genre_data",
        "condition",
        "genre_data",
        "describe",
        "percentiles",
        "n_percentile",
        "n_percentile",
        "topN",
        "imdb_desc",
        "format",
        "n_percentile",
        "genre_data",
        "genre_data",
        "top_n",
        "top_n_movies",
        "imdb_desc",
        "format",
        "n_percentile",
        "genre_data",
        "genre_data",
        "bottom_n",
        "bottom_n_movies",
        "data",
        "pd",
        "DataFrame",
        "year",
        "data",
        "movies_awards",
        "fillna",
        "movies_awards",
        "condition",
        "movies_awards",
        "contains",
        "pattern",
        "format",
        "year",
        "movies_awards",
        "condition_oscar_movies",
        "oscar_movies",
        "row",
        "row",
        "row",
        "CurrencyRates",
        "convert",
        "row",
        "row",
        "RatesNotAvailableError",
        "data",
        "pd",
        "DataFrame",
        "limit_n",
        "topN",
        "data",
        "movie_budget",
        "fillna",
        "movie_budget",
        "condition",
        "movie_budget",
        "replace",
        "regex",
        "movie_budget",
        "replace",
        "regex",
        "movie_budget",
        "extract",
        "movie_budget",
        "replace",
        "astype",
        "movie_budget",
        "apply",
        "convert_currency",
        "axis",
        "topN",
        "movie_budget",
        "sort_values",
        "axis",
        "ascending",
        "inplace",
        "kind",
        "na_position",
        "movies_budget_sort_ascending",
        "head",
        "limit_n",
        "movie_budget",
        "sort_values",
        "axis",
        "ascending",
        "inplace",
        "kind",
        "na_position",
        "movies_budget_sort_descending",
        "head",
        "limit_n",
        "data",
        "pd",
        "DataFrame",
        "data",
        "copy",
        "movie_year_country",
        "drop",
        "movie_year_country",
        "index",
        "movie_year_country",
        "inplace",
        "axis",
        "movie_year_country",
        "strip",
        "split",
        "movie_year_country",
        "explode",
        "movie_year_country",
        "groupby",
        "count",
        "reset_index",
        "country_group_by_mcount",
        "loc",
        "country_group_by_mcount",
        "groupby",
        "idxmax",
        "data",
        "pd",
        "DataFrame",
        "data",
        "copy",
        "imdb_rating_awards",
        "drop",
        "imdb_rating_awards",
        "index",
        "imdb_rating_awards",
        "inplace",
        "axis",
        "imdb_rating_awards",
        "dropna",
        "imdb_rating_awards",
        "split",
        "imdb_rating_awards",
        "awards",
        "len",
        "plt",
        "scatter",
        "imdb_rating_awards",
        "imdb_rating_awards",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "title",
        "plt",
        "savefig",
        "data",
        "pd",
        "DataFrame",
        "movie",
        "region",
        "data",
        "data",
        "movie",
        "values",
        "akas_of_movie",
        "find",
        "start_index_string",
        "index1",
        "akas_of_movie",
        "index2",
        "index1",
        "strip",
        "akas_of_movie",
        "find",
        "start_index_string",
        "akas_of_movie",
        "index1",
        "index2",
        "split",
        "strip",
        "region",
        "dict_akas_region",
        "dict_akas_region",
        "region",
        "append",
        "akas_region",
        "akas_region",
        "index2",
        "index2",
        "dict_akas_region",
        "data",
        "pd",
        "DataFrame",
        "year",
        "flag",
        "data",
        "movies_year",
        "drop",
        "movies_year",
        "index",
        "movies_year",
        "inplace",
        "axis",
        "movies_year",
        "sort_values",
        "flag",
        "movies_year",
        "loc",
        "movies_year",
        "year",
        "tolist",
        "flag",
        "movies_year",
        "loc",
        "movies_year",
        "year",
        "tolist",
        "flag",
        "movies_year",
        "loc",
        "movies_year",
        "year",
        "tolist",
        "data",
        "pd",
        "DataFrame",
        "data",
        "copy",
        "movies_awards_directors",
        "dropna",
        "inplace",
        "movies_awards_directors",
        "contains",
        "pattern",
        "movies_awards_directors",
        "condition_oscar_movies",
        "oscar_movies",
        "split",
        "oscar_movies",
        "explode",
        "oscar_movies",
        "groupby",
        "count",
        "reset_index",
        "oscar_movies",
        "loc",
        "oscar_movies",
        "idxmax",
        "func",
        "filename",
        "args",
        "func",
        "args",
        "isinstance",
        "output",
        "open",
        "filename",
        "newline",
        "csvfile",
        "csv",
        "writer",
        "csvfile",
        "writer",
        "writerow",
        "output",
        "isinstance",
        "output",
        "open",
        "filename",
        "newline",
        "csvfile",
        "csv",
        "DictWriter",
        "csvfile",
        "fieldnames",
        "output",
        "keys",
        "writer",
        "writeheader",
        "writer",
        "writerow",
        "output",
        "isinstance",
        "output",
        "pd",
        "Series",
        "output",
        "to_csv",
        "filename",
        "header",
        "index",
        "isinstance",
        "output",
        "pd",
        "DataFrame",
        "output",
        "to_csv",
        "filename",
        "index",
        "ValueError",
        "ValueError",
        "err",
        "err",
        "wrapper",
        "func",
        "filename",
        "args",
        "func",
        "args",
        "isinstance",
        "output",
        "open",
        "filename",
        "jsonfile",
        "json",
        "dump",
        "output",
        "jsonfile",
        "isinstance",
        "output",
        "json",
        "dumps",
        "output",
        "indent",
        "open",
        "filename",
        "jsonfile",
        "jsonfile",
        "write",
        "json_object",
        "ValueError",
        "func",
        "filename",
        "args",
        "func",
        "args",
        "isinstance",
        "output",
        "open",
        "filename",
        "jsonfile",
        "json",
        "dump",
        "output",
        "jsonfile",
        "isinstance",
        "output",
        "json",
        "dumps",
        "output",
        "indent",
        "open",
        "filename",
        "jsonfile",
        "jsonfile",
        "write",
        "json_object",
        "ValueError",
        "ValueError",
        "err",
        "err",
        "wrapper",
        "get_config",
        "config",
        "pd",
        "read_csv",
        "data_file",
        "config",
        "config",
        "config",
        "config",
        "config",
        "config",
        "config",
        "get_movies_by_metascore",
        "data",
        "genre",
        "percentile",
        "format",
        "genre",
        "task_1_metascore",
        "get_movies_by_imdb",
        "data",
        "genre",
        "percentile",
        "format",
        "genre",
        "task_1_imdb",
        "get_oscar_movies",
        "data",
        "year",
        "format",
        "year",
        "task_2",
        "get_movies_by_budget",
        "data",
        "topN",
        "task_3",
        "highest_no_movies_by_year",
        "data",
        "task_4",
        "download_plot_rating_vs_awards",
        "data",
        "get_akas_by_movie_region",
        "data",
        "movie",
        "region",
        "region",
        "format",
        "movie",
        "region",
        "task_6",
        "get_movies_by_year",
        "data",
        "year",
        "flag",
        "format",
        "year",
        "task_7",
        "top_director",
        "data",
        "task_8",
        "write_output_to_csv",
        "get_movies_by_metascore",
        "task_1_write_output_to_csv",
        "data",
        "genre",
        "percentile",
        "write_output_to_csv",
        "get_oscar_movies",
        "task_2_write_output_to_csv",
        "data",
        "year",
        "write_output_to_csv",
        "get_movies_by_budget",
        "task_3_write_output_to_csv",
        "data",
        "topN",
        "write_output_to_csv",
        "highest_no_movies_by_year",
        "task_4_write_output_to_csv",
        "data",
        "write_output_to_json",
        "get_akas_by_movie_region",
        "task_6_write_output_to_csv",
        "data",
        "movie",
        "region",
        "write_output_to_json",
        "get_movies_by_year",
        "task_7_write_output_to_csv",
        "data",
        "year",
        "flag",
        "write_output_to_csv",
        "top_director",
        "task_8_write_output_to_csv",
        "data",
        "main"
    ],
    "literals": [
        "\"r\"",
        "'genres'",
        "'title'",
        "'metascore'",
        "'genres'",
        "'metascore'",
        "'metascore'",
        "'{}%'",
        "'metascore'",
        "'metascore'",
        "'{}%'",
        "'metascore'",
        "'genres'",
        "'title'",
        "'imdb user rating'",
        "'genres'",
        "'imdb user rating'",
        "'imdb user rating'",
        "'{}%'",
        "'imdb user rating'",
        "'imdb user rating'",
        "'{}%'",
        "'imdb user rating'",
        "'title'",
        "'awards'",
        "'awards'",
        "'False'",
        "'False'",
        "\"Oscar {}\"",
        "'awards'",
        "'title'",
        "'currency'",
        "'USD'",
        "'budget_value'",
        "'currency'",
        "\"USD\"",
        "'budget_value'",
        "'title'",
        "'budget'",
        "'budget'",
        "'False'",
        "'False'",
        "'budget'",
        "'budget'",
        "\"$\"",
        "\"USD\"",
        "'budget'",
        "'budget'",
        "r\"\\(estimated\\)\"",
        "\"\"",
        "'currency'",
        "'budget_value'",
        "'budget'",
        "r'^(\\D+)(\\d[\\d,\\.]*)'",
        "'budget_value'",
        "'budget_value'",
        "','",
        "''",
        "'budget_value'",
        "'budget_value'",
        "'quicksort'",
        "'last'",
        "'title'",
        "'budget_value'",
        "'quicksort'",
        "'last'",
        "'title'",
        "'imdbid'",
        "'year'",
        "'countries'",
        "'year'",
        "'countries'",
        "'countries'",
        "'()'",
        "','",
        "'countries'",
        "'year'",
        "'countries'",
        "'imdbid'",
        "'year'",
        "'imdbid'",
        "'imdb user rating'",
        "'awards'",
        "'imdb user rating'",
        "'awards'",
        "'awards'",
        "','",
        "'count'",
        "'imdb user rating'",
        "'count'",
        "'IMDB User Rating'",
        "'Awards Count'",
        "'Relationship between IMDB User Rating and Awards Count'",
        "\"plot rating vs awards.png\"",
        "'title'",
        "'akas'",
        "\"(\"",
        "\")\"",
        "','",
        "'title'",
        "'year'",
        "'year'",
        "'year'",
        "'year'",
        "'title'",
        "'year'",
        "'title'",
        "'year'",
        "'title'",
        "\"Invalid flag number\"",
        "'title'",
        "'awards'",
        "'directors'",
        "\"Oscar\"",
        "'awards'",
        "'directors'",
        "'directors'",
        "','",
        "'directors'",
        "'directors'",
        "'title'",
        "'title'",
        "'w'",
        "''",
        "'w'",
        "''",
        "\"Output is not in a format that can be written to a CSV file.\"",
        "'w'",
        "'w'",
        "'w'",
        "'w'",
        "\"analysis of movies database config file.json\"",
        "\"data_file\"",
        "\"genre\"",
        "\"percentile\"",
        "\"year\"",
        "\"topN\"",
        "\"movie\"",
        "\"region\"",
        "\"flag\"",
        "\"Top n movies by metascore for genre {}\"",
        "\"==========================================================================================================\"",
        "\"Top n movies by imdb user ration for genre {}\"",
        "\"==========================================================================================================\"",
        "\"Oscar winning movies for year {}\"",
        "\"==========================================================================================================\"",
        "\"Top highest budget movies\"",
        "\"==========================================================================================================\"",
        "\"Countries having highest numver of movies release in each year\"",
        "\"==========================================================================================================\"",
        "\"Download plot for the imdb user rating and number of awards\"",
        "\"asak for movie {}, region {} is \"",
        "\"==========================================================================================================\"",
        "\"Movies released on year {}\"",
        "\"==========================================================================================================\"",
        "\"Top directors\"",
        "\"==========================================================================================================\"",
        "'Task 1 metascore.csv'",
        "'Task 2.csv'",
        "'Task 3.csv'",
        "'Task 4.csv'",
        "'Task 6.json'",
        "'Task 7.json'",
        "'Task 8.csv'",
        "'__main__'"
    ],
    "variables": [
        "config",
        "condition",
        "condition",
        "genre_data",
        "condition",
        "genre_data",
        "metascore_desc",
        "top_n",
        "top_n_movies",
        "bottom_n",
        "bottom_n_movies",
        "condition",
        "condition",
        "genre_data",
        "condition",
        "genre_data",
        "imdb_desc",
        "top_n",
        "top_n_movies",
        "bottom_n",
        "bottom_n_movies",
        "movies_awards",
        "condition",
        "movies_awards",
        "pattern",
        "condition_oscar_movies",
        "oscar_movies",
        "movie_budget",
        "condition",
        "movie_budget",
        "movie_budget",
        "movie_budget",
        "movie_budget",
        "movie_budget",
        "movie_budget",
        "movies_budget_sort_ascending",
        "movies_budget_sort_descending",
        "movie_year_country",
        "movie_year_country",
        "movie_year_country",
        "country_group_by_mcount",
        "imdb_rating_awards",
        "imdb_rating_awards",
        "imdb_rating_awards",
        "imdb_rating_awards",
        "akas_of_movie",
        "dict_akas_region",
        "index2",
        "start_index_string",
        "index1",
        "akas_region",
        "index2",
        "region",
        "dict_akas_region",
        "region",
        "start_index_string",
        "index2",
        "movies_year",
        "movies_year",
        "movies_awards_directors",
        "pattern",
        "condition_oscar_movies",
        "oscar_movies",
        "oscar_movies",
        "oscar_movies",
        "oscar_movies",
        "output",
        "writer",
        "writer",
        "output",
        "json_object",
        "output",
        "json_object",
        "config",
        "data_file",
        "data",
        "genre",
        "percentile",
        "year",
        "topN",
        "movie",
        "region",
        "flag",
        "task_1_metascore",
        "task_1_imdb",
        "task_2",
        "task_3",
        "task_4",
        "task_6",
        "task_7",
        "task_8",
        "task_1_write_output_to_csv",
        "task_2_write_output_to_csv",
        "task_3_write_output_to_csv",
        "task_4_write_output_to_csv",
        "task_6_write_output_to_csv",
        "task_7_write_output_to_csv",
        "task_8_write_output_to_csv"
    ],
    "comments": [
        "i = 0",
        "i = i + 1",
        "Call the input function with the given arguments",
        "Call the input function with the given arguments",
        "Call the input function with the given arguments",
        "t1",
        "wrap the original function with the wrapper function",
        "call the wrapped function",
        "t2",
        "t3",
        "t4",
        "t6",
        "t7",
        "t8"
    ],
    "docstrings": [
        "\"\"\"\n    Read config file and return config dictionary\n\n    parameters\n    ----------\n    config_file_path: json confuguration file path\n    \n    return\n    ----------\n    config\n    \"\"\"",
        "\"\"\"\n    Read data file to get movies by percentile of metascore for specific genre.\n    By deafault it returns top n movies otherwise it returns bottom n movies.\n    \n    parameters\n    ----------\n    data: pd.DataFrame \n    genre: str        \n    n_percentile: int\n    topN : Boolean (Default is True)\n    \n    returns\n    ----------\n    DataFrame\n    \n    \"\"\"",
        "\"\"\"\n    Read data file to get movies by percentile of metascore for specific genre.\n    By deafault it returns top n movies otherwise it returns bottom n movies.\n    \n    parameters\n    ----------\n    data: pd.DataFrame \n    genre: str        \n    n_percentile: int\n    topN : Boolean (Default is True)\n    \n    returns\n    ----------\n    DataFrame\n    \"\"\"",
        "\"\"\"\n    Read data file which returns oscar winning movies for specific year\n    \n    parameters\n    ----------\n    data: pd.DataFrame \n    year: int\n        \n    returns\n    ----------\n    Series\n    \n    \"\"\"",
        "\"\"\"\n    Read each row of data frame and return currency value in provided currency rate\n\n    \"\"\"",
        "\"\"\"\n    Read data file to get movies having highest or lowest budget in USD.\n    By default it returns highest budget movies. Otherwise if topN if False it\n    returns lowest budget movies\n    \n    parameters\n    ----------\n    data: pd.DataFrame \n    limit_n: int\n    topN: Booloean (Default is True)\n    \n    returns\n    ----------\n    series \n    \"\"\"",
        "\"\"\"\n    Read data file to get countries which have highest number of movies release in each year\n    \n    parameters\n    ----------\n    data: pd.DataFrame \n    \n    returns\n    ----------\n    DataFrame\n    \"\"\"",
        "\"\"\"\n    Read data file to dowanload plot of the imdb user rating vs number of awards received of movies\n    \n    parameters\n    ----------\n    data: pd.DataFrame \n    \n    \"\"\"",
        "\"\"\"\n    Read data file to get akas of a specified movie in a specified region\n    \n    parameters\n    ----------\n    data: pd.DataFrame \n    movie: str\n    region: str\n    \n    returns\n    ----------\n    Dictionary\n    \"\"\"",
        "\"\"\"\n    Read data file which returns movies in specific year if flag is 0,\n    movies after year if flag is 1 and movies before year if glag is -1.\n    \n    parameters\n    ----------\n    data: pd.DataFrame \n    year: int\n    flag: int (Default is 0)\n    \n    returns\n    ----------\n    list\n    \"\"\"",
        "\"\"\"\n    Read data file to get director who have directed most number of oscar winning movies\n    \n    parameters\n    ----------\n    data: pd.DataFrame \n    \n    returns\n    ----------\n    Series\n    \"\"\"",
        "\"\"\"\n    Takes a function, and a filename as inputs and writes the output of input function\n    to given  csv file.\n    \"\"\"",
        "\"\"\" \nOutput is not in a format that can be written to a json file. \nNote: for output of type dataframe or series use \nwrite_output_to_csv instead.\n                         \"\"\"",
        "\"\"\"\n    Takes a function, and a filename as inputs and writes the output of input function\n    to given  json file.\n    \"\"\"",
        "\"\"\" \n        Output is not in a format that can be written to a json file. \n        Note: for output of type dataframe or series use \n        write_output_to_csv instead.\n                                 \"\"\"",
        "\"\"\"\n    The output of 1 to 8 tasks is stored into either csv or json file.\n    This way task 9 is implemented\n    All csv or json files and plot are stored in current directort \n    Returns\n    -------\n    None.\n\n    \"\"\"",
        "\"\"\" Task 1:  Group movies by genres\n    a. Top/bottom n percentile movies according to metascore, where, ‘n’ should be a\n        parameter passed to your function. For example, if n is 10, then you will be\n        expected to find the movies above 90 percentile (top) and below 10 percentile\n        (bottom) for each genre.\n    b. Top/bottom n percentile movies according to ‘number of imdb user votes’\n    \"\"\"",
        "\"\"\" Task 2 : Movies who have won an Oscar in a particular year. For example, get the year \n    as a parameter to your function and return all the movies that won an Oscar in that year\n    \"\"\"",
        "\"\"\"Task 3: Analyze and return n movies with highest/lowest budget  \n    \"\"\"",
        "\"\"\"Task 4: Which countries have highest number of movies release in each year\n    \"\"\"",
        "\"\"\"Task 5: Analyze if there is any relationship between the imdb user rating and number of awards\n    received \n    \"\"\"",
        "\"\"\"Task 6: Return akas of a specified movie in a specified region\n    \"\"\"",
        "\"\"\" Task 7: Movies released on, before or after a given year (take year as a parameter)\n    \"\"\"",
        "\"\"\"Task 8: Which director has made directed most number of oscar winning movies\n    \"\"\"",
        "\"\"\"Task 9 \"\"\""
    ],
    "functions": [
        "get_config",
        "get_movies_by_metascore",
        "get_movies_by_imdb",
        "get_oscar_movies",
        "convert_currency",
        "get_movies_by_budget",
        "highest_no_movies_by_year",
        "download_plot_rating_vs_awards",
        "get_akas_by_movie_region",
        "get_movies_by_year",
        "top_director",
        "write_output_to_csv",
        "wrapper",
        "write_output_to_json",
        "write_output_to_json",
        "wrapper",
        "main"
    ],
    "classes": []
}