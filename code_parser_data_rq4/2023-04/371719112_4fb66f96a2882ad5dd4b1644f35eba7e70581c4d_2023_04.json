{
    "identifiers": [
        "Either",
        "left",
        "right",
        "dirname",
        "readFileSync",
        "posix",
        "lf",
        "stempath",
        "importPath",
        "lookupPath",
        "lookupPath",
        "fileSourceResolver",
        "replacer",
        "path",
        "path",
        "path",
        "basepath",
        "importPath",
        "posix",
        "basepath",
        "importPath",
        "replacer",
        "posix",
        "basepath",
        "importPath",
        "lookupPath",
        "right",
        "lf",
        "readFileSync",
        "lookupPath",
        "err",
        "left",
        "err",
        "lookupPath",
        "dirname",
        "lookupPath",
        "stringSourceResolver",
        "sources",
        "stempath",
        "importPath",
        "posix",
        "stempath",
        "importPath",
        "posix",
        "stempath",
        "importPath",
        "lookupPath",
        "sources",
        "lookupPath",
        "contents",
        "right",
        "contents",
        "left",
        "lookupPath",
        "lookupPath",
        "dirname",
        "lookupPath"
    ],
    "literals": [
        "'@sweet-monads/either'",
        "'path'",
        "'fs'",
        "'path'",
        "'eol'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'utf8'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "Source not found: '${lookupPath.normalizedPath}'",
        "string"
    ],
    "variables": [
        "fileSourceResolver",
        "stringSourceResolver",
        "contents"
    ],
    "comments": [
        "----------------------------------------------------------------------------------\n * Copyright (c) Informal Systems 2023. All rights reserved.\n * Licensed under the Apache 2.0.\n * See License.txt in the project root for license information.\n * ---------------------------------------------------------------------------------",
        "We are using nodejs path.join here.",
        "If we have to decouple this resolver from nodejs in the future,",
        "we would have to write our own version of join."
    ],
    "docstrings": [
        "* Source resolution for Quint. This module deals with loading sources from strings\n * and files.\n *\n * @author Igor Konnov\n *\n * @module",
        "* An abstraction of a full path that is used to distinguish the same module,\n * when it is resolved via different paths. Note that this path may be\n * system-dependent and resolver dependent.",
        "* An internal representation of a path, which may be system-dependent.\n   * The important property is that this path is normalized, that is,\n   * when the same module is referred via different paths, we should still\n   * arrive at the same internal path representation.",
        "* Produce the source name that will be shown in errors and stored in source maps.\n   * This name must be platform-independent, and it must be the same across\n   * different platforms (e.g., Linux and Windows)\n   * @returns a string representation of the path that is written in source maps",
        "* A general interface for resolving sources.",
        "* Generate a source lookup path from a (system-dependent) basepath and\n   * the part that is used in the 'from' clause of imports.\n\n   * @param stempath a resolver-dependent and system dependent stem path\n   * @param importPath a path that is used in 'import ... from ...'\n   * @returns normalized source lookup path",
        "* Load text from the source pointed by the path. The path must be relative to the\n   * basepath.\n   * \n   * @param lookupPath a source lookup path created via `mkLookupPath`.\n   * @returns either `left(errorMessage)` if the source cannot be loaded, or `right(text)`.",
        "* Extract the resolver-specific stem from a path, e.g., the directory name\n   * if path is a path in a filesystem.\n   *\n   * @param lookupPath a source lookup path created via `mkLookupPath`.\n   * @returns the stem of a path, e.g., the parent directory",
        "* Read the source code in UTF-8 from the filesystem via NodeJS API.\n * @param replacer an optional path replacement function,\n *        which is used to produce a source name\n * @returns A filesystem resolver. For each path, it returns\n *          either `left(errorMessage)`, or `right(fileContents)`.",
        "* Read the source code from a map of strings. This resolver is especially\n * useful for tests.\n * @param sources a map of paths mapped to text\n * @returns a static resolver that uses the map to read the contents."
    ],
    "functions": [],
    "classes": []
}