{
    "identifiers": [
        "org",
        "openrewrite",
        "kotlin",
        "lombok",
        "EqualsAndHashCode",
        "lombok",
        "Value",
        "org",
        "openrewrite",
        "ExecutionContext",
        "org",
        "openrewrite",
        "Option",
        "org",
        "openrewrite",
        "Recipe",
        "org",
        "openrewrite",
        "TreeVisitor",
        "org",
        "openrewrite",
        "java",
        "RenameVariable",
        "org",
        "openrewrite",
        "java",
        "VariableNameUtils",
        "org",
        "openrewrite",
        "java",
        "tree",
        "J",
        "org",
        "openrewrite",
        "java",
        "tree",
        "TypeUtils",
        "org",
        "openrewrite",
        "kotlin",
        "marker",
        "Modifier",
        "org",
        "openrewrite",
        "kotlin",
        "tree",
        "K",
        "java",
        "util",
        "Value",
        "EqualsAndHashCode",
        "callSuper",
        "Option",
        "displayName",
        "description",
        "example",
        "aliasName",
        "Option",
        "displayName",
        "description",
        "example",
        "newName",
        "Option",
        "displayName",
        "description",
        "example",
        "fullyQualifiedAliasedType",
        "Override",
        "Override",
        "Override",
        "Override",
        "cu",
        "executionContext",
        "c",
        "visitCompilationUnit",
        "cu",
        "executionContext",
        "variable",
        "getCursor",
        "pollMessage",
        "variable",
        "uniqueName",
        "VariableNameUtils",
        "generateVariableName",
        "newName",
        "getCursor",
        "VariableNameUtils",
        "GenerationStrategy",
        "INCREMENT_NUMBER",
        "c",
        "variable",
        "uniqueName",
        "visit",
        "c",
        "executionContext",
        "getCursor",
        "c",
        "c",
        "Override",
        "multiVariable",
        "executionContext",
        "isTypeAlias",
        "multiVariable",
        "getLeadingAnnotations",
        "TypeUtils",
        "isOfClassType",
        "multiVariable",
        "getType",
        "fullyQualifiedAliasedType",
        "visitVariableDeclarations",
        "multiVariable",
        "executionContext",
        "multiVariable",
        "Override",
        "variable",
        "executionContext",
        "aliasName",
        "equals",
        "variable",
        "getSimpleName",
        "getCursor",
        "putMessageOnFirstEnclosing",
        "variable",
        "variable",
        "annotationList",
        "annotationList",
        "stream",
        "anyMatch",
        "a",
        "equals",
        "a",
        "getSimpleName",
        "a",
        "getMarkers",
        "findFirst",
        "isPresent"
    ],
    "literals": [
        "\"Old alias name\"",
        "\"Name of the alias type.\"",
        "\"OldAlias\"",
        "\"New alias name\"",
        "\"Name of the alias type.\"",
        "\"NewAlias\"",
        "\"Target fully qualified type\"",
        "\"Fully-qualified class name of the aliased type.\"",
        "\"org.junit.Assume\"",
        "\"Change type alias\"",
        "\"Change a given type alias to another.\"",
        "\"RENAME_VARIABLE\"",
        "\"RENAME_VARIABLE\"",
        "\"typealias\""
    ],
    "variables": [
        "aliasName",
        "newName",
        "fullyQualifiedAliasedType"
    ],
    "comments": [],
    "docstrings": [
        "* Copyright 2023 the original author or authors.\n * <p>\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * <p>\n * https://www.apache.org/licenses/LICENSE-2.0\n * <p>\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License."
    ],
    "functions": [
        "getDisplayName",
        "getDescription",
        "getVisitor",
        "visitCompilationUnit",
        "J",
        "visitVariableDeclarations",
        "J",
        "visitVariable",
        "isTypeAlias"
    ],
    "classes": [
        "ChangeTypeAlias"
    ]
}