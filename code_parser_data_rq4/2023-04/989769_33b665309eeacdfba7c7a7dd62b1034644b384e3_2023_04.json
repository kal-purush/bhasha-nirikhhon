{
    "identifiers": [
        "Collections",
        "Generic",
        "Diagnostics",
        "IO",
        "sourceFullPath",
        "destFullPath",
        "Interop",
        "Sys",
        "FileStatus",
        "Interop",
        "Sys",
        "Stat",
        "sourceFullPath",
        "ignored",
        "Interop",
        "Sys",
        "LStat",
        "sourceFullPath",
        "ignored",
        "Interop",
        "ErrorInfo",
        "Interop",
        "Sys",
        "ReadLink",
        "sourceFullPath",
        "linkTarget",
        "errorInfo",
        "Interop",
        "Sys",
        "GetLastErrorInfo",
        "Interop",
        "GetExceptionForIoErrno",
        "errorInfo",
        "sourceFullPath",
        "Interop",
        "Sys",
        "Symlink",
        "linkTarget",
        "destFullPath",
        "errorInfo",
        "Interop",
        "Sys",
        "GetLastErrorInfo",
        "Interop",
        "GetExceptionForIoErrno",
        "errorInfo",
        "destFullPath",
        "sourceFullPath",
        "destFullPath",
        "overwrite",
        "DirectoryExists",
        "destFullPath",
        "destFullPath",
        "Path",
        "Combine",
        "destFullPath",
        "Path",
        "GetFileName",
        "sourceFullPath",
        "CopyDanglingSymlink",
        "sourceFullPath",
        "destFullPath",
        "FileStream",
        "sourceFullPath",
        "FileMode",
        "Open",
        "FileAccess",
        "Read",
        "FileShare",
        "Read",
        "DefaultBufferSize",
        "FileOptions",
        "FileStream",
        "destFullPath",
        "overwrite",
        "FileMode",
        "Create",
        "FileMode",
        "CreateNew",
        "FileAccess",
        "ReadWrite",
        "FileShare",
        "DefaultBufferSize",
        "FileOptions",
        "Interop",
        "CheckIo",
        "Interop",
        "Sys",
        "CopyFile",
        "src",
        "SafeFileHandle",
        "dst",
        "SafeFileHandle",
        "sourceFullPath",
        "destFullPath",
        "CopyDanglingSymlink",
        "sourceFullPath",
        "destFullPath",
        "Interop",
        "Sys",
        "Link",
        "sourceFullPath",
        "destFullPath",
        "Interop",
        "ErrorInfo",
        "Interop",
        "Sys",
        "GetLastErrorInfo",
        "errorInfo",
        "Interop",
        "EXDEV",
        "errorInfo",
        "Interop",
        "EACCES",
        "errorInfo",
        "Interop",
        "EPERM",
        "errorInfo",
        "Interop",
        "EOPNOTSUPP",
        "errorInfo",
        "Interop",
        "EMLINK",
        "errorInfo",
        "Interop",
        "ENOSYS",
        "CopyFile",
        "sourceFullPath",
        "destFullPath",
        "overwrite",
        "errorInfo",
        "Interop",
        "ENOENT",
        "Directory",
        "Exists",
        "Path",
        "GetDirectoryName",
        "destFullPath",
        "path",
        "destFullPath",
        "isDirectory",
        "path",
        "sourceFullPath",
        "errorInfo",
        "Interop",
        "EEXIST",
        "path",
        "destFullPath",
        "Interop",
        "GetExceptionForIoErrno",
        "errorInfo",
        "path",
        "isDirectory",
        "sourceFullPath",
        "destFullPath",
        "destBackupFullPath",
        "ignoreMetadataErrors",
        "destBackupFullPath",
        "Interop",
        "Sys",
        "Unlink",
        "destBackupFullPath",
        "Interop",
        "ErrorInfo",
        "Interop",
        "Sys",
        "GetLastErrorInfo",
        "errno",
        "Interop",
        "ENOENT",
        "Interop",
        "GetExceptionForIoErrno",
        "errno",
        "destBackupFullPath",
        "LinkOrCopyFile",
        "destFullPath",
        "destBackupFullPath",
        "Interop",
        "Sys",
        "FileStatus",
        "Interop",
        "Sys",
        "Stat",
        "destFullPath",
        "ignored",
        "Interop",
        "ErrorInfo",
        "Interop",
        "Sys",
        "GetLastErrorInfo",
        "errno",
        "Interop",
        "ENOENT",
        "Interop",
        "GetExceptionForIoErrno",
        "errno",
        "destBackupFullPath",
        "Interop",
        "CheckIo",
        "Interop",
        "Sys",
        "Rename",
        "sourceFullPath",
        "destFullPath",
        "sourceFullPath",
        "destFullPath",
        "Interop",
        "Sys",
        "FileStatus",
        "Interop",
        "Sys",
        "LStat",
        "sourceFullPath",
        "sourceStat",
        "Interop",
        "Sys",
        "LStat",
        "destFullPath",
        "destStat",
        "sourceStat",
        "Dev",
        "destStat",
        "Dev",
        "sourceStat",
        "Ino",
        "destStat",
        "Ino",
        "Interop",
        "Sys",
        "Rename",
        "sourceFullPath",
        "destFullPath",
        "LinkOrCopyFile",
        "sourceFullPath",
        "destFullPath",
        "DeleteFile",
        "sourceFullPath",
        "fullPath",
        "Interop",
        "Sys",
        "Unlink",
        "fullPath",
        "Interop",
        "ErrorInfo",
        "Interop",
        "Sys",
        "GetLastErrorInfo",
        "errorInfo",
        "Interop",
        "ENOENT",
        "Interop",
        "EROFS",
        "Interop",
        "ErrorInfo",
        "FileExists",
        "PathInternal",
        "TrimEndingDirectorySeparator",
        "fullPath",
        "Interop",
        "Sys",
        "FileTypes",
        "S_IFREG",
        "fileExistsError",
        "fileExistsError",
        "Interop",
        "ENOENT",
        "Interop",
        "EISDIR",
        "errorInfo",
        "Interop",
        "EACCES",
        "Info",
        "Interop",
        "GetExceptionForIoErrno",
        "errorInfo",
        "fullPath",
        "fullPath",
        "fullPath",
        "Length",
        "length",
        "PathInternal",
        "EndsInDirectorySeparator",
        "fullPath",
        "length",
        "length",
        "PathInternal",
        "IsDirectorySeparator",
        "fullPath",
        "SR",
        "Format",
        "SR",
        "IO_CannotCreateDirectory",
        "fullPath",
        "DirectoryExists",
        "fullPath",
        "PathInternal",
        "GetRootLength",
        "fullPath",
        "length",
        "lengthRoot",
        "length",
        "i",
        "lengthRoot",
        "somepathexists",
        "fullPath",
        "Substring",
        "i",
        "DirectoryExists",
        "dir",
        "stackDir",
        "Push",
        "dir",
        "somepathexists",
        "i",
        "lengthRoot",
        "PathInternal",
        "IsDirectorySeparator",
        "fullPath",
        "i",
        "i",
        "i",
        "stackDir",
        "Count",
        "count",
        "somepathexists",
        "Directory",
        "InternalGetDirectoryRoot",
        "fullPath",
        "DirectoryExists",
        "root",
        "Interop",
        "GetExceptionForIoErrno",
        "Interop",
        "ENOENT",
        "Info",
        "fullPath",
        "isDirectory",
        "Interop",
        "ErrorInfo",
        "Interop",
        "ErrorInfo",
        "stackDir",
        "Count",
        "stackDir",
        "Pop",
        "result",
        "Interop",
        "Sys",
        "MkDir",
        "name",
        "Interop",
        "Sys",
        "Permissions",
        "Mask",
        "result",
        "firstError",
        "Interop",
        "ErrorInfo",
        "Interop",
        "Sys",
        "GetLastErrorInfo",
        "errorInfo",
        "Interop",
        "EEXIST",
        "firstError",
        "errorInfo",
        "FileExists",
        "name",
        "DirectoryExists",
        "name",
        "errorInfo",
        "errorInfo",
        "Interop",
        "EACCES",
        "firstError",
        "errorInfo",
        "errorString",
        "name",
        "result",
        "firstError",
        "Interop",
        "GetExceptionForIoErrno",
        "firstError",
        "errorString",
        "isDirectory",
        "sourceFullPath",
        "destFullPath",
        "FileExists",
        "sourceFullPath",
        "PathInternal",
        "EndsInDirectorySeparator",
        "sourceFullPath",
        "SR",
        "Format",
        "SR",
        "IO_PathNotFound_Path",
        "sourceFullPath",
        "destFullPath",
        "PathInternal",
        "TrimEndingDirectorySeparator",
        "destFullPath",
        "FileExists",
        "destFullPath",
        "SR",
        "IO_FileCreateAlreadyExists",
        "Interop",
        "Sys",
        "Rename",
        "sourceFullPath",
        "destFullPath",
        "Interop",
        "ErrorInfo",
        "Interop",
        "Sys",
        "GetLastErrorInfo",
        "errorInfo",
        "Interop",
        "EACCES",
        "SR",
        "Format",
        "SR",
        "UnauthorizedAccess_IODenied_Path",
        "sourceFullPath",
        "errorInfo",
        "RawErrno",
        "Interop",
        "GetExceptionForIoErrno",
        "errorInfo",
        "sourceFullPath",
        "isDirectory",
        "fullPath",
        "recursive",
        "DirectoryInfo",
        "fullPath",
        "di",
        "Exists",
        "Interop",
        "GetExceptionForIoErrno",
        "Interop",
        "ENOENT",
        "Info",
        "fullPath",
        "isDirectory",
        "RemoveDirectoryInternal",
        "di",
        "recursive",
        "throwOnTopLevelDirectoryNotFound",
        "DirectoryInfo",
        "directory",
        "recursive",
        "throwOnTopLevelDirectoryNotFound",
        "directory",
        "Attributes",
        "FileAttributes",
        "ReparsePoint",
        "DeleteFile",
        "directory",
        "FullName",
        "recursive",
        "item",
        "Directory",
        "EnumerateFileSystemEntries",
        "directory",
        "FullName",
        "ShouldIgnoreDirectory",
        "Path",
        "GetFileName",
        "item",
        "DirectoryInfo",
        "item",
        "childDirectory",
        "Exists",
        "RemoveDirectoryInternal",
        "childDirectory",
        "recursive",
        "throwOnTopLevelDirectoryNotFound",
        "DeleteFile",
        "item",
        "exc",
        "firstException",
        "firstException",
        "exc",
        "exc",
        "firstException",
        "firstException",
        "exc",
        "firstException",
        "firstException",
        "Interop",
        "Sys",
        "RmDir",
        "directory",
        "FullName",
        "Interop",
        "ErrorInfo",
        "Interop",
        "Sys",
        "GetLastErrorInfo",
        "errorInfo",
        "Interop",
        "EACCES",
        "Interop",
        "EPERM",
        "Interop",
        "EROFS",
        "Interop",
        "EISDIR",
        "SR",
        "Format",
        "SR",
        "UnauthorizedAccess_IODenied_Path",
        "directory",
        "FullName",
        "Interop",
        "ENOENT",
        "throwOnTopLevelDirectoryNotFound",
        "Interop",
        "GetExceptionForIoErrno",
        "errorInfo",
        "directory",
        "FullName",
        "isDirectory",
        "fullPath",
        "Interop",
        "ErrorInfo",
        "DirectoryExists",
        "fullPath",
        "ignored",
        "fullPath",
        "Interop",
        "ErrorInfo",
        "errorInfo",
        "FileExists",
        "fullPath",
        "Interop",
        "Sys",
        "FileTypes",
        "S_IFDIR",
        "errorInfo",
        "fullPath",
        "Interop",
        "ErrorInfo",
        "FileExists",
        "PathInternal",
        "TrimEndingDirectorySeparator",
        "fullPath",
        "Interop",
        "Sys",
        "FileTypes",
        "S_IFREG",
        "ignored",
        "fullPath",
        "fileType",
        "Interop",
        "ErrorInfo",
        "errorInfo",
        "Debug",
        "Assert",
        "fileType",
        "Interop",
        "Sys",
        "FileTypes",
        "S_IFREG",
        "fileType",
        "Interop",
        "Sys",
        "FileTypes",
        "S_IFDIR",
        "Interop",
        "Sys",
        "FileStatus",
        "errorInfo",
        "Interop",
        "ErrorInfo",
        "Interop",
        "Sys",
        "Stat",
        "fullPath",
        "fileinfo",
        "Interop",
        "Sys",
        "LStat",
        "fullPath",
        "fileinfo",
        "errorInfo",
        "Interop",
        "Sys",
        "GetLastErrorInfo",
        "fileType",
        "Interop",
        "Sys",
        "FileTypes",
        "S_IFDIR",
        "fileinfo",
        "Mode",
        "Interop",
        "Sys",
        "FileTypes",
        "S_IFMT",
        "Interop",
        "Sys",
        "FileTypes",
        "S_IFDIR",
        "name",
        "name",
        "name",
        "fullPath",
        "FileInfo",
        "fullPath",
        "Attributes",
        "attributes",
        "FileAttributes",
        "FileSystemInfo",
        "ThrowNotFound",
        "fullPath",
        "attributes",
        "fullPath",
        "FileAttributes",
        "attributes",
        "FileInfo",
        "fullPath",
        "Attributes",
        "attributes",
        "fullPath",
        "FileInfo",
        "fullPath",
        "CreationTime",
        "fullPath",
        "DateTimeOffset",
        "time",
        "asDirectory",
        "asDirectory",
        "FileSystemInfo",
        "DirectoryInfo",
        "fullPath",
        "FileSystemInfo",
        "FileInfo",
        "fullPath",
        "info",
        "CreationTimeCore",
        "time",
        "fullPath",
        "FileInfo",
        "fullPath",
        "LastAccessTime",
        "fullPath",
        "DateTimeOffset",
        "time",
        "asDirectory",
        "asDirectory",
        "FileSystemInfo",
        "DirectoryInfo",
        "fullPath",
        "FileSystemInfo",
        "FileInfo",
        "fullPath",
        "info",
        "LastAccessTimeCore",
        "time",
        "fullPath",
        "FileInfo",
        "fullPath",
        "LastWriteTime",
        "fullPath",
        "DateTimeOffset",
        "time",
        "asDirectory",
        "asDirectory",
        "FileSystemInfo",
        "DirectoryInfo",
        "fullPath",
        "FileSystemInfo",
        "FileInfo",
        "fullPath",
        "info",
        "LastWriteTimeCore",
        "time",
        "DriveInfoInternal",
        "GetLogicalDrives"
    ],
    "literals": [
        "\".\"",
        "\"..\""
    ],
    "variables": [
        "DefaultBufferSize",
        "ignored",
        "errorInfo",
        "linkTarget",
        "src",
        "dst",
        "errorInfo",
        "path",
        "isDirectory",
        "errno",
        "ignored",
        "errno",
        "sourceStat",
        "destStat",
        "errorInfo",
        "fileExistsError",
        "length",
        "somepathexists",
        "stackDir",
        "lengthRoot",
        "i",
        "dir",
        "count",
        "root",
        "result",
        "firstError",
        "errorString",
        "fullPath",
        "name",
        "errorInfo",
        "errorInfo",
        "di",
        "firstException",
        "childDirectory",
        "errorInfo",
        "ignored",
        "ignored",
        "fileinfo",
        "FileAttributes",
        "attributes",
        "FileSystemInfo",
        "info",
        "FileSystemInfo",
        "info",
        "FileSystemInfo",
        "info"
    ],
    "comments": [
        "Licensed to the .NET Foundation under one or more agreements.",
        "The .NET Foundation licenses this file to you under the MIT license.",
        "See the LICENSE file in the project root for more information.",
        "Check if the source is a dangling symlink. In those cases, we just want to copy the link",
        "get the target of the symlink",
        "The destination path may just be a directory into which the file should be copied.",
        "If it is, append the filename from the source onto the destination directory",
        "Copy the contents of the file from the source to the destination, creating the destination in the process",
        "If link fails, we can fall back to doing a full copy, but we'll only do so for",
        "cases where we expect link could fail but such a copy could succeed.  We don't",
        "want to do so for all errors, because the copy could incur a lot of cost",
        "even if we know it'll eventually fail, e.g. EROFS means that the source file",
        "system is read-only and couldn't support the link being added, but if it's",
        "read-only, then the move should fail any way due to an inability to delete",
        "the source file.",
        "rename fails across devices / mount points",
        "permissions might not allow creating hard links even if a copy would work",
        "links aren't supported by the source file system",
        "too many hard links to the source file",
        "the file system doesn't support link",
        "The operation failed.  Within reason, try to determine which path caused the problem",
        "so we can throw a detailed exception.",
        "The parent directory of destFile can't be found.",
        "Windows distinguishes between whether the directory or the file isn't found,",
        "and throws a different exception in these cases.  We attempt to approximate that",
        "here; there is a race condition here, where something could change between",
        "when the error occurs and our checks, but it's the best we can do, and the",
        "worst case in such a race condition (which could occur if the file system is",
        "being manipulated concurrently with these checks) is that we throw a",
        "FileNotFoundException instead of DirectoryNotFoundexception.",
        "We're backing up the destination file to the backup file, so we need to first delete the backup",
        "file, if it exists.  If deletion fails for a reason other than the file not existing, fail.",
        "Now that the backup is gone, link the backup to point to the same file as destination.",
        "This way, we don't lose any data in the destination file, no copy is necessary, etc.",
        "There is no backup file.  Just make sure the destination file exists, throwing if it doesn't.",
        "Finally, rename the source to the destination, overwriting the destination.",
        "The desired behavior for Move(source, dest) is to not overwrite the destination file",
        "if it exists. Since rename(source, dest) will replace the file at 'dest' if it exists,",
        "link/unlink are used instead. Rename is more efficient than link/unlink on file systems",
        "where hard links are not supported (such as FAT). Therefore, given that source file exists,",
        "rename is used in 2 cases: when dest file does not exist or when source path and dest",
        "path refer to the same file (on the same device). This is important for case-insensitive",
        "file systems (e.g. renaming a file in a way that just changes casing), so that we support",
        "changing the casing in the naming of the file. If this fails in any way (e.g. source file",
        "doesn't exist, dest file doesn't exist, rename fails, etc.), we just fall back to trying the",
        "link/unlink approach and generating any exceptional messages from there as necessary.",
        "source file exists",
        "dest file does not exist",
        "source and dest are on the same device",
        "source and dest are the same file on that device",
        "try the rename",
        "Renamed successfully.",
        "ENOENT means it already doesn't exist; nop",
        "EROFS means the file system is read-only",
        "Need to manually check file existence",
        "github.com/dotnet/corefx/issues/21273",
        "Input allows trailing separators in order to match Windows behavior",
        "Unix does not accept trailing separators, so must be trimmed",
        "NOTE: This logic is primarily just carried forward from Win32FileSystem.CreateDirectory.",
        "We need to trim the trailing slash or the code will try to create 2 directories of the same name.",
        "For paths that are only // or ///",
        "We can save a bunch of work if the directory we want to create already exists.",
        "Attempt to figure out which directories don't exist, and only create the ones we need.",
        "Create only the ones missing",
        "Create all the directories",
        "The mkdir command uses 0777 by default (it'll be AND'd with the process umask internally).",
        "We do the same.",
        "While we tried to avoid creating directories that don't",
        "exist above, there are a few cases that can fail, e.g.",
        "a race condition where another process or thread creates",
        "the directory first, or there's a file at the location.",
        "If there's a file in this directory's place, or if we have ERROR_ACCESS_DENIED when checking if the directory already exists throw.",
        "Only throw an exception if creating the exact directory we wanted failed to work correctly.",
        "Windows doesn't care if you try and copy a file via \"MoveDirectory\"...",
        "... but it doesn't like the source to have a trailing slash ...",
        "On Windows we end up with ERROR_INVALID_NAME, which is",
        "\"The filename, directory name, or volume label syntax is incorrect.\"",
        "",
        "This surfaces as a IOException, if we let it go beyond here it would",
        "give DirectoryNotFound.",
        "... but it doesn't care if the destination has a trailing separator.",
        "... and dest cannot be an existing file.",
        "match Win32 exception",
        "match Win32 exception",
        "File.Exists() explicitly checks for a trailing separator and returns false if found. FileInfo.Exists and all other",
        "internal usages do not check for the trailing separator. Historically we've always removed the trailing separator",
        "when getting attributes as trailing separators are generally not accepted by Windows APIs. Unix will take",
        "trailing separators, but it infers that the path must be a directory (it effectively appends \".\"). To align with",
        "our historical behavior (outside of File.Exists()), we need to trim.",
        "",
        "See http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11 for details.",
        "First use stat, as we want to follow symlinks.  If that fails, it could be because the symlink",
        "is broken, we don't have permissions, etc., in which case fall back to using LStat to evaluate",
        "based on the symlink itself.",
        "Something exists at this path.  If the caller is asking for a directory, return true if it's",
        "a directory and false for everything else.  If the caller is asking for a file, return false for",
        "a directory and true for everything else.",
        "<param name=\"name\">The name to evaluate.</param>",
        "<returns>true if the name is \".\" or \"..\"; otherwise, false.</returns>"
    ],
    "docstrings": [
        "<summary>Provides an implementation of FileSystem for Unix systems.</summary>",
        "<summary>Determines whether the specified directory name should be ignored.</summary>"
    ],
    "functions": [
        "CopyDanglingSymlink",
        "CopyFile",
        "LinkOrCopyFile",
        "ReplaceFile",
        "MoveFile",
        "DeleteFile",
        "CreateDirectory",
        "MoveDirectory",
        "RemoveDirectory",
        "RemoveDirectoryInternal",
        "DirectoryExists",
        "DirectoryExists",
        "FileExists",
        "FileExists",
        "ShouldIgnoreDirectory",
        "FileAttributes",
        "GetAttributes",
        "SetAttributes",
        "DateTimeOffset",
        "GetCreationTime",
        "SetCreationTime",
        "DateTimeOffset",
        "GetLastAccessTime",
        "SetLastAccessTime",
        "DateTimeOffset",
        "GetLastWriteTime",
        "SetLastWriteTime",
        "GetLogicalDrives"
    ],
    "classes": [
        "FileSystem"
    ]
}