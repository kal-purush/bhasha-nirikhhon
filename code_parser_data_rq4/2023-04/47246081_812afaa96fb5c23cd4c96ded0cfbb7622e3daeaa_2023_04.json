{
    "identifiers": [
        "org",
        "apache",
        "brooklyn",
        "core",
        "workflow",
        "steps",
        "variables",
        "org",
        "apache",
        "brooklyn",
        "core",
        "workflow",
        "steps",
        "variables",
        "SetVariableWorkflowStep",
        "ConfigurableInterpolationEvaluation",
        "com",
        "fasterxml",
        "jackson",
        "annotation",
        "JsonInclude",
        "com",
        "google",
        "common",
        "collect",
        "Iterables",
        "com",
        "google",
        "common",
        "reflect",
        "TypeToken",
        "org",
        "apache",
        "brooklyn",
        "config",
        "ConfigKey",
        "org",
        "apache",
        "brooklyn",
        "core",
        "config",
        "ConfigKeys",
        "org",
        "apache",
        "brooklyn",
        "core",
        "workflow",
        "WorkflowStepInstanceExecutionContext",
        "org",
        "apache",
        "brooklyn",
        "util",
        "core",
        "text",
        "TemplateProcessor",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "java",
        "util",
        "log",
        "LoggerFactory",
        "getLogger",
        "VARIABLE",
        "ConfigKeys",
        "newConfigKey",
        "INTERPOLATION_MODE",
        "ConfigKeys",
        "newConfigKey",
        "INTERPOLATION_ERRORS",
        "ConfigKeys",
        "newConfigKey",
        "Override",
        "v",
        "log",
        "info",
        "v",
        "getClass",
        "getSimpleName",
        "v",
        "log",
        "info",
        "context",
        "v",
        "checkIsIterable",
        "v",
        "result",
        "vi",
        "v",
        "vi",
        "result",
        "vi",
        "doubleValue",
        "result",
        "o",
        "o",
        "o",
        "o",
        "o"
    ],
    "literals": [
        "\"variable\"",
        "\"interpolation_mode\"",
        "\"Whether interpolation runs on the full value (not touching quotes; the default in most places), \"",
        "\"on words (if unquoted, unquoting others; the default for 'let var = value' shorthand), \"",
        "\"or is disabled (not applied at all)\"",
        "\"interpolation_errors\"",
        "\"Whether unresolvable interpolated expressions fail and return an error (the default for 'let'), \"",
        "\"ignore the expression leaving it in place (the default for 'load'), \"",
        "\"or replace the expression with a blank string\"",
        "\"apply called with object: {\"",
        "\"} \"",
        "\"apply has context: \"",
        "\"Argument is not a number; cannot compute sum\"",
        "\"Value is not an iterable; cannot take sum\"",
        "\"Argument is not a number; cannot compute sum\""
    ],
    "variables": [],
    "comments": [
        "@JsonInclude(JsonInclude.Include.NON_EMPTY)",
        "protected final Map<String,Object> input;",
        "final ConfigurableInterpolationEvaluation evaluation = this.getEvaluation();",
        "final Iterable<List<String>> list = (Iterable)v;",
        "final Iterator<List<String>> it = list.iterator();",
        "final int numberOfSums = Iterables.size(list) - 1;",
        "",
        "if (numberOfSums < 1) { // add the one item to the sum, if any",
        "for (Object vi: list) {",
        "checkIsNumberOrString(vi);",
        "result += ((Number)vi).doubleValue();",
        "}",
        "} else { // process items via handleAdd() to coerce numbers from Strings",
        "Object left = it.next();",
        "Object right;",
        "for (int count=1; count<= numberOfSums; count++) {",
        "right = it.next();",
        "checkIsNumberOrString(left);",
        "checkIsNumberOrString(right);",
        "",
        "result += ((Number)evaluation.handleAdd(Arrays.asList(left), Arrays.asList(right))).doubleValue();",
        "",
        "left = right;",
        "}",
        "}",
        "protected ConfigurableInterpolationEvaluation getEvaluation() {",
        "WorkflowStepInstanceExecutionContext instance = this.context.getCurrentStepInstance();",
        "TypeToken<?> type = context.lookupType(this.VARIABLE.getName(), () -> null);",
        "need a way to get input/unresolvedValue in order to form the ConfigurableInterpolationEvaluation instance",
        "as it is the only way to access the `handleAdd` method.",
        "Object unresolvedValue = input.get(VALUE.getName());",
        "",
        "return new ConfigurableInterpolationEvaluation(instance, type, unresolvedValue,",
        "instance.getInputOrDefault(INTERPOLATION_MODE),",
        "instance.getInputOrDefault(INTERPOLATION_ERRORS)",
        ");",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "apply",
        "checkIsIterable",
        "checkIsNumberOrString"
    ],
    "classes": [
        "TransformSum"
    ]
}