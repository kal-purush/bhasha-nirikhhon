{
    "identifiers": [
        "os",
        "keras",
        "preprocessing",
        "image",
        "matplotlib",
        "pyplot",
        "plt",
        "numpy",
        "np",
        "keras",
        "utils",
        "np_utils",
        "to_categorical",
        "random",
        "shutil",
        "keras",
        "models",
        "Sequential",
        "keras",
        "layers",
        "Dropout",
        "Conv2D",
        "Flatten",
        "Dense",
        "MaxPooling2D",
        "BatchNormalization",
        "keras",
        "models",
        "load_model",
        "dir",
        "gen",
        "image",
        "ImageDataGenerator",
        "rescale",
        "shuffle",
        "batch_size",
        "target_size",
        "class_mode",
        "gen",
        "flow_from_directory",
        "dir",
        "batch_size",
        "batch_size",
        "shuffle",
        "shuffle",
        "color_mode",
        "class_mode",
        "class_mode",
        "target_size",
        "target_size",
        "generator",
        "shuffle",
        "batch_size",
        "BS",
        "target_size",
        "TS",
        "generator",
        "shuffle",
        "batch_size",
        "BS",
        "target_size",
        "TS",
        "len",
        "train_batch",
        "classes",
        "BS",
        "len",
        "valid_batch",
        "classes",
        "BS",
        "SPE",
        "VS",
        "Sequential",
        "Conv2D",
        "kernel_size",
        "activation",
        "input_shape",
        "Conv2D",
        "activation",
        "Conv2D",
        "activation",
        "Dropout",
        "Flatten",
        "Dense",
        "activation",
        "Dropout",
        "Dense",
        "activation"
    ],
    "literals": [
        "'categorical'",
        "'grayscale'",
        "'YawnDS/train'",
        "'YawnDS/valid'",
        "'relu'",
        "'relu'",
        "'relu'",
        "'relu'",
        "'softmax'"
    ],
    "variables": [
        "BS",
        "TS",
        "train_batch",
        "valid_batch",
        "SPE",
        "VS",
        "model"
    ],
    "comments": [
        "Importing the necessary libraries",
        "Defining the generator function to return batches of data(images)",
        "Defining relevant variables    (this is just a sample dataset of a few images for demonstration purpose)",
        "Batch size",
        "Target size",
        "Number of steps per epoch",
        "Validation steps",
        "Defining model architecture",
        "2D Convolutional layer, 32 3x3 filters",
        "relu was chosen to provide faster convergence during training and to effectively capture relevant features from data",
        "2D Convolutional layer with 32 3x3 filters, relu activation function",
        "2D Convolutional layer, 64 3x3 filters, relu",
        "Randomly turn off 25% neurons to prevent overfitting",
        "Flatten output to a 1D array (since we only want classification)",
        "Fully connected layer to learn complex relationships and get relevant data",
        "One more dropout layer to further prevent overfitting",
        "output a softmax to squash the matrix into output probabilities",
        "Final layer to produce classification probabilities",
        "Here, replace 4 with 2 if you aren't using the yawn eye dataset (in case it throws a Graph execution error)",
        "# Compile, Train and save the model    (Uncomment this cell to train and save the model)",
        "model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])",
        "model.fit(train_batch, validation_data=valid_batch,epochs=15,steps_per_epoch=SPE ,validation_steps=VS)",
        "model.save('models/ddsCnn.h5', overwrite=True)"
    ],
    "docstrings": [],
    "functions": [
        "generator"
    ],
    "classes": []
}