{
    "identifiers": [
        "os",
        "sys",
        "re",
        "typing",
        "types",
        "argparse",
        "datetime",
        "Enum",
        "cryptography",
        "x509",
        "Enum",
        "Enum",
        "data_type",
        "DataType",
        "data_type",
        "datetime",
        "datetime",
        "datetime",
        "datetime",
        "x509_obj",
        "data_type",
        "DataType",
        "CRT",
        "x509_obj",
        "not_valid_after",
        "x509_obj",
        "not_valid_before",
        "data_type",
        "DataType",
        "CRL",
        "x509_obj",
        "next_update",
        "x509_obj",
        "last_update",
        "data_type",
        "DataType",
        "CSR",
        "datetime",
        "datetime",
        "max",
        "datetime",
        "datetime",
        "min",
        "ValueError",
        "format",
        "data_type",
        "DataType",
        "CRT",
        "DataType",
        "CRL",
        "DataType",
        "CSR",
        "backends",
        "backends",
        "__generate_parsers",
        "data_type",
        "DataType",
        "PEM_TAGS",
        "data_type",
        "backends",
        "data_type",
        "DataFormat",
        "PEM",
        "backends",
        "data_type",
        "DataFormat",
        "DER",
        "data",
        "X509Parser",
        "pem_data_type",
        "data",
        "pem_type",
        "tag",
        "pem_loader",
        "data",
        "pem_type",
        "der_loader",
        "data",
        "ValueError",
        "result",
        "format",
        "tag",
        "wrapper",
        "data_type",
        "_",
        "PEM_TAGS",
        "items",
        "parsers",
        "__generate_parser",
        "data_type",
        "item",
        "parsers",
        "item",
        "staticmethod",
        "data",
        "re",
        "search",
        "X509Parser",
        "PEM_TAG_REGEX",
        "data",
        "m",
        "m",
        "group",
        "decode",
        "verbose",
        "verbose",
        "X509Parser",
        "DataType",
        "CRT",
        "DataFormat",
        "PEM",
        "x509",
        "load_pem_x509_certificate",
        "DataFormat",
        "DER",
        "x509",
        "load_der_x509_certificate",
        "DataType",
        "CRL",
        "DataFormat",
        "PEM",
        "x509",
        "load_pem_x509_crl",
        "DataFormat",
        "DER",
        "x509",
        "load_der_x509_crl",
        "DataType",
        "CSR",
        "DataFormat",
        "PEM",
        "x509",
        "load_pem_x509_csr",
        "DataFormat",
        "DER",
        "x509",
        "load_der_x509_csr",
        "args",
        "args",
        "file",
        "sys",
        "stderr",
        "args",
        "verbose",
        "args",
        "file",
        "sys",
        "stderr",
        "filename",
        "typing",
        "AuditData",
        "open",
        "filename",
        "f",
        "f",
        "read",
        "parse_bytes",
        "data",
        "result",
        "filename",
        "result_list",
        "append",
        "result",
        "result_list",
        "data",
        "data_type",
        "DataType",
        "parser",
        "data_type",
        "data",
        "ValueError",
        "val_error",
        "warn",
        "val_error",
        "result",
        "AuditData",
        "data_type",
        "audit_data",
        "fill_validity_duration",
        "result",
        "audit_data",
        "file_list",
        "file_list",
        "default_files",
        "filename",
        "file_list",
        "parse_file",
        "filename",
        "audit_data",
        "extend",
        "data_list",
        "args",
        "kwargs",
        "isinstance",
        "types",
        "FunctionType",
        "d",
        "audit_data",
        "d",
        "args",
        "kwargs",
        "staticmethod",
        "os",
        "path",
        "isdir",
        "os",
        "path",
        "isdir",
        "os",
        "path",
        "isdir",
        "tests_dir",
        "Auditor",
        "verbose",
        "verbose",
        "collect_default_files",
        "find_test_dir",
        "os",
        "path",
        "join",
        "test_dir",
        "dir_path",
        "_",
        "file_names",
        "os",
        "walk",
        "test_data_folder",
        "data_files",
        "extend",
        "os",
        "path",
        "join",
        "dir_path",
        "file_name",
        "file_name",
        "file_names",
        "data_files",
        "audit_data",
        "AuditData",
        "format",
        "audit_data",
        "not_valid_before",
        "isoformat",
        "timespec",
        "audit_data",
        "not_valid_after",
        "isoformat",
        "timespec",
        "audit_data",
        "data_type",
        "name",
        "audit_data",
        "filename",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "dest",
        "help",
        "parser",
        "add_argument",
        "dest",
        "help",
        "metavar",
        "parser",
        "parse_args",
        "TestDataAuditor",
        "args",
        "verbose",
        "args",
        "file",
        "args",
        "file",
        "td_auditor",
        "default_files",
        "td_auditor",
        "walk_all",
        "data_files",
        "args",
        "all",
        "td_auditor",
        "for_each",
        "list_all",
        "main"
    ],
    "literals": [
        "\"\"",
        "\"Unsupported file_type: {}\"",
        "br'-{5}BEGIN (?P<type>.*?)-{5}\\n(?P<data>.*?)-{5}END (?P=type)-{5}\\n'",
        "br'-{5}BEGIN (?P<type>.*?)-{5}\\n'",
        "'CERTIFICATE'",
        "'X509 CRL'",
        "'CERTIFICATE REQUEST'",
        "\"{}.parser[{}]\"",
        "'type'",
        "'UTF-8'",
        "\"\"",
        "\"Error: \"",
        "\"Warn: \"",
        "'rb'",
        "'tests'",
        "'tests'",
        "'suites'",
        "'.'",
        "'../suites'",
        "'..'",
        "\"Mbed TLS source tree not found\"",
        "'data_files'",
        "\"{}\\t{}\\t{}\\t{}\"",
        "'seconds'",
        "'seconds'",
        "'Audit script for X509 crt/crl/csr files.'",
        "'-a'",
        "'--all'",
        "'store_true'",
        "'list the information of all files'",
        "'-v'",
        "'--verbose'",
        "'store_true'",
        "'verbose'",
        "'Show warnings'",
        "'-f'",
        "'--file'",
        "'file'",
        "'file to audit (Debug only)'",
        "'FILE'",
        "\"\\nDone!\\n\"",
        "\"__main__\""
    ],
    "variables": [
        "CRT",
        "CRL",
        "CSR",
        "PEM",
        "DER",
        "data_type",
        "filename",
        "not_valid_after",
        "not_valid_before",
        "not_valid_after",
        "not_valid_before",
        "not_valid_after",
        "not_valid_before",
        "not_valid_after",
        "not_valid_before",
        "PEM_REGEX",
        "PEM_TAG_REGEX",
        "PEM_TAGS",
        "backends",
        "tag",
        "pem_loader",
        "der_loader",
        "pem_type",
        "result",
        "result",
        "wrapper",
        "parsers",
        "data_type",
        "m",
        "verbose",
        "default_files",
        "audit_data",
        "parser",
        "data",
        "result_list",
        "result",
        "result",
        "filename",
        "result",
        "result",
        "audit_data",
        "file_list",
        "data_list",
        "tests_dir",
        "tests_dir",
        "tests_dir",
        "default_files",
        "test_dir",
        "test_data_folder",
        "data_files",
        "parser",
        "args",
        "td_auditor",
        "data_files",
        "data_files"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "",
        "copyright the mbed tls contributors",
        "spdx-license-identifier: apache-2.0",
        "",
        "licensed under the apache license, version 2.0 (the \"license\"); you may",
        "not use this file except in compliance with the license.",
        "you may obtain a copy of the license at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
        "WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "Certificate",
        "Certificate Revocation List",
        "Certificate Signing Request",
        "Privacy-Enhanced Mail",
        "Distinguished Encoding Rules",
        "pylint: disable=too-few-public-methods",
        "Certificate expires after \"not_valid_after\"",
        "Certificate is invalid before \"not_valid_before\"",
        "CertificateRevocationList expires after \"next_update\"",
        "CertificateRevocationList is invalid before \"last_update\"",
        "CertificateSigningRequest is always valid.",
        "It is in PEM format with target tag",
        "It is in PEM format without target tag",
        "It might be in DER format",
        "pylint: disable=no-self-use",
        "start main routine"
    ],
    "docstrings": [
        "\"\"\"Audit validity date of X509 crt/crl/csr\n\nThis script is used to audit the validity date of crt/crl/csr used for testing.\nThe files are in tests/data_files/ while some data are in test suites data in\ntests/suites/*.data files.\n\"\"\"",
        "\"\"\"Store file, type and expiration date for audit.\"\"\"",
        "\"\"\"Fill expiration_date field from a x509 object\"\"\"",
        "\"\"\"A parser class to parse crt/crl/csr file or data in PEM/DER format.\"\"\"",
        "\"\"\"Parser generator for a specific DataType\"\"\"",
        "\"\"\"Generate parsers for all support DataType\"\"\"",
        "\"\"\"Get the tag from the data in PEM format\n\n        :param data: data to be checked in binary mode.\n        :return: PEM tag or \"\" when no tag detected.\n        \"\"\"",
        "\"\"\"A base class for audit.\"\"\"",
        "\"\"\"\n        Parse a list of AuditData from file.\n\n        :param filename: name of the file to parse.\n        :return list of AuditData parsed from the file.\n        \"\"\"",
        "\"\"\"Parse AuditData from bytes.\"\"\"",
        "\"\"\"\n        Iterate over all the files in the list and get audit data.\n        \"\"\"",
        "\"\"\"\n        Sort the audit data and iterate over them.\n        \"\"\"",
        "\"\"\"Get the relative path for the MbedTLS test directory.\"\"\"",
        "\"\"\"Class for auditing files in tests/data_files/\"\"\"",
        "\"\"\"collect all files in tests/data_files/\"\"\"",
        "\"\"\"\n    Perform argument parsing.\n    \"\"\""
    ],
    "functions": [
        "fill_validity_duration",
        "__generate_parser",
        "wrapper",
        "__generate_parsers",
        "__getitem__",
        "pem_data_type",
        "error",
        "warn",
        "parse_file",
        "parse_bytes",
        "walk_all",
        "for_each",
        "find_test_dir",
        "collect_default_files",
        "list_all",
        "main"
    ],
    "classes": [
        "DataType",
        "DataFormat",
        "AuditData",
        "X509Parser",
        "Auditor",
        "TestDataAuditor"
    ]
}