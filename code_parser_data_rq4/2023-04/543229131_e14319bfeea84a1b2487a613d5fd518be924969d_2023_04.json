{
    "identifiers": [
        "Client",
        "config",
        "SendGrid",
        "PropertyItemObjectResponse",
        "config",
        "SendGrid",
        "process",
        "Client",
        "process",
        "process",
        "setInitialTaskPageIdToStatusMap",
        "setInterval",
        "findAndSendEmailsForUpdatedTasks",
        "getTasksFromNotionDatabase",
        "currentTasks",
        "taskPageIdToStatusMap",
        "pageId",
        "status",
        "getTasksFromNotionDatabase",
        "findUpdatedTasks",
        "currentTasks",
        "updatedTasks",
        "task",
        "updatedTasks",
        "taskPageIdToStatusMap",
        "task",
        "task",
        "sendUpdateEmailWithSendgrid",
        "task",
        "shouldContinue",
        "notion",
        "databaseId",
        "cursor",
        "pages",
        "results",
        "next_cursor",
        "cursor",
        "next_cursor",
        "pages",
        "page",
        "pages",
        "page",
        "page",
        "getPropertyValue",
        "statusPropertyId",
        "getStatusPropertyValue",
        "statusPropertyItem",
        "page",
        "getPropertyValue",
        "titlePropertyId",
        "getTitlePropertyValue",
        "titlePropertyItems",
        "tasks",
        "tasks",
        "property",
        "property",
        "property",
        "property",
        "property",
        "property",
        "property",
        "property",
        "property",
        "property",
        "property",
        "property",
        "currentTasks",
        "currentTasks",
        "currentTask",
        "getPreviousTaskStatus",
        "currentTask",
        "currentTask",
        "previousStatus",
        "title",
        "status",
        "message",
        "SendGrid",
        "process",
        "process",
        "message",
        "process",
        "process",
        "error",
        "error",
        "taskPageIdToStatusMap",
        "pageId",
        "taskPageIdToStatusMap",
        "pageId",
        "status",
        "taskPageIdToStatusMap",
        "pageId",
        "notion",
        "pageId",
        "propertyId",
        "propertyItem",
        "propertyItem",
        "propertyItem",
        "propertyItem",
        "nextCursor",
        "propertyItem",
        "notion",
        "pageId",
        "propertyId",
        "nextCursor",
        "propertyItem",
        "nextCursor",
        "propertyItem",
        "results",
        "propertyItem",
        "nextCursor",
        "results"
    ],
    "literals": [
        "\"@notionhq/client\"",
        "\"dotenv\"",
        "\"@sendgrid/mail\"",
        "\"../../build/src/api-endpoints\"",
        "\"\\nFetching tasks from Notion DB...\"",
        "Found ${updatedTasks.length} updated tasks.",
        "string",
        "string",
        "string",
        "${pages.length} pages successfully fetched.",
        "\"Status\"",
        "\"Name\"",
        "string",
        "\"select\"",
        "\"No Status\"",
        "\"select\"",
        "\"No Status\"",
        "string",
        "\"title\"",
        "\"No Title\"",
        "\"title\"",
        "\"No Title\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "Status of Notion task (\"${title}\") has been updated to \"${status}\".",
        "\"Notion Task Status Updated\"",
        "Email Sent to ${process.env.EMAIL_TO_FIELD}, from: ${process.env.EMAIL_FROM_FIELD}",
        "string",
        "string",
        "string",
        "\"property_item\"",
        "\"list\""
    ],
    "variables": [
        "notion",
        "databaseId",
        "taskPageIdToStatusMap",
        "currentTasks",
        "currentTasks",
        "updatedTasks",
        "pages",
        "cursor",
        "shouldContinue",
        "tasks",
        "pageId",
        "statusPropertyId",
        "statusPropertyItem",
        "status",
        "titlePropertyId",
        "titlePropertyItems",
        "title",
        "previousStatus",
        "message",
        "propertyItem",
        "nextCursor",
        "results"
    ],
    "comments": [
        "================================================================================\n\n\tdatabase-update-send-email.\n  \n  Glitch example: https://glitch.com/edit/#!/notion-database-email-update\n  Find the official Notion API client @ https://github.com/makenotion/notion-sdk-js/\n\n================================================================================",
        "Get the tasks currently in the database.",
        "Return any tasks that have had their status updated.",
        "For each updated task, update taskPageIdToStatusMap and send an email notification.",
        "Send an email about this change.",
        "If this task hasn't been seen before, add to local pageId to status map.",
        "Property is paginated."
    ],
    "docstrings": [
        "* Local map to store task pageId to its last status.\n * { [pageId: string]: string }",
        "* Initialize local data store.\n * Then poll for changes every 5 seconds (5000 milliseconds).",
        "* Get and set the initial data store with tasks currently in the database.",
        "* Gets tasks from the database.",
        "* Extract status as string from property value",
        "* Extract title as string from property value",
        "* Compares task to most recent version of task stored in taskPageIdToStatusMap.\n * Returns any tasks that have a different status than their last version.",
        "* Sends task update notification using Sendgrid.",
        "* Finds or creates task in local data store and returns its status.",
        "* If property is paginated, returns an array of property items.\n *\n * Otherwise, it will return a single property item."
    ],
    "functions": [
        "setInitialTaskPageIdToStatusMap",
        "findAndSendEmailsForUpdatedTasks",
        "getTasksFromNotionDatabase",
        "getStatusPropertyValue",
        "getTitlePropertyValue",
        "findUpdatedTasks",
        "sendUpdateEmailWithSendgrid",
        "getPreviousTaskStatus",
        "getPropertyValue"
    ],
    "classes": []
}