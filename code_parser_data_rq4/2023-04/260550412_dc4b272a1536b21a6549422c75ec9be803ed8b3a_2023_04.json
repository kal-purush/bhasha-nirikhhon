{
    "identifiers": [
        "GatsbyNode",
        "fetch",
        "qs",
        "sourceNodes",
        "pluginOptions",
        "qs",
        "fetch",
        "apiHost",
        "profileQuery",
        "res",
        "res",
        "profile",
        "profiles",
        "profileData",
        "profile",
        "createNode",
        "createNodeId",
        "profile",
        "profile",
        "createContentDigest",
        "profileData",
        "avatar",
        "profileData",
        "profiles",
        "profiles",
        "page",
        "page",
        "qs",
        "fetch",
        "apiHost",
        "questionQuery",
        "res",
        "res",
        "question",
        "questions",
        "rest",
        "question",
        "profile",
        "question",
        "replies",
        "reply",
        "reply",
        "createNode",
        "createNodeId",
        "question",
        "question",
        "createContentDigest",
        "question",
        "profile",
        "createNodeId",
        "profile",
        "filteredReplies",
        "reply",
        "createNodeId",
        "reply",
        "topics",
        "topic",
        "createNodeId",
        "topic",
        "rest",
        "reply",
        "filteredReplies",
        "replyData",
        "reply",
        "createNode",
        "createNodeId",
        "reply",
        "reply",
        "createContentDigest",
        "replyData",
        "replyData",
        "profile",
        "createNodeId",
        "profile",
        "replyData",
        "questions",
        "questions",
        "page",
        "qs",
        "fetch",
        "apiHost",
        "query",
        "res",
        "res",
        "topicGroups",
        "topicGroup",
        "rest",
        "topicGroup",
        "createNodeId",
        "topicGroup",
        "createContentDigest",
        "topicGroup",
        "rest",
        "topics",
        "topic",
        "createNodeId",
        "topic",
        "createNode",
        "node",
        "qs",
        "fetch",
        "apiHost",
        "topicQuery",
        "res",
        "res",
        "topic",
        "topics",
        "createNode",
        "createNodeId",
        "topic",
        "topic",
        "createContentDigest",
        "topic",
        "topic",
        "qs",
        "fetch",
        "apiHost",
        "teamQuery",
        "res",
        "res",
        "team",
        "teams",
        "rest",
        "team",
        "createNode",
        "createNodeId",
        "team",
        "team",
        "createContentDigest",
        "team",
        "rest",
        "roadmaps",
        "roadmap",
        "createNodeId",
        "roadmap",
        "qs",
        "fetch",
        "apiHost",
        "roadmapQuery",
        "res",
        "res",
        "roadmap",
        "roadmaps",
        "rest",
        "roadmap",
        "createNodeId",
        "roadmap",
        "roadmap",
        "createContentDigest",
        "roadmap",
        "rest",
        "image",
        "createNodeId",
        "image",
        "image",
        "roadmap",
        "team",
        "createNodeId",
        "team",
        "githubUrls",
        "process",
        "node",
        "githubUrls",
        "url",
        "url",
        "url",
        "url",
        "owner",
        "repo",
        "issueNum",
        "fetch",
        "ghURL",
        "process",
        "res",
        "res",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "err",
        "err",
        "node",
        "createNode",
        "node",
        "createSchemaCustomization",
        "createTypes"
    ],
    "literals": [
        "'gatsby'",
        "'node-fetch'",
        "'qs'",
        "'sourceNodes'",
        "'avatar'",
        "${apiHost}/api/profiles?${profileQuery}",
        "SqueakProfile",
        "squeak-profile-${profile.id}",
        "SqueakProfile",
        "'id'",
        "'id'",
        "'id'",
        "${apiHost}/api/questions?${questionQuery}",
        "Question ${question.id} has no profile",
        "SqueakQuestion",
        "squeak-question-${question.id}",
        "SqueakQuestion",
        "squeak-profile-${profile.data.id}",
        "squeak-reply-${reply.id}",
        "squeak-topic-${topic.id}",
        "SqueakReply",
        "squeak-reply-${reply.id}",
        "SqueakReply",
        "'text/markdown'",
        "squeak-profile-${profile.data.id}",
        "'id'",
        "${apiHost}/api/topic-groups?${query}",
        "squeak-topic-group-${topicGroup.id}",
        "SqueakTopicGroup",
        "squeak-topic-${topic.id}",
        "${apiHost}/api/topics?${topicQuery}",
        "squeak-topic-${topic.id}",
        "SqueakTopic",
        "'id'",
        "${apiHost}/api/teams?${teamQuery}",
        "squeak-team-${team.id}",
        "SqueakTeam",
        "squeak-roadmap-${roadmap.id}",
        "'id'",
        "'id'",
        "'url'",
        "${apiHost}/api/roadmaps?${roadmapQuery}",
        "squeak-roadmap-${roadmap.id}",
        "SqueakRoadmap",
        "squeak-image-${image.data.id}",
        "squeak-team-${team.id}",
        "'github.com'",
        "'/'",
        "https://api.github.com/repos/${owner}/${repo}/issues/${issueNum}",
        "token ${process.env.GITHUB_API_KEY}",
        "'+1'",
        "'-1'",
        "'createSchemaCustomization'",
        "type StrapiImage implements Node {\n            id: ID!\n            url: String!\n        }\n\n        type SqueakProfile implements Node {\n            id: ID!\n            squeakId: Int!\n            firstName: String\n            lastName: String\n        }\n\n        type SqueakQuestion implements Node {\n            id: ID!\n            squeakId: Int!\n            body: String!\n            createdAt: Date! @dateformat\n            profile: SqueakProfile! @link(by: \"id\", from: \"profile.id\")\n            replies: [SqueakReply!] @link(by: \"id\", from: \"replies.id\")\n            topics: [SqueakTopic!] @link(by: \"id\", from: \"topics.id\")\n        }\n\n        type SqueakReply implements Node {\n            id: ID!\n            squeakId: Int!\n            body: String!\n            createdAt: Date! @dateformat\n            profile: SqueakProfile! @link(by: \"id\", from: \"profile.id\")\n            question: SqueakQuestion! @link(from: \"id\", to: \"question\")\n        }\n\n        type SqueakTopicGroup implements Node {\n            id: ID!\n            squeakId: Int!\n            slug: String\n            label: String!\n            topics: [SqueakTopic!] @link(by: \"id\", from: \"topics.id\")\n        }\n\n        type SqueakTopic implements Node {\n            id: ID!\n            squeakId: Int!\n            slug: String!\n            label: String!\n        }\n\n        type SqueakTeam implements Node {\n            id: ID!\n            squeakId: Int!\n            name: String!\n            profiles: [SqueakProfile!] @link(by: \"id\", from: \"profiles.id\")\n            roadmaps: [SqueakRoadmap!] @link(by: \"id\", from: \"roadmaps.id\")\n        }\n\n        type SqueakRoadmap implements Node {\n            id: ID!\n            squeakId: Int!\n            title: String!\n            description: String!\n            image: StrapiImage\n            slug: String!\n            dateCompleted: Date @dateformat\n            projectedCompletion: Date @dateformat\n            category: String!\n            milestone: Boolean!\n            completed: Boolean!\n            betaAvailable: Boolean!\n            githubUrls: [String!]!\n            githubPages: [GithubPage!]!\n            teams: [SqueakTeam!] @link(by: \"id\", from: \"teams.id\")\n        }\n\n        type GithubPage {\n            title: String\n            html_url: String\n            number: String\n            closed_at: String\n            reactions: GithubReactions\n        }\n\n        type GithubReactions {\n            hooray: Int\n            heart: Int\n            eyes: Int\n            plus1: Int\n            minus1: Int\n        }"
    ],
    "variables": [
        "sourceNodes",
        "pluginOptions",
        "actions",
        "page",
        "profileQuery",
        "profiles",
        "questionQuery",
        "questions",
        "filteredReplies",
        "query",
        "topicGroups",
        "node",
        "topicQuery",
        "topics",
        "teamQuery",
        "teams",
        "roadmapQuery",
        "roadmaps",
        "node",
        "owner",
        "repo",
        "issueNum",
        "ghURL",
        "createSchemaCustomization",
        "actions"
    ],
    "comments": [
        "Fetch all profiles",
        "prettify URL",
        "async function createImageNode(imageURL) {\n                return createRemoteFileNode({\n                    url: imageURL,\n                    parentNodeId: node.id,\n                    createNode,\n                    createNodeId,\n                    cache,\n                    store,\n                }).catch((e) => console.error(e))\n            }\n            if (node.imageURL) {\n                const imageNode = await createImageNode(node.imageURL)\n                node.avatar___NODE = imageNode && imageNode.id\n            }",
        "Fetch all questions",
        "Fetch all topic groups",
        "Fetch all topics",
        "prettify URL",
        "Fetch all teams",
        "prettify URL",
        "Fetch all roadmaps",
        "if (image) {\n            const url = `https://res.cloudinary.com/${image.cloud_name}/v${image.version}/${image.publicId}.${image.format}`\n\n            const fileNode = await createRemoteFileNode({\n                url,\n                parentNodeId: node.id,\n                createNode,\n                createNodeId,\n                cache,\n            })\n            node.thumbnail___NODE = fileNode?.id\n        }"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}