{
    "identifiers": [
        "sys",
        "sys",
        "implementation",
        "name",
        "asyncio",
        "json",
        "os",
        "sys",
        "implementation",
        "name",
        "uasyncio",
        "asyncio",
        "ujson",
        "json",
        "uos",
        "os",
        "method",
        "url",
        "version",
        "reader",
        "asyncio",
        "StreamReader",
        "writer",
        "asyncio",
        "StreamWriter",
        "method",
        "url",
        "version",
        "reader",
        "writer",
        "ignore_headers",
        "reader",
        "reader",
        "readline",
        "header_line",
        "decode",
        "split",
        "len",
        "header_items",
        "ignore_headers",
        "headers",
        "header_items",
        "header_items",
        "strip",
        "headers",
        "headers",
        "headers",
        "startswith",
        "reader",
        "read",
        "headers",
        "raw_body",
        "decode",
        "headers",
        "startswith",
        "reader",
        "read",
        "headers",
        "json",
        "loads",
        "raw_body",
        "decode",
        "reader",
        "read",
        "headers",
        "ValueError",
        "buf",
        "buf",
        "writer",
        "write",
        "buf",
        "encode",
        "writer",
        "write",
        "buf",
        "writer",
        "drain",
        "reader",
        "read",
        "writer",
        "close",
        "request",
        "HttpRequest",
        "data",
        "code",
        "headers",
        "default_headers",
        "request",
        "data",
        "code",
        "headers",
        "headers",
        "isinstance",
        "data",
        "len",
        "data",
        "isinstance",
        "data",
        "len",
        "json",
        "dumps",
        "data",
        "isinstance",
        "data",
        "len",
        "json",
        "dumps",
        "data",
        "isinstance",
        "data",
        "data",
        "os",
        "stat",
        "data",
        "data",
        "default_headers",
        "header",
        "_default_headers",
        "header",
        "headers",
        "headers",
        "_default_headers",
        "header",
        "code",
        "request",
        "write",
        "code",
        "request",
        "write",
        "code",
        "request",
        "write",
        "code",
        "request",
        "write",
        "code",
        "request",
        "write",
        "header",
        "headers",
        "request",
        "write",
        "header",
        "headers",
        "header",
        "request",
        "write",
        "isinstance",
        "data",
        "request",
        "write",
        "data",
        "isinstance",
        "data",
        "request",
        "write",
        "json",
        "dumps",
        "data",
        "isinstance",
        "data",
        "request",
        "write",
        "json",
        "dumps",
        "data",
        "isinstance",
        "data",
        "data",
        "open",
        "data",
        "encoding",
        "f",
        "f",
        "read",
        "s",
        "request",
        "write",
        "s",
        "HttpResponse",
        "request",
        "HttpRequest",
        "code",
        "message",
        "message",
        "request",
        "message",
        "code",
        "code",
        "request",
        "code",
        "code",
        "request",
        "code",
        "code",
        "request",
        "code",
        "code",
        "request",
        "code",
        "port",
        "address",
        "port",
        "address",
        "route",
        "methods",
        "func",
        "routes",
        "methods",
        "func",
        "func",
        "decorator",
        "route",
        "methods",
        "func",
        "async_routes",
        "methods",
        "func",
        "func",
        "decorator",
        "reader",
        "asyncio",
        "StreamReader",
        "writer",
        "asyncio",
        "StreamWriter",
        "reader",
        "readline",
        "req_line",
        "decode",
        "split",
        "len",
        "req_items",
        "HttpRequest",
        "req_items",
        "req_items",
        "req_items",
        "reader",
        "writer",
        "request",
        "method",
        "request",
        "url",
        "end",
        "request",
        "_process_headers",
        "HttpError",
        "request",
        "response",
        "_send",
        "failed",
        "request",
        "_process_body",
        "HttpError",
        "request",
        "response",
        "_send",
        "failed",
        "request",
        "url",
        "routes",
        "request",
        "method",
        "routes",
        "request",
        "url",
        "routes",
        "request",
        "url",
        "request",
        "HttpError",
        "request",
        "HttpError",
        "request",
        "request",
        "method",
        "request",
        "url",
        "async_routes",
        "request",
        "method",
        "async_routes",
        "request",
        "url",
        "async_routes",
        "request",
        "url",
        "request",
        "HttpError",
        "request",
        "HttpError",
        "request",
        "request",
        "method",
        "HttpError",
        "request",
        "request",
        "url",
        "response",
        "_send",
        "response",
        "code",
        "response",
        "data",
        "request",
        "close",
        "server",
        "asyncio",
        "start_server",
        "handle",
        "address",
        "port",
        "server",
        "close"
    ],
    "literals": [
        "\"cpython\"",
        "\"micropython\"",
        "\"ascii\"",
        "\": \"",
        "\"\"",
        "\"Content-Length\"",
        "\"Content-Type\"",
        "\"Content-Type\"",
        "\"text/html\"",
        "\"Content-Length\"",
        "\"utf-8\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"Content-Length\"",
        "\"utf-8\"",
        "\"Content-Length\"",
        "\"Could not parse Request Body\"",
        "\"Could not parse Request Body\"",
        "'utf8'",
        "\"Connection\"",
        "\"close\"",
        "\"Access-Control-Allow-Origin\"",
        "\"*\"",
        "\"Content-Length\"",
        "\"Content-Type\"",
        "\"text/html\"",
        "\"Content-Length\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"Content-Length\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"file\"",
        "\"Content-Length\"",
        "\"Content-Type\"",
        "f\"HTTP/1.1 200 OK\\r\\n\"",
        "f\"HTTP/1.1 400 Bad Request\\r\\n\"",
        "f\"HTTP/1.1 404 Not Found\\r\\n\"",
        "f\"HTTP/1.1 405 Method Not Allowed\\r\\n\"",
        "f\"HTTP/1.1 500 Internal Server Error\\r\\n\"",
        "f\"{header}: {self.headers[header]}\\r\\n\"",
        "f\"\\r\\n\"",
        "\"file\"",
        "\"utf-8\"",
        "''",
        "\"The request (header or body) is malformatted\"",
        "\"The requested URL was not found on this server.\"",
        "\"Method Not Allowed\"",
        "\"Internal Server Error\"",
        "'0.0.0.0'",
        "\"GET\"",
        "\"GET\"",
        "\"ascii\"",
        "\" \"",
        "f\"Request: {request.method:.10} {request.url:.30} -> \"",
        "\"\"",
        "\"Could not process header fields\"",
        "f\"400 (Could not process header)\"",
        "\"Could not process body\"",
        "f\"400 (Could not process body)\"",
        "f\"Method {request.method} not allowed\"",
        "f\"Method {request.method} not allowed\"",
        "f\"URL {request.url} not found\"",
        "f\"{response.code} {str(response.data):.100}\""
    ],
    "variables": [
        "method",
        "url",
        "version",
        "reader",
        "writer",
        "headers",
        "header_line",
        "header_items",
        "raw_body",
        "raw_body",
        "body",
        "raw_body",
        "body",
        "raw_body",
        "request",
        "data",
        "code",
        "headers",
        "headers",
        "_default_headers",
        "_default_headers",
        "_default_headers",
        "_default_headers",
        "_default_headers",
        "_default_headers",
        "_default_headers",
        "_default_headers",
        "_default_headers",
        "header",
        "s",
        "port",
        "address",
        "routes",
        "async_routes",
        "server",
        "route",
        "route",
        "req_line",
        "req_items",
        "request",
        "failed",
        "failed",
        "response",
        "failed",
        "response",
        "response",
        "response",
        "response",
        "response",
        "response",
        "response",
        "response",
        "server"
    ],
    "comments": [
        "await self.writer.awrite(buf)",
        "Seems to be required for some Browsers",
        "request line should be like",
        "GET /index.html HTTP/1.1"
    ],
    "docstrings": [
        "\"\"\"A basic http request\n    \"\"\"",
        "\"\"\"Initialize a http request. You shouldn't have to do it by yourself.\n\n        Args:\n            method (str): The HTTP method (GET, POST, DELETE, ...)\n            url (str): The requested URL\n            version (str): The HTTP version\n            reader (asyncio.StreamReader): an async stream reader\n            writer (asyncio.StreamWriter): an async stream writer\n        \"\"\"",
        "\"\"\"A HTTP Server that proviedes basic functionality and runs on micropython.\n    \"\"\"",
        "\"\"\"Initializes the server.\n\n        Args:\n            port (int, optional): The port, on which the server listens. Defaults to 80.\n            address (str, optional): The IP address of the server. Defaults to '0.0.0.0'.\n        \"\"\"",
        "\"\"\"Route decorator\"\"\"",
        "\"\"\"Route decorator for async routes\"\"\""
    ],
    "functions": [
        "_process_headers",
        "_process_body",
        "write",
        "close",
        "_send",
        "route",
        "decorator",
        "async_route",
        "decorator",
        "handle",
        "run",
        "stop"
    ],
    "classes": [
        "HttpRequest",
        "HttpResponse",
        "HttpError",
        "HttpServer"
    ]
}