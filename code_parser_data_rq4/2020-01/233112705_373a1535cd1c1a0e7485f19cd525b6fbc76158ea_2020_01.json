{
    "identifiers": [
        "apache_beam",
        "beam",
        "things_the_pipeline_will_use",
        "pipeline_options",
        "CustomOptions",
        "things_the_pipeline_will_use",
        "pipeline_pardo",
        "WordSplitCustomPardo",
        "DataPrinterCustomPardo",
        "CustomOptions",
        "beam",
        "Pipeline",
        "options",
        "pipeline_options",
        "pipeline",
        "beam",
        "Create",
        "pipeline",
        "input_read_transform",
        "beam",
        "ParDo",
        "WordSplitCustomPardo",
        "read_transform_pcollection",
        "word_split_transform",
        "beam",
        "ParDo",
        "DataPrinterCustomPardo",
        "pardo_transform_pcollection",
        "data_printer_transform",
        "beam",
        "io",
        "WriteToText",
        "pipeline_options",
        "output_folder",
        "file_name_suffix",
        "pardo_transform_pcollection",
        "sink_transform",
        "pipeline_builder"
    ],
    "literals": [
        "'To be, or not to be: that is the question: '",
        "\"Whether 'tis nobler in the mind to suffer \"",
        "'The slings and arrows of outrageous fortune, '",
        "'Or to take arms against a sea of troubles, '",
        "\".txt\"",
        "'__main__'",
        "\"YOU ARE RUNNING A BEAUTIFUL PIPELINE, ENJOY ;)\""
    ],
    "variables": [
        "pipeline_options",
        "input_read_transform",
        "read_transform_pcollection",
        "word_split_transform",
        "pardo_transform_pcollection",
        "data_printer_transform",
        "pardo_print_transform_pcollection",
        "sink_transform",
        "last_transform"
    ],
    "comments": [
        "The pipeline will use the custom options that we designed for it, so, we have to specify the pipeline Options on",
        "builder of the beam.Pipeline.",
        "https://beam.apache.org/documentation/programming-guide/#configuring-pipeline-options",
        "WHY are we using the with statement? https://stackoverflow.com/a/52282001/11293189",
        "We will be building the pipeline using the variable 'pipeline', you will see some other codes using 'p'",
        "instead of 'pipeline' referring to this variable.",
        "For example, we will build a simple batch pipeline that reads from a generated PCollection and writes",
        "the words separately into a text file. In order to do that we will ahve to create a PCollection and make it",
        "as source from our pipeline.",
        "https://beam.apache.org/documentation/programming-guide/#creating-a-pcollection",
        "Now that we have the input PCollection we have to apply it as source four our pipeline, in order to do that",
        "we will use the following syntax:",
        "------------------------------------------------------------------------------------------------------------",
        "[Output PCollection] = [Input PCollection] | [Transform]",
        "------------------------------------------------------------------------------------------------------------",
        "https://beam.apache.org/documentation/programming-guide/#applying-transforms",
        "Now we want to apply separate each phrase into individual words, to do so we will be using a Pardo transform",
        "https://beam.apache.org/documentation/programming-guide/#core-beam-transforms",
        "If you don't trust anyone and think that returning a list won't separate this phrase into different words",
        "putting them on a PCollection each, uncomment the following line and apply the print ParDo",
        "Lastly, we have to set a sink/output for all the processed data, in this case we will write to a txt document.",
        "https://beam.apache.org/documentation/programming-guide/#pipeline-io-writing-data",
        "The following code is the equivalent to all the single steps that we did above, following the syntax:",
        "------------------------------------------------------------------------------------------------------------",
        "[Final Output PCollection] = ([Initial Input PCollection] | [First Transform]",
        "| [Second Transform]",
        "| [Third Transform])",
        "------------------------------------------------------------------------------------------------------------",
        "last_transform = (pipeline",
        "| \"replicated\" >> word_split_transform",
        "| \"replicate2d\" >> data_printer_transform",
        "| \"replicated3\" >> sink_transform)"
    ],
    "docstrings": [],
    "functions": [
        "pipeline_builder"
    ],
    "classes": []
}