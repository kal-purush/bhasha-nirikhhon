{
    "identifiers": [
        "telegram",
        "ext",
        "Updater",
        "CallbackContext",
        "CommandHandler",
        "CallbackQueryHandler",
        "MessageHandler",
        "Filters",
        "functools",
        "wraps",
        "io",
        "BytesIO",
        "telegram",
        "Update",
        "os",
        "random",
        "requests",
        "os",
        "environ",
        "get",
        "TELEGRAM_API_KEY",
        "i",
        "i",
        "os",
        "environ",
        "get",
        "split",
        "x",
        "x",
        "LIST_OF_ADMINS",
        "x",
        "Updater",
        "token",
        "TELEGRAM_API_KEY",
        "use_context",
        "updater",
        "dispatcher",
        "random",
        "choice",
        "CONVO_STARTS",
        "func",
        "wraps",
        "func",
        "update",
        "Update",
        "context",
        "CallbackContext",
        "args",
        "kwargs",
        "update",
        "effective_user",
        "id",
        "user_id",
        "LIST_OF_ADMINS",
        "format",
        "user_id",
        "func",
        "update",
        "context",
        "args",
        "kwargs",
        "wrapped",
        "restricted",
        "update",
        "Update",
        "context",
        "CallbackContext",
        "context",
        "bot",
        "send_message",
        "chat_id",
        "update",
        "message",
        "chat_id",
        "text",
        "response",
        "CommandHandler",
        "start",
        "dispatcher",
        "add_handler",
        "start_handler",
        "update",
        "Update",
        "context",
        "CallbackContext",
        "update",
        "effective_user",
        "id",
        "context",
        "bot",
        "send_message",
        "chat_id",
        "update",
        "message",
        "chat_id",
        "text",
        "response",
        "file_obj",
        "file_obj",
        "requests",
        "post",
        "url",
        "files",
        "files",
        "req",
        "content",
        "req",
        "json",
        "restricted",
        "update",
        "Update",
        "context",
        "CallbackContext",
        "update",
        "message",
        "caption",
        "context",
        "bot",
        "get_file",
        "update",
        "message",
        "photo",
        "file_id",
        "BytesIO",
        "file",
        "download_as_bytearray",
        "upload",
        "f",
        "result",
        "beginning",
        "result",
        "context",
        "bot",
        "send_message",
        "chat_id",
        "update",
        "message",
        "chat_id",
        "text",
        "response",
        "LIST_OF_ADMINS",
        "len",
        "LIST_OF_ADMINS",
        "CommandHandler",
        "echo",
        "dispatcher",
        "add_handler",
        "echo_handler",
        "MessageHandler",
        "Filters",
        "photo",
        "photo",
        "dispatcher",
        "add_handler",
        "photo_handler",
        "updater",
        "start_polling"
    ],
    "literals": [
        "'TELEGRAM_API_KEY'",
        "'Please set TELEGRAM_API_KEY in .telegram-env'",
        "\"LIST_OF_ADMINS\"",
        "''",
        "\",\"",
        "''",
        "\"Here's what I found: \"",
        "\"In that image I got: \"",
        "\"Here's what that image contains: \"",
        "\"Unauthorized access denied for {}.\"",
        "\"I'm an image recognition telegram bot powered by YOLOv3.  Share a photo and I'll tell you what I see.\"",
        "'start'",
        "'ContentType'",
        "'multipart/form-data'",
        "'file'",
        "'tg-upload.txt'",
        "'image/jpeg'",
        "'http://processor:5000/upload'",
        "'Recognising:'",
        "'I was unable to process that for some reason.'",
        "'about to query image_processor API'",
        "'object_string'",
        "'%s%s'",
        "'object_string'",
        "\"I couldn't see anything in that image.\"",
        "'Admin list: '",
        "'Serving echo handler'",
        "'echo'",
        "'Serving photo handler'",
        "'About to poll...'"
    ],
    "variables": [
        "TELEGRAM_API_KEY",
        "LIST_OF_ADMINS",
        "LIST_OF_ADMINS",
        "updater",
        "dispatcher",
        "CONVO_STARTS",
        "user_id",
        "response",
        "start_handler",
        "response",
        "headers",
        "files",
        "url",
        "req",
        "file",
        "response",
        "f",
        "result",
        "response",
        "response",
        "echo_handler",
        "photo_handler"
    ],
    "comments": [
        "",
        "This decorator lets you limit a response to only admins:",
        "TODO: Set this URL via env var",
        "default"
    ],
    "docstrings": [
        "\"\"\" Bots should implement a `/start` command \"\"\"",
        "\"\"\" This echo handler tells you your `chat_id` \"\"\"",
        "\"\"\" A function to utilise the image_processor API \"\"\"",
        "\"\"\" This one handles the photo transfer from telegram. \"\"\"",
        "\"\"\" This makes an echo endpoint available to find your own `chat_id`. \n    If the LIST_OF_ADMINS contains < 1 chat_id, the photo handler is not served, instead\n    the echo handler is served.  Once you've got the chat ID, add it to `.telegram-env`\n    and restart the compose service.\n    \"\"\""
    ],
    "functions": [
        "beginning",
        "restricted",
        "wrapped",
        "start",
        "echo",
        "upload",
        "photo"
    ],
    "classes": []
}