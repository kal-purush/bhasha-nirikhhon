{
    "identifiers": [
        "entities",
        "error_response",
        "ErrorResponse",
        "entities",
        "ingredient_entity",
        "Ingredient",
        "entities",
        "ingredient_recipe",
        "IngredientRecipe",
        "entities",
        "messages",
        "Message",
        "entities",
        "recipe_entity",
        "Recipe",
        "entities",
        "response",
        "Response",
        "errors",
        "recipe_errors",
        "recipe_errors",
        "errors",
        "recipe_errors",
        "RecipeDoesNotExist",
        "NotCorrectFormatError",
        "RecipeCreationSuccess",
        "facades",
        "recipe_facade",
        "recipe_facade",
        "logs",
        "Logger",
        "models",
        "ingredients_model",
        "IngredientsModel",
        "models",
        "ingredients_recipes_model",
        "IngredientsRecipesModel",
        "models",
        "recipe_model",
        "RecipeModel",
        "recipe_request",
        "Logger",
        "logger",
        "debug",
        "Recipe",
        "recipe_request",
        "recipe_facade",
        "recipe_creation_validation",
        "recipe",
        "NotCorrectFormatError",
        "related_recipe",
        "recipe",
        "recipes_related",
        "RecipeModel",
        "find_by_name",
        "related_recipe",
        "RecipeDoesNotExist",
        "ingredient",
        "recipe",
        "ingredients",
        "ingredient",
        "IngredientsModel",
        "find_by_name",
        "ingredient",
        "IngredientsModel",
        "recipe",
        "name",
        "ingredient",
        "save",
        "RecipeModel",
        "recipe_request",
        "recipe",
        "save",
        "ingredient",
        "recipe",
        "ingredients",
        "IngredientsRecipesModel",
        "ingredient",
        "quantity",
        "recipe",
        "id",
        "ingredient",
        "ingredient_recipe",
        "save",
        "Response",
        "recipe_errors",
        "Message",
        "recipe_errors",
        "toJson",
        "NotCorrectFormatError",
        "ErrorResponse",
        "recipe",
        "logger",
        "warning",
        "Response",
        "error_response",
        "code",
        "error_response",
        "toJson",
        "ErrorResponse",
        "recipe",
        "logger",
        "error",
        "Response",
        "error_response",
        "code",
        "error_response",
        "toJson"
    ],
    "literals": [
        "'recipe_creation::controller::flask'",
        "'Creating recipe'",
        "'RecipeCreationSuccess'",
        "'status'",
        "'RecipeCreationSuccess'",
        "'message'",
        "'NotCorrectFormatError'",
        "'The recipe has not a correct format'",
        "'CreatingRecipeError'",
        "'Database error'"
    ],
    "variables": [
        "logger",
        "recipe",
        "ingredient",
        "recipe",
        "ingredient_recipe",
        "error_response",
        "error_response"
    ],
    "comments": [
        "TODO:",
        "Error 401: La petici칩n viene sin el token de sesi칩n",
        "Error 403: El token ha caducado",
        "1. Comprobar si los datos de la receta son validos (hay que crear un facade)",
        "1.1 El nombre de receta debe de estar informado",
        "1.2 Debe de tener al menos un igrediente",
        "1.3 Los pasos de la receta deben de estar informados",
        "1.4 La foto debe de estar informada",
        "2. Hay que comprobar la coherencia de las relaciones en base de datos",
        "2.1 Si la receta tiene recetas relacionadas hay que comprobar que dichas recetas existen ya",
        "3. Hay que dar de alta los ingredientes",
        "3.1 Comprobar si los ingredientes existen en base de datos y si no existen crearlos",
        "4. Hay que salvar la receta en base de datos",
        "5. Hay que salvar la relaci칩n entre los ingredientes y la receta mediante el modelo",
        "IngredientsRecipesModel a침adiendo la cantidad de cada ingrediente"
    ],
    "docstrings": [],
    "functions": [
        "recipes_creation"
    ],
    "classes": []
}