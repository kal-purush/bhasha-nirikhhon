{
    "identifiers": [
        "sys",
        "pulp",
        "math",
        "time",
        "ast",
        "json",
        "filename",
        "open",
        "filename",
        "fileobj",
        "line",
        "fileobj",
        "line",
        "split",
        "value",
        "ast",
        "literal_eval",
        "graph_dict",
        "ast",
        "literal_eval",
        "graph_dict",
        "eval",
        "graph_dict",
        "ast",
        "literal_eval",
        "graph_dict",
        "key",
        "costs",
        "costs",
        "key",
        "nodes",
        "clauses",
        "costs",
        "graph_literals",
        "nodes",
        "clauses",
        "costs",
        "graph_literals",
        "LpProblem",
        "pulp",
        "LpMaximize",
        "time",
        "time",
        "LpVariable",
        "dicts",
        "nodes",
        "lowBound",
        "upBound",
        "cat",
        "pulp",
        "LpInteger",
        "model",
        "lpSum",
        "x",
        "n",
        "costs",
        "n",
        "n",
        "nodes",
        "n",
        "graph_literals",
        "clause",
        "clauses",
        "model",
        "lpSum",
        "x",
        "n",
        "n",
        "x",
        "n",
        "n",
        "clause",
        "time",
        "time",
        "model",
        "solve",
        "GUROBI_CMD",
        "msg",
        "model",
        "status",
        "model",
        "objective",
        "value",
        "x",
        "n",
        "name",
        "x",
        "n",
        "varValue",
        "costs",
        "n",
        "n",
        "nodes",
        "len",
        "sys",
        "argv",
        "sys",
        "exit",
        "sys",
        "argv",
        "os",
        "path",
        "exists",
        "input_file",
        "sys",
        "stderr",
        "write",
        "input_file",
        "sys",
        "exit",
        "loadGraphData",
        "input_file",
        "input",
        "input",
        "input",
        "input",
        "time",
        "time",
        "maxSATSolve",
        "nodes",
        "clauses",
        "costs",
        "graph_literals",
        "x",
        "x",
        "sol",
        "x",
        "x",
        "sum",
        "x",
        "x",
        "sol_nodes",
        "sol",
        "result",
        "update",
        "result",
        "update",
        "time",
        "time",
        "overall_resolution_time",
        "result",
        "update",
        "sol_total_cost",
        "result",
        "update",
        "x",
        "x",
        "x",
        "sol_nodes",
        "result",
        "update",
        "len",
        "sol_nodes",
        "result",
        "update",
        "json",
        "dumps",
        "result",
        "indent",
        "sort_keys",
        "main"
    ],
    "literals": [
        "'r'",
        "\"=\"",
        "'nodes'",
        "'clauses'",
        "'costs'",
        "'graph_literals'",
        "'inf'",
        "'nodes'",
        "'clauses'",
        "'costs'",
        "'graph_literals'",
        "\"simple\"",
        "\"x\"",
        "'Optimization Status= '",
        "'\\nOptimization Value = '",
        "'\\nSolution='",
        "\"Please specify an input file with the problem specifiacation (TXT for the moment): \"",
        "\"Example: $> python optim.py simple.txt\"",
        "\"Input file not found: \"",
        "\"\\n\"",
        "\"nodes\"",
        "\"clauses\"",
        "\"costs\"",
        "\"graph_literals\"",
        "'status'",
        "'ok'",
        "'time_ms'",
        "'cost'",
        "'solution'",
        "'size'",
        "\"status\"",
        "\"infeasible\"",
        "'__main__'"
    ],
    "variables": [
        "graph_dict",
        "key",
        "value",
        "graph_dict",
        "key",
        "nodes",
        "clauses",
        "costs",
        "graph_literals",
        "costs",
        "key",
        "model",
        "start_time",
        "x",
        "start_time",
        "input_file",
        "input",
        "nodes",
        "clauses",
        "costs",
        "graph_literals",
        "overall_resolution_time",
        "sol",
        "sol_nodes",
        "sol_total_cost",
        "result"
    ],
    "comments": [
        "!/usr/local/bin/python3.7",
        "Author: Pasquale Malacaria <p.malacaria@qmul.ac.uk>",
        "Modified by: Martin Barrere <m.barrere@imperial.ac.uk>",
        "sys.path.append(\"/Library/gurobi810/mac64/bin/\")",
        "print (sys.path)",
        "nodes=[1,2,3,4,5]",
        "clauses=[[-5,-4,-1,-2],[-5,-4,-2,-3]] #CNF",
        "costs={1:2,2:3.2,3:2,4:10,5:100000}",
        "graph_literals=[1,2,3,4,5]",
        "filename = 'input1/out-0n--exec1-.txt'",
        "filename = 'simple.txt'",
        "filename = 'input2/out-5000n--exec10-.txt'",
        "filename = 'input1/out-10000n--exec1-.txt'",
        "filename = '../output/2018.12.10/set10000-20000/out-10000n--exec1-.txt'",
        "print(key, ':', costs[key])",
        "costs[key]=955555555;",
        "costs[key]=sys.float_info.max;",
        "def maxSATSolve(nodes=nodes,clauses=clauses, costs=costs, graph_literals=graph_literals):",
        "print(\"building constraints time = %s seconds ---\" % (time.time() - start_time))",
        "print(\"optimization solution time = %s seconds ---\" % (time.time() - start_time))",
        "print (\"Input file not found: \" + input_file, file=sys.stderr)",
        "print(\"Overall time = %s seconds ---\" % (time.time() - overall_resolution_time))",
        "print(sol[0],'OK ' if sol[1]==1 else 'NOT FEASIBLE', '\\nSolution size =',len(sol_nodes), '\\nTotal cost = ', sol_total_cost, sol[4], sol_nodes)",
        "result.update({ 'solution' : [{x[0].replace(\"'\",\"\\\"\"):str(x[2])} for x in sol_nodes]})",
        "result.update({ 'solution' : [{x[0]:str(x[2])} for x in sol_nodes]})",
        "print (result)"
    ],
    "docstrings": [],
    "functions": [
        "loadGraphData",
        "maxSATSolve",
        "main"
    ],
    "classes": []
}