{
    "identifiers": [
        "NodeKey",
        "secp256k1",
        "getTempDir",
        "nodeKey",
        "expect",
        "nodeKey",
        "expect",
        "secp256k1",
        "nodeKey",
        "expect",
        "secp256k1",
        "Buffer",
        "nodeKey",
        "describe",
        "test",
        "NodeKey",
        "validateNodeKey",
        "nodeKey",
        "test",
        "NodeKey",
        "NodeKey",
        "getTempDir",
        "nodeKey",
        "path",
        "NodeKey",
        "path",
        "expect",
        "nodeKey",
        "nodeKeyFromDisk",
        "test",
        "NodeKey",
        "NodeKey",
        "getTempDir",
        "nodeKey",
        "path",
        "password",
        "NodeKey",
        "path",
        "password",
        "expect",
        "nodeKey",
        "nodeKeyFromDisk",
        "test",
        "NodeKey",
        "NodeKey",
        "getTempDir",
        "nodeKey",
        "path",
        "password",
        "expect",
        "NodeKey",
        "path",
        "test",
        "NodeKey",
        "Buffer",
        "validateNodeKey",
        "nodeKey",
        "test",
        "NodeKey",
        "Buffer",
        "validateNodeKey",
        "nodeKey",
        "test",
        "NodeKey",
        "Buffer",
        "validateNodeKey",
        "nodeKey"
    ],
    "literals": [
        "'../../lib/nodekey/NodeKey'",
        "'secp256k1'",
        "'../utils'",
        "'privKey'",
        "'hex'",
        "'NodeKey'",
        "'it should generate a valid node key'",
        "'generate'",
        "'it should write a nodekey to disk and read it back without encryption'",
        "'generate'",
        "'it should write a nodekey to disk and read it back with encryption'",
        "'wasspord'",
        "'generate'",
        "'it should write a nodekey to disk with encryption and fail reading it with the wrong password'",
        "'wasspord'",
        "'generate'",
        "'wrongpassword'",
        "'it should create a valid nodekey from a 32 byte buffer'",
        "'it should create a valid nodekey from a greater than 32 byte buffer'",
        "'it should create a valid nodekey from a lesser than 32 byte buffer'"
    ],
    "variables": [
        "nodeKey",
        "nodeKey",
        "path",
        "nodeKeyFromDisk",
        "password",
        "nodeKey",
        "path",
        "nodeKeyFromDisk",
        "password",
        "nodeKey",
        "path",
        "nodeKey",
        "nodeKey",
        "nodeKey"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [
        "validateNodeKey"
    ],
    "classes": []
}