{
    "identifiers": [
        "milc",
        "cli",
        "format_ansi",
        "prompt",
        "args",
        "kwargs",
        "args",
        "kwargs",
        "kwargs",
        "cli",
        "args",
        "cli",
        "args",
        "no",
        "cli",
        "args",
        "cli",
        "args",
        "yes",
        "prompt",
        "prompt",
        "input",
        "format_ansi",
        "prompt",
        "args",
        "answer",
        "prompt",
        "answer",
        "lower",
        "answer",
        "lower",
        "prompt",
        "args",
        "confirm",
        "answer_type",
        "kwargs",
        "args",
        "kwargs",
        "kwargs",
        "prompt",
        "input",
        "format_ansi",
        "prompt",
        "args",
        "answer",
        "confirm",
        "yesno",
        "answer",
        "answer_type",
        "answer",
        "e",
        "cli",
        "log",
        "error",
        "answer",
        "answer_type",
        "e",
        "answer_type",
        "answer",
        "e",
        "cli",
        "log",
        "error",
        "answer",
        "answer_type",
        "e"
    ],
    "literals": [
        "'no'",
        "'yes'",
        "' [Y/n] '",
        "' [y/N] '",
        "'y'",
        "'yes'",
        "'n'",
        "'no'",
        "'%s [%s] '",
        "'Is the answer \"%s\" correct?'",
        "'Could not convert answer (%s) to type %s: %s'",
        "'Could not convert answer (%s) to type %s: %s'"
    ],
    "variables": [
        "args",
        "prompt",
        "prompt",
        "answer",
        "args",
        "prompt",
        "answer"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"Functions to collect user input.\n\"\"\"",
        "\"\"\"Displays prompt to the user and gets a yes or no response.\n\n    Returns True for a yes and False for a no.\n\n    If you add `--yes` and `--no` arguments to your program the user can answer questions by passing command line flags.\n\n        @add_argument('-y', '--yes', action='store_true', arg_only=True, help='Answer yes to all questions.')\n        @add_argument('-n', '--no', action='store_true', arg_only=True, help='Answer no to all questions.')\n\n    Arguments:\n        prompt\n            The prompt to present to the user. Can include ANSI and format strings like milc's `cli.print()`.\n\n        default\n            Whether to default to a Yes or No when the user presses enter.\n\n            None- force the user to enter Y or N\n\n            True- Default to yes\n\n            False- Default to no\n    \"\"\"",
        "\"\"\"Prompt the user to answer a question with a free-form input.\n\n        prompt\n            The prompt to present to the user. Can include ANSI and format strings like milc's `cli.print()`.\n\n        default\n            The value to return when the user doesn't enter any value. Use None to prompt until they enter a value.\n\n        answer_type\n            Specify a type function for the answer. Will re-prompt the user if the function raises any errors. Common choices here include int, float, and decimal.Decimal.\n    \"\"\""
    ],
    "functions": [
        "yesno",
        "question"
    ],
    "classes": []
}