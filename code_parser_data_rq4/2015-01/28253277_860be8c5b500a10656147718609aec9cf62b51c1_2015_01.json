{
    "identifiers": [
        "sys",
        "pystache",
        "re",
        "shlex",
        "json",
        "copy",
        "deepcopy",
        "pprint",
        "pprint",
        "re",
        "compile",
        "contents",
        "line",
        "contents",
        "splitlines",
        "PROCFILE_LINE",
        "match",
        "line",
        "m",
        "p",
        "append",
        "m",
        "group",
        "m",
        "group",
        "p",
        "content",
        "line",
        "content",
        "splitlines",
        "shlex",
        "shlex",
        "line",
        "posix",
        "lexer",
        "wordchars",
        "lexer",
        "len",
        "tokens",
        "tokens",
        "op",
        "re",
        "match",
        "name",
        "value",
        "values",
        "open",
        "read",
        "parse_env",
        "content",
        "open",
        "read",
        "parse_procfile",
        "content",
        "json",
        "load",
        "open",
        "manifest",
        "processes",
        "env",
        "k",
        "v",
        "format",
        "k",
        "v",
        "manifest",
        "format_env",
        "env",
        "items",
        "process",
        "processes",
        "process_names",
        "append",
        "process",
        "deepcopy",
        "env",
        "process",
        "process",
        "append",
        "join",
        "process",
        "manifest",
        "manifest",
        "ctx",
        "append",
        "process",
        "join",
        "process_names",
        "ctx",
        "io_load_env",
        "io_load_manifest",
        "io_load_procfile",
        "map_context",
        "manifest",
        "processes",
        "env",
        "pystache",
        "render",
        "TEMPLATE",
        "ctx",
        "format",
        "sys",
        "argv",
        "manifest",
        "open",
        "out_file",
        "write",
        "out_contents",
        "main"
    ],
    "literals": [
        "r'^([A-Za-z0-9_-]+):\\s*(.+)$'",
        "\"name\"",
        "\"command\"",
        "'/.+-():'",
        "'='",
        "r'[A-Za-z_][A-Za-z_0-9]*'",
        "\"./.env\"",
        "\"./Procfile\"",
        "\"./.slug-manifest.json\"",
        "\"{0}={1!r}\"",
        "\"app_name\"",
        "'app_name'",
        "\"process\"",
        "'name'",
        "'env'",
        "'name'",
        "\"web\"",
        "'env'",
        "\"PORT=5000\"",
        "'env'",
        "\", \"",
        "'env'",
        "'user'",
        "'user'",
        "'cwd'",
        "'cwd'",
        "'process'",
        "'process_names'",
        "\", \"",
        "\"{0}/{1}.conf\"",
        "'app_name'",
        "\"w\"",
        "'__main__'"
    ],
    "variables": [
        "TEMPLATE",
        "PROCFILE_LINE",
        "p",
        "m",
        "values",
        "lexer",
        "tokens",
        "name",
        "op",
        "value",
        "values",
        "name",
        "content",
        "content",
        "ctx",
        "env",
        "process_names",
        "process",
        "process",
        "process",
        "process",
        "ctx",
        "env",
        "manifest",
        "processes",
        "ctx",
        "out_contents",
        "out_file"
    ],
    "comments": [
        "!/usr/bin/env python",
        "parses the assignment statement",
        "add port 5000 if this is a web process"
    ],
    "docstrings": [
        "\"\"\"\n{{#process}}\n[program:{{name}}]\ncommand=env {{ command }}\nautostart=true\nautorestart=true\nstdout_logfile=syslog\nstderr_logfile=syslog\nenvironment={{env}}\ndirectory={{ cwd }}\nuser={{ user }}\n\n{{/process}}\n[group:{{ app_name }}]\nprograms={{process_names}}\n\"\"\"",
        "\"\"\"\n    parse_procfile(str()) -> [{\"name\": str(), \"command\": str()}]\n    \"\"\"",
        "\"\"\"\n    Parse the content of a .env file (a line-delimited KEY=value format) into a\n    dictionary mapping keys to values.\n    \"\"\"",
        "\"\"\"\n    io_load_env() -> dict(str(), str())\n    \"\"\"",
        "\"\"\"\n    io_load_procfile() -> dict(str(), str())\n    \"\"\"",
        "\"\"\"\n    io_load_manifest() -> {\"app_name\": str(), \"cwd\": str(), \"user\": str()}\n    \"\"\""
    ],
    "functions": [
        "parse_procfile",
        "parse_env",
        "io_load_env",
        "io_load_procfile",
        "io_load_manifest",
        "map_context",
        "format_env",
        "main"
    ],
    "classes": []
}