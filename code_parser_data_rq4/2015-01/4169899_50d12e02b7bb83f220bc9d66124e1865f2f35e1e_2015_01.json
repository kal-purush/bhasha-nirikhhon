{
    "identifiers": [
        "javapns",
        "json",
        "x",
        "c",
        "q",
        "sb",
        "c",
        "x",
        "next",
        "c",
        "c",
        "c",
        "q",
        "c",
        "sb",
        "c",
        "x",
        "next",
        "c",
        "q",
        "c",
        "c",
        "c",
        "x",
        "syntaxError",
        "q",
        "sb",
        "append",
        "c",
        "sb",
        "toString",
        "x",
        "back",
        "x",
        "back",
        "x",
        "nextTo",
        "x",
        "ja",
        "value",
        "CDL",
        "getValue",
        "x",
        "value",
        "ja",
        "length",
        "value",
        "length",
        "ja",
        "put",
        "value",
        "c",
        "x",
        "next",
        "c",
        "c",
        "c",
        "c",
        "c",
        "ja",
        "x",
        "syntaxError",
        "c",
        "c",
        "names",
        "x",
        "ja",
        "CDL",
        "rowToJSONArray",
        "x",
        "ja",
        "ja",
        "toJSONObject",
        "names",
        "CDL",
        "toJSONArray",
        "x",
        "CDL",
        "toJSONArray",
        "CDL",
        "rowToJSONArray",
        "x",
        "x",
        "names",
        "CDL",
        "toJSONArray",
        "names",
        "names",
        "x",
        "names",
        "names",
        "length",
        "ja",
        "jo",
        "CDL",
        "rowToJSONObject",
        "names",
        "x",
        "jo",
        "ja",
        "put",
        "jo",
        "ja",
        "length",
        "ja",
        "ja",
        "sb",
        "i",
        "i",
        "ja",
        "length",
        "i",
        "i",
        "sb",
        "append",
        "o",
        "ja",
        "opt",
        "i",
        "o",
        "s",
        "o",
        "toString",
        "s",
        "indexOf",
        "s",
        "indexOf",
        "s",
        "indexOf",
        "s",
        "indexOf",
        "s",
        "charAt",
        "sb",
        "append",
        "length",
        "s",
        "length",
        "j",
        "j",
        "length",
        "j",
        "c",
        "s",
        "charAt",
        "j",
        "c",
        "c",
        "sb",
        "append",
        "c",
        "sb",
        "append",
        "sb",
        "append",
        "s",
        "sb",
        "append",
        "sb",
        "toString",
        "ja",
        "jo",
        "ja",
        "optJSONObject",
        "jo",
        "names",
        "jo",
        "names",
        "names",
        "CDL",
        "rowToString",
        "names",
        "CDL",
        "toString",
        "names",
        "ja",
        "names",
        "ja",
        "names",
        "names",
        "length",
        "sb",
        "i",
        "i",
        "ja",
        "length",
        "i",
        "jo",
        "ja",
        "optJSONObject",
        "i",
        "jo",
        "sb",
        "append",
        "CDL",
        "rowToString",
        "jo",
        "toJSONArray",
        "names",
        "sb",
        "toString"
    ],
    "literals": [
        "\"Missing close quote '\"",
        "\"'.\"",
        "\"\"",
        "\"Bad character '\"",
        "\"' (\"",
        "\").\""
    ],
    "variables": [
        "c",
        "q",
        "sb"
    ],
    "comments": [],
    "docstrings": [
        "Copyright (c) 2002 JSON.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "* This provides static methods to convert comma delimited text into a\n * JSONArray, and to covert a JSONArray into comma delimited text. Comma\n * delimited text is a very popular format for data interchange. It is\n * understood by most database, spreadsheet, and organizer programs.\n * <p/>\n * Each row of text represents a row in a table or a data record. Each row\n * ends with a NEWLINE character. Each row contains one or more values.\n * Values are separated by commas. A value can contain any character except\n * for comma, unless is is wrapped in single quotes or double quotes.\n * <p/>\n * The first row usually contains the names of the columns.\n * <p/>\n * A comma delimited list can be converted into a JSONArray of JSONObjects.\n * The names for the elements in the JSONObjects can be taken from the names\n * in the first row.\n *\n * @author JSON.org\n * @version 2009-06-18",
        "* Get the next value. The value can be wrapped in quotes. The value can\n   * be empty.\n   *\n   * @param x A JSONTokener of the source text.\n   * @return The value string, or null if empty.\n   * @throws JSONException if the quoted string is badly formed.",
        "* Produce a JSONArray of strings from a row of comma delimited values.\n   *\n   * @param x A JSONTokener of the source text.\n   * @return A JSONArray of strings.\n   * @throws JSONException",
        "* Produce a JSONObject from a row of comma delimited text, using a\n   * parallel JSONArray of strings to provides the names of the elements.\n   *\n   * @param names A JSONArray of names. This is commonly obtained from the\n   *              first row of a comma delimited text file using the rowToJSONArray\n   *              method.\n   * @param x     A JSONTokener of the source text.\n   * @return A JSONObject combining the names and values.\n   * @throws JSONException",
        "* Produce a JSONArray of JSONObjects from a comma delimited text string,\n   * using the first row as a source of names.\n   *\n   * @param string The comma delimited text.\n   * @return A JSONArray of JSONObjects.\n   * @throws JSONException",
        "* Produce a JSONArray of JSONObjects from a comma delimited text string,\n   * using the first row as a source of names.\n   *\n   * @param x The JSONTokener containing the comma delimited text.\n   * @return A JSONArray of JSONObjects.\n   * @throws JSONException",
        "* Produce a JSONArray of JSONObjects from a comma delimited text string\n   * using a supplied JSONArray as the source of element names.\n   *\n   * @param names  A JSONArray of strings.\n   * @param string The comma delimited text.\n   * @return A JSONArray of JSONObjects.\n   * @throws JSONException",
        "* Produce a JSONArray of JSONObjects from a comma delimited text string\n   * using a supplied JSONArray as the source of element names.\n   *\n   * @param names A JSONArray of strings.\n   * @param x     A JSONTokener of the source text.\n   * @return A JSONArray of JSONObjects.\n   * @throws JSONException",
        "* Produce a comma delimited text row from a JSONArray. Values containing\n   * the comma character will be quoted. Troublesome characters may be\n   * removed.\n   *\n   * @param ja A JSONArray of strings.\n   * @return A string ending in NEWLINE.",
        "* Produce a comma delimited text from a JSONArray of JSONObjects. The\n   * first row will be a list of names obtained by inspecting the first\n   * JSONObject.\n   *\n   * @param ja A JSONArray of JSONObjects.\n   * @return A comma delimited text.\n   * @throws JSONException",
        "* Produce a comma delimited text from a JSONArray of JSONObjects using\n   * a provided list of names. The list of names is not included in the\n   * output.\n   *\n   * @param names A JSONArray of strings.\n   * @param ja    A JSONArray of JSONObjects.\n   * @return A comma delimited text.\n   * @throws JSONException"
    ],
    "functions": [
        "getValue",
        "JSONArray",
        "rowToJSONArray",
        "JSONObject",
        "rowToJSONObject",
        "JSONArray",
        "toJSONArray",
        "JSONArray",
        "toJSONArray",
        "JSONArray",
        "toJSONArray",
        "JSONArray",
        "toJSONArray",
        "rowToString",
        "toString",
        "toString"
    ],
    "classes": [
        "CDL"
    ]
}