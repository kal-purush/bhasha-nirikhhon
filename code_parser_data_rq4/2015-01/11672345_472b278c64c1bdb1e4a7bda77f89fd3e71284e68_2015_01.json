{
    "identifiers": [
        "ts",
        "Ternary",
        "Comparison",
        "forEach",
        "array",
        "callback",
        "element",
        "contains",
        "array",
        "value",
        "indexOf",
        "array",
        "value",
        "countWhere",
        "array",
        "predicate",
        "x",
        "array",
        "f",
        "x",
        "array",
        "f",
        "x",
        "concatenate",
        "array1",
        "array2",
        "deduplicate",
        "array",
        "sum",
        "array",
        "prop",
        "lastOrUndefined",
        "array",
        "binarySearch",
        "array",
        "value",
        "hasProperty",
        "key",
        "getProperty",
        "key",
        "isEmpty",
        "clone",
        "forEachValue",
        "callback",
        "value",
        "forEachKey",
        "callback",
        "key",
        "lookUp",
        "key",
        "mapToArray",
        "arrayToMap",
        "array",
        "makeKey",
        "value",
        "getLocaleSpecificMessage",
        "message",
        "createFileDiagnostic",
        "file",
        "start",
        "length",
        "message",
        "args",
        "createCompilerDiagnostic",
        "message",
        "args",
        "chainDiagnosticMessages",
        "details",
        "message",
        "args",
        "concatenateDiagnosticMessageChains",
        "headChain",
        "tailChain",
        "flattenDiagnosticChain",
        "file",
        "start",
        "length",
        "diagnosticChain",
        "newLine",
        "compareValues",
        "a",
        "b",
        "compareDiagnostics",
        "d1",
        "d2",
        "deduplicateSortedDiagnostics",
        "diagnostics",
        "normalizeSlashes",
        "path",
        "getRootLength",
        "path",
        "normalizePath",
        "path",
        "getDirectoryPath",
        "path",
        "isUrl",
        "path",
        "isRootedDiskPath",
        "path",
        "getNormalizedPathComponents",
        "path",
        "currentDirectory",
        "getNormalizedAbsolutePath",
        "filename",
        "currentDirectory",
        "getNormalizedPathFromPathComponents",
        "pathComponents",
        "getRelativePathToDirectoryOrUrl",
        "directoryPathOrUrl",
        "relativeOrAbsolutePath",
        "currentDirectory",
        "getCanonicalFileName",
        "fileName",
        "isAbsolutePathAnUrl",
        "getBaseFilename",
        "path",
        "combinePaths",
        "path1",
        "path2",
        "fileExtensionIs",
        "path",
        "extension",
        "removeFileExtension",
        "path",
        "escapeString",
        "s",
        "kind",
        "flags",
        "name",
        "checker",
        "flags",
        "checker",
        "AssertionLevel",
        "Debug",
        "shouldAssert",
        "level",
        "expression",
        "message",
        "verboseDebugInfo",
        "fail",
        "message",
        "ts",
        "s",
        "fileName",
        "encoding",
        "fileName",
        "data",
        "writeByteOrderMark",
        "fileName",
        "callback",
        "fileName",
        "path",
        "path",
        "path",
        "directoryName",
        "exitCode",
        "ts",
        "getDeclarationOfKind",
        "symbol",
        "kind",
        "getSingleLineStringWriter",
        "releaseStringWriter",
        "writer",
        "getFullWidth",
        "node",
        "hasFlag",
        "val",
        "flag",
        "containsParseError",
        "node",
        "getSourceFileOfNode",
        "node",
        "nodePosToString",
        "node",
        "getStartPosOfNode",
        "node",
        "isMissingNode",
        "node",
        "getTokenPosOfNode",
        "node",
        "sourceFile",
        "getSourceTextOfNodeFromSourceFile",
        "sourceFile",
        "node",
        "getTextOfNodeFromSourceText",
        "sourceText",
        "node",
        "getTextOfNode",
        "node",
        "escapeIdentifier",
        "identifier",
        "unescapeIdentifier",
        "identifier",
        "declarationNameToString",
        "name",
        "createDiagnosticForNode",
        "node",
        "message",
        "arg0",
        "arg1",
        "arg2",
        "createDiagnosticForNodeFromMessageChain",
        "node",
        "messageChain",
        "newLine",
        "getErrorSpanForNode",
        "node",
        "isExternalModule",
        "file",
        "isDeclarationFile",
        "file",
        "isConstEnumDeclaration",
        "node",
        "isConst",
        "node",
        "isLet",
        "node",
        "isPrologueDirective",
        "node",
        "getLeadingCommentRangesOfNode",
        "node",
        "sourceFileOfNode",
        "getJsDocComments",
        "node",
        "sourceFileOfNode",
        "forEachReturnStatement",
        "body",
        "visitor",
        "stmt",
        "isAnyFunction",
        "node",
        "isFunctionBlock",
        "node",
        "isObjectLiteralMethod",
        "node",
        "getContainingFunction",
        "node",
        "getThisContainer",
        "node",
        "includeArrowFunctions",
        "getSuperContainer",
        "node",
        "getInvokedExpression",
        "node",
        "isExpression",
        "node",
        "isExternalModuleImportDeclaration",
        "node",
        "getExternalModuleImportDeclarationExpression",
        "node",
        "isInternalModuleImportDeclaration",
        "node",
        "hasDotDotDotToken",
        "node",
        "hasQuestionToken",
        "node",
        "hasRestParameters",
        "s",
        "isLiteralKind",
        "kind",
        "isTextualLiteralKind",
        "kind",
        "isTemplateLiteralKind",
        "kind",
        "isInAmbientContext",
        "node",
        "isDeclaration",
        "node",
        "isStatement",
        "n",
        "isDeclarationOrFunctionExpressionOrCatchVariableName",
        "name",
        "getClassBaseTypeNode",
        "node",
        "getClassImplementedTypeNodes",
        "node",
        "getInterfaceBaseTypeNodes",
        "node",
        "getHeritageClause",
        "clauses",
        "kind",
        "tryResolveScriptReference",
        "program",
        "sourceFile",
        "reference",
        "getAncestor",
        "node",
        "kind",
        "getFileReferenceFromReferencePath",
        "comment",
        "commentRange",
        "isKeyword",
        "token",
        "isTrivia",
        "token",
        "isModifier",
        "token",
        "ts",
        "getEndLinePosition",
        "line",
        "sourceFile",
        "getStartPositionOfLine",
        "line",
        "sourceFile",
        "getStartLinePositionForPosition",
        "position",
        "sourceFile",
        "rangeContainsRange",
        "r1",
        "r2",
        "startEndContainsRange",
        "start",
        "end",
        "rangeContainsStartEnd",
        "start",
        "end",
        "rangeOverlapsWithStartEnd",
        "r1",
        "start",
        "end",
        "startEndOverlapsWithStartEnd",
        "start1",
        "end1",
        "start2",
        "end2",
        "findListItemInfo",
        "node",
        "findChildOfKind",
        "n",
        "kind",
        "sourceFile",
        "findContainingList",
        "node",
        "getTouchingWord",
        "sourceFile",
        "position",
        "getTouchingPropertyName",
        "sourceFile",
        "position",
        "getTouchingToken",
        "sourceFile",
        "position",
        "includeItemAtEndPosition",
        "n",
        "getTokenAtPosition",
        "sourceFile",
        "position",
        "findTokenOnLeftOfPosition",
        "file",
        "position",
        "findNextToken",
        "previousToken",
        "parent",
        "findPrecedingToken",
        "position",
        "sourceFile",
        "startNode",
        "getNodeModifiers",
        "node",
        "getTypeArgumentOrTypeParameterList",
        "node",
        "isToken",
        "n",
        "isComment",
        "kind",
        "isPunctuation",
        "kind",
        "isInsideTemplateLiteral",
        "node",
        "position",
        "compareDataObjects",
        "dst",
        "src",
        "ts",
        "isFirstDeclarationOfSymbolParameter",
        "symbol",
        "symbolPart",
        "text",
        "symbol",
        "displayPart",
        "text",
        "kind",
        "symbol",
        "spacePart",
        "keywordPart",
        "kind",
        "punctuationPart",
        "kind",
        "operatorPart",
        "kind",
        "textPart",
        "text",
        "lineBreakPart",
        "mapToDisplayParts",
        "writeDisplayParts",
        "writer",
        "typeToDisplayParts",
        "typechecker",
        "enclosingDeclaration",
        "flags",
        "symbolToDisplayParts",
        "typeChecker",
        "symbol",
        "enclosingDeclaration",
        "meaning",
        "flags",
        "signatureToDisplayParts",
        "typechecker",
        "signature",
        "enclosingDeclaration",
        "flags"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "localizedDiagnosticMessages",
        "directorySeparator",
        "objectAllocator",
        "sys",
        "fullTripleSlashReferencePathRegEx"
    ],
    "comments": [
        "! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved. \nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \n \nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \nMERCHANTABLITY OR NON-INFRINGEMENT. \n \nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n*****************************************************************************",
        "NOTE: This *does not* support the full escape characters, it only supports the subset that can be used in file names\n      * or string literals. If the information encoded in the map changes, this needs to be revisited.",
        "Returns the token if position is in [start, end) or if position === end and includeItemAtEndPosition(token) === true",
        "Returns a token if position is in [start-of-leading-trivia, end)"
    ],
    "docstrings": [
        "* Returns the last element of an array if non-empty, undefined otherwise.",
        "* Creates a map from the elements of an array.\n     *\n     * @param array the array of input elements.\n     * @param makeKey a function that produces a key for a given element.\n     *\n     * This function makes no effort to avoid collisions; if any two elements produce\n     * the same key with the given 'makeKey' function, then the element with the higher\n     * index in the array will be the one associated with the produced key.",
        "* The token on the left of the position is the token that strictly includes the position\n      * or sits to the left of the cursor if it is on a boundary. For example\n      *\n      *   fo|o               -> will return foo\n      *   foo <comment> |bar -> will return foo\n      *"
    ],
    "functions": [],
    "classes": []
}