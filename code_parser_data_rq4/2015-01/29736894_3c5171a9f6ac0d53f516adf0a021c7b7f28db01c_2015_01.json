{
    "identifiers": [
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "isArray",
        "key",
        "key",
        "value",
        "value",
        "partial",
        "partial",
        "keys",
        "el",
        "el",
        "el",
        "partial",
        "el",
        "word",
        "pattern",
        "pattern",
        "word",
        "word",
        "pattern",
        "index",
        "hasApproxPattern",
        "word",
        "index",
        "pattern",
        "array",
        "n",
        "expression",
        "array",
        "elm",
        "isDefined",
        "expression",
        "count",
        "n",
        "expression",
        "elm",
        "count",
        "n",
        "count",
        "rest",
        "count",
        "count",
        "rest",
        "arguments",
        "num",
        "$math",
        "$math",
        "num",
        "$math",
        "$math",
        "obj",
        "stack",
        "parent",
        "stack",
        "stack",
        "obj",
        "keys",
        "el",
        "isObject",
        "obj",
        "el",
        "isArray",
        "obj",
        "el",
        "parent",
        "parent",
        "el",
        "parent",
        "deepKeys",
        "obj",
        "el",
        "stack",
        "p",
        "el",
        "parent",
        "parent",
        "el",
        "el",
        "stack",
        "key",
        "stack",
        "obj",
        "obj",
        "obj",
        "obj",
        "angular",
        "input",
        "angular",
        "input",
        "input",
        "angular",
        "input",
        "input",
        "angular",
        "input",
        "input",
        "angular",
        "input",
        "input",
        "angular",
        "input",
        "input",
        "angular",
        "input",
        "input",
        "angular",
        "input",
        "o1",
        "o2",
        "angular",
        "o1",
        "o2",
        "angular",
        "isGreaterThanFilter",
        "isGreaterThanFilter",
        "isGreaterThanOrEqualToFilter",
        "isGreaterThanOrEqualToFilter",
        "isLessThanFilter",
        "isLessThanFilter",
        "isLessThanOrEqualToFilter",
        "isLessThanOrEqualToFilter",
        "isEqualToFilter",
        "isEqualToFilter",
        "isNotEqualToFilter",
        "isNotEqualToFilter",
        "isIdenticalToFilter",
        "isIdenticalToFilter",
        "isNotIdenticalToFilter",
        "isNotIdenticalToFilter",
        "input",
        "check",
        "input",
        "check",
        "input",
        "check",
        "input",
        "check",
        "input",
        "check",
        "input",
        "check",
        "input",
        "check",
        "input",
        "check",
        "input",
        "check",
        "input",
        "check",
        "input",
        "check",
        "input",
        "check",
        "input",
        "check",
        "input",
        "check",
        "input",
        "check",
        "input",
        "check",
        "angular",
        "input",
        "isNull",
        "input",
        "angular",
        "collection",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "isUndefined",
        "collection",
        "collection",
        "elm",
        "objectContains",
        "elm",
        "collection",
        "index",
        "index",
        "angular",
        "collection",
        "count",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "collection",
        "count",
        "collection",
        "angular",
        "collection",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "isUndefined",
        "collection",
        "collection",
        "elm",
        "objectContains",
        "elm",
        "collection",
        "index",
        "collection",
        "index",
        "angular",
        "collection",
        "count",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "collection",
        "count",
        "count",
        "count",
        "collection",
        "angular",
        "collection",
        "joined",
        "isUndefined",
        "joined",
        "collection",
        "isArray",
        "collection",
        "isObject",
        "joined",
        "collection",
        "toArray",
        "joined",
        "collection",
        "joined",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "isObject",
        "joined",
        "array",
        "toArray",
        "joined",
        "array",
        "joined",
        "collection",
        "angular",
        "containsFilter",
        "containsFilter",
        "$parse",
        "collection",
        "expression",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "isUndefined",
        "expression",
        "collection",
        "elm",
        "isObject",
        "elm",
        "isFunction",
        "expression",
        "$parse",
        "expression",
        "elm",
        "elm",
        "expression",
        "angular",
        "$parse",
        "collection",
        "property",
        "$parse",
        "property",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "isUndefined",
        "property",
        "collection",
        "collection",
        "elm",
        "prop",
        "get",
        "elm",
        "result",
        "prop",
        "result",
        "prop",
        "result",
        "prop",
        "result",
        "angular",
        "$parse",
        "collection",
        "defaults",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "isObject",
        "defaults",
        "collection",
        "deepKeys",
        "defaults",
        "collection",
        "elm",
        "keys",
        "key",
        "$parse",
        "key",
        "getter",
        "isUndefined",
        "getter",
        "elm",
        "setter",
        "elm",
        "getter",
        "defaults",
        "collection",
        "angular",
        "$parse",
        "collection",
        "expression",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "isUndefined",
        "expression",
        "collection",
        "elm",
        "isObject",
        "elm",
        "isFunction",
        "expression",
        "$parse",
        "expression",
        "elm",
        "elm",
        "expression",
        "angular",
        "$parse",
        "collection",
        "properties",
        "search",
        "search",
        "isString",
        "search",
        "isNumber",
        "search",
        "search",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "isUndefined",
        "search",
        "collection",
        "collection",
        "elm",
        "properties",
        "prop",
        "prop",
        "comparator",
        "$parse",
        "prop",
        "elm",
        "prop",
        "comparator",
        "propList",
        "prev",
        "cur",
        "index",
        "index",
        "$parse",
        "prev",
        "elm",
        "$parse",
        "cur",
        "elm",
        "prev",
        "$parse",
        "cur",
        "elm",
        "isString",
        "comparator",
        "isNumber",
        "comparator",
        "comparator",
        "search",
        "angular",
        "$parse",
        "collection",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "collection",
        "args",
        "arguments",
        "n",
        "isNumber",
        "args",
        "args",
        "getter",
        "isNumber",
        "args",
        "args",
        "isNumber",
        "args",
        "args",
        "args",
        "getFirstMatches",
        "collection",
        "n",
        "getter",
        "$parse",
        "getter",
        "getter",
        "collection",
        "angular",
        "collection",
        "shallow",
        "shallow",
        "shallow",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "collection",
        "shallow",
        "flatten",
        "collection",
        "collection",
        "array",
        "i",
        "i",
        "i",
        "i",
        "array",
        "array",
        "isArray",
        "array",
        "i",
        "flatten",
        "array",
        "i",
        "array",
        "i",
        "array",
        "i",
        "i",
        "flatten",
        "array",
        "i",
        "angular",
        "$parse",
        "collection",
        "property",
        "search",
        "csensitive",
        "csensitive",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "isUndefined",
        "property",
        "isUndefined",
        "search",
        "collection",
        "getter",
        "$parse",
        "property",
        "collection",
        "elm",
        "prop",
        "getter",
        "elm",
        "isString",
        "prop",
        "prop",
        "sensitive",
        "prop",
        "prop",
        "search",
        "sensitive",
        "search",
        "search",
        "hasApproxPattern",
        "prop",
        "search",
        "angular",
        "collection",
        "search",
        "csensitive",
        "csensitive",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "isUndefined",
        "search",
        "collection",
        "search",
        "sensitive",
        "search",
        "search",
        "collection",
        "elm",
        "isString",
        "elm",
        "elm",
        "sensitive",
        "elm",
        "elm",
        "hasApproxPattern",
        "elm",
        "search",
        "isObject",
        "elm",
        "_hasApproximateKey",
        "elm",
        "search",
        "search",
        "properties",
        "elm",
        "prop",
        "elm",
        "flag",
        "isString",
        "prop",
        "prop",
        "sensitive",
        "prop",
        "prop",
        "flag",
        "hasApproxPattern",
        "prop",
        "search",
        "angular",
        "$parse",
        "filterWatcher",
        "collection",
        "property",
        "isObject",
        "collection",
        "isUndefined",
        "property",
        "collection",
        "$parse",
        "property",
        "filterWatcher",
        "arguments",
        "filterWatcher",
        "arguments",
        "_groupBy",
        "collection",
        "getterFn",
        "collection",
        "getter",
        "forEach",
        "collection",
        "elm",
        "prop",
        "getter",
        "elm",
        "result",
        "prop",
        "result",
        "prop",
        "result",
        "prop",
        "elm",
        "result",
        "angular",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "angular",
        "input",
        "delimiter",
        "isUndefined",
        "input",
        "isArray",
        "input",
        "input",
        "isUndefined",
        "delimiter",
        "delimiter",
        "input",
        "delimiter",
        "angular",
        "$parse",
        "collection",
        "copy",
        "collection",
        "reversed",
        "isObject",
        "reversed",
        "toArray",
        "reversed",
        "reversed",
        "isArray",
        "reversed",
        "reversed",
        "args",
        "arguments",
        "n",
        "isNumber",
        "args",
        "args",
        "getter",
        "isNumber",
        "args",
        "args",
        "isNumber",
        "args",
        "args",
        "args",
        "getFirstMatches",
        "reversed",
        "n",
        "getter",
        "$parse",
        "getter",
        "getter",
        "reversed",
        "reversed",
        "angular",
        "$parse",
        "collection",
        "expression",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "isUndefined",
        "expression",
        "collection",
        "collection",
        "elm",
        "$parse",
        "expression",
        "elm",
        "angular",
        "$parse",
        "collection",
        "expression",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "isUndefined",
        "expression",
        "collection",
        "collection",
        "elm",
        "$parse",
        "expression",
        "elm",
        "angular",
        "$parse",
        "collection",
        "expression",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "isUndefined",
        "expression",
        "collection",
        "collection",
        "elm",
        "$parse",
        "expression",
        "elm",
        "angular",
        "collection",
        "isUndefined",
        "collection",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "collection",
        "elm",
        "objectContains",
        "elm",
        "angular",
        "collection",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "arguments",
        "isArray",
        "collection",
        "collection",
        "collection",
        "member",
        "args",
        "nest",
        "equals",
        "nest",
        "member",
        "angular",
        "input",
        "input",
        "isObject",
        "input",
        "toArray",
        "input",
        "input",
        "isString",
        "input",
        "input",
        "isArray",
        "input",
        "input",
        "input",
        "angular",
        "$parse",
        "collection",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "arguments",
        "isArray",
        "collection",
        "args",
        "collection",
        "collection",
        "member",
        "field",
        "args",
        "field",
        "get",
        "$parse",
        "field",
        "get",
        "member",
        "extend",
        "member",
        "field",
        "angular",
        "collection",
        "addKey",
        "isObject",
        "collection",
        "collection",
        "addKey",
        "toArray",
        "collection",
        "collection",
        "key",
        "extend",
        "collection",
        "key",
        "key",
        "angular",
        "uniqFilter",
        "uniqFilter",
        "$parse",
        "collection",
        "property",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "isArray",
        "collection",
        "collection",
        "$parse",
        "property",
        "isUndefined",
        "property",
        "collection",
        "elm",
        "pos",
        "elm",
        "pos",
        "collection",
        "elm",
        "get",
        "elm",
        "some",
        "uniqueItems",
        "prop",
        "uniqueItems",
        "prop",
        "array",
        "member",
        "isUndefined",
        "member",
        "array",
        "el",
        "equals",
        "el",
        "member",
        "angular",
        "collection",
        "isUndefined",
        "collection",
        "collection",
        "isObject",
        "collection",
        "toArray",
        "collection",
        "collection",
        "collection",
        "elm",
        "objectContains",
        "elm",
        "angular",
        "$parse",
        "col1",
        "col2",
        "expression",
        "expression",
        "expression",
        "col1",
        "isObject",
        "col1",
        "toArray",
        "col1",
        "col1",
        "col2",
        "isObject",
        "col2",
        "toArray",
        "col2",
        "col2",
        "isArray",
        "col1",
        "isArray",
        "col2",
        "col1",
        "col1",
        "col2",
        "elm",
        "some",
        "elm",
        "col1",
        "some",
        "elm",
        "col2",
        "el",
        "col",
        "$parse",
        "expression",
        "col",
        "dElm",
        "expression",
        "equals",
        "getter",
        "dElm",
        "getter",
        "el",
        "equals",
        "dElm",
        "el",
        "angular",
        "$math",
        "isNumber",
        "isFinite",
        "isNumber",
        "isFinite",
        "convertToDecimal",
        "$math",
        "convertToDecimal",
        "$math",
        "convertToDecimal",
        "$math",
        "convertToDecimal",
        "$math",
        "angular",
        "$math",
        "radians",
        "isNumber",
        "isFinite",
        "isNumber",
        "radians",
        "isFinite",
        "radians",
        "radians",
        "$math",
        "$math",
        "degrees",
        "$math",
        "$math",
        "angular",
        "$math",
        "isNumber",
        "isFinite",
        "isNumber",
        "isFinite",
        "convertToDecimal",
        "$math",
        "convertToDecimal",
        "$math",
        "convertToDecimal",
        "$math",
        "angular",
        "$window",
        "$window",
        "angular",
        "$math",
        "$parse",
        "input",
        "expression",
        "isArray",
        "input",
        "input",
        "isUndefined",
        "expression",
        "$math",
        "$math",
        "input",
        "input",
        "indexByMax",
        "input",
        "expression",
        "array",
        "exp",
        "array",
        "elm",
        "$parse",
        "exp",
        "elm",
        "mappedArray",
        "$math",
        "$math",
        "mappedArray",
        "angular",
        "$math",
        "$parse",
        "input",
        "expression",
        "isArray",
        "input",
        "input",
        "isUndefined",
        "expression",
        "$math",
        "$math",
        "input",
        "input",
        "indexByMin",
        "input",
        "expression",
        "array",
        "exp",
        "array",
        "elm",
        "$parse",
        "exp",
        "elm",
        "mappedArray",
        "$math",
        "$math",
        "mappedArray",
        "angular",
        "$math",
        "$window",
        "input",
        "divided",
        "round",
        "isString",
        "input",
        "$window",
        "input",
        "input",
        "divided",
        "divided",
        "round",
        "round",
        "isNumber",
        "divider",
        "$window",
        "divider",
        "input",
        "round",
        "$math",
        "divider",
        "divided",
        "divider",
        "divided",
        "angular",
        "$math",
        "degrees",
        "isNumber",
        "isFinite",
        "isNumber",
        "degrees",
        "isFinite",
        "degrees",
        "degrees",
        "$math",
        "radians",
        "$math",
        "$math",
        "angular",
        "input",
        "radix",
        "isNumber",
        "input",
        "RANGE",
        "radix",
        "input",
        "input",
        "radix",
        "angular",
        "$math",
        "number",
        "isNumber",
        "isFinite",
        "isNumber",
        "number",
        "isFinite",
        "number",
        "number",
        "number",
        "number",
        "convertToDecimal",
        "number",
        "$math",
        "number",
        "convertToDecimal",
        "number",
        "$math",
        "convertToDecimal",
        "number",
        "$math",
        "angular",
        "input",
        "initial",
        "isArray",
        "input",
        "input",
        "input",
        "prev",
        "curr",
        "prev",
        "curr",
        "initial",
        "angular",
        "input",
        "ends",
        "csensitive",
        "csensitive",
        "isString",
        "input",
        "isUndefined",
        "ends",
        "input",
        "input",
        "sensitive",
        "input",
        "input",
        "position",
        "input",
        "ends",
        "input",
        "sensitive",
        "ends",
        "ends",
        "position",
        "angular",
        "input",
        "chars",
        "chars",
        "isString",
        "input",
        "input",
        "input",
        "trim",
        "angular",
        "input",
        "n",
        "separator",
        "n",
        "isString",
        "input",
        "input",
        "times",
        "input",
        "strRepeat",
        "input",
        "n",
        "separator",
        "n",
        "sep",
        "n",
        "sep",
        "strRepeat",
        "n",
        "sep",
        "angular",
        "input",
        "chars",
        "chars",
        "isString",
        "input",
        "input",
        "input",
        "trim",
        "angular",
        "input",
        "sub",
        "isUndefined",
        "sub",
        "sub",
        "isString",
        "input",
        "input",
        "replace",
        "input",
        "angular",
        "input",
        "start",
        "csensitive",
        "csensitive",
        "isString",
        "input",
        "isUndefined",
        "start",
        "input",
        "input",
        "sensitive",
        "input",
        "input",
        "input",
        "sensitive",
        "start",
        "start",
        "angular",
        "input",
        "arguments",
        "input",
        "match",
        "number",
        "isUndefined",
        "args",
        "number",
        "match",
        "args",
        "number",
        "angular",
        "input",
        "isString",
        "input",
        "input",
        "input",
        "angular",
        "input",
        "chars",
        "chars",
        "isString",
        "input",
        "input",
        "input",
        "trim",
        "trim",
        "angular",
        "input",
        "length",
        "suffix",
        "preserve",
        "length",
        "isUndefined",
        "length",
        "input",
        "length",
        "preserve",
        "preserve",
        "suffix",
        "suffix",
        "isString",
        "input",
        "input",
        "length",
        "input",
        "input",
        "preserve",
        "input",
        "length",
        "input",
        "input",
        "length",
        "length",
        "suffix",
        "angular",
        "input",
        "isString",
        "input",
        "input",
        "input",
        "ch",
        "ch",
        "ch",
        "angular",
        "$window",
        "input",
        "isString",
        "input",
        "$window",
        "input",
        "input",
        "angular",
        "$window",
        "input",
        "isString",
        "input",
        "$window",
        "input",
        "input",
        "angular",
        "input",
        "wrap",
        "ends",
        "isString",
        "input",
        "isUndefined",
        "wrap",
        "input",
        "wrap",
        "input",
        "ends",
        "wrap",
        "angular",
        "$window",
        "$rootScope",
        "$window",
        "fName",
        "args",
        "fName",
        "angular",
        "args",
        "forEach",
        "$$listeners",
        "id",
        "key",
        "$$cache",
        "key",
        "$$listeners",
        "id",
        "$$timeout",
        "$rootScope",
        "$$cache",
        "scope",
        "hashKey",
        "scope",
        "isUndefined",
        "$$listeners",
        "id",
        "scope",
        "removeCache",
        "$$listeners",
        "id",
        "$$listeners",
        "id",
        "hashKey",
        "filterName",
        "args",
        "getHashKey",
        "filterName",
        "args",
        "$$cache",
        "hashKey",
        "filterName",
        "args",
        "scope",
        "result",
        "getHashKey",
        "filterName",
        "args",
        "$$cache",
        "hashKey",
        "result",
        "isScope",
        "scope",
        "addListener",
        "scope",
        "hashKey",
        "cleanStateless",
        "result",
        "$$isMemoized",
        "$$memoize",
        "angular"
    ],
    "literals": [
        "'use strict'",
        "''",
        "'.'",
        "'.'",
        "'a8m.angular'",
        "'isUndefined'",
        "'isDefined'",
        "'isFunction'",
        "'isString'",
        "'isNumber'",
        "'isArray'",
        "'isObject'",
        "'isEqual'",
        "'a8m.conditions'",
        "'>'",
        "'>='",
        "'<'",
        "'<='",
        "'=='",
        "'!='",
        "'==='",
        "'!=='",
        "'a8m.is-null'",
        "'isNull'",
        "'a8m.after-where'",
        "'afterWhere'",
        "'a8m.after'",
        "'after'",
        "'a8m.before-where'",
        "'beforeWhere'",
        "'a8m.before'",
        "'before'",
        "'a8m.concat'",
        "'concat'",
        "'a8m.contains'",
        "'$parse'",
        "'$parse'",
        "'a8m.count-by'",
        "'countBy'",
        "'$parse'",
        "'a8m.defaults'",
        "'defaults'",
        "'$parse'",
        "'a8m.every'",
        "'every'",
        "'$parse'",
        "'a8m.filter-by'",
        "'filterBy'",
        "'$parse'",
        "'+'",
        "'\\\\s'",
        "'g'",
        "''",
        "'+'",
        "' '",
        "' '",
        "'a8m.first'",
        "'first'",
        "'$parse'",
        "'a8m.flatten'",
        "'flatten'",
        "'a8m.fuzzy-by'",
        "'fuzzyBy'",
        "'$parse'",
        "'a8m.fuzzy'",
        "'fuzzy'",
        "'a8m.group-by'",
        "'a8m.filter-watcher'",
        "'groupBy'",
        "'$parse'",
        "'filterWatcher'",
        "'groupBy'",
        "'groupBy'",
        "'a8m.is-empty'",
        "'isEmpty'",
        "'a8m.join'",
        "'join'",
        "' '",
        "'a8m.last'",
        "'last'",
        "'$parse'",
        "'a8m.map'",
        "'map'",
        "'$parse'",
        "'a8m.omit'",
        "'omit'",
        "'$parse'",
        "'a8m.pick'",
        "'pick'",
        "'$parse'",
        "'a8m.remove-with'",
        "'removeWith'",
        "'a8m.remove'",
        "'remove'",
        "'a8m.reverse'",
        "'reverse'",
        "''",
        "''",
        "'a8m.search-field'",
        "'searchField'",
        "'$parse'",
        "' '",
        "'a8m.to-array'",
        "'toArray'",
        "'a8m.unique'",
        "'$parse'",
        "'$parse'",
        "'a8m.where'",
        "'where'",
        "'a8m.xor'",
        "'xor'",
        "'$parse'",
        "'a8m.math.byteFmt'",
        "'a8m.math'",
        "'byteFmt'",
        "'$math'",
        "' B'",
        "' KB'",
        "' MB'",
        "' GB'",
        "\"NaN\"",
        "'a8m.math.degrees'",
        "'a8m.math'",
        "'degrees'",
        "'$math'",
        "\"NaN\"",
        "'a8m.math.kbFmt'",
        "'a8m.math'",
        "'kbFmt'",
        "'$math'",
        "' KB'",
        "' MB'",
        "' GB'",
        "\"NaN\"",
        "'a8m.math'",
        "'$math'",
        "'$window'",
        "'a8m.math.max'",
        "'a8m.math'",
        "'max'",
        "'$math'",
        "'$parse'",
        "'a8m.math.min'",
        "'a8m.math'",
        "'min'",
        "'$math'",
        "'$parse'",
        "'a8m.math.percent'",
        "'a8m.math'",
        "'percent'",
        "'$math'",
        "'$window'",
        "'a8m.math.radians'",
        "'a8m.math'",
        "'radians'",
        "'$math'",
        "\"NaN\"",
        "'a8m.math.radix'",
        "'radix'",
        "'a8m.math.shortFmt'",
        "'a8m.math'",
        "'shortFmt'",
        "'$math'",
        "' K'",
        "' M'",
        "' B'",
        "\"NaN\"",
        "'a8m.math.sum'",
        "'sum'",
        "'a8m.ends-with'",
        "'endsWith'",
        "'a8m.ltrim'",
        "'ltrim'",
        "'\\\\s'",
        "'^'",
        "'+'",
        "''",
        "'a8m.repeat'",
        "'repeat'",
        "''",
        "'a8m.rtrim'",
        "'rtrim'",
        "'\\\\s'",
        "'+$'",
        "''",
        "'a8m.slugify'",
        "'slugify'",
        "'-'",
        "'a8m.starts-with'",
        "'startsWith'",
        "'a8m.stringular'",
        "'stringular'",
        "'a8m.strip-tags'",
        "'stripTags'",
        "''",
        "'a8m.trim'",
        "'trim'",
        "'\\\\s'",
        "'^'",
        "'+|'",
        "'+$'",
        "'g'",
        "''",
        "'a8m.truncate'",
        "'truncate'",
        "''",
        "' '",
        "' '",
        "'a8m.ucfirst'",
        "'ucfirst'",
        "' '",
        "' '",
        "'a8m.uri-component-encode'",
        "'uriComponentEncode'",
        "'$window'",
        "'a8m.uri-encode'",
        "'uriEncode'",
        "'$window'",
        "'a8m.wrap'",
        "'wrap'",
        "''",
        "'a8m.filter-watcher'",
        "'filterWatcher'",
        "'$window'",
        "'$rootScope'",
        "'#'",
        "''",
        "'$destroy'",
        "'angular.filter'",
        "'a8m.ucfirst'",
        "'a8m.uri-encode'",
        "'a8m.uri-component-encode'",
        "'a8m.slugify'",
        "'a8m.strip-tags'",
        "'a8m.stringular'",
        "'a8m.truncate'",
        "'a8m.starts-with'",
        "'a8m.ends-with'",
        "'a8m.wrap'",
        "'a8m.trim'",
        "'a8m.ltrim'",
        "'a8m.rtrim'",
        "'a8m.repeat'",
        "'a8m.to-array'",
        "'a8m.concat'",
        "'a8m.contains'",
        "'a8m.unique'",
        "'a8m.is-empty'",
        "'a8m.after'",
        "'a8m.after-where'",
        "'a8m.before'",
        "'a8m.before-where'",
        "'a8m.defaults'",
        "'a8m.where'",
        "'a8m.reverse'",
        "'a8m.remove'",
        "'a8m.remove-with'",
        "'a8m.group-by'",
        "'a8m.count-by'",
        "'a8m.search-field'",
        "'a8m.fuzzy-by'",
        "'a8m.fuzzy'",
        "'a8m.omit'",
        "'a8m.pick'",
        "'a8m.every'",
        "'a8m.filter-by'",
        "'a8m.xor'",
        "'a8m.map'",
        "'a8m.first'",
        "'a8m.last'",
        "'a8m.flatten'",
        "'a8m.join'",
        "'a8m.math'",
        "'a8m.math.max'",
        "'a8m.math.min'",
        "'a8m.math.percent'",
        "'a8m.math.radix'",
        "'a8m.math.sum'",
        "'a8m.math.degrees'",
        "'a8m.math.radians'",
        "'a8m.math.byteFmt'",
        "'a8m.math.kbFmt'",
        "'a8m.math.shortFmt'",
        "'a8m.angular'",
        "'a8m.conditions'",
        "'a8m.is-null'",
        "'a8m.filter-watcher'"
    ],
    "variables": [
        "isDefined",
        "isUndefined",
        "isFunction",
        "isString",
        "isNumber",
        "isObject",
        "isArray",
        "forEach",
        "extend",
        "copy",
        "equals",
        "keys",
        "index",
        "count",
        "rest",
        "keys",
        "p",
        "key",
        "index",
        "index",
        "array",
        "result",
        "get",
        "prop",
        "keys",
        "getter",
        "setter",
        "comparator",
        "propList",
        "n",
        "getter",
        "args",
        "sensitive",
        "prop",
        "getter",
        "sensitive",
        "properties",
        "prop",
        "flag",
        "getterFn",
        "result",
        "prop",
        "n",
        "getter",
        "args",
        "reversed",
        "args",
        "get",
        "field",
        "args",
        "uniqueItems",
        "get",
        "prop",
        "getter",
        "degrees",
        "mappedArray",
        "mappedArray",
        "divider",
        "radians",
        "RANGE",
        "sensitive",
        "position",
        "trim",
        "times",
        "trim",
        "replace",
        "sensitive",
        "args",
        "trim",
        "$$cache",
        "$$listeners",
        "$$timeout",
        "id",
        "id",
        "hashKey",
        "hashKey"
    ],
    "comments": [
        "jshint globalstrict:true",
        "if it's a nested object",
        "concatenate the new parent if exist",
        "create and save the key",
        "TODO(Ariel):unique option ? or use unique filter to filter result",
        "loop through all the keys",
        "if it's not exist",
        "get from defaults, and set to the returned object",
        "avoid iteration if we found some key that equal[performance]",
        "cuz reverse change our src collection",
        "and we don't want side effects",
        "send reversed collection as arguments, and reverse it back as result",
        "get the last element",
        "store all unique identifiers",
        "if it's kind of primitive array",
        "else compare with equals",
        "checked if the unique identifier is already exist",
        "within 1 KB so B",
        "within 1 MB so KB",
        "within 1 GB so MB",
        "GB or more",
        "if decimal is not an integer greater than -1, we cannot do. quit with error \"NaN\"",
        "if degrees is not a real number, we cannot do also. quit with error \"NaN\"",
        "within 1 MB so KB",
        "within 1 GB so MB",
        "if decimal is not an integer greater than -1, we cannot do. quit with error \"NaN\"",
        "if degrees is not a real number, we cannot do also. quit with error \"NaN\"",
        "store result in `$$cache` container",
        "for angular versions that less than 1.3",
        "add to `$destroy` listener, a cleaner callback"
    ],
    "docstrings": [
        "* Bunch of useful filters for angularJS(with no external dependencies!)\n * @version v0.5.2 - 2015-01-17 * @link https://github.com/a8m/angular-filter\n * @author Ariel Mashraki <ariel@mashraki.co.il>\n * @license MIT License, http://www.opensource.org/licenses/MIT",
        "* @description\n * get an object and return array of values\n * @param object\n * @returns {Array}",
        "* @param value\n * @returns {boolean}",
        "* @description\n * return if object contains partial object\n * @param partial{object}\n * @param object{object}\n * @returns {boolean}",
        "* @description\n * search for approximate pattern in string\n * @param word\n * @param pattern\n * @returns {*}",
        "* @description\n * return the first n element of an array,\n * if expression provided, is returns as long the expression return truthy\n * @param array\n * @param n {number}\n * @param expression {$parse}\n * @return array or single object",
        "* Polyfill to ECMA6 String.prototype.contains",
        "* @param num {Number}\n * @param decimal {Number}\n * @param $math\n * @returns {Number}",
        "* @description\n * Get an object, and return an array composed of it's properties names(nested too).\n * @param obj {Object}\n * @param stack {Array}\n * @param parent {String}\n * @returns {Array}\n * @example\n * parseKeys({ a:1, b: { c:2, d: { e: 3 } } }) ==> [\"a\", \"b.c\", \"b.d.e\"]",
        "* @description\n * Test if given object is a Scope instance\n * @param obj\n * @returns {Boolean}",
        "* @ngdoc filter\n * @name a8m.angular\n * @kind function\n *\n * @description\n * reference to angular function",
        "* @ngdoc filter\n * @name a8m.conditions\n * @kind function\n *\n * @description\n * reference to math conditions",
        "* @ngdoc filter\n * @name isNull\n * @kind function\n *\n * @description\n * checks if value is null or not\n * @return Boolean",
        "* @ngdoc filter\n * @name after-where\n * @kind function\n *\n * @description\n * get a collection and properties object, and returns all of the items\n * in the collection after the first that found with the given properties.\n *",
        "* @ngdoc filter\n * @name after\n * @kind function\n *\n * @description\n * get a collection and specified count, and returns all of the items\n * in the collection after the specified count.\n *",
        "* @ngdoc filter\n * @name before-where\n * @kind function\n *\n * @description\n * get a collection and properties object, and returns all of the items\n * in the collection before the first that found with the given properties.\n *",
        "* @ngdoc filter\n * @name before\n * @kind function\n *\n * @description\n * get a collection and specified count, and returns all of the items\n * in the collection before the specified count.",
        "* @ngdoc filter\n * @name concat\n * @kind function\n *\n * @description\n * get (array/object, object/array) and return merged collection\n *",
        "* @ngdoc filter\n * @name contains\n * @kind function\n *\n * @description\n * Checks if given expression is present in one or more object in the collection",
        "* @ngdoc filter\n * @name countBy\n * @kind function\n *\n * @description\n * Sorts a list into groups and returns a count for the number of objects in each group.",
        "* @ngdoc filter\n * @name defaults\n * @kind function\n *\n * @description\n * defaultsFilter allows to specify a default fallback value for properties that resolve to undefined.",
        "* @ngdoc filter\n * @name every\n * @kind function\n *\n * @description\n * Checks if given expression is present in all members in the collection\n *",
        "* @ngdoc filter\n * @name filterBy\n * @kind function\n *\n * @description\n * filter by specific properties, avoid the rest",
        "* check if there is concatenate properties\n           * example:\n           * object: { first: 'foo', last:'bar' }\n           * filterBy: ['first + last'] => search by full name(i.e 'foo bar')",
        "* @ngdoc filter\n * @name first\n * @kind function\n *\n * @description\n * Gets the first element or first n elements of an array\n * if callback is provided, is returns as long the callback return truthy",
        "* @ngdoc filter\n * @name flatten\n * @kind function\n *\n * @description\n * Flattens a nested array (the nesting can be to any depth).\n * If you pass shallow, the array will only be flattened a single level",
        "* flatten nested array (the nesting can be to any depth).\n * @param array {Array}\n * @param i {int}\n * @returns {Array}\n * @private",
        "* @ngdoc filter\n * @name fuzzyByKey\n * @kind function\n *\n * @description\n * fuzzy string searching by key",
        "* @ngdoc filter\n * @name fuzzy\n * @kind function\n *\n * @description\n * fuzzy string searching for array of strings, objects",
        "* checks if object has key{string} that match\n       * to fuzzy search pattern\n       * @param object\n       * @param search\n       * @returns {boolean}\n       * @private",
        "* @ngdoc filter\n * @name groupBy\n * @kind function\n *\n * @description\n * Create an object composed of keys generated from the result of running each element of a collection,\n * each key is an array of the elements.",
        "* groupBy function\n       * @param collection\n       * @param getter\n       * @returns {{}}",
        "* @ngdoc filter\n * @name isEmpty\n * @kind function\n *\n * @description\n * get collection or string and return if it empty",
        "* @ngdoc filter\n * @name join\n * @kind function\n *\n * @description\n * join a collection by a provided delimiter (space by default)",
        "* @ngdoc filter\n * @name last\n * @kind function\n *\n * @description\n * Gets the last element or last n elements of an array\n * if callback is provided, is returns as long the callback return truthy",
        "* @ngdoc filter\n * @name map\n * @kind function\n *\n * @description\n * Returns a new collection of the results of each expression execution.",
        "* @ngdoc filter\n * @name omit\n * @kind function\n *\n * @description\n * filter collection by expression",
        "* @ngdoc filter\n * @name omit\n * @kind function\n *\n * @description\n * filter collection by expression",
        "* @ngdoc filter\n * @name removeWith\n * @kind function\n *\n * @description\n * get collection and properties object, and removed elements\n * with this properties",
        "* @ngdoc filter\n * @name remove\n * @kind function\n *\n * @description\n * remove specific members from collection",
        "* @ngdoc filter\n * @name reverse\n * @kind function\n *\n * @description\n * Reverses a string or collection",
        "* @ngdoc filter\n * @name searchField\n * @kind function\n *\n * @description\n * for each member, join several strings field and add them to\n * new field called 'searchField' (use for search filtering)",
        "* @ngdoc filter\n * @name toArray\n * @kind function\n *\n * @description\n * Convert objects into stable arrays.\n * if addKey set to true,the filter also attaches a new property\n * $key to the value containing the original key that was used in\n * the object we are iterating over to reference the property",
        "* @ngdoc filter\n * @name unique/uniq\n * @kind function\n *\n * @description\n * get collection and filter duplicate members\n * if uniqueFilter get a property(nested to) as argument it's\n * filter by this property as unique identifier",
        "* @ngdoc filter\n * @name where\n * @kind function\n *\n * @description\n * of each element in a collection to the given properties object,\n * returning an array of all elements that have equivalent property values.\n *",
        "* @ngdoc filter\n * @name xor\n * @kind function\n *\n * @description\n * Exclusive or filter by expression",
        "* @ngdoc filter\n * @name formatBytes\n * @kind function\n *\n * @description\n * Convert bytes into appropriate display \n * 1024 bytes => 1 KB",
        "* @ngdoc filter\n * @name degrees\n * @kind function\n *\n * @description\n * Convert angle from radians to degrees\n *",
        "* @ngdoc filter\n * @name formatBytes\n * @kind function\n *\n * @description\n * Convert bytes into appropriate display \n * 1024 kilobytes => 1 MB",
        "* @ngdoc module\n * @name math\n * @description\n * reference to global Math object",
        "* @ngdoc filter\n * @name max\n * @kind function\n *\n * @description\n * Math.max will get an array and return the max value. if an expression\n * is provided, will return max value by expression.",
        "* @private\n     * @param array\n     * @param exp\n     * @returns {number|*|Number}",
        "* @ngdoc filter\n * @name min\n * @kind function\n *\n * @description\n * Math.min will get an array and return the min value. if an expression\n * is provided, will return min value by expression.",
        "* @private\n     * @param array\n     * @param exp\n     * @returns {number|*|Number}",
        "* @ngdoc filter\n * @name Percent\n * @kind function\n *\n * @description\n * percentage between two numbers\n *",
        "* @ngdoc filter\n * @name toRadians\n * @kind function\n *\n * @description\n * Convert angle from degrees to radians\n *",
        "* @ngdoc filter\n * @name Radix\n * @kind function\n *\n * @description\n * converting decimal numbers to different bases(radix)",
        "* @ngdoc filter\n * @name formatBytes\n * @kind function\n *\n * @description\n * Convert number into abbreviations.\n * i.e: K for one thousand, M for Million, B for billion\n * e.g: number of users:235,221, decimal:1 => 235.2 K",
        "* @ngdoc filter\n * @name sum\n * @kind function\n *\n * @description\n * Sum up all values within an array\n *",
        "* @ngdoc filter\n * @name endsWith\n * @kind function\n *\n * @description\n * checks whether string ends with the ends parameter.",
        "* @ngdoc filter\n * @name ltrim\n * @kind function\n *\n * @description\n * Left trim. Similar to trimFilter, but only for left side.",
        "* @ngdoc filter\n * @name repeat\n * @kind function\n *\n * @description\n * Repeats a string n times",
        "* Repeats a string n times with given separator\n * @param str string to repeat\n * @param n number of times\n * @param sep separator\n * @returns {*}",
        "* @ngdoc filter\n* @name rtrim\n* @kind function\n*\n* @description\n* Right trim. Similar to trimFilter, but only for right side.",
        "* @ngdoc filter\n * @name slugify\n * @kind function\n *\n * @description\n * remove spaces from string, replace with \"-\" or given argument",
        "* @ngdoc filter\n * @name startWith\n * @kind function\n *\n * @description\n * checks whether string starts with the starts parameter.",
        "* @ngdoc filter\n * @name stringular\n * @kind function\n *\n * @description\n * get string with {n} and replace match with enumeration values",
        "* @ngdoc filter\n * @name stripTags\n * @kind function\n *\n * @description\n * strip html tags from string",
        "* @ngdoc filter\n * @name trim\n * @kind function\n *\n * @description\n *  Strip whitespace (or other characters) from the beginning and end of a string",
        "* @ngdoc filter\n * @name truncate\n * @kind function\n *\n * @description\n * truncates a string given a specified length, providing a custom string to denote an omission.",
        "* @ngdoc filter\n * @name ucfirst\n * @kind function\n *\n * @description\n * ucfirst\n *",
        "* @ngdoc filter\n * @name uriComponentEncode\n * @kind function\n *\n * @description\n * get string as parameter and return encoded string",
        "* @ngdoc filter\n * @name uriEncode\n * @kind function\n *\n * @description\n * get string as parameter and return encoded string",
        "* @ngdoc filter\n * @name wrap\n * @kind function\n *\n * @description\n * Wrap a string with another string",
        "* @ngdoc provider\n * @name filterWatcher\n * @kind function\n *\n * @description\n * store specific filters result in $$cache, based on scope life time(avoid memory leak).\n * on scope.$destroy remove it's cache from $$cache container",
        "* Cache storing\n       * @type {Object}",
        "* Scope listeners container\n       * scope.$destroy => remove all cache keys\n       * bind to current scope.\n       * @type {Object}",
        "* $timeout without triggering the digest cycle\n       * @type {function}",
        "* @description\n       * get `HashKey` string based on the given arguments.\n       * @param fName\n       * @param args\n       * @returns {string}",
        "* @description\n       * fir on $scope.$destroy,\n       * remove cache based scope from `$$cache`,\n       * and remove itself from `$$listeners`\n       * @param event",
        "* @description\n       * for angular version that greater than v.1.3.0\n       * if clear cache when the digest cycle end.",
        "* @description\n       * Store hashKeys in $$listeners container\n       * on scope.$destroy, remove them all(bind an event).\n       * @param scope\n       * @param hashKey\n       * @returns {*}",
        "* @description\n       * return the `cacheKey` or undefined.\n       * @param filterName\n       * @param args\n       * @returns {*}",
        "* @description\n       * store `result` in `$$cache` container, based on the hashKey.\n       * add $destroy listener and return result\n       * @param filterName\n       * @param args\n       * @param scope\n       * @param result\n       * @returns {*}",
        "* @ngdoc module\n * @name angular.filters\n * @description\n * Bunch of useful filters for angularJS"
    ],
    "functions": [
        "toArray",
        "isNull",
        "objectContains",
        "hasApproxPattern",
        "getFirstMatches",
        "convertToDecimal",
        "deepKeys",
        "isScope",
        "isGreaterThanFilter",
        "isGreaterThanOrEqualToFilter",
        "isLessThanFilter",
        "isLessThanOrEqualToFilter",
        "isEqualToFilter",
        "isNotEqualToFilter",
        "isIdenticalToFilter",
        "isNotIdenticalToFilter",
        "containsFilter",
        "flatten",
        "_hasApproximateKey",
        "_groupBy",
        "uniqFilter",
        "some",
        "some",
        "indexByMax",
        "indexByMin",
        "strRepeat",
        "getHashKey",
        "removeCache",
        "cleanStateless",
        "addListener",
        "$$isMemoized",
        "$$memoize"
    ],
    "classes": []
}