{
    "identifiers": [
        "$",
        "$",
        "s",
        "d",
        "log",
        "s",
        "d",
        "benchmark",
        "s",
        "s",
        "alert",
        "s",
        "table",
        "$headers",
        "table",
        "table",
        "table",
        "rows",
        "rows",
        "cells",
        "i",
        "l",
        "i",
        "$",
        "$",
        "$headers",
        "i",
        "$",
        "$headers",
        "i",
        "p",
        "getParserById",
        "$",
        "$headers",
        "i",
        "table",
        "i",
        "table",
        "i",
        "p",
        "getParserById",
        "table",
        "i",
        "p",
        "p",
        "detectParserForColumn",
        "table",
        "rows",
        "i",
        "table",
        "parsersDebug",
        "i",
        "p",
        "p",
        "table",
        "log",
        "parsersDebug",
        "table",
        "rows",
        "rowIndex",
        "cellIndex",
        "parsers",
        "nodeValue",
        "keepLooking",
        "rowIndex",
        "rows",
        "rowIndex",
        "node",
        "getNodeFromRowAndCellIndex",
        "rows",
        "rowIndex",
        "cellIndex",
        "nodeValue",
        "trimAndGetNodeText",
        "table",
        "node",
        "table",
        "log",
        "rowIndex",
        "keepLooking",
        "i",
        "l",
        "i",
        "parsers",
        "i",
        "nodeValue",
        "table",
        "node",
        "parsers",
        "i",
        "parsers",
        "rows",
        "rowIndex",
        "cellIndex",
        "rows",
        "rowIndex",
        "cellIndex",
        "config",
        "node",
        "$",
        "getElementText",
        "config",
        "node",
        "name",
        "parsers",
        "i",
        "l",
        "i",
        "parsers",
        "i",
        "name",
        "parsers",
        "i",
        "table",
        "table",
        "table",
        "table",
        "table",
        "table",
        "table",
        "i",
        "totalRows",
        "i",
        "$",
        "table",
        "i",
        "c",
        "table",
        "cache",
        "cache",
        "cache",
        "cache",
        "c",
        "cache",
        "c",
        "j",
        "totalCells",
        "j",
        "cols",
        "parsers",
        "j",
        "getElementText",
        "table",
        "c",
        "j",
        "table",
        "c",
        "j",
        "cols",
        "cache",
        "cache",
        "cols",
        "cols",
        "table",
        "benchmark",
        "totalRows",
        "cacheTime",
        "cache",
        "config",
        "node",
        "node",
        "config",
        "config",
        "node",
        "config",
        "config",
        "text",
        "node",
        "node",
        "node",
        "text",
        "node",
        "text",
        "node",
        "config",
        "text",
        "config",
        "node",
        "text",
        "$",
        "node",
        "text",
        "table",
        "cache",
        "table",
        "c",
        "c",
        "n",
        "n",
        "$",
        "table",
        "i",
        "totalRows",
        "i",
        "n",
        "i",
        "checkCell",
        "rows",
        "r",
        "pos",
        "table",
        "r",
        "pos",
        "j",
        "l",
        "j",
        "tableBody",
        "r",
        "pos",
        "j",
        "table",
        "table",
        "table",
        "rows",
        "rows",
        "table",
        "benchmark",
        "appendTime",
        "applyWidget",
        "table",
        "setTimeout",
        "$",
        "table",
        "table",
        "table",
        "$",
        "computeTableHeaderCellIndexes",
        "table",
        "$tableHeaders",
        "$",
        "table",
        "table",
        "index",
        "header_index",
        "formatSortingOrder",
        "table",
        "checkHeaderMetadata",
        "checkHeaderOptions",
        "table",
        "index",
        "checkHeaderOptionsSortingLocked",
        "table",
        "index",
        "checkHeaderOptionsSortingLocked",
        "table",
        "index",
        "$",
        "table",
        "table",
        "table",
        "$th",
        "table",
        "index",
        "table",
        "benchmark",
        "time",
        "log",
        "$tableHeaders",
        "$tableHeaders",
        "t",
        "t",
        "thead",
        "i",
        "trs",
        "i",
        "trs",
        "i",
        "j",
        "cells",
        "j",
        "cells",
        "j",
        "c",
        "rowIndex",
        "c",
        "c",
        "c",
        "matrix",
        "rowIndex",
        "matrix",
        "rowIndex",
        "k",
        "matrix",
        "rowIndex",
        "k",
        "matrix",
        "rowIndex",
        "k",
        "firstAvailCol",
        "k",
        "lookup",
        "cellId",
        "firstAvailCol",
        "k",
        "rowIndex",
        "rowSpan",
        "k",
        "matrix",
        "k",
        "matrix",
        "k",
        "matrix",
        "k",
        "l",
        "firstAvailCol",
        "colSpan",
        "l",
        "matrixrow",
        "l",
        "lookup",
        "table",
        "rows",
        "row",
        "table",
        "r",
        "row",
        "i",
        "c",
        "i",
        "c",
        "i",
        "cell",
        "arr",
        "arr",
        "checkCellColSpan",
        "table",
        "headerArr",
        "row",
        "table",
        "cell",
        "r",
        "row",
        "arr",
        "cell",
        "arr",
        "cell",
        "$",
        "$",
        "cell",
        "table",
        "i",
        "table",
        "i",
        "table",
        "i",
        "table",
        "i",
        "table",
        "i",
        "table",
        "i",
        "table",
        "i",
        "table",
        "table",
        "c",
        "i",
        "l",
        "i",
        "getWidgetById",
        "c",
        "i",
        "table",
        "name",
        "widgets",
        "i",
        "l",
        "i",
        "widgets",
        "i",
        "name",
        "widgets",
        "i",
        "v",
        "v",
        "v",
        "v",
        "v",
        "a",
        "a",
        "i",
        "l",
        "i",
        "a",
        "i",
        "v",
        "table",
        "$headers",
        "css",
        "$headers",
        "css",
        "css",
        "$headers",
        "offset",
        "h",
        "$",
        "i",
        "l",
        "i",
        "h",
        "i",
        "css",
        "i",
        "table",
        "$headers",
        "table",
        "c",
        "$",
        "$",
        "table",
        "colgroup",
        "$",
        "$",
        "$",
        "table",
        "colgroup",
        "table",
        "sortList",
        "table",
        "sortList",
        "i",
        "l",
        "i",
        "sortList",
        "i",
        "c",
        "s",
        "o",
        "s",
        "o",
        "table",
        "sortList",
        "cache",
        "table",
        "sortList",
        "i",
        "l",
        "i",
        "sortList",
        "i",
        "sortList",
        "i",
        "table",
        "c",
        "order",
        "makeSortFunction",
        "c",
        "makeSortFunction",
        "c",
        "order",
        "makeSortFunction",
        "c",
        "makeSortFunction",
        "c",
        "i",
        "dynamicExp",
        "e",
        "s",
        "dynamicExp",
        "e",
        "e",
        "dynamicExp",
        "cache",
        "dynamicExp",
        "orgOrderCol",
        "orgOrderCol",
        "i",
        "l",
        "i",
        "dynamicExp",
        "dynamicExp",
        "dynamicExp",
        "table",
        "benchmark",
        "dynamicExp",
        "eval",
        "dynamicExp",
        "cache",
        "sortWrapper",
        "table",
        "benchmark",
        "sortList",
        "order",
        "sortTime",
        "cache",
        "direction",
        "index",
        "index",
        "index",
        "direction",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "direction",
        "a",
        "b",
        "a",
        "b",
        "b",
        "a",
        "direction",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "direction",
        "a",
        "b",
        "a",
        "b",
        "b",
        "a",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "a",
        "b",
        "table",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "table",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "b",
        "a",
        "parsers",
        "i",
        "parsers",
        "i",
        "settings",
        "config",
        "$",
        "$",
        "settings",
        "$this",
        "$",
        "$",
        "config",
        "$headers",
        "buildHeaders",
        "buildParserCache",
        "$headers",
        "cache",
        "buildCache",
        "config",
        "config",
        "fixColumnWidth",
        "$headers",
        "e",
        "$this",
        "$this",
        "totalRows",
        "$this",
        "$",
        "e",
        "config",
        "config",
        "config",
        "config",
        "j",
        "a",
        "j",
        "a",
        "j",
        "i",
        "config",
        "a",
        "j",
        "config",
        "i",
        "isValueInArray",
        "i",
        "config",
        "j",
        "config",
        "j",
        "config",
        "j",
        "config",
        "s",
        "s",
        "i",
        "o",
        "s",
        "o",
        "s",
        "o",
        "config",
        "i",
        "setTimeout",
        "setHeadersCss",
        "$this",
        "$headers",
        "config",
        "sortCSS",
        "appendToTable",
        "$this",
        "multisort",
        "$this",
        "config",
        "cache",
        "config",
        "$this",
        "setTimeout",
        "me",
        "buildParserCache",
        "me",
        "$headers",
        "cache",
        "buildCache",
        "me",
        "e",
        "cell",
        "cell",
        "cell",
        "cache",
        "pos",
        "pos",
        "config",
        "pos",
        "getElementText",
        "config",
        "cell",
        "cell",
        "e",
        "$",
        "config",
        "config",
        "updateHeaderSortCount",
        "sortList",
        "setHeadersCss",
        "$headers",
        "sortList",
        "sortCSS",
        "appendToTable",
        "multisort",
        "sortList",
        "cache",
        "appendToTable",
        "cache",
        "e",
        "id",
        "getWidgetById",
        "id",
        "applyWidget",
        "$",
        "$",
        "$",
        "config",
        "$",
        "config",
        "$this",
        "config",
        "applyWidget",
        "parser",
        "parsers",
        "i",
        "l",
        "i",
        "parsers",
        "i",
        "parser",
        "a",
        "a",
        "parsers",
        "parser",
        "widget",
        "widgets",
        "widget",
        "s",
        "parseFloat",
        "s",
        "isNaN",
        "i",
        "i",
        "s",
        "parseInt",
        "s",
        "isNaN",
        "i",
        "i",
        "s",
        "config",
        "$",
        "s",
        "table",
        "$",
        "empty",
        "table",
        "table",
        "$",
        "$",
        "$",
        "ts",
        "s",
        "s",
        "$",
        "s",
        "ts",
        "s",
        "table",
        "table",
        "$",
        "s",
        "c",
        "s",
        "$",
        "s",
        "ts",
        "s",
        "s",
        "s",
        "$",
        "s",
        "ts",
        "s",
        "s",
        "s",
        "s",
        "a",
        "i",
        "l",
        "i",
        "a",
        "i",
        "item",
        "r",
        "item",
        "r",
        "item",
        "$",
        "r",
        "ts",
        "s",
        "s",
        "s",
        "jQuery",
        "s",
        "ts",
        "s",
        "s",
        "s",
        "$",
        "s",
        "s",
        "ts",
        "s",
        "$",
        "s",
        "s",
        "$",
        "s",
        "ts",
        "s",
        "s",
        "s",
        "$",
        "s",
        "ts",
        "s",
        "s",
        "s",
        "table",
        "table",
        "s",
        "s",
        "c",
        "s",
        "s",
        "c",
        "s",
        "s",
        "c",
        "c",
        "s",
        "s",
        "$",
        "s",
        "ts",
        "s",
        "s",
        "s",
        "$",
        "s",
        "ts",
        "s",
        "s",
        "table",
        "cell",
        "table",
        "c",
        "c",
        "$",
        "cell",
        "p",
        "ts",
        "table",
        "table",
        "$",
        "table",
        "i",
        "$tr",
        "$",
        "$tr",
        "table",
        "row",
        "odd",
        "row",
        "$tr",
        "table",
        "odd",
        "table",
        "odd",
        "table",
        "$",
        "time",
        "jQuery"
    ],
    "literals": [
        "\"header\"",
        "\"headerSortUp\"",
        "\"headerSortDown\"",
        "\"expand-child\"",
        "\"asc\"",
        "\"shiftKey\"",
        "\"simple\"",
        "\"even\"",
        "\"odd\"",
        "\"us\"",
        "'/\\.|\\,/g'",
        "'thead th'",
        "\",\"",
        "\"ms\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"\"",
        "\"column:\"",
        "\" parser:\"",
        "\"\\n\"",
        "''",
        "'Checking if value was empty on row:'",
        "\"Building cache for \"",
        "\" rows:\"",
        "\"\"",
        "\"\"",
        "\"simple\"",
        "\"function\"",
        "\"Rebuilt table:\"",
        "\"sortEnd\"",
        "\"-\"",
        "\"Built headers:\"",
        "'THEAD'",
        "'TR'",
        "\"-\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"x\"",
        "\"Number\"",
        "\"desc\"",
        "'<colgroup>'",
        "\"tr:first td\"",
        "'<col>'",
        "'width'",
        "\"var sortWrapper = function(a,b) {\"",
        "\"text\"",
        "\"text\"",
        "\"asc\"",
        "\"text\"",
        "\"desc\"",
        "\"numeric\"",
        "\"asc\"",
        "\"numeric\"",
        "\"desc\"",
        "\"e\"",
        "\"var \"",
        "\" = \"",
        "\"if(\"",
        "\") { return \"",
        "\"; } \"",
        "\"else { \"",
        "\"return a[\"",
        "\"]-b[\"",
        "\"];\"",
        "\"}; \"",
        "\"return 0; \"",
        "\"}; \"",
        "\"Evaling expression:\"",
        "\"Sorting on \"",
        "\" and dir \"",
        "\" time:\"",
        "\"a[\"",
        "\"]\"",
        "\"b[\"",
        "\"]\"",
        "'text'",
        "'asc'",
        "\"(\"",
        "\" == \"",
        "\" ? 0 : (\"",
        "\" === null ? Number.POSITIVE_INFINITY : (\"",
        "\" === null ? Number.NEGATIVE_INFINITY : (\"",
        "\" < \"",
        "\") ? -1 : 1 )));\"",
        "'text'",
        "'desc'",
        "\"(\"",
        "\" == \"",
        "\" ? 0 : (\"",
        "\" === null ? Number.POSITIVE_INFINITY : (\"",
        "\" === null ? Number.NEGATIVE_INFINITY : (\"",
        "\" < \"",
        "\") ? -1 : 1 )));\"",
        "'numeric'",
        "'asc'",
        "\"(\"",
        "\" === null && \"",
        "\" === null) ? 0 :(\"",
        "\" === null ? Number.POSITIVE_INFINITY : (\"",
        "\" === null ? Number.NEGATIVE_INFINITY : \"",
        "\" - \"",
        "\"));\"",
        "'numeric'",
        "'desc'",
        "\"(\"",
        "\" === null && \"",
        "\" === null) ? 0 :(\"",
        "\" === null ? Number.POSITIVE_INFINITY : (\"",
        "\" === null ? Number.NEGATIVE_INFINITY : \"",
        "\" - \"",
        "\"));\"",
        "\"((a[\"",
        "\"] < b[\"",
        "\"]) ? -1 : ((a[\"",
        "\"] > b[\"",
        "\"]) ? 1 : 0));\"",
        "\"((b[\"",
        "\"] < a[\"",
        "\"]) ? -1 : ((b[\"",
        "\"] > a[\"",
        "\"]) ? 1 : 0));\"",
        "\"a[\"",
        "\"]-b[\"",
        "\"];\"",
        "\"b[\"",
        "\"]-a[\"",
        "\"];\"",
        "\"tablesorter\"",
        "\"sortStart\"",
        "\"update\"",
        "\"updateCell\"",
        "\"sorton\"",
        "\"sortStart\"",
        "\"appendCache\"",
        "\"applyWidgetId\"",
        "\"applyWidgets\"",
        "\"sorton\"",
        "''",
        "\"\"",
        "\"text\"",
        "\"text\"",
        "\"digit\"",
        "\"numeric\"",
        "\"currency\"",
        "\"\"",
        "\"numeric\"",
        "\"ipAddress\"",
        "\".\"",
        "\"\"",
        "\"0\"",
        "\"numeric\"",
        "\"url\"",
        "''",
        "\"text\"",
        "\"isoDate\"",
        "\"\"",
        "\"/\"",
        "\"0\"",
        "\"numeric\"",
        "\"percent\"",
        "\"\"",
        "\"numeric\"",
        "\"usLongDate\"",
        "\"numeric\"",
        "\"shortDate\"",
        "\"/\"",
        "\"us\"",
        "\"$3/$1/$2\"",
        "\"uk\"",
        "\"$3/$2/$1\"",
        "\"dd/mm/yy\"",
        "\"dd-mm-yy\"",
        "\"$1/$2/$3\"",
        "\"numeric\"",
        "\"time\"",
        "\"2000/01/01 \"",
        "\"numeric\"",
        "\"metadata\"",
        "'sortValue'",
        "\"numeric\"",
        "\"zebra\"",
        "\"tr:visible\"",
        "\"Applying Zebra widget\""
    ],
    "variables": [
        "parsers",
        "widgets",
        "parsersDebug",
        "rows",
        "cells",
        "l",
        "i",
        "p",
        "l",
        "node",
        "nodeValue",
        "keepLooking",
        "i",
        "l",
        "i",
        "cacheTime",
        "totalRows",
        "totalCells",
        "parsers",
        "cache",
        "i",
        "c",
        "cols",
        "j",
        "text",
        "appendTime",
        "c",
        "cache",
        "r",
        "n",
        "totalRows",
        "checkCell",
        "tableBody",
        "rows",
        "i",
        "pos",
        "l",
        "j",
        "time",
        "meta",
        "header_index",
        "$th",
        "matrix",
        "lookup",
        "thead",
        "trs",
        "i",
        "cells",
        "j",
        "c",
        "rowIndex",
        "cellId",
        "rowSpan",
        "colSpan",
        "firstAvailCol",
        "k",
        "k",
        "rowIndex",
        "matrixrow",
        "l",
        "firstAvailCol",
        "arr",
        "r",
        "c",
        "i",
        "cell",
        "c",
        "l",
        "i",
        "l",
        "i",
        "l",
        "i",
        "h",
        "l",
        "i",
        "c",
        "colgroup",
        "c",
        "l",
        "i",
        "s",
        "o",
        "sortTime",
        "dynamicExp",
        "l",
        "i",
        "c",
        "order",
        "s",
        "e",
        "orgOrderCol",
        "i",
        "a",
        "b",
        "$this",
        "$document",
        "$headers",
        "cache",
        "config",
        "shiftDown",
        "sortOrder",
        "sortCSS",
        "totalRows",
        "$cell",
        "i",
        "a",
        "j",
        "j",
        "s",
        "o",
        "me",
        "config",
        "pos",
        "sortList",
        "l",
        "a",
        "i",
        "i",
        "i",
        "ts",
        "c",
        "a",
        "r",
        "l",
        "i",
        "item",
        "c",
        "c",
        "p",
        "time",
        "$tr",
        "row",
        "odd"
    ],
    "comments": [
        "debuging utils",
        "parsers utils",
        "In the case of empty tables",
        "0 is always the generic parser (text)",
        "utils",
        "Add the table data to main data array",
        "if this is a child row, add it to the last row's children and",
        "continue to the next row",
        "go to the next for loop",
        "add position for rowCache",
        "var o = ;",
        "",
        "apply table widgets",
        "trigger sortend",
        "this.column = index;",
        "add cell to headerList",
        "from:",
        "http://www.javascripttoolbox.com/lib/table/examples.php",
        "http://www.javascripttoolbox.com/temp/table_cellindex.html",
        "Find first available column in the first row",
        "headerArr[row] = (i+row);",
        "remove all header information",
        "sorting methods",
        "TODO: inline functions.",
        "var s = (getCachedSortType(table.config.parsers,c) == \"text\") ?",
        "((order == 0) ? \"sortText\" : \"sortTextDesc\") : ((order == 0) ?",
        "\"sortNumeric\" : \"sortNumericDesc\");",
        "var s = (table.config.parsers[c].type == \"text\") ? ((order == 0)",
        "? makeSortText(c) : makeSortTextDesc(c)) : ((order == 0) ?",
        "makeSortNumeric(c) : makeSortNumericDesc(c));",
        "+ \"(a[\" + c + \"],b[\" + c",
        "+ \"]); \";",
        "if value is the same keep orignal order",
        "public methods",
        "if no thead or tbody quit.",
        "declare",
        "new blank config object",
        "merge and extend.",
        "store common expression for speed",
        "save the settings where they read",
        "build headers",
        "try to auto detect column type, and store in tables config",
        "build the cache for the tbody cells",
        "get the css class names, could be done else where.",
        "fixate columns if the users supplies the fixedWidth option",
        "apply event handling to headers",
        "this is to big, perhaps break it out?",
        "Only call sortStart if sorting is",
        "enabled.",
        "store exp, for speed",
        "get current column index",
        "get current column sort order",
        "always sort on the locked order.",
        "user only whants to sort on one",
        "column",
        "flush the sort list",
        "add column to sort list",
        "multi column sorting",
        "the user has clicked on an all",
        "ready sortet column.",
        "revers the sorting direction",
        "for all tables.",
        "add column to sort list array",
        "set css for headers",
        "stop normal event by returning false",
        "cancel selection",
        "apply easy methods that trigger binded events",
        "rebuild parsers.",
        "rebuild the cache map",
        "get position from the dom.",
        "update cache",
        "update and store the sortlist",
        "update header count index",
        "set css for headers",
        "sort the table and append it to the dom",
        "apply widgets",
        "if user has supplied a sort list to constructor.",
        "apply widgets",
        "replace all an wanted chars and match.",
        "extend plugin scope",
        "make shortcut",
        "add default parsers",
        "reformat the string in ISO format",
        "reformat the string in ISO format",
        "add default widgets",
        "loop through the visible rows",
        "style children rows the same way the parent",
        "row was styled"
    ],
    "docstrings": [
        "* \n * TableSorter 2.0 - Client-side table sorting with ease!\n * Version 2.0.5b\n * @requires jQuery v1.2.3\n * \n * Copyright (c) 2007 Christian Bach\n * Examples and docs at: http://tablesorter.com\n * Dual licensed under the MIT and GPL licenses:\n * http://www.opensource.org/licenses/mit-license.php\n * http://www.gnu.org/licenses/gpl.html\n *",
        "* \n * @description Create a sortable table with multi-column sorting capabilitys\n * \n * @example $('table').tablesorter();\n * @desc Create a simple tablesorter interface.\n * \n * @example $('table').tablesorter({ sortList:[[0,0],[1,0]] });\n * @desc Create a tablesorter interface and sort on the first and secound column column headers.\n * \n * @example $('table').tablesorter({ headers: { 0: { sorter: false}, 1: {sorter: false} } });\n *          \n * @desc Create a tablesorter interface and disableing the first and second  column headers.\n *      \n * \n * @example $('table').tablesorter({ headers: { 0: {sorter:\"integer\"}, 1: {sorter:\"currency\"} } });\n * \n * @desc Create a tablesorter interface and set a column parser for the first\n *       and second column.\n * \n * \n * @param Object\n *            settings An object literal containing key/value pairs to provide\n *            optional settings.\n * \n * \n * @option String cssHeader (optional) A string of the class name to be appended\n *         to sortable tr elements in the thead of the table. Default value:\n *         \"header\"\n * \n * @option String cssAsc (optional) A string of the class name to be appended to\n *         sortable tr elements in the thead on a ascending sort. Default value:\n *         \"headerSortUp\"\n * \n * @option String cssDesc (optional) A string of the class name to be appended\n *         to sortable tr elements in the thead on a descending sort. Default\n *         value: \"headerSortDown\"\n * \n * @option String sortInitialOrder (optional) A string of the inital sorting\n *         order can be asc or desc. Default value: \"asc\"\n * \n * @option String sortMultisortKey (optional) A string of the multi-column sort\n *         key. Default value: \"shiftKey\"\n * \n * @option String textExtraction (optional) A string of the text-extraction\n *         method to use. For complex html structures inside td cell set this\n *         option to \"complex\", on large tables the complex option can be slow.\n *         Default value: \"simple\"\n * \n * @option Object headers (optional) An array containing the forces sorting\n *         rules. This option let's you specify a default sorting rule. Default\n *         value: null\n * \n * @option Array sortList (optional) An array containing the forces sorting\n *         rules. This option let's you specify a default sorting rule. Default\n *         value: null\n * \n * @option Array sortForce (optional) An array containing forced sorting rules.\n *         This option let's you specify a default sorting rule, which is\n *         prepended to user-selected rules. Default value: null\n * \n * @option Boolean sortLocaleCompare (optional) Boolean flag indicating whatever\n *         to use String.localeCampare method or not. Default set to true.\n * \n * \n * @option Array sortAppend (optional) An array containing forced sorting rules.\n *         This option let's you specify a default sorting rule, which is\n *         appended to user-selected rules. Default value: null\n * \n * @option Boolean widthFixed (optional) Boolean flag indicating if tablesorter\n *         should apply fixed widths to the table columns. This is usefull when\n *         using the pager companion plugin. This options requires the dimension\n *         jquery plugin. Default value: false\n * \n * @option Boolean cancelSelection (optional) Boolean flag indicating if\n *         tablesorter should cancel selection of the table headers text.\n *         Default value: true\n * \n * @option Boolean debug (optional) Boolean flag indicating if tablesorter\n *         should display debuging information usefull for development.\n * \n * @type jQuery\n * \n * @name tablesorter\n * \n * @cat Plugins/Tablesorter\n * \n * @author Christian Bach/christian.bach@polyester.se"
    ],
    "functions": [
        "benchmark",
        "log",
        "buildParserCache",
        "detectParserForColumn",
        "getNodeFromRowAndCellIndex",
        "trimAndGetNodeText",
        "getParserById",
        "buildCache",
        "getElementText",
        "appendToTable",
        "buildHeaders",
        "computeTableHeaderCellIndexes",
        "checkCellColSpan",
        "checkHeaderMetadata",
        "checkHeaderOptions",
        "checkHeaderOptionsSortingLocked",
        "applyWidget",
        "getWidgetById",
        "formatSortingOrder",
        "isValueInArray",
        "setHeadersCss",
        "fixColumnWidth",
        "updateHeaderSortCount",
        "multisort",
        "makeSortFunction",
        "makeSortText",
        "makeSortTextDesc",
        "makeSortNumeric",
        "makeSortNumericDesc",
        "sortText",
        "sortTextDesc",
        "sortNumeric",
        "sortNumericDesc",
        "getCachedSortType",
        "empty"
    ],
    "classes": []
}