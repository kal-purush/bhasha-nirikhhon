{
    "identifiers": [
        "$",
        "methods",
        "url",
        "url",
        "split_url",
        "split_url",
        "name",
        "name",
        "split_name",
        "name",
        "split_name",
        "split_name",
        "split_name",
        "split_name",
        "data",
        "data",
        "data",
        "data",
        "templates",
        "data",
        "seperatorToken",
        "data",
        "seperatorToken",
        "token",
        "data",
        "data",
        "token",
        "data",
        "endToken",
        "data",
        "endIndex",
        "data",
        "data",
        "endIndex",
        "END_TOKEN_SIZE",
        "templates",
        "name",
        "Handlebars",
        "source",
        "key",
        "templates",
        "jQuery",
        "key",
        "jQuery",
        "key",
        "templates",
        "key",
        "context",
        "context",
        "index",
        "element",
        "$",
        "element",
        "methods",
        "loadUrl",
        "pipe",
        "$",
        "loadUrl",
        "data",
        "jQuery",
        "name",
        "Handlebars",
        "data",
        "pipe",
        "context",
        "context",
        "index",
        "element",
        "$",
        "element",
        "pipe",
        "$",
        "loadUrl",
        "data",
        "methods",
        "data",
        "pipe",
        "jQuery",
        "options",
        "callback",
        "args",
        "arguments",
        "args",
        "args",
        "callback",
        "options",
        "options",
        "jQuery",
        "jQuery",
        "jQuery",
        "jQuery",
        "$",
        "options",
        "methods",
        "methods",
        "partialPromises",
        "templatesPromises",
        "callback",
        "$",
        "promises",
        "callback",
        "jQuery",
        "jQuery",
        "jQuery"
    ],
    "literals": [
        "\"/\"",
        "\"?\"",
        "\".\"",
        "\".\"",
        "'\\n'",
        "''",
        "''",
        "'[type=\"text/x-handlebars-template\"]'",
        "'src'",
        "\"text\"",
        "'[type=\"text/handlebar-partials\"]'",
        "'src'",
        "\"text\"",
        "'function'",
        "'function'"
    ],
    "variables": [
        "split_url",
        "name",
        "seperatorToken",
        "endToken",
        "END_TOKEN_SIZE",
        "data",
        "templates",
        "token",
        "name",
        "endIndex",
        "source",
        "pipe",
        "loadUrl",
        "name",
        "pipe",
        "loadUrl",
        "settings",
        "partialPromises",
        "templatesPromises",
        "promises"
    ],
    "comments": [
        "get everything past the last slash",
        "strip querystring",
        "strip extension",
        "this function splits the partials",
        "first we seperate the strings with a regular expression",
        "matches the headers",
        "now we get the names of the partials",
        "first remove all white space charachters that are in groups > 2",
        "now that we have a whitespace stripped version, we loop throught them",
        "all chunking them.",
        "get the first token and extract the key",
        "gets the first token",
        "the name we get token",
        "feed in characters till you get to the end tag.",
        "increment to the next size;",
        "load the, into the handlebarTemplates namespace;",
        "silently fails to load in a  new template if and older one exists;",
        "promise objects",
        "var name = loadUrl.match(/([^\\/]+)(?=\\.\\w+$)/)[0];",
        "here we gather all our promises",
        "we take the nodes and pull out partials",
        "promise objects",
        "handlebarTemplates = Handlebars.compile($(element).html());",
        "gather the promises",
        "each pageload is performed asynchronously and so the data exists only in this",
        "context. here we scrub the input and use it;",
        "checks if theres only one argument and sets the callback to be the first",
        "so we don't overwrite it",
        "gather all the promises from the multiple async calls",
        "we delay exection of the callback until all the promises are fullfilled!!",
        "return the original jquery object"
    ],
    "docstrings": [
        "* this file is a basic helper utility for people\n * using handlebars.js. it allowes you to store several\n * handlebars templates seperated with\n *\n *       <!--#?templateid-->\n *\n *\n *       <!--#?end-->\n *\n * Created by Peter de Croos (Cultofmetatron)\n * blog.peterdecroos.com"
    ],
    "functions": [],
    "classes": []
}