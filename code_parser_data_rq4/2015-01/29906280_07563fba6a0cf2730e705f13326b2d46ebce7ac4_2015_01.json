{
    "identifiers": [
        "define",
        "$",
        "als",
        "toolbar",
        "toolbar",
        "iframe",
        "iframe",
        "toolbar",
        "toolbar",
        "setTimeout",
        "script",
        "script",
        "script",
        "root",
        "$",
        "defaults",
        "root",
        "$",
        "$",
        "$",
        "yMaps",
        "yMaps",
        "arguments",
        "require",
        "require",
        "ymaps",
        "el",
        "ymapsmlButton",
        "$",
        "ymapsmlButton1",
        "$",
        "ymapsmlButton",
        "ymapsmlButton1",
        "ymapsmlButton",
        "ymaps",
        "ymaps",
        "ymaps",
        "ymaps",
        "ymaps",
        "objects1",
        "myMap",
        "objects1",
        "ymapsmlButton1",
        "ymaps",
        "objects1",
        "result",
        "objects1",
        "objects1",
        "objects1",
        "objects1",
        "result",
        "myMap",
        "result2",
        "$",
        "ymaps",
        "markerElement",
        "dragger",
        "onDraggerStart",
        "onDraggerMove",
        "onDraggerEnd",
        "markerElement",
        "offset",
        "position",
        "markerOffset",
        "position",
        "offset",
        "position",
        "offset",
        "markerPosition",
        "position",
        "markerOffset",
        "position",
        "markerOffset",
        "markerPosition",
        "applyMarkerPosition",
        "applyDelta",
        "applyDelta",
        "markerPosition",
        "markerOffset",
        "markerPosition",
        "markerOffset",
        "myMap",
        "markerPosition",
        "myMap",
        "myMap",
        "mapContainerSize",
        "mapContainerSize",
        "mapGlobalPixelCenter",
        "mapContainerHalfSize",
        "mapGlobalPixelCenter",
        "mapContainerHalfSize",
        "mapGlobalPixelCenter",
        "mapContainerHalfSize",
        "mapGlobalPixelCenter",
        "mapContainerHalfSize",
        "containsPoint",
        "mapGlobalPixelBounds",
        "markerGlobalPosition",
        "myMap",
        "markerGlobalPosition",
        "myMap",
        "alert",
        "geoPosition",
        "markerPosition",
        "delta",
        "markerPosition",
        "delta",
        "applyMarkerPosition",
        "markerElement",
        "markerPosition",
        "markerPosition",
        "bounds",
        "point",
        "point",
        "bounds",
        "point",
        "bounds",
        "point",
        "bounds",
        "point",
        "bounds",
        "ymaps",
        "SearchControl",
        "coor",
        "coor_1",
        "myPlacemark",
        "ymaps",
        "coor",
        "myPlacemark",
        "myPlacemark",
        "e",
        "prev",
        "myPlacemark",
        "myPlacemark",
        "e",
        "myPlacemark",
        "myPlacemark",
        "e",
        "coor_1",
        "distance",
        "ymaps",
        "prev",
        "current",
        "savecoordinats",
        "ymaps",
        "coor_1",
        "res",
        "res",
        "myMap",
        "coor_1",
        "firstGeoObject",
        "myPlacemark",
        "e",
        "coor_1",
        "e",
        "distance",
        "ymaps",
        "coor",
        "coor_1",
        "savecoordinats",
        "ymaps",
        "coor_1",
        "res",
        "res",
        "myMap",
        "coor_1",
        "firstGeoObject",
        "SearchControl",
        "e",
        "coor_1",
        "SearchControl",
        "distance",
        "ymaps",
        "coor",
        "coor_1",
        "savecoordinats",
        "ymaps",
        "coor_1",
        "res",
        "res",
        "myMap",
        "coor_1",
        "firstGeoObject",
        "savecoordinats",
        "savecoordinats",
        "coor_1",
        "coor_1",
        "myPlacemark",
        "new_coords",
        "new_coords",
        "myMap",
        "myMap",
        "center",
        "center",
        "new_center",
        "distance",
        "als"
    ],
    "literals": [
        "'coords_point'",
        "'jquery'",
        "'als'",
        "'use strict'",
        "'DOMContentLoaded'",
        "'toolbar'",
        "'src'",
        "'script[name=ets-anchor]'",
        "'//api-maps.yandex.ru/2.0.39/?load=package.full&lang=ru-RU&onload=yandexMapsLoaded'",
        "'//yandex.st/jquery/2.1.1/jquery.min.js'",
        "'yandex#map'",
        "\"zoomControl\"",
        "'.load-ymapsml'",
        "'.load-ymapsml1'",
        "\"balloonContent\"",
        "\"Международный аэропорт Внуково\"",
        "\"hintContent\"",
        "\"Аэропорт Внуково\"",
        "'twirl#airplaneIcon'",
        "\"balloonContent\"",
        "\"Международный аэропорт Быково\"",
        "\"hintContent\"",
        "\"Аэропорт Быково\"",
        "'twirl#airplaneIcon'",
        "\"balloonContent\"",
        "\"Международный аэропорт Домодедово\"",
        "\"hintContent\"",
        "\"Аэропорт Домодедово\"",
        "'twirl#airplaneIcon'",
        "\"balloonContent\"",
        "\"Международный аэропорт Шереметьево\"",
        "\"hintContent\"",
        "\"Аэропорт Шереметьево\"",
        "'twirl#airplaneIcon'",
        "'visible'",
        "'init object'",
        "'init object'",
        "'#marker'",
        "'start'",
        "'move'",
        "'stop'",
        "'position'",
        "'init object'",
        "'init object'",
        "'init object'",
        "'projection'",
        "' '",
        "'delta'",
        "'zoomControl'",
        "'typeSelector'",
        "'mapTools'",
        "'smallZoomControl'",
        "'scrollZoom'",
        "'rightMouseButtonMagnifier'",
        "\"islands#violetDotIcon\"",
        "\"dragstart\"",
        "\"drag\"",
        "\"dragend\"",
        "'Адрес метки:'",
        "'<p><small>'",
        "'text'",
        "'</small></p>'",
        "'click'",
        "'coordPosition'",
        "'Адрес метки:'",
        "'<p><small>'",
        "'text'",
        "'</small></p>'",
        "\"resultselect\"",
        "'Адрес метки:'",
        "'<p><small>'",
        "'text'",
        "'</small></p>'",
        "'boundschange'",
        "'newZoom'",
        "'oldZoom'",
        "'newCenter'",
        "'oldCenter'",
        "\"latlongmet\"",
        "\"mapzoom\"",
        "\"latlongcenter\"",
        "\"distance\"",
        "'ymap-ready'"
    ],
    "variables": [
        "toolbar",
        "iframe",
        "script",
        "defaults",
        "yMaps",
        "myPlacemark",
        "coor",
        "coor_1",
        "myCollection",
        "prev",
        "distance",
        "distance1",
        "i",
        "el",
        "myMap",
        "objects1",
        "result",
        "result1",
        "result2",
        "markerElement",
        "dragger",
        "markerOffset",
        "markerPosition",
        "offset",
        "position",
        "markerGlobalPosition",
        "mapGlobalPixelCenter",
        "mapContainerSize",
        "mapContainerHalfSize",
        "mapGlobalPixelBounds",
        "geoPosition",
        "delta",
        "SearchControl",
        "current",
        "firstGeoObject",
        "firstGeoObject",
        "firstGeoObject",
        "new_coords",
        "center",
        "new_center"
    ],
    "comments": [
        "Copyright Art. Lebedev | http://www.artlebedev.ru",
        "Created 2014-01-20 by Rie (Iblyaminov Albert)",
        "Updated 2014-08-18 by dryzhov (Ryzhov Dmitry)",
        "!!!!",
        "!!!!",
        "!!!!",
        "Отключение кеширования атрибута disabled в Firefox.",
        "Сохраняем значение this.yMap в переменнную myMap.",
        "Добавляем метки аэропортов на карту, по клику на кнопку \"Показать аэропорты\"",
        "// Создание GeoQueryResult из JSON.\n    var result = ymaps.geoQuery({\n        type: 'FeatureCollection',\n            features: [\n                {\n                    type: 'Feature',\n                    geometry: {\n                        type: 'Point',\n                        coordinates: [55.617222, 38.059999]\n                 },\n                 \"properties\": {\n                 \"balloonContent\": \"Международный аэропорт Быково\",\n                 \"hintContent\": \"Аэропорт Быково\"\n                 },\n                 \"options\": {\n                 \"preset\": \"twirl#airplaneIcon\"\n                 }\n                },\n                {\n                    type: 'Feature',\n                    geometry: {\n                        type: 'Point',\n                        coordinates: [55.408786, 37.906314]\n                    },\n                 \"properties\": {\n                 \"balloonContent\": \"Международный аэропорт Домодедово\",\n                 \"hintContent\": \"Аэропорт Домодедово\"\n                 },\n                 \"options\": {\n                 \"preset\": \"twirl#airplaneIcon\"\n                 }\n                },\n                {\n                    type: 'Feature',\n                    geometry: {\n                        type: 'Point',\n                        coordinates: [55.591531, 37.261486]\n                    },\n                 \"properties\": {\n                 \"balloonContent\": \"Международный аэропорт Внуково\",\n                 \"hintContent\": \"Аэропорт Внуково\"\n                 },\n                 \"options\": {\n                 \"preset\": \"twirl#airplaneIcon\"\n                 }\n                },\n                {\n                    type: 'Feature',\n                    geometry: {\n                        type: 'Point',\n                        coordinates: [55.972642, 37.414589]\n                    },\n                 \"properties\": {\n                 \"balloonContent\": \"Международный аэропорт Шереметьево\",\n                 \"hintContent\": \"Аэропорт Шереметьево\"\n                 },\n                 \"options\": {\n                 \"preset\": \"twirl#airplaneIcon\"\n                 }\n                }\n            ]\n      });\n// Неточечные объекты добавим на карту как есть.\nresult.search('geometry.type != \"Point\"').addToMap(myMap);\n// Точечные объекты добавим на карту через кластеризатор.\nmyMap.geoObjects.add(result.search('geometry.type == \"Point\"').clusterize());\n\n//удаление объектов(списка аэропортов) с карты\nymapsmlButton1.click(function () {\nvar result1 = result.remove(result);\nmyMap.geoObjects.remove(result);\nconsole.log('init object', result1);\n});",
        "Создание GeoQueryResult из массива геообъектов.",
        "Свойства",
        "Текст метки",
        "Опции",
        "Иконка метки будет растягиваться под ее контент",
        "Свойства",
        "Текст метки",
        "Опции",
        "Иконка метки будет растягиваться под ее контент",
        "Свойства",
        "Текст метки",
        "Опции",
        "Иконка метки будет растягиваться под ее контент",
        "Свойства",
        "Текст метки",
        "Опции",
        "Иконка метки будет растягиваться под ее контент",
        "добавляем массив с данными аэропортов",
        "удаление объектов(списка аэропортов) с карты",
        "запрос на получение списка объектов из массива objects1",
        "удаление объектов из результата запроса. Обнуление массива objects1",
        "удаление объектов с карты",
        "проверка что переменная result существует, перед ее удалением",
        "result && result.remove(objects);",
        "Подгрузка xml-файла со списком меток.",
        "// При нажатии на кнопку загружаем соответствующий XML-файл.\n    // и отображаем его данные на карте.\n    ymapsmlButton.click(function (e) {\n        ymaps.geoXml.load('http://maps.yandex.ru/export/usermaps/93jfWjoXws37exPmKH-OFIuj3IQduHal/')\n            .then(onGeoXmlLoad);\n        e.target.disabled = true;\n        var load = ymaps.geoXml.load('http://maps.yandex.ru/export/usermaps/93jfWjoXws37exPmKH-OFIuj3IQduHal/');\n        console.log('init object', load);\n    });\n\n    // Обработчик загрузки XML-файлов.\n    function onGeoXmlLoad (res) {\n        myMap.geoObjects.add(res.geoObjects);\n        if (res.mapState) {\n            res.mapState.applyToMap(myMap);\n        }\n    }",
        "Создание GeoQueryResult из файла data.js.",
        "$.getScript(\"http://intranet.russiancarbon.org/f/min/blocks/data.js\");",
        "ДОБАВЛЯЕМ ДРАГГЕР К КАРТЕ. Перетаскиваемую метку, находящуюся под блоком с картой.",
        "var markerElement = Ext.select('#marker #marker_1');",
        "Драггер будет автоматически запускаться при нажатии на элемент 'marker'.",
        "Смещение маркера относительно курсора.",
        "markerElement.offset({top:1049, left:0});",
        "markerElement.html( \"left: \" + offset.left + \", top: \" + offset.top );",
        "position[0] = 0;",
        "position[0] = 0;",
        "Сохраняем смещение маркера относительно точки начала драга.",
        "Переводим координаты страницы в глобальные пиксельные координаты.",
        "Получаем центр карты в глобальных пиксельных координатах.",
        "Получением размер контейнера карты на странице.",
        "Вычисляем границы карты в глобальных пиксельных координатах.",
        "Проверяем, что завершение работы драггера произошло в видимой области карты.",
        "Теперь переводим глобальные пиксельные координаты в геокоординаты с учетом текущего уровня масштабирования карты.",
        "Поле 'delta' содержит разницу между положениями текущего и предыдущего события драггера.",
        "Определяем элемент управления поиск адреса по карте",
        "Добавляем элементы управления на карту",
        "Общая начальная точка метки. Откуда начинаем считать расстояние(getDistance()) в трех обработчиках событий(перетаскивания, клика по карте, поиска по карте).",
        "Начальные координаты точки, если не было произведено никаких действий по карте. Нужны для функции savecoordinats().",
        "Определяем метку и добавляем ее на карту",
        "Отслеживаем событие начала перемещения метки",
        "Начальная точка при перемещении метки. Откуда начинаем считать расстояние",
        "Отслеживаем событие перемещения метки",
        "alert(ymaps.formatter.distance(\n       ymaps.coordSystem.geo.getDistance(prev, current)\n     ));",
        "console.log('init object', distance);",
        "Отслеживаем событие завершения перемещения метки",
        "Конечная точка метки при перемещении. Где заканчивааем считать расстояние",
        "Пройденное расстояние",
        "Отправим запрос на геокодирование. Геокодирование координат полученной метки, в полный адрес. Его вывод в балуне метки.",
        "Отслеживаем событие щелчка по карте",
        "Конечная точка метки при клике по карте. Где заканчивааем считать расстояние",
        "Пройденное расстояние",
        "Отправим запрос на геокодирование. Геокодирование координат полученной метки, в полный адрес. Его вывод в балуне метки.",
        "contentFooter:'<sup>Щелкните еще раз</sup>'",
        "myPlacemark.properties\n                .set({\n                    iconContent: firstGeoObject.properties.get('name'),\n                    balloonContent: firstGeoObject.properties.get('text')\n                });\n\n       var names = [];\n         // Переберём все найденные результаты и\n         // запишем имена найденный объектов в массив names.\n         res.geoObjects.each(function (obj) {\n            names.push(obj.properties.get('name'));\n         });\n\n         myMap.balloon.open(coor_1, {\n         contentHeader:'Адрес метки:',\n         contentBody:'<p><small>' + names.reverse().join(', ') + '</small></p>'\n         //contentFooter:'<sup>Щелкните еще раз</sup>'\n         });",
        "// Добавим на карту метку в точку, по координатам\n                // которой запрашивали обратное геокодирование.\n                myMap.geoObjects.add(new ymaps.Placemark(coor_1, {\n                    // В качестве контента иконки выведем\n                    // первый найденный объект.\n                    iconContent:names[0],\n                    // А в качестве контента балуна - подробности:\n                    // имена всех остальных найденных объектов.\n                    hintContent:names.reverse().join(', ')\n                }, {\n                    preset:'twirl#lightblueStretchyIcon'\n                }));",
        "Отслеживаем событие выбора результата поиска",
        "Конечная точка метки при поиске по карте. Где заканчивааем считать расстояние",
        "Пройденное расстояние",
        "Отправим запрос на геокодирование. Геокодирование координат полученной метки, в полный адрес. Его вывод в балуне метки.",
        "Ослеживаем событие изменения области просмотра карты - масштаб и центр карты",
        "Функция для передачи полученных значений в форму",
        "//определение местоположениея пользователя\n    this.yMap.geoObjects.add(\n    new ymaps.Placemark(\n        [ymaps.geolocation.latitude, ymaps.geolocation.longitude],\n        {\n            balloonContentHeader: ymaps.geolocation.country,\n            balloonContent: ymaps.geolocation.city,\n            balloonContentFooter: ymaps.geolocation.region\n        }\n    )\n    );",
        "// получение координатной системы\n    var coordSystem = this.yMap.options.get('projection').getCoordSystem();\n\n    var minDist = coordSystem.getDistance(givenPoint, points[0]);\n\n    $(\".route-length3\").append('Пробег: <strong>' + minDist + '<strong> км<br />');"
    ],
    "docstrings": [
        "* Yandex map with placemarks\n   * by default being positioned at the center of Moscow\n   *\n   * @param {Object} options\n   * @param {jQuery} options.root\n   * @param {Array} [options.coords]\n   * @param {Array} [options.map_center]\n   * @param {Array} [options.placemarks]\n   * @constructor",
        "* Загрузка карты"
    ],
    "functions": [
        "onDraggerStart",
        "onDraggerMove",
        "onDraggerEnd",
        "applyDelta",
        "applyMarkerPosition",
        "containsPoint",
        "savecoordinats"
    ],
    "classes": []
}