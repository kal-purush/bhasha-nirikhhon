{
    "identifiers": [
        "sys",
        "pyspark",
        "context",
        "SparkContext",
        "pyspark",
        "mllib",
        "tree",
        "GradientBoostedTrees",
        "pyspark",
        "mllib",
        "util",
        "MLUtils",
        "trainingData",
        "testData",
        "GradientBoostedTrees",
        "trainClassifier",
        "trainingData",
        "categoricalFeaturesInfo",
        "numIterations",
        "maxDepth",
        "model",
        "predict",
        "testData",
        "x",
        "x",
        "features",
        "testData",
        "lp",
        "lp",
        "label",
        "predictions",
        "labelsAndPredictions",
        "v",
        "p",
        "v",
        "p",
        "count",
        "testData",
        "count",
        "testErr",
        "model",
        "toDebugString",
        "trainingData",
        "testData",
        "GradientBoostedTrees",
        "trainRegressor",
        "trainingData",
        "categoricalFeaturesInfo",
        "numIterations",
        "maxDepth",
        "model",
        "predict",
        "testData",
        "x",
        "x",
        "features",
        "testData",
        "lp",
        "lp",
        "label",
        "predictions",
        "labelsAndPredictions",
        "v",
        "p",
        "v",
        "p",
        "v",
        "p",
        "sum",
        "testData",
        "count",
        "testMSE",
        "model",
        "toDebugString",
        "len",
        "sys",
        "argv",
        "sys",
        "stderr",
        "exit",
        "SparkContext",
        "appName",
        "MLUtils",
        "loadLibSVMFile",
        "sc",
        "data",
        "randomSplit",
        "testClassification",
        "trainingData",
        "testData",
        "testRegression",
        "trainingData",
        "testData",
        "sc",
        "stop"
    ],
    "literals": [
        "'Test Error = '",
        "'Learned classification ensemble model:'",
        "'Test Mean Squared Error = '",
        "'Learned regression ensemble model:'",
        "\"__main__\"",
        "\"Usage: gradient_boosted_trees\"",
        "\"PythonGradientBoostedTrees\"",
        "'data/mllib/sample_libsvm_data.txt'",
        "'\\nRunning example of classification using GradientBoostedTrees\\n'",
        "'\\nRunning example of regression using GradientBoostedTrees\\n'"
    ],
    "variables": [
        "model",
        "predictions",
        "labelsAndPredictions",
        "testErr",
        "model",
        "predictions",
        "labelsAndPredictions",
        "testMSE",
        "sc",
        "data",
        "trainingData",
        "testData"
    ],
    "comments": [
        "",
        "Licensed to the Apache Software Foundation (ASF) under one or more",
        "contributor license agreements.  See the NOTICE file distributed with",
        "this work for additional information regarding copyright ownership.",
        "The ASF licenses this file to You under the Apache License, Version 2.0",
        "(the \"License\"); you may not use this file except in compliance with",
        "the License.  You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "",
        "Train a GradientBoostedTrees model.",
        "Empty categoricalFeaturesInfo indicates all features are continuous.",
        "Evaluate model on test instances and compute test error",
        "Train a GradientBoostedTrees model.",
        "Empty categoricalFeaturesInfo indicates all features are continuous.",
        "Evaluate model on test instances and compute test error",
        "Load and parse the data file into an RDD of LabeledPoint.",
        "Split the data into training and test sets (30% held out for testing)"
    ],
    "docstrings": [
        "\"\"\"\nGradient boosted Trees classification and regression using MLlib.\n\"\"\""
    ],
    "functions": [
        "testClassification",
        "testRegression"
    ],
    "classes": []
}