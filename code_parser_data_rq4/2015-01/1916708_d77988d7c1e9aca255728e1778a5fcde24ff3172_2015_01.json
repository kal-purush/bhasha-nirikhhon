{
    "identifiers": [
        "os",
        "inception",
        "cfg",
        "terminal",
        "inception",
        "exceptions",
        "InceptionException",
        "usb",
        "core",
        "usb",
        "util",
        "math",
        "terminal",
        "Terminal",
        "opts",
        "slotscreamer",
        "cfg",
        "memsize",
        "device",
        "memsize",
        "usb",
        "core",
        "find",
        "idVendor",
        "idProduct",
        "dev",
        "dev",
        "set_configuration",
        "dev",
        "get_active_configuration",
        "cfg",
        "usb",
        "util",
        "find_descriptor",
        "intf",
        "custom_match",
        "e",
        "e",
        "bEndpointAddress",
        "pciin",
        "term",
        "info",
        "pciin",
        "usb",
        "util",
        "find_descriptor",
        "intf",
        "custom_match",
        "e",
        "e",
        "bEndpointAddress",
        "pciout",
        "term",
        "info",
        "pciout",
        "addr",
        "numb",
        "buf",
        "addr",
        "addr",
        "offset",
        "addr",
        "numb",
        "addr",
        "numb",
        "offset",
        "len",
        "cache",
        "cacheBase",
        "addr",
        "cacheBase",
        "len",
        "cache",
        "addr",
        "numb",
        "cache",
        "addr",
        "cacheBase",
        "addr",
        "numb",
        "cacheBase",
        "baseAddress",
        "baseAddress",
        "endAddress",
        "pciout",
        "write",
        "pack",
        "baseAddress",
        "cache",
        "pciin",
        "read",
        "baseAddress",
        "IOError",
        "cache",
        "offset",
        "offset",
        "numb",
        "req",
        "r",
        "req",
        "r",
        "read",
        "r",
        "r",
        "addr",
        "buf",
        "addr",
        "addr",
        "offset",
        "len",
        "buf",
        "addr",
        "byteCount",
        "addr",
        "byteCount",
        "endOffset",
        "read",
        "baseAddress",
        "endAddress",
        "baseAddress",
        "i",
        "offset",
        "endOffset",
        "buf",
        "i",
        "offset",
        "baseAddress",
        "endAddress",
        "readbuf",
        "bufferIndex",
        "bufferIndex",
        "pciout",
        "write",
        "pack",
        "baseAddress",
        "subbuf",
        "baseAddress",
        "bufferIndex",
        "cache"
    ],
    "literals": [
        "'SLOTSCREAMER device not found'",
        "'SLOTSCREAMER pciin endpoint not found'",
        "'SLOTSCREAMER PCIIN found: '",
        "'\\n'",
        "'pciout endpoint not found'",
        "'SLOTSCREAMER PCIOUT found: '",
        "'\\n'",
        "'BBBBI'",
        "b\"bad\"",
        "b\"\\x10\"",
        "'BBBBI'",
        "'B'"
    ],
    "variables": [
        "term",
        "device",
        "memsize",
        "dev",
        "cfg",
        "intf",
        "pciin",
        "pciout",
        "cache",
        "offset",
        "baseAddress",
        "endOffset",
        "endAddress",
        "cache",
        "cacheBase",
        "cache",
        "offset",
        "baseAddress",
        "byteCount",
        "endOffset",
        "endAddress",
        "readbuf",
        "readbuf",
        "i",
        "bufferIndex",
        "subbuf",
        "cache",
        "cache"
    ],
    "comments": [
        "import binascii",
        "import platform",
        "import sys",
        "Convenience function to initialize the interface.",
        "Mandatory arguments:",
        "Lower DMA shield, and set memsize",
        "interface to the SlotScreamer native PCIe device over USB with pyusb",
        "find our device",
        "round down to multiple of 256",
        "cache most recent read",
        "check if anything is cached",
        "sort requests so sequential reads are cached",
        "req.sort()",
        "readbuffer",
        "modify buffer",
        "writebuffer"
    ],
    "docstrings": [
        "'''\nInception - a FireWire physical memory manipulation and hacking tool exploiting\nIEEE 1394 SBP-2 DMA.\n\nCopyright (C) 2011-2013  Carsten Maartmann-Moe\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nThis module provides the ability to use inception using SLOTSCREAMER.\nMost of the code is adopted from the slotscreamer samples with slight \nmodification.\n\nCreated on Jan 16th, 2015\n\n@author: Inception Carsten Maartmann-Moe <carsten@carmaa.com> aka ntropy\n\nThe SLOTSCREAMER project is part of the NSA-Playset and is available at:\n\nhttps://github.com/NSAPlayset/SLOTSCREAMER\n\nSLOTSCREAMER initial authors: Joe Fitz - joefitz@securinghardware.com and\nMiles Crabilll - miles@milescrabill.com\n'''"
    ],
    "functions": [
        "initialize",
        "read",
        "readv",
        "write",
        "close"
    ],
    "classes": [
        "slotscreamer"
    ]
}