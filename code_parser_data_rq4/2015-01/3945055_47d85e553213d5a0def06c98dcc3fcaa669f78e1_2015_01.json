{
    "identifiers": [
        "waffle",
        "spring",
        "java",
        "io",
        "javax",
        "servlet",
        "ServletException",
        "javax",
        "servlet",
        "http",
        "HttpServletRequest",
        "javax",
        "servlet",
        "http",
        "HttpServletResponse",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "org",
        "springframework",
        "security",
        "access",
        "AccessDeniedException",
        "org",
        "springframework",
        "security",
        "authentication",
        "AuthenticationManager",
        "org",
        "springframework",
        "security",
        "core",
        "Authentication",
        "org",
        "springframework",
        "security",
        "core",
        "AuthenticationException",
        "org",
        "springframework",
        "security",
        "core",
        "context",
        "SecurityContextHolder",
        "org",
        "springframework",
        "security",
        "web",
        "access",
        "AccessDeniedHandler",
        "org",
        "springframework",
        "security",
        "web",
        "authentication",
        "AuthenticationFailureHandler",
        "org",
        "springframework",
        "security",
        "web",
        "authentication",
        "AuthenticationSuccessHandler",
        "LOGGER",
        "LoggerFactory",
        "getLogger",
        "authenticationManager",
        "authenticationSuccessHandler",
        "authenticationFailureHandler",
        "accessDeniedHandler",
        "accessDeniedHandler",
        "accessDeniedHandler",
        "accessDeniedHandler",
        "accessDeniedHandler",
        "authenticationFailureHandler",
        "authenticationFailureHandler",
        "authenticationFailureHandler",
        "authenticationFailureHandler",
        "LOGGER",
        "debug",
        "Override",
        "request",
        "response",
        "authentication",
        "authenticationManager",
        "logger",
        "debug",
        "customAuthentication",
        "authenticationManager",
        "authenticate",
        "authentication",
        "SecurityContextHolder",
        "getContext",
        "setAuthentication",
        "customAuthentication",
        "authenticationSuccessHandler",
        "authenticationSuccessHandler",
        "onAuthenticationSuccess",
        "request",
        "response",
        "authentication",
        "e",
        "logger",
        "warn",
        "e",
        "getMessage",
        "e",
        "logger",
        "warn",
        "e",
        "getMessage",
        "e",
        "logger",
        "warn",
        "e",
        "getMessage",
        "sendAuthenticationFailed",
        "request",
        "response",
        "e",
        "e",
        "logger",
        "warn",
        "e",
        "getMessage",
        "sendAccessDenied",
        "request",
        "response",
        "e",
        "Override",
        "afterPropertiesSet",
        "getProvider",
        "request",
        "response",
        "ae",
        "authenticationFailureHandler",
        "authenticationFailureHandler",
        "onAuthenticationFailure",
        "request",
        "response",
        "ae",
        "e",
        "LOGGER",
        "warn",
        "e",
        "getMessage",
        "e",
        "LOGGER",
        "warn",
        "e",
        "getMessage",
        "sendUnauthorized",
        "response",
        "request",
        "response",
        "ae",
        "accessDeniedHandler",
        "accessDeniedHandler",
        "handle",
        "request",
        "response",
        "ae",
        "e",
        "LOGGER",
        "warn",
        "e",
        "getMessage",
        "e",
        "LOGGER",
        "warn",
        "e",
        "getMessage",
        "sendUnauthorized",
        "response",
        "authenticationSuccessHandler",
        "authenticationSuccessHandler",
        "authenticationSuccessHandler",
        "authenticationSuccessHandler",
        "authenticationManager",
        "authenticationManager",
        "authenticationManager",
        "authenticationManager"
    ],
    "literals": [
        "\"[waffle.spring.NegotiateSecurityFilter] loaded\"",
        "\"Delegating to custom authenticationmanager\"",
        "\"Error calling authenticationSuccessHandler: \"",
        "\"Error calling authenticationSuccessHandler: \"",
        "\"Error authenticating user in custom authenticationmanager: \"",
        "\"Error authorizing user in custom authenticationmanager: \"",
        "\"Missing NegotiateSecurityFilter.Provider\"",
        "\"IOException invoking authenticationFailureHandler: \"",
        "\"ServletException invoking authenticationFailureHandler: \"",
        "\"IOException invoking accessDeniedHandler: \"",
        "\"ServletException invoking accessDeniedHandler: \""
    ],
    "variables": [
        "authenticationManager",
        "authenticationSuccessHandler",
        "authenticationFailureHandler",
        "accessDeniedHandler"
    ],
    "comments": [
        "fallback"
    ],
    "docstrings": [
        "* Waffle (https://github.com/dblock/waffle)\n *\n * Copyright (c) 2010 - 2014 Application Security, Inc.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Application Security, Inc.",
        "*",
        "* \n * \n * <p>\n * Supports optional injection of spring security entities, allowing Waffle to act as an interface towards an identity\n * provider(the AD).\n * </p>\n * \n * <i>Below mentioned entities are verified to be set before invoked, inherited entities are not.</i>\n * \n * <ul>\n * <li>\n * The <code>AuthenticationManager</code> allows for the service provider to authorize the principal.</li>\n * \n * <li>\n * The <code>authenticationSuccessHandler</code> allows for the service provider to further populate the\n * {@link org.springframework.security.core.Authentication Authentication} object.</li>\n * \n * <li>\n * The <code>AuthenticationFailureHandler</code> is called if the AuthenticationManager throws an\n * {@link org.springframework.security.core.AuthenticationException AuthenticationException}.</li>\n * \n * <li>\n * The <code>AccessDeniedHandler</code> is called if the AuthenticationManager throws an\n * {@link org.springframework.security.access.AccessDeniedException AccessDeniedException}.</li>\n * </ul>\n * Example configuration:\n * \n * <pre>\n * {@code\n * <bean id=\"waffleNegotiateSecurityFilter\"\n * \t\tclass=\"waffle.spring.DelegatingNegotiateSecurityFilter\"\n * \t\tscope=\"tenant\">\n * \t\t<property name=\"allowGuestLogin\" value=\"false\" />\n * \t\t<property name=\"Provider\" ref=\"waffleSecurityFilterProviderCollection\" />\n * \t\t<property name=\"authenticationManager\" ref=\"authenticationManager\" />\n * \t\t<property name=\"authenticationSuccessHandler\" ref=\"authenticationSuccessHandler\" />\n * \t\t<property name=\"authenticationFailureHandler\" ref=\"authenticationFailureHandler\" />\n * \t\t<property name=\"accessDeniedHandler\" ref=\"accessDeniedHandler\" />\n * \t\t<property name=\"defaultGrantedAuthority\">\n * \t\t\t<null />\n * \t\t</property>\n * \t</bean>\n * </code>\n * }\n * </pre>",
        "* @return the accessDeniedHandler",
        "* @param accessDeniedHandler\n     *            the accessDeniedHandler to set",
        "* @return the authenticationFailureHandler",
        "* @param authenticationFailureHandler\n     *            the authenticationFailureHandler to set",
        "* Forward to authenticationFailureHandler.\n     * \n     * @param response\n     *            HTTP Response\n     * @param close\n     *            Close connection.",
        "* Forward to accessDeniedHandler.\n     * \n     * @param response\n     *            HTTP Response\n     * @param close\n     *            Close connection.",
        "* @return the authenticationSuccessHandler",
        "* @param authenticationSuccessHandler\n     *            the authenticationSuccessHandler to set",
        "* @return the authenticationManager",
        "* @param authenticationManager\n     *            the authenticationManager to set"
    ],
    "functions": [
        "AccessDeniedHandler",
        "getAccessDeniedHandler",
        "setAccessDeniedHandler",
        "AuthenticationFailureHandler",
        "getAuthenticationFailureHandler",
        "setAuthenticationFailureHandler",
        "DelegatingNegotiateSecurityFilter",
        "setAuthentication",
        "afterPropertiesSet",
        "sendAuthenticationFailed",
        "sendAccessDenied",
        "AuthenticationSuccessHandler",
        "getAuthenticationSuccessHandler",
        "setAuthenticationSuccessHandler",
        "AuthenticationManager",
        "getAuthenticationManager",
        "setAuthenticationManager"
    ],
    "classes": [
        "DelegatingNegotiateSecurityFilter"
    ]
}