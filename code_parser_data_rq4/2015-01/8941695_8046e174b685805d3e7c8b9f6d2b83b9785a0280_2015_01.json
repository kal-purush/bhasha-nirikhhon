{
    "identifiers": [
        "numpy",
        "np",
        "scipy",
        "linalg",
        "la",
        "quantecon",
        "LQ",
        "quantecon",
        "matrix_eqn",
        "solve_discrete_lyapunov",
        "scipy",
        "optimize",
        "root",
        "np",
        "eye",
        "np",
        "array",
        "a0",
        "d",
        "a1",
        "a1",
        "h",
        "c",
        "la",
        "inv",
        "Alhs",
        "np",
        "array",
        "T",
        "np",
        "eye",
        "rho",
        "c",
        "beta",
        "np",
        "array",
        "a0",
        "e",
        "a0",
        "e",
        "a1",
        "g",
        "a1",
        "a1",
        "np",
        "array",
        "c",
        "Alhsinv",
        "dot",
        "Arhs",
        "Alhsinv",
        "dot",
        "Brhs",
        "A",
        "B",
        "Q",
        "R",
        "A",
        "B",
        "Q",
        "R",
        "beta",
        "LQ",
        "Q",
        "R",
        "A",
        "B",
        "beta",
        "beta",
        "lq",
        "stationary_values",
        "P",
        "F",
        "d",
        "eta0",
        "Q0",
        "q0",
        "setup_matrices",
        "find_PFd",
        "A",
        "B",
        "Q",
        "R",
        "beta",
        "beta",
        "P",
        "P",
        "P22",
        "np",
        "empty",
        "np",
        "eye",
        "np",
        "hstack",
        "P22inv",
        "P21",
        "P22inv",
        "upper",
        "lower",
        "np",
        "dot",
        "F",
        "dotmat",
        "np",
        "array",
        "eta0",
        "Q0",
        "q0",
        "P22inv",
        "np",
        "dot",
        "P21",
        "z0",
        "np",
        "vstack",
        "np",
        "eye",
        "P",
        "A",
        "np",
        "dot",
        "B",
        "F",
        "dotmat",
        "np",
        "dot",
        "part1",
        "part2",
        "dot",
        "part3",
        "m",
        "m",
        "np",
        "dot",
        "F",
        "dotmat",
        "f",
        "f",
        "f12",
        "m22",
        "f12",
        "coeffs",
        "f12",
        "m12",
        "f12",
        "m22",
        "f11",
        "coeffs",
        "x0",
        "coeff_utm1",
        "coeff_zt",
        "coeff_ztm1",
        "np",
        "array",
        "a0",
        "a1",
        "rho",
        "c_eps",
        "c",
        "d",
        "e",
        "g",
        "h",
        "beta",
        "solve_for_opt_policy",
        "format",
        "coefficients",
        "format",
        "alt_coeffs",
        "alt_coeffs",
        "alt_coeffs"
    ],
    "literals": [
        "\"The original coefficients are\"",
        "\"u_t = {} [z_t mu_[x, t]]'\"",
        "\"or in other terms\"",
        "\"u_t = {} u_[t-1] \\n + {} z_t \\n + {} z_[t-1]\""
    ],
    "variables": [
        "Alhs",
        "Alhs",
        "Alhsinv",
        "Brhs",
        "Arhs",
        "Arhs",
        "Arhs",
        "Arhs",
        "R",
        "Q",
        "A",
        "B",
        "lq",
        "P",
        "F",
        "d",
        "A",
        "B",
        "Q",
        "R",
        "P",
        "F",
        "d",
        "P22",
        "P21",
        "P22inv",
        "dotmat",
        "upper",
        "lower",
        "dotmat",
        "dotmat",
        "coeffs",
        "z0",
        "x0",
        "part1",
        "part2",
        "part3",
        "m",
        "m12",
        "m22",
        "f",
        "f11",
        "f12",
        "coeff_utm1",
        "coeff_zt",
        "coeff_ztm1",
        "a0",
        "a1",
        "rho",
        "c_eps",
        "c",
        "d",
        "e",
        "g",
        "h",
        "beta",
        "coefficients",
        "x0",
        "alt_coeffs"
    ],
    "comments": [
        "Left hand side of (37)",
        "Right hand side of (37)",
        "R from equation (40)",
        "Step 1/2: Formulate/Solve the optimal linear regulator",
        "Step 3: Convert implementation into state variables (Find coeffs)",
        "Gives me 4x4 identity with a column of 0s",
        "Step 4: Find optimal x_0 and \\mu_{x, 0}",
        "Do some rearranging for convenient representation of policy",
        "TODO: Finish getting the equations into the from",
        "u_t = rho u_{t-1} + gamma_1 z_t + gamma_2 z_{t-1}",
        "Parameter values"
    ],
    "docstrings": [
        "\"\"\"\nFilename: oligopoly.py\nAuthors: Chase Coleman\n\nThis is an example for the lecture dyn_stack.rst from the QuantEcon\nseries of lectures by Tom Sargent and John Stachurski.\n\nWe deal with a large monopolistic firm who faces costs:\n\nC_t = e Q_t + .5 g Q_t^2 + .5 c (Q_{t+1} - Q_t)^2\n\nwhere the fringe firms face:\n\nsigma_t = d q_t + .5 h q_t^2 + .5 c (q_{t+1} - q_t)^2\n\nAdditionally, there is a linear inverse demand curve of the form:\n\np_t = A_0 - A_1 (Q_t + \\bar{q_t}) + \\eta_t,\n\nwhere:\n\n.. math\n    \\eta_{t+1} = ρ \\eta_t + C_{\\varepsilon} \\varepsilon_{t+1};\n    \\varepsilon_{t+1} ∼ N(0, 1)\n\nFor more details, see the lecture.\n\"\"\"",
        "\"\"\"\n    This function sets up the A, B, R, Q for the oligopoly problem\n    described in the lecture.\n\n    Parameters\n    ----------\n    params : Array(Float, ndim=1)\n        Contains the parameters that describe the problem in the order\n        [a0, a1, rho, c_eps, c, d, e, g, h, beta]\n\n    Returns\n    -------\n    (A, B, Q, R) : Array(Float, ndim=2)\n        These matrices describe the oligopoly problem.\n    \"\"\"",
        "\"\"\"\n    Taking the parameters A, B, Q, R as found in the `setup_matrices`,\n    we find the value function of the optimal linear regulator problem.\n    This is steps 2 and 3 in the lecture notes.\n\n    Parameters\n    ----------\n    (A, B, Q, R) : Array(Float, ndim=2)\n        The matrices that describe the oligopoly problem\n\n    Returns\n    -------\n    (P, F, d) : Array(Float, ndim=2)\n        The matrix that describes the value function of the optimal\n        linear regulator problem.\n\n    \"\"\"",
        "\"\"\"\n    Taking the parameters as given, solve for the optimal decision rules\n    for the firm.\n\n    Parameters\n    ----------\n    params : Array(Float, ndim=1)\n        This holds all of the model parameters in an array\n\n    Returns\n    -------\n    out :\n\n    \"\"\""
    ],
    "functions": [
        "setup_matrices",
        "find_PFd",
        "solve_for_opt_policy"
    ],
    "classes": []
}