{
    "identifiers": [
        "java",
        "io",
        "java",
        "util",
        "words",
        "args",
        "words",
        "getWords",
        "interval",
        "find",
        "index",
        "interval",
        "i",
        "i",
        "interval",
        "i",
        "index",
        "words",
        "size",
        "interval",
        "find",
        "i",
        "words",
        "get",
        "index",
        "find",
        "interval",
        "seqResult",
        "binResult",
        "i",
        "i",
        "find",
        "length",
        "i",
        "seqResult",
        "sequentialSearch",
        "find",
        "i",
        "binResult",
        "binarySearch",
        "find",
        "i",
        "i",
        "binResult",
        "getIterations",
        "seqResult",
        "getIterations",
        "binResult",
        "getIndex",
        "seqResult",
        "getIndex",
        "find",
        "i",
        "wordToFind",
        "wordToFind",
        "result",
        "input",
        "input",
        "hasNextLine",
        "result",
        "add",
        "input",
        "nextLine",
        "input",
        "close",
        "result"
    ],
    "literals": [
        "\"Xdfsdda\"",
        "\"#\\tBinary\\tSequential\\tindex\\tword\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\":\"",
        "\"\\t\"",
        "\"words.txt\""
    ],
    "variables": [
        "words",
        "seqResult",
        "binResult"
    ],
    "comments": [
        "TODO",
        "TODO"
    ],
    "docstrings": [
        "* stores an ordered lists of words for searching",
        "* main program\n\t * @param args\n\t * @throws IOException",
        "* Implement a sequential search to find wordToFind in the ArrayList words\n\t * \n\t * @param wordToFind - String to find in words\n\t * @return a SearchResult (index of item found or -1 if not found, number of iterations in search loop)",
        "* Implement a binary search to find wordToFind in the ArrayList words\n\t * \n\t * @param wordToFind - String to find in words\n\t * @return a SearchResult (index of item found or -1 if not found, number of iterations in search loop)",
        "* create an ArrayList<String> and populate it from text file\n\t * \n\t * @return an ArrayList<String>\n\t * @throws FileNotFoundException"
    ],
    "functions": [
        "main",
        "SearchResult",
        "sequentialSearch",
        "SearchResult",
        "binarySearch",
        "getWords"
    ],
    "classes": [
        "DictionarySearch"
    ]
}