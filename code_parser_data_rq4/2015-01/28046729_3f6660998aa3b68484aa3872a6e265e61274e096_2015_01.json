{
    "identifiers": [
        "os",
        "sys",
        "time",
        "logging",
        "flask",
        "werkzeug",
        "optparse",
        "tornado",
        "wsgi",
        "tornado",
        "httpserver",
        "numpy",
        "np",
        "pandas",
        "pd",
        "PIL",
        "Image",
        "flask",
        "ext",
        "cors",
        "CORS",
        "cStringIO",
        "StringIO",
        "urllib",
        "skimage",
        "io",
        "json",
        "traceback",
        "caffe",
        "os",
        "path",
        "abspath",
        "os",
        "path",
        "dirname",
        "flask",
        "Flask",
        "CORS",
        "app",
        "app",
        "route",
        "flask",
        "render_template_string",
        "app",
        "route",
        "methods",
        "flask",
        "render_template",
        "has_result",
        "app",
        "route",
        "image_file",
        "flask",
        "send_from_directory",
        "image_file",
        "np",
        "ndarray",
        "shape",
        "dtype",
        "np",
        "uint8",
        "app",
        "route",
        "methods",
        "i",
        "flask",
        "request",
        "data",
        "data",
        "flask",
        "request",
        "form",
        "keys",
        "json",
        "loads",
        "data",
        "data",
        "i",
        "i",
        "buff",
        "np",
        "newaxis",
        "app",
        "clf",
        "classify_image",
        "image",
        "result",
        "err",
        "logging",
        "info",
        "err",
        "traceback",
        "print_exc",
        "file",
        "sys",
        "stdout",
        "err",
        "app",
        "route",
        "methods",
        "nr",
        "nr",
        "flask",
        "request",
        "data",
        "data",
        "flask",
        "request",
        "form",
        "keys",
        "json",
        "loads",
        "data",
        "jdata",
        "jdata",
        "jdata",
        "jdata",
        "jdata",
        "len",
        "data",
        "np",
        "asarray",
        "data",
        "astype",
        "np",
        "uint8",
        "image",
        "shape",
        "clazz",
        "skimage",
        "io",
        "imsave",
        "net_name",
        "clazz",
        "nr",
        "image",
        "image",
        "np",
        "newaxis",
        "app",
        "clf",
        "classify_image",
        "image",
        "result",
        "result",
        "flask",
        "render_template_string",
        "result",
        "flask",
        "render_template_string",
        "err",
        "logging",
        "info",
        "err",
        "traceback",
        "print_exc",
        "file",
        "sys",
        "stdout",
        "err",
        "model_def_file",
        "pretrained_model_file",
        "mean_file",
        "raw_scale",
        "class_labels_file",
        "image_dim",
        "gpu_mode",
        "swap_colors_wtf",
        "logging",
        "info",
        "swap_colors_wtf",
        "model",
        "weights",
        "image_dim",
        "image_dim",
        "raw_scale",
        "mean_file",
        "swap",
        "gpu_mode",
        "caffe",
        "Net",
        "model",
        "weights",
        "net",
        "set_phase_test",
        "net",
        "set_raw_scale",
        "net",
        "set_mode_gpu",
        "class_labels_file",
        "open",
        "class_labels_file",
        "f",
        "pd",
        "DataFrame",
        "l",
        "strip",
        "split",
        "join",
        "l",
        "strip",
        "split",
        "split",
        "l",
        "f",
        "readlines",
        "labels_df",
        "sort",
        "values",
        "image",
        "time",
        "time",
        "np",
        "asarray",
        "net",
        "preprocess",
        "image",
        "net",
        "forward_all",
        "data",
        "data",
        "flatten",
        "time",
        "time",
        "max",
        "axis",
        "flatten",
        "meta",
        "bet_result",
        "endtime",
        "starttime",
        "app",
        "port",
        "tornado",
        "httpserver",
        "HTTPServer",
        "tornado",
        "wsgi",
        "WSGIContainer",
        "app",
        "http_server",
        "listen",
        "port",
        "format",
        "port",
        "tornado",
        "ioloop",
        "IOLoop",
        "instance",
        "start",
        "app",
        "optparse",
        "OptionParser",
        "parser",
        "add_option",
        "help",
        "action",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "action",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "action",
        "help",
        "parser",
        "add_option",
        "action",
        "help",
        "parser",
        "parse_args",
        "SpeechClassifier",
        "default_args",
        "default_args",
        "update",
        "opts",
        "gpu",
        "opts",
        "model",
        "default_args",
        "update",
        "opts",
        "model",
        "opts",
        "weights",
        "default_args",
        "update",
        "opts",
        "weights",
        "opts",
        "labels",
        "default_args",
        "update",
        "opts",
        "labels",
        "SpeechClassifier",
        "SpeechClassifier",
        "default_args",
        "opts",
        "debug",
        "app",
        "run",
        "debug",
        "host",
        "port",
        "opts",
        "port",
        "start_tornado",
        "app",
        "opts",
        "port",
        "logging",
        "getLogger",
        "setLevel",
        "logging",
        "INFO",
        "os",
        "path",
        "exists",
        "UPLOAD_FOLDER",
        "os",
        "makedirs",
        "UPLOAD_FOLDER",
        "start_from_terminal",
        "app"
    ],
    "literals": [
        "'/..'",
        "'/tmp/caffe_demos_uploads'",
        "'/'",
        "\"please use recognition-server with record.py\"",
        "'/record'",
        "'GET'",
        "'Recorder.html'",
        "'/RecorderJS/<path:image_file>'",
        "'/me/caffe/python/templates/RecorderJS/'",
        "'/classify_stream'",
        "'POST'",
        "\"json\"",
        "\"Classification ... \"",
        "'...'",
        "'Upload image error: %s'",
        "'Upload image error: %s'",
        "'/classify_image'",
        "'POST'",
        "\"json\"",
        "'unknown'",
        "'speech'",
        "\"class\"",
        "\"class\"",
        "\"net\"",
        "\"net\"",
        "\"-------------------------\"",
        "'unknown'",
        "\"/data/saved/classify_%s_%s.%d.png\"",
        "\"YAY, got result %s\"",
        "\"NONE\"",
        "'Upload image error: %s'",
        "'Upload image error: %s'",
        "'model_def_file'",
        "'model.pbxtext'",
        "'pretrained_model_file'",
        "'weights.caffemodel'",
        "'mean_file'",
        "'class_labels_file'",
        "'image_dim'",
        "'raw_scale'",
        "'swap_colors_wtf'",
        "'gpu_mode'",
        "'Loading net and associated files...'",
        "\"swap_colors_wtf\"",
        "\"OK, not swapping any colors\"",
        "\"words_deploy.prototxt\"",
        "\"words_iter_1000.caffemodel\"",
        "\"model_def %s\"",
        "\"model_file %s\"",
        "\"image_dims=(%d,%d)\"",
        "\"raw_scale=%d\"",
        "\"mean=%s\"",
        "\"channel_swap=%s\"",
        "\"gpu_mode %s\"",
        "'data'",
        "'synset_id'",
        "' '",
        "'name'",
        "' '",
        "' '",
        "','",
        "'synset_id'",
        "'name'",
        "'data'",
        "\"classification %s\"",
        "'words0s'",
        "'words0s'",
        "'words0s'",
        "'%.3f'",
        "\"Tornado server starting on port {}\"",
        "'-d'",
        "'--debug'",
        "\"enable debug mode\"",
        "\"store_true\"",
        "'-p'",
        "'--port'",
        "\"which port to serve content on\"",
        "'int'",
        "'-g'",
        "'--gpu'",
        "\"use gpu mode\"",
        "'store_true'",
        "'-m'",
        "'--model'",
        "\"proto definition of net to use (prototxt)\"",
        "'-w'",
        "'--weights'",
        "\"trained net to use (caffemodel|prototxt)\"",
        "'-x'",
        "'--image_dim'",
        "\"image dimension height==width\"",
        "'-l'",
        "'--labels'",
        "\"labels file\"",
        "'-s'",
        "'--dont_swap_colors_wtf'",
        "'store_true'",
        "\"Normal color mapping\"",
        "'-0'",
        "'--grey'",
        "'store_true'",
        "\"The net expects gray images\"",
        "'gpu_mode'",
        "'model_def_file'",
        "'pretrained_model_file'",
        "'class_labels_file'",
        "'0.0.0.0'",
        "'__main__'"
    ],
    "variables": [
        "REPO_DIRNAME",
        "UPLOAD_FOLDER",
        "app",
        "cors",
        "i",
        "buff",
        "data",
        "data",
        "data",
        "buff",
        "i",
        "i",
        "i",
        "image",
        "result",
        "nr",
        "nr",
        "data",
        "data",
        "jdata",
        "data",
        "clazz",
        "net_name",
        "clazz",
        "net_name",
        "image",
        "image",
        "result",
        "default_args",
        "default_args",
        "default_args",
        "default_args",
        "default_args",
        "swap",
        "swap",
        "model",
        "weights",
        "net",
        "labels_df",
        "labels",
        "starttime",
        "data",
        "endtime",
        "meta",
        "bet_result",
        "http_server",
        "parser",
        "opts",
        "args",
        "default_args",
        "app",
        "clf"
    ],
    "comments": [
        "!/usr/bin/env python",
        "from skimage.color import rgb2gray",
        "Obtain the flask app object",
        "allow other sites to post data to this service by our Ajax",
        "template('index.html', has_result=False)",
        "send_static_file will guess the correct MIME type",
        "return app.send_static_file(os.path.join('/me/caffe/python/templates/RecorderJS/', path))",
        "but data will be empty unless the request has the proper content-type header",
        "data = bytearray(data)",
        "but data will be empty unless the request has the proper content-type header",
        "print data",
        "data = urllib.decode(data)",
        "jdata[\"class\"]  # learn if different from prediction",
        "data = bytearray(data)",
        "egal? (np.float32)  # (np.uint8) for imsave !",
        "better do caffe.Classifier(...).predict by hand:",
        "help(self.net)",
        "print \"classification class: %d\" % out['prob'][0].argmax(axis=0)",
        "print \"probability %d\" % out['prob'][0].max(axis=0)",
        "bet_result = out['words0s'][0].argmax(axis=0)",
        "default_args.update({'image_dim': opts.image_dim})",
        "print \"opts.dont_swap_colors_wtf %s\" % str(opts.dont_swap_colors_wtf)",
        "default_args.update({'swap_colors_wtf': not opts.dont_swap_colors_wtf})",
        "Initialize classifier"
    ],
    "docstrings": [
        "\"\"\"\n    Parse command line options and start the server.\n    \"\"\""
    ],
    "functions": [
        "index",
        "record",
        "static_proxy",
        "classify_stream",
        "classify_image",
        "classify_image",
        "start_tornado",
        "start_from_terminal"
    ],
    "classes": [
        "SpeechClassifier"
    ]
}