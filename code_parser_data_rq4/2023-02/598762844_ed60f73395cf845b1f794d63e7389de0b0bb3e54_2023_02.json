{
    "identifiers": [
        "TodoListPage",
        "TodoListPage",
        "describe",
        "beforeEach",
        "page",
        "it",
        "page",
        "it",
        "cy",
        "it",
        "page",
        "page",
        "page",
        "$todo",
        "cy",
        "$todo",
        "it",
        "page",
        "page",
        "page",
        "$todo",
        "cy",
        "$todo"
    ],
    "literals": [
        "'../support/todo-list.po'",
        "'Todo list'",
        "'Should have the correct title'",
        "'have.text'",
        "'Todos'",
        "'Should type something in the owner filter and check that it returned correct elements'",
        "'[data-test=todoOwnerInput]'",
        "'Workman'",
        "'Should select a status, and check that it returned correct elements'",
        "'have.lengthOf.above'",
        "'.todo-list-status'",
        "'contain'",
        "'complete'",
        "'Should select a category, and check that it returned correct elements'",
        "'software design'",
        "'have.lengthOf.above'",
        "'.todo-list-role'",
        "'contain'",
        "'software design'"
    ],
    "variables": [
        "page"
    ],
    "comments": [
        "page.getTodoCards().each($card => {",
        "cy.wrap($card).find('.todo-card-name').should('have.text', 'Workman');",
        "});",
        "page.getTodoCards().find('.todo-card-name').each($name =>",
        "expect($name.text()).to.equal('Workman')",
        ";",
        "it('Should type something in the company filter and check that it returned correct elements', () => {\n    // Filter for company 'OHMNET'\n    cy.get('[data-test=todoCompanyInput]').type('OHMNET');\n\n    page.getUserCards().should('have.lengthOf.above', 0);\n\n    // All of the user cards should have the company we are filtering by\n    page.getUserCards().find('.user-card-company').each($card => {\n      cy.wrap($card).should('have.text', 'OHMNET');\n    });\n  });\n\n  it('Should type something partial in the company filter and check that it returned correct elements', () => {\n    // Filter for companies that contain 'ti'\n    cy.get('[data-test=userCompanyInput]').type('ti');\n\n    page.getUserCards().should('have.lengthOf', 2);\n\n    // Each user card's company name should include the text we are filtering by\n    page.getUserCards().each(e => {\n      cy.wrap(e).find('.user-card-company').should('include.text', 'TI');\n    });\n  });",
        "it('Should change the view', () => {\n    // Choose the view type \"List\"\n    page.changeView('list');\n\n    // We should not see any cards\n    // There should be list items\n    page.getUserCards().should('not.exist');\n    page.getUserListItems().should('exist');\n\n    // Choose the view type \"Card\"\n    page.changeView('card');\n\n    // There should be cards\n    // We should not see any list items\n    page.getUserCards().should('exist');\n    page.getUserListItems().should('not.exist');\n  });",
        "Filter for role 'viewer');",
        "Choose the view type \"List\"",
        "page.changeView('list');",
        "Some of the users should be listed",
        "All of the user list items that show should have the role we are looking for",
        "it('Should click view profile on a user and go to the right URL', () => {\n    page.getUserCards().first().then((card) => {\n      const firstUserName = card.find('.user-card-name').text();\n      const firstUserCompany = card.find('.user-card-company').text();\n\n      // When the view profile button on the first user card is clicked, the URL should have a valid mongo ID\n      page.clickViewProfile(page.getUserCards().first());\n\n      // The URL should contain '/users/' (note the ending slash) and '/users/' should be followed by a mongo ID\n      cy.url()\n        .should('contain', '/users/')\n        .should('match', /.*\\/users\\/[0-9a-fA-F]{24}$/);\n\n      // On this profile page we were sent to, the name and company should be correct\n      cy.get('.user-card-name').first().should('have.text', firstUserName);\n      cy.get('.user-card-company').first().should('have.text', firstUserCompany);\n    });\n   });"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}