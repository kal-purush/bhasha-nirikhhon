{
    "identifiers": [
        "random",
        "unittest",
        "unittest",
        "mock",
        "Mock",
        "patch",
        "space",
        "MultiGrid",
        "SingleGrid",
        "unique_id",
        "pos",
        "random",
        "Random",
        "unique_id",
        "pos",
        "unittest",
        "TestCase",
        "SingleGrid",
        "width",
        "height",
        "torus",
        "x",
        "width",
        "y",
        "height",
        "TEST_GRID",
        "x",
        "y",
        "counter",
        "MockAgent",
        "counter",
        "agents",
        "append",
        "a",
        "grid",
        "place_agent",
        "a",
        "x",
        "y",
        "agent",
        "agents",
        "agent",
        "pos",
        "grid",
        "x",
        "y",
        "agent",
        "agent",
        "agents",
        "agent",
        "pos",
        "agent",
        "grid",
        "get_cell_list_contents",
        "x",
        "y",
        "agent",
        "agents",
        "agent",
        "pos",
        "agent",
        "grid",
        "get_cell_list_contents",
        "x",
        "y",
        "agent",
        "agents",
        "agent",
        "pos",
        "agent",
        "grid",
        "iter_cell_list_contents",
        "x",
        "y",
        "agent",
        "agents",
        "agent",
        "pos",
        "agent",
        "grid",
        "iter_cell_list_contents",
        "x",
        "y",
        "grid",
        "get_neighborhood",
        "moore",
        "len",
        "neighborhood",
        "grid",
        "get_neighborhood",
        "moore",
        "len",
        "neighborhood",
        "grid",
        "get_neighborhood",
        "moore",
        "len",
        "neighborhood",
        "grid",
        "get_neighborhood",
        "moore",
        "len",
        "neighborhood",
        "grid",
        "get_neighbors",
        "moore",
        "len",
        "neighbors",
        "grid",
        "get_neighbors",
        "moore",
        "len",
        "neighbors",
        "grid",
        "get_neighbors",
        "moore",
        "include_center",
        "len",
        "neighbors",
        "grid",
        "get_neighbors",
        "moore",
        "radius",
        "len",
        "neighbors",
        "grid",
        "coord_iter",
        "next",
        "ci",
        "first",
        "first",
        "first",
        "next",
        "ci",
        "second",
        "unique_id",
        "second",
        "pos",
        "second",
        "second",
        "agents",
        "grid",
        "move_agent",
        "agent",
        "agent",
        "pos",
        "torus",
        "assertRaises",
        "grid",
        "move_agent",
        "agent",
        "assertRaises",
        "grid",
        "move_agent",
        "agent",
        "grid",
        "height",
        "grid",
        "move_agent",
        "agent",
        "agent",
        "pos",
        "grid",
        "height",
        "grid",
        "move_agent",
        "agent",
        "grid",
        "height",
        "agent",
        "pos",
        "agents",
        "agent",
        "pos",
        "grid",
        "remove_agent",
        "agent",
        "agent",
        "pos",
        "grid",
        "x",
        "y",
        "grid",
        "agent_a",
        "pos",
        "agent_b",
        "pos",
        "grid",
        "swap_pos",
        "agent_a",
        "agent_b",
        "agent_a",
        "pos",
        "pos_b",
        "agent_b",
        "pos",
        "pos_a",
        "grid",
        "pos_a",
        "agent_b",
        "grid",
        "pos_b",
        "agent_a",
        "grid",
        "swap_pos",
        "agent_a",
        "agent_a",
        "agent_a",
        "pos",
        "pos_b",
        "grid",
        "pos_b",
        "agent_a",
        "grid",
        "remove_agent",
        "agent_a",
        "grid",
        "remove_agent",
        "agent_b",
        "agent_a",
        "unique_id",
        "agent_b",
        "unique_id",
        "id_a",
        "id_b",
        "assertRaisesRegex",
        "e_message",
        "grid",
        "swap_pos",
        "agent_a",
        "agent_b",
        "TestSingleGrid",
        "grid",
        "get_neighborhood",
        "moore",
        "len",
        "neighborhood",
        "grid",
        "get_neighborhood",
        "moore",
        "len",
        "neighborhood",
        "grid",
        "get_neighborhood",
        "moore",
        "len",
        "neighborhood",
        "grid",
        "get_neighborhood",
        "moore",
        "radius",
        "len",
        "neighborhood",
        "grid",
        "get_neighborhood",
        "moore",
        "radius",
        "len",
        "neighborhood",
        "grid",
        "get_neighbors",
        "moore",
        "len",
        "neighbors",
        "grid",
        "get_neighbors",
        "moore",
        "len",
        "neighbors",
        "grid",
        "get_neighbors",
        "moore",
        "include_center",
        "len",
        "neighbors",
        "grid",
        "get_neighbors",
        "moore",
        "radius",
        "len",
        "neighbors",
        "unittest",
        "TestCase",
        "SingleGrid",
        "width",
        "height",
        "x",
        "width",
        "y",
        "height",
        "TEST_GRID",
        "x",
        "y",
        "counter",
        "MockAgent",
        "counter",
        "agents",
        "append",
        "a",
        "grid",
        "place_agent",
        "a",
        "x",
        "y",
        "len",
        "agents",
        "patch",
        "MockAgent",
        "create",
        "mock_model",
        "MockAgent",
        "assertRaises",
        "grid",
        "place_agent",
        "a",
        "mock_model",
        "schedule",
        "Mock",
        "side_effect",
        "len",
        "agents",
        "grid",
        "move_to_empty",
        "a",
        "num_agents",
        "a",
        "pos",
        "grid",
        "empties",
        "len",
        "grid",
        "empties",
        "i",
        "grid",
        "move_to_empty",
        "a",
        "len",
        "grid",
        "empties",
        "len",
        "grid",
        "empties",
        "i",
        "empty_cells",
        "MockAgent",
        "i",
        "grid",
        "move_to_empty",
        "a",
        "num_agents",
        "len",
        "grid",
        "empties",
        "MockAgent",
        "assertRaises",
        "grid",
        "position_agent",
        "a",
        "assertRaises",
        "move_to_empty",
        "agents",
        "num_agents",
        "num_agents",
        "unittest",
        "TestCase",
        "MultiGrid",
        "width",
        "height",
        "torus",
        "x",
        "width",
        "y",
        "height",
        "i",
        "TEST_MULTIGRID",
        "x",
        "y",
        "counter",
        "MockAgent",
        "counter",
        "agents",
        "append",
        "a",
        "grid",
        "place_agent",
        "a",
        "x",
        "y",
        "agent",
        "agents",
        "agent",
        "pos",
        "agent",
        "grid",
        "x",
        "y",
        "grid",
        "get_neighborhood",
        "moore",
        "len",
        "neighborhood",
        "grid",
        "get_neighborhood",
        "moore",
        "len",
        "neighborhood",
        "grid",
        "get_neighborhood",
        "moore",
        "len",
        "neighborhood",
        "grid",
        "get_neighbors",
        "moore",
        "len",
        "neighbors",
        "grid",
        "get_neighbors",
        "moore",
        "len",
        "neighbors",
        "grid",
        "get_neighbors",
        "moore",
        "include_center",
        "len",
        "neighbors",
        "grid",
        "get_neighbors",
        "moore",
        "radius",
        "len",
        "neighbors",
        "SingleGrid",
        "_",
        "x",
        "y",
        "grid",
        "coord_iter",
        "grid",
        "x",
        "x",
        "y",
        "grid",
        "grid",
        "grid",
        "grid",
        "grid",
        "grid",
        "grid",
        "grid",
        "grid",
        "x",
        "y",
        "x",
        "y",
        "unittest",
        "main"
    ],
    "literals": [
        "f\"<Agent id: {id_a}>, <Agent id: {id_b}> - not on the grid\"",
        "\"model\"",
        "\"__main__\""
    ],
    "variables": [
        "TEST_GRID",
        "random",
        "unique_id",
        "pos",
        "torus",
        "height",
        "width",
        "grid",
        "agents",
        "counter",
        "a",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "neighborhood",
        "neighborhood",
        "neighborhood",
        "neighborhood",
        "neighbors",
        "neighbors",
        "neighbors",
        "neighbors",
        "ci",
        "first",
        "second",
        "agent",
        "agent",
        "x",
        "y",
        "agent_a",
        "agent_b",
        "pos_a",
        "pos_b",
        "id_a",
        "id_b",
        "e_message",
        "torus",
        "neighborhood",
        "neighborhood",
        "neighborhood",
        "neighborhood",
        "neighborhood",
        "neighbors",
        "neighbors",
        "neighbors",
        "neighbors",
        "width",
        "height",
        "grid",
        "agents",
        "counter",
        "a",
        "num_agents",
        "a",
        "get_agent_count",
        "empty_cells",
        "a",
        "a",
        "TEST_MULTIGRID",
        "torus",
        "width",
        "height",
        "grid",
        "agents",
        "counter",
        "a",
        "x",
        "y",
        "neighborhood",
        "neighborhood",
        "neighborhood",
        "neighbors",
        "neighbors",
        "neighbors",
        "neighbors",
        "grid",
        "y"
    ],
    "comments": [
        "Initial agent positions for testing",
        "",
        "--- visual aid ----",
        "0 0 0",
        "1 1 0",
        "0 1 0",
        "1 0 1",
        "0 0 1",
        "-------------------",
        "The height needs to be even to test the edge case described in PR #1517",
        "height of grid",
        "width of grid",
        "Create and place the mock agent",
        "no agent in first space",
        "first agent in the second space",
        "get the agent at [0, 1]",
        "move it off the torus and check for the exception",
        "Swap agents positions",
        "Swap the same agents",
        "Raise for agents not on the grid",
        "here we test the edge case described in PR #1517 using a radius",
        "measuring half of the grid height",
        "Create and place the mock agent",
        "assert len(self.grid.empties) == self.grid.num_empties == 9",
        "Place the agent in an empty cell",
        "Test whether after placing, the empty cells are reduced by 1",
        "Place agents until the grid is full",
        "Number of agents at each position for testing",
        "Initial agent positions for testing",
        "",
        "--- visual aid ----",
        "0 0 0",
        "2 0 3",
        "0 5 0",
        "1 1 0",
        "0 0 0",
        "-------------------",
        "Create and place the mock agent",
        "Create a grid where the content of each coordinate is a tuple of its coordinates"
    ],
    "docstrings": [
        "\"\"\"\nTest the Grid objects.\n\"\"\"",
        "\"\"\"\n    Minimalistic agent for testing purposes.\n    \"\"\"",
        "\"\"\"\n    Testing a non-toroidal singlegrid.\n    \"\"\"",
        "\"\"\"\n        Create a test non-toroidal grid and populate it with Mock Agents\n        \"\"\"",
        "\"\"\"\n        Ensure that the agents are all placed properly.\n        \"\"\"",
        "\"\"\"\n        Ensure that if an agent is in a cell, get_cell_list_contents accurately\n        reports that fact.\n        \"\"\"",
        "\"\"\"\n        Ensure that if an agent is in a cell, get_cell_list_contents accurately\n        reports that fact, even when single position is not wrapped in a list.\n        \"\"\"",
        "\"\"\"\n        Ensure that if an agent is in a cell, iter_cell_list_contents\n        accurately reports that fact.\n        \"\"\"",
        "\"\"\"\n        Ensure that if an agent is in a cell, iter_cell_list_contents\n        accurately reports that fact, even when single position is not\n        wrapped in a list.\n        \"\"\"",
        "\"\"\"\n        Test the base neighborhood methods on the non-toroid.\n        \"\"\"",
        "\"\"\"\n    Testing the toroidal singlegrid.\n    \"\"\"",
        "\"\"\"\n        Test the toroidal neighborhood methods.\n        \"\"\"",
        "\"\"\"\n    Test the enforcement in SingleGrid.\n    \"\"\"",
        "\"\"\"\n        Create a test non-toroidal grid and populate it with Mock Agents\n        \"\"\"",
        "\"\"\"\n        Test the SingleGrid empty count and enforcement.\n        \"\"\"",
        "\"\"\"\n    Testing a toroidal MultiGrid\n    \"\"\"",
        "\"\"\"\n        Create a test non-toroidal grid and populate it with Mock Agents\n        \"\"\"",
        "\"\"\"\n        Ensure that the agents are all placed properly on the MultiGrid.\n        \"\"\"",
        "\"\"\"\n        Test the toroidal MultiGrid neighborhood methods.\n        \"\"\""
    ],
    "functions": [
        "setUp",
        "test_agent_positions",
        "test_cell_agent_reporting",
        "test_listfree_cell_agent_reporting",
        "test_iter_cell_agent_reporting",
        "test_listfree_iter_cell_agent_reporting",
        "test_neighbors",
        "test_coord_iter",
        "test_agent_move",
        "test_agent_remove",
        "test_swap_pos",
        "test_neighbors",
        "setUp",
        "test_enforcement",
        "setUp",
        "test_agent_positions",
        "test_neighbors",
        "test_int",
        "test_tuple",
        "test_list",
        "test_torus",
        "test_slice"
    ],
    "classes": [
        "MockAgent",
        "TestSingleGrid",
        "TestSingleGridTorus",
        "TestSingleGridEnforcement",
        "TestMultiGrid",
        "TestIndexing"
    ]
}