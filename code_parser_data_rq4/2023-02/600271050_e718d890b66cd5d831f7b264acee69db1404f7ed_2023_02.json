{
    "identifiers": [
        "static_array",
        "StaticArray",
        "start_array",
        "StaticArray",
        "_capacity",
        "start_array",
        "value",
        "start_array",
        "append",
        "value",
        "_size",
        "_capacity",
        "join",
        "_data",
        "_",
        "_",
        "_size",
        "_index",
        "DynamicArrayException",
        "StopIteration",
        "_index",
        "value",
        "index",
        "index",
        "index",
        "_size",
        "DynamicArrayException",
        "_data",
        "index",
        "index",
        "value",
        "index",
        "index",
        "_size",
        "DynamicArrayException",
        "_data",
        "value",
        "index",
        "get_at_index",
        "index",
        "index",
        "value",
        "set_at_index",
        "index",
        "value",
        "_size",
        "_size",
        "_capacity",
        "_size",
        "_capacity",
        "_data",
        "new_capacity",
        "new_capacity",
        "new_capacity",
        "length",
        "StaticArray",
        "new_capacity",
        "i",
        "length",
        "_data",
        "i",
        "new_array",
        "new_capacity",
        "value",
        "get_capacity",
        "length",
        "resize",
        "get_capacity",
        "_data",
        "length",
        "value",
        "_size",
        "i",
        "get_capacity",
        "_data",
        "i",
        "_data",
        "value",
        "_size",
        "index",
        "value",
        "index",
        "index",
        "length",
        "DynamicArrayException",
        "get_capacity",
        "length",
        "resize",
        "get_capacity",
        "_data",
        "index",
        "_data",
        "index",
        "_data",
        "value",
        "_size",
        "i",
        "index",
        "get_capacity",
        "i",
        "get_capacity",
        "_data",
        "temp",
        "_data",
        "i",
        "_data",
        "i",
        "_data",
        "temp",
        "temp2",
        "_data",
        "i",
        "_data",
        "i",
        "_data",
        "temp",
        "_data",
        "value",
        "_size",
        "index",
        "index",
        "index",
        "length",
        "DynamicArrayException",
        "get_capacity",
        "length",
        "get_capacity",
        "length",
        "resize",
        "resize",
        "length",
        "i",
        "index",
        "get_capacity",
        "i",
        "get_capacity",
        "_data",
        "_data",
        "_data",
        "i",
        "_size",
        "start_index",
        "size",
        "start_index",
        "start_index",
        "length",
        "DynamicArrayException",
        "size",
        "size",
        "length",
        "start_index",
        "DynamicArrayException",
        "DynamicArray",
        "i",
        "start_index",
        "size",
        "start_index",
        "newArray",
        "append",
        "_data",
        "i",
        "newArray",
        "second_da",
        "i",
        "second_da",
        "length",
        "append",
        "second_da",
        "get_at_index",
        "i",
        "map_func",
        "DynamicArray",
        "i",
        "length",
        "newArray",
        "append",
        "map_func",
        "_data",
        "i",
        "newArray",
        "filter_func",
        "DynamicArray",
        "i",
        "length",
        "filter_func",
        "_data",
        "i",
        "newArray",
        "append",
        "_data",
        "i",
        "newArray",
        "reduce_func",
        "initializer",
        "is_empty",
        "initializer",
        "initializer",
        "length",
        "initializer",
        "_data",
        "reduce_func",
        "initializer",
        "_data",
        "initializer",
        "_data",
        "i",
        "length",
        "reduce_func",
        "value",
        "_data",
        "i",
        "initializer",
        "i",
        "length",
        "reduce_func",
        "value",
        "_data",
        "i",
        "value",
        "arr",
        "DynamicArray",
        "DynamicArray",
        "DynamicArray",
        "mode",
        "append",
        "arr",
        "get_at_index",
        "arr",
        "length",
        "mode",
        "frequency",
        "i",
        "arr",
        "length",
        "arr",
        "get_at_index",
        "i",
        "arr",
        "get_at_index",
        "i",
        "mode",
        "length",
        "mode",
        "get_at_index",
        "mode_index",
        "arr",
        "get_at_index",
        "i",
        "newMode",
        "temp_frequency",
        "frequency",
        "mode",
        "get_at_index",
        "mode_index",
        "arr",
        "get_at_index",
        "frequency",
        "mode",
        "set_at_index",
        "mode_index",
        "arr",
        "get_at_index",
        "i",
        "frequency",
        "mode",
        "get_at_index",
        "mode_index",
        "arr",
        "get_at_index",
        "i",
        "temp_frequency",
        "frequency",
        "temp_frequency",
        "temp_frequency",
        "mode",
        "get_at_index",
        "mode",
        "set_at_index",
        "arr",
        "get_at_index",
        "i",
        "mode",
        "length",
        "mode",
        "remove_at_index",
        "mode",
        "length",
        "mode",
        "get_capacity",
        "mode",
        "resize",
        "round",
        "mode",
        "get_capacity",
        "frequency",
        "temp_frequency",
        "mode_index",
        "mode",
        "insert_at_index",
        "mode_index",
        "arr",
        "get_at_index",
        "i",
        "frequency",
        "temp_frequency",
        "mode",
        "append",
        "arr",
        "get_at_index",
        "i",
        "mode_index",
        "mode",
        "frequency",
        "test_cases",
        "DynamicArray",
        "find_mode",
        "da",
        "da",
        "mode",
        "frequency",
        "DynamicArray",
        "x",
        "len",
        "da",
        "append",
        "x",
        "find_mode",
        "da",
        "da",
        "mode",
        "frequency"
    ],
    "literals": [
        "\"DYN_ARR Size/Cap: \"",
        "\"/\"",
        "' ['",
        "', '",
        "']'",
        "f\"Length: {self._size}, Capacity: {self._capacity}, {self._data}\"",
        "\"DynamicArray\"",
        "\"DynamicArray\"",
        "\"DynamicArray\"",
        "\"DynamicArray\"",
        "\"__main__\"",
        "\"\\n# find_mode - example 1\"",
        "\"HvocSl\"",
        "\" dCzZHEiHsc\"",
        "\"fLYqFsczRm\"",
        "\"ppBhWP\"",
        "\"ppBhWP\"",
        "\"svk\"",
        "\"uz\"",
        "\"uz\"",
        "\"uz\"",
        "\"zgvNS\"",
        "\"s\"",
        "\"ms\"",
        "\" kmroiPTYd\"",
        "\"fhnAFNy\"",
        "\"awfUaHygN\"",
        "\"U\"",
        "\"TDYSb\"",
        "\"GDaiXMEood\"",
        "\"EoD\"",
        "\"BsDL\"",
        "\"BsDL\"",
        "\"Apple\"",
        "\"Banana\"",
        "\"Banana\"",
        "\"Carrot\"",
        "\"Carrot\"",
        "\"Date\"",
        "\"Date\"",
        "\"Date\"",
        "\"Eggplant\"",
        "\"Eggplant\"",
        "\"Eggplant\"",
        "\"Fig\"",
        "\"Fig\"",
        "\"Grape\"",
        "f\"{da}\\nMode: {mode}, Frequency: {frequency}\\n\"",
        "f\"{da}\\nMode: {mode}, Frequency: {frequency}\""
    ],
    "variables": [
        "_size",
        "_capacity",
        "_data",
        "_index",
        "value",
        "index",
        "new_array",
        "new_array",
        "i",
        "_data",
        "_capacity",
        "i",
        "temp",
        "index",
        "i",
        "temp2",
        "i",
        "temp",
        "i",
        "index",
        "i",
        "i",
        "newArray",
        "newArray",
        "newArray",
        "value",
        "value",
        "value",
        "value",
        "mode",
        "frequency",
        "temp_frequency",
        "mode_index",
        "newMode",
        "mode_index",
        "frequency",
        "temp",
        "mode_index",
        "temp_frequency",
        "newMode",
        "newMode",
        "temp_frequency",
        "newMode",
        "test_cases",
        "da",
        "mode",
        "frequency",
        "da",
        "mode",
        "frequency"
    ],
    "comments": [
        "Name: Suhrob Hasanov",
        "OSU Email: hasanovs@oregon",
        "Course: CS261 - Data Structures",
        "Assignment: Assignment 2",
        "Due Date: 2/6/23",
        "Description: Dynamic Array implementation.",
        "populate dynamic array with initial values (if provided)",
        "before using this feature, implement append() method",
        "-----------------------------------------------------------------------",
        "print(\"self.get_capacity()\", self.get_capacity())",
        "print(\"self.length()\", self.length())",
        "Capacity param check",
        "Calling resize and passing double of current cap",
        "print(\"self.get_capacity() AFTER\", self.get_capacity())",
        "print(\"Else 1\")",
        "print(\"cap\", self.get_capacity())",
        "print(\"array\", self._data)",
        "This block inserts the value if there is existing value at index",
        "This block reassigns (moves) the items once new val is inserted",
        "If no value at index",
        "Index check",
        "Capacity check and action",
        "Overwriting starting at given index (removal process)",
        "Decrementing size",
        "Index check",
        "Size check",
        "Getting the values for the new array, array of return values",
        "Applying the passed unction to the each item in array",
        "if filter_func returns true, the item at index is added to the return array",
        "Check for initializer",
        "If array has only one item",
        "If no initializer passed",
        "Applying reduce function to each item of array",
        "initializer was passed",
        "Applying reduce function to each item of array",
        "grabbing first val of the index and set as mode",
        "same as curr mode",
        "diff from default mode",
        "diff from current mode",
        "clearing the mode array off existing less frequent modes",
        "Deleting previous modes since new higher mode was identified",
        "Adjusting the capacity as the mode array changes",
        "------------------- BASIC TESTING -----------------------------------------",
        "print(\"\\n# resize - example 1\")",
        "da = DynamicArray()",
        "",
        "# print dynamic array's size, capacity and the contents",
        "# of the underlying static array (data)",
        "da.print_da_variables()",
        "da.resize(8)",
        "da.print_da_variables()",
        "da.resize(2)",
        "da.print_da_variables()",
        "da.resize(0)",
        "da.print_da_variables()",
        "",
        "print(\"\\n# resize - example 2\")",
        "da = DynamicArray([1, 2, 3, 4, 5, 6, 7, 8])",
        "print(da)",
        "da.resize(20)",
        "print(da)",
        "da.resize(4)",
        "print(da)",
        "",
        "print(\"\\n# append - example 1\")",
        "da = DynamicArray()",
        "da.print_da_variables()",
        "da.append(1)",
        "da.print_da_variables()",
        "print(da)",
        "",
        "print(\"\\n# append - example 2\")",
        "da = DynamicArray()",
        "for i in range(9):",
        "da.append(i + 101)",
        "print(da)",
        "print(\"\\n# append - example 3\")",
        "da = DynamicArray()",
        "for i in range(600):",
        "da.append(i)",
        "print(da.length())",
        "print(da.get_capacity())",
        "",
        "print(\"\\n# insert_at_index - example 1\")",
        "da = DynamicArray([100])",
        "print(da)",
        "da.insert_at_index(0, 200)",
        "da.insert_at_index(0, 300)",
        "da.insert_at_index(0, 400)",
        "print(da)",
        "da.insert_at_index(3, 500)",
        "print(da)",
        "da.insert_at_index(1, 600)",
        "print(da)",
        "",
        "print(\"\\n# insert_at_index example 2\")",
        "da = DynamicArray()",
        "try:",
        "da.insert_at_index(-1, 100)",
        "except Exception as e:",
        "print(\"Exception raised:\", type(e))",
        "da.insert_at_index(0, 200)",
        "try:",
        "da.insert_at_index(2, 300)",
        "except Exception as e:",
        "print(\"Exception raised:\", type(e))",
        "print(da)",
        "",
        "print(\"\\n# insert at index example 3\")",
        "da = DynamicArray()",
        "for i in range(1, 10):",
        "index, value = i - 4, i * 10",
        "try:",
        "da.insert_at_index(index, value)",
        "except Exception as e:",
        "print(\"Cannot insert value\", value, \"at index\", index)",
        "print(da)",
        "print(\"\\n# remove_at_index - example 1\")",
        "",
        "",
        "da = DynamicArray([\"f\", \"h\", \"yFNd^qmamM\", \"oyCJ_oZF\", \"Cytf^\", \"MJx\", \"Ia`^\", \"[^XWIIG\"])",
        "print(da)",
        "da.remove_at_index(2)",
        "print(da)",
        "print()",
        "da = DynamicArray([\"a1\", \"b2\", \"c3\", \"d4\", \"e5\", \"f6\", \"g7\", \"h8\"])",
        "print(da)",
        "da.remove_at_index(2)",
        "print(da)",
        "print()",
        "da = DynamicArray([10, 20, 30, 40, 50, 60, 70, 80])",
        "print(da)",
        "da.remove_at_index(4)",
        "print(da)",
        "print()",
        "print()",
        "print()",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "da = DynamicArray([10, 20, 30, 40, 50, 60, 70, 80])",
        "print(da)",
        "da.remove_at_index(0)",
        "print(da)",
        "da.remove_at_index(6)",
        "print(da)",
        "da.remove_at_index(2)",
        "print(da)",
        "",
        "",
        "",
        "",
        "",
        "print(\"\\n# remove_at_index - example 2\")",
        "da = DynamicArray([1024])",
        "print(da)",
        "for i in range(17):",
        "da.insert_at_index(i, i)",
        "print(da.length(), da.get_capacity())",
        "for i in range(16, -1, -1):",
        "da.remove_at_index(0)",
        "print(da)",
        "",
        "print(\"\\n# remove_at_index - example 3\")",
        "da = DynamicArray()",
        "print(da.length(), da.get_capacity())",
        "[da.append(1) for i in range(100)]  # step 1 - add 100 elements",
        "print(da.length(), da.get_capacity())",
        "[da.remove_at_index(0) for i in range(68)]  # step 2 - remove 68 elements",
        "print(da.length(), da.get_capacity())",
        "da.remove_at_index(0)  # step 3 - remove 1 element",
        "print(da.length(), da.get_capacity())",
        "da.remove_at_index(0)  # step 4 - remove 1 element",
        "print(da.length(), da.get_capacity())",
        "[da.remove_at_index(0) for i in range(14)]  # step 5 - remove 14 elements",
        "print(da.length(), da.get_capacity())",
        "da.remove_at_index(0)  # step 6 - remove 1 element",
        "print(da.length(), da.get_capacity())",
        "da.remove_at_index(0)  # step 7 - remove 1 element",
        "print(da.length(), da.get_capacity())",
        "",
        "for i in range(14):",
        "print(\"Before remove_at_index(): \", da.length(), da.get_capacity(), end=\"\")",
        "da.remove_at_index(0)",
        "print(\" After remove_at_index(): \", da.length(), da.get_capacity())",
        "",
        "print(\"\\n# remove at index - example 4\")",
        "da = DynamicArray([1, 2, 3, 4, 5])",
        "print(da)",
        "for _ in range(5):",
        "da.remove_at_index(0)",
        "print(da)",
        "print(\"\\n# slice example 1\")",
        "da = DynamicArray([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "da_slice = da.slice(1, 3)",
        "print(da, da_slice, sep=\"\\n\")",
        "da_slice.remove_at_index(0)",
        "print(da, da_slice, sep=\"\\n\")",
        "",
        "print(\"\\n# slice example 2\")",
        "da = DynamicArray([10, 11, 12, 13, 14, 15, 16])",
        "print(\"SOURCE:\", da)",
        "slices = [(0, 7), (-1, 7), (0, 8), (2, 3), (5, 0), (5, 3), (6, 1), (6, -1)]",
        "for i, cnt in slices:",
        "print(\"Slice\", i, \"/\", cnt, end=\"\")",
        "try:",
        "print(\" --- OK: \", da.slice(i, cnt))",
        "except:",
        "print(\" --- exception occurred.\")",
        "print(\"\\n# merge example 1\")",
        "da = DynamicArray([1, 2, 3, 4, 5])",
        "da2 = DynamicArray([10, 11, 12, 13])",
        "print(da)",
        "da.merge(da2)",
        "print(da)",
        "",
        "print(\"\\n# merge example 2\")",
        "da = DynamicArray([1, 2, 3])",
        "da2 = DynamicArray()",
        "da3 = DynamicArray()",
        "da.merge(da2)",
        "print(da)",
        "da2.merge(da3)",
        "print(da2)",
        "da3.merge(da)",
        "print(da3)",
        "print(\"\\n# map example 1\")",
        "da = DynamicArray([1, 5, 10, 15, 20, 25])",
        "print(da)",
        "print(da.map(lambda x: x ** 2))",
        "",
        "print(\"\\n# map example 2\")",
        "",
        "",
        "def double(value):",
        "return value * 2",
        "",
        "",
        "def square(value):",
        "return value ** 2",
        "",
        "",
        "def cube(value):",
        "return value ** 3",
        "",
        "",
        "def plus_one(value):",
        "return value + 1",
        "",
        "",
        "da = DynamicArray([plus_one, double, square, cube])",
        "for value in [1, 10, 20]:",
        "print(da.map(lambda x: x(value)))",
        "print(\"\\n# filter example 1\")",
        "",
        "",
        "def filter_a(e):",
        "return e > 10",
        "",
        "",
        "da = DynamicArray([1, 5, 10, 15, 20, 25])",
        "print(da)",
        "result = da.filter(filter_a)",
        "print(result)",
        "print(da.filter(lambda x: (10 <= x <= 20)))",
        "",
        "print(\"\\n# filter example 2\")",
        "",
        "",
        "def is_long_word(word, length):",
        "return len(word) > length",
        "",
        "",
        "da = DynamicArray(\"This is a sentence with some long words\".split())",
        "print(da)",
        "for length in [3, 4, 7]:",
        "print(da.filter(lambda word: is_long_word(word, length)))",
        "print()",
        "values = [\"bllokce\", \"oiwrazylru\", \"vxfsnlzn\", \"ra\", \"tqhbsrhpjm\", \"t\", \"bikrqesrn\", \"weux\", \"jdcawpshvm\", \"oloesc\"]",
        "da = DynamicArray(values)",
        "print(da)",
        "print(\"bllokceoiwrazylruvxfsnlznratqhbsrhpjmtbikrqesrnweuxjdcawpshvmoloesc\")",
        "print(da.reduce(lambda x, y:(x + y)))",
        "",
        "",
        "print(\"\\n# reduce example 1\")",
        "values = [100, 5, 10, 15, 20, 25]",
        "da = DynamicArray(values)",
        "print(da)",
        "print(da.reduce(lambda x, y: (x // 5 + y ** 2)))",
        "print(da.reduce(lambda x, y: (x + y ** 2), -1))",
        "",
        "print(\"\\n# reduce example 2\")",
        "da = DynamicArray([100])",
        "print(da.reduce(lambda x, y: x + y ** 2))",
        "print(da.reduce(lambda x, y: x + y ** 2, -1))",
        "da.remove_at_index(0)",
        "print(da.reduce(lambda x, y: x + y ** 2))",
        "print(da.reduce(lambda x, y: x + y ** 2, -1))"
    ],
    "docstrings": [
        "\"\"\"\n    Custom exception class to be used by Dynamic Array\n    DO NOT CHANGE THIS CLASS IN ANY WAY\n    \"\"\"",
        "\"\"\"\n        Initialize new dynamic array\n        DO NOT CHANGE THIS METHOD IN ANY WAY\n        \"\"\"",
        "\"\"\"\n        Return content of dynamic array in human-readable form\n        DO NOT CHANGE THIS METHOD IN ANY WAY\n        \"\"\"",
        "\"\"\"\n        Create iterator for loop\n        DO NOT CHANGE THIS METHOD IN ANY WAY\n        \"\"\"",
        "\"\"\"\n        Obtain next value and advance iterator\n        DO NOT CHANGE THIS METHOD IN ANY WAY\n        \"\"\"",
        "\"\"\"\n        Return value from given index position\n        Invalid index raises DynamicArrayException\n        DO NOT CHANGE THIS METHOD IN ANY WAY\n        \"\"\"",
        "\"\"\"\n        Store value at given index in the array\n        Invalid index raises DynamicArrayException\n        DO NOT CHANGE THIS METHOD IN ANY WAY\n        \"\"\"",
        "\"\"\"\n        Same functionality as get_at_index() method above,\n        but called using array[index] syntax\n        DO NOT CHANGE THIS METHOD IN ANY WAY\n        \"\"\"",
        "\"\"\"\n        Same functionality as set_at_index() method above,\n        but called using array[index] syntax\n        DO NOT CHANGE THIS METHOD IN ANY WAY\n        \"\"\"",
        "\"\"\"\n        Return True is array is empty / False otherwise\n        DO NOT CHANGE THIS METHOD IN ANY WAY\n        \"\"\"",
        "\"\"\"\n        Return number of elements stored in array\n        DO NOT CHANGE THIS METHOD IN ANY WAY\n        \"\"\"",
        "\"\"\"\n        Return the capacity of the array\n        DO NOT CHANGE THIS METHOD IN ANY WAY\n        \"\"\"",
        "\"\"\"\n        Print information contained in the dynamic array.\n        Used for testing purposes.\n        DO NOT CHANGE THIS METHOD IN ANY WAY\n        \"\"\"",
        "\"\"\"\n        Resizes the dynamic array based on the value passed.\n        \"\"\"",
        "\"\"\"\n        Adds passed value to the end of the dynamic array.\n        \"\"\"",
        "\"\"\"\n        Inserts the passed value at a given index into the dynamic array.\n        \"\"\"",
        "\"\"\"\n        Removes value at a given index.\n        \"\"\"",
        "\"\"\"\n        Returns given size of values starting at a given index.\n        \"\"\"",
        "\"\"\"\n        Merges two dynamic arrays.\n        \"\"\"",
        "\"\"\"\n        Returns the results after applying the passed function.\n        \"\"\"",
        "\"\"\"\n        Returns the items in the dynamic array that meet the requirements of the filter function.\n        \"\"\"",
        "\"\"\"\n        Returns the result of passed function applied to the items in the dynamic array.\n        \"\"\"",
        "\"\"\"\n    Returns the mode and highest frequency number of the dynamic array.\n    \"\"\""
    ],
    "functions": [
        "__str__",
        "__iter__",
        "__next__",
        "get_at_index",
        "set_at_index",
        "__getitem__",
        "__setitem__",
        "is_empty",
        "length",
        "get_capacity",
        "print_da_variables",
        "resize",
        "append",
        "insert_at_index",
        "remove_at_index",
        "merge",
        "reduce",
        "find_mode"
    ],
    "classes": [
        "DynamicArrayException",
        "DynamicArray"
    ]
}