{
    "identifiers": [
        "typing",
        "Any",
        "Dict",
        "Optional",
        "pydantic",
        "BaseModel",
        "Extra",
        "root_validator",
        "langchain",
        "embeddings",
        "Embeddings",
        "langchain",
        "utils",
        "get_from_dict_or_env",
        "tenacity",
        "retry",
        "retry_if_exception_type",
        "stop_after_attempt",
        "wait_exponential",
        "openai",
        "error",
        "Timeout",
        "APIError",
        "APIConnectionError",
        "RateLimitError",
        "BaseModel",
        "Embeddings",
        "Any",
        "Optional",
        "Extra",
        "forbid",
        "root_validator",
        "pre",
        "allow_reuse",
        "cls",
        "values",
        "Dict",
        "Dict",
        "values",
        "values",
        "ValueError",
        "values",
        "ValueError",
        "values",
        "pop",
        "model_name",
        "model_name",
        "values",
        "root_validator",
        "allow_reuse",
        "cls",
        "values",
        "Dict",
        "Dict",
        "get_from_dict_or_env",
        "values",
        "openai",
        "openai_api_key",
        "openai",
        "Embedding",
        "ImportError",
        "ValueError",
        "values",
        "retry",
        "reraise",
        "stop",
        "stop_after_attempt",
        "wait",
        "wait_exponential",
        "multiplier",
        "min",
        "max",
        "retry",
        "retry_if_exception_type",
        "Timeout",
        "retry_if_exception_type",
        "APIError",
        "retry_if_exception_type",
        "APIConnectionError",
        "retry_if_exception_type",
        "RateLimitError",
        "text",
        "engine",
        "text",
        "replace",
        "client",
        "create",
        "input",
        "text",
        "engine",
        "engine",
        "texts",
        "_embedding_func",
        "text",
        "engine",
        "document_model_name",
        "text",
        "texts",
        "responses",
        "text",
        "_embedding_func",
        "text",
        "engine",
        "query_model_name",
        "embedding"
    ],
    "literals": [
        "\"text-embedding-ada-002\"",
        "\"text-embedding-ada-002\"",
        "\"model_name\"",
        "\"document_model_name\"",
        "\"Both `model_name` and `document_model_name` were provided, \"",
        "\"but only one should be.\"",
        "\"query_model_name\"",
        "\"Both `model_name` and `query_model_name` were provided, \"",
        "\"but only one should be.\"",
        "\"model_name\"",
        "\"document_model_name\"",
        "f\"text-search-{model_name}-doc-001\"",
        "\"query_model_name\"",
        "f\"text-search-{model_name}-query-001\"",
        "\"openai_api_key\"",
        "\"OPENAI_API_KEY\"",
        "\"client\"",
        "\"Could not import openai python package. \"",
        "\"Please it install it with `pip install openai`.\"",
        "\"\\n\"",
        "\" \"",
        "\"data\"",
        "\"embedding\""
    ],
    "variables": [
        "client",
        "document_model_name",
        "query_model_name",
        "openai_api_key",
        "extra",
        "model_name",
        "values",
        "values",
        "openai_api_key",
        "openai",
        "api_key",
        "values",
        "text",
        "responses",
        "embedding"
    ],
    "comments": [
        ": :meta private:",
        "TODO: deprecate this",
        "replace newlines, which can negatively affect performance."
    ],
    "docstrings": [
        "\"\"\"Wrapper around OpenAI embedding models.\"\"\"",
        "\"\"\"Wrapper around OpenAI embedding models.\n\n    To use, you should have the ``openai`` python package installed, and the\n    environment variable ``OPENAI_API_KEY`` set with your API key or pass it\n    as a named parameter to the constructor.\n\n    Example:\n        .. code-block:: python\n\n            from langchain.embeddings import OpenAIEmbeddings\n            openai = OpenAIEmbeddings(openai_api_key=\"my-api-key\")\n    \"\"\"",
        "\"\"\"Configuration for this pydantic object.\"\"\"",
        "\"\"\"Get model names from just old model name.\"\"\"",
        "\"\"\"Validate that api key and python package exists in environment.\"\"\"",
        "\"\"\"Call out to OpenAI's embedding endpoint with exponential backoff.\"\"\"",
        "\"\"\"Call out to OpenAI's embedding endpoint for embedding search docs.\n\n        Args:\n            texts: The list of texts to embed.\n\n        Returns:\n            List of embeddings, one for each text.\n        \"\"\"",
        "\"\"\"Call out to OpenAI's embedding endpoint for embedding query text.\n\n        Args:\n            text: The text to embed.\n\n        Returns:\n            Embeddings for the text.\n        \"\"\""
    ],
    "functions": [
        "get_model_names",
        "validate_environment",
        "_embedding_func",
        "embed_documents",
        "embed_query"
    ],
    "classes": [
        "OpenAIEmbeddings",
        "Config"
    ]
}