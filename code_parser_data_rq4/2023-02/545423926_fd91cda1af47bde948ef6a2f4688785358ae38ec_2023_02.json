{
    "identifiers": [
        "json",
        "logging",
        "os",
        "random",
        "time",
        "datetime",
        "datetime",
        "typing",
        "Any",
        "Callable",
        "Dict",
        "Literal",
        "Optional",
        "Sequence",
        "Tuple",
        "cast",
        "requests",
        "rockset",
        "exceptions",
        "BadRequestException",
        "RocksetException",
        "rockset",
        "models",
        "QueryRequestSql",
        "rockset",
        "query_paginator",
        "QueryPaginator",
        "rockset",
        "rockset_client",
        "RocksetClient",
        "feast",
        "entity",
        "Entity",
        "feast",
        "feature_view",
        "FeatureView",
        "feast",
        "infra",
        "online_stores",
        "helpers",
        "compute_entity_id",
        "feast",
        "infra",
        "online_stores",
        "online_store",
        "OnlineStore",
        "feast",
        "protos",
        "feast",
        "types",
        "EntityKey_pb2",
        "EntityKey",
        "EntityKeyProto",
        "feast",
        "protos",
        "feast",
        "types",
        "Value_pb2",
        "Value",
        "ValueProto",
        "feast",
        "repo_config",
        "FeastConfigBaseModel",
        "RepoConfig",
        "feast",
        "usage",
        "log_exceptions_and_usage",
        "logging",
        "getLogger",
        "FeastConfigBaseModel",
        "Literal",
        "Optional",
        "Optional",
        "OnlineStore",
        "log_exceptions_and_usage",
        "online_store",
        "config",
        "RepoConfig",
        "table",
        "FeatureView",
        "data",
        "Tuple",
        "EntityKeyProto",
        "Dict",
        "ValueProto",
        "datetime",
        "Optional",
        "datetime",
        "progress",
        "Optional",
        "Callable",
        "Any",
        "config",
        "online_store",
        "isinstance",
        "online_config",
        "RocksetOnlineStoreConfig",
        "get_rockset_client",
        "online_config",
        "get_collection_name",
        "config",
        "table",
        "feature_vals",
        "data",
        "feature_vals",
        "compute_entity_id",
        "entity_key",
        "entity_key",
        "entity_key_serialization_version",
        "config",
        "entity_key_serialization_version",
        "serialized_key",
        "dedup_dict",
        "feature_vals",
        "timestamp",
        "dedup_dict",
        "serialized_key",
        "feature_vals",
        "serialized_key",
        "feature_vals",
        "dedup_dict",
        "items",
        "feature_vals",
        "serialized_key",
        "timestamp",
        "isoformat",
        "created_ts",
        "created_ts",
        "isoformat",
        "k",
        "v",
        "features",
        "items",
        "v",
        "SerializeToString",
        "hex",
        "request_batch",
        "append",
        "progress",
        "progress",
        "rs",
        "Documents",
        "add_documents",
        "collection",
        "collection_name",
        "data",
        "request_batch",
        "online_config",
        "fence_all_writes",
        "wait_for_fence",
        "rs",
        "collection_name",
        "resp",
        "online_config",
        "log_exceptions_and_usage",
        "online_store",
        "config",
        "RepoConfig",
        "table",
        "FeatureView",
        "entity_keys",
        "EntityKeyProto",
        "requested_features",
        "Optional",
        "Tuple",
        "Optional",
        "datetime",
        "Optional",
        "Dict",
        "ValueProto",
        "config",
        "online_store",
        "isinstance",
        "online_config",
        "RocksetOnlineStoreConfig",
        "get_rockset_client",
        "online_config",
        "get_collection_name",
        "config",
        "table",
        "requested_features",
        "join",
        "requested_features",
        "compute_entity_id",
        "k",
        "entity_key_serialization_version",
        "config",
        "entity_key_serialization_version",
        "k",
        "entity_keys",
        "join",
        "format",
        "id",
        "s",
        "s",
        "entity_serialized_key_list",
        "feature_list",
        "collection_name",
        "entity_query_str",
        "requested_features",
        "feature_set",
        "update",
        "requested_features",
        "page",
        "QueryPaginator",
        "rs",
        "rs",
        "Queries",
        "query",
        "sql",
        "QueryRequestSql",
        "query",
        "query_str",
        "paginate",
        "initial_paginate_response_doc_count",
        "online_config",
        "read_pagination_batch_size",
        "doc",
        "page",
        "k",
        "v",
        "doc",
        "items",
        "k",
        "feature_set",
        "ValueProto",
        "val",
        "ParseFromString",
        "fromhex",
        "v",
        "val",
        "doc",
        "datetime",
        "fromisoformat",
        "doc",
        "result",
        "Tuple",
        "Optional",
        "datetime",
        "Optional",
        "Dict",
        "ValueProto",
        "key",
        "entity_serialized_key_list",
        "key",
        "result_map",
        "results_list",
        "append",
        "results_list",
        "append",
        "result_map",
        "key",
        "results_list",
        "log_exceptions_and_usage",
        "online_store",
        "config",
        "RepoConfig",
        "tables_to_delete",
        "Sequence",
        "FeatureView",
        "tables_to_keep",
        "Sequence",
        "FeatureView",
        "entities_to_delete",
        "Sequence",
        "Entity",
        "entities_to_keep",
        "Sequence",
        "Entity",
        "partial",
        "config",
        "online_store",
        "isinstance",
        "online_config",
        "RocksetOnlineStoreConfig",
        "get_rockset_client",
        "online_config",
        "table_instance",
        "tables_to_keep",
        "get_collection_name",
        "config",
        "table_instance",
        "rs",
        "Collections",
        "create_file_upload_collection",
        "name",
        "collection_name",
        "created_collections",
        "append",
        "collection_name",
        "BadRequestException",
        "e",
        "parse_request_error_type",
        "e",
        "created_collections",
        "append",
        "collection_name",
        "table_to_delete",
        "tables_to_delete",
        "delete_collection",
        "rs",
        "collection_name",
        "get_collection_name",
        "config",
        "table_to_delete",
        "wait_for_ready_collections",
        "rs",
        "created_collections",
        "online_config",
        "online_config",
        "log_exceptions_and_usage",
        "online_store",
        "config",
        "RepoConfig",
        "tables",
        "Sequence",
        "FeatureView",
        "entities",
        "Sequence",
        "Entity",
        "config",
        "online_store",
        "isinstance",
        "online_config",
        "RocksetOnlineStoreConfig",
        "get_rockset_client",
        "online_config",
        "table",
        "tables",
        "delete_collection",
        "rs",
        "collection_name",
        "get_collection_name",
        "config",
        "table",
        "onlineConfig",
        "RocksetOnlineStoreConfig",
        "RocksetClient",
        "_rockset_client",
        "_rockset_client",
        "os",
        "getenv",
        "isinstance",
        "onlineConfig",
        "api_key",
        "onlineConfig",
        "api_key",
        "os",
        "getenv",
        "isinstance",
        "onlineConfig",
        "host",
        "onlineConfig",
        "host",
        "RocksetClient",
        "host",
        "_host",
        "api_key",
        "_api_key",
        "_rockset_client",
        "staticmethod",
        "rs",
        "RocksetClient",
        "collection_name",
        "rs",
        "Collections",
        "collection",
        "collection_name",
        "RocksetException",
        "e",
        "RocksetOnlineStore",
        "parse_request_error_type",
        "e",
        "logger",
        "warning",
        "collection_name",
        "staticmethod",
        "config",
        "RepoConfig",
        "feature_view",
        "FeatureView",
        "config",
        "project",
        "config",
        "project",
        "feature_view",
        "name",
        "feature_view",
        "name",
        "project_val",
        "table_name",
        "staticmethod",
        "e",
        "RocksetException",
        "json",
        "loads",
        "e",
        "body",
        "body_dict",
        "staticmethod",
        "rs",
        "RocksetClient",
        "collection_name",
        "last_offset",
        "online_config",
        "RocksetOnlineStoreConfig",
        "collection_name",
        "last_offset",
        "rs",
        "api_client",
        "configuration",
        "api_key",
        "time",
        "time",
        "num_attempts",
        "online_config",
        "max_request_attempts",
        "time",
        "time",
        "t_start",
        "requests",
        "post",
        "url",
        "rs",
        "api_client",
        "configuration",
        "host",
        "resource_path",
        "json",
        "request",
        "headers",
        "headers",
        "resp",
        "status_code",
        "resp",
        "json",
        "delay",
        "online_config",
        "fence_timeout_secs",
        "TimeoutError",
        "collection_name",
        "last_offset",
        "delay",
        "resp",
        "status_code",
        "RocksetOnlineStore",
        "backoff_sleep",
        "num_attempts",
        "online_config",
        "resp",
        "status_code",
        "resp",
        "status_code",
        "resp",
        "reason",
        "RocksetOnlineStore",
        "backoff_sleep",
        "num_attempts",
        "online_config",
        "staticmethod",
        "rs",
        "RocksetClient",
        "collection_names",
        "online_config",
        "RocksetOnlineStoreConfig",
        "time",
        "time",
        "cname",
        "collection_names",
        "num_attempts",
        "online_config",
        "max_request_attempts",
        "time",
        "time",
        "t_start",
        "rs",
        "Collections",
        "get",
        "collection",
        "cname",
        "RocksetException",
        "e",
        "RocksetOnlineStore",
        "parse_request_error_type",
        "e",
        "error_type",
        "delay",
        "online_config",
        "collection_created_timeout_secs",
        "TimeoutError",
        "cname",
        "delay",
        "error_type",
        "RocksetOnlineStore",
        "backoff_sleep",
        "num_attempts",
        "online_config",
        "resp",
        "cast",
        "Dict",
        "resp",
        "delay",
        "online_config",
        "collection_ready_timeout_secs",
        "TimeoutError",
        "cname",
        "delay",
        "RocksetOnlineStore",
        "backoff_sleep",
        "num_attempts",
        "online_config",
        "staticmethod",
        "attempts",
        "online_config",
        "RocksetOnlineStoreConfig",
        "online_config",
        "initial_request_backoff_secs",
        "random",
        "uniform",
        "default_backoff",
        "min",
        "default_backoff",
        "attempts",
        "online_config",
        "max_request_backoff_secs",
        "time",
        "sleep",
        "backoff"
    ],
    "literals": [
        "\"rockset\"",
        "\"rockset\"",
        "\"rockset\"",
        "\"_id\"",
        "\"event_ts\"",
        "\"created_ts\"",
        "\"\"",
        "\"last_offset\"",
        "\"rockset\"",
        "\"\"",
        "\",\"",
        "\",\"",
        "\"'{id}'\"",
        "f\"\"\"\n            SELECT\n                \"_id\",\n                \"event_ts\",\n                {feature_list}\n            FROM\n                {collection_name}\n            WHERE\n                \"_id\" IN ({entity_query_str})\n        \"\"\"",
        "\"_id\"",
        "\"event_ts\"",
        "\"rockset\"",
        "\"AlreadyExists\"",
        "\"rockset\"",
        "\"ROCKSET_APIKEY\"",
        "\"ROCKSET_APISERVER\"",
        "\"NotFound\"",
        "f\"Trying to delete collection that does not exist {collection_name}\"",
        "\"feast\"",
        "\"feature_store\"",
        "f\"{project_val}_{table_name}\"",
        "\"type\"",
        "f\"/v1/orgs/self/ws/commons/collections/{collection_name}/offsets/commit\"",
        "\"name\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"Authorization\"",
        "f\"ApiKey {rs.api_client.configuration.api_key}\"",
        "f\"{rs.api_client.configuration.host}{resource_path}\"",
        "\"data\"",
        "\"passed\"",
        "f\"Write to collection {collection_name} at offset {last_offset} was not available for read after {delay} secs\"",
        "f\"[{resp.status_code}]: {resp.reason}\"",
        "\"NotFound\"",
        "f\"Collection {cname} failed to become visible after {delay} seconds\"",
        "\"RateLimitExceeded\"",
        "\"data\"",
        "\"status\"",
        "\"READY\"",
        "f\"Collection {cname} failed to become ready after {delay} seconds\""
    ],
    "variables": [
        "logger",
        "api_key",
        "host",
        "read_pagination_batch_size",
        "collection_created_timeout_secs",
        "collection_ready_timeout_secs",
        "fence_all_writes",
        "fence_timeout_secs",
        "initial_request_backoff_secs",
        "max_request_backoff_secs",
        "max_request_attempts",
        "_rockset_client",
        "online_config",
        "rs",
        "collection_name",
        "dedup_dict",
        "entity_key",
        "features",
        "timestamp",
        "created_ts",
        "serialized_key",
        "dedup_dict",
        "serialized_key",
        "dedup_dict",
        "serialized_key",
        "request_batch",
        "entity_key",
        "features",
        "timestamp",
        "created_ts",
        "k",
        "resp",
        "online_config",
        "rs",
        "collection_name",
        "feature_list",
        "feature_list",
        "entity_serialized_key_list",
        "entity_query_str",
        "query_str",
        "feature_set",
        "result_map",
        "result",
        "val",
        "result",
        "k",
        "result_map",
        "results_list",
        "online_config",
        "rs",
        "created_collections",
        "collection_name",
        "online_config",
        "rs",
        "_api_key",
        "_host",
        "_rockset_client",
        "project_val",
        "table_name",
        "body_dict",
        "resource_path",
        "request",
        "headers",
        "headers",
        "headers",
        "t_start",
        "delay",
        "resp",
        "t_start",
        "resp",
        "delay",
        "resp",
        "error_type",
        "default_backoff",
        "backoff"
    ],
    "comments": [
        "Copyright 2022 The Feast Authors",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "https://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "We need to deduplicate on entity_id and we will save the latest timestamp version.",
        "If the entity already existings in the dictionary ignore the entry if it has a lower timestamp.",
        "Rockset python client currently does not handle datetime correctly and will convert",
        "to string instead of native Rockset DATETIME. This will be fixed, but until then we",
        "use isoformat.",
        "Rockset client currently does not support bytes type.",
        "TODO: Implement async batching with retries.",
        "We want to skip deserializing values that are not feature values like bookeeping values.",
        "TODO: Remove bytes <-> string parsing once client supports bytes.",
        "If not found, we add a gap to let the client know.",
        "Table already exists nothing to do. We should still make sure it is ready though.",
        "Now wait for all collections to be READY.",
        "We will wait until the provided timeout for all collections to become READY.",
        "Full jitter, exponential backoff."
    ],
    "docstrings": [
        "\"\"\"Online store config for Rockset store\"\"\"",
        "\"\"\"Online store type selector\"\"\"",
        "\"\"\"Api Key to be used for Rockset Account. If not set the env var ROCKSET_APIKEY will be used.\"\"\"",
        "\"\"\"The Host Url for Rockset requests. If not set the env var ROCKSET_APISERVER will be used.\"\"\"",
        "\"\"\"Batch size of records that will be turned per page when paginating a batched read\"\"\"",
        "\"\"\"The amount of time, in seconds, we will wait for the collection to become visible to the API\"\"\"",
        "\"\"\"The amount of time, in seconds, we will wait for the collection to enter READY state\"\"\"",
        "\"\"\"Whether to wait for all writes to be flushed from log and queryable. If False, documents that are written may not be seen immediately in subsequent reads\"\"\"",
        "\"\"\"The amount of time we will wait, in seconds, for the write fence to be passed\"\"\"",
        "\"\"\"Initial backoff, in seconds, we will wait between requests when polling for a response\"\"\"",
        "\"\"\"Initial backoff, in seconds, we will wait between requests when polling for a response\"\"\"",
        "\"\"\"The max amount of times we will retry a failed request\"\"\"",
        "\"\"\"\n    Rockset implementation of the online store interface.\n\n    Attributes:\n        _rockset_client: Rockset openapi client.\n    \"\"\"",
        "\"\"\"\n        Write a batch of feature rows to online Rockset store.\n\n        Args:\n            config: The RepoConfig for the current FeatureStore.\n            table: Feast FeatureView.\n            data: a list of quadruplets containing Feature data. Each quadruplet contains an Entity Key,\n            a dict containing feature values, an event timestamp for the row, and\n            the created timestamp for the row if it exists.\n            progress: Optional function to be called once every mini-batch of rows is written to\n            the online store. Can be used to display progress.\n        \"\"\"",
        "\"\"\"\n        Retrieve feature values from the online Rockset store.\n\n        Args:\n            config: The RepoConfig for the current FeatureStore.\n            table: Feast FeatureView.\n            entity_keys: a list of entity keys that should be read from the FeatureStore.\n        \"\"\"",
        "\"\"\"\n        Update tables from the Rockset Online Store.\n\n        Args:\n            config: The RepoConfig for the current FeatureStore.\n            tables_to_delete: Tables to delete from the Rockset Online Store.\n            tables_to_keep: Tables to keep in the Rockset Online Store.\n        \"\"\"",
        "\"\"\"\n        Delete all collections from the Rockset Online Store.\n\n        Args:\n            config: The RepoConfig for the current FeatureStore.\n            tables: Tables to delete from the feature repo.\n        \"\"\"",
        "\"\"\"\n        Fetches the RocksetClient to be used for all requests for this online store based on the api\n        configuration in the provided config. If no configuration provided local ENV vars will be used.\n\n        Args:\n            onlineConfig: The RocksetOnlineStoreConfig associated with this online store.\n        \"\"\"",
        "\"\"\"\n        Deletes the collection  whose name was provided\n\n        Args:\n            rs: The RocksetClient to be used for the deletion.\n            collection_name: The name of the collection to be deleted.\n        \"\"\"",
        "\"\"\"\n        Returns the collection name based on the provided config and FeatureView.\n\n        Args:\n            config: RepoConfig for the online store.\n            feature_view: FeatureView that is backed by the returned collection name.\n\n        Returns:\n            The collection name as a string.\n        \"\"\"",
        "\"\"\"\n        Parse a throw RocksetException. Will return a string representing the type of error that was thrown.\n\n        Args:\n            e: The RockException that is being parsed.\n\n        Returns:\n            Error type parsed as a string.\n        \"\"\"",
        "\"\"\"\n        Waits until 'last_offset' is flushed and values are ready to be read. If wait lasts longer than the timeout specified in config\n        a timeout exception will be throw.\n\n        Args:\n            rs: Rockset client that will be used to make all requests.\n            collection_name: Collection associated with the offsets we are waiting for.\n            last_offset: The actual offsets we are waiting to be flushed.\n            online_config: The config that will be used to determine timeouts and backout configurations.\n        \"\"\"",
        "\"\"\"\n        Waits until all collections provided have entered READY state and can accept new documents. If wait\n        lasts longer than timeout a TimeoutError exception will be thrown.\n\n        Args:\n            rs: Rockset client that will be used to make all requests.\n            collection_names: All collections that we will wait for.\n            timeout: The max amount of time we will wait for the collections to become READY.\n        \"\"\"",
        "\"\"\"\n        Sleep for the needed amount of time based on the number of request attempts.\n\n        Args:\n            backoff: The amount of time we will sleep for\n            max_backoff: The max amount of time we should ever backoff for.\n            rate_limited: Whether this method is being called as part of a rate limited request.\n        \"\"\""
    ],
    "functions": [
        "online_write_batch",
        "online_read",
        "update",
        "teardown",
        "get_rockset_client",
        "delete_collection",
        "get_collection_name",
        "parse_request_error_type",
        "wait_for_fence",
        "wait_for_ready_collections",
        "backoff_sleep"
    ],
    "classes": [
        "RocksetOnlineStoreConfig",
        "RocksetOnlineStore"
    ]
}