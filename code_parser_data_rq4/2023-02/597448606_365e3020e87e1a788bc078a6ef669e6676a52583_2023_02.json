{
    "identifiers": [
        "__version__",
        "pathlib",
        "Path",
        "typing",
        "csv",
        "logging",
        "sqlite3",
        "unicodedata",
        "unidecode",
        "unidecode",
        "unicode2ascii",
        "logging",
        "debug",
        "unicode2ascii",
        "unicode2ascii",
        "logging",
        "debug",
        "unicodedata",
        "normalize",
        "join",
        "c",
        "c",
        "c",
        "isalpha",
        "c",
        "isdigit",
        "c",
        "isspace",
        "source_path",
        "Optional",
        "Union",
        "Path",
        "sqlite3",
        "connect",
        "isinstance",
        "source_path",
        "Path",
        "source_path",
        "source_path",
        "is_file",
        "_add_table",
        "source_path",
        "filepath",
        "Path",
        "_read_tabular",
        "filepath",
        "unicode2ascii",
        "filepath",
        "stem",
        "format",
        "table",
        "tablename",
        "columns",
        "join",
        "format",
        "key",
        "key",
        "datatype",
        "datatype",
        "key",
        "datatype",
        "datatypes",
        "items",
        "logging",
        "debug",
        "command",
        "connection",
        "execute",
        "command",
        "tables",
        "filepath",
        "tablename",
        "join",
        "key",
        "key",
        "datatypes",
        "keys",
        "logging",
        "debug",
        "command",
        "connection",
        "executemany",
        "command",
        "tabledata",
        "filename",
        "Path",
        "Tuple",
        "Dict",
        "open",
        "filename",
        "encoding",
        "f",
        "csv",
        "Sniffer",
        "sniff",
        "join",
        "f",
        "readlines",
        "f",
        "seek",
        "row",
        "row",
        "csv",
        "DictReader",
        "f",
        "dialect",
        "dialect",
        "data",
        "keys",
        "key",
        "key",
        "keys",
        "row",
        "data",
        "key",
        "value",
        "row",
        "items",
        "values",
        "key",
        "append",
        "value",
        "key",
        "keys",
        "value",
        "value",
        "values",
        "key",
        "value",
        "value",
        "values",
        "key",
        "row",
        "data",
        "key",
        "datatype",
        "key_map",
        "items",
        "datatype",
        "row",
        "key",
        "datatype",
        "row",
        "key",
        "key",
        "key_map",
        "get",
        "key",
        "key",
        "keys",
        "data",
        "datatypes",
        "data",
        "Union",
        "all",
        "isinstance",
        "row",
        "row",
        "data",
        "data",
        "keys",
        "max",
        "len",
        "row",
        "get",
        "col",
        "row",
        "data",
        "col",
        "header",
        "join",
        "col",
        "ljust",
        "width",
        "col",
        "width",
        "header",
        "column_widths",
        "join",
        "width",
        "width",
        "column_widths",
        "header_row",
        "separator_row",
        "row",
        "data",
        "row",
        "values",
        "join",
        "val",
        "ljust",
        "width",
        "val",
        "width",
        "values",
        "column_widths",
        "row",
        "max",
        "len",
        "row",
        "col",
        "row",
        "data",
        "col",
        "len",
        "data",
        "row",
        "data",
        "join",
        "val",
        "ljust",
        "width",
        "val",
        "width",
        "row",
        "column_widths",
        "row",
        "sys",
        "len",
        "sys",
        "argv",
        "Database",
        "sys",
        "argv",
        "input",
        "command",
        "print_table",
        "db",
        "connection",
        "execute",
        "command",
        "fetchall"
    ],
    "literals": [
        "\"Tiago Tresoldi\"",
        "\"tiago.tresoldi@lingfil.uu.se\"",
        "\"0.1.0\"",
        "f\"Tresoldi, Tiago (2022). {__name__}.py. Version {__version__}.\"",
        "\"The `unidecode` library is not available, attempting to load `unicode2ascii`.\"",
        "\"The `unicode2ascii` function is not available, using a simple fallback.\"",
        "\"NFKD\"",
        "\"\"",
        "\":memory:\"",
        "\"CREATE TABLE {table} ({columns})\"",
        "\", \"",
        "\"{key} {datatype}\"",
        "\"INSERT INTO %s VALUES (%s)\"",
        "\", \"",
        "f\":{key}\"",
        "\"utf-8\"",
        "\"\\n\"",
        "\"INTEGER\"",
        "\"REAL\"",
        "\"INTEGER\"",
        "\"REAL\"",
        "\"TEXT\"",
        "\"\"",
        "\" | \"",
        "\"-+-\"",
        "\"-\"",
        "\" | \"",
        "\" | \"",
        "\"__main__\"",
        "\"Usage: python3 database.py <input>\"",
        "\"Enter a query: \"",
        "\"quit\""
    ],
    "variables": [
        "__author__",
        "__email__",
        "__version__",
        "__citation__",
        "tables",
        "connection",
        "source_path",
        "tabledata",
        "datatypes",
        "tablename",
        "command",
        "tablename",
        "command",
        "dialect",
        "data",
        "keys",
        "values",
        "key_map",
        "values",
        "key_map",
        "key",
        "values",
        "key_map",
        "key",
        "row",
        "key",
        "row",
        "key",
        "datatypes",
        "header",
        "column_widths",
        "header_row",
        "separator_row",
        "values",
        "row",
        "column_widths",
        "row",
        "db",
        "command"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "Define metadata for the project",
        "Import Python standard libraries",
        "Define an implementation for the `unicode2ascii` function: first try the `unidecode`",
        "library, then a local copy of the `unicode2ascii` simplepy function, and finally",
        "a simple function that only removes non-alphanumeric characters.",
        "Import the `unidecode` library if available; if not, define a much",
        "simpler function to replace it",
        "Decompose the string into its base and combining characters,",
        "so that there are higher changes of obtaining ASCII ones",
        "Initialize the internal variables",
        "map table names to filenames",
        "Initialize the in-memory sqlite3 database",
        "Make sure we have a `Path` object",
        "If the input is a directory, read all files in it, each one",
        "being a table; otherwise, read the file as a single table.",
        "The table name comes from the filename, without the extension.",
        "Obtain data",
        "Obtain an sql table name",
        "TODO: check for duplicates; add slug",
        "Create the table",
        "Add the data",
        "TODO: move to inside the class?",
        "TODO: accept datatype specifications",
        "TODO: work with sigils, perhaps not by default?",
        "TODO: consider \"standard\" column names such latitute, longitude, etc.?",
        "TODO: support for booleans, dates, and times?",
        "TODO: sigils, type characters: $ for string, % for integer, # for float, ! for boolean, @ for date, & for time",
        "Open the file and use the sniffer to detect the dialect",
        "Read the contents as a list of dictionaries",
        "Obtain a list of all keys and iterate over them to check which",
        "ones can be converted to `int` or `float`; the check is conducted",
        "by simply testing the conversion for the values expressed in all",
        "rows",
        "TODO: consider and treat empty values and NAs",
        "TODO: add support for used-defined, sigils, etc.",
        "Check if all values can be converted to `int`",
        "Check if all values can be converted to `float`",
        "Iterate over all rows and convert the values of the columns",
        "that were detected as numeric (the key is either in `int_keys`",
        "or `float_keys`)",
        "Build a dictionary of keys and datatypes, defaulting to TEXT",
        "TODO: get as a string, or allow to redirect to a file/log/etc",
        "Find the longest string in each column across all rows",
        "Print header",
        "Print rows",
        "Find the longest string in each column across all rows",
        "Print rows"
    ],
    "docstrings": [
        "\"\"\"\nAllows to interface with a tabular database in an SQL-like manner.\n\nThis module is intended as a lightweight alternative to SQL interfaces such\nas SQLAlchemy. It is not intended to be a full-featured database interface,\nbut rather a simple way to access tabular data in a SQL-like manner,\nperforming basic operations such as filtering, sorting, and aggregating.\nIt is also supposed to rely as much as possible only on standard Python\nlibraries, so that it can be used in a wide range of contexts.\n\nThe entire project consists, by design, of a single file, which is\nintended to be copied and pasted into the project that needs to use it. There\nare no dependencies, even though some libraries are used if available. The\nproject can work on both single tabular files and directories containing\nmultiple tabular files, which are then treated as separate tables. No\nadditional annotation or metadata is required, but these are used if they\nare present.\n\"\"\"",
        "\"\"\"\n            Build a string with only ASCII characters.\n\n            This function is a much simpler version of the `unidecode` library,\n            which is used to remove accents from characters. It is used only\n            when neither the `unidecode` library or the `unicode2ascii` module\n            are available. It is particularly *not* recommended to use this\n            function for non-Latin alphabets.\n            \"\"\"",
        "\"\"\"\n        Initialize a database object.\n\n        A database can be initialized as an empty object, or by reading\n        either a single tabular file or a directory containing multiple\n        tabular files.\n\n        Parameters\n        ----------\n        source_path : Path or str, optional\n            The path to the file or directory containing the data to be\n            added to the database. If not provided, the database is\n            initialized as an empty object.\n        \"\"\"",
        "\"\"\"\n        Add a table to the database.\n\n        Parameters\n        ----------\n        filepath : Path\n            The path to the file containing the data to be added.\n        \"\"\"",
        "\"\"\"\n        Read the contents of a tabular file.\n\n        Contents of the file are returned as a list of dictionaries.\n        The encoding of the file is assumed to be UTF-8, and the\n        dialect is automatically detected via the standard `csv`\n        library.\n\n        Parameters\n        ----------\n        filename : Path\n            The path to the file to be read.\n\n        Returns\n        -------\n        data : List[dict]\n            A list of dictionaries, where each dictionary represents\n            a row in the file, and the keys are the column names.\n        datatypes : Dict[str, str]\n            A dictionary mapping the column names to their SQL datatypes.\n        \"\"\"",
        "\"\"\"\n    Print a table of data.\n\n    This function prints a table of data, composed of a list of\n    dictionaries, or a list of lists. The table is printed to the standard\n    output. It is similar to behavior of libraries such as `pandas`,\n    `tabulate`, and `prettytable`, but it is implemented from scratch\n    and does not require any external dependencies.\n\n    Parameters\n    ----------\n    data : Union[List[dict], List[List[str]]]\n        The data to be printed. If the data is a list of dictionaries,\n        the keys of the dictionaries are used as column names.\n    \"\"\""
    ],
    "functions": [
        "unicode2ascii",
        "_add_table",
        "_read_tabular",
        "print_table"
    ],
    "classes": [
        "Database"
    ]
}