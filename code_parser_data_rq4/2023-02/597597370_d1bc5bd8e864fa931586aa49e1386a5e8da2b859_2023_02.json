{
    "identifiers": [
        "theBoard",
        "boardMap",
        "theBoard",
        "initBoard",
        "boardMap",
        "initBoardMap",
        "tempBoard",
        "i",
        "i",
        "tempBoard",
        "length",
        "i",
        "j",
        "j",
        "tempBoard",
        "i",
        "length",
        "j",
        "tempBoard",
        "i",
        "j",
        "tempBoard",
        "tempBoardMap",
        "i",
        "i",
        "tempBoardMap",
        "length",
        "i",
        "tempBoardMap",
        "i",
        "tempBoardMap",
        "length",
        "tempBoardMap",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "theBoard",
        "length",
        "i",
        "j",
        "j",
        "theBoard",
        "i",
        "length",
        "j",
        "theBoard",
        "i",
        "j",
        "player",
        "theBoard",
        "i",
        "j",
        "player",
        "theBoard",
        "i",
        "j",
        "player"
    ],
    "literals": [
        "\" \"",
        "\". \"",
        "\"X \"",
        "\"O \""
    ],
    "variables": [],
    "comments": [
        "Save the board as a 2D array of Piece objects",
        "Save the depth of each column of the board for every given point in time",
        "Hard code 6x7 board for first release",
        "Create an unclaimed piece at each board position",
        "Initially hard coded for first release",
        "Hard code the initial depth of each column to its lowest valid position",
        "Print the headers for each column",
        "Debugging",
        "System.out.print(\" \" + i + \"  \");",
        "Print the 6x7 board showing the state of each piece",
        "If space is empty, print a point",
        "Debugging",
        "System.out.print(\" .,\" + theBoard[i][j].getMaxNumConnected());",
        "If Player 1 placed a piece in a given spot, print an X",
        "Debugging",
        "System.out.print(\" X,\" + theBoard[i][j].getMaxNumConnected());",
        "If Player 2 placed a piece in a given spot, print an O",
        "Debugging",
        "System.out.print(\" O,\" + theBoard[i][j].getMaxNumConnected());"
    ],
    "docstrings": [
        "* Initialize the board by creating the Piece matrix and the boardMap",
        "* @return a Piece[][] representing the matrix of pieces\n     * Board is hard coded in first release for a standard 6x7 board",
        "* @return an int[] representing the depth of each column on the board at a given point in time\n     * Board map is hard coded in first release for a 6x7 board",
        "* Let the board object print itself with the current state of the game"
    ],
    "functions": [
        "Board",
        "initBoard",
        "initBoardMap",
        "printBoard"
    ],
    "classes": [
        "Board"
    ]
}