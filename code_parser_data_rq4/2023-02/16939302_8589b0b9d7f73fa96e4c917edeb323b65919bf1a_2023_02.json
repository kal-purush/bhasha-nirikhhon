{
    "identifiers": [
        "Linq",
        "Expressions",
        "x",
        "y",
        "x",
        "y",
        "WriteLine",
        "op1",
        "op1",
        "x",
        "y",
        "x",
        "y",
        "WriteLine",
        "op1",
        "Func",
        "x",
        "y",
        "x",
        "y",
        "WriteLine",
        "f1",
        "x",
        "y",
        "x",
        "y",
        "WriteLine",
        "f2",
        "Add",
        "x",
        "y",
        "x",
        "y",
        "f2",
        "Add",
        "WriteLine",
        "f2",
        "WriteLine",
        "d1",
        "DynamicInvoke",
        "d1",
        "Method",
        "p",
        "mi",
        "GetParameters",
        "WriteLine",
        "p",
        "ParameterType",
        "p",
        "Name",
        "Func",
        "ConvertToStringReturner",
        "Delegate",
        "d",
        "d",
        "Method",
        "mi",
        "GetParameters",
        "Select",
        "Expression",
        "Constant",
        "Random",
        "Shared",
        "Next",
        "ToArray",
        "mi",
        "IsStatic",
        "Expression",
        "Constant",
        "d",
        "Target",
        "Expression",
        "Call",
        "instance",
        "d",
        "Method",
        "randomParams",
        "Expression",
        "Call",
        "dExpr",
        "GetMethod",
        "nameof",
        "ToString",
        "Expression",
        "Lambda",
        "Func",
        "toStringExpr",
        "expression",
        "Compile",
        "f3",
        "ConvertToStringReturner",
        "Add",
        "WriteLine",
        "f3",
        "f3",
        "ConvertToStringReturner",
        "x",
        "y",
        "x",
        "y",
        "WriteLine",
        "f3",
        "MathOp",
        "x",
        "y"
    ],
    "literals": [],
    "variables": [
        "MathOp",
        "op1",
        "f1",
        "f2",
        "Delegate",
        "d1",
        "Add",
        "mi",
        "mi",
        "randomParams",
        "instance",
        "dExpr",
        "toStringExpr",
        "expression",
        "f3",
        "f3"
    ],
    "comments": [
        "Define an anonymous delegate and invoke it. The MathOp delegate is a delegate type that",
        "represents a method that takes two integers as input and returns an integer.",
        "The following code defines an instance of the MathOp delegate and assigns an anonymous",
        "function to it. The function takes two integers x and y as input and returns their sum.",
        "The function is then invoked by calling the op1 delegate instance and passing 10 and 20 as arguments.",
        "Both delegate and => are used to define anonymous functions in C#, but they have different syntax.",
        "The code above uses the delegate keyword to define an anonymous delegate. The code below uses",
        "the lambda operator => to define a lambda expression. Both of these constructs result in the",
        "same behavior, but the syntax of the lambda expression is more concise and widely used in modern C#.",
        "The Func delegate type is a generic delegate that can be used to represent any method that",
        "takes one or more input parameters and returns a value. The number and types of the input",
        "parameters are specified as type arguments to the Func delegate. In this case, Func<int, int, int>",
        "specifies that the delegate type takes two int parameters and returns an int value.",
        "The following line of code is possible because the natural type of a lambda function",
        "is Func<T>. This features is available in C# >= 10. Read more at",
        "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions#natural-type-of-a-lambda-expression",
        "Let's switch from Lambda expression to static private method...",
        "In C#, the Delegate class is the base class for all delegate types. A delegate is",
        "a type that represents a reference to a method. Beside other features, Delegate",
        "offers easy access to the delegate's method info (reflection).",
        "This function takes in a Delegate object d as input and returns a Func<string>",
        "delegate that represents a function that returns a string representation of the",
        "result of calling the method represented by d with random parameters.",
        "Get method info from delegate",
        "Inspect method parameters. Here we assume, that all parameters are of type int.",
        "We fill each parameter with a random value. In ASP.NET Core Minimal API,",
        "the runtime would fill parameters with path parameters, query parameters, etc.",
        "Call the delegate d",
        "Convert the result of delegate d into string by calling ToString",
        "Create a lambda expression and compile the code",
        "Try calling ConvertToStringReturner with a function",
        "Try calling ConvertToStringReturner with a lambda expression"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}