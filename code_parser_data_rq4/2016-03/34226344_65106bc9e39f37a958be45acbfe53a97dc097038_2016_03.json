{
    "identifiers": [
        "Data",
        "Web",
        "Linq",
        "Collections",
        "Web",
        "Services",
        "Web",
        "Services",
        "Protocols",
        "Web",
        "Security",
        "JocysCom",
        "WebSites",
        "Engine",
        "Text",
        "RegularExpressions",
        "Collections",
        "Generic",
        "Collections",
        "ObjectModel",
        "Collections",
        "Specialized",
        "x360ce",
        "Engine",
        "JocysCom",
        "Web",
        "Security",
        "WebService",
        "Namespace",
        "Name",
        "WebServiceBinding",
        "ConformsTo",
        "WsiProfiles",
        "BasicProfile1_1",
        "Web",
        "Script",
        "Services",
        "ScriptService",
        "Web",
        "Services",
        "WebService",
        "WebMethod",
        "EnableSession",
        "Description",
        "Data",
        "User",
        "ValidationField",
        "firstName",
        "lastName",
        "email",
        "username",
        "password",
        "birthday",
        "gender",
        "terms",
        "news",
        "Data",
        "User",
        "ValidateMemberRegistration",
        "firstName",
        "lastName",
        "email",
        "username",
        "password",
        "birthday",
        "gender",
        "terms",
        "news",
        "WebMethod",
        "EnableSession",
        "Description",
        "domain",
        "username",
        "password",
        "KeyValueList",
        "results",
        "WebMethod",
        "EnableSession",
        "Description",
        "database",
        "username",
        "password",
        "Empty",
        "KeyValueList",
        "results",
        "WebMethod",
        "EnableSession",
        "Description",
        "Web",
        "Security",
        "FormsAuthentication",
        "SignOut",
        "Web",
        "Security",
        "FormsAuthentication",
        "RedirectToLoginPage",
        "KeyValueList",
        "results",
        "Add",
        "results",
        "WebMethod",
        "EnableSession",
        "Description",
        "KeyValueList",
        "Empty",
        "Web",
        "HttpContext",
        "Current",
        "User",
        "Web",
        "HttpContext",
        "Current",
        "User",
        "Identity",
        "IsAuthenticated",
        "currentUser",
        "Web",
        "HttpContext",
        "Current",
        "User",
        "Identity",
        "Name",
        "results",
        "Add",
        "FormsAuthentication",
        "FormsCookieName",
        "Web",
        "HttpContext",
        "Current",
        "Request",
        "Cookies",
        "FormsAuthentication",
        "FormsCookieName",
        "cookie",
        "Value",
        "Length",
        "FormsAuthentication",
        "Decrypt",
        "cookie",
        "Value",
        "Empty",
        "i",
        "cookie",
        "Values",
        "AllKeys",
        "Length",
        "i",
        "v",
        "cookie",
        "Values",
        "AllKeys",
        "i",
        "results",
        "Add",
        "cookie",
        "Value",
        "ToString",
        "results",
        "Add",
        "Threading",
        "CurrentPrincipal",
        "Identity",
        "Name",
        "results",
        "Add",
        "currentUser",
        "results",
        "WebMethod",
        "EnableSession",
        "Description",
        "Web",
        "Security",
        "FormsAuthentication",
        "SignOut",
        "Session",
        "Abandon",
        "KeyValueList",
        "results",
        "Add",
        "results"
    ],
    "literals": [
        "\"JocysCom.WebSites.Website.WebServices\"",
        "\"ServiceInfo\"",
        "\"Test new user registration info if it valid for registration.\"",
        "\"Authenticate user.\"",
        "\"Authenticate user.\"",
        "\"Restore login information if possible.\"",
        "\"Status\"",
        "\"Check login status.\"",
        "\"FormsCookieName\"",
        "\", \"",
        "\"values\"",
        "\"IdentityName\"",
        "\"CurrentUser\"",
        "\"Logout and abandon session.\"",
        "\"Status\""
    ],
    "variables": [
        "results",
        "errorMessage",
        "results",
        "results",
        "results",
        "currentUser",
        "HttpCookie",
        "cookie",
        "ticket",
        "v",
        "i",
        "results"
    ],
    "comments": [
        "Summary description for ServerInfo",
        "</summary>",
        "Uncomment the following line if using designed components",
        "InitializeComponent();",
        "[WebMethod(EnableSession = true, Description = \"Get message of the day.\")]",
        "public string GetMessageOfTheDay()",
        "{",
        "string results = string.Empty;",
        "if (AppSettings.GetAppValue(AppSettings.Keys.ModEnabled) == \"True\")",
        "{",
        "results = AppSettings.GetAppValue(AppSettings.Keys.ModText);",
        "}",
        "return results;",
        "}",
        "Get list of available domains.",
        "</summary>",
        "<returns>Data set with domain names.</returns>",
        "[WebMethod(EnableSession = true, Description = \"Get list of available domains.\")]",
        "[WebGet(ResponseFormat = WebMessageFormat.Json)]",
        "public KeyValueList GetDomainsList()",
        "{",
        "var results = new KeyValueList();",
        "var domains = new JocysCom.ClassLibrary.Network.DomainCollection();",
        "domains.Refresh();",
        "for (int i = 0; i < domains.Count; i++)",
        "{",
        "domains[i].DomainControllers.Refresh();",
        "//    myDomains[i].DialinServers.Refresh();",
        "//    myDomains[i].PrintServers.Refresh();",
        "//    myDomains[i].TerminalServers.Refresh();",
        "//    myDomains[i].TimeServers.Refresh();",
        "//    myDomains[i].Workstations.Refresh();",
        "//    myDomains[i].SQLServers.Refresh();",
        "// If domain controllers was found for domain then add to list.",
        "if (domains[i].DomainControllers.Count > 0)",
        "{",
        "results.Add(\"Domain\", domains[i].Name);",
        "}",
        "}",
        "return results;",
        "}",
        "[WebMethod(EnableSession = true, Description = \"Authenticate user.\")]",
        "public bool UserExists(string username)",
        "{",
        "var db = OurDomainsEntities.Current;",
        "Engine.Data.OurDomains.User user;",
        "user = db.Users.FirstOrDefault(x => x.UserName == username);",
        "return (user != null);",
        "}",
        "Test new user registration info if it valid for registration.",
        "</summary>",
        "<param name=\"field\">Validation parameters.</param>",
        "<returns>validation results</returns>",
        "string errorMessage = string.Empty;",
        "if (password.Length == 0) errorMessage = \"Please enter password\";",
        "if (username.Length == 0) errorMessage = \"Please enter user name\";",
        "if (domain.Length == 0) errorMessage = \"Please provide domain name.\";",
        "if (AppSettings.GetAppValue(AppSettings.Keys.AllowUsersToLogin) == \"False\") errorMessage = \"All logins was restricted by administrator.\";",
        "string authenticationType = AppContext.Current.Settings.AuthenticationType;",
        "if (authenticationType != \"Domain\") errorMessage = \"Use \" + authenticationType + \" authentiation\";",
        "if (String.IsNullOrEmpty(errorMessage))",
        "{",
        "DirectoryEntry directoryEntry;",
        "// Add Lightweight Directory Access Protocol prefix.",
        "string domainAddress = \"LDAP://\" + domain;",
        "directoryEntry = new DirectoryEntry(domainAddress, username, password, AuthenticationTypes.Secure);",
        "// If user is verified then it will welcome then...",
        "try",
        "{",
        "// Bind to the native AdsObject to force authentication.",
        "// This line will throw error: \"Logon failure: unknown user name or bad password.\"",
        "Object obj = directoryEntry.NativeObject;",
        "}",
        "catch (Exception exp)",
        "{",
        "errorMessage = exp.Message;",
        "}",
        "directoryEntry.Dispose();",
        "}",
        "if (String.IsNullOrEmpty(errorMessage))",
        "{",
        "// If we are here then it means that we authenticated thru domain.",
        "// Now lets check if employee exist inside aspnet_ tables and import new users if required.",
        "Engine.Security.Check.CheckToImportMissingUsers(username);",
        "errorMessage = Engine.Security.Authentication.SetCurrentUser(username);",
        "}",
        "if (String.IsNullOrEmpty(errorMessage))",
        "{",
        "SessionContext.Current.InitConfigOnValidationSuccess(username);",
        "results.Add(\"Status\", true);",
        "results.Add(\"Message\", \"Welcome to \" + domain + \"!\");",
        "}",
        "else",
        "{",
        "// We are here because error happened.",
        "results.Add(\"Status\", false);",
        "results.Add(\"Message\", errorMessage);",
        "}",
        "if (password.Length == 0) errorMessage = \"Please enter password\";",
        "if (username.Length == 0) errorMessage = \"Please enter user name\";",
        "if (database.Length == 0) errorMessage = \"Please provide domain name.\";",
        "if (!AppContext.Current.Settings.AllowUsersToLogin) errorMessage = \"All logins were restricted by administrator.\";",
        "string authenticationType = AppContext.Current.Settings.AuthenticationType;",
        "if (authenticationType != \"Database\") errorMessage = \"Use \" + authenticationType + \" authentiation\";",
        "if (errorMessage.Length == 0)",
        "{",
        "// Now lets check if employee exist inside aspnet_ tables and import new users if required.",
        "Engine.Security.Check.CheckToImportMissingUsers(username);",
        "// Here must be validation with password. You can add third party validation here;",
        "bool success = System.Web.Security.Membership.ValidateUser(username, password);",
        "if (!success) errorMessage = \"Validation failed. User name '\" + username + \"' was not found.\";",
        "}",
        "if (errorMessage.Length > 0)",
        "{",
        "results.Add(\"Status\", false);",
        "results.Add(\"Message\", errorMessage);",
        "}",
        "else",
        "{",
        "Engine.Security.Authentication.SetCurrentUser(username);",
        "SessionContext.Current.InitConfigOnValidationSuccess(username);",
        "results.Add(\"Status\", true);",
        "results.Add(\"Message\", \"Welcome to \" + database + \"!\");",
        "}",
        "If context user exist then...",
        "FormsAuthentication.GetAuthCookie();",
        "System.Web.HttpContext.Current.Response.Cookies;",
        "Abandon ASP Session first.",
        "JocysCom.WebSites.WebApp.ServerVariables.Exchanger exchanger;",
        "exchanger = new JocysCom.WebSites.WebApp.ServerVariables.Exchanger();",
        "exchanger.AbandonAspSession();",
        "Abandon ASPX Session.",
        "[WebMethod(EnableSession = true, Description = \"Supply aditional user information.\")]",
        "public KeyValueList SetClientInfo(string name, string value)",
        "{",
        "switch (name)",
        "{",
        "case \"ClientDate\":",
        "setClientDate(value);",
        "break;",
        "default:",
        "break;",
        "}",
        "var results = new KeyValueList();",
        "results.Add(\"Status\", true);",
        "return results;",
        "}",
        "private bool SetClientDate(string clientDate)",
        "{",
        "//=================================================",
        "// Set client time offset in minutes.",
        "//-------------------------------------------------",
        "System.Text.RegularExpressions.Regex regEx = new System.Text.RegularExpressions.Regex(\".*([ +-])([0-9][0-9]):([0-9][0-9])$\");",
        "System.Text.RegularExpressions.MatchCollection mc = regEx.Matches(clientDate);",
        "int offsetMin = 0;",
        "if (mc.Count > 0)",
        "{",
        "int p = int.Parse(regEx.Replace(mc[0].Value, \"$1\") + \"1\");",
        "int h = int.Parse(regEx.Replace(mc[0].Value, \"$2\"));",
        "int m = int.Parse(regEx.Replace(mc[0].Value, \"$3\"));",
        "offsetMin = p * (h * 60 + m);",
        "//Page.Controls.Add(new LiteralControl(clientDate + \" / \" + p + \" \" + h + \":\" + m + \"<br />\"));",
        "//Page.Controls.Add(new LiteralControl(offsetMin + \"<br />\"));",
        "}",
        "SessionContext.Current.ClientTimeOffset = offsetMin;",
        "//=================================================",
        "// Set Server time offset in minutes.",
        "//-------------------------------------------------",
        "DateTime serverTime = DateTime.Now;",
        "TimeZone localZone = TimeZone.CurrentTimeZone;",
        "SessionContext.Current.ServerTimeOffset = int.Parse(localZone.GetUtcOffset(serverTime).TotalMinutes.ToString());",
        "return true;",
        "}"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "ServerInfo",
        "ValidateUserRegistration",
        "KeyValueList",
        "LoginToDomain",
        "KeyValueList",
        "LoginToDatabase",
        "KeyValueList",
        "LoginRestore",
        "KeyValueList",
        "LoginCheck",
        "KeyValueList",
        "Logout"
    ],
    "classes": [
        "ServerInfo"
    ]
}