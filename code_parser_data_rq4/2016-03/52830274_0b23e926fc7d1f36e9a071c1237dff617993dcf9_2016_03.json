{
    "identifiers": [
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "$animate",
        "$element",
        "$scope",
        "$attrs",
        "getAttachId",
        "nextAttachId",
        "collection",
        "collection",
        "collection",
        "renderLater",
        "cachedCollection",
        "collection",
        "isAttrTruthy",
        "$scope",
        "$attrs",
        "isAttrTruthy",
        "$scope",
        "$attrs",
        "ctrl",
        "messageItem",
        "totalMessages",
        "messageItem",
        "messageFound",
        "forEach",
        "collection",
        "value",
        "key",
        "messageUsed",
        "truthy",
        "value",
        "messageCtrl",
        "key",
        "matchedKeys",
        "key",
        "matchedKeys",
        "key",
        "messageUsed",
        "messageCtrl",
        "messageUsed",
        "messageFound",
        "multiple",
        "unmatchedMessages",
        "messageCtrl",
        "messageItem",
        "messageItem",
        "forEach",
        "unmatchedMessages",
        "messageCtrl",
        "messageCtrl",
        "unmatchedMessages",
        "totalMessages",
        "$animate",
        "$element",
        "ACTIVE_CLASS",
        "INACTIVE_CLASS",
        "$animate",
        "$element",
        "INACTIVE_CLASS",
        "ACTIVE_CLASS",
        "$scope",
        "$attrs",
        "$attrs",
        "ctrl",
        "$element",
        "forEach",
        "messages",
        "item",
        "item",
        "renderLater",
        "renderLater",
        "$scope",
        "renderLater",
        "cachedCollection",
        "ctrl",
        "cachedCollection",
        "comment",
        "messageCtrl",
        "latestKey",
        "messages",
        "nextKey",
        "messageCtrl",
        "insertMessageNode",
        "$element",
        "comment",
        "nextKey",
        "comment",
        "nextKey",
        "latestKey",
        "ctrl",
        "comment",
        "comment",
        "comment",
        "removeMessageNode",
        "$element",
        "comment",
        "key",
        "messages",
        "key",
        "ctrl",
        "parent",
        "comment",
        "prevNode",
        "prevNode",
        "parent",
        "prevNode",
        "prevKey",
        "prevKey",
        "messages",
        "prevKey",
        "prevNode",
        "parentLookup",
        "prevNode",
        "parentLookup",
        "prevNode",
        "prevNode",
        "prevNode",
        "prevNode",
        "prevNode",
        "prevNode",
        "prevNode",
        "prevNode",
        "prevNode",
        "parentLookup",
        "prevNode",
        "parent",
        "comment",
        "key",
        "messages",
        "key",
        "ctrl",
        "ctrl",
        "messageNode",
        "findPreviousMessage",
        "parent",
        "comment",
        "match",
        "messageNode",
        "match",
        "match",
        "messageNode",
        "messageNode",
        "ctrl",
        "ctrl",
        "messageNode",
        "parent",
        "comment",
        "key",
        "messages",
        "key",
        "findPreviousMessage",
        "parent",
        "comment",
        "match",
        "match",
        "messageNode",
        "ctrl",
        "messageNode",
        "scope",
        "attr",
        "isString",
        "attr",
        "attr",
        "truthy",
        "scope",
        "attr",
        "val",
        "isString",
        "val",
        "val",
        "val",
        "$templateRequest",
        "$document",
        "$compile",
        "$scope",
        "element",
        "attrs",
        "attrs",
        "attrs",
        "$templateRequest",
        "src",
        "html",
        "$compile",
        "html",
        "$scope",
        "contents",
        "element",
        "contents",
        "$compile",
        "$compile",
        "src",
        "$document",
        "src",
        "jqLite",
        "comment",
        "element",
        "anchor",
        "element",
        "ngMessageDirectiveFactory",
        "ngMessageDirectiveFactory",
        "$animate",
        "scope",
        "element",
        "attrs",
        "ngMessagesCtrl",
        "$transclude",
        "element",
        "attrs",
        "attrs",
        "attrs",
        "attrs",
        "items",
        "records",
        "items",
        "isArray",
        "items",
        "items",
        "items",
        "ngMessagesCtrl",
        "dynamicExp",
        "assignRecords",
        "scope",
        "dynamicExp",
        "scope",
        "dynamicExp",
        "assignRecords",
        "assignRecords",
        "staticExp",
        "ngMessagesCtrl",
        "commentNode",
        "messageCtrl",
        "name",
        "contains",
        "records",
        "name",
        "currentElement",
        "$transclude",
        "scope",
        "elm",
        "$animate",
        "elm",
        "element",
        "currentElement",
        "elm",
        "currentElement",
        "ngMessagesCtrl",
        "currentElement",
        "currentElement",
        "currentElement",
        "$$attachId",
        "ngMessagesCtrl",
        "commentNode",
        "messageCtrl",
        "currentElement",
        "currentElement",
        "$animate",
        "elm",
        "collection",
        "key",
        "collection",
        "isArray",
        "collection",
        "collection",
        "key",
        "collection",
        "key"
    ],
    "literals": [
        "'use strict'",
        "'ngMessages'",
        "'ngMessages'",
        "'$animate'",
        "'ng-active'",
        "'ng-inactive'",
        "'ngMessages'",
        "'AE'",
        "'$element'",
        "'$scope'",
        "'$attrs'",
        "'for'",
        "'$destroy'",
        "'ngMessagesInclude'",
        "'$templateRequest'",
        "'$document'",
        "'$compile'",
        "'AE'",
        "'^^ngMessages'",
        "'ngMessagesInclude'",
        "' ngMessagesInclude: '",
        "' '",
        "'ngMessage'",
        "'ngMessageExp'",
        "'$animate'",
        "'AE'",
        "'element'",
        "'^^ngMessages'",
        "'$destroy'"
    ],
    "variables": [
        "isArray",
        "forEach",
        "isString",
        "jqLite",
        "ACTIVE_CLASS",
        "INACTIVE_CLASS",
        "ctrl",
        "latestKey",
        "nextAttachId",
        "messages",
        "renderLater",
        "cachedCollection",
        "multiple",
        "unmatchedMessages",
        "matchedKeys",
        "messageItem",
        "messageFound",
        "totalMessages",
        "messageCtrl",
        "messageUsed",
        "nextKey",
        "key",
        "prevNode",
        "comment",
        "parentLookup",
        "prevKey",
        "messageNode",
        "match",
        "messageNode",
        "match",
        "src",
        "comment",
        "anchor",
        "commentNode",
        "records",
        "staticExp",
        "dynamicExp",
        "assignRecords",
        "currentElement",
        "messageCtrl",
        "$$attachId",
        "elm",
        "currentElement"
    ],
    "comments": [
        "jshint ignore:start",
        "this code is in the core, but not in angular-messages.js",
        "jshint ignore:end",
        "this is true if the attribute is empty or if the attribute value is truthy",
        "we use != instead of !== to allow for both undefined and null values",
        "this is to prevent the same error name from showing up twice",
        "unless we want to display multiple messages then we should",
        "set a flag here to avoid displaying the next message in the list",
        "If the element is destroyed, proactively destroy all the currently visible messages",
        "dive deeper into the DOM and examine its children for any ngMessage",
        "comments that may be in an element that appears deeper in the list",
        "empty attribute",
        "we only require this for validation sake",
        "the anchor is placed for debugging purposes",
        "we don't want to pollute the DOM anymore by keeping an empty directive element",
        "must run before ngBind, otherwise the text is set on the comment",
        "Each time we attach this node to a message we get a new id that we can match",
        "when we are destroying the node later.",
        "in the event that the element or a parent element is destroyed",
        "by another structural directive then it's time",
        "to deregister the message from the controller"
    ],
    "docstrings": [
        "* @license AngularJS v1.5.3\n * (c) 2010-2016 Google, Inc. http://angularjs.org\n * License: MIT",
        "* @ngdoc module\n * @name ngMessages\n * @description\n *\n * The `ngMessages` module provides enhanced support for displaying messages within templates\n * (typically within forms or when rendering message objects that return key/value data).\n * Instead of relying on JavaScript code and/or complex ng-if statements within your form template to\n * show and hide error messages specific to the state of an input field, the `ngMessages` and\n * `ngMessage` directives are designed to handle the complexity, inheritance and priority\n * sequencing based on the order of how the messages are defined in the template.\n *\n * Currently, the ngMessages module only contains the code for the `ngMessages`, `ngMessagesInclude`\n * `ngMessage` and `ngMessageExp` directives.\n *\n * # Usage\n * The `ngMessages` directive allows keys in a key/value collection to be associated with a child element\n * (or 'message') that will show or hide based on the truthiness of that key's value in the collection. A common use\n * case for `ngMessages` is to display error messages for inputs using the `$error` object exposed by the\n * {@link ngModel ngModel} directive.\n *\n * The child elements of the `ngMessages` directive are matched to the collection keys by a `ngMessage` or\n * `ngMessageExp` directive. The value of these attributes must match a key in the collection that is provided by\n * the `ngMessages` directive.\n *\n * Consider the following example, which illustrates a typical use case of `ngMessages`. Within the form `myForm` we\n * have a text input named `myField` which is bound to the scope variable `field` using the {@link ngModel ngModel}\n * directive.\n *\n * The `myField` field is a required input of type `email` with a maximum length of 15 characters.\n *\n * ```html\n * <form name=\"myForm\">\n *   <label>\n *     Enter text:\n *     <input type=\"email\" ng-model=\"field\" name=\"myField\" required maxlength=\"15\" />\n *   </label>\n *   <div ng-messages=\"myForm.myField.$error\" role=\"alert\">\n *     <div ng-message=\"required\">Please enter a value for this field.</div>\n *     <div ng-message=\"email\">This field must be a valid email address.</div>\n *     <div ng-message=\"maxlength\">This field can be at most 15 characters long.</div>\n *   </div>\n * </form>\n * ```\n *\n * In order to show error messages corresponding to `myField` we first create an element with an `ngMessages` attribute\n * set to the `$error` object owned by the `myField` input in our `myForm` form.\n *\n * Within this element we then create separate elements for each of the possible errors that `myField` could have.\n * The `ngMessage` attribute is used to declare which element(s) will appear for which error - for example,\n * setting `ng-message=\"required\"` specifies that this particular element should be displayed when there\n * is no value present for the required field `myField` (because the key `required` will be `true` in the object\n * `myForm.myField.$error`).\n *\n * ### Message order\n *\n * By default, `ngMessages` will only display one message for a particular key/value collection at any time. If more\n * than one message (or error) key is currently true, then which message is shown is determined by the order of messages\n * in the HTML template code (messages declared first are prioritised). This mechanism means the developer does not have\n * to prioritise messages using custom JavaScript code.\n *\n * Given the following error object for our example (which informs us that the field `myField` currently has both the\n * `required` and `email` errors):\n *\n * ```javascript\n * <!-- keep in mind that ngModel automatically sets these error flags -->\n * myField.$error = { required : true, email: true, maxlength: false };\n * ```\n * The `required` message will be displayed to the user since it appears before the `email` message in the DOM.\n * Once the user types a single character, the `required` message will disappear (since the field now has a value)\n * but the `email` message will be visible because it is still applicable.\n *\n * ### Displaying multiple messages at the same time\n *\n * While `ngMessages` will by default only display one error element at a time, the `ng-messages-multiple` attribute can\n * be applied to the `ngMessages` container element to cause it to display all applicable error messages at once:\n *\n * ```html\n * <!-- attribute-style usage -->\n * <div ng-messages=\"myForm.myField.$error\" ng-messages-multiple>...</div>\n *\n * <!-- element-style usage -->\n * <ng-messages for=\"myForm.myField.$error\" multiple>...</ng-messages>\n * ```\n *\n * ## Reusing and Overriding Messages\n * In addition to prioritization, ngMessages also allows for including messages from a remote or an inline\n * template. This allows for generic collection of messages to be reused across multiple parts of an\n * application.\n *\n * ```html\n * <script type=\"text/ng-template\" id=\"error-messages\">\n *   <div ng-message=\"required\">This field is required</div>\n *   <div ng-message=\"minlength\">This field is too short</div>\n * </script>\n *\n * <div ng-messages=\"myForm.myField.$error\" role=\"alert\">\n *   <div ng-messages-include=\"error-messages\"></div>\n * </div>\n * ```\n *\n * However, including generic messages may not be useful enough to match all input fields, therefore,\n * `ngMessages` provides the ability to override messages defined in the remote template by redefining\n * them within the directive container.\n *\n * ```html\n * <!-- a generic template of error messages known as \"my-custom-messages\" -->\n * <script type=\"text/ng-template\" id=\"my-custom-messages\">\n *   <div ng-message=\"required\">This field is required</div>\n *   <div ng-message=\"minlength\">This field is too short</div>\n * </script>\n *\n * <form name=\"myForm\">\n *   <label>\n *     Email address\n *     <input type=\"email\"\n *            id=\"email\"\n *            name=\"myEmail\"\n *            ng-model=\"email\"\n *            minlength=\"5\"\n *            required />\n *   </label>\n *   <!-- any ng-message elements that appear BEFORE the ng-messages-include will\n *        override the messages present in the ng-messages-include template -->\n *   <div ng-messages=\"myForm.myEmail.$error\" role=\"alert\">\n *     <!-- this required message has overridden the template message -->\n *     <div ng-message=\"required\">You did not enter your email address</div>\n *\n *     <!-- this is a brand new message and will appear last in the prioritization -->\n *     <div ng-message=\"email\">Your email address is invalid</div>\n *\n *     <!-- and here are the generic error messages -->\n *     <div ng-messages-include=\"my-custom-messages\"></div>\n *   </div>\n * </form>\n * ```\n *\n * In the example HTML code above the message that is set on required will override the corresponding\n * required message defined within the remote template. Therefore, with particular input fields (such\n * email addresses, date fields, autocomplete inputs, etc...), specialized error messages can be applied\n * while more generic messages can be used to handle other, more general input errors.\n *\n * ## Dynamic Messaging\n * ngMessages also supports using expressions to dynamically change key values. Using arrays and\n * repeaters to list messages is also supported. This means that the code below will be able to\n * fully adapt itself and display the appropriate message when any of the expression data changes:\n *\n * ```html\n * <form name=\"myForm\">\n *   <label>\n *     Email address\n *     <input type=\"email\"\n *            name=\"myEmail\"\n *            ng-model=\"email\"\n *            minlength=\"5\"\n *            required />\n *   </label>\n *   <div ng-messages=\"myForm.myEmail.$error\" role=\"alert\">\n *     <div ng-message=\"required\">You did not enter your email address</div>\n *     <div ng-repeat=\"errorMessage in errorMessages\">\n *       <!-- use ng-message-exp for a message whose key is given by an expression -->\n *       <div ng-message-exp=\"errorMessage.type\">{{ errorMessage.text }}</div>\n *     </div>\n *   </div>\n * </form>\n * ```\n *\n * The `errorMessage.type` expression can be a string value or it can be an array so\n * that multiple errors can be associated with a single error message:\n *\n * ```html\n *   <label>\n *     Email address\n *     <input type=\"email\"\n *            ng-model=\"data.email\"\n *            name=\"myEmail\"\n *            ng-minlength=\"5\"\n *            ng-maxlength=\"100\"\n *            required />\n *   </label>\n *   <div ng-messages=\"myForm.myEmail.$error\" role=\"alert\">\n *     <div ng-message-exp=\"'required'\">You did not enter your email address</div>\n *     <div ng-message-exp=\"['minlength', 'maxlength']\">\n *       Your email must be between 5 and 100 characters long\n *     </div>\n *   </div>\n * ```\n *\n * Feel free to use other structural directives such as ng-if and ng-switch to further control\n * what messages are active and when. Be careful, if you place ng-message on the same element\n * as these structural directives, Angular may not be able to determine if a message is active\n * or not. Therefore it is best to place the ng-message on a child element of the structural\n * directive.\n *\n * ```html\n * <div ng-messages=\"myForm.myEmail.$error\" role=\"alert\">\n *   <div ng-if=\"showRequiredError\">\n *     <div ng-message=\"required\">Please enter something</div>\n *   </div>\n * </div>\n * ```\n *\n * ## Animations\n * If the `ngAnimate` module is active within the application then the `ngMessages`, `ngMessage` and\n * `ngMessageExp` directives will trigger animations whenever any messages are added and removed from\n * the DOM by the `ngMessages` directive.\n *\n * Whenever the `ngMessages` directive contains one or more visible messages then the `.ng-active` CSS\n * class will be added to the element. The `.ng-inactive` CSS class will be applied when there are no\n * messages present. Therefore, CSS transitions and keyframes as well as JavaScript animations can\n * hook into the animations whenever these classes are added/removed.\n *\n * Let's say that our HTML code for our messages container looks like so:\n *\n * ```html\n * <div ng-messages=\"myMessages\" class=\"my-messages\" role=\"alert\">\n *   <div ng-message=\"alert\" class=\"some-message\">...</div>\n *   <div ng-message=\"fail\" class=\"some-message\">...</div>\n * </div>\n * ```\n *\n * Then the CSS animation code for the message container looks like so:\n *\n * ```css\n * .my-messages {\n *   transition:1s linear all;\n * }\n * .my-messages.ng-active {\n *   // messages are visible\n * }\n * .my-messages.ng-inactive {\n *   // messages are hidden\n * }\n * ```\n *\n * Whenever an inner message is attached (becomes visible) or removed (becomes hidden) then the enter\n * and leave animation is triggered for each particular element bound to the `ngMessage` directive.\n *\n * Therefore, the CSS code for the inner messages looks like so:\n *\n * ```css\n * .some-message {\n *   transition:1s linear all;\n * }\n *\n * .some-message.ng-enter {}\n * .some-message.ng-enter.ng-enter-active {}\n *\n * .some-message.ng-leave {}\n * .some-message.ng-leave.ng-leave-active {}\n * ```\n *\n * {@link ngAnimate Click here} to learn how to use JavaScript animations or to learn more about ngAnimate.",
        "* @ngdoc directive\n    * @module ngMessages\n    * @name ngMessages\n    * @restrict AE\n    *\n    * @description\n    * `ngMessages` is a directive that is designed to show and hide messages based on the state\n    * of a key/value object that it listens on. The directive itself complements error message\n    * reporting with the `ngModel` $error object (which stores a key/value state of validation errors).\n    *\n    * `ngMessages` manages the state of internal messages within its container element. The internal\n    * messages use the `ngMessage` directive and will be inserted/removed from the page depending\n    * on if they're present within the key/value object. By default, only one message will be displayed\n    * at a time and this depends on the prioritization of the messages within the template. (This can\n    * be changed by using the `ng-messages-multiple` or `multiple` attribute on the directive container.)\n    *\n    * A remote template can also be used to promote message reusability and messages can also be\n    * overridden.\n    *\n    * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.\n    *\n    * @usage\n    * ```html\n    * <!-- using attribute directives -->\n    * <ANY ng-messages=\"expression\" role=\"alert\">\n    *   <ANY ng-message=\"stringValue\">...</ANY>\n    *   <ANY ng-message=\"stringValue1, stringValue2, ...\">...</ANY>\n    *   <ANY ng-message-exp=\"expressionValue\">...</ANY>\n    * </ANY>\n    *\n    * <!-- or by using element directives -->\n    * <ng-messages for=\"expression\" role=\"alert\">\n    *   <ng-message when=\"stringValue\">...</ng-message>\n    *   <ng-message when=\"stringValue1, stringValue2, ...\">...</ng-message>\n    *   <ng-message when-exp=\"expressionValue\">...</ng-message>\n    * </ng-messages>\n    * ```\n    *\n    * @param {string} ngMessages an angular expression evaluating to a key/value object\n    *                 (this is typically the $error object on an ngModel instance).\n    * @param {string=} ngMessagesMultiple|multiple when set, all messages will be displayed with true\n    *\n    * @example\n    * <example name=\"ngMessages-directive\" module=\"ngMessagesExample\"\n    *          deps=\"angular-messages.js\"\n    *          animations=\"true\" fixBase=\"true\">\n    *   <file name=\"index.html\">\n    *     <form name=\"myForm\">\n    *       <label>\n    *         Enter your name:\n    *         <input type=\"text\"\n    *                name=\"myName\"\n    *                ng-model=\"name\"\n    *                ng-minlength=\"5\"\n    *                ng-maxlength=\"20\"\n    *                required />\n    *       </label>\n    *       <pre>myForm.myName.$error = {{ myForm.myName.$error | json }}</pre>\n    *\n    *       <div ng-messages=\"myForm.myName.$error\" style=\"color:maroon\" role=\"alert\">\n    *         <div ng-message=\"required\">You did not enter a field</div>\n    *         <div ng-message=\"minlength\">Your field is too short</div>\n    *         <div ng-message=\"maxlength\">Your field is too long</div>\n    *       </div>\n    *     </form>\n    *   </file>\n    *   <file name=\"script.js\">\n    *     angular.module('ngMessagesExample', ['ngMessages']);\n    *   </file>\n    * </example>",
        "* @ngdoc directive\n    * @name ngMessagesInclude\n    * @restrict AE\n    * @scope\n    *\n    * @description\n    * `ngMessagesInclude` is a directive with the purpose to import existing ngMessage template\n    * code from a remote template and place the downloaded template code into the exact spot\n    * that the ngMessagesInclude directive is placed within the ngMessages container. This allows\n    * for a series of pre-defined messages to be reused and also allows for the developer to\n    * determine what messages are overridden due to the placement of the ngMessagesInclude directive.\n    *\n    * @usage\n    * ```html\n    * <!-- using attribute directives -->\n    * <ANY ng-messages=\"expression\" role=\"alert\">\n    *   <ANY ng-messages-include=\"remoteTplString\">...</ANY>\n    * </ANY>\n    *\n    * <!-- or by using element directives -->\n    * <ng-messages for=\"expression\" role=\"alert\">\n    *   <ng-messages-include src=\"expressionValue1\">...</ng-messages-include>\n    * </ng-messages>\n    * ```\n    *\n    * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.\n    *\n    * @param {string} ngMessagesInclude|src a string value corresponding to the remote template.",
        "* @ngdoc directive\n    * @name ngMessage\n    * @restrict AE\n    * @scope\n    *\n    * @description\n    * `ngMessage` is a directive with the purpose to show and hide a particular message.\n    * For `ngMessage` to operate, a parent `ngMessages` directive on a parent DOM element\n    * must be situated since it determines which messages are visible based on the state\n    * of the provided key/value map that `ngMessages` listens on.\n    *\n    * More information about using `ngMessage` can be found in the\n    * {@link module:ngMessages `ngMessages` module documentation}.\n    *\n    * @usage\n    * ```html\n    * <!-- using attribute directives -->\n    * <ANY ng-messages=\"expression\" role=\"alert\">\n    *   <ANY ng-message=\"stringValue\">...</ANY>\n    *   <ANY ng-message=\"stringValue1, stringValue2, ...\">...</ANY>\n    * </ANY>\n    *\n    * <!-- or by using element directives -->\n    * <ng-messages for=\"expression\" role=\"alert\">\n    *   <ng-message when=\"stringValue\">...</ng-message>\n    *   <ng-message when=\"stringValue1, stringValue2, ...\">...</ng-message>\n    * </ng-messages>\n    * ```\n    *\n    * @param {expression} ngMessage|when a string value corresponding to the message key.",
        "* @ngdoc directive\n    * @name ngMessageExp\n    * @restrict AE\n    * @priority 1\n    * @scope\n    *\n    * @description\n    * `ngMessageExp` is a directive with the purpose to show and hide a particular message.\n    * For `ngMessageExp` to operate, a parent `ngMessages` directive on a parent DOM element\n    * must be situated since it determines which messages are visible based on the state\n    * of the provided key/value map that `ngMessages` listens on.\n    *\n    * @usage\n    * ```html\n    * <!-- using attribute directives -->\n    * <ANY ng-messages=\"expression\">\n    *   <ANY ng-message-exp=\"expressionValue\">...</ANY>\n    * </ANY>\n    *\n    * <!-- or by using element directives -->\n    * <ng-messages for=\"expression\">\n    *   <ng-message when-exp=\"expressionValue\">...</ng-message>\n    * </ng-messages>\n    * ```\n    *\n    * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.\n    *\n    * @param {expression} ngMessageExp|whenExp an expression value corresponding to the message key."
    ],
    "functions": [
        "findPreviousMessage",
        "insertMessageNode",
        "removeMessageNode",
        "isAttrTruthy",
        "truthy",
        "ngMessageDirectiveFactory",
        "contains"
    ],
    "classes": []
}