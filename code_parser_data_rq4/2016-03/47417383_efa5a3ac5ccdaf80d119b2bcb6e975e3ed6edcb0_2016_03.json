{
    "identifiers": [
        "pdb",
        "yaml",
        "imp",
        "numpy",
        "np",
        "scipy",
        "interpolate",
        "astropy",
        "constants",
        "astropy",
        "units",
        "u",
        "astropy",
        "cosmology",
        "astropy",
        "table",
        "QTable",
        "linetools",
        "analysis",
        "absline",
        "ltaa",
        "linetools",
        "lists",
        "linelist",
        "lll",
        "linetools",
        "analysis",
        "voigt",
        "lav",
        "linetools",
        "analysis",
        "absline",
        "photo_cross",
        "linetools",
        "spectralline",
        "linetools",
        "spectra",
        "xspectrum1d",
        "XSpectrum1D",
        "pyigm",
        "fN",
        "fnmodel",
        "FNModel",
        "pyigm",
        "utils",
        "pyigmu",
        "pyigm",
        "continuum",
        "quasar",
        "pycq",
        "imp",
        "find_module",
        "x",
        "bsig",
        "u",
        "km",
        "u",
        "s",
        "bmnx",
        "u",
        "km",
        "u",
        "s",
        "bmnx",
        "bsig",
        "np",
        "exp",
        "bsig",
        "bmax",
        "np",
        "exp",
        "bsig",
        "bmin",
        "bsig",
        "np",
        "log",
        "x",
        "bsig",
        "Const",
        "np",
        "exp",
        "bsig",
        "bmin",
        "bx4",
        "bx",
        "zmnx",
        "fN_model",
        "NHI_mnx",
        "dz",
        "cosmo",
        "rstate",
        "seed",
        "NHI_mnx",
        "rstate",
        "seed",
        "np",
        "random",
        "RandomState",
        "seed",
        "fN_model",
        "fN_mtype",
        "ValueError",
        "fN_model",
        "calculate_lox",
        "fN_model",
        "zpivot",
        "NHI_mnx",
        "NHI_max",
        "NHI_mnx",
        "cumul",
        "interpolate",
        "interp1d",
        "cum_lX",
        "lX",
        "lX_NHI",
        "bounds_error",
        "fill_value",
        "lX_NHI",
        "np",
        "arange",
        "zmnx",
        "zmnx",
        "dz",
        "dz",
        "cosmo",
        "cosmology",
        "core",
        "FlatLambdaCDM",
        "pyigmu",
        "cosm_xz",
        "zeval",
        "cosmo",
        "cosmo",
        "flg_return",
        "lX",
        "dXdz",
        "zeval",
        "fN_model",
        "zpivot",
        "fN_model",
        "gamma",
        "np",
        "cumsum",
        "loz",
        "dz",
        "interpolate",
        "interp1d",
        "sum_loz",
        "sum_loz",
        "zeval",
        "bounds_error",
        "fill_value",
        "zeval",
        "np",
        "round",
        "sum_loz",
        "np",
        "sqrt",
        "sum_loz",
        "rstate",
        "randn",
        "rstate",
        "random_sample",
        "nlines",
        "invfN",
        "randNHI",
        "rstate",
        "random_sample",
        "nlines",
        "invz",
        "randz",
        "rstate",
        "random_sample",
        "nlines",
        "dopp_val",
        "randb",
        "QTable",
        "zval",
        "lgNHI",
        "bval",
        "names",
        "HI_comps",
        "iwave",
        "HIlines",
        "HI_comps",
        "kludge",
        "np",
        "min",
        "iwave",
        "to",
        "value",
        "np",
        "max",
        "iwave",
        "to",
        "value",
        "np",
        "round",
        "np",
        "log10",
        "wmax",
        "np",
        "log10",
        "wmin",
        "np",
        "log10",
        "wmin",
        "np",
        "arange",
        "nsub",
        "u",
        "AA",
        "lav",
        "voigt_from_abslines",
        "wave",
        "HIlines",
        "fwhm",
        "ret",
        "HI_comps",
        "np",
        "zeros",
        "wave",
        "size",
        "row",
        "HI_comps",
        "LL_comps",
        "wave",
        "row",
        "wv_rest",
        "to",
        "u",
        "eV",
        "equivalencies",
        "u",
        "spectral",
        "row",
        "u",
        "cm",
        "photo_cross",
        "energy",
        "kludge",
        "np",
        "argmin",
        "np",
        "fabs",
        "wv_rest",
        "u",
        "AA",
        "np",
        "where",
        "wv_rest",
        "u",
        "AA",
        "wv_rest",
        "u",
        "AA",
        "itau_LL",
        "pix_LL",
        "tau_LL",
        "itau_LL",
        "wave",
        "tau_LL",
        "tau_Lyman",
        "HI_comps",
        "wvmnx",
        "tau0_min",
        "lll",
        "LineList",
        "HIlines",
        "_data",
        "np",
        "outer",
        "HI_comps",
        "np",
        "ones",
        "len",
        "wrest",
        "np",
        "outer",
        "np",
        "ones",
        "len",
        "HI_comps",
        "wrest",
        "grid_zp1",
        "grid_wr",
        "np",
        "outer",
        "HI_comps",
        "np",
        "ones",
        "len",
        "wrest",
        "np",
        "outer",
        "HI_comps",
        "to",
        "np",
        "ones",
        "len",
        "wrest",
        "np",
        "outer",
        "np",
        "ones",
        "len",
        "HI_comps",
        "HIlines",
        "_data",
        "grid_wr",
        "grid_f",
        "grid_NHI",
        "grid_b",
        "np",
        "where",
        "all_wvobs",
        "wvmnx",
        "value",
        "all_wvobs",
        "wvmnx",
        "value",
        "grid_tau0",
        "tau0_min",
        "np",
        "log10",
        "grid_NHI",
        "grid_zp1",
        "grid_b",
        "u",
        "km",
        "u",
        "s",
        "ii",
        "jj",
        "gdlin",
        "gdlin",
        "parm",
        "append",
        "grid_wr",
        "ii",
        "jj",
        "u",
        "AA",
        "grid_z",
        "ii",
        "jj",
        "grid_lgNHI",
        "ii",
        "jj",
        "grid_bkms",
        "ii",
        "jj",
        "iparm",
        "iparm",
        "parm",
        "spectralline",
        "many_abslines",
        "all_wrest",
        "HIlines",
        "jj",
        "iparm",
        "parm",
        "abs_lines",
        "jj",
        "attrib",
        "iparm",
        "abs_lines",
        "jj",
        "attrib",
        "iparm",
        "abs_lines",
        "jj",
        "attrib",
        "iparm",
        "u",
        "cm",
        "abs_lines",
        "jj",
        "attrib",
        "iparm",
        "abs_lines",
        "wave",
        "zem",
        "fN_model",
        "out_spec",
        "out_tbl",
        "s2n",
        "seed",
        "np",
        "random",
        "RandomState",
        "seed",
        "np",
        "min",
        "wave",
        "np",
        "max",
        "wave",
        "wave",
        "wvmin",
        "wave",
        "wvmax",
        "wvmin",
        "u",
        "AA",
        "monte_HIcomp",
        "zmin",
        "zem",
        "fN_model",
        "rstate",
        "rstate",
        "mock_HIlines",
        "HI_comps",
        "wvmin",
        "wvmax",
        "generate_tau",
        "wave",
        "HIlines",
        "HI_comps",
        "np",
        "exp",
        "tot_tau",
        "XSpectrum1D",
        "from_tuple",
        "sub_wave",
        "sub_flux",
        "sub_mock",
        "rebin",
        "wave",
        "XSpectrum1D",
        "from_tuple",
        "mock",
        "wavelength",
        "mock",
        "flux",
        "np",
        "ones",
        "len",
        "mock",
        "flux",
        "s2n",
        "mock",
        "gauss_smooth",
        "fwhm",
        "mock",
        "add_noise",
        "reload",
        "pycq",
        "pycq",
        "wfc3_continuum",
        "zqso",
        "zem",
        "wave",
        "wave",
        "rstate",
        "rstate",
        "XSpectrum1D",
        "from_tuple",
        "wave",
        "mock",
        "flux",
        "conti",
        "flux",
        "conti",
        "flux",
        "np",
        "ones",
        "len",
        "mock",
        "flux",
        "s2n",
        "full_mock",
        "meta",
        "update",
        "zQSO",
        "zem",
        "S2N",
        "s2n",
        "seed",
        "seed",
        "fN_gamma",
        "fN_model",
        "gamma",
        "fN_type",
        "fN_model",
        "fN_mtype",
        "conti",
        "wfc3_idx",
        "out_spec",
        "full_mock",
        "write_to_fits",
        "out_spec",
        "clobber",
        "out_tbl",
        "HI_comps",
        "write",
        "out_tbl",
        "overwrite",
        "full_mock",
        "HI_comps"
    ],
    "literals": [
        "'pyigm'",
        "'Hspline'",
        "'monte_HIlines: Can only handle Hspline so far.'",
        "'Using a Flat LCDM cosmology: h=0.7, Om=0.3'",
        "'z'",
        "'lgNHI'",
        "'bval'",
        "'AA'",
        "'AA'",
        "'tau'",
        "'lgNHI'",
        "'z'",
        "'lgNHI'",
        "'HI'",
        "'wrest'",
        "'z'",
        "'lgNHI'",
        "'bval'",
        "'cm/s'",
        "'f'",
        "'z'",
        "'logN'",
        "'N'",
        "'b'"
    ],
    "variables": [
        "pyigm_path",
        "bmin",
        "bmax",
        "Const",
        "bx4",
        "bx",
        "NHI_mnx",
        "seed",
        "rstate",
        "lX",
        "cum_lX",
        "lX_NHI",
        "invfN",
        "zeval",
        "cosmo",
        "dXdz",
        "loz",
        "sum_loz",
        "invz",
        "nlines",
        "randNHI",
        "lgNHI",
        "randz",
        "zval",
        "randb",
        "bval",
        "HI_comps",
        "wmin",
        "wmax",
        "nsub",
        "wave",
        "tau_Lyman",
        "LL_comps",
        "tau_LL",
        "wv_rest",
        "energy",
        "itau_LL",
        "pix_LL",
        "pix_kludge",
        "itau_LL",
        "pix_kludge",
        "HIlines",
        "wrest",
        "grid_zp1",
        "grid_wr",
        "all_wvobs",
        "grid_NHI",
        "grid_b",
        "grid_f",
        "grid_tau0",
        "gdlin",
        "grid_lgNHI",
        "grid_z",
        "grid_bkms",
        "parm",
        "all_wrest",
        "abs_lines",
        "rstate",
        "wvmin",
        "wvmax",
        "gdwv",
        "zmin",
        "HI_comps",
        "HIlines",
        "sub_wave",
        "tot_tau",
        "sub_flux",
        "sub_mock",
        "mock",
        "mock",
        "conti",
        "wfc3_idx",
        "full_mock"
    ],
    "comments": [
        "Normalization constant",
        "Now the evaluation",
        "Lastly",
        "Init",
        "NHI range",
        "seed",
        "Check fN_model type",
        "Calculate lX at pivot",
        "Interpolator for NHI distribution (assumed independent of redshift)",
        "Uses lowest NHI value for the first bit (kludgy but ok)",
        ", kind='quadratic')",
        "z evaluation",
        "Cosmology",
        "dXdz",
        "Generate loz",
        "Calculate average number of lines for analysis",
        "Interpolator",
        "Uses lowest NHI value for the first bit (kludgy but ok)",
        "Assume Gaussian stats for number of lines",
        "NHI values",
        "z values",
        "b values",
        "Pack em up as a QTable",
        "Rebin to subgrid",
        "Voigt for Lyman series",
        "Continuum opacity",
        "Energies in LLS rest-frame",
        "Get photo_cross and calculate tau",
        "Kludge around the limit",
        "Sum",
        "Total",
        "Linelist",
        "All wvobs",
        "All tau0",
        "Grids",
        "tau0 (Spitzer 1979)",
        "Good ones",
        "Generate the line list for Lyman series",
        "Parameters",
        "lambda, z, N, b",
        "Generate a large batch of AbsLines",
        "Fill in the rest",
        "Retrun",
        "Init",
        "Wavelength Range",
        "(1+zem)*912.*u.AA - 1000*u.AA",
        "Keep only the good ones",
        "zrange for Lya",
        "Components",
        "Main call",
        "Optical depth",
        "Normalized mock spectrum (sub-grid of wavelengths)",
        "from xastropy.xutils import xdebug as xdb",
        "xdb.set_trace()",
        "Rebin",
        "Add instrument + noise",
        "Continuum",
        "Full",
        "Write spectrum",
        "Save HI data",
        "Return"
    ],
    "docstrings": [
        "\"\"\" Module for tau_eff calculations\n\"\"\"",
        "\"\"\" Generate random distribution of b-values\n    Follows Hui&Rutledge 1999 distribution\n\n    Parameters\n    ----------\n    x: float or array  [between 0 and 1]\n    bsig: Quantity, optional  [parameterization of the distribution]\n    bmnx: Quantity array, optional\n      Set limits on the allowed values\n\n    Returns\n    -------\n    bx: Quantity\n      b-values\n    \"\"\"",
        "\"\"\" Generate a Monte Carlo draw of HI components (z,N,b)\n\n    Parameters\n    ----------\n    zmnx : tuple (float,float)\n      Redshift range for analysis.\n      Should correspond to Lya\n    fN_model : fN_Model class\n    NHI_mnx : tuple, optional (float,float)\n      Range of logNHI for linelist\n    dz : float, optional\n      Step size for z discretization\n    cosmo : astropy Cosmology, optional\n    rstate : RandomState, optional\n      For random number generation\n    seed : int, optional\n      Seed for random numbers\n\n    Returns:\n    -----------\n    HI_comps : list\n      List of HI components drawn for the given sightline\n    \"\"\"",
        "\"\"\"Generate optical depth array given lines and components\n\n    Parameters:\n    -----------\n\n    iwave : Quantity array\n      Input Spectrum wavelengths\n    HIlines : list of AbsLines\n    HI_comps : QTable of components\n    kludge : bool, optional\n      Kludge the opacity\n\n    Returns:\n    --------\n    tau : ndarray\n      Optical depth at subgrid wavelengths.  Will need to rebin back\n    \"\"\"",
        "\"\"\"Generate list of absorption lines for a sightline\n    Parameters:\n    ------------\n    HI_comps : QTable\n      HI components ('z','lgNHI','bval')\n    wvmnx : tuple (Quantity,Quantity)\n      min/max wavelength\n    tau0_min : float, optional\n      Minimum optical depth to include\n\n    Returns:\n    --------\n    abs_lines: list\n      List of HI Lyman lines\n    \"\"\"",
        "\"\"\" Generate a mock\n    Parameters\n    ----------\n    wave : Quantity array\n    zem : float\n    fN_model\n    seed : int, optional\n    out_spec : str, optional\n    out_tbl : str, optional\n    s2n : float, optional\n\n    Returns\n    -------\n    full_mock : XSpectrum1D of the mock\n    HI_comps : Table of the components\n    \"\"\""
    ],
    "functions": [
        "dopp_val",
        "monte_HIcomp",
        "generate_tau",
        "mock_HIlines",
        "mk_mock"
    ],
    "classes": []
}