{
    "identifiers": [
        "melnorme",
        "lang",
        "ide",
        "core",
        "operations",
        "build",
        "melnorme",
        "lang",
        "ide",
        "core",
        "operations",
        "build",
        "BuildTargetsSerializer_Test",
        "bt",
        "melnorme",
        "utilbox",
        "core",
        "Assert",
        "AssertNamespace",
        "assertFail",
        "melnorme",
        "utilbox",
        "core",
        "Assert",
        "AssertNamespace",
        "assertNotNull",
        "melnorme",
        "utilbox",
        "core",
        "Assert",
        "AssertNamespace",
        "assertTrue",
        "java",
        "nio",
        "file",
        "Path",
        "org",
        "eclipse",
        "core",
        "resources",
        "IProject",
        "org",
        "eclipse",
        "core",
        "runtime",
        "CoreException",
        "org",
        "junit",
        "Test",
        "melnorme",
        "lang",
        "ide",
        "core",
        "BundleInfo",
        "melnorme",
        "lang",
        "ide",
        "core",
        "LangCore",
        "melnorme",
        "lang",
        "ide",
        "core",
        "launch",
        "CompositeBuildTargetSettings",
        "melnorme",
        "lang",
        "ide",
        "core",
        "launch",
        "LaunchMessages",
        "melnorme",
        "lang",
        "ide",
        "core",
        "operations",
        "ILangOperationsListener_Default",
        "IOperationConsoleHandler",
        "melnorme",
        "lang",
        "ide",
        "core",
        "operations",
        "build",
        "BuildManager",
        "BuildType",
        "melnorme",
        "lang",
        "ide",
        "core",
        "project_model",
        "LangBundleModel",
        "melnorme",
        "lang",
        "ide",
        "core",
        "project_model",
        "ProjectBuildInfo",
        "melnorme",
        "lang",
        "ide",
        "core",
        "tests",
        "BuildTestsHelper",
        "melnorme",
        "lang",
        "ide",
        "core",
        "tests",
        "SampleProject",
        "melnorme",
        "lang",
        "tooling",
        "bundle",
        "BuildConfiguration",
        "melnorme",
        "lang",
        "tooling",
        "bundle",
        "BuildTargetNameParser",
        "melnorme",
        "utilbox",
        "collections",
        "ArrayList2",
        "melnorme",
        "utilbox",
        "collections",
        "Indexable",
        "melnorme",
        "utilbox",
        "core",
        "CommonException",
        "melnorme",
        "utilbox",
        "tests",
        "CommonTest",
        "buildMgr",
        "LangCore",
        "getBundleModel",
        "SEP",
        "buildMgr",
        "getBuildTargetNameParser",
        "getNameSeparator",
        "sampleBT_A",
        "bt",
        "sampleBT_B",
        "bt",
        "sampleBT_STRICT",
        "bt",
        "SEP",
        "DEFAULT_TARGETS",
        "sampleBT_A",
        "sampleBT_B",
        "sampleBT_STRICT",
        "bundleModel",
        "bundleModel",
        "Override",
        "Override",
        "Override",
        "Override",
        "project",
        "newBundleInfo",
        "dEFAULT_TARGETS2",
        "DEFAULT_TARGETS",
        "createBuildTargets",
        "project",
        "dEFAULT_TARGETS2",
        "project",
        "buildTargetsData",
        "buildTargetsData",
        "mapx",
        "buildTargetData",
        "buildMgr",
        "createBuildTarget3",
        "project",
        "buildTargetData",
        "e",
        "assertFail",
        "name",
        "name",
        "Override",
        "bt",
        "buildArgs",
        "buildArgs",
        "add",
        "Override",
        "bt",
        "opHandler",
        "buildToolPath",
        "Override",
        "buildConfigName",
        "bundleInfo",
        "contains",
        "buildConfigName",
        "buildConfigName",
        "BuildManagerMessages",
        "BuildConfig_NotFound",
        "buildConfigName",
        "name",
        "name",
        "Override",
        "buildConfigName",
        "bundleInfo",
        "buildConfigName",
        "sampleProject",
        "project",
        "sampleProject",
        "getClass",
        "getSimpleName",
        "project",
        "sampleProject",
        "getProject",
        "sampleProject",
        "bundleInfo",
        "BuildTestsHelper",
        "createSampleBundleInfoA",
        "Test",
        "test$",
        "sampleProj",
        "initSampleProject",
        "buildMgr",
        "loadProjectBuildInfo",
        "project",
        "bundleInfo",
        "buildInfo",
        "buildMgr",
        "getBuildInfo",
        "project",
        "assertNotNull",
        "buildInfo",
        "checkBuildTargets",
        "buildInfo",
        "getBuildTargets",
        "toArrayList",
        "sampleBT_A",
        "sampleBT_B",
        "sampleBT_STRICT",
        "assertEquals",
        "buildMgr",
        "getValidBuildTarget",
        "project",
        "getData",
        "sampleBT_A",
        "verifyThrows",
        "buildMgr",
        "getValidBuildTarget",
        "project",
        "getData",
        "LaunchMessages",
        "BuildTarget_NotFound",
        "verifyThrows",
        "buildMgr",
        "getValidBuildTarget",
        "project",
        "SEP",
        "getData",
        "assertEquals",
        "buildMgr",
        "getValidBuildTarget",
        "project",
        "SEP",
        "getData",
        "bt",
        "SEP",
        "verifyThrows",
        "buildMgr",
        "getValidBuildTarget",
        "project",
        "SEP",
        "getData",
        "testSaveLoadProjectInfo",
        "buildType",
        "buildConfig",
        "btA",
        "project",
        "bundleInfo",
        "bt",
        "buildType",
        "buildConfig",
        "btNonExistentButValid",
        "project",
        "bundleInfo",
        "SEP",
        "buildType",
        "buildConfig",
        "btNonExistent",
        "project",
        "bundleInfo",
        "SEP",
        "buildType",
        "buildConfig",
        "newProjectBuildInfo",
        "buildMgr",
        "project",
        "bundleInfo",
        "btA",
        "btNonExistentButValid",
        "btNonExistent",
        "buildMgr",
        "setProjectBuildInfoAndSave",
        "project",
        "newProjectBuildInfo",
        "buildMgr",
        "getBuildModel",
        "removeProjectInfo",
        "project",
        "assertTrue",
        "buildMgr",
        "getBuildModel",
        "getProjectInfo",
        "project",
        "buildMgr",
        "loadProjectBuildInfo",
        "project",
        "bundleInfo",
        "buildInfo",
        "buildMgr",
        "getBuildInfo",
        "project",
        "checkBuildTargets",
        "buildInfo",
        "getBuildTargets",
        "toArrayList",
        "bt",
        "sampleBT_B",
        "sampleBT_STRICT",
        "buildTargets",
        "expectedSettings",
        "assertTrue",
        "buildTargets",
        "size",
        "expectedSettings",
        "size",
        "ix",
        "ix",
        "buildTargets",
        "size",
        "ix",
        "expectedData",
        "expectedSettings",
        "get",
        "ix",
        "assertTrue",
        "buildTargets",
        "get",
        "ix",
        "getData",
        "equals",
        "expectedData",
        "Test",
        "test_compositeBuildTargetSettings$",
        "sampleProj",
        "initSampleProject",
        "assertEquals",
        "btSettings",
        "getValidBuildTarget",
        "getData",
        "bt",
        "assertEquals",
        "btSettings",
        "getValidBuildTarget",
        "getData",
        "bt",
        "assertEquals",
        "btSettings",
        "getValidBuildTarget",
        "getData",
        "bt",
        "assertEquals",
        "btSettings",
        "getValidBuildTarget",
        "getData",
        "bt",
        "buildTargetName",
        "buildArguments",
        "artifactPath",
        "getBuiltTargetSettingsValidator",
        "sampleProject",
        "getName",
        "buildTargetName",
        "buildArguments",
        "artifactPath",
        "projectName",
        "buildTargetName",
        "buildArguments",
        "artifactPath",
        "btSettings",
        "Override",
        "buildMgr",
        "Override",
        "projectName",
        "Override",
        "buildTargetName",
        "Override",
        "buildArguments",
        "Override",
        "artifactPath",
        "btSettings",
        "Test",
        "testBuildType$",
        "buildType",
        "sampleProj",
        "initSampleProject",
        "project",
        "sampleProj",
        "getProject",
        "buildInfo",
        "buildMgr",
        "getValidBuildInfo",
        "project",
        "bundleInfo",
        "buildInfo",
        "getBundleInfo",
        "targetA",
        "bt",
        "buildTargetA",
        "BuildTarget",
        "create",
        "project",
        "bundleInfo",
        "targetA",
        "buildType",
        "verifyThrows",
        "buildTargetA",
        "getEffectiveValidExecutablePath",
        "LaunchMessages",
        "MSG_BuildTarget_NoExecutableAvailable",
        "target2",
        "bt",
        "buildTarget2",
        "BuildTarget",
        "create",
        "project",
        "bundleInfo",
        "target2",
        "buildType",
        "assertAreEqual",
        "buildTarget2",
        "getEffectiveValidExecutablePath"
    ],
    "literals": [
        "\"TargetA\"",
        "\"TargetB\"",
        "\"B: build_args\"",
        "\"B: check_args\"",
        "\"B: exe_path\"",
        "\"ConfigA\"",
        "\"strict\"",
        "\"S: build_args\"",
        "\"S: check_args\"",
        "\"S: exe_path\"",
        "\"#\"",
        "\"default\"",
        "\"strict\"",
        "\"build this\"",
        "\"ConfigA\"",
        "\"ConfigB\"",
        "\"SampleBundle\"",
        "\"TargetA\"",
        "\"TargetA#default\"",
        "\"TargetA\"",
        "\"bad_config\"",
        "\"No such build type: `bad_config`\"",
        "\"ImplicitTarget\"",
        "\"default\"",
        "\"ImplicitTarget\"",
        "\"default\"",
        "\"ImplicitTarget\"",
        "\"strict\"",
        "\"Build configuration `ImplicitTarget` not found\"",
        "\"default\"",
        "\"configA\"",
        "\"TargetA\"",
        "\"new1\"",
        "\"new2\"",
        "\"new3\"",
        "\"TargetA\"",
        "\"default\"",
        "\"TargetA\"",
        "\"NonExistentType\"",
        "\"TargetA\"",
        "\"new1\"",
        "\"new2\"",
        "\"new3\"",
        "\"TargetA\"",
        "\"TargetA\"",
        "\"TargetB\"",
        "\"TargetB\"",
        "\"B: build_args\"",
        "\"B: check_args\"",
        "\"B: exe_path\"",
        "\"TargetB\"",
        "\"ARGS\"",
        "\"EXEPATH\"",
        "\"TargetB\"",
        "\"ARGS\"",
        "\"B: check_args\"",
        "\"EXEPATH\"",
        "\"ImplicitTarget\"",
        "\"ARGS\"",
        "\"EXEPATH\"",
        "\"ImplicitTarget\"",
        "\"ARGS\"",
        "\"EXEPATH\"",
        "\"default\"",
        "\"SampleTarget\"",
        "\"\"",
        "\"SampleTarget2\"",
        "\"sample args\"",
        "\"-check\"",
        "\"sample path\"",
        "\"\"",
        "\"sample path\""
    ],
    "variables": [
        "sampleProject",
        "project"
    ],
    "comments": [
        "Allow implicit configurations",
        "Build Type not found",
        "Config not found",
        "Ensure TargetA uses previous settings"
    ],
    "docstrings": [
        "*****************************************************************************\n * Copyright (c) 2015 Bruno Medeiros and other Contributors.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Bruno Medeiros - initial API and implementation\n ******************************************************************************",
        "-----------------  -----------------",
        "-----------------  -----------------",
        "-----------------  -----------------"
    ],
    "functions": [
        "TestsBuildManager",
        "BuildTargetNameParser",
        "getBuildTargetNameParser",
        "getNameSeparator",
        "getBuildTypes_do",
        "getDefaultBuildTargets",
        "createBuildTargets",
        "SampleStrictBuildType",
        "getDefaultBuildOptions",
        "CommonBuildTargetOperation",
        "getBuildOperation",
        "BuildConfiguration",
        "getValidBuildconfiguration",
        "SampleBuildType",
        "BuildConfiguration",
        "getValidBuildconfiguration",
        "SampleProject",
        "initSampleProject",
        "test",
        "test$",
        "testSaveLoadProjectInfo",
        "checkBuildTargets",
        "test_compositeBuildTargetSettings",
        "test_compositeBuildTargetSettings$",
        "CompositeBuildTargetSettings",
        "btSettings",
        "CompositeBuildTargetSettings",
        "getBuiltTargetSettingsValidator",
        "BuildManager",
        "getBuildManager",
        "getProjectName",
        "getBuildTargetName",
        "getBuildArguments",
        "getExecutablePath",
        "testBuildType",
        "testBuildType$"
    ],
    "classes": [
        "BuildManager_Test",
        "TestsBuildManager",
        "SampleStrictBuildType",
        "SampleBuildType"
    ]
}