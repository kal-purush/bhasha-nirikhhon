{
    "identifiers": [
        "freenet",
        "client",
        "junit",
        "framework",
        "TestCase",
        "java",
        "io",
        "java",
        "io",
        "InputStream",
        "java",
        "io",
        "OutputStream",
        "java",
        "util",
        "Arrays",
        "freenet",
        "support",
        "api",
        "Bucket",
        "freenet",
        "support",
        "io",
        "ArrayBucket",
        "freenet",
        "support",
        "io",
        "BucketTools",
        "RESOURCE_PATH",
        "GOOD",
        "FILTER_PAIRS",
        "good",
        "GOOD",
        "assertEqualAfterFilter",
        "good",
        "good",
        "pair",
        "FILTER_PAIRS",
        "assertEqualAfterFilter",
        "pair",
        "pair",
        "fileUnfiltered",
        "fileExpected",
        "input",
        "resourceToBucket",
        "fileUnfiltered",
        "expected",
        "resourceToBucket",
        "fileExpected",
        "filtered",
        "filterMP3",
        "input",
        "assertTrue",
        "fileUnfiltered",
        "fileExpected",
        "equalBuckets",
        "filtered",
        "expected",
        "a",
        "b",
        "Arrays",
        "equals",
        "BucketTools",
        "toByteArray",
        "a",
        "BucketTools",
        "toByteArray",
        "b",
        "e",
        "e",
        "input",
        "output",
        "inStream",
        "outStream",
        "inStream",
        "input",
        "getInputStream",
        "outStream",
        "output",
        "getOutputStream",
        "e",
        "e",
        "readFilter",
        "inStream",
        "outStream",
        "e",
        "e",
        "inStream",
        "close",
        "outStream",
        "close",
        "e",
        "e",
        "output",
        "filename",
        "getResourceAsStream",
        "RESOURCE_PATH",
        "filename",
        "filename",
        "ab",
        "BucketTools",
        "copyFrom",
        "ab",
        "MAX_VALUE",
        "e",
        "e",
        "ab"
    ],
    "literals": [
        "\"mp3/\"",
        "\"8khz-8kbps-cbr-stereo.mp3\"",
        "\"11khz-48kbps-cbr-stereo.mp3\"",
        "\"16khz-56kbps-cbr-stereo.mp3\"",
        "\"22khz-96kbps-cbr-stereo.mp3\"",
        "\"32khz-96kbps-cbr-stereo.mp3\"",
        "\"44khz-96kbps-cbr-stereo.mp3\"",
        "\"48khz-64kbps-vbr-stereo.mp3\"",
        "\"48khz-96kbps-vbr-joint.mp3\"",
        "\"48khz-128kbps-cbr-stereo.mp3\"",
        "\"48khz-320kbps-cbr-joint.mp3\"",
        "\"48khz-96kbps-vbr-joint-randompadding-unfiltered.mp3\"",
        "\"48khz-96kbps-vbr-joint-randompadding-expected.mp3\"",
        "\"48khz-128kbps-cbr-stereo-id3v2.mp3\"",
        "\"48khz-128kbps-cbr-stereo.mp3\"",
        "\"Filtered and expected output are not identical. \"",
        "\"Input = \"",
        "\", expected = \"",
        "\"\"",
        "\"Unexpected exception in the content filter.\"",
        "\"Test resource could not be opened: \""
    ],
    "variables": [
        "inStream",
        "outStream"
    ],
    "comments": [
        "MPEG ADTS, layer III, v2.5, 8 kbps, 8 kHz, Stereo",
        "MPEG ADTS, layer III, v2.5, 48 kbps, 11.025 kHz, Stereo",
        "MPEG ADTS, layer III, v2, 56 kbps, 16 kHz, Stereo",
        "MPEG ADTS, layer III, v2, 96 kbps, 22.05 kHz, Stereo",
        "MPEG ADTS, layer III, v1, 96 kbps, 32 kHz, Stereo",
        "MPEG ADTS, layer III, v1, 96 kbps, 44.1 kHz, Stereo",
        "MPEG ADTS, layer III, v1, 128 kbps, 48 kHz, Stereo",
        "MPEG ADTS, layer III, v1, 128 kbps, 48 kHz, JntStereo",
        "MPEG ADTS, layer III, v1, 128 kbps, 48 kHz, Stereo",
        "MPEG ADTS, layer III, v1, 320 kbps, 48 kHz, JntStereo",
        "random + 48khz-96kbps-vbr-joint + random + 48khz-96kbps-vbr-joint + random",
        "Random data is to be removed, leaving file with duplicate 48khz-96kbps-vbr-joint",
        "48khz-128kbps-cbr-stereo with ID3v2 tags to be stripped"
    ],
    "docstrings": [
        "Known good files, should pass filter unaltered.",
        "Pairs of unfiltered file and their expected output file.",
        "* Asserts that the test file in the first argument, after passing through the content filter,\n     * is equal to the reference file in the second argument.\n     *\n     * @param fileUnfiltered  the test file\n     * @param fileExpected    the reference file",
        "* Checks for equality of Bucket contents.",
        "* Runs a Bucket through the content filter.\n     *\n     * @throws AssertionError on failure",
        "* Loads a resource relative to the resource path into a Bucket.\n     *\n     * @throws AssertionError on failure"
    ],
    "functions": [
        "testKnownGood",
        "testFilterPairs",
        "assertEqualAfterFilter",
        "equalBuckets",
        "Bucket",
        "filterMP3",
        "Bucket",
        "resourceToBucket"
    ],
    "classes": [
        "MP3FilterTest"
    ]
}