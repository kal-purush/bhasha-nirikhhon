{
    "identifiers": [
        "value",
        "value",
        "e",
        "codePoints",
        "template",
        "substitutions",
        "pos",
        "searchString",
        "position",
        "searchString",
        "endPosition",
        "count",
        "searchString",
        "position",
        "name",
        "color",
        "size",
        "size",
        "url",
        "arrayLike",
        "mapfn",
        "v",
        "k",
        "thisArg",
        "iterable",
        "mapfn",
        "v",
        "k",
        "thisArg",
        "arrayLike",
        "iterable",
        "items",
        "predicate",
        "value",
        "index",
        "obj",
        "thisArg",
        "predicate",
        "value",
        "thisArg",
        "value",
        "start",
        "end",
        "target",
        "start",
        "end",
        "number",
        "number",
        "number",
        "number",
        "radix",
        "target",
        "sources",
        "value1",
        "value2",
        "o",
        "proto",
        "x",
        "x",
        "y",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "values",
        "x",
        "x",
        "x",
        "onfulfilled",
        "value",
        "onrejected",
        "reason",
        "onfulfilled",
        "value",
        "onrejected",
        "reason",
        "onfulfilled",
        "value",
        "onrejected",
        "reason",
        "onfulfilled",
        "value",
        "onrejected",
        "reason",
        "onrejected",
        "reason",
        "onrejected",
        "reason",
        "executor",
        "resolve",
        "value",
        "reject",
        "reason",
        "values",
        "values",
        "reason",
        "reason",
        "value",
        "key",
        "callbackfn",
        "value",
        "index",
        "thisArg",
        "key",
        "key",
        "key",
        "value",
        "iterable",
        "value",
        "value",
        "callbackfn",
        "value",
        "index",
        "thisArg",
        "value",
        "iterable",
        "key",
        "key",
        "key",
        "key",
        "value",
        "iterable",
        "value",
        "value",
        "value",
        "iterable",
        "apply",
        "target",
        "thisArgument",
        "argumentsList",
        "construct",
        "target",
        "argumentsList",
        "defineProperty",
        "target",
        "propertyKey",
        "attributes",
        "deleteProperty",
        "target",
        "propertyKey",
        "target",
        "get",
        "target",
        "propertyKey",
        "receiver",
        "getOwnPropertyDescriptor",
        "target",
        "propertyKey",
        "getPrototypeOf",
        "target",
        "has",
        "target",
        "propertyKey",
        "isExtensible",
        "target",
        "ownKeys",
        "target",
        "preventExtensions",
        "target",
        "target",
        "propertyKey",
        "value",
        "receiver",
        "setPrototypeOf",
        "target",
        "proto",
        "apply",
        "target",
        "thisArgument",
        "argumentsList",
        "construct",
        "target",
        "argumentsList",
        "defineProperty",
        "target",
        "propertyKey",
        "attributes",
        "deleteProperty",
        "target",
        "propertyKey",
        "target",
        "get",
        "target",
        "propertyKey",
        "receiver",
        "getOwnPropertyDescriptor",
        "target",
        "propertyKey",
        "getPrototypeOf",
        "target",
        "has",
        "target",
        "propertyKey",
        "isExtensible",
        "target",
        "ownKeys",
        "target",
        "preventExtensions",
        "target",
        "target",
        "propertyKey",
        "value",
        "receiver",
        "setPrototypeOf",
        "target",
        "proto"
    ],
    "literals": [
        "string",
        "\"_es6-shim iterator_\"",
        "\"_es6-shim iterator_\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"_es6-shim iterator_\"",
        "string",
        "\"_es6-shim iterator_\"",
        "string",
        "string",
        "string",
        "\"es6-shim\""
    ],
    "variables": [],
    "comments": [
        "Compiled using typings@0.6.10",
        "Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/6697d6f7dadbf5773cb40ecda35a76027e0783b2/es6-shim/es6-shim.d.ts",
        "Type definitions for es6-shim v0.31.2",
        "Project: https://github.com/paulmillr/es6-shim",
        "Definitions by: Ron Buckton <http://github.com/rbuckton>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "Returns a <big> HTML element",
        "Returns a <blink> HTML element",
        "Returns a <b> HTML element",
        "Returns a <tt> HTML element",
        "Returns a <font> HTML element and sets the color attribute value",
        "Returns a <font> HTML element and sets the size attribute value",
        "Returns a <font> HTML element and sets the size attribute value",
        "Returns an <i> HTML element",
        "Returns an <a> HTML element and sets the href attribute value",
        "Returns a <small> HTML element",
        "Returns a <strike> HTML element",
        "Returns a <sub> HTML element",
        "Returns a <sup> HTML element"
    ],
    "docstrings": [
        "* Shim for an ES6 iterable. Not intended for direct use by user code.",
        "* Shim for an ES6 iterable iterator. Not intended for direct use by user code.",
        "* Return the String value whose elements are, in order, the elements in the List elements.\n      * If length is 0, the empty string is returned.",
        "* String.raw is intended for use as a tag function of a Tagged Template String. When called\n      * as such the first argument will be a well formed template call site object and the rest\n      * parameter will contain the substitution values.\n      * @param template A well-formed template string call site representation.\n      * @param substitutions A set of substitution values.",
        "* Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\n      * value of the UTF-16 encoded code point starting at the string element at position pos in\n      * the String resulting from converting this object to a String.\n      * If there is no element at that position, the result is undefined.\n      * If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "* Returns true if searchString appears as a substring of the result of converting this\n      * object to a String, at one or more positions that are\n      * greater than or equal to position; otherwise, returns false.\n      * @param searchString search string\n      * @param position If position is undefined, 0 is assumed, so as to search all of the String.",
        "* Returns true if the sequence of elements of searchString converted to a String is the\n      * same as the corresponding elements of this object (converted to a String) starting at\n      * endPosition – length(this). Otherwise returns false.",
        "* Returns a String value that is made from count copies appended together. If count is 0,\n      * T is the empty String is returned.\n      * @param count number of copies to append",
        "* Returns true if the sequence of elements of searchString converted to a String is the\n      * same as the corresponding elements of this object (converted to a String) starting at\n      * position. Otherwise returns false.",
        "* Returns an <a> HTML anchor element and sets the name attribute to the text value\n      * @param name",
        "* Shim for an ES6 iterable. Not intended for direct use by user code.",
        "* Creates an array from an array-like object.\n      * @param arrayLike An array-like object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.",
        "* Creates an array from an iterable object.\n      * @param iterable An iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.",
        "* Creates an array from an array-like object.\n      * @param arrayLike An array-like object to convert to an array.",
        "* Creates an array from an iterable object.\n      * @param iterable An iterable object to convert to an array.",
        "* Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.",
        "* Returns the value of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.",
        "* Returns the index of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.",
        "* Returns the this object after filling the section identified by start and end with value\n      * @param value value to fill array section with\n      * @param start index to start filling the array at. If start is negative, it is treated as\n      * length+start where length is the length of the array.\n      * @param end index to stop filling the array at. If end is negative, it is treated as\n      * length+end.",
        "* Returns the this object after copying a section of the array identified by start and end\n      * to the same array starting at position target\n      * @param target If target is negative, it is treated as length+target where length is the\n      * length of the array.\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\n      * is treated as length+end.\n      * @param end If not specified, length of the this object is used as its default value.",
        "* Returns an array of key, value pairs for every entry in the array",
        "* Returns an list of keys in the array",
        "* Returns an list of values in the array",
        "* Shim for an ES6 iterable. Not intended for direct use by user code.",
        "* The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1\n      * that is representable as a Number value, which is approximately:\n      * 2.2204460492503130808472633361816 x 10‍−‍16.",
        "* Returns true if passed value is finite.\n      * Unlike the global isFininte, Number.isFinite doesn't forcibly convert the parameter to a\n      * number. Only finite values of the type number, result in true.\n      * @param number A numeric value.",
        "* Returns true if the value passed is an integer, false otherwise.\n      * @param number A numeric value.",
        "* Returns a Boolean value that indicates whether a value is the reserved value NaN (not a\n      * number). Unlike the global isNaN(), Number.isNaN() doesn't forcefully convert the parameter\n      * to a number. Only values of the type number, that are also NaN, result in true.\n      * @param number A numeric value.",
        "* Returns true if the value passed is a safe integer.\n      * @param number A numeric value.",
        "* The value of the largest integer n such that n and n + 1 are both exactly representable as\n      * a Number value.\n      * The value of Number.MIN_SAFE_INTEGER is 9007199254740991 2^53 − 1.",
        "* The value of the smallest integer n such that n and n − 1 are both exactly representable as\n      * a Number value.\n      * The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).",
        "* Converts a string to a floating-point number.\n      * @param string A string that contains a floating-point number.",
        "* Converts A string to an integer.\n      * @param s A string to convert into a number.\n      * @param radix A value between 2 and 36 that specifies the base of the number in numString.\n      * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\n      * All other strings are considered decimal.",
        "* Copy the values of all of the enumerable own properties from one or more source objects to a\n      * target object. Returns the target object.\n      * @param target The target object to copy to.\n      * @param sources One or more source objects to copy properties from.",
        "* Returns true if the values are the same value, false otherwise.\n      * @param value1 The first value.\n      * @param value2 The second value.",
        "* Sets the prototype of a specified object o to  object proto or null. Returns the object o.\n      * @param o The object to change its prototype.\n      * @param proto The value of the new prototype or null.\n      * @remarks Requires `__proto__` support.",
        "* Returns a string indicating the flags of the regular expression in question. This field is read-only.\n      * The characters in this string are sequenced and concatenated in the following order:\n      *\n      *    - \"g\" for global\n      *    - \"i\" for ignoreCase\n      *    - \"m\" for multiline\n      *    - \"u\" for unicode\n      *    - \"y\" for sticky\n      *\n      * If no flags are set, the value is the empty string.",
        "* Returns the number of leading zero bits in the 32-bit binary representation of a number.\n      * @param x A numeric expression.",
        "* Returns the result of 32-bit multiplication of two numbers.\n      * @param x First number\n      * @param y Second number",
        "* Returns the sign of the x, indicating whether x is positive, negative or zero.\n      * @param x The numeric expression to test",
        "* Returns the base 10 logarithm of a number.\n      * @param x A numeric expression.",
        "* Returns the base 2 logarithm of a number.\n      * @param x A numeric expression.",
        "* Returns the natural logarithm of 1 + x.\n      * @param x A numeric expression.",
        "* Returns the result of (e^x - 1) of x (e raised to the power of x, where e is the base of\n      * the natural logarithms).\n      * @param x A numeric expression.",
        "* Returns the hyperbolic cosine of a number.\n      * @param x A numeric expression that contains an angle measured in radians.",
        "* Returns the hyperbolic sine of a number.\n      * @param x A numeric expression that contains an angle measured in radians.",
        "* Returns the hyperbolic tangent of a number.\n      * @param x A numeric expression that contains an angle measured in radians.",
        "* Returns the inverse hyperbolic cosine of a number.\n      * @param x A numeric expression that contains an angle measured in radians.",
        "* Returns the inverse hyperbolic sine of a number.\n      * @param x A numeric expression that contains an angle measured in radians.",
        "* Returns the inverse hyperbolic tangent of a number.\n      * @param x A numeric expression that contains an angle measured in radians.",
        "* Returns the square root of the sum of squares of its arguments.\n      * @param values Values to compute the square root for.\n      *     If no arguments are passed, the result is +0.\n      *     If there is only one argument, the result is the absolute value.\n      *     If any argument is +Infinity or -Infinity, the result is +Infinity.\n      *     If any argument is NaN, the result is NaN.\n      *     If all arguments are either +0 or −0, the result is +0.",
        "* Returns the integral part of the a numeric expression, x, removing any fractional digits.\n      * If x is already an integer, the result is x.\n      * @param x A numeric expression.",
        "* Returns the nearest single precision float representation of a number.\n      * @param x A numeric expression.",
        "* Returns an implementation-dependent approximation to the cube root of number.\n      * @param x A numeric expression.",
        "* Attaches callbacks for the resolution and/or rejection of the Promise.\n    * @param onfulfilled The callback to execute when the Promise is resolved.\n    * @param onrejected The callback to execute when the Promise is rejected.\n    * @returns A Promise for the completion of which ever callback is executed.",
        "* Represents the completion of an asynchronous operation",
        "* Attaches callbacks for the resolution and/or rejection of the Promise.\n    * @param onfulfilled The callback to execute when the Promise is resolved.\n    * @param onrejected The callback to execute when the Promise is rejected.\n    * @returns A Promise for the completion of which ever callback is executed.",
        "* Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.",
        "* A reference to the prototype.",
        "* Creates a new Promise.\n     * @param executor A callback used to initialize the promise. This callback is passed two arguments:\n     * a resolve callback used resolve the promise with a value or the result of another promise,\n     * and a reject callback used to reject the promise with a provided reason or error.",
        "* Creates a Promise that is resolved with an array of results when all of the provided Promises\n     * resolve, or rejected when any Promise is rejected.\n     * @param values An array of Promises.\n     * @returns A new Promise.",
        "* Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n     * or rejected.\n     * @param values An array of Promises.\n     * @returns A new Promise.",
        "* Creates a new rejected promise for the provided reason.\n     * @param reason The reason the promise was rejected.\n     * @returns A new rejected Promise.",
        "* Creates a new rejected promise for the provided reason.\n     * @param reason The reason the promise was rejected.\n     * @returns A new rejected Promise.",
        "* Creates a new resolved promise for the provided value.\n      * @param value A promise.\n      * @returns A promise whose internal state matches the provided promise.",
        "* Creates a new resolved promise .\n     * @returns A resolved promise."
    ],
    "functions": [],
    "classes": []
}