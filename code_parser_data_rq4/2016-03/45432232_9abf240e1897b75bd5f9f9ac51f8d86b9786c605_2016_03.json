{
    "identifiers": [
        "argparse",
        "json",
        "multiprocessing",
        "os",
        "re",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "threading",
        "path",
        "os",
        "path",
        "isfile",
        "os",
        "path",
        "join",
        "result",
        "path",
        "os",
        "path",
        "realpath",
        "result",
        "sys",
        "exit",
        "result",
        "os",
        "path",
        "realpath",
        "result",
        "f",
        "clang_tidy_binary",
        "checks",
        "tmpdir",
        "build_path",
        "header_filter",
        "clang_tidy_binary",
        "header_filter",
        "start",
        "append",
        "header_filter",
        "start",
        "append",
        "build_path",
        "checks",
        "start",
        "append",
        "checks",
        "tmpdir",
        "start",
        "append",
        "tempfile",
        "mkstemp",
        "suffix",
        "dir",
        "tmpdir",
        "os",
        "close",
        "handle",
        "start",
        "append",
        "name",
        "start",
        "append",
        "build_path",
        "start",
        "append",
        "f",
        "start",
        "args",
        "tmpdir",
        "args",
        "clang_apply_replacements_binary",
        "args",
        "format",
        "invocation",
        "append",
        "invocation",
        "append",
        "tmpdir",
        "subprocess",
        "call",
        "invocation",
        "shutil",
        "rmtree",
        "tmpdir",
        "args",
        "tmpdir",
        "build_path",
        "queue",
        "queue",
        "get",
        "get_tidy_invocation",
        "name",
        "args",
        "clang_tidy_binary",
        "args",
        "checks",
        "tmpdir",
        "build_path",
        "args",
        "header_filter",
        "sys",
        "stdout",
        "write",
        "join",
        "invocation",
        "subprocess",
        "call",
        "invocation",
        "queue",
        "task_done",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "dest",
        "help",
        "parser",
        "parse_args",
        "args",
        "build_path",
        "args",
        "build_path",
        "find_compilation_database",
        "db_path",
        "args",
        "clang_tidy_binary",
        "invocation",
        "append",
        "build_path",
        "args",
        "checks",
        "invocation",
        "append",
        "args",
        "checks",
        "invocation",
        "append",
        "subprocess",
        "check_output",
        "invocation",
        "sys",
        "stderr",
        "sys",
        "exit",
        "json",
        "load",
        "open",
        "os",
        "path",
        "join",
        "build_path",
        "db_path",
        "entry",
        "entry",
        "database",
        "args",
        "j",
        "max_task",
        "multiprocessing",
        "cpu_count",
        "args",
        "fix",
        "tempfile",
        "mkdtemp",
        "re",
        "compile",
        "join",
        "args",
        "files",
        "max_task",
        "_",
        "max_task",
        "threading",
        "target",
        "run_tidy",
        "args",
        "args",
        "tmpdir",
        "build_path",
        "queue",
        "t",
        "start",
        "name",
        "files",
        "file_name_re",
        "search",
        "name",
        "queue",
        "put",
        "name",
        "queue",
        "join",
        "KeyboardInterrupt",
        "args",
        "fix",
        "shutil",
        "rmtree",
        "tmpdir",
        "os",
        "kill",
        "args",
        "fix",
        "apply_fixes",
        "args",
        "tmpdir",
        "main"
    ],
    "literals": [
        "'./'",
        "'/'",
        "'Error: could not find compilation database.'",
        "'../'",
        "'-header-filter='",
        "'-header-filter=^'",
        "'/.*'",
        "'-checks='",
        "'-export-fixes'",
        "'.yaml'",
        "'-p='",
        "'-format'",
        "' '",
        "'\\n'",
        "'Runs clang-tidy over all files '",
        "'in a compilation database. Requires '",
        "'clang-tidy and clang-apply-replacements in '",
        "'$PATH.'",
        "'-clang-tidy-binary'",
        "'PATH'",
        "'clang-tidy'",
        "'path to clang-tidy binary'",
        "'-clang-apply-replacements-binary'",
        "'PATH'",
        "'clang-apply-replacements'",
        "'path to clang-apply-replacements binary'",
        "'-checks'",
        "'checks filter, when not specified, use clang-tidy '",
        "'default'",
        "'-header-filter'",
        "'regular expression matching the names of the '",
        "'headers to output diagnostics from. Diagnostics from '",
        "'the main file of each translation unit are always '",
        "'displayed.'",
        "'-j'",
        "'number of tidy instances to be run in parallel.'",
        "'files'",
        "'*'",
        "'.*'",
        "'files to be processed (regex on path)'",
        "'-fix'",
        "'store_true'",
        "'apply fix-its'",
        "'-format'",
        "'store_true'",
        "'Reformat code '",
        "'after applying fixes'",
        "'-p'",
        "'build_path'",
        "'Path used to read a compile command database.'",
        "'compile_commands.json'",
        "'-list-checks'",
        "'-p='",
        "'-checks='",
        "'-'",
        "\"Unable to run clang-tidy.\"",
        "'file'",
        "'('",
        "')|('",
        "')'",
        "'\\nCtrl-C detected, goodbye.'",
        "'Applying fixes ...'",
        "'__main__'"
    ],
    "variables": [
        "result",
        "start",
        "handle",
        "name",
        "invocation",
        "name",
        "invocation",
        "parser",
        "args",
        "db_path",
        "build_path",
        "build_path",
        "invocation",
        "database",
        "files",
        "max_task",
        "max_task",
        "tmpdir",
        "tmpdir",
        "file_name_re",
        "queue",
        "t",
        "t",
        "daemon"
    ],
    "comments": [
        "!/usr/bin/env python",
        "",
        "===- run-clang-tidy.py - Parallel clang-tidy runner ---------*- python -*--===#",
        "",
        "The LLVM Compiler Infrastructure",
        "",
        "This file is distributed under the University of Illinois Open Source",
        "License. See LICENSE.TXT for details.",
        "",
        "===------------------------------------------------------------------------===#",
        "FIXME: Integrate with clang-tidy-diff.py",
        "Show warnings in all in-project headers by default.",
        "Get a temporary file. We immediately close the handle so clang-tidy can",
        "overwrite it.",
        "Find our database",
        "Load the database and extract all files.",
        "Build up a big regexy filter from all command line arguments.",
        "Spin up a bunch of tidy-launching threads.",
        "Fill the queue with files.",
        "Wait for all threads to be done.",
        "This is a sad hack. Unfortunately subprocess goes",
        "bonkers with ctrl-c and we start forking merrily."
    ],
    "docstrings": [
        "\"\"\"\nParallel clang-tidy runner\n==========================\n\nRuns clang-tidy over all files in a compilation database. Requires clang-tidy\nand clang-apply-replacements in $PATH.\n\nExample invocations.\n- Run clang-tidy on all files in the current working directory with a default\n  set of checks and show warnings in the cpp files and all project headers.\n    run-clang-tidy.py $PWD\n\n- Fix all header guards.\n    run-clang-tidy.py -fix -checks=-*,llvm-header-guard\n\n- Fix all header guards included from clang-tidy and header guards\n  for clang-tidy headers.\n    run-clang-tidy.py -fix -checks=-*,llvm-header-guard extra/clang-tidy \\\n                      -header-filter=extra/clang-tidy\n\nCompilation database setup:\nhttp://clang.llvm.org/docs/HowToSetupToolingForLLVM.html\n\"\"\"",
        "\"\"\"Adjusts the directory until a compilation database is found.\"\"\"",
        "\"\"\"Gets a command line for clang-tidy.\"\"\"",
        "\"\"\"Calls clang-apply-fixes on a given directory. Deletes the dir when done.\"\"\"",
        "\"\"\"Takes filenames out of queue and runs clang-tidy on them.\"\"\""
    ],
    "functions": [
        "find_compilation_database",
        "get_tidy_invocation",
        "apply_fixes",
        "run_tidy",
        "main"
    ],
    "classes": []
}