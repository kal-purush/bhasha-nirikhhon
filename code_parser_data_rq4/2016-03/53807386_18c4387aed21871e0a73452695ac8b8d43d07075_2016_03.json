{
    "identifiers": [
        "Collections",
        "Generic",
        "SmallGame",
        "Services",
        "IGameService",
        "Type",
        "IGameService",
        "RequestService",
        "IUpdateService",
        "RequestService",
        "IScriptService",
        "RequestService",
        "IRenderService",
        "RequestService",
        "IResourceService",
        "_services",
        "Type",
        "IGameService",
        "S",
        "S",
        "service",
        "S",
        "IGameService",
        "_services",
        "ContainsKey",
        "S",
        "_services",
        "Add",
        "S",
        "service",
        "S",
        "S",
        "IGameService",
        "_services",
        "ContainsKey",
        "S",
        "S",
        "_services",
        "S",
        "S",
        "Name"
    ],
    "literals": [
        "\"That service has already been registered\"",
        "\"There is no service of type \"",
        "\". Make sure you are requesting the EXACT same type used to register.\""
    ],
    "variables": [
        "_services",
        "IUpdateService",
        "UpdateService",
        "IScriptService",
        "ScriptService",
        "IRenderService",
        "RenderService",
        "IResourceService",
        "ResourceService"
    ],
    "comments": [
        "A GameService is fundamental part of the game architecture. It can be anything, and the IGameService is",
        "an empty interface, not enforcing any restrictions on what a game service can be, or do.",
        "",
        "Common examples of GameServices are the UpdateService, or RenderService. They are responsible for",
        "controlling vast portions of the game logic.",
        "</summary>",
        "GameServices is a collection of IGameService. It can hold one of each type of service. The GameServices class",
        "should be used to register and access services.",
        "</summary>",
        "common accessors. Use extension methods to add more.",
        "Gets the UpdateService attached to the GameServices collection.",
        "</summary>",
        "Gets the ScriptService attached to the GameServices collection.",
        "</summary>",
        "Gets the RenderService attached to the GameServices collection.",
        "</summary>",
        "Gets the ResourceService attached to the GameServices collection.",
        "</summary>",
        "Constructs a new collection of IGameServices.",
        "</summary>",
        "Registering a service with the GameServices allows it to be retrieved later by its type.",
        "The type of the service is how the service will be stored, and as such, each service type",
        "can only be registered once. Attempting to register two instances of the same service type",
        "will result in an exception.",
        "</summary>",
        "<typeparam name=\"S\">The type of service being registered. This must extend from IGameService</typeparam>",
        "<param name=\"service\">An instance of S, the service being registered. </param>",
        "Requesting a service will retrieve a service instance. However, if no service of the requested",
        "type has been registered, then an exception will be thrown.",
        "</summary>",
        "<typeparam name=\"S\">The type of service to request. This must extend from IGameService</typeparam>",
        "<returns>An instance of S, the requested service type</returns>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "GameServices",
        "RegisterService",
        "S",
        "RequestService"
    ],
    "classes": [
        "GameServices"
    ]
}