{
    "identifiers": [
        "logging",
        "abc",
        "ABCMeta",
        "abstractmethod",
        "threading",
        "simulation",
        "action",
        "PRIORITIES",
        "logging",
        "getLogger",
        "ABCMeta",
        "game_state",
        "communicator",
        "game_state",
        "communicator",
        "abstractmethod",
        "player_id_to_serialised_actions",
        "avatar",
        "serialised_action",
        "_register_actions",
        "avatar",
        "serialised_action",
        "avatar",
        "serialised_action",
        "avatar",
        "decide_action",
        "serialised_action",
        "avatar",
        "action",
        "register",
        "game_state",
        "world_map",
        "game_state",
        "len",
        "game_state",
        "avatar_manager",
        "active_avatars",
        "game_state",
        "world_map",
        "reconstruct_interactive_state",
        "num_avatars",
        "communicator",
        "mark_game_complete",
        "data",
        "game_state",
        "serialise",
        "player_id_to_serialised_actions",
        "run_turn",
        "player_id_to_serialised_actions",
        "game_state",
        "update_environment",
        "SimulationRunner",
        "player_id_to_serialised_actions",
        "game_state",
        "avatar_manager",
        "active_avatars",
        "avatar",
        "avatars",
        "_run_turn_for_avatar",
        "avatar",
        "player_id_to_serialised_actions",
        "avatar",
        "player_id",
        "avatar",
        "action",
        "target_location",
        "avatar",
        "action",
        "process",
        "game_state",
        "world_map",
        "game_state",
        "world_map",
        "clear_cell_actions",
        "location_to_clear",
        "SimulationRunner",
        "player_id_to_serialised_actions",
        "game_state",
        "avatar_manager",
        "active_avatars",
        "target",
        "_run_turn_for_avatar",
        "args",
        "avatar",
        "player_id_to_serialised_actions",
        "avatar",
        "player_id",
        "avatar",
        "avatars",
        "thread",
        "start",
        "thread",
        "threads",
        "thread",
        "join",
        "thread",
        "threads",
        "avatars",
        "sort",
        "key",
        "a",
        "PRIORITIES",
        "a",
        "action",
        "a",
        "action",
        "target_location",
        "a",
        "avatars",
        "a",
        "action",
        "action",
        "a",
        "action",
        "a",
        "avatars",
        "a",
        "action",
        "action",
        "process",
        "game_state",
        "world_map",
        "location",
        "locations_to_clear",
        "game_state",
        "world_map",
        "clear_cell_actions",
        "location"
    ],
    "literals": [],
    "variables": [
        "LOGGER",
        "TURN_INTERVAL",
        "daemon",
        "__metaclass__",
        "game_state",
        "communicator",
        "num_avatars",
        "avatars",
        "location_to_clear",
        "avatars",
        "threads",
        "locations_to_clear"
    ],
    "comments": [
        "Waits applied first, then attacks, then moves."
    ],
    "docstrings": [
        "\"\"\"\n    Game loop\n    \"\"\"",
        "\"\"\"\n        Send an avatar its view of the game state and register its\n        chosen action & logs.\n        \"\"\"",
        "\"\"\"\n        Calls a function that constructs the action object, does error handling,\n        and finally registers it onto the avatar.\n\n        :param avatar: Avatar wrapper object\n        :param serialised_action: A string representing the action\n        \"\"\"",
        "\"\"\"\n        Get and apply each avatar's action in turn.\n        \"\"\"",
        "\"\"\"\n        Concurrently get the intended actions from all avatars and register\n        them on the world map. Then apply actions in order of priority.\n        \"\"\""
    ],
    "functions": [
        "run_turn",
        "_run_turn_for_avatar",
        "_register_actions",
        "_update_environment",
        "_mark_complete",
        "run_single_turn",
        "run_turn",
        "run_turn"
    ],
    "classes": [
        "SimulationRunner",
        "SequentialSimulationRunner",
        "ConcurrentSimulationRunner"
    ]
}