{
    "identifiers": [
        "pkg_resources",
        "ImportError",
        "sys",
        "os",
        "argparse",
        "time",
        "time",
        "sys",
        "version_info",
        "configparser",
        "ConfigParser",
        "configparser",
        "logging",
        "logging",
        "getLogger",
        "addHandler",
        "logging",
        "NullHandler",
        "json",
        "libcloud",
        "compute",
        "types",
        "Provider",
        "libcloud",
        "compute",
        "providers",
        "get_driver",
        "Provider",
        "GCE",
        "sys",
        "exit",
        "cache_name",
        "cache_path",
        "cache_max_age",
        "os",
        "path",
        "expanduser",
        "cache_path",
        "os",
        "path",
        "exists",
        "cache_dir",
        "os",
        "makedirs",
        "cache_dir",
        "os",
        "path",
        "join",
        "cache_dir",
        "cache_name",
        "cache_max_age",
        "max_age",
        "max_age",
        "cache_max_age",
        "os",
        "path",
        "isfile",
        "cache_path_cache",
        "os",
        "path",
        "getmtime",
        "cache_path_cache",
        "time",
        "mod_time",
        "max_age",
        "current_time",
        "filename",
        "filename",
        "cache_path_cache",
        "open",
        "filename",
        "cache",
        "cache",
        "read",
        "json",
        "loads",
        "data",
        "data",
        "filename",
        "filename",
        "cache_path_cache",
        "json",
        "dumps",
        "data",
        "open",
        "filename",
        "cache",
        "cache",
        "write",
        "json_data",
        "parse_cli_args",
        "get_config",
        "get_gce_drivers",
        "get_inventory_options",
        "ip_type",
        "ip_type",
        "lower",
        "time",
        "args",
        "refresh_cache",
        "cache",
        "is_valid",
        "do_api_calls_update_cache",
        "load_inventory_from_cache",
        "inventory",
        "inventory",
        "time",
        "start_inventory_time",
        "cache_used",
        "args",
        "host",
        "json_format_dict",
        "inventory",
        "args",
        "host",
        "pretty",
        "args",
        "pretty",
        "parse_env_zones",
        "json_format_dict",
        "inventory",
        "pretty",
        "args",
        "pretty",
        "sys",
        "exit",
        "os",
        "path",
        "join",
        "os",
        "path",
        "dirname",
        "os",
        "path",
        "realpath",
        "os",
        "environ",
        "get",
        "gce_ini_default_path",
        "configparser",
        "SafeConfigParser",
        "defaults",
        "config",
        "sections",
        "config",
        "add_section",
        "config",
        "sections",
        "config",
        "add_section",
        "config",
        "sections",
        "config",
        "add_section",
        "config",
        "read",
        "gce_ini_path",
        "config",
        "has_option",
        "config",
        "get",
        "states",
        "states",
        "split",
        "args",
        "instance_tags",
        "args",
        "instance_tags",
        "os",
        "environ",
        "get",
        "config",
        "get",
        "instance_tags",
        "instance_tags",
        "split",
        "config",
        "get",
        "config",
        "getint",
        "CloudInventoryCache",
        "cache_path",
        "cache_path",
        "cache_max_age",
        "cache_max_age",
        "cache_name",
        "cache_name",
        "config",
        "config",
        "get",
        "os",
        "environ",
        "get",
        "ip_type",
        "ip_type",
        "config",
        "get",
        "secrets",
        "secrets",
        "GCE_PARAMS",
        "secrets",
        "GCE_KEYWORD_PARAMS",
        "secrets_found",
        "secrets_path",
        "secrets_path",
        "endswith",
        "err",
        "sys",
        "exit",
        "err",
        "sys",
        "path",
        "append",
        "os",
        "path",
        "dirname",
        "secrets_path",
        "secrets",
        "getattr",
        "secrets",
        "getattr",
        "secrets",
        "secrets_found",
        "config",
        "get",
        "config",
        "get",
        "config",
        "get",
        "config",
        "get",
        "os",
        "environ",
        "get",
        "args",
        "os",
        "environ",
        "get",
        "args",
        "os",
        "environ",
        "get",
        "args",
        "os",
        "environ",
        "get",
        "kwargs",
        "os",
        "environ",
        "get",
        "kwargs",
        "kwargs",
        "split",
        "project",
        "projects",
        "project",
        "get_driver",
        "Provider",
        "GCE",
        "args",
        "kwargs",
        "gce",
        "connection",
        "user_agent_append",
        "USER_AGENT_PRODUCT",
        "USER_AGENT_VERSION",
        "gce_drivers",
        "append",
        "gce",
        "gce_drivers",
        "csv",
        "csv",
        "reader",
        "os",
        "environ",
        "get",
        "skipinitialspace",
        "r",
        "r",
        "reader",
        "z",
        "z",
        "zones",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "parse_args",
        "inst",
        "inst",
        "inst",
        "extra",
        "entry",
        "inst",
        "extra",
        "entry",
        "entry",
        "inst",
        "extra",
        "split",
        "inst",
        "extra",
        "inst",
        "extra",
        "split",
        "ip_type",
        "inst",
        "private_ips",
        "inst",
        "public_ips",
        "len",
        "inst",
        "public_ips",
        "inst",
        "private_ips",
        "inst",
        "uuid",
        "inst",
        "id",
        "inst",
        "image",
        "inst",
        "size",
        "inst",
        "private_ips",
        "inst",
        "public_ips",
        "len",
        "inst",
        "public_ips",
        "inst",
        "name",
        "inst",
        "extra",
        "inst",
        "extra",
        "inst",
        "extra",
        "name",
        "inst",
        "extra",
        "md",
        "net",
        "subnet",
        "ssh_host",
        "cache",
        "get_all_data_from_cache",
        "inventory",
        "e",
        "cache",
        "cache_path_cache",
        "parse_env_zones",
        "group_instances",
        "zones",
        "cache",
        "write_to_cache",
        "data",
        "data",
        "more_results",
        "driver",
        "drivers",
        "driver",
        "connection",
        "all_nodes",
        "extend",
        "driver",
        "list_nodes",
        "all_nodes",
        "zones",
        "node",
        "list_nodes",
        "instance_states",
        "node",
        "extra",
        "instance_states",
        "instance_tags",
        "instance_tags",
        "node",
        "extra",
        "node",
        "name",
        "meta",
        "node_to_dict",
        "node",
        "node",
        "extra",
        "name",
        "zones",
        "zone",
        "zones",
        "zone",
        "groups",
        "groups",
        "zone",
        "append",
        "name",
        "name",
        "node",
        "extra",
        "t",
        "tags",
        "t",
        "startswith",
        "t",
        "t",
        "tag",
        "groups",
        "groups",
        "tag",
        "append",
        "name",
        "name",
        "node",
        "extra",
        "split",
        "net",
        "net",
        "groups",
        "groups",
        "net",
        "append",
        "name",
        "name",
        "node",
        "size",
        "machine_type",
        "groups",
        "groups",
        "machine_type",
        "append",
        "name",
        "name",
        "node",
        "image",
        "node",
        "image",
        "image",
        "groups",
        "groups",
        "image",
        "append",
        "name",
        "name",
        "node",
        "extra",
        "status",
        "lower",
        "stat",
        "groups",
        "groups",
        "stat",
        "append",
        "name",
        "name",
        "private_ip",
        "node",
        "private_ips",
        "name",
        "len",
        "node",
        "public_ips",
        "public_ip",
        "node",
        "public_ips",
        "name",
        "meta",
        "groups",
        "data",
        "pretty",
        "pretty",
        "json",
        "dumps",
        "data",
        "sort_keys",
        "indent",
        "json",
        "dumps",
        "data",
        "GceInventory"
    ],
    "literals": [
        "\"Ansible-gce_inventory_plugin\"",
        "\"v2\"",
        "'libcloud.common.google'",
        "\"GCE inventory script requires libcloud >= 0.13\"",
        "'ansible-cloud-cache'",
        "'/tmp'",
        "''",
        "''",
        "'r'",
        "''",
        "'w'",
        "'_meta'",
        "'stats'",
        "'use_cache'",
        "'_meta'",
        "'stats'",
        "'inventory_load_time'",
        "'cache_used'",
        "'_meta'",
        "'hostvars'",
        "\"gce.ini\"",
        "'GCE_INI_PATH'",
        "'gce_service_account_email_address'",
        "''",
        "'gce_service_account_pem_file_path'",
        "''",
        "'gce_project_id'",
        "''",
        "'gce_zone'",
        "''",
        "'libcloud_secrets'",
        "''",
        "'instance_tags'",
        "''",
        "'inventory_ip_type'",
        "''",
        "'cache_path'",
        "'~/.ansible/tmp'",
        "'cache_max_age'",
        "'300'",
        "'gce'",
        "'gce'",
        "'inventory'",
        "'inventory'",
        "'cache'",
        "'cache'",
        "'gce'",
        "'instance_states'",
        "'gce'",
        "'instance_states'",
        "','",
        "'GCE_INSTANCE_TAGS'",
        "'gce'",
        "'instance_tags'",
        "','",
        "'cache'",
        "'cache_path'",
        "'cache'",
        "'cache_max_age'",
        "'ansible-gce.cache'",
        "'inventory'",
        "'inventory_ip_type'",
        "'INVENTORY_IP_TYPE'",
        "'gce'",
        "'libcloud_secrets'",
        "'secrets.py'",
        "\"Must specify libcloud secrets file as \"",
        "\"/absolute/path/to/secrets.py\"",
        "'GCE_PARAMS'",
        "'GCE_KEYWORD_PARAMS'",
        "'gce'",
        "'gce_service_account_email_address'",
        "'gce'",
        "'gce_service_account_pem_file_path'",
        "'project'",
        "'gce'",
        "'gce_project_id'",
        "'datacenter'",
        "'gce'",
        "'gce_zone'",
        "'GCE_EMAIL'",
        "'GCE_PEM_FILE_PATH'",
        "'GCE_CREDENTIALS_FILE_PATH'",
        "'project'",
        "'GCE_PROJECT'",
        "'project'",
        "'datacenter'",
        "'GCE_ZONE'",
        "'datacenter'",
        "'project'",
        "','",
        "'project'",
        "'%s/%s'",
        "'GCE_ZONE'",
        "\"\"",
        "'Produce an Ansible Inventory file based on GCE'",
        "'--list'",
        "'store_true'",
        "'List instances (default: True)'",
        "'--host'",
        "'store'",
        "'Get all information about an instance'",
        "'--instance-tags'",
        "'store'",
        "'Only include instances with this tags, separated by comma'",
        "'--pretty'",
        "'store_true'",
        "'Pretty format (default: False)'",
        "'--refresh-cache'",
        "'store_true'",
        "'Force refresh of cache by making API requests (default: False - use cache files)'",
        "'items'",
        "'metadata'",
        "'metadata'",
        "'items'",
        "'key'",
        "'value'",
        "'networkInterfaces'",
        "'network'",
        "'/'",
        "'subnetwork'",
        "'networkInterfaces'",
        "'networkInterfaces'",
        "'subnetwork'",
        "'/'",
        "'internal'",
        "'gce_uuid'",
        "'gce_id'",
        "'gce_image'",
        "'gce_machine_type'",
        "'gce_private_ip'",
        "'gce_public_ip'",
        "'gce_name'",
        "'gce_description'",
        "'description'",
        "'gce_status'",
        "'status'",
        "'gce_zone'",
        "'zone'",
        "'gce_tags'",
        "'tags'",
        "'gce_metadata'",
        "'gce_network'",
        "'gce_subnetwork'",
        "'ansible_ssh_host'",
        "'_meta'",
        "'hostvars'",
        "\"Invalid inventory file %s.  Please rebuild with -refresh-cache option.\"",
        "'maxResults'",
        "'pageToken'",
        "\"hostvars\"",
        "'status'",
        "'tags'",
        "\"hostvars\"",
        "'zone'",
        "'tags'",
        "'group-'",
        "'tag_%s'",
        "'networkInterfaces'",
        "'network'",
        "'/'",
        "'network_%s'",
        "'persistent_disk'",
        "'status'",
        "'status_%s'",
        "\"_meta\"",
        "'__main__'"
    ],
    "variables": [
        "USER_AGENT_PRODUCT",
        "USER_AGENT_VERSION",
        "_",
        "cache_dir",
        "cache_path_cache",
        "cache_max_age",
        "max_age",
        "mod_time",
        "current_time",
        "data",
        "filename",
        "data",
        "filename",
        "json_data",
        "cache",
        "inventory",
        "config",
        "drivers",
        "ip_type",
        "ip_type",
        "start_inventory_time",
        "cache_used",
        "cache_used",
        "zones",
        "gce_ini_default_path",
        "gce_ini_path",
        "config",
        "instance_states",
        "states",
        "instance_states",
        "instance_tags",
        "instance_tags",
        "instance_tags",
        "cache_path",
        "cache_max_age",
        "cache_name",
        "cache",
        "ip_type",
        "ip_type",
        "secrets_path",
        "secrets_found",
        "args",
        "kwargs",
        "secrets_found",
        "err",
        "args",
        "kwargs",
        "secrets_found",
        "args",
        "kwargs",
        "args",
        "args",
        "args",
        "kwargs",
        "kwargs",
        "gce_drivers",
        "projects",
        "kwargs",
        "gce",
        "reader",
        "zones",
        "parser",
        "args",
        "md",
        "md",
        "net",
        "subnet",
        "subnet",
        "ssh_host",
        "ssh_host",
        "inventory",
        "hosts",
        "zones",
        "data",
        "inventory",
        "all_nodes",
        "more_results",
        "gce_params",
        "more_results",
        "groups",
        "meta",
        "meta",
        "name",
        "name",
        "zone",
        "groups",
        "zone",
        "tags",
        "tag",
        "tag",
        "groups",
        "tag",
        "net",
        "net",
        "groups",
        "net",
        "machine_type",
        "groups",
        "machine_type",
        "image",
        "groups",
        "image",
        "status",
        "stat",
        "groups",
        "stat",
        "groups",
        "private_ip",
        "groups",
        "public_ip",
        "groups"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Copyright 2013 Google Inc.",
        "",
        "This file is part of Ansible",
        "",
        "Ansible is free software: you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation, either version 3 of the License, or",
        "(at your option) any later version.",
        "",
        "Ansible is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU General Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License",
        "along with Ansible.  If not, see <http://www.gnu.org/licenses/>.",
        "Use pkg_resources to find the correct versions of libraries and set",
        "sys.path appropriately when there are multiversion installs.  We don't",
        "fail here as there is code that better expresses the errors where the",
        "library is used.",
        "Cache object",
        "dictionary containing inventory read from disk",
        "Read settings and parse CLI arguments",
        "Cache management",
        "Just display data for specific host",
        "Otherwise, assume user wants all instances grouped",
        "Create a ConfigParser.",
        "This provides empty defaults to each key, so that environment",
        "variable configuration (as opposed to INI configuration) is able",
        "to work.",
        "",
        "Section added for processing ini settings",
        "",
        "Set the instance_states filter based on config file options",
        "Ignore if instance_states is an empty string.",
        "Set the instance_tags filter, env var overrides config from file",
        "and cli param overrides all",
        "Caching",
        "TOOD(supertom): support project-specific caches",
        "If the appropriate environment variables are set, they override",
        "other configuration",
        "Attempt to get GCE params from a configuration file, if one",
        "exists.",
        "If the appropriate environment variables are set, they override",
        "other configuration; process those into our args and kwargs.",
        "default to exernal IP unless user has specified they prefer internal",
        "Hosts don't have a public name, so we add an IP",
        "This check filters on the desired instance states defined in the",
        "config file with the instance_states config option.",
        "",
        "If the instance_states list is _empty_ then _ALL_ states are returned.",
        "",
        "If the instance_states list is _populated_ then check the current",
        "state against the instance_states list",
        "This check filters on the desired instance tags defined in the",
        "config file with the instance_tags config option, env var GCE_INSTANCE_TAGS,",
        "or as the cli param --instance-tags.",
        "",
        "If the instance_tags list is _empty_ then _ALL_ instances are returned.",
        "",
        "If the instance_tags list is _populated_ then check the current",
        "instance tags against the instance_tags list. If the instance has",
        "at least one tag from the instance_tags list, it is returned.",
        "To avoid making multiple requests per zone",
        "we list all nodes and then filter the results",
        "Run the script"
    ],
    "docstrings": [
        "'''\nGCE external inventory script\n=================================\n\nGenerates inventory that Ansible can understand by making API requests\nGoogle Compute Engine via the libcloud library.  Full install/configuration\ninstructions for the gce* modules can be found in the comments of\nansible/test/gce_tests.py.\n\nWhen run against a specific host, this script returns the following variables\nbased on the data obtained from the libcloud Node object:\n - gce_uuid\n - gce_id\n - gce_image\n - gce_machine_type\n - gce_private_ip\n - gce_public_ip\n - gce_name\n - gce_description\n - gce_status\n - gce_zone\n - gce_tags\n - gce_metadata\n - gce_network\n - gce_subnetwork\n\nWhen run in --list mode, instances are grouped by the following categories:\n - zone:\n   zone group name examples are us-central1-b, europe-west1-a, etc.\n - instance tags:\n   An entry is created for each tag.  For example, if you have two instances\n   with a common tag called 'foo', they will both be grouped together under\n   the 'tag_foo' name.\n - network name:\n   the name of the network is appended to 'network_' (e.g. the 'default'\n   network will result in a group named 'network_default')\n - machine type\n   types follow a pattern like n1-standard-4, g1-small, etc.\n - running status:\n   group name prefixed with 'status_' (e.g. status_running, status_stopped,..)\n - image:\n   when using an ephemeral/scratch disk, this will be set to the image name\n   used when creating the instance (e.g. debian-7-wheezy-v20130816).  when\n   your instance was created with a root persistent disk it will be set to\n   'persistent_disk' since there is no current way to determine the image.\n\nExamples:\n  Execute uname on all instances in the us-central1-a zone\n  $ ansible -i gce.py us-central1-a -m shell -a \"/bin/uname -a\"\n\n  Use the GCE inventory script to print out instance specific information\n  $ contrib/inventory/gce.py --host my_instance\n\nAuthor: Eric Johnson <erjohnso@google.com>\nContributors: Matt Hite <mhite@hotmail.com>, Tom Melendez <supertom@google.com>,\n              John Roach <johnroach1985@gmail.com>\nVersion: 0.0.4\n'''",
        "''' Determines if the cache files have expired, or if it is still valid '''",
        "''' Reads the JSON inventory from the cache file. Returns Python dictionary. '''",
        "''' Writes data to file as JSON.  Returns True. '''",
        "\"\"\"\n        Reads the settings from the gce.ini file.\n\n        Populates a SafeConfigParser object with defaults and\n        attempts to read an .ini-style configuration from the filename\n        specified in GCE_INI_PATH. If the environment variable is\n        not present, the filename defaults to gce.ini in the current\n        working directory.\n        \"\"\"",
        "\"\"\"Determine inventory options. Environment variables always\n        take precedence over configuration files.\"\"\"",
        "\"\"\"Determine the GCE authorization settings and return a list of\n        libcloud drivers.\n        \"\"\"",
        "'''returns a list of comma separated zones parsed from the GCE_ZONE environment variable.\n        If provided, this will be used to filter the results of the grouped_instances call'''",
        "''' Command line argument processing '''",
        "''' Loads inventory from JSON on disk. '''",
        "''' Do API calls and save data in cache. '''",
        "'''Group all instances'''",
        "''' Converts a dict to a JSON object and dumps it as a formatted\n        string '''"
    ],
    "functions": [
        "is_valid",
        "get_all_data_from_cache",
        "write_to_cache",
        "get_config",
        "get_inventory_options",
        "get_gce_drivers",
        "parse_env_zones",
        "parse_cli_args",
        "node_to_dict",
        "load_inventory_from_cache",
        "do_api_calls_update_cache",
        "list_nodes",
        "group_instances",
        "json_format_dict"
    ],
    "classes": [
        "CloudInventoryCache",
        "GceInventory"
    ]
}