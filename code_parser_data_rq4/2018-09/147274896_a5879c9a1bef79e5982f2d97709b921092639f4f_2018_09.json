{
    "identifiers": [
        "tensorflow",
        "tf",
        "numpy",
        "np",
        "math",
        "sess",
        "state_dim",
        "action_dim",
        "sess",
        "state_dim",
        "action_dim",
        "state_input",
        "action_output",
        "net",
        "create_network",
        "state_dim",
        "action_dim",
        "target_state_input",
        "target_action_output",
        "target_update",
        "target_net",
        "create_target_network",
        "state_dim",
        "action_dim",
        "net",
        "create_training_method",
        "sess",
        "run",
        "tf",
        "initialize_all_variables",
        "update_target",
        "tf",
        "placeholder",
        "action_dim",
        "tf",
        "gradients",
        "action_output",
        "net",
        "q_gradient_input",
        "tf",
        "train",
        "AdamOptimizer",
        "LEARNING_RATE",
        "apply_gradients",
        "parameters_gradients",
        "net",
        "state_dim",
        "action_dim",
        "LAYER1_SIZE",
        "LAYER2_SIZE",
        "tf",
        "placeholder",
        "state_dim",
        "variable",
        "state_dim",
        "layer1_size",
        "state_dim",
        "variable",
        "layer1_size",
        "state_dim",
        "variable",
        "layer1_size",
        "layer2_size",
        "layer1_size",
        "variable",
        "layer2_size",
        "layer1_size",
        "tf",
        "Variable",
        "tf",
        "random_uniform",
        "layer2_size",
        "action_dim",
        "tf",
        "Variable",
        "tf",
        "random_uniform",
        "action_dim",
        "tf",
        "nn",
        "relu",
        "tf",
        "matmul",
        "state_input",
        "W1",
        "b1",
        "tf",
        "nn",
        "relu",
        "tf",
        "matmul",
        "layer1",
        "W2",
        "b2",
        "tf",
        "tanh",
        "tf",
        "matmul",
        "layer2",
        "W3",
        "b3",
        "state_input",
        "action_output",
        "W1",
        "b1",
        "W2",
        "b2",
        "W3",
        "b3",
        "state_dim",
        "action_dim",
        "net",
        "tf",
        "placeholder",
        "state_dim",
        "tf",
        "train",
        "ExponentialMovingAverage",
        "decay",
        "TAU",
        "ema",
        "apply",
        "net",
        "ema",
        "average",
        "x",
        "x",
        "net",
        "tf",
        "nn",
        "relu",
        "tf",
        "matmul",
        "state_input",
        "target_net",
        "target_net",
        "tf",
        "nn",
        "relu",
        "tf",
        "matmul",
        "layer1",
        "target_net",
        "target_net",
        "tf",
        "tanh",
        "tf",
        "matmul",
        "layer2",
        "target_net",
        "target_net",
        "state_input",
        "action_output",
        "target_update",
        "target_net",
        "sess",
        "run",
        "target_update",
        "q_gradient_batch",
        "state_batch",
        "sess",
        "run",
        "net",
        "sess",
        "run",
        "optimizer",
        "feed_dict",
        "q_gradient_input",
        "q_gradient_batch",
        "state_input",
        "state_batch",
        "state_batch",
        "sess",
        "run",
        "action_output",
        "feed_dict",
        "state_input",
        "state_batch",
        "state",
        "sess",
        "run",
        "action_output",
        "feed_dict",
        "state_input",
        "state",
        "state_batch",
        "sess",
        "run",
        "target_action_output",
        "feed_dict",
        "target_state_input",
        "state_batch",
        "shape",
        "f",
        "tf",
        "Variable",
        "tf",
        "random_uniform",
        "shape",
        "math",
        "sqrt",
        "f",
        "math",
        "sqrt",
        "f",
        "tf",
        "train",
        "Saver",
        "tf",
        "train",
        "get_checkpoint_state",
        "checkpoint",
        "checkpoint",
        "model_checkpoint_path",
        "saver",
        "restore",
        "sess",
        "checkpoint",
        "model_checkpoint_path",
        "checkpoint",
        "model_checkpoint_path",
        "time_step",
        "tf",
        "train",
        "Saver",
        "time_step",
        "saver",
        "save",
        "sess",
        "global_step",
        "time_step"
    ],
    "literals": [
        "\"float\"",
        "\"float\"",
        "\"float\"",
        "\"saved_actor_networks_poten\"",
        "\"Successfully loaded:\"",
        "\"Could not find old network weights\"",
        "'save actor-network...'",
        "'saved_actor_networks_poten/'",
        "'actor-network'"
    ],
    "variables": [
        "LAYER1_SIZE",
        "LAYER2_SIZE",
        "LEARNING_RATE",
        "TAU",
        "BATCH_SIZE",
        "sess",
        "state_dim",
        "action_dim",
        "q_gradient_input",
        "parameters_gradients",
        "optimizer",
        "layer1_size",
        "layer2_size",
        "state_input",
        "W1",
        "b1",
        "W2",
        "b2",
        "W3",
        "b3",
        "layer1",
        "layer2",
        "action_output",
        "state_input",
        "ema",
        "target_update",
        "target_net",
        "layer1",
        "layer2",
        "action_output",
        "n",
        "saver",
        "checkpoint",
        "saver"
    ],
    "comments": [
        "Hyper Parameters",
        "create actor network",
        "create target actor network",
        "define training rules",
        "self.load_network()",
        "action_output = tf.nn.softmax(tf.matmul(layer2, W3) + b3)",
        "action_output = tf.nn.softmax(tf.matmul(layer2, target_net[4]) + target_net[5])",
        "print('w3:',n[4][0])",
        "f fan-in size"
    ],
    "docstrings": [
        "\"\"\"docstring for ActorNetwork\"\"\""
    ],
    "functions": [
        "create_training_method",
        "create_network",
        "create_target_network",
        "update_target",
        "train",
        "actions",
        "action",
        "target_actions",
        "variable",
        "load_network",
        "save_network"
    ],
    "classes": [
        "ActorNetwork"
    ]
}