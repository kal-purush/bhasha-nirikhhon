{
    "identifiers": [
        "logging",
        "random",
        "randint",
        "socket",
        "time",
        "threading",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_STREAM",
        "s",
        "s",
        "setsockopt",
        "socket",
        "SOL_SOCKET",
        "socket",
        "SO_REUSEADDR",
        "s",
        "bind",
        "s",
        "listen",
        "s",
        "accept",
        "threading",
        "target",
        "handler",
        "args",
        "c",
        "a",
        "daemon",
        "start",
        "connections",
        "append",
        "c",
        "peers",
        "append",
        "a",
        "send_peers",
        "c",
        "a",
        "c",
        "recv",
        "connection",
        "connections",
        "connection",
        "sendall",
        "data",
        "data",
        "connections",
        "remove",
        "c",
        "peers",
        "remove",
        "a",
        "c",
        "close",
        "send_peers",
        "peer",
        "peers",
        "p",
        "peer",
        "connection",
        "connections",
        "connection",
        "send",
        "p",
        "encode",
        "address",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_STREAM",
        "s",
        "s",
        "setsockopt",
        "socket",
        "SOL_SOCKET",
        "socket",
        "SO_REUSEADDR",
        "s",
        "connect",
        "address",
        "threading",
        "target",
        "send_message",
        "args",
        "s",
        "daemon",
        "start",
        "s",
        "recv",
        "decode",
        "data",
        "data",
        "update_peers",
        "data",
        "logging",
        "info",
        "format",
        "data",
        "staticmethod",
        "s",
        "input",
        "encode",
        "s",
        "sendall",
        "message",
        "staticmethod",
        "peer_data",
        "peer_data",
        "split",
        "logging",
        "basicConfig",
        "format",
        "level",
        "logging",
        "INFO",
        "datefmt",
        "time",
        "sleep",
        "randint",
        "peer",
        "Tracker",
        "peers",
        "Server",
        "Client",
        "peer"
    ],
    "literals": [
        "'127.0.0.1'",
        "''",
        "','",
        "b'\\x11'",
        "b'\\x11'",
        "'Received message: {}'",
        "'Enter message: '",
        "','",
        "'127.0.0.1'",
        "'__main__'",
        "'%(asctime)s %(levelname)-8s %(message)s'",
        "'%Y-%m-%d %H:%M:%S'"
    ],
    "variables": [
        "connections",
        "peers",
        "c",
        "a",
        "t",
        "data",
        "p",
        "p",
        "t",
        "data",
        "message",
        "Tracker",
        "peers",
        "peers",
        "server",
        "client"
    ],
    "comments": [
        "List of peers connected to the server. We broadcast this list out to sync our clients",
        "logging.info('Successfully started the server on port 10000.')",
        "logging.info('New client node joins pool.')",
        "logging.info('New node connected: {}:{}'.format(str(a[0]), str(a[1])))",
        "logging.info('Waiting for connections..')",
        "logging.info('Sending data: {}'.format(data.decode()))",
        "logging.info('Node disconnected: {}:{}'.format(str(a[0]), str(a[1])))",
        "logging.info('Successfully made a client connection at: {}. Listening..'.format(address))",
        "Message prefixed with \\x11, so we know it is a new node message",
        "Since the message received isn't prefixed with \\x11, we know it is a message",
        "logging.info('Sending message: {}'.format(message.decode()))",
        "logging.info('Node dropped/connected. Updating connected peers list.')",
        "One node will become a server randomly",
        "Server is already started. Becoming a client node"
    ],
    "docstrings": [
        "\"\"\"Sends the list of peers in the swarm to all connected peers.\"\"\"",
        "\"\"\"Sends a message to all connected nodes.\"\"\"",
        "\"\"\"Refreshes the local copy of all connected nodes.\"\"\"",
        "\"\"\"Tracks the Peers connected within the swarm.\n\n    This is a separate class due to data accessibility. We want to be able to access the peers list\n    from outside the Client and Server classes.\n    \"\"\""
    ],
    "functions": [
        "handler",
        "send_peers",
        "send_message",
        "update_peers"
    ],
    "classes": [
        "Server",
        "Client",
        "Tracker"
    ]
}