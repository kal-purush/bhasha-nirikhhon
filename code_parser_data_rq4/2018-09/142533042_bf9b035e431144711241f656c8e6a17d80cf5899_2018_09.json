{
    "identifiers": [
        "gluoncv",
        "gcv",
        "gluoncv",
        "utils",
        "export_block",
        "gcv",
        "model_zoo",
        "get_model",
        "pretrained",
        "export_block",
        "net",
        "preprocess",
        "layout",
        "glob",
        "glob",
        "glob",
        "glob",
        "glob",
        "gcv",
        "model_zoo",
        "get_model",
        "pretrained",
        "export_block",
        "net",
        "gcv",
        "model_zoo",
        "get_model",
        "pretrained",
        "export_block",
        "net",
        "gcv",
        "model_zoo",
        "get_model",
        "pretrained",
        "export_block",
        "net"
    ],
    "literals": [
        "'resnet18_v1'",
        "'resnet18_v1'",
        "'HWC'",
        "'Done.'",
        "'*.json'",
        "'*.params'",
        "'yolo3_darknet53_coco'",
        "'yolo3_darknet53_coco'",
        "'fcn_resnet50_ade'",
        "'fcn_resnet50_ade'",
        "'mask_rcnn_resnet50_v1b_coco'",
        "'mask_rcnn_resnet50_v1b_coco'"
    ],
    "variables": [
        "net",
        "net",
        "net",
        "net"
    ],
    "comments": [
        "",
        "First of all, we need a network to play with, a pre-trained one is perfect",
        "",
        ".. hint::",
        "",
        "Use ``preprocess=True`` will add a default preprocess layer above the network,",
        "which will subtract mean [123.675, 116.28, 103.53], divide",
        "std [58.395, 57.12, 57.375], and convert original image (B, H, W, C and range [0, 255]) to",
        "tensor (B, C, H, W) as network input. This is the default preprocess behavior of all GluonCV",
        "pre-trained models. With this preprocess head, you can use raw RGB image in C++ without",
        "explicitly applying these operations.",
        "",
        "The above code generates two files: xxxx.json and xxxx.params",
        "",
        "JSON file includes computational graph and params file includes pre-trained weights.",
        "",
        "The exportable networks are not limited to image classification models.",
        "We can export detection and segmentation networks as well:",
        "YOLO",
        "FCN",
        "MaskRCNN",
        "",
        "",
        "We are all set here. Please checkout the other tutorials of how to use the JSON and params files."
    ],
    "docstrings": [
        "\"\"\"1. Export trained GluonCV network to JSON\n============================================\n\nIt is awesome if you are enjoy using GluonCV in Python for training and testing.\nAt some point, you might ask: \"Is it possible to deploy the existing models to somewhere out of Python environments?\"\n\nThe answer is \"Absolutely!\", and it's super easy actually.\n\nThis article will show you how to export networks/models to be used somewhere other than Python.\n\n\"\"\""
    ],
    "functions": [],
    "classes": []
}