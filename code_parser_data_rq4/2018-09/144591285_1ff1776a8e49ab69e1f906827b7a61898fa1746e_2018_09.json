{
    "identifiers": [
        "iqa_common",
        "executor",
        "Command",
        "messaging_abstract",
        "component",
        "client",
        "command",
        "options",
        "client_options",
        "Command",
        "NotImplementedError",
        "property",
        "_build_command",
        "NotImplementedError",
        "opt_name",
        "opt_value",
        "__dict__",
        "items",
        "isinstance",
        "opt_value",
        "ClientOptionsBase",
        "all_options",
        "update",
        "opt_value",
        "to_dict",
        "valid_options",
        "opt_value",
        "valid_options",
        "opt",
        "generate",
        "all_options",
        "split",
        "opt",
        "valid_options",
        "opt",
        "satisfied",
        "all_options",
        "item",
        "param",
        "item",
        "param",
        "main_command",
        "params_flat",
        "ClientCommand",
        "stdout",
        "stderr",
        "daemon",
        "timeout",
        "encoding",
        "ClientCommand",
        "stdout",
        "stderr",
        "daemon",
        "timeout",
        "encoding",
        "ControlOptionsCommon",
        "LoggingOptionsCommon",
        "ConnectionOptionsCommon",
        "ConnectorOptions",
        "ClientCommand",
        "stdout",
        "stderr",
        "daemon",
        "timeout",
        "encoding",
        "ClientCommand",
        "stdout",
        "stderr",
        "daemon",
        "timeout",
        "encoding",
        "ControlOptionsReceiver",
        "LoggingOptionsSenderReceiver",
        "TransactionOptionsSenderReceiver",
        "ConnectionOptionsCommon",
        "LinkOptionsReceiver",
        "ReceiverOptions",
        "ReactorOptionsReceiver",
        "ClientCommand",
        "stdout",
        "stderr",
        "daemon",
        "timeout",
        "encoding",
        "ClientCommand",
        "stdout",
        "stderr",
        "daemon",
        "timeout",
        "encoding",
        "ControlOptionsSenderReceiver",
        "LoggingOptionsSenderReceiver",
        "TransactionOptionsSenderReceiver",
        "ConnectionOptionsCommon",
        "LinkOptionsSenderReceiver",
        "MessageOptionsSender",
        "ReactorOptionsSenderReceiver"
    ],
    "literals": [
        "' '",
        "\"utf-8\"",
        "\"utf-8\"",
        "\"utf-8\""
    ],
    "variables": [
        "all_options",
        "valid_options",
        "params_flat",
        "control",
        "logging",
        "connection",
        "connector",
        "control",
        "logging",
        "transaction",
        "connection",
        "link",
        "receiver",
        "reactor",
        "control",
        "logging",
        "transaction",
        "connection",
        "link",
        "message",
        "reactor"
    ],
    "comments": [
        "Skip members that are not an instance of ClientOptionsBase",
        "List of populated options",
        "Append list of valid options for each ClientOptionsBase implementation",
        "Generates parameters list (only allowed will be added)"
    ],
    "docstrings": [
        "\"\"\"\nAbstract (base) implementations of supported external client commands.\nAll options here are common to all kind of client commands, be it a\nreceiver, sender or connector.\nOptions are also common to implementation language (java, python, etc).\nIn case an implementation has a different set of options, specialize it\nin a separate module inside messaging.client.command.impl.\n\"\"\"",
        "\"\"\"\n    Base abstraction class for external clients commands. It encapsulates the args\n    property and getter generates a new list based on ClientCommand's\n    implementation details (based on states of internal ClientOptionsBase\n    properties).\n    \"\"\"",
        "\"\"\"\n        List of arguments needed to run the client implementation.\n        :return:\n        \"\"\"",
        "\"\"\"\n        Builds the external client command based on all\n        ClientOptionsBase properties available on implementing class,\n        using optconstruct to produce the arguments list.\n        :return:\n        \"\"\"",
        "\"\"\"\n    Abstract implementation of common Connector client options.\n    \"\"\"",
        "\"\"\"\n    Abstract implementation of common Receiver client options.\n    \"\"\"",
        "\"\"\"\n        Abstract implementation of common Sender client options.\n    \"\"\""
    ],
    "functions": [
        "args",
        "main_command",
        "_build_command"
    ],
    "classes": [
        "ClientCommand",
        "ConnectorClientCommand",
        "ReceiverClientCommand",
        "SenderClientCommand"
    ]
}