{
    "identifiers": [
        "java",
        "util",
        "java",
        "util",
        "adjacencyList",
        "numberOfVertex",
        "vertices",
        "numberOfVertex",
        "vs",
        "numberOfVertex",
        "i",
        "i",
        "numberOfVertex",
        "i",
        "vs",
        "i",
        "i",
        "k",
        "i",
        "i",
        "numberOfVertex",
        "i",
        "k",
        "adjacencyList",
        "length",
        "firstVertexId",
        "adjacencyList",
        "k",
        "i",
        "firstVertexId",
        "vertices",
        "add",
        "vs",
        "i",
        "i",
        "firstVertexId",
        "v",
        "vs",
        "i",
        "j",
        "j",
        "adjacencyList",
        "k",
        "length",
        "j",
        "v",
        "neighbors",
        "add",
        "vs",
        "adjacencyList",
        "k",
        "j",
        "vertices",
        "add",
        "v",
        "k",
        "vertices",
        "add",
        "vs",
        "i",
        "vertices",
        "vertices",
        "v",
        "vertices",
        "printf",
        "v",
        "v",
        "neighbors",
        "size",
        "printf",
        "i",
        "i",
        "v",
        "neighbors",
        "size",
        "i",
        "printf",
        "v",
        "neighbors",
        "get",
        "i",
        "printf",
        "v",
        "neighbors",
        "get",
        "v",
        "neighbors",
        "size",
        "printf"
    ],
    "literals": [
        "\"The adjacency lists do not matched the expected form\"",
        "\"Adjacency Lists representation of the graph:\"",
        "\"%s\"",
        "\" -> \"",
        "\"%s -> \"",
        "\"%s%n\"",
        "\"%n\"",
        "\"----------------------\""
    ],
    "variables": [],
    "comments": [
        "Add vertices that has no neighbor in the List"
    ],
    "docstrings": [
        "* The first vertex of each adjacency list must be in ascending order with id starting from 0.\n * For example:\n * {0, ...}\n * {1, ...}\n * {2, ...}\n * ...\n *\n * When building List<Vertex> vertices, all missing vertices that have no neighbor in their adjacencList will be added.\n * For example:\n * The inputted adjacencyList is:\n * 0 -> 1 -> 6 -> 8\n * 1 -> 4 -> 6 -> 9\n * 2 -> 4 -> 6\n * 3 -> 4 -> 5 -> 8\n * 4 -> 5 -> 9\n * 7 -> 8 -> 9\n * After calling this method, it will be converted to:\n * 0 -> 1 -> 6 -> 8\n * 1 -> 4 -> 6 -> 9\n * 2 -> 4 -> 6\n * 3 -> 4 -> 5 -> 8\n * 4 -> 5 -> 9\n * 5\n * 6\n * 7 -> 8 -> 9\n * 8\n * 9"
    ],
    "functions": [
        "build"
    ],
    "classes": [
        "AdjacencyList"
    ]
}