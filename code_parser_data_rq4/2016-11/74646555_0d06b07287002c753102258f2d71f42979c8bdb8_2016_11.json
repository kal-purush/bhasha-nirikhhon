{
    "identifiers": [
        "com",
        "rahuljanagouda",
        "wearsunshine",
        "android",
        "content",
        "BroadcastReceiver",
        "android",
        "content",
        "Context",
        "android",
        "content",
        "Intent",
        "android",
        "content",
        "IntentFilter",
        "android",
        "content",
        "res",
        "Resources",
        "android",
        "graphics",
        "Canvas",
        "android",
        "graphics",
        "Color",
        "android",
        "graphics",
        "Paint",
        "android",
        "graphics",
        "Rect",
        "android",
        "graphics",
        "Typeface",
        "android",
        "os",
        "Bundle",
        "android",
        "os",
        "Handler",
        "android",
        "os",
        "Message",
        "android",
        "support",
        "wearable",
        "watchface",
        "CanvasWatchFaceService",
        "android",
        "support",
        "wearable",
        "watchface",
        "WatchFaceStyle",
        "android",
        "view",
        "SurfaceHolder",
        "android",
        "view",
        "WindowInsets",
        "android",
        "widget",
        "Toast",
        "java",
        "lang",
        "WeakReference",
        "java",
        "util",
        "Calendar",
        "java",
        "util",
        "TimeZone",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "NORMAL_TYPEFACE",
        "Typeface",
        "create",
        "Typeface",
        "SANS_SERIF",
        "Typeface",
        "NORMAL",
        "INTERACTIVE_UPDATE_RATE_MS",
        "TimeUnit",
        "SECONDS",
        "toMillis",
        "MSG_UPDATE_TIME",
        "Override",
        "mWeakReference",
        "reference",
        "mWeakReference",
        "reference",
        "Override",
        "msg",
        "engine",
        "mWeakReference",
        "get",
        "engine",
        "msg",
        "what",
        "MSG_UPDATE_TIME",
        "engine",
        "handleUpdateTimeMessage",
        "mUpdateTimeHandler",
        "mRegisteredTimeZoneReceiver",
        "mBackgroundPaint",
        "mTextPaint",
        "mAmbient",
        "mCalendar",
        "mTimeZoneReceiver",
        "Override",
        "context",
        "intent",
        "mCalendar",
        "setTimeZone",
        "TimeZone",
        "getDefault",
        "invalidate",
        "mXOffset",
        "mYOffset",
        "mLowBitAmbient",
        "Override",
        "holder",
        "onCreate",
        "holder",
        "setWatchFaceStyle",
        "MyWatchFace",
        "setCardPeekMode",
        "WatchFaceStyle",
        "PEEK_MODE_VARIABLE",
        "setBackgroundVisibility",
        "WatchFaceStyle",
        "BACKGROUND_VISIBILITY_INTERRUPTIVE",
        "setShowSystemUiTime",
        "setAcceptsTapEvents",
        "build",
        "resources",
        "MyWatchFace",
        "getResources",
        "mYOffset",
        "resources",
        "getDimension",
        "R",
        "dimen",
        "digital_y_offset",
        "mBackgroundPaint",
        "mBackgroundPaint",
        "setColor",
        "resources",
        "getColor",
        "R",
        "color",
        "background",
        "mTextPaint",
        "mTextPaint",
        "createTextPaint",
        "resources",
        "getColor",
        "R",
        "color",
        "digital_text",
        "mCalendar",
        "Calendar",
        "getInstance",
        "Override",
        "mUpdateTimeHandler",
        "removeMessages",
        "MSG_UPDATE_TIME",
        "onDestroy",
        "textColor",
        "paint",
        "paint",
        "setColor",
        "textColor",
        "paint",
        "setTypeface",
        "NORMAL_TYPEFACE",
        "paint",
        "setAntiAlias",
        "paint",
        "Override",
        "visible",
        "onVisibilityChanged",
        "visible",
        "visible",
        "registerReceiver",
        "mCalendar",
        "setTimeZone",
        "TimeZone",
        "getDefault",
        "invalidate",
        "unregisterReceiver",
        "updateTimer",
        "mRegisteredTimeZoneReceiver",
        "mRegisteredTimeZoneReceiver",
        "Intent",
        "ACTION_TIMEZONE_CHANGED",
        "MyWatchFace",
        "registerReceiver",
        "mTimeZoneReceiver",
        "mRegisteredTimeZoneReceiver",
        "mRegisteredTimeZoneReceiver",
        "MyWatchFace",
        "unregisterReceiver",
        "mTimeZoneReceiver",
        "Override",
        "insets",
        "onApplyWindowInsets",
        "insets",
        "resources",
        "MyWatchFace",
        "getResources",
        "isRound",
        "insets",
        "isRound",
        "mXOffset",
        "resources",
        "getDimension",
        "isRound",
        "R",
        "dimen",
        "digital_x_offset_round",
        "R",
        "dimen",
        "digital_x_offset",
        "textSize",
        "resources",
        "getDimension",
        "isRound",
        "R",
        "dimen",
        "digital_text_size_round",
        "R",
        "dimen",
        "digital_text_size",
        "mTextPaint",
        "setTextSize",
        "textSize",
        "Override",
        "properties",
        "onPropertiesChanged",
        "properties",
        "mLowBitAmbient",
        "properties",
        "getBoolean",
        "PROPERTY_LOW_BIT_AMBIENT",
        "Override",
        "onTimeTick",
        "invalidate",
        "Override",
        "inAmbientMode",
        "onAmbientModeChanged",
        "inAmbientMode",
        "mAmbient",
        "inAmbientMode",
        "mAmbient",
        "inAmbientMode",
        "mLowBitAmbient",
        "mTextPaint",
        "setAntiAlias",
        "inAmbientMode",
        "invalidate",
        "updateTimer",
        "Override",
        "tapType",
        "x",
        "y",
        "eventTime",
        "tapType",
        "TAP_TYPE_TOUCH",
        "TAP_TYPE_TOUCH_CANCEL",
        "TAP_TYPE_TAP",
        "Toast",
        "makeText",
        "getApplicationContext",
        "R",
        "message",
        "Toast",
        "LENGTH_SHORT",
        "show",
        "invalidate",
        "Override",
        "canvas",
        "bounds",
        "isInAmbientMode",
        "canvas",
        "drawColor",
        "Color",
        "BLACK",
        "canvas",
        "drawRect",
        "bounds",
        "width",
        "bounds",
        "height",
        "mBackgroundPaint",
        "now",
        "currentTimeMillis",
        "mCalendar",
        "setTimeInMillis",
        "now",
        "text",
        "mAmbient",
        "format",
        "mCalendar",
        "get",
        "Calendar",
        "HOUR",
        "mCalendar",
        "get",
        "Calendar",
        "MINUTE",
        "format",
        "mCalendar",
        "get",
        "Calendar",
        "HOUR",
        "mCalendar",
        "get",
        "Calendar",
        "MINUTE",
        "mCalendar",
        "get",
        "Calendar",
        "SECOND",
        "canvas",
        "drawText",
        "text",
        "mXOffset",
        "mYOffset",
        "mTextPaint",
        "mUpdateTimeHandler",
        "removeMessages",
        "MSG_UPDATE_TIME",
        "shouldTimerBeRunning",
        "mUpdateTimeHandler",
        "sendEmptyMessage",
        "MSG_UPDATE_TIME",
        "isVisible",
        "isInAmbientMode",
        "invalidate",
        "shouldTimerBeRunning",
        "timeMs",
        "currentTimeMillis",
        "delayMs",
        "INTERACTIVE_UPDATE_RATE_MS",
        "timeMs",
        "INTERACTIVE_UPDATE_RATE_MS",
        "mUpdateTimeHandler",
        "sendEmptyMessageDelayed",
        "MSG_UPDATE_TIME",
        "delayMs"
    ],
    "literals": [
        "\"%d:%02d\"",
        "\"%d:%02d:%02d\""
    ],
    "variables": [
        "mWeakReference",
        "mBackgroundPaint",
        "mTextPaint",
        "mAmbient",
        "mCalendar",
        "mXOffset",
        "mYOffset",
        "mLowBitAmbient"
    ],
    "comments": [
        "Update time zone in case it changed while we weren't visible.",
        "Whether the timer should be running depends on whether we're visible (as well as",
        "whether we're in ambient mode), so we may need to start or stop the timer.",
        "Load resources that have alternate values for round watches.",
        "Whether the timer should be running depends on whether we're visible (as well as",
        "whether we're in ambient mode), so we may need to start or stop the timer.",
        "The user has started touching the screen.",
        "The user has started a different gesture or otherwise cancelled the tap.",
        "The user has completed the tap gesture.",
        "TODO: Add code to handle the tap gesture.",
        "Draw the background.",
        "Draw H:MM in ambient mode or H:MM:SS in interactive mode."
    ],
    "docstrings": [
        "* Copyright (C) 2014 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Digital watch face with seconds. In ambient mode, the seconds aren't displayed. On devices with\n * low-bit ambient mode, the text is drawn without anti-aliasing in ambient mode.",
        "* Update rate in milliseconds for interactive mode. We update once a second since seconds are\n     * displayed in interactive mode.",
        "* Handler message id for updating the time periodically in interactive mode.",
        "* Whether the display supports fewer bits for each color in ambient mode. When true, we\n         * disable anti-aliasing in ambient mode.",
        "* Captures tap event (and tap type) and toggles the background color if the user finishes\n         * a tap.",
        "* Starts the {@link #mUpdateTimeHandler} timer if it should be running and isn't currently\n         * or stops it if it shouldn't be running but currently is.",
        "* Returns whether the {@link #mUpdateTimeHandler} timer should be running. The timer should\n         * only run when we're visible and in interactive mode.",
        "* Handle updating the time periodically in interactive mode."
    ],
    "functions": [
        "Engine",
        "onCreateEngine",
        "EngineHandler",
        "handleMessage",
        "onReceive",
        "onCreate",
        "onDestroy",
        "Paint",
        "createTextPaint",
        "onVisibilityChanged",
        "registerReceiver",
        "unregisterReceiver",
        "onApplyWindowInsets",
        "onPropertiesChanged",
        "onTimeTick",
        "onAmbientModeChanged",
        "onTapCommand",
        "onDraw",
        "updateTimer",
        "shouldTimerBeRunning",
        "handleUpdateTimeMessage"
    ],
    "classes": [
        "MyWatchFace",
        "EngineHandler",
        "Engine"
    ]
}