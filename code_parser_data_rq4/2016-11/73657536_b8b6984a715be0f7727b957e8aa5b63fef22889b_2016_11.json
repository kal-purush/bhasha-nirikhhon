{
    "identifiers": [
        "Loader",
        "TemplateRegistryEntry",
        "LoaderPlugin",
        "address",
        "TextHandler",
        "filePath",
        "extension",
        "filePath",
        "advancedRequire",
        "filePath",
        "loader",
        "entry",
        "ensureOriginOnExports",
        "moduleExports",
        "moduleId",
        "Loader",
        "name",
        "moduleId",
        "id",
        "source",
        "moduleId",
        "relativeTo",
        "moduleId",
        "relativeTo",
        "templateLoader",
        "ids",
        "moduleId",
        "url",
        "url",
        "url",
        "pluginName",
        "pluginName",
        "implementation"
    ],
    "literals": [
        "'aurelia-loader'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "Options",
        "ExtensionHandlers"
    ],
    "comments": [
        "<reference types=\"lodash\" />"
    ],
    "docstrings": [
        "* An implementation of the TemplateLoader interface implemented with text-based loading.",
        "* Loads a template.\n    * @param loader The loader that is requesting the template load.\n    * @param entry The TemplateRegistryEntry to load and populate with a template.\n    * @return A promise which resolves when the TemplateRegistryEntry is loaded with a template.",
        "* A default implementation of the Loader abstraction which works with webpack (extended common-js style).",
        "* Maps a module id to a source.\n    * @param id The module id.\n    * @param source The source to map the module to.",
        "* Normalizes a module id.\n    * @param moduleId The module id to normalize.\n    * @param relativeTo What the module id should be normalized relative to.\n    * @return The normalized module id.",
        "* Normalizes a module id.\n    * @param moduleId The module id to normalize.\n    * @param relativeTo What the module id should be normalized relative to.\n    * @return The normalized module id.",
        "* Instructs the loader to use a specific TemplateLoader instance for loading templates\n    * @param templateLoader The instance of TemplateLoader to use for loading templates.",
        "* Loads a collection of modules.\n    * @param ids The set of module ids to load.\n    * @return A Promise for an array of loaded modules.",
        "* Loads a module.\n    * @param moduleId The module ID to load.\n    * @return A Promise for the loaded module.",
        "* Loads a template.\n    * @param url The url of the template to load.\n    * @return A Promise for a TemplateRegistryEntry containing the template.",
        "* Loads a text-based resource.\n    * @param url The url of the text file to load.\n    * @return A Promise for text content.",
        "* Alters a module id so that it includes a plugin loader.\n    * @param url The url of the module to load.\n    * @param pluginName The plugin to apply to the module id.\n    * @return The plugin-based module id.",
        "* Registers a plugin with the loader.\n    * @param pluginName The name of the plugin.\n    * @param implementation The plugin implementation."
    ],
    "functions": [],
    "classes": [
        "TextTemplateLoader",
        "WebpackLoader"
    ]
}