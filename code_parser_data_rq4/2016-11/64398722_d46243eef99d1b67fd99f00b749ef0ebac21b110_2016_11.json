{
    "identifiers": [
        "DeclarationInfo",
        "ExtensionConfig",
        "Injector",
        "DefaultDeclaration",
        "ModuleDeclaration",
        "TsDeclaration",
        "TsAliasedImport",
        "TsDefaultImport",
        "TsExternalModuleImport",
        "TsImport",
        "TsNamedImport",
        "TsNamespaceImport",
        "TsStringImport",
        "TsResolveSpecifier",
        "TsFile",
        "TsResourceParser",
        "getAbsolutLibraryName",
        "getImportInsertPosition",
        "getRelativeLibraryName",
        "TextDocument",
        "TextEdit",
        "workspace",
        "WorkspaceEdit",
        "strA",
        "strB",
        "strA",
        "strB",
        "strA",
        "strB",
        "i1",
        "i2",
        "i1",
        "i2",
        "stringSort",
        "strA",
        "strB",
        "i1",
        "i2",
        "stringSort",
        "i1",
        "i2",
        "Injector",
        "TsResourceParser",
        "Injector",
        "ExtensionConfig",
        "parsedDocument",
        "DocumentController",
        "DocumentController",
        "source",
        "declarationInfo",
        "o",
        "declarationInfo",
        "getAbsolutLibraryName",
        "o",
        "all",
        "cur",
        "cur",
        "TsNamedImport",
        "all",
        "cur",
        "o",
        "o",
        "o",
        "cur",
        "TsAliasedImport",
        "all",
        "cur",
        "all",
        "declarationInfo",
        "specifiers",
        "o",
        "o",
        "declarationInfo",
        "alreadyImported",
        "duplicateSpecifierFound",
        "declarationInfo",
        "TsNamedImport",
        "getRelativeLibraryName",
        "declarationInfo",
        "newImport",
        "TsResolveSpecifier",
        "declarationInfo",
        "newImport",
        "TextEdit",
        "getImportInsertPosition",
        "DocumentController",
        "newImport",
        "DocumentController",
        "duplicateSpecifierFound",
        "declarationInfo",
        "alias",
        "alias",
        "TsNamedImport",
        "getRelativeLibraryName",
        "declarationInfo",
        "newImport",
        "TsResolveSpecifier",
        "declarationInfo",
        "alias",
        "newImport",
        "TextEdit",
        "getImportInsertPosition",
        "DocumentController",
        "newImport",
        "DocumentController",
        "declarationInfo",
        "ModuleDeclaration",
        "TsNamespaceImport",
        "declarationInfo",
        "declarationInfo",
        "newImport",
        "TextEdit",
        "getImportInsertPosition",
        "DocumentController",
        "newImport",
        "DocumentController",
        "declarationInfo",
        "DefaultDeclaration",
        "declarationInfo",
        "alias",
        "alias",
        "TsDefaultImport",
        "getRelativeLibraryName",
        "declarationInfo",
        "alias",
        "newImport",
        "TextEdit",
        "getImportInsertPosition",
        "DocumentController",
        "newImport",
        "DocumentController",
        "alreadyImported",
        "TsDefaultImport",
        "declarationInfo",
        "DefaultDeclaration",
        "TsNamedImport",
        "getRelativeLibraryName",
        "declarationInfo",
        "newImport",
        "TsResolveSpecifier",
        "alreadyImported",
        "newImport",
        "TsResolveSpecifier",
        "declarationInfo",
        "alreadyImported",
        "newImport",
        "TextEdit",
        "alreadyImported",
        "newImport",
        "DocumentController",
        "alreadyImported",
        "TsNamedImport",
        "declarationInfo",
        "DefaultDeclaration",
        "declarationInfo",
        "alias",
        "alias",
        "alreadyImported",
        "TsResolveSpecifier",
        "alias",
        "TextEdit",
        "alreadyImported",
        "alreadyImported",
        "DocumentController",
        "alreadyImported",
        "TsNamedImport",
        "duplicateSpecifierFound",
        "alreadyImported",
        "TsResolveSpecifier",
        "declarationInfo",
        "TextEdit",
        "alreadyImported",
        "alreadyImported",
        "DocumentController",
        "alreadyImported",
        "TsNamedImport",
        "duplicateSpecifierFound",
        "declarationInfo",
        "alias",
        "alias",
        "alreadyImported",
        "TsResolveSpecifier",
        "declarationInfo",
        "alias",
        "TextEdit",
        "alreadyImported",
        "alreadyImported",
        "DocumentController",
        "actImport",
        "actImport",
        "TsNamespaceImport",
        "actImport",
        "TsExternalModuleImport",
        "actImport",
        "TsDefaultImport",
        "actImport",
        "keep",
        "actImport",
        "actImport",
        "TsNamedImport",
        "actImport",
        "actImport",
        "o",
        "o",
        "o",
        "specifierSort",
        "actImport",
        "keep",
        "actImport",
        "actImport",
        "TsStringImport",
        "keep",
        "actImport",
        "TextEdit",
        "actImport",
        "keep",
        "keep",
        "o",
        "o",
        "TsStringImport",
        "importSort",
        "keep",
        "o",
        "o",
        "TsStringImport",
        "importSort",
        "TextEdit",
        "getImportInsertPosition",
        "DocumentController",
        "keep",
        "all",
        "cur",
        "all",
        "cur",
        "DocumentController",
        "WorkspaceEdit",
        "workspaceEdit",
        "edits",
        "workspace",
        "workspaceEdit",
        "result",
        "DocumentController",
        "result",
        "declaration",
        "declaration",
        "ModuleDeclaration",
        "declaration",
        "DefaultDeclaration",
        "duplicate",
        "alias",
        "s",
        "s",
        "alias",
        "duplicate",
        "alias",
        "declarationName",
        "s",
        "s",
        "declarationName"
    ],
    "literals": [
        "'../caches/ResolveIndex'",
        "'../ExtensionConfig'",
        "'../IoC'",
        "'../models/TsDeclaration'",
        "'../models/TsImport'",
        "'../models/TsResolveSpecifier'",
        "'../models/TsResource'",
        "'../parser/TsResourceParser'",
        "'../utilities/ResolveIndexExtensions'",
        "'vscode'",
        "string",
        "string",
        "'default'",
        "'default'",
        "''",
        "string",
        "string",
        "string",
        "'Alias for specifier'",
        "'Please enter an alias for the specifier..'",
        "''",
        "'Please enter a variable name'",
        "string",
        "string",
        "'Default export name'",
        "'Please enter a variable name for the default export..'",
        "''",
        "'Please enter a variable name'"
    ],
    "variables": [
        "strA",
        "strB",
        "source",
        "alreadyImported",
        "specifiers",
        "duplicateSpecifierFound",
        "newImport",
        "newImport",
        "newImport",
        "newImport",
        "newImport",
        "keep",
        "edits",
        "workspaceEdit",
        "result",
        "alias"
    ],
    "comments": [],
    "docstrings": [
        "* Management class for a TextDocument. Can add and remove parts of the document\n * and commit the virtual document to the TextEditor.\n * \n * @export\n * @class DocumentController",
        "* Indicates if there are pending / uncommited edits.\n     * \n     * @readonly\n     * @type {boolean}\n     * @memberOf DocumentController",
        "* Creates an instance of a DocumentController.\n     * Does parse the document text first and returns a promise that\n     * resolves to a DocumentController.\n     * \n     * @static\n     * @param {TextDocument} document - The document that should be managed\n     * @returns {Promise<DocumentController>}\n     * \n     * @memberOf DocumentController",
        "* Adds an import for a declaration to the document.\n     * If it's a default import or there is a duplicate identifier, the controller will ask for the name on commit().\n     * \n     * @param {TsImport} imp - The import that should be added to the document\n     * @returns {DocumentController} - The controller instance\n     * \n     * @memberOf DocumentController",
        "* Organizes the imports of the document. Orders all imports and removes unused imports.\n     * Order:\n     * 1. string-only imports (e.g. import 'reflect-metadata')\n     * 2. rest, but in alphabetical order\n     * \n     * @returns {DocumentController} - The controller instance\n     * \n     * @memberOf DocumentController",
        "* Does commit the currently virtual document to the TextEditor.\n     * Returns a promise that resolves to a boolean if all changes\n     * could be applied.\n     * \n     * @returns {Promise<boolean>}\n     * \n     * @memberOf DocumentController",
        "* Checks if a declaration is \"abstract\". Meaning if the declaration is a default declaration\n     * or a module declaration (and therefore contains no real symbol).\n     * \n     * @private\n     * @param {TsDeclaration} declaration\n     * @returns {boolean}\n     * \n     * @memberOf DocumentController",
        "* Does resolve a duplicate specifier issue. Calls vscode inputbox as long as the inputted name\n     * does match the duplicates. (So the user needs to enter a different one)\n     * \n     * @private\n     * @param {string} duplicate\n     * @returns {Promise<string>}\n     * \n     * @memberOf DocumentController",
        "* Calls the vscode input box to ask for an indentifier for a default export.\n     * \n     * @private\n     * @param {string} declarationName\n     * @returns {Promise<string>}\n     * \n     * @memberOf DocumentController"
    ],
    "functions": [
        "stringSort",
        "importSort",
        "specifierSort",
        "parser",
        "config",
        "isDirty",
        "create",
        "addDeclarationImport",
        "organizeImports",
        "commit",
        "isAbstractDeclaration",
        "resolveDuplicateSpecifier",
        "getDefaultIdentifier"
    ],
    "classes": [
        "DocumentController"
    ]
}