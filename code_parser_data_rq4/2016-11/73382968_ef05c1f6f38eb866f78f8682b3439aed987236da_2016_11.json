{
    "identifiers": [
        "bwdm",
        "java",
        "io",
        "File",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "regex",
        "Matcher",
        "java",
        "util",
        "regex",
        "Pattern",
        "org",
        "overturetool",
        "vdmj",
        "Settings",
        "org",
        "overturetool",
        "vdmj",
        "definitions",
        "Definition",
        "org",
        "overturetool",
        "vdmj",
        "lex",
        "Dialect",
        "org",
        "overturetool",
        "vdmj",
        "lex",
        "LexException",
        "org",
        "overturetool",
        "vdmj",
        "lex",
        "LexTokenReader",
        "org",
        "overturetool",
        "vdmj",
        "syntax",
        "DefinitionReader",
        "org",
        "overturetool",
        "vdmj",
        "syntax",
        "ParserException",
        "directory",
        "vdmFileName",
        "vdmFilePath",
        "csvFileName",
        "csvFilePath",
        "argumentTypesJoined",
        "argumentTypes",
        "intNum",
        "natNum",
        "nat1Num",
        "formalArgumentsJoined",
        "formalArguments",
        "SuppressWarnings",
        "ifConditionsJoined",
        "ifConditionsJoinedInCameForward",
        "SuppressWarnings",
        "ifConditions",
        "SuppressWarnings",
        "preConditionsJoined",
        "SuppressWarnings",
        "preConditions",
        "_vdmFile",
        "_csvFile",
        "_directory",
        "vdmFileName",
        "_vdmFile",
        "csvFileName",
        "_csvFile",
        "directory",
        "_directory",
        "vdmFilePath",
        "directory",
        "vdmFileName",
        "csvFilePath",
        "directory",
        "csvFileName",
        "vdmFilePath",
        "csvFilePath",
        "initialize",
        "setFormalArgsJoined",
        "setFormalArguments",
        "initializeConditionsJoined",
        "setConditionsJoined",
        "initializeConditions",
        "setArgumentTypesJoined",
        "setArgumentTypes",
        "parseConditions",
        "ifConditionsDeleteOverlapped",
        "argumentTypes",
        "formalArguments",
        "ifConditionsJoined",
        "formalArguments",
        "size",
        "preConditionsJoined",
        "formalArguments",
        "size",
        "i",
        "i",
        "formalArguments",
        "size",
        "i",
        "ifConditionsJoined",
        "i",
        "preConditionsJoined",
        "i",
        "ifConditions",
        "formalArguments",
        "size",
        "preConditions",
        "formalArguments",
        "size",
        "i",
        "i",
        "ifConditionsJoined",
        "length",
        "i",
        "ifConditions",
        "i",
        "ifConditionsJoined",
        "i",
        "size",
        "preConditions",
        "i",
        "preConditionsJoined",
        "i",
        "size",
        "j",
        "j",
        "ifConditionsJoined",
        "i",
        "size",
        "j",
        "ifConditions",
        "i",
        "j",
        "j",
        "j",
        "preConditionsJoined",
        "i",
        "size",
        "j",
        "preConditions",
        "i",
        "j",
        "ltr",
        "vdmFilePath",
        "Settings",
        "dialect",
        "dr",
        "ltr",
        "it",
        "dr",
        "readDefinitions",
        "iterator",
        "it",
        "forEachRemaining",
        "d",
        "d",
        "kind",
        "equals",
        "argumentTypesJoined",
        "d",
        "getType",
        "toString",
        "substring",
        "d",
        "getType",
        "toString",
        "indexOf",
        "replaceAll",
        "formalArgs",
        "Settings",
        "dialect",
        "Dialect",
        "VDM_PP",
        "ltr_first",
        "ltr_first",
        "vdmFilePath",
        "Settings",
        "dialect",
        "functionName",
        "ltr_first",
        "getLast",
        "toString",
        "currentToken",
        "ltr_first",
        "nextToken",
        "toString",
        "currentToken",
        "equals",
        "tmp",
        "ltr_first",
        "nextToken",
        "toString",
        "tmp",
        "tmp",
        "equals",
        "tmp",
        "equals",
        "tmp",
        "equals",
        "tmp",
        "ltr_first",
        "nextToken",
        "toString",
        "tmp",
        "tmp",
        "equals",
        "tmp",
        "equals",
        "tmp",
        "equals",
        "functionName",
        "ltr_first",
        "nextToken",
        "toString",
        "functionName",
        "functionName",
        "tmp",
        "functionName",
        "functionName",
        "tmp",
        "ltr_first",
        "close",
        "ltr_second",
        "vdmFilePath",
        "Settings",
        "dialect",
        "functionAppearTimes",
        "ltr_second",
        "getLast",
        "toString",
        "currentToken",
        "ltr_second",
        "nextToken",
        "toString",
        "currentToken",
        "equals",
        "functionName",
        "functionAppearTimes",
        "functionAppearTimes",
        "ltr_second",
        "getLast",
        "toString",
        "formalArgs",
        "formalArgs",
        "ltr_second",
        "nextToken",
        "toString",
        "functionAppearTimes",
        "ltr_second",
        "close",
        "formalArgumentsJoined",
        "formalArgs",
        "replace",
        "replace",
        "argumentTypesJoined",
        "equals",
        "exit",
        "argumentTypesJoined",
        "indexOf",
        "splitArgs",
        "argumentTypesJoined",
        "replace",
        "split",
        "splitArg",
        "splitArgs",
        "argumentTypes",
        "add",
        "splitArg",
        "argumentTypes",
        "add",
        "argumentTypesJoined",
        "replace",
        "replace",
        "intNum",
        "getArgumentsNumberByKind",
        "argumentTypesJoined",
        "natNum",
        "getArgumentsNumberByKind",
        "argumentTypesJoined",
        "nat1Num",
        "getArgumentsNumberByKind",
        "argumentTypesJoined",
        "natNum",
        "natNum",
        "nat1Num",
        "formalArgumentsJoined",
        "equals",
        "formalArguments",
        "add",
        "formalArgumentsJoined",
        "indexOf",
        "splitArgs",
        "formalArgumentsJoined",
        "split",
        "splitArg",
        "splitArgs",
        "formalArguments",
        "add",
        "splitArg",
        "formalArguments",
        "add",
        "formalArgumentsJoined",
        "replace",
        "replace",
        "argument",
        "kind",
        "num",
        "s",
        "p",
        "Pattern",
        "compile",
        "kind",
        "m",
        "p",
        "matcher",
        "argument",
        "m",
        "find",
        "s",
        "num",
        "s",
        "m",
        "end",
        "num",
        "SuppressWarnings",
        "ifConditionsJoinedTmp",
        "preConditionsjoinedTmp",
        "Settings",
        "dialect",
        "Dialect",
        "VDM_PP",
        "SuppressWarnings",
        "ltr",
        "vdmFilePath",
        "Settings",
        "dialect",
        "ltr",
        "getLast",
        "toString",
        "equals",
        "currentToken",
        "ltr",
        "nextToken",
        "toString",
        "tmpStr",
        "currentToken",
        "equals",
        "currentToken",
        "equals",
        "tmpStr",
        "ltr",
        "getLast",
        "toString",
        "tmpStr",
        "tmpStr",
        "ltr",
        "nextToken",
        "toString",
        "tmpStr",
        "contains",
        "tmpStr",
        "contains",
        "exit",
        "ifConditionsJoinedTmp",
        "add",
        "tmpStr",
        "replace",
        "replace",
        "currentToken",
        "equals",
        "tmpStr",
        "ltr",
        "getLast",
        "toString",
        "tmpStr",
        "tmpStr",
        "ltr",
        "nextToken",
        "toString",
        "tmpStr",
        "contains",
        "tmpStr",
        "contains",
        "exit",
        "preConditionsjoinedTmp",
        "add",
        "tmpStr",
        "replace",
        "replace",
        "ifConditionsJoinedInCameForward",
        "ifConditionsJoinedTmp",
        "fa",
        "AnalyzedData",
        "getFormalArguments",
        "i",
        "i",
        "ifConditionsJoinedTmp",
        "size",
        "i",
        "j",
        "j",
        "fa",
        "size",
        "j",
        "ifConditionsJoinedTmp",
        "get",
        "i",
        "contains",
        "fa",
        "get",
        "j",
        "ifConditionsJoined",
        "j",
        "add",
        "ifConditionsJoinedTmp",
        "get",
        "i",
        "toString",
        "SuppressWarnings",
        "ifOrPre",
        "ifOrPre",
        "equals",
        "i",
        "i",
        "ifConditions",
        "length",
        "i",
        "j",
        "j",
        "ifConditionsJoined",
        "i",
        "size",
        "j",
        "ifConditionsJoined",
        "i",
        "get",
        "j",
        "toString",
        "contains",
        "index",
        "ifConditionsJoined",
        "i",
        "get",
        "j",
        "toString",
        "indexOf",
        "indexOfEqual",
        "ifConditionsJoined",
        "i",
        "get",
        "j",
        "toString",
        "indexOf",
        "ifConditions",
        "i",
        "j",
        "put",
        "ifConditionsJoined",
        "i",
        "get",
        "j",
        "toString",
        "substring",
        "index",
        "ifConditions",
        "i",
        "j",
        "put",
        "ifConditions",
        "i",
        "j",
        "get",
        "toString",
        "indexOfEqual",
        "ifConditions",
        "i",
        "j",
        "put",
        "ifConditionsJoined",
        "i",
        "get",
        "j",
        "toString",
        "substring",
        "index",
        "ifConditions",
        "i",
        "j",
        "get",
        "toString",
        "length",
        "indexOfEqual",
        "ifConditions",
        "i",
        "j",
        "put",
        "ifConditionsJoined",
        "i",
        "get",
        "j",
        "toString",
        "substring",
        "indexOfEqual",
        "ifConditions",
        "i",
        "j",
        "put",
        "getLeftHandString",
        "ifConditionsJoined",
        "i",
        "get",
        "j",
        "toString",
        "ifConditions",
        "i",
        "j",
        "put",
        "getSymbol",
        "ifConditionsJoined",
        "i",
        "get",
        "j",
        "toString",
        "ifConditions",
        "i",
        "j",
        "put",
        "getRightHandString",
        "ifConditionsJoined",
        "i",
        "get",
        "j",
        "toString",
        "i",
        "j",
        "i",
        "i",
        "preConditions",
        "length",
        "i",
        "j",
        "j",
        "preConditionsJoined",
        "i",
        "size",
        "j",
        "preConditions",
        "i",
        "j",
        "put",
        "getLeftHandString",
        "preConditionsJoined",
        "i",
        "get",
        "j",
        "toString",
        "preConditions",
        "i",
        "j",
        "put",
        "getSymbol",
        "preConditionsJoined",
        "i",
        "get",
        "j",
        "toString",
        "preConditions",
        "i",
        "j",
        "put",
        "getRightHandString",
        "preConditionsJoined",
        "i",
        "get",
        "j",
        "toString",
        "i",
        "j",
        "condition",
        "condition",
        "indexOf",
        "condition",
        "indexOf",
        "condition",
        "indexOf",
        "condition",
        "indexOf",
        "condition",
        "index",
        "condition",
        "indexOf",
        "index",
        "condition",
        "indexOf",
        "condition",
        "indexOf",
        "index",
        "condition",
        "indexOf",
        "condition",
        "indexOf",
        "index",
        "condition",
        "indexOf",
        "condition",
        "indexOf",
        "index",
        "condition",
        "indexOf",
        "condition",
        "substring",
        "index",
        "condition",
        "ifOrPre",
        "conditionLinePosition",
        "conditionColumnPosition",
        "index",
        "condition",
        "indexOf",
        "index",
        "condition",
        "indexOf",
        "condition",
        "indexOf",
        "index",
        "condition",
        "indexOf",
        "condition",
        "indexOf",
        "index",
        "condition",
        "indexOf",
        "condition",
        "indexOf",
        "index",
        "condition",
        "indexOf",
        "ifOrPre",
        "equals",
        "condition",
        "substring",
        "index",
        "ifConditions",
        "conditionLinePosition",
        "conditionColumnPosition",
        "get",
        "toString",
        "length",
        "condition",
        "substring",
        "index",
        "preConditions",
        "conditionLinePosition",
        "conditionColumnPosition",
        "get",
        "toString",
        "length",
        "vdmFilePath",
        "csvFilePath",
        "argumentTypes",
        "size",
        "argumentTypesJoined",
        "i",
        "i",
        "argumentTypes",
        "size",
        "i",
        "argumentTypes",
        "get",
        "i",
        "intNum",
        "natNum",
        "nat1Num",
        "formalArguments",
        "size",
        "formalArgumentsJoined",
        "i",
        "i",
        "formalArguments",
        "size",
        "i",
        "formalArguments",
        "get",
        "i",
        "conditionStr",
        "ifConditionsJoinedInCameForward",
        "conditionStr",
        "i",
        "i",
        "ifConditionsJoined",
        "length",
        "i",
        "formalArguments",
        "get",
        "i",
        "j",
        "j",
        "ifConditionsJoined",
        "i",
        "size",
        "j",
        "ifConditionsJoined",
        "i",
        "get",
        "j",
        "i",
        "i",
        "ifConditions",
        "length",
        "i",
        "formalArguments",
        "get",
        "i",
        "j",
        "j",
        "ifConditions",
        "i",
        "length",
        "j",
        "ifConditions",
        "i",
        "j",
        "get",
        "equals",
        "ifConditions",
        "i",
        "j",
        "get",
        "ifConditions",
        "i",
        "j",
        "get",
        "ifConditions",
        "i",
        "j",
        "get",
        "ifConditions",
        "i",
        "j",
        "get",
        "ifConditions",
        "i",
        "j",
        "get",
        "ifConditions",
        "i",
        "j",
        "get",
        "ifConditions",
        "i",
        "j",
        "get",
        "_bvt",
        "currentPosition",
        "currentPosition",
        "_bvt",
        "size",
        "currentPosition",
        "_bvt",
        "size",
        "currentElement",
        "_bvt",
        "get",
        "currentPosition",
        "currentElement",
        "currentElement",
        "contains",
        "currentElement",
        "contains",
        "currentElement",
        "contains",
        "currentElement",
        "contains",
        "actuallyValueOf_currentElement",
        "currentElement",
        "actuallyValueOf_currentElement",
        "MIN_VALUE",
        "actuallyValueOf_currentElement",
        "MAX_VALUE",
        "actuallyValueOf_currentElement",
        "actuallyValueOf_currentElement",
        "actuallyValueOf_currentElement",
        "actuallyValueOf_currentElement",
        "exit",
        "actuallyValueOf_currentElement",
        "i",
        "i",
        "_bvt",
        "size",
        "i",
        "actuallyValueOf_currentElement",
        "_bvt",
        "get",
        "i",
        "valueOf",
        "actuallyValueOf_currentElement",
        "equals",
        "_bvt",
        "get",
        "i",
        "i",
        "currentPosition",
        "_bvt",
        "get",
        "i",
        "_bvt",
        "remove",
        "i",
        "currentPosition",
        "_bvt",
        "size",
        "recursiveRemoverOfOverlappedElement",
        "_bvt",
        "currentPosition",
        "i",
        "i",
        "_bvt",
        "size",
        "i",
        "currentElement",
        "equals",
        "_bvt",
        "get",
        "i",
        "i",
        "currentPosition",
        "_bvt",
        "get",
        "i",
        "_bvt",
        "remove",
        "i",
        "currentPosition",
        "_bvt",
        "size",
        "recursiveRemoverOfOverlappedElement",
        "_bvt",
        "currentPosition",
        "vdmFilePath",
        "csvFilePath",
        "argumentTypes",
        "formalArguments",
        "ifConditionsJoined",
        "ifConditions",
        "preConditions",
        "ifConditionsJoinedInCameForward"
    ],
    "literals": [
        "\"rawtypes\"",
        "\"rawtypes\"",
        "\"rawtypes\"",
        "\"rawtypes\"",
        "\"if\"",
        "\"explicit function\"",
        "\"->\"",
        "\" \"",
        "\"\"",
        "\"\"",
        "\"end\"",
        "\"functions\"",
        "\"public\"",
        "\"private\"",
        "\"static\"",
        "\"public\"",
        "\"private\"",
        "\"static\"",
        "\"IF\"",
        "\"ELSE:\"",
        "\"end\"",
        "\")\"",
        "\"(\"",
        "\"\"",
        "\")\"",
        "\"\"",
        "\"()\"",
        "\"引数0個です。処理を終了します。境界値テスト必要ですか？\"",
        "\"*\"",
        "\"*\"",
        "\",\"",
        "\",\"",
        "\"(\"",
        "\"\"",
        "\")\"",
        "\"\"",
        "\"int\"",
        "\"nat\"",
        "\"nat1\"",
        "\"()\"",
        "\"NONE\"",
        "\",\"",
        "\",\"",
        "\"(\"",
        "\"\"",
        "\")\"",
        "\"\"",
        "\"unchecked\"",
        "\"resource\"",
        "\"end\"",
        "\"if\"",
        "\"elseif\"",
        "\")\"",
        "\"or\"",
        "\"and\"",
        "\"複合if条件式については未対応です。悪しからず。\"",
        "\"(\"",
        "\"\"",
        "\")\"",
        "\"\"",
        "\"pre\"",
        "\")\"",
        "\"or\"",
        "\"and\"",
        "\"複合if条件式については未対応です。悪しからず。\"",
        "\"(\"",
        "\"\"",
        "\")\"",
        "\"\"",
        "\"unchecked\"",
        "\"if\"",
        "\"mod\"",
        "\"mod\"",
        "\"=\"",
        "\"LeftHand\"",
        "\"Symbol\"",
        "\"mod\"",
        "\"Symbol\"",
        "\"  \"",
        "\"RightHand\"",
        "\"Symbol\"",
        "\"Surplus\"",
        "\"LeftHand\"",
        "\"Symbol\"",
        "\"RightHand\"",
        "\"if\"",
        "\"LeftHand\"",
        "\"Symbol\"",
        "\"RightHand\"",
        "\"if\"",
        "\"<=\"",
        "\"<=\"",
        "\">=\"",
        "\">=\"",
        "\"<\"",
        "\"<\"",
        "\">\"",
        "\">\"",
        "\"other\"",
        "\"<=\"",
        "\"<=\"",
        "\">=\"",
        "\">=\"",
        "\"<\"",
        "\"<\"",
        "\">\"",
        "\">\"",
        "\"<=\"",
        "\"<=\"",
        "\">=\"",
        "\">=\"",
        "\"<\"",
        "\"<\"",
        "\">\"",
        "\">\"",
        "\"if\"",
        "\"Symbol\"",
        "\"Symbol\"",
        "\"Files information\"",
        "\"vdmFilePath:\"",
        "\"csvFilePath:\"",
        "\"\\n\"",
        "\"Type information.\"",
        "\"There are \"",
        "\" argumentTypes\"",
        "\"argumentTypesJoined:\"",
        "\"argumentTypes:\"",
        "\", \"",
        "\"\\nintNum:\"",
        "\", natNum:\"",
        "\", nat1Num:\"",
        "\"\\nFormalArgument information.\"",
        "\"There are \"",
        "\" formalArguments\"",
        "\"formalArgumentsJoined:\"",
        "\"formalArguments:\"",
        "\", \"",
        "\"\\n\\nIfCondition information.\"",
        "\"ifConditionsJoinedInCameForward:\"",
        "\", \"",
        "\"\\nifConditionsJoined:\"",
        "\"formalArgment:\"",
        "\" -> \"",
        "\", \"",
        "\"ifConditions:\\n\"",
        "\"formalArgment:\"",
        "\" -> \"",
        "\"Symbol\"",
        "\"mod\"",
        "\"LeftHand\"",
        "\", \"",
        "\"Symbol\"",
        "\", \"",
        "\"RightHand\"",
        "\", \"",
        "\"Surplus\"",
        "\"LeftHand\"",
        "\", \"",
        "\"Symbol\"",
        "\", \"",
        "\"RightHand\"",
        "\", \"",
        "\"currentPosition:\"",
        "\", _bvt.size()\"",
        "\"currentElement\"",
        "\"Min\"",
        "\"Max\"",
        "\"Min-1\"",
        "\"Max+1\"",
        "\"Min or Maxなう\"",
        "\"intMin\"",
        "\"intMax\"",
        "\"natMin\"",
        "\"natMax\"",
        "\"nat1Min\"",
        "\"nat1Max\"",
        "\"想定外の入力値 処理終了 at BoundaryValueAnalyze\"",
        "\"switchわず\"",
        "\"&&&\"",
        "\" was overlapped. Removed.\"",
        "\" was overlapped. Removed.\""
    ],
    "variables": [
        "argumentTypes",
        "formalArguments",
        "ifConditionsJoined",
        "ifConditionsJoinedInCameForward",
        "ifConditions",
        "preConditionsJoined",
        "preConditions",
        "tmpStr"
    ],
    "comments": [
        "ファイル名、パス",
        "型情報",
        "引数型のばらす前 int*nat*nat1",
        "引数型 int nat nat1...",
        "それぞれの型の数",
        "仮引数情報",
        "仮引数のばらす前 a,b,c",
        "仮引数 a b c...",
        "if条件文情報",
        "上から仮引数1つ目、2つ目...で格納してる",
        "ifConditionsJoined = {\"4<a\", \"a<7\",",
        "\"-3<b\",\"b>100\",\"0<b\",",
        "\"c<10\",\"3<c\",\"c>-29\",\"c<-40\"};",
        "という感じ",
        "入力値をifConditionsについてtrue/false判定するときに",
        "条件文の来た順が必要だった(吉川ツールが来た順に並んでるため)",
        "条件文を演算子と両辺の3つに分解",
        "ifConditions = {\"4\", \"<a\", \"a\", \"<\", \"7\"",
        "\"-3\", \"<\", \"b\", \"b\", \">\", \"100\",\"0\", \"<\", \"b\",",
        "\"c\", \"<\", \"10\",\"3\", \"<\", \"c\",\"c\", \">\", \"-29\",\"c\", \"<\" ,\"-40\"};",
        "事前条件文情報 中身はif条件文情報と似た感じ",
        "事前条件文",
        "条件文を演算子と両辺の3つに分解",
        "アトリビュートの初期化",
        "但し",
        "仮引数情報の取得",
        "if文＆事前条件文情報の取得",
        "if条件文情報の初期化及び取得",
        "parseConditions(\"pre\"); //事前条件は未実装",
        "引数型 int nat nat1...",
        "仮引数 a b c...",
        "配列の個数は仮引数の分だけある",
        "System.out.println(formalArguments.size());",
        "字句解析を二回行い、仮引数列を取り出す",
        "一回目のvdmファイル読み込み",
        "関数名を読み込む",
        "class定義終了まで",
        "関数定義が来たら",
        "二回目のvdmファイル読み込み",
        "一回目の読み込みで見つけた関数名が",
        "二回目に登場した直後に仮引数が来る",
        "class定義終了まで",
        "関数定義が来たら",
        "thenが来るまでの間",
        "()ならすぐおしまい",
        "argumentTypes.add(0, \"()\");",
        "return;",
        "引数が複数個の場合",
        "System.out.print(splitArg+\" \");",
        "引数が１つの場合",
        "()ならすぐおしまい",
        "引数が複数個の場合",
        ",で分ける",
        "System.out.print(splitArg+\" \");",
        "引数が１つの場合",
        "if条件文と事前条件文を入れる",
        "どちらも条件文が()で囲まれてないといけない",
        "class定義終了まで",
        "System.out.println(currentToken);",
        "ifかelseifが来たら",
        "thenが来るまでの間",
        "System.out.println(tmpStr);",
        "preが来たら",
        "thenが来るまでの間",
        "for(String str : ifConditionsJoinedInCameForward){",
        "for(int i=0; i<ifConditionsJoinedInCameForward.size(); i++){",
        "}",
        "}",
        "仮引数毎に整理してifConditionJoined[n]に入れる",
        "System.out.println(ifConditionsJoinedTmp.get(i)+\" \"+fa.get(j));",
        "mod用の分割処理",
        "System.out.print(getLeftHandString(ifConditionsJoined[i].get(j).toString()));",
        "System.out.print(getSymbol(ifConditionsJoined[i].get(j).toString()));",
        "System.out.println(getRightHandString(ifConditionsJoined[i].get(i).toString(), \"if\", i, j));",
        "引数がMinかMaxだったら(Min-1とMax+1は除く)",
        "if( (currentElement.equals(_bvt.get(i))) && (i != currentPosition) ){"
    ],
    "docstrings": [
        "使う前に初期化してから使うこと！",
        "*Joinedを受け取ってargumentTypesをセットする人",
        "*と,を入れ替えて,で分ける *のままだと正規表現の関係で上手く行かなかった",
        "*Joinedを受け取ってformalArgumentsをセットする人",
        "*\n\t\t * if条件文が被ってたらそれを消す処理\n\t\t *",
        "* 事前条件はオミット\n\t\t\t\tif(preConditionsjoinedTmp.get(i).toString().matches(\".*\"+fa.get(j)+\"*.\")){\n\t\t\t\t\tSystem.out.println(preConditionsjoinedTmp.get(i).toString()+\" is has \"+ fa.get(j));\n\t\t\t\t\tifConditionsJoined[j].add(preConditionsjoinedTmp.get(i).toString());\n\t\t\t\t}",
        "事前条件はまだ封印\n\t\tSystem.out.println(\"\\npreCondition information.\");\n\t\tSystem.out.print(\"preConditionsJoined:\");\n\t\tfor(int i=0; i<preConditions.length; i++){ //ifConditionsはジャグ配列 注意！\n\t\t\tfor(int j=0; j<ifConditions[i].length; j++){\n\t\t\t\tSystem.out.print(ifConditions[i][j]+\" \");\n\t\t\t}\n\t\t}",
        "* ifConditionsJoined\n\t\t * ifConditionsJoinedInCameForward\n\t\t * ifConditions\n\t\t * から重複しているif条件文を削除する"
    ],
    "functions": [
        "AnalyzedData",
        "initialize",
        "initializeConditionsJoined",
        "initializeConditions",
        "setArgumentTypesJoined",
        "setFormalArgsJoined",
        "setArgumentTypes",
        "setFormalArguments",
        "getArgumentsNumberByKind",
        "setConditionsJoined",
        "parseConditions",
        "getSymbol",
        "getLeftHandString",
        "getRightHandString",
        "printInformation",
        "ifConditionsDeleteOverlapped",
        "recursiveRemoverOfOverlappedElement",
        "getVdmFilePath",
        "getCsvFilePath",
        "getArgumentTypes",
        "getFormalArguments",
        "getIfConditionsJoined",
        "getIfConditions",
        "getPreConditions",
        "getIfConditionsJoinedInCameForward"
    ],
    "classes": [
        "AnalyzedData"
    ]
}