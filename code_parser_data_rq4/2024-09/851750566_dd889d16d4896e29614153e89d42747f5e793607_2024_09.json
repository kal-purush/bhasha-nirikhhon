{
    "identifiers": [
        "argparse",
        "RNS",
        "configpath",
        "reticulum",
        "RNS",
        "Reticulum",
        "configpath",
        "RNS",
        "LOG_DEBUG",
        "RNS",
        "Identity",
        "RNS",
        "Destination",
        "server_identity",
        "RNS",
        "Destination",
        "IN",
        "RNS",
        "Destination",
        "SINGLE",
        "APP_NAME",
        "RNS",
        "hexrep",
        "echo_destination",
        "hash",
        "delimit",
        "echo_destination",
        "enable_ratchets",
        "destination_hexhash",
        "echo_destination",
        "set_proof_strategy",
        "RNS",
        "Destination",
        "PROVE_ALL",
        "echo_destination",
        "set_packet_callback",
        "server_callback",
        "announceLoop",
        "echo_destination",
        "destination",
        "RNS",
        "log",
        "RNS",
        "prettyhexrep",
        "destination",
        "hash",
        "input",
        "destination",
        "announce",
        "RNS",
        "log",
        "RNS",
        "prettyhexrep",
        "destination",
        "hash",
        "message",
        "packet",
        "reticulum",
        "reticulum",
        "is_connected_to_shared_instance",
        "reticulum",
        "get_packet_rssi",
        "packet",
        "packet_hash",
        "reticulum",
        "get_packet_snr",
        "packet",
        "packet_hash",
        "reception_rssi",
        "reception_stats",
        "reception_rssi",
        "reception_snr",
        "reception_stats",
        "reception_snr",
        "packet",
        "rssi",
        "reception_stats",
        "packet",
        "rssi",
        "packet",
        "snr",
        "reception_stats",
        "packet",
        "snr",
        "RNS",
        "log",
        "reception_stats",
        "destination_hexhash",
        "configpath",
        "timeout",
        "reticulum",
        "RNS",
        "Reticulum",
        "TRUNCATED_HASHLENGTH",
        "len",
        "destination_hexhash",
        "dest_len",
        "ValueError",
        "format",
        "hex",
        "dest_len",
        "dest_len",
        "fromhex",
        "destination_hexhash",
        "e",
        "RNS",
        "log",
        "RNS",
        "log",
        "e",
        "exit",
        "RNS",
        "Reticulum",
        "configpath",
        "RNS",
        "loglevel",
        "RNS",
        "LOG_INFO",
        "RNS",
        "LOG_INFO",
        "RNS",
        "log",
        "destination_hexhash",
        "input",
        "RNS",
        "Transport",
        "has_path",
        "destination_hash",
        "RNS",
        "Identity",
        "recall",
        "destination_hash",
        "RNS",
        "Destination",
        "server_identity",
        "RNS",
        "Destination",
        "OUT",
        "RNS",
        "Destination",
        "SINGLE",
        "APP_NAME",
        "RNS",
        "Packet",
        "request_destination",
        "RNS",
        "Identity",
        "get_random_hash",
        "echo_request",
        "send",
        "timeout",
        "packet_receipt",
        "set_timeout",
        "timeout",
        "packet_receipt",
        "set_timeout_callback",
        "packet_timed_out",
        "packet_receipt",
        "set_delivery_callback",
        "packet_delivered",
        "RNS",
        "log",
        "RNS",
        "prettyhexrep",
        "request_destination",
        "hash",
        "RNS",
        "log",
        "RNS",
        "log",
        "RNS",
        "Transport",
        "request_path",
        "destination_hash",
        "receipt",
        "reticulum",
        "receipt",
        "status",
        "RNS",
        "PacketReceipt",
        "DELIVERED",
        "receipt",
        "get_rtt",
        "rtt",
        "round",
        "rtt",
        "rtt",
        "round",
        "rtt",
        "rtt",
        "reticulum",
        "is_connected_to_shared_instance",
        "reticulum",
        "get_packet_rssi",
        "receipt",
        "proof_packet",
        "packet_hash",
        "reticulum",
        "get_packet_snr",
        "receipt",
        "proof_packet",
        "packet_hash",
        "reception_rssi",
        "reception_stats",
        "reception_rssi",
        "reception_snr",
        "reception_stats",
        "reception_snr",
        "receipt",
        "proof_packet",
        "receipt",
        "proof_packet",
        "rssi",
        "reception_stats",
        "receipt",
        "proof_packet",
        "rssi",
        "receipt",
        "proof_packet",
        "snr",
        "reception_stats",
        "receipt",
        "proof_packet",
        "snr",
        "RNS",
        "log",
        "RNS",
        "prettyhexrep",
        "receipt",
        "destination",
        "hash",
        "rttstring",
        "reception_stats",
        "receipt",
        "receipt",
        "status",
        "RNS",
        "PacketReceipt",
        "FAILED",
        "RNS",
        "log",
        "RNS",
        "prettyhexrep",
        "receipt",
        "hash",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "parse_args",
        "args",
        "server",
        "args",
        "config",
        "args",
        "config",
        "server",
        "configarg",
        "args",
        "config",
        "args",
        "config",
        "args",
        "timeout",
        "args",
        "timeout",
        "args",
        "destination",
        "parser",
        "print_help",
        "client",
        "args",
        "destination",
        "configarg",
        "timeout",
        "timeoutarg",
        "KeyboardInterrupt",
        "exit"
    ],
    "literals": [
        "\"example_utilities\"",
        "\"ratchet\"",
        "\"echo\"",
        "\"request\"",
        "f\"/tmp/{destination_hexhash}.ratchets\"",
        "\"Ratcheted echo server \"",
        "\" running, hit enter to manually send an announce (Ctrl-C to quit)\"",
        "\"Sent announce from \"",
        "\"\"",
        "\" [RSSI \"",
        "\" dBm]\"",
        "\" [SNR \"",
        "\" dBm]\"",
        "\" [RSSI \"",
        "\" dBm]\"",
        "\" [SNR \"",
        "\" dB]\"",
        "\"Received packet from echo client, proof sent\"",
        "\"Destination length is invalid, must be {hex} hexadecimal characters ({byte} bytes).\"",
        "\"Invalid destination entered. Check your input!\"",
        "\"\\n\"",
        "\"Echo client ready, hit enter to send echo request to \"",
        "\" (Ctrl-C to quit)\"",
        "\"ratchet\"",
        "\"echo\"",
        "\"request\"",
        "\"Sent echo request to \"",
        "\"Destination is not yet known. Requesting path...\"",
        "\"Hit enter to manually retry once an announce is received.\"",
        "\" seconds\"",
        "\" milliseconds\"",
        "\"\"",
        "\" [RSSI \"",
        "\" dBm]\"",
        "\" [SNR \"",
        "\" dB]\"",
        "\" [RSSI \"",
        "\" dBm]\"",
        "\" [SNR \"",
        "\" dB]\"",
        "\"Valid reply received from \"",
        "\", round-trip time is \"",
        "\"Packet \"",
        "\" timed out\"",
        "\"__main__\"",
        "\"Simple ratcheted echo server and client utility\"",
        "\"-s\"",
        "\"--server\"",
        "\"store_true\"",
        "\"wait for incoming packets from clients\"",
        "\"-t\"",
        "\"--timeout\"",
        "\"store\"",
        "\"s\"",
        "\"set a reply timeout in seconds\"",
        "\"--config\"",
        "\"store\"",
        "\"path to alternative Reticulum config directory\"",
        "\"destination\"",
        "\"?\"",
        "\"hexadecimal hash of the server destination\"",
        "\"\"",
        "\"\"",
        "\"\""
    ],
    "variables": [
        "APP_NAME",
        "reticulum",
        "RNS",
        "loglevel",
        "server_identity",
        "echo_destination",
        "destination_hexhash",
        "entered",
        "reception_stats",
        "reception_rssi",
        "reception_snr",
        "dest_len",
        "destination_hash",
        "reticulum",
        "RNS",
        "loglevel",
        "server_identity",
        "request_destination",
        "echo_request",
        "packet_receipt",
        "rtt",
        "rtt",
        "rttstring",
        "rtt",
        "rttstring",
        "reception_stats",
        "reception_rssi",
        "reception_snr",
        "parser",
        "args",
        "configarg",
        "configarg",
        "configarg",
        "configarg",
        "timeoutarg",
        "timeoutarg"
    ],
    "comments": [
        "",
        "This RNS example demonstrates a simple client/server   #",
        "echo utility that uses ratchets to rotate encryption   #",
        "keys everytime an announce is sent.                    #",
        "",
        "Let's define an app name. We'll use this for all",
        "destinations we create. Since this echo example",
        "is part of a range of example utilities, we'll put",
        "them all within the app namespace \"example_utilities\"",
        "",
        "Server Part #########################################",
        "",
        "This initialisation is executed when the users chooses",
        "to run as a server",
        "We must first initialise Reticulum",
        "TODO: Remove",
        "Randomly create a new identity for our echo server",
        "We create a destination that clients can query. We want",
        "to be able to verify echo replies to our clients, so we",
        "create a \"single\" destination that can receive encrypted",
        "messages. This way the client can send a request and be",
        "certain that no-one else than this destination was able",
        "to read it.",
        "Enable ratchets on the destination by providing a file",
        "path to store ratchets. In this example, we will just",
        "use a temporary file, but in real-world applications,",
        "it's extremely important to keep this file secure, since",
        "it contains encryption keys for the destination.",
        "We configure the destination to automatically prove all",
        "packets addressed to it. By doing this, RNS will automatically",
        "generate a proof for each incoming packet and transmit it",
        "back to the sender of that packet.",
        "Tell the destination which function in our program to",
        "run when a packet is received. We do this so we can",
        "print a log message when the server receives a request",
        "Everything's ready!",
        "Let's Wait for client requests or user input",
        "Let the user know that everything is ready",
        "We enter a loop that runs until the users exits.",
        "If the user hits enter, we will announce our server",
        "destination on the network, which will let clients",
        "know how to create messages directed towards it.",
        "Tell the user that we received an echo request, and",
        "that we are going to send a reply to the requester.",
        "Sending the proof is handled automatically, since we",
        "set up the destination to prove all incoming packets.",
        "",
        "Client Part #########################################",
        "",
        "This initialisation is executed when the users chooses",
        "to run as a client",
        "We need a binary representation of the destination",
        "hash that was entered on the command line",
        "We must first initialise Reticulum",
        "We override the loglevel to provide feedback when",
        "an announce is received",
        "Tell the user that the client is ready!",
        "We enter a loop that runs until the user exits.",
        "If the user hits enter, we will try to send an",
        "echo request to the destination specified on the",
        "command line.",
        "Let's first check if RNS knows a path to the destination.",
        "If it does, we'll load the server identity and create a packet",
        "To address the server, we need to know it's public",
        "key, so we check if Reticulum knows this destination.",
        "This is done by calling the \"recall\" method of the",
        "Identity module. If the destination is known, it will",
        "return an Identity instance that can be used in",
        "outgoing destinations.",
        "We got the correct identity instance from the",
        "recall method, so let's create an outgoing",
        "destination. We use the naming convention:",
        "example_utilities.ratchet.echo.request",
        "This matches the naming we specified in the",
        "server part of the code.",
        "The destination is ready, so let's create a packet.",
        "We set the destination to the request_destination",
        "that was just created, and the only data we add",
        "is a random hash.",
        "Send the packet! If the packet is successfully",
        "sent, it will return a PacketReceipt instance.",
        "If the user specified a timeout, we set this",
        "timeout on the packet receipt, and configure",
        "a callback function, that will get called if",
        "the packet times out.",
        "We can then set a delivery callback on the receipt.",
        "This will get automatically called when a proof for",
        "this specific packet is received from the destination.",
        "Tell the user that the echo request was sent",
        "If we do not know this destination, tell the",
        "user to wait for an announce to arrive.",
        "This function is called when our reply destination",
        "receives a proof packet.",
        "This function is called if a packet times out.",
        "",
        "Program Startup #####################################",
        "",
        "This part of the program gets run at startup,",
        "and parses input from the user, and then starts",
        "the desired program mode."
    ],
    "docstrings": [],
    "functions": [
        "server",
        "announceLoop",
        "server_callback",
        "client",
        "packet_delivered",
        "packet_timed_out"
    ],
    "classes": []
}