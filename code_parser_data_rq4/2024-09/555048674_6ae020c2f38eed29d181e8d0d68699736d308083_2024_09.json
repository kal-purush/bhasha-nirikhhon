{
    "identifiers": [
        "hasRejections",
        "getFormattedErrors",
        "ALL_SETTLED_STATUS",
        "describe",
        "it",
        "expect",
        "hasRejections",
        "results",
        "it",
        "ALL_SETTLED_STATUS",
        "expect",
        "hasRejections",
        "results",
        "it",
        "ALL_SETTLED_STATUS",
        "expect",
        "hasRejections",
        "results",
        "it",
        "ALL_SETTLED_STATUS",
        "ALL_SETTLED_STATUS",
        "ALL_SETTLED_STATUS",
        "expect",
        "hasRejections",
        "results",
        "it",
        "ALL_SETTLED_STATUS",
        "ALL_SETTLED_STATUS",
        "ALL_SETTLED_STATUS",
        "expect",
        "hasRejections",
        "results",
        "it",
        "ALL_SETTLED_STATUS",
        "ALL_SETTLED_STATUS",
        "ALL_SETTLED_STATUS",
        "ALL_SETTLED_STATUS",
        "expect",
        "hasRejections",
        "results",
        "describe",
        "it",
        "expect",
        "getFormattedErrors",
        "results",
        "it",
        "ALL_SETTLED_STATUS",
        "expect",
        "getFormattedErrors",
        "results",
        "it",
        "ALL_SETTLED_STATUS",
        "expect",
        "getFormattedErrors",
        "results",
        "it",
        "ALL_SETTLED_STATUS",
        "expect",
        "getFormattedErrors",
        "results",
        "it",
        "ALL_SETTLED_STATUS",
        "ALL_SETTLED_STATUS",
        "ALL_SETTLED_STATUS",
        "expect",
        "getFormattedErrors",
        "results",
        "it",
        "ALL_SETTLED_STATUS",
        "ALL_SETTLED_STATUS",
        "ALL_SETTLED_STATUS",
        "ALL_SETTLED_STATUS",
        "expect",
        "getFormattedErrors",
        "results"
    ],
    "literals": [
        "'./promise-allsettled-helpers'",
        "'hasRejections'",
        "'should return false when the provided array is empty'",
        "'should return true when the provided array has a single rejected promise'",
        "'error'",
        "'should return false when the provided array has a single fulfilled promise'",
        "'success'",
        "'should return false when the provided array has all successful promises'",
        "'success1'",
        "'success2'",
        "'success3'",
        "'should return true when the provided array has all rejected promises'",
        "'error1'",
        "'error2'",
        "'error3'",
        "'should return true when the provided array has mixed fulfilled and rejected promises'",
        "'error1'",
        "'success1'",
        "'error2'",
        "'success2'",
        "'getFormattedErrors'",
        "'should return an empty string when no promise results are given'",
        "''",
        "'should return an empty string when a single successful result is given'",
        "'success'",
        "''",
        "'should return the error message when a single error result is given'",
        "'error'",
        "'1.) error'",
        "'should handle rejected promise with an empty error message'",
        "''",
        "'1.) '",
        "'should return all error messages when multiple rejected promises are given'",
        "'error1'",
        "'error2'",
        "'error3'",
        "'1.) error1, 2.) error2, 3.) error3'",
        "'should return all error messages in the expected format when an array of successful and rejected promises is given'",
        "'success1'",
        "'error1'",
        "'success2'",
        "'error2'",
        "'1.) error1, 2.) error2'"
    ],
    "variables": [
        "results",
        "results",
        "results",
        "results",
        "results",
        "results",
        "results",
        "results",
        "results",
        "results",
        "results",
        "results"
    ],
    "comments": [
        "eslint-disable-next-line max-len"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}