{
    "identifiers": [
        "annotations",
        "typing",
        "Callable",
        "Type",
        "astx",
        "pytest",
        "astx",
        "operators",
        "BinaryOp",
        "UnaryOp",
        "astx",
        "variables",
        "Variable",
        "Variable",
        "astx",
        "LiteralFloat64",
        "astx",
        "LiteralFloat32",
        "astx",
        "LiteralFloat16",
        "Variable",
        "Variable",
        "BinaryOp",
        "op_code",
        "lhs",
        "var_a",
        "rhs",
        "var_b",
        "pytest",
        "mark",
        "parametrize",
        "FLOAT_LITERAL_CLASSES",
        "literal_class",
        "Type",
        "astx",
        "Literal",
        "literal_class",
        "literal_class",
        "BinaryOp",
        "op_code",
        "lhs",
        "lit_a",
        "rhs",
        "lit_b",
        "pytest",
        "mark",
        "parametrize",
        "literal_class",
        "VAR_A",
        "literal_class",
        "literal_class",
        "VAR_A",
        "literal_class",
        "literal_class",
        "VAR_A",
        "literal_class",
        "literal_class",
        "VAR_A",
        "literal_class",
        "literal_class",
        "VAR_A",
        "literal_class",
        "literal_class",
        "VAR_A",
        "literal_class",
        "literal_class",
        "VAR_A",
        "literal_class",
        "literal_class",
        "VAR_A",
        "literal_class",
        "literal_class",
        "VAR_A",
        "literal_class",
        "literal_class",
        "VAR_A",
        "literal_class",
        "literal_class",
        "VAR_A",
        "literal_class",
        "literal_class",
        "VAR_A",
        "literal_class",
        "literal_class",
        "VAR_A",
        "literal_class",
        "pytest",
        "mark",
        "parametrize",
        "FLOAT_LITERAL_CLASSES",
        "literal_class",
        "Type",
        "astx",
        "Literal",
        "fn_bin_op",
        "Callable",
        "Type",
        "astx",
        "Literal",
        "BinaryOp",
        "op_code",
        "fn_bin_op",
        "literal_class",
        "bin_op",
        "op_code",
        "op_code",
        "bin_op",
        "repr",
        "bin_op",
        "bin_op",
        "get_struct",
        "bin_op",
        "get_struct",
        "simplified",
        "pytest",
        "mark",
        "parametrize",
        "literal_class",
        "literal_class",
        "literal_class",
        "literal_class",
        "pytest",
        "mark",
        "parametrize",
        "FLOAT_LITERAL_CLASSES",
        "literal_class",
        "Type",
        "astx",
        "Literal",
        "fn_unary_op",
        "Callable",
        "Type",
        "astx",
        "Literal",
        "UnaryOp",
        "op_code",
        "fn_unary_op",
        "literal_class",
        "unary_op",
        "op_code",
        "op_code",
        "unary_op",
        "repr",
        "unary_op",
        "unary_op",
        "get_struct",
        "unary_op",
        "get_struct",
        "simplified"
    ],
    "literals": [
        "\"a\"",
        "\"a\"",
        "\"b\"",
        "\"+\"",
        "\"literal_class\"",
        "\"+\"",
        "\"fn_bin_op,op_code\"",
        "\"+\"",
        "\"-\"",
        "\"/\"",
        "\"//\"",
        "\"*\"",
        "\"^\"",
        "\">=\"",
        "\">\"",
        "\"<=\"",
        "\"<\"",
        "\"==\"",
        "\"!=\"",
        "\"%\"",
        "\"literal_class\"",
        "\"\"",
        "\"\"",
        "\"fn_unary_op,op_code\"",
        "\"+\"",
        "\"-\"",
        "\"literal_class\"",
        "\"\"",
        "\"\""
    ],
    "variables": [
        "VAR_A",
        "FLOAT_LITERAL_CLASSES",
        "var_a",
        "var_b",
        "lit_a",
        "lit_b",
        "bin_op",
        "unary_op"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"Tests for float data types.\"\"\"",
        "\"\"\"Test variable float.\"\"\"",
        "\"\"\"Test float literals.\"\"\"",
        "\"\"\"Test binary operations.\"\"\"",
        "\"\"\"Test unary operations.\"\"\""
    ],
    "functions": [
        "test_variable",
        "test_literal",
        "test_bin_ops",
        "test_unary_ops"
    ],
    "classes": []
}