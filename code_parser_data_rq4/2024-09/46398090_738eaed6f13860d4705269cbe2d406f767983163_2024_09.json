{
    "identifiers": [
        "com",
        "linkedin",
        "metadata",
        "dao",
        "throttle",
        "com",
        "linkedin",
        "metadata",
        "dao",
        "throttle",
        "ThrottleType",
        "MANUAL",
        "com",
        "linkedin",
        "metadata",
        "dao",
        "throttle",
        "ThrottleType",
        "MCL_TIMESERIES_LAG",
        "com",
        "linkedin",
        "metadata",
        "dao",
        "throttle",
        "ThrottleType",
        "MCL_VERSIONED_LAG",
        "io",
        "datahubproject",
        "metadata",
        "context",
        "OperationContext",
        "io",
        "datahubproject",
        "metadata",
        "context",
        "RequestContext",
        "java",
        "util",
        "Comparator",
        "java",
        "util",
        "Objects",
        "java",
        "util",
        "java",
        "util",
        "stream",
        "Collectors",
        "javax",
        "annotation",
        "Nonnull",
        "javax",
        "annotation",
        "nl",
        "basjes",
        "parse",
        "useragent",
        "UserAgent",
        "nl",
        "basjes",
        "parse",
        "useragent",
        "UserAgentAnalyzer",
        "AGENT_EXEMPTIONS",
        "of",
        "UAA",
        "UserAgentAnalyzer",
        "newBuilder",
        "hideMatcherLoadStats",
        "withField",
        "UserAgent",
        "AGENT_CLASS",
        "withCache",
        "build",
        "Nonnull",
        "opContext",
        "throttleEvents",
        "isTimeseries",
        "eventMatchMaxWaitMs",
        "eventMatchMaxWaitMs",
        "throttleEvents",
        "isTimeseries",
        "eventMatchMaxWaitMs",
        "isEmpty",
        "isExempt",
        "opContext",
        "getRequestContext",
        "eventMatchMaxWaitMs",
        "stream",
        "max",
        "Comparator",
        "naturalOrder",
        "orElse",
        "throttleEvents",
        "requestContext",
        "requestContext",
        "requestContext",
        "getUserAgent",
        "requestContext",
        "getUserAgent",
        "isEmpty",
        "ua",
        "UAA",
        "parse",
        "requestContext",
        "getUserAgent",
        "AGENT_EXEMPTIONS",
        "contains",
        "ua",
        "get",
        "UserAgent",
        "AGENT_CLASS",
        "getValue",
        "throttleEvents",
        "isTimeseries",
        "throttleEvents",
        "of",
        "throttleEvents",
        "stream",
        "e",
        "e",
        "getActiveThrottleMaxWaitMs",
        "of",
        "MANUAL",
        "isTimeseries",
        "MCL_TIMESERIES_LAG",
        "MCL_VERSIONED_LAG",
        "Objects",
        "nonNull",
        "collect",
        "Collectors",
        "toSet"
    ],
    "literals": [
        "\"Browser\"",
        "\"Throttled due to \""
    ],
    "variables": [],
    "comments": [
        "Exclude internal calls"
    ],
    "docstrings": [
        "* This method is expected to be called on sync ingest requests for both timeseries or versioned\n   * aspects.\n   *\n   * <p>1. Async requests are never expected to be throttled here. 2. UI requests are not expected\n   * to be throttled, so we'll try to detect browser vs non-browser activity. 3. Throttling\n   * exceptions are expected to be caught by the API implementation and converted to a 429 http\n   * status code\n   *\n   * @param opContext the operation context\n   * @param throttleEvents the throttle state\n   * @param isTimeseries whether the operation is for timeseries or not (throttled separately)"
    ],
    "functions": [
        "APIThrottle",
        "evaluate",
        "isExempt",
        "eventMatchMaxWaitMs"
    ],
    "classes": [
        "APIThrottle"
    ]
}