{
    "identifiers": [
        "argparse",
        "builtins",
        "os",
        "sys",
        "yaml",
        "socket",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "choices",
        "help",
        "parser",
        "add_argument_group",
        "required",
        "add_argument",
        "help",
        "required",
        "add_argument",
        "help",
        "required",
        "add_argument",
        "help",
        "parser",
        "add_argument_group",
        "srun_required",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "args",
        "parser",
        "config",
        "open",
        "config",
        "f",
        "yaml",
        "load",
        "f",
        "Loader",
        "yaml",
        "FullLoader",
        "yconf",
        "config",
        "config",
        "k",
        "env",
        "keys",
        "result",
        "append",
        "k",
        "join",
        "result",
        "config",
        "config",
        "k",
        "v",
        "env",
        "items",
        "os",
        "environ",
        "v",
        "config",
        "config",
        "k",
        "v",
        "env",
        "items",
        "result",
        "append",
        "k",
        "v",
        "join",
        "result",
        "config",
        "config",
        "config",
        "config",
        "config",
        "cmd",
        "dry_run",
        "os",
        "path",
        "dirname",
        "os",
        "path",
        "abspath",
        "sys",
        "path",
        "append",
        "script_dir",
        "command",
        "Command",
        "Command",
        "cmd",
        "fake",
        "dry_run",
        "cmd",
        "exec_cmd",
        "rc",
        "expr",
        "expr",
        "stop",
        "c",
        "o",
        "s",
        "find",
        "s",
        "find",
        "s",
        "find",
        "c",
        "o",
        "c",
        "b",
        "s",
        "find",
        "c",
        "len",
        "l",
        "l",
        "pop",
        "c",
        "o",
        "c",
        "b",
        "l",
        "s",
        "s",
        "find",
        "c",
        "s",
        "s",
        "find",
        "c",
        "l",
        "l",
        "s",
        "split",
        "i",
        "len",
        "l",
        "l",
        "i",
        "strip",
        "l",
        "expr",
        "expr",
        "find",
        "expr",
        "find",
        "open_br",
        "open_br",
        "close_br",
        "expr",
        "split",
        "open_br",
        "close_br",
        "expr",
        "open_br",
        "close_br",
        "expr",
        "open_br",
        "rangestr",
        "split",
        "r",
        "ranges",
        "r",
        "split",
        "len",
        "cur",
        "len",
        "cur",
        "idx",
        "cur",
        "cur",
        "host_list",
        "append",
        "node",
        "pre",
        "format",
        "idx",
        "len",
        "cur",
        "len",
        "cur",
        "host_list",
        "append",
        "node",
        "pre",
        "format",
        "cur",
        "host_list",
        "expr",
        "split_on_commas",
        "expr",
        "e",
        "l",
        "host_list",
        "expand_host_list_sub",
        "e",
        "host_list",
        "execute_cmd",
        "rc",
        "split",
        "entry",
        "strip",
        "entry",
        "input_list",
        "entry",
        "strip",
        "e",
        "supported_pm",
        "e",
        "cleaned_list",
        "parse_args",
        "args",
        "config",
        "parser",
        "format_help",
        "exit",
        "parse_config",
        "args",
        "config",
        "set_env",
        "mnode",
        "args",
        "launcher",
        "is_srun_pm_supported",
        "join",
        "supported_pm",
        "parser",
        "format_help",
        "exit",
        "mnode",
        "exit",
        "args",
        "provider",
        "no_addr_prov",
        "args",
        "num_procs",
        "socket",
        "gethostname",
        "args",
        "provider",
        "args",
        "capability",
        "mnode",
        "args",
        "iterations",
        "args",
        "launcher",
        "lower",
        "args",
        "num_procs",
        "socket",
        "gethostname",
        "args",
        "provider",
        "args",
        "capability",
        "mnode",
        "args",
        "iterations",
        "args",
        "launcher",
        "lower",
        "args",
        "launcher",
        "lower",
        "mpi_env",
        "mnode",
        "mpi_mca_params",
        "mnode",
        "mpi_bind_to",
        "mnode",
        "mpi_map_by",
        "mnode",
        "args",
        "num_procs",
        "cmd",
        "args",
        "launcher",
        "lower",
        "args",
        "procs_per_node",
        "args",
        "num_procs",
        "parser",
        "format_help",
        "exit",
        "args",
        "procs_per_node",
        "args",
        "num_procs",
        "cmd",
        "args",
        "launcher",
        "lower",
        "args",
        "procs_per_node",
        "parser",
        "format_help",
        "exit",
        "join",
        "expand_host_list",
        "os",
        "environ",
        "hl",
        "args",
        "procs_per_node",
        "args",
        "provider",
        "args",
        "capability",
        "args",
        "iterations",
        "mnode",
        "args",
        "ci",
        "mpi",
        "args",
        "ci",
        "parser",
        "format_help",
        "exit",
        "execute_cmd",
        "mpi",
        "args",
        "dry_run",
        "rc"
    ],
    "literals": [
        "\"libfabric multinode test with slurm\"",
        "'--dry-run'",
        "'store_true'",
        "'Perform a dry run without making any changes.'",
        "\"--ci\"",
        "\"Commands to prepend to test call. Only used with the internal launcher option\"",
        "\"\"",
        "\"-C\"",
        "\"--capability\"",
        "\"libfabric capability\"",
        "\"msg\"",
        "\"-i\"",
        "\"--iterations\"",
        "\"Number of iterations\"",
        "\"-l\"",
        "\"--launcher\"",
        "'internal'",
        "'srun'",
        "'mpirun'",
        "\"launcher to use for running job. If nothing is specified, test manages processes internally. Available options: internal, srun and mpirun\"",
        "\"internal\"",
        "\"Required arguments\"",
        "\"-p\"",
        "\"--provider\"",
        "\"libfabric provider\"",
        "\"-np\"",
        "\"--num-procs\"",
        "\"Map process by node, l3cache, etc\"",
        "\"-c\"",
        "\"--config\"",
        "\"Test configuration\"",
        "\"Required if using srun\"",
        "\"-t\"",
        "\"--procs-per-node\"",
        "\"Number of procs per node\"",
        "\"r\"",
        "'environment'",
        "f\"-x {k}\"",
        "\" \"",
        "'environment'",
        "'mca'",
        "f\"--mca {k} {v}\"",
        "\" \"",
        "\"\"",
        "f\"--bind-to {config['bind-to']}\"",
        "'bind-to'",
        "\"--bind-to core\"",
        "f\"--map-by ppr:{config['map-by-count']}:{config['map-by']}\"",
        "'map-by-count'",
        "'map-by'",
        "\"--map-by ppr:1:l3\"",
        "'['",
        "']'",
        "','",
        "','",
        "','",
        "','",
        "','",
        "'['",
        "']'",
        "','",
        "','",
        "'-'",
        "\"{:0%dd}\"",
        "f'{node}{pre.format(idx)}'",
        "\"{:0%dd}\"",
        "f'{node}{pre.format(int(cur[0]))}'",
        "'pmi'",
        "'pmi2'",
        "'pmix'",
        "'srun --mpi=list'",
        "'\\n'",
        "'__main__'",
        "'cxi'",
        "\"**A configuration file is required\"",
        "'multinode'",
        "'srun'",
        "f\"**Supported process managers are: {','.join(supported_pm)}\"",
        "','",
        "\"pattern\"",
        "\"Test pattern must be defined in the YAML configuration file\"",
        "f\"fi_multinode -n {args.num_procs} -s {socket.gethostname()} \"",
        "f\"-p {args.provider} -C {args.capability} -z {mnode['pattern']} \"",
        "'pattern'",
        "f\"-I {args.iterations} -u {args.launcher.lower()} -E -T\"",
        "f\"fi_multinode -n {args.num_procs} -s {socket.gethostname()} \"",
        "f\"-p {args.provider} -C {args.capability} -z '{mnode['pattern']}' \"",
        "'pattern'",
        "f\"-I {args.iterations} -u {args.launcher.lower()} -T\"",
        "'mpirun'",
        "f\"mpirun {mpi_env(mnode)} {mpi_mca_params(mnode)} {mpi_bind_to(mnode)} \"",
        "f\"{mpi_map_by(mnode)} -np {args.num_procs} {cmd}\"",
        "'srun'",
        "\"**Need to specify --procs-per-node and --num-procs\"",
        "f\"srun --ntasks-per-node {args.procs_per_node} --ntasks {args.num_procs} \"",
        "f\"{cmd}\"",
        "'internal'",
        "\"**Need to specify --procs-per-node\"",
        "\",\"",
        "'SLURM_NODELIST'",
        "f\"runmultinode.sh -h {hl} -n {args.procs_per_node} -p {args.provider} \"",
        "f\"-C {args.capability} -I {args.iterations} -z {mnode['pattern']}\"",
        "'pattern'",
        "f\" --ci '{args.ci}'\"",
        "\"**Unsupported launcher\"",
        "f\"Command completed with {rc}\\n{out}\""
    ],
    "variables": [
        "parser",
        "required",
        "srun_required",
        "args",
        "yconf",
        "env",
        "result",
        "env",
        "k",
        "mca",
        "result",
        "script_dir",
        "cmd",
        "rc",
        "l",
        "c",
        "o",
        "s",
        "stop",
        "o",
        "b",
        "c",
        "c",
        "s",
        "stop",
        "l",
        "i",
        "host_list",
        "open_br",
        "close_br",
        "rangestr",
        "node",
        "ranges",
        "cur",
        "pre",
        "pre",
        "l",
        "host_list",
        "supported_pm",
        "rc",
        "input_list",
        "cleaned_list",
        "no_addr_prov",
        "args",
        "parser",
        "mnode",
        "cmd",
        "cmd",
        "mpi",
        "mpi",
        "hl",
        "mpi",
        "rc"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "first phase split on the commas first",
        "list of providers which do not address specification",
        "The script assumes it's already running in a SLURM allocation. It can",
        "then srun fi_multinode",
        ""
    ],
    "docstrings": [],
    "functions": [
        "parse_args",
        "parse_config",
        "mpi_env",
        "set_env",
        "mpi_mca_params",
        "mpi_bind_to",
        "mpi_map_by",
        "execute_cmd",
        "split_on_commas",
        "expand_host_list_sub",
        "expand_host_list",
        "is_srun_pm_supported"
    ],
    "classes": []
}