{
    "identifiers": [
        "logging",
        "math",
        "os",
        "sys",
        "dataclasses",
        "dataclass",
        "field",
        "itertools",
        "chain",
        "typing",
        "Optional",
        "datasets",
        "evaluate",
        "numpy",
        "np",
        "torch",
        "datasets",
        "load_dataset",
        "transformers",
        "transformers",
        "CONFIG_MAPPING",
        "MODEL_FOR_CAUSAL_LM_MAPPING",
        "AutoConfig",
        "AutoModelForCausalLM",
        "AutoTokenizer",
        "HfArgumentParser",
        "Trainer",
        "TrainingArguments",
        "default_data_collator",
        "is_deepspeed_zero3_enabled",
        "is_torch_tpu_available",
        "set_seed",
        "transformers",
        "testing_utils",
        "CaptureLogger",
        "transformers",
        "trainer_utils",
        "get_last_checkpoint",
        "transformers",
        "utils",
        "check_min_version",
        "send_example_telemetry",
        "transformers",
        "utils",
        "versions",
        "require_version",
        "check_min_version",
        "require_version",
        "logging",
        "getLogger",
        "MODEL_FOR_CAUSAL_LM_MAPPING",
        "keys",
        "conf",
        "model_type",
        "conf",
        "MODEL_CONFIG_CLASSES",
        "dataclass",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "join",
        "MODEL_TYPES",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "field",
        "metadata",
        "field",
        "metadata",
        "field",
        "metadata",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "field",
        "metadata",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "config_overrides",
        "config_name",
        "model_name_or_path",
        "ValueError",
        "dataclass",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "Optional",
        "field",
        "metadata",
        "field",
        "metadata",
        "streaming",
        "require_version",
        "dataset_name",
        "train_file",
        "validation_file",
        "ValueError",
        "train_file",
        "train_file",
        "split",
        "extension",
        "validation_file",
        "validation_file",
        "split",
        "extension",
        "HfArgumentParser",
        "ModelArguments",
        "DataTrainingArguments",
        "TrainingArguments",
        "len",
        "sys",
        "argv",
        "sys",
        "argv",
        "endswith",
        "parser",
        "parse_json_file",
        "json_file",
        "os",
        "path",
        "abspath",
        "sys",
        "argv",
        "parser",
        "parse_args_into_dataclasses",
        "send_example_telemetry",
        "model_args",
        "data_args",
        "logging",
        "basicConfig",
        "format",
        "datefmt",
        "handlers",
        "logging",
        "StreamHandler",
        "sys",
        "stdout",
        "training_args",
        "should_log",
        "transformers",
        "utils",
        "logging",
        "set_verbosity_info",
        "training_args",
        "get_process_log_level",
        "logger",
        "setLevel",
        "log_level",
        "datasets",
        "utils",
        "logging",
        "set_verbosity",
        "log_level",
        "transformers",
        "utils",
        "logging",
        "set_verbosity",
        "log_level",
        "transformers",
        "utils",
        "logging",
        "enable_default_handler",
        "transformers",
        "utils",
        "logging",
        "enable_explicit_format",
        "logger",
        "warning",
        "training_args",
        "local_rank",
        "training_args",
        "device",
        "training_args",
        "n_gpu",
        "training_args",
        "parallel_mode",
        "value",
        "training_args",
        "fp16",
        "logger",
        "info",
        "training_args",
        "os",
        "path",
        "isdir",
        "training_args",
        "output_dir",
        "training_args",
        "do_train",
        "training_args",
        "overwrite_output_dir",
        "get_last_checkpoint",
        "training_args",
        "output_dir",
        "last_checkpoint",
        "len",
        "os",
        "listdir",
        "training_args",
        "output_dir",
        "ValueError",
        "training_args",
        "output_dir",
        "last_checkpoint",
        "training_args",
        "resume_from_checkpoint",
        "logger",
        "info",
        "last_checkpoint",
        "set_seed",
        "training_args",
        "seed",
        "np",
        "random",
        "RandomState",
        "seed",
        "training_args",
        "seed",
        "data_args",
        "dataset_name",
        "load_dataset",
        "data_args",
        "dataset_name",
        "data_args",
        "dataset_config_name",
        "cache_dir",
        "model_args",
        "cache_dir",
        "token",
        "model_args",
        "token",
        "streaming",
        "data_args",
        "streaming",
        "raw_datasets",
        "keys",
        "load_dataset",
        "data_args",
        "dataset_name",
        "data_args",
        "dataset_config_name",
        "split",
        "data_args",
        "validation_split_percentage",
        "cache_dir",
        "model_args",
        "cache_dir",
        "token",
        "model_args",
        "token",
        "streaming",
        "data_args",
        "streaming",
        "load_dataset",
        "data_args",
        "dataset_name",
        "data_args",
        "dataset_config_name",
        "split",
        "data_args",
        "validation_split_percentage",
        "cache_dir",
        "model_args",
        "cache_dir",
        "token",
        "model_args",
        "token",
        "streaming",
        "data_args",
        "streaming",
        "data_args",
        "train_file",
        "data_args",
        "train_file",
        "data_args",
        "validation_file",
        "data_args",
        "validation_file",
        "data_args",
        "train_file",
        "split",
        "data_args",
        "train_file",
        "data_args",
        "validation_file",
        "split",
        "extension",
        "data_args",
        "keep_linebreaks",
        "load_dataset",
        "extension",
        "data_files",
        "data_files",
        "cache_dir",
        "model_args",
        "cache_dir",
        "token",
        "model_args",
        "token",
        "dataset_args",
        "raw_datasets",
        "keys",
        "load_dataset",
        "extension",
        "data_files",
        "data_files",
        "split",
        "data_args",
        "validation_split_percentage",
        "cache_dir",
        "model_args",
        "cache_dir",
        "token",
        "model_args",
        "token",
        "dataset_args",
        "load_dataset",
        "extension",
        "data_files",
        "data_files",
        "split",
        "data_args",
        "validation_split_percentage",
        "cache_dir",
        "model_args",
        "cache_dir",
        "token",
        "model_args",
        "token",
        "dataset_args",
        "model_args",
        "cache_dir",
        "model_args",
        "model_revision",
        "model_args",
        "token",
        "model_args",
        "trust_remote_code",
        "model_args",
        "config_name",
        "AutoConfig",
        "from_pretrained",
        "model_args",
        "config_name",
        "config_kwargs",
        "model_args",
        "model_name_or_path",
        "AutoConfig",
        "from_pretrained",
        "model_args",
        "model_name_or_path",
        "config_kwargs",
        "CONFIG_MAPPING",
        "model_args",
        "model_type",
        "logger",
        "warning",
        "model_args",
        "config_overrides",
        "logger",
        "info",
        "model_args",
        "config_overrides",
        "config",
        "update_from_string",
        "model_args",
        "config_overrides",
        "logger",
        "info",
        "config",
        "model_args",
        "cache_dir",
        "model_args",
        "use_fast_tokenizer",
        "model_args",
        "model_revision",
        "model_args",
        "token",
        "model_args",
        "trust_remote_code",
        "model_args",
        "tokenizer_name",
        "AutoTokenizer",
        "from_pretrained",
        "model_args",
        "tokenizer_name",
        "tokenizer_kwargs",
        "model_args",
        "model_name_or_path",
        "AutoTokenizer",
        "from_pretrained",
        "model_args",
        "model_name_or_path",
        "tokenizer_kwargs",
        "ValueError",
        "model_args",
        "model_name_or_path",
        "model_args",
        "torch_dtype",
        "model_args",
        "torch_dtype",
        "getattr",
        "torch",
        "model_args",
        "torch_dtype",
        "AutoModelForCausalLM",
        "from_pretrained",
        "model_args",
        "model_name_or_path",
        "from_tf",
        "model_args",
        "model_name_or_path",
        "config",
        "config",
        "cache_dir",
        "model_args",
        "cache_dir",
        "revision",
        "model_args",
        "model_revision",
        "token",
        "model_args",
        "token",
        "trust_remote_code",
        "model_args",
        "trust_remote_code",
        "torch_dtype",
        "torch_dtype",
        "low_cpu_mem_usage",
        "model_args",
        "low_cpu_mem_usage",
        "attn_implementation",
        "model_args",
        "attn_implementation",
        "AutoModelForCausalLM",
        "from_config",
        "config",
        "trust_remote_code",
        "model_args",
        "trust_remote_code",
        "attn_implementation",
        "model_args",
        "attn_implementation",
        "sum",
        "p",
        "data_ptr",
        "p",
        "numel",
        "p",
        "model",
        "parameters",
        "values",
        "logger",
        "info",
        "n_params",
        "data_args",
        "fim_prefix_token",
        "data_args",
        "fim_middle_token",
        "data_args",
        "fim_suffix_token",
        "data_args",
        "truncate_or_pad",
        "special_tokens",
        "append",
        "data_args",
        "pad_token",
        "torch",
        "cuda",
        "is_availble",
        "is_torch_tpu_available",
        "tokenizer",
        "add_tokens",
        "special_tokens",
        "model",
        "get_input_embeddings",
        "is_deepspeed_zero3_enabled",
        "deepspeed",
        "deepspeed",
        "zero",
        "GatheredParameters",
        "original_embeddings",
        "weight",
        "modifier_rank",
        "model",
        "resize_token_embeddings",
        "len",
        "tokenizer",
        "pad_to_multiple_of",
        "pad_factor",
        "model",
        "get_input_embeddings",
        "original_embeddings",
        "mean",
        "dim",
        "original_embeddings",
        "size",
        "original_embeddings",
        "mean",
        "T",
        "original_embeddings",
        "mean",
        "n",
        "torch",
        "distributions",
        "multivariate_normal",
        "MultivariateNormal",
        "mean",
        "covariance_matrix",
        "sigma",
        "torch",
        "stack",
        "dist",
        "sample",
        "_",
        "len",
        "special_tokens",
        "dim",
        "model",
        "get_input_embeddings",
        "model",
        "resize_token_embeddings",
        "len",
        "tokenizer",
        "pad_to_multiple_of",
        "pad_factor",
        "model",
        "get_input_embeddings",
        "original_embeddings",
        "mean",
        "dim",
        "original_embeddings",
        "size",
        "original_embeddings",
        "mean",
        "T",
        "original_embeddings",
        "mean",
        "n",
        "torch",
        "distributions",
        "multivariate_normal",
        "MultivariateNormal",
        "mean",
        "covariance_matrix",
        "sigma",
        "torch",
        "stack",
        "dist",
        "sample",
        "_",
        "len",
        "special_tokens",
        "dim",
        "is_deepspeed_zero3_enabled",
        "deepspeed",
        "deepspeed",
        "zero",
        "GatheredParameters",
        "embeddings",
        "weight",
        "modifier_rank",
        "embeddings",
        "weight",
        "data",
        "len",
        "special_tokens",
        "new_token_embeddings",
        "embeddings",
        "weight",
        "data",
        "len",
        "special_tokens",
        "new_token_embeddings",
        "model",
        "set_input_embeddings",
        "embeddings",
        "logger",
        "info",
        "training_args",
        "do_train",
        "raw_datasets",
        "features",
        "raw_datasets",
        "features",
        "column_names",
        "column_names",
        "transformers",
        "utils",
        "logging",
        "get_logger",
        "examples",
        "CaptureLogger",
        "tok_logger",
        "cl",
        "tokenizer",
        "examples",
        "text_column_name",
        "cl",
        "tok_logger",
        "warning",
        "output",
        "training_args",
        "main_process_first",
        "desc",
        "data_args",
        "streaming",
        "raw_datasets",
        "tokenize_function",
        "batched",
        "num_proc",
        "data_args",
        "preprocessing_num_workers",
        "remove_columns",
        "column_names",
        "load_from_cache_file",
        "data_args",
        "overwrite_cache",
        "desc",
        "raw_datasets",
        "tokenize_function",
        "batched",
        "remove_columns",
        "column_names",
        "data_args",
        "block_size",
        "tokenizer",
        "model_max_length",
        "block_size",
        "config",
        "max_position_embeddings",
        "logger",
        "warning",
        "tokenizer",
        "model_max_length",
        "min",
        "config",
        "max_position_embeddings",
        "min",
        "config",
        "max_position_embeddings",
        "data_args",
        "block_size",
        "tokenizer",
        "model_max_length",
        "logger",
        "warning",
        "data_args",
        "block_size",
        "tokenizer",
        "model_max_length",
        "tokenizer",
        "model_max_length",
        "min",
        "data_args",
        "block_size",
        "tokenizer",
        "model_max_length",
        "examples",
        "k",
        "chain",
        "examples",
        "k",
        "k",
        "examples",
        "keys",
        "len",
        "concatenated_examples",
        "examples",
        "keys",
        "total_length",
        "block_size",
        "block_size",
        "k",
        "t",
        "i",
        "i",
        "block_size",
        "i",
        "total_length",
        "block_size",
        "k",
        "t",
        "concatenated_examples",
        "items",
        "result",
        "copy",
        "result",
        "tokenizer",
        "convert_tokens_to_ids",
        "data_args",
        "fim_prefix_token",
        "tokenizer",
        "convert_tokens_to_ids",
        "data_args",
        "fim_middle_token",
        "tokenizer",
        "convert_tokens_to_ids",
        "data_args",
        "fim_suffix_token",
        "data_args",
        "truncate_or_pad",
        "tokenizer",
        "convert_tokens_to_ids",
        "data_args",
        "pad_token",
        "example",
        "np_rng",
        "binomial",
        "data_args",
        "fim_rate",
        "sorted",
        "np_rng",
        "randint",
        "low",
        "high",
        "len",
        "example",
        "size",
        "example",
        "boundaries",
        "example",
        "boundaries",
        "boundaries",
        "example",
        "boundaries",
        "data_args",
        "truncate_or_pad",
        "len",
        "prefix",
        "len",
        "middle",
        "len",
        "suffix",
        "total_length",
        "len",
        "example",
        "diff",
        "suffix",
        "max",
        "len",
        "suffix",
        "diff",
        "diff",
        "suffix",
        "extend",
        "pad_tok_id",
        "diff",
        "np_rng",
        "binomial",
        "data_args",
        "fim_spm_rate",
        "prefix_tok_id",
        "suffix_tok_id",
        "suffix",
        "middle_tok_id",
        "prefix",
        "middle",
        "prefix_tok_id",
        "prefix",
        "suffix_tok_id",
        "suffix",
        "middle_tok_id",
        "middle",
        "example",
        "transformed_example",
        "examples",
        "fim_transform",
        "ids",
        "ids",
        "examples",
        "fim_transform_ids",
        "fim_transform_ids",
        "len",
        "mask",
        "mask",
        "examples",
        "examples",
        "training_args",
        "main_process_first",
        "desc",
        "data_args",
        "streaming",
        "tokenized_datasets",
        "apply_fim",
        "batched",
        "num_proc",
        "data_args",
        "preprocessing_num_workers",
        "load_from_cache_file",
        "data_args",
        "overwrite_cache",
        "desc",
        "fim_datasets",
        "group_texts",
        "batched",
        "num_proc",
        "data_args",
        "preprocessing_num_workers",
        "load_from_cache_file",
        "data_args",
        "overwrite_cache",
        "desc",
        "block_size",
        "tokenized_datasets",
        "apply_fim",
        "batched",
        "fim_datasets",
        "group_texts",
        "batched",
        "training_args",
        "do_train",
        "tokenized_datasets",
        "ValueError",
        "lm_datasets",
        "data_args",
        "max_train_samples",
        "min",
        "len",
        "train_dataset",
        "data_args",
        "max_train_samples",
        "train_dataset",
        "select",
        "max_train_samples",
        "training_args",
        "do_eval",
        "tokenized_datasets",
        "ValueError",
        "lm_datasets",
        "data_args",
        "max_eval_samples",
        "min",
        "len",
        "eval_dataset",
        "data_args",
        "max_eval_samples",
        "eval_dataset",
        "select",
        "max_eval_samples",
        "logits",
        "labels",
        "isinstance",
        "logits",
        "logits",
        "logits",
        "argmax",
        "dim",
        "evaluate",
        "load",
        "eval_preds",
        "eval_preds",
        "labels",
        "reshape",
        "preds",
        "reshape",
        "metric",
        "compute",
        "predictions",
        "preds",
        "references",
        "labels",
        "Trainer",
        "model",
        "model",
        "args",
        "training_args",
        "train_dataset",
        "train_dataset",
        "training_args",
        "do_train",
        "eval_dataset",
        "eval_dataset",
        "training_args",
        "do_eval",
        "tokenizer",
        "tokenizer",
        "data_collator",
        "default_data_collator",
        "compute_metrics",
        "compute_metrics",
        "training_args",
        "do_eval",
        "is_torch_tpu_available",
        "preprocess_logits_for_metrics",
        "preprocess_logits_for_metrics",
        "training_args",
        "do_eval",
        "is_torch_tpu_available",
        "training_args",
        "do_train",
        "training_args",
        "resume_from_checkpoint",
        "training_args",
        "resume_from_checkpoint",
        "last_checkpoint",
        "last_checkpoint",
        "trainer",
        "train",
        "resume_from_checkpoint",
        "checkpoint",
        "trainer",
        "save_model",
        "train_result",
        "metrics",
        "data_args",
        "max_train_samples",
        "data_args",
        "max_train_samples",
        "len",
        "train_dataset",
        "min",
        "max_train_samples",
        "len",
        "train_dataset",
        "trainer",
        "log_metrics",
        "metrics",
        "trainer",
        "save_metrics",
        "metrics",
        "trainer",
        "save_state",
        "training_args",
        "do_eval",
        "logger",
        "info",
        "trainer",
        "evaluate",
        "data_args",
        "max_eval_samples",
        "data_args",
        "max_eval_samples",
        "len",
        "eval_dataset",
        "min",
        "max_eval_samples",
        "len",
        "eval_dataset",
        "math",
        "exp",
        "metrics",
        "OverflowError",
        "perplexity",
        "trainer",
        "log_metrics",
        "metrics",
        "trainer",
        "save_metrics",
        "metrics",
        "model_args",
        "model_name_or_path",
        "data_args",
        "dataset_name",
        "data_args",
        "dataset_name",
        "data_args",
        "dataset_config_name",
        "data_args",
        "dataset_config_name",
        "data_args",
        "dataset_name",
        "data_args",
        "dataset_config_name",
        "data_args",
        "dataset_name",
        "training_args",
        "push_to_hub",
        "trainer",
        "push_to_hub",
        "kwargs",
        "trainer",
        "create_model_card",
        "kwargs",
        "index",
        "main",
        "main"
    ],
    "literals": [
        "\"4.36.0.dev0\"",
        "\"datasets>=1.8.0\"",
        "\"To fix: pip install -r examples/pytorch/language-modeling/requirements.txt\"",
        "\"help\"",
        "\"The model checkpoint for weights initialization. Don't set if you want to train a model from scratch.\"",
        "\"help\"",
        "\"If training from scratch, pass a model type from the list: \"",
        "\", \"",
        "\"help\"",
        "\"Override some existing default config settings when a model is trained from scratch. Example: \"",
        "\"n_embd=10,resid_pdrop=0.2,scale_attn_weights=false,summary_type=cls_index\"",
        "\"help\"",
        "\"Pretrained config name or path if not the same as model_name\"",
        "\"help\"",
        "\"Pretrained tokenizer name or path if not the same as model_name\"",
        "\"help\"",
        "\"Where do you want to store the pretrained models downloaded from huggingface.co\"",
        "\"help\"",
        "\"Whether to use one of the fast tokenizer (backed by the tokenizers library) or not.\"",
        "\"main\"",
        "\"help\"",
        "\"The specific model version to use (can be a branch name, tag name or commit id).\"",
        "\"help\"",
        "\"The token to use as HTTP bearer authorization for remote files. If not specified, will use the token \"",
        "\"generated when running `huggingface-cli login` (stored in `~/.huggingface`).\"",
        "\"help\"",
        "\"Whether or not to allow for custom models defined on the Hub in their own modeling files. This option\"",
        "\"should only be set to `True` for repositories you trust and in which you have read the code, as it will \"",
        "\"execute code present on the Hub on your local machine.\"",
        "\"help\"",
        "\"Override the default `torch.dtype` and load the model under this dtype. If `auto` is passed, the \"",
        "\"dtype will be automatically derived from the model's weights.\"",
        "\"choices\"",
        "\"auto\"",
        "\"bfloat16\"",
        "\"float16\"",
        "\"float32\"",
        "\"help\"",
        "\"It is an option to create the model as an empty shell, then only materialize its parameters when the pretrained weights are loaded. \"",
        "\"set True will benefit LLM loading time and RAM consumption.\"",
        "\"help\"",
        "\"Whether to pad the embedding layer to a multiple depending on the device. \"",
        "\"For NVIDIA GPUs, this will be a multiple of 8, for TPUs a multiple of 128.\"",
        "\"sdpa\"",
        "\"help\"",
        "\"The attention implementation to use. \"",
        "\"--config_overrides can't be used in combination with --config_name or --model_name_or_path\"",
        "\"help\"",
        "\"The name of the dataset to use (via the datasets library).\"",
        "\"help\"",
        "\"The configuration name of the dataset to use (via the datasets library).\"",
        "\"help\"",
        "\"The input training data file (a text file).\"",
        "\"help\"",
        "\"An optional input evaluation data file to evaluate the perplexity on (a text file).\"",
        "\"help\"",
        "\"For debugging purposes or quicker training, truncate the number of training examples to this \"",
        "\"value if set.\"",
        "\"help\"",
        "\"For debugging purposes or quicker training, truncate the number of evaluation examples to this \"",
        "\"value if set.\"",
        "\"help\"",
        "\"Enable streaming mode\"",
        "\"help\"",
        "\"Optional input sequence length after tokenization. \"",
        "\"The training dataset will be truncated in block of this size for training. \"",
        "\"Default to the model max input length for single sentence inputs (take into account special tokens).\"",
        "\"help\"",
        "\"Optional probability with which the FIM transformation is applied to the example. \"",
        "\"Default is 0.5. A rate of 1.0 means every example will undergo FIM transformation, \"",
        "\"while a rate of 0.0 means no example will.\"",
        "\"help\"",
        "\"Within the examples undergoing FIM transformation, this rate determines the probability \"",
        "\"of applying the Sentence Permutation Mode (SPM). \"",
        "\"Default is 0.5. A rate of 1.0 means all FIM transformations will use SPM, \"",
        "\"while a rate of 0.0 means none will.\"",
        "\"help\"",
        "\"Indicates whether the transformed example should be truncated or padded to maintain \"",
        "\"the same length as the original example. \"",
        "\"Default is True. If False, the function will not truncate or pad the examples.\"",
        "\"<fim_prefix>\"",
        "\"help\"",
        "\"Fill-in-Middle Prefix token. Defaults to '<fim_prefix>'.\"",
        "\"<fim_middle>\"",
        "\"help\"",
        "\"Fill-in-Middle Middle token. Defaults to '<fim_middle>'.\"",
        "\"<fim_suffix>\"",
        "\"help\"",
        "\"Fill-in-Middle Suffix token. Defaults to '<fim_suffix>'.\"",
        "\"<fim_pad>\"",
        "\"help\"",
        "\"Fill-in-Middle Pad token. Used only when 'truncate_or_pad' is set to True. \"",
        "\"Defaults to '<fim_pad>'.\"",
        "\"help\"",
        "\"Overwrite the cached training and evaluation sets\"",
        "\"help\"",
        "\"The percentage of the train set used as validation set in case there's no validation split\"",
        "\"help\"",
        "\"The number of processes to use for the preprocessing.\"",
        "\"help\"",
        "\"Whether to keep line breaks when using TXT files or not.\"",
        "\"datasets>=2.0.0\"",
        "\"The streaming feature requires `datasets>=2.0.0`\"",
        "\"Need either a dataset name or a training/validation file.\"",
        "\".\"",
        "\"csv\"",
        "\"json\"",
        "\"txt\"",
        "\"`train_file` should be a csv, a json or a txt file.\"",
        "\".\"",
        "\"csv\"",
        "\"json\"",
        "\"txt\"",
        "\"`validation_file` should be a csv, a json or a txt file.\"",
        "\".json\"",
        "\"run_fim\"",
        "\"%(asctime)s - %(levelname)s - %(name)s - %(message)s\"",
        "\"%m/%d/%Y %H:%M:%S\"",
        "f\"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}, \"",
        "f\"distributed training: {training_args.parallel_mode.value == 'distributed'}, 16-bits training: {training_args.fp16}\"",
        "'distributed'",
        "f\"Training/evaluation parameters {training_args}\"",
        "f\"Output directory ({training_args.output_dir}) already exists and is not empty. \"",
        "\"Use --overwrite_output_dir to overcome.\"",
        "f\"Checkpoint detected, resuming training at {last_checkpoint}. To avoid this behavior, change \"",
        "\"the `--output_dir` or add `--overwrite_output_dir` to train from scratch.\"",
        "\"validation\"",
        "\"validation\"",
        "f\"train[:{data_args.validation_split_percentage}%]\"",
        "\"train\"",
        "f\"train[{data_args.validation_split_percentage}%:]\"",
        "\"train\"",
        "\"validation\"",
        "\".\"",
        "\".\"",
        "\"txt\"",
        "\"text\"",
        "\"keep_linebreaks\"",
        "\"validation\"",
        "\"validation\"",
        "f\"train[:{data_args.validation_split_percentage}%]\"",
        "\"train\"",
        "f\"train[{data_args.validation_split_percentage}%:]\"",
        "\"cache_dir\"",
        "\"revision\"",
        "\"token\"",
        "\"trust_remote_code\"",
        "\"You are instantiating a new config instance from scratch.\"",
        "f\"Overriding config: {model_args.config_overrides}\"",
        "f\"New config: {config}\"",
        "\"cache_dir\"",
        "\"use_fast\"",
        "\"revision\"",
        "\"token\"",
        "\"trust_remote_code\"",
        "\"You are instantiating a new tokenizer from scratch. This is not supported by this script. \"",
        "\"You can do it from another script, save it, and load it from here, using --tokenizer_name.\"",
        "\"auto\"",
        "\".ckpt\"",
        "f\"Training new model from scratch - Total size={n_params/2**20:.2f}M params\"",
        "\"Added special tokens to the tokenizer and resized model's embedding layer\"",
        "\"train\"",
        "\"validation\"",
        "\"text\"",
        "\"text\"",
        "\"transformers.tokenization_utils_base\"",
        "\"Token indices sequence length is longer than the\"",
        "\"^^^^^^^^^^^^^^^^ Please ignore the warning above - this long input will be chunked into smaller bits\"",
        "\" before being passed to the model.\"",
        "\"dataset map tokenization\"",
        "\"Running tokenizer on dataset\"",
        "f\"The tokenizer picked seems to have a very large `model_max_length` ({tokenizer.model_max_length}). \"",
        "f\"Using block_size={min(1024, config.max_position_embeddings)} instead. You can change that default value by passing --block_size xxx.\"",
        "f\"The block_size passed ({data_args.block_size}) is larger than the maximum length for the model \"",
        "f\"({tokenizer.model_max_length}). Using block_size={tokenizer.model_max_length}.\"",
        "\"labels\"",
        "\"input_ids\"",
        "\"input_ids\"",
        "\"input_ids\"",
        "\"labels\"",
        "\"attention_mask\"",
        "\"input_ids\"",
        "\"processing texts together\"",
        "\"Performing FIM transformation\"",
        "f\"Grouping texts in chunks of {block_size}\"",
        "\"train\"",
        "\"--do_train requires a train dataset\"",
        "\"train\"",
        "\"validation\"",
        "\"--do_eval requires a validation dataset\"",
        "\"validation\"",
        "\"accuracy\"",
        "\"train_samples\"",
        "\"train\"",
        "\"train\"",
        "\"*** Evaluate ***\"",
        "\"eval_samples\"",
        "\"eval_loss\"",
        "\"inf\"",
        "\"perplexity\"",
        "\"eval\"",
        "\"eval\"",
        "\"finetuned_from\"",
        "\"tasks\"",
        "\"text-generation\"",
        "\"dataset_tags\"",
        "\"dataset_args\"",
        "\"dataset\"",
        "f\"{data_args.dataset_name} {data_args.dataset_config_name}\"",
        "\"dataset\"",
        "\"__main__\""
    ],
    "variables": [
        "logger",
        "MODEL_CONFIG_CLASSES",
        "MODEL_TYPES",
        "model_name_or_path",
        "model_type",
        "config_overrides",
        "config_name",
        "tokenizer_name",
        "cache_dir",
        "use_fast_tokenizer",
        "model_revision",
        "token",
        "trust_remote_code",
        "torch_dtype",
        "low_cpu_mem_usage",
        "pad_to_multiple_of",
        "attn_implementation",
        "dataset_name",
        "dataset_config_name",
        "train_file",
        "validation_file",
        "max_train_samples",
        "max_eval_samples",
        "streaming",
        "block_size",
        "fim_rate",
        "fim_spm_rate",
        "truncate_or_pad",
        "fim_prefix_token",
        "fim_middle_token",
        "fim_suffix_token",
        "pad_token",
        "overwrite_cache",
        "validation_split_percentage",
        "preprocessing_num_workers",
        "keep_linebreaks",
        "extension",
        "extension",
        "parser",
        "model_args",
        "data_args",
        "training_args",
        "model_args",
        "data_args",
        "training_args",
        "log_level",
        "last_checkpoint",
        "last_checkpoint",
        "np_rng",
        "raw_datasets",
        "raw_datasets",
        "raw_datasets",
        "data_files",
        "dataset_args",
        "data_files",
        "data_files",
        "extension",
        "extension",
        "dataset_args",
        "raw_datasets",
        "raw_datasets",
        "raw_datasets",
        "config_kwargs",
        "config",
        "config",
        "config",
        "tokenizer_kwargs",
        "tokenizer",
        "tokenizer",
        "torch_dtype",
        "model",
        "model",
        "n_params",
        "special_tokens",
        "pad_factor",
        "pad_factor",
        "pad_factor",
        "original_embeddings",
        "embeddings",
        "mean",
        "n",
        "sigma",
        "dist",
        "new_token_embeddings",
        "original_embeddings",
        "embeddings",
        "mean",
        "n",
        "sigma",
        "dist",
        "new_token_embeddings",
        "column_names",
        "column_names",
        "text_column_name",
        "tok_logger",
        "output",
        "tokenized_datasets",
        "tokenized_datasets",
        "block_size",
        "block_size",
        "block_size",
        "concatenated_examples",
        "total_length",
        "total_length",
        "result",
        "result",
        "prefix_tok_id",
        "middle_tok_id",
        "suffix_tok_id",
        "pad_tok_id",
        "pad_tok_id",
        "boundaries",
        "prefix",
        "middle",
        "suffix",
        "total_length",
        "diff",
        "suffix",
        "transformed_example",
        "transformed_example",
        "transformed_example",
        "fim_transform_ids",
        "examples",
        "examples",
        "examples",
        "fim_datasets",
        "lm_datasets",
        "fim_datasets",
        "lm_datasets",
        "train_dataset",
        "max_train_samples",
        "train_dataset",
        "eval_dataset",
        "max_eval_samples",
        "eval_dataset",
        "logits",
        "metric",
        "preds",
        "labels",
        "labels",
        "preds",
        "trainer",
        "checkpoint",
        "checkpoint",
        "checkpoint",
        "train_result",
        "metrics",
        "max_train_samples",
        "metrics",
        "metrics",
        "max_eval_samples",
        "metrics",
        "perplexity",
        "perplexity",
        "metrics",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs"
    ],
    "comments": [
        "!/usr/bin/env python",
        "coding=utf-8",
        "Copyright 2024 The HuggingFace Inc. team. All rights reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "You should adapt this script on your own causal language modeling task. Pointers for this are left as comments.",
        "Will error if the minimal version of Transformers is not installed. Remove at your own risks.",
        "See all possible arguments in src/transformers/training_args.py",
        "or by passing the --help flag to this script.",
        "We now keep distinct sets of args, for a cleaner separation of concerns.",
        "If we pass only one argument to the script and it's the path to a json file,",
        "let's parse it to get our arguments.",
        "Sending telemetry. Tracking the example usage helps us better allocate resources to maintain them. The",
        "information sent is the one passed as arguments along with your Python/PyTorch versions.",
        "Setup logging",
        "The default of training_args.log_level is passive, so we set log level at info here to have that default.",
        "Log on each process the small summary:",
        "Detecting last checkpoint.",
        "Set seed before initializing model.",
        "Set a numpy random state for FIM transformations",
        "Get the datasets: you can either provide your own CSV/JSON/TXT training and evaluation files (see below)",
        "or just provide the name of one of the public datasets available on the hub at https://huggingface.co/datasets/",
        "(the dataset will be downloaded automatically from the datasets Hub).",
        "",
        "For CSV/JSON files, this script will use the column called 'text' or the first column if no column called",
        "'text' is found. You can easily tweak this behavior (see below).",
        "",
        "In distributed training, the load_dataset function guarantee that only one local process can concurrently",
        "download the dataset.",
        "Downloading and loading a dataset from the hub.",
        "If no validation data is there, validation_split_percentage will be used to divide the dataset.",
        "See more about loading any type of standard or custom dataset (from files, python dict, pandas DataFrame, etc) at",
        "https://huggingface.co/docs/datasets/loading_datasets.html.",
        "Load pretrained model and tokenizer",
        "",
        "Distributed training:",
        "The .from_pretrained methods guarantee that only one local process can concurrently",
        "download model & vocab.",
        "Add the new FIM tokens to the tokenizer and resize model's vocab embeddings",
        "Get the factor by which the embedding layer should be padded based on the device",
        "Add the new tokens to the tokenizer",
        "Get the pre-expansion embeddings of the model and resize the embedding layer",
        "Sample the embeddings for the new tokens from a multivariate normal distribution",
        "We do this so that the new embeddings are close to the original embeddings and not necessarily zero",
        "More on this: https://nlp.stanford.edu/~johnhew/vocab-expansion.html",
        "Get the pre-expansion embeddings of the model and resize the embedding layer",
        "Sample the embeddings for the new tokens from a multivariate normal distribution",
        "We do this so that the new embeddings are close to the original embeddings and not necessarily zero",
        "More on this: https://nlp.stanford.edu/~johnhew/vocab-expansion.html",
        "Set the new tokens' embeddings to the newly sampled embeddings",
        "Set the new tokens' embeddings to the newly sampled embeddings",
        "Update the model's embeddings with the new embeddings",
        "Preprocessing the datasets.",
        "First we tokenize all the texts.",
        "since this will be pickled to avoid _LazyModule error in Hasher force logger loading before tokenize_function",
        "clm-fim input could be much much longer than block_size",
        "Data processing function that will concatenate all texts from our dataset and generate chunks of block_size.",
        "Concatenate all texts.",
        "We drop the small remainder, and if the total_length < block_size  we exclude this batch and return an empty dict.",
        "We could add padding if the model supported it instead of this drop, you can customize this part to your needs.",
        "Split by chunks of max_len.",
        "Get the FIM-specific token ids",
        "If truncate_or_pad is on, also get pad token id",
        "The two functions below perform the FIM transformation on the data (either PSM or SPM or PSM+SPM)",
        "Don't call fim_transform directly in .map()",
        "Adapted from https://github.com/loubnabnl/santacoder-finetuning/blob/main/fim.py#L22C13-L83",
        "Apply Suffix-Prefix-Middle (SPM) transformation",
        "Apply Prefix-Suffix-Middle (PSM) transformation",
        "Below function is the one you are supposed to call in the .map() function",
        "If your application requires custom attention mask, please adjust this function's below line.",
        "Since FIM transformation increases the number of tokens in input_ids and labels",
        "but leaves the number of tokens unchanged in attention_masks which would cause problems",
        "Note that with `batched=True`, this map processes 1,000 texts together, so group_texts throws away a remainder",
        "for each of those groups of 1,000 texts. You can adjust that batch_size here but a higher value might be slower",
        "to preprocess.",
        "",
        "To speed up this part, we use multiprocessing. See the documentation of the map method for more information:",
        "https://huggingface.co/docs/datasets/process#map",
        "FIM transformations are only supposed to be applied before group_texts processing otherwise some sentences will",
        "have 3-4 more tokens than others due to probabilistic addition of FIM-specific tokens which will raise errors",
        "Depending on the model and config, logits may contain extra tensors,",
        "like past_key_values, but logits always come first",
        "preds have the same shape as the labels, after the argmax(-1) has been calculated",
        "by preprocess_logits_for_metrics but we need to shift the labels",
        "Initialize our Trainer",
        "Data collator will default to DataCollatorWithPadding, so we change it.",
        "Training",
        "Saves the tokenizer too for easy upload",
        "Evaluation",
        "For xla_spawn (TPUs)"
    ],
    "docstrings": [
        "\"\"\"\nFine-tuning the library models for causal language modeling using\nFill-in-the middle (FIM) objective on a text file or a dataset.\n\nHere is the full list of checkpoints on the hub that can be fine-tuned by this script:\nhttps://huggingface.co/models?filter=text-generation\n\"\"\"",
        "\"\"\"\n    Arguments pertaining to which model/config/tokenizer we are going to fine-tune, or train from scratch.\n    \"\"\"",
        "\"\"\"\n    Arguments pertaining to what data we are going to input our model for training and eval.\n    \"\"\"",
        "\"\"\"\n        This function performs FIM transformation on a single example (list of tokens)\n        \"\"\"",
        "\"\"\"\n        Apply FIM transformation to a batch of examples\n        \"\"\""
    ],
    "functions": [
        "__post_init__",
        "__post_init__",
        "main",
        "tokenize_function",
        "group_texts",
        "fim_transform",
        "apply_fim",
        "preprocess_logits_for_metrics",
        "compute_metrics",
        "_mp_fn"
    ],
    "classes": [
        "ModelArguments",
        "DataTrainingArguments"
    ]
}