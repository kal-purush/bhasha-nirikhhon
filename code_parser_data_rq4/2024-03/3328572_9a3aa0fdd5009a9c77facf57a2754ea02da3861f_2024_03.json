{
    "identifiers": [
        "globalThis",
        "Zone",
        "globalThis",
        "globalThis",
        "Zone",
        "Zone",
        "SyncTestZoneSpec",
        "ProxyZoneSpec",
        "globalThis",
        "Zone",
        "ambientZone",
        "SyncTestZoneSpec",
        "describeBody",
        "args",
        "syncZone",
        "describeBody",
        "args",
        "ambientZone",
        "ProxyZoneSpec",
        "testBody",
        "testBody",
        "testProxyZone",
        "testBody",
        "arguments",
        "wrappedFunc",
        "wrappedFunc",
        "testBody",
        "e",
        "testBody",
        "testProxyZone",
        "testBody",
        "done",
        "testProxyZone",
        "testBody",
        "done",
        "wrappedFunc",
        "customSnapshotSerializer",
        "val",
        "config",
        "indentation",
        "depth",
        "refs",
        "printer",
        "printer",
        "fixtureVitestSerializer",
        "val",
        "config",
        "indentation",
        "depth",
        "refs",
        "val",
        "val",
        "isAngularFixture",
        "val",
        "val",
        "val",
        "val",
        "val",
        "val",
        "val",
        "fixtureKeys",
        "val",
        "fixtureComponentRefKeys",
        "fixture",
        "fixture",
        "fixture",
        "fixture",
        "fixture",
        "componentType",
        "componentType",
        "componentType",
        "inputsData",
        "componentType",
        "key",
        "value",
        "fixture",
        "fixture",
        "fixture",
        "fixture",
        "DOMParser",
        "selector",
        "inputsData",
        "divElement",
        "selector",
        "doc",
        "bindDescribe",
        "originalVitestFn",
        "arg0",
        "arg1",
        "arg0",
        "arg1",
        "eachArgs",
        "args",
        "args",
        "wrapDescribeInZone",
        "args",
        "originalVitestFn",
        "eachArgs",
        "args",
        "bindTest",
        "originalVitestFn",
        "arg0",
        "arg1",
        "arg0",
        "arg1",
        "eachArgs",
        "args",
        "args",
        "wrapTestInZone",
        "args",
        "originalVitestFn",
        "eachArgs",
        "args",
        "methodName",
        "env",
        "methodName",
        "env",
        "methodName",
        "args",
        "args",
        "wrapDescribeInZone",
        "args",
        "originalvitestFn",
        "args",
        "env",
        "methodName",
        "bindDescribe",
        "originalvitestFn",
        "methodName",
        "env",
        "methodName",
        "env",
        "env",
        "methodName",
        "env",
        "methodName",
        "env",
        "methodName",
        "env",
        "methodName",
        "args",
        "args",
        "wrapTestInZone",
        "args",
        "originalvitestFn",
        "args",
        "env",
        "methodName",
        "bindTest",
        "originalvitestFn",
        "methodName",
        "methodName",
        "env",
        "methodName",
        "args",
        "originalvitestFn",
        "args",
        "methodName",
        "env",
        "methodName",
        "env",
        "methodName",
        "args",
        "args",
        "wrapTestInZone",
        "args",
        "originalvitestFn",
        "args",
        "methodName",
        "env",
        "methodName",
        "originalvitestFn",
        "customSnapshotSerializer"
    ],
    "literals": [
        "'zone.js'",
        "'zone.js/plugins/proxy'",
        "'zone.js/plugins/sync-test'",
        "'zone.js/testing'",
        "'Zone'",
        "'Missing: Zone (zone.js)'",
        "'__vitest_zone_patch__'",
        "\"'vitest' has already been patched with 'Zone'.\"",
        "'__vitest_zone_patch__'",
        "'SyncTestZoneSpec'",
        "'ProxyZoneSpec'",
        "'Missing: SyncTestZoneSpec (zone.js/plugins/sync-test)'",
        "'Missing: ProxyZoneSpec (zone.js/plugins/proxy.js)'",
        "'vitest.describe'",
        "string",
        "'length'",
        "string",
        "${printer(fixtureVitestSerializer(val), config, indentation, depth, refs)}",
        "'object'",
        "'componentRef'",
        "'componentInstance'",
        "'componentType'",
        "'componentRef'",
        "'ngZone'",
        "'effectRunner'",
        "'_autoDetect'",
        "'_isStable'",
        "'_isDestroyed'",
        "'_resolve'",
        "'_promise'",
        "'_onUnstableSubscription'",
        "'_onStableSubscription'",
        "'_onMicrotaskEmptySubscription'",
        "'_onErrorSubscription'",
        "'changeDetectorRef'",
        "'elementRef'",
        "'debugElement'",
        "'componentInstance'",
        "'nativeElement'",
        "'location'",
        "'_rootLView'",
        "'_tNode'",
        "'previousInputValues'",
        "'instance'",
        "'changeDetectorRef'",
        "'hostView'",
        "'componentType'",
        "string",
        "''",
        "'__annotations__'",
        "${key}=\"${value}\"",
        "''",
        "<${selector} ${inputsData}>${divElement.innerHTML}</${selector}>",
        "'text/html'",
        "'describe'",
        "'describe'",
        "'fdescribe'",
        "'xdescribe'",
        "'test'",
        "'it'",
        "'test'",
        "'it'",
        "'beforeEach'",
        "'afterEach'",
        "'beforeAll'",
        "'afterAll'",
        "'expect'"
    ],
    "variables": [
        "Zone",
        "SyncTestZoneSpec",
        "ProxyZoneSpec",
        "env",
        "ambientZone",
        "syncZone",
        "testProxyZone",
        "wrappedFunc",
        "customSnapshotSerializer",
        "fixtureKeys",
        "fixtureComponentRefKeys",
        "componentType",
        "inputsData",
        "selector",
        "key",
        "value",
        "divElement",
        "doc",
        "bindDescribe",
        "bindTest",
        "originalvitestFn",
        "originalvitestFn",
        "originalvitestFn",
        "originalvitestFn"
    ],
    "comments": [
        "global Zone",
        "Create a synchronous-only zone in which to run `describe` blocks in order to",
        "raise an error if any asynchronous operations are attempted",
        "inside of a `describe` but outside of a `beforeEach` or `it`.",
        "Create a proxy zone in which to run `test` blocks so that the tests function",
        "can retroactively install different zones.",
        "`printer` is a function that serializes a value using existing plugins.",
        "@ts-ignore",
        "@ts-ignore"
    ],
    "docstrings": [
        "* We are using this snippet from '@analogjs/vite-plugin-angular' to make vitest work with Angular.\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2022 Brandon Roberts\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.",
        "* Patch Vitest's describe/test/beforeEach/afterEach functions so test code\n * always runs in a testZone (ProxyZone).",
        "* Allows Vitest to handle Angular test fixtures\n *\n * Vitest Snapshot guide ==> https://vitest.dev/guide/snapshot.html\n *\n * @returns customSnapshotSerializer for Angular Fixture Component",
        "* If it's a ComponentFixture we apply the transformation rules",
        "* Check if is an Angular fixture\n *\n * @param val Angular fixture\n * @returns boolean who check if is an angular fixture",
        "* Angular fixture keys in Fixture component Object",
        "* Angular fixture keys in Fixture componentRef Object",
        "* Serialize Angular fixture for Vitest\n *\n * @param fixture Angular Fixture Component\n * @returns HTML Child Node",
        "* Get Component meta data",
        "* Get DOM Elements",
        "* Convert string data to HTML data",
        "* bind describe method to wrap describe.each function",
        "* bind test method to wrap test.each function"
    ],
    "functions": [
        "wrapDescribeInZone",
        "wrapTestInZone",
        "serialize",
        "test",
        "isAngularFixture",
        "fixtureVitestSerializer"
    ],
    "classes": []
}