{
    "identifiers": [
        "isObject",
        "val",
        "val",
        "val",
        "val",
        "val",
        "isObject",
        "val",
        "val",
        "proxyMarker",
        "obj",
        "MessageChannel",
        "expose",
        "obj",
        "port1",
        "port2",
        "port2",
        "port",
        "port",
        "wrap",
        "port",
        "value",
        "isObject",
        "value",
        "throwMarker",
        "value",
        "value",
        "serialized",
        "value",
        "value",
        "value",
        "serialized",
        "serialized",
        "serialized",
        "serialized",
        "serialized",
        "serialized",
        "serialized",
        "proxyTransferHandler",
        "throwTransferHandler",
        "allowedOrigins",
        "origin",
        "allowedOrigin",
        "allowedOrigins",
        "origin",
        "allowedOrigin",
        "allowedOrigin",
        "allowedOrigin",
        "allowedOrigin",
        "origin",
        "obj",
        "ep",
        "globalThis",
        "allowedOrigins",
        "ep",
        "callback",
        "ev",
        "ev",
        "ev",
        "isAllowedOrigin",
        "allowedOrigins",
        "ev",
        "ev",
        "ev",
        "ev",
        "fromWireValue",
        "path",
        "obj",
        "prop",
        "obj",
        "prop",
        "obj",
        "path",
        "obj",
        "prop",
        "obj",
        "prop",
        "obj",
        "returnValue",
        "rawValue",
        "parent",
        "path",
        "fromWireValue",
        "ev",
        "returnValue",
        "returnValue",
        "rawValue",
        "parent",
        "argumentList",
        "rawValue",
        "argumentList",
        "returnValue",
        "proxy",
        "value",
        "MessageChannel",
        "expose",
        "obj",
        "port2",
        "returnValue",
        "transfer",
        "port1",
        "port1",
        "returnValue",
        "value",
        "returnValue",
        "throwMarker",
        "returnValue",
        "value",
        "throwMarker",
        "returnValue",
        "toWireValue",
        "returnValue",
        "ep",
        "wireValue",
        "transferables",
        "ep",
        "callback",
        "closeEndPoint",
        "ep",
        "finalizer",
        "obj",
        "obj",
        "finalizer",
        "obj",
        "finalizer",
        "error",
        "toWireValue",
        "throwMarker",
        "ep",
        "wireValue",
        "transferables",
        "ep",
        "ep",
        "endpoint",
        "endpoint",
        "endpoint",
        "isMessagePort",
        "endpoint",
        "endpoint",
        "ep",
        "target",
        "createProxy",
        "ep",
        "target",
        "isReleased",
        "isReleased",
        "ep",
        "requestResponseMessage",
        "ep",
        "closeEndPoint",
        "ep",
        "globalThis",
        "FinalizationRegistry",
        "ep",
        "proxyCounter",
        "ep",
        "proxyCounter",
        "ep",
        "newCount",
        "newCount",
        "releaseEndpoint",
        "ep",
        "proxy",
        "ep",
        "proxyCounter",
        "ep",
        "proxyCounter",
        "ep",
        "newCount",
        "proxyFinalizers",
        "proxyFinalizers",
        "proxy",
        "ep",
        "proxy",
        "proxy",
        "proxyFinalizers",
        "proxyFinalizers",
        "proxy",
        "ep",
        "path",
        "target",
        "Proxy",
        "target",
        "_target",
        "prop",
        "throwIfProxyReleased",
        "isProxyReleased",
        "prop",
        "releaseProxy",
        "unregisterProxy",
        "proxy",
        "releaseEndpoint",
        "ep",
        "isProxyReleased",
        "prop",
        "path",
        "proxy",
        "requestResponseMessage",
        "ep",
        "path",
        "p",
        "p",
        "fromWireValue",
        "r",
        "r",
        "createProxy",
        "ep",
        "path",
        "prop",
        "_target",
        "prop",
        "rawValue",
        "throwIfProxyReleased",
        "isProxyReleased",
        "toWireValue",
        "rawValue",
        "requestResponseMessage",
        "ep",
        "path",
        "prop",
        "p",
        "p",
        "transferables",
        "fromWireValue",
        "_target",
        "_thisArg",
        "rawArgumentList",
        "throwIfProxyReleased",
        "isProxyReleased",
        "path",
        "path",
        "last",
        "createEndpoint",
        "requestResponseMessage",
        "ep",
        "fromWireValue",
        "last",
        "createProxy",
        "ep",
        "path",
        "processArguments",
        "rawArgumentList",
        "requestResponseMessage",
        "ep",
        "path",
        "p",
        "p",
        "transferables",
        "fromWireValue",
        "_target",
        "rawArgumentList",
        "throwIfProxyReleased",
        "isProxyReleased",
        "processArguments",
        "rawArgumentList",
        "requestResponseMessage",
        "ep",
        "path",
        "p",
        "p",
        "transferables",
        "fromWireValue",
        "registerProxy",
        "proxy",
        "ep",
        "proxy",
        "arr",
        "arr",
        "argumentList",
        "argumentList",
        "toWireValue",
        "processed",
        "v",
        "v",
        "myFlat",
        "processed",
        "v",
        "v",
        "obj",
        "transfers",
        "transferCache",
        "obj",
        "transfers",
        "obj",
        "obj",
        "obj",
        "proxyMarker",
        "value",
        "transferHandlers",
        "handler",
        "value",
        "handler",
        "value",
        "serializedValue",
        "transferables",
        "transferCache",
        "value",
        "value",
        "value",
        "transferHandlers",
        "value",
        "value",
        "value",
        "ep",
        "msg",
        "transfers",
        "resolve",
        "generateUUID",
        "ep",
        "l",
        "ev",
        "ev",
        "ev",
        "ev",
        "id",
        "ep",
        "l",
        "resolve",
        "ev",
        "ep",
        "ep",
        "ep",
        "msg",
        "transfers",
        "diff_match_patch",
        "op",
        "text",
        "op",
        "text",
        "diff_match_patch",
        "text1",
        "text2",
        "opt_checklines",
        "opt_deadline",
        "opt_deadline",
        "opt_deadline",
        "opt_deadline",
        "text1",
        "text2",
        "text1",
        "text2",
        "text1",
        "diff_match_patch",
        "DIFF_EQUAL",
        "text1",
        "opt_checklines",
        "opt_checklines",
        "text1",
        "text2",
        "text1",
        "commonlength",
        "text1",
        "text1",
        "commonlength",
        "text2",
        "text2",
        "commonlength",
        "commonlength",
        "text1",
        "text2",
        "text1",
        "text1",
        "commonlength",
        "text1",
        "text1",
        "text1",
        "commonlength",
        "text2",
        "text2",
        "text2",
        "commonlength",
        "text1",
        "text2",
        "checklines",
        "deadline",
        "commonprefix",
        "diffs",
        "diff_match_patch",
        "DIFF_EQUAL",
        "commonprefix",
        "commonsuffix",
        "diffs",
        "diff_match_patch",
        "DIFF_EQUAL",
        "commonsuffix",
        "diffs",
        "diffs",
        "diff_match_patch",
        "text1",
        "text2",
        "checklines",
        "deadline",
        "text1",
        "diff_match_patch",
        "DIFF_INSERT",
        "text2",
        "text2",
        "diff_match_patch",
        "DIFF_DELETE",
        "text1",
        "text1",
        "text2",
        "text1",
        "text2",
        "text1",
        "text2",
        "text2",
        "text1",
        "longtext",
        "shorttext",
        "i",
        "diffs",
        "diff_match_patch",
        "DIFF_INSERT",
        "longtext",
        "i",
        "diff_match_patch",
        "DIFF_EQUAL",
        "shorttext",
        "diff_match_patch",
        "DIFF_INSERT",
        "longtext",
        "i",
        "shorttext",
        "text1",
        "text2",
        "diffs",
        "diffs",
        "DIFF_DELETE",
        "diffs",
        "shorttext",
        "diff_match_patch",
        "DIFF_DELETE",
        "text1",
        "diff_match_patch",
        "DIFF_INSERT",
        "text2",
        "text1",
        "text2",
        "hm",
        "hm",
        "hm",
        "hm",
        "hm",
        "hm",
        "text1_a",
        "text2_a",
        "checklines",
        "deadline",
        "text1_b",
        "text2_b",
        "checklines",
        "deadline",
        "diffs_a",
        "diff_match_patch",
        "DIFF_EQUAL",
        "mid_common",
        "diffs_b",
        "checklines",
        "text1",
        "text2",
        "text1",
        "text2",
        "deadline",
        "text1",
        "text2",
        "deadline",
        "diff_match_patch",
        "text1",
        "text2",
        "deadline",
        "text1",
        "text2",
        "text1",
        "a",
        "text2",
        "a",
        "a",
        "text1",
        "text2",
        "deadline",
        "diffs",
        "linearray",
        "diffs",
        "diffs",
        "diff_match_patch",
        "DIFF_EQUAL",
        "pointer",
        "diffs",
        "diffs",
        "pointer",
        "DIFF_INSERT",
        "count_insert",
        "text_insert",
        "diffs",
        "pointer",
        "DIFF_DELETE",
        "count_delete",
        "text_delete",
        "diffs",
        "pointer",
        "DIFF_EQUAL",
        "count_delete",
        "count_insert",
        "diffs",
        "pointer",
        "count_delete",
        "count_insert",
        "count_delete",
        "count_insert",
        "pointer",
        "pointer",
        "count_delete",
        "count_insert",
        "text_delete",
        "text_insert",
        "deadline",
        "subDiff",
        "j",
        "j",
        "diffs",
        "pointer",
        "subDiff",
        "j",
        "pointer",
        "pointer",
        "subDiff",
        "count_insert",
        "count_delete",
        "text_delete",
        "text_insert",
        "pointer",
        "diffs",
        "diffs",
        "diff_match_patch",
        "text1",
        "text2",
        "deadline",
        "text1",
        "text2",
        "text1_length",
        "text2_length",
        "max_d",
        "v_length",
        "v_length",
        "x",
        "v_length",
        "x",
        "v1",
        "x",
        "v2",
        "x",
        "v1",
        "v_offset",
        "v2",
        "v_offset",
        "text1_length",
        "text2_length",
        "delta",
        "d",
        "max_d",
        "d",
        "deadline",
        "d",
        "k1start",
        "k1",
        "d",
        "k1end",
        "k1",
        "v_offset",
        "k1",
        "k1",
        "d",
        "k1",
        "d",
        "v1",
        "k1_offset",
        "v1",
        "k1_offset",
        "x1",
        "v1",
        "k1_offset",
        "x1",
        "v1",
        "k1_offset",
        "x1",
        "k1",
        "x1",
        "text1_length",
        "y1",
        "text2_length",
        "text1",
        "x1",
        "text2",
        "y1",
        "x1",
        "y1",
        "v1",
        "k1_offset",
        "x1",
        "x1",
        "text1_length",
        "k1end",
        "y1",
        "text2_length",
        "k1start",
        "front",
        "v_offset",
        "delta",
        "k1",
        "k2_offset",
        "k2_offset",
        "v_length",
        "v2",
        "k2_offset",
        "text1_length",
        "v2",
        "k2_offset",
        "x1",
        "x2",
        "text1",
        "text2",
        "x1",
        "y1",
        "deadline",
        "d",
        "k2start",
        "k2",
        "d",
        "k2end",
        "k2",
        "v_offset",
        "k2",
        "k2",
        "d",
        "k2",
        "d",
        "v2",
        "k2_offset",
        "v2",
        "k2_offset",
        "x2",
        "v2",
        "k2_offset",
        "x2",
        "v2",
        "k2_offset",
        "x2",
        "k2",
        "x2",
        "text1_length",
        "y2",
        "text2_length",
        "text1",
        "text1_length",
        "x2",
        "text2",
        "text2_length",
        "y2",
        "x2",
        "y2",
        "v2",
        "k2_offset",
        "x2",
        "x2",
        "text1_length",
        "k2end",
        "y2",
        "text2_length",
        "k2start",
        "front",
        "v_offset",
        "delta",
        "k2",
        "k1_offset",
        "k1_offset",
        "v_length",
        "v1",
        "k1_offset",
        "v1",
        "k1_offset",
        "v_offset",
        "x1",
        "k1_offset",
        "x2",
        "text1_length",
        "x2",
        "x1",
        "x2",
        "text1",
        "text2",
        "x1",
        "y1",
        "deadline",
        "diff_match_patch",
        "DIFF_DELETE",
        "text1",
        "diff_match_patch",
        "DIFF_INSERT",
        "text2",
        "diff_match_patch",
        "text1",
        "text2",
        "x",
        "y",
        "deadline",
        "text1",
        "x",
        "text2",
        "y",
        "text1",
        "x",
        "text2",
        "y",
        "text1a",
        "text2a",
        "deadline",
        "text1b",
        "text2b",
        "deadline",
        "diffs",
        "diffsb",
        "diff_match_patch",
        "text1",
        "text2",
        "lineArray",
        "text",
        "lineArray",
        "lineEnd",
        "text",
        "lineEnd",
        "text",
        "lineStart",
        "lineEnd",
        "lineEnd",
        "text",
        "text",
        "lineStart",
        "lineEnd",
        "lineHash",
        "lineHash",
        "line",
        "lineHash",
        "line",
        "chars",
        "lineHash",
        "line",
        "lineArrayLength",
        "maxLines",
        "line",
        "text",
        "lineStart",
        "lineEnd",
        "text",
        "chars",
        "lineArrayLength",
        "lineHash",
        "line",
        "lineArrayLength",
        "lineArray",
        "lineArrayLength",
        "line",
        "lineStart",
        "lineEnd",
        "chars",
        "diff_linesToCharsMunge_",
        "text1",
        "maxLines",
        "diff_linesToCharsMunge_",
        "text2",
        "chars1",
        "chars2",
        "lineArray",
        "diff_match_patch",
        "diffs",
        "lineArray",
        "i",
        "diffs",
        "i",
        "diffs",
        "i",
        "j",
        "chars",
        "j",
        "text",
        "j",
        "lineArray",
        "chars",
        "j",
        "diffs",
        "i",
        "text",
        "diff_match_patch",
        "text1",
        "text2",
        "text1",
        "text2",
        "text1",
        "text2",
        "text1",
        "text2",
        "pointermin",
        "pointermid",
        "text1",
        "pointerstart",
        "pointermid",
        "text2",
        "pointerstart",
        "pointermid",
        "pointermin",
        "pointermid",
        "pointerstart",
        "pointermin",
        "pointermax",
        "pointermid",
        "pointermid",
        "pointermax",
        "pointermin",
        "pointermin",
        "pointermid",
        "diff_match_patch",
        "text1",
        "text2",
        "text1",
        "text2",
        "text1",
        "text1",
        "text2",
        "text2",
        "text1",
        "text2",
        "pointermin",
        "pointermid",
        "text1",
        "text1",
        "pointermid",
        "text1",
        "pointerend",
        "text2",
        "text2",
        "pointermid",
        "text2",
        "pointerend",
        "pointermin",
        "pointermid",
        "pointerend",
        "pointermin",
        "pointermax",
        "pointermid",
        "pointermid",
        "pointermax",
        "pointermin",
        "pointermin",
        "pointermid",
        "diff_match_patch",
        "text1",
        "text2",
        "text1",
        "text2",
        "text1_length",
        "text2_length",
        "text1_length",
        "text2_length",
        "text1",
        "text1",
        "text1_length",
        "text2_length",
        "text1_length",
        "text2_length",
        "text2",
        "text2",
        "text1_length",
        "text1_length",
        "text2_length",
        "text1",
        "text2",
        "text_length",
        "text1",
        "text_length",
        "length",
        "text2",
        "pattern",
        "found",
        "best",
        "length",
        "found",
        "found",
        "text1",
        "text_length",
        "length",
        "text2",
        "length",
        "best",
        "length",
        "length",
        "diff_match_patch",
        "text1",
        "text2",
        "text1",
        "text2",
        "text1",
        "text2",
        "text1",
        "text2",
        "text2",
        "text1",
        "longtext",
        "shorttext",
        "longtext",
        "longtext",
        "shorttext",
        "i",
        "longtext",
        "i",
        "i",
        "longtext",
        "j",
        "shorttext",
        "seed",
        "j",
        "dmp",
        "longtext",
        "i",
        "shorttext",
        "j",
        "dmp",
        "longtext",
        "i",
        "shorttext",
        "j",
        "best_common",
        "suffixLength",
        "prefixLength",
        "best_common",
        "shorttext",
        "j",
        "suffixLength",
        "j",
        "shorttext",
        "j",
        "j",
        "prefixLength",
        "best_longtext_a",
        "longtext",
        "i",
        "suffixLength",
        "best_longtext_b",
        "longtext",
        "i",
        "prefixLength",
        "best_shorttext_a",
        "shorttext",
        "j",
        "suffixLength",
        "best_shorttext_b",
        "shorttext",
        "j",
        "prefixLength",
        "best_common",
        "longtext",
        "best_longtext_a",
        "best_longtext_b",
        "best_shorttext_a",
        "best_shorttext_b",
        "best_common",
        "diff_halfMatchI_",
        "longtext",
        "shorttext",
        "longtext",
        "diff_halfMatchI_",
        "longtext",
        "shorttext",
        "longtext",
        "hm1",
        "hm2",
        "hm2",
        "hm",
        "hm1",
        "hm1",
        "hm",
        "hm2",
        "hm",
        "hm1",
        "hm2",
        "hm1",
        "hm2",
        "text1",
        "text2",
        "text1_a",
        "hm",
        "text1_b",
        "hm",
        "text2_a",
        "hm",
        "text2_b",
        "hm",
        "text2_a",
        "hm",
        "text2_b",
        "hm",
        "text1_a",
        "hm",
        "text1_b",
        "hm",
        "hm",
        "text1_a",
        "text1_b",
        "text2_a",
        "text2_b",
        "mid_common",
        "diff_match_patch",
        "diffs",
        "pointer",
        "diffs",
        "diffs",
        "pointer",
        "DIFF_EQUAL",
        "equalities",
        "equalitiesLength",
        "pointer",
        "length_insertions1",
        "length_insertions2",
        "length_deletions1",
        "length_deletions2",
        "length_insertions2",
        "length_deletions2",
        "lastEquality",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "DIFF_INSERT",
        "length_insertions2",
        "diffs",
        "pointer",
        "length_deletions2",
        "diffs",
        "pointer",
        "lastEquality",
        "lastEquality",
        "length_insertions1",
        "length_deletions1",
        "lastEquality",
        "length_insertions2",
        "length_deletions2",
        "diffs",
        "equalities",
        "equalitiesLength",
        "diff_match_patch",
        "DIFF_DELETE",
        "lastEquality",
        "diffs",
        "equalities",
        "equalitiesLength",
        "DIFF_INSERT",
        "equalitiesLength",
        "equalitiesLength",
        "pointer",
        "equalitiesLength",
        "equalities",
        "equalitiesLength",
        "length_insertions1",
        "length_deletions1",
        "length_insertions2",
        "length_deletions2",
        "lastEquality",
        "changes",
        "pointer",
        "changes",
        "diffs",
        "diffs",
        "pointer",
        "pointer",
        "diffs",
        "diffs",
        "pointer",
        "DIFF_DELETE",
        "diffs",
        "pointer",
        "DIFF_INSERT",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "deletion",
        "insertion",
        "insertion",
        "deletion",
        "overlap_length1",
        "overlap_length2",
        "overlap_length1",
        "deletion",
        "overlap_length1",
        "insertion",
        "diffs",
        "pointer",
        "diff_match_patch",
        "DIFF_EQUAL",
        "insertion",
        "overlap_length1",
        "diffs",
        "pointer",
        "deletion",
        "deletion",
        "overlap_length1",
        "diffs",
        "pointer",
        "insertion",
        "overlap_length1",
        "pointer",
        "overlap_length2",
        "deletion",
        "overlap_length2",
        "insertion",
        "diffs",
        "pointer",
        "diff_match_patch",
        "DIFF_EQUAL",
        "deletion",
        "overlap_length2",
        "diffs",
        "pointer",
        "DIFF_INSERT",
        "diffs",
        "pointer",
        "insertion",
        "insertion",
        "overlap_length2",
        "diffs",
        "pointer",
        "DIFF_DELETE",
        "diffs",
        "pointer",
        "deletion",
        "overlap_length2",
        "pointer",
        "pointer",
        "pointer",
        "diff_match_patch",
        "diffs",
        "one",
        "two",
        "one",
        "two",
        "one",
        "one",
        "two",
        "char1",
        "diff_match_patch",
        "char2",
        "diff_match_patch",
        "nonAlphaNumeric1",
        "char1",
        "diff_match_patch",
        "nonAlphaNumeric2",
        "char2",
        "diff_match_patch",
        "whitespace1",
        "char1",
        "diff_match_patch",
        "whitespace2",
        "char2",
        "diff_match_patch",
        "lineBreak1",
        "one",
        "diff_match_patch",
        "lineBreak2",
        "two",
        "diff_match_patch",
        "blankLine1",
        "blankLine2",
        "lineBreak1",
        "lineBreak2",
        "nonAlphaNumeric1",
        "whitespace1",
        "whitespace2",
        "whitespace1",
        "whitespace2",
        "nonAlphaNumeric1",
        "nonAlphaNumeric2",
        "pointer",
        "diffs",
        "diffs",
        "pointer",
        "DIFF_EQUAL",
        "diffs",
        "pointer",
        "DIFF_EQUAL",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "equality1",
        "edit",
        "commonOffset",
        "edit",
        "edit",
        "commonOffset",
        "equality1",
        "equality1",
        "equality1",
        "commonOffset",
        "edit",
        "commonString",
        "edit",
        "edit",
        "commonOffset",
        "equality2",
        "commonString",
        "equality2",
        "diff_cleanupSemanticScore_",
        "equality1",
        "edit",
        "diff_cleanupSemanticScore_",
        "edit",
        "equality2",
        "edit",
        "equality2",
        "equality1",
        "edit",
        "edit",
        "edit",
        "equality2",
        "equality2",
        "equality2",
        "diff_cleanupSemanticScore_",
        "equality1",
        "edit",
        "diff_cleanupSemanticScore_",
        "edit",
        "equality2",
        "score",
        "bestScore",
        "bestScore",
        "score",
        "bestEquality1",
        "equality1",
        "bestEdit",
        "edit",
        "bestEquality2",
        "equality2",
        "diffs",
        "pointer",
        "bestEquality1",
        "bestEquality1",
        "diffs",
        "pointer",
        "bestEquality1",
        "diffs",
        "pointer",
        "pointer",
        "diffs",
        "pointer",
        "bestEdit",
        "bestEquality2",
        "diffs",
        "pointer",
        "bestEquality2",
        "diffs",
        "pointer",
        "pointer",
        "pointer",
        "diff_match_patch",
        "diff_match_patch",
        "diff_match_patch",
        "diff_match_patch",
        "diff_match_patch",
        "diff_match_patch",
        "diffs",
        "pointer",
        "diffs",
        "diffs",
        "pointer",
        "DIFF_EQUAL",
        "diffs",
        "pointer",
        "post_ins",
        "post_del",
        "equalities",
        "equalitiesLength",
        "pointer",
        "pre_ins",
        "post_ins",
        "pre_del",
        "post_del",
        "lastEquality",
        "diffs",
        "pointer",
        "equalitiesLength",
        "lastEquality",
        "post_ins",
        "post_del",
        "diffs",
        "pointer",
        "DIFF_DELETE",
        "post_del",
        "post_ins",
        "lastEquality",
        "pre_ins",
        "pre_del",
        "post_ins",
        "post_del",
        "lastEquality",
        "pre_ins",
        "pre_del",
        "post_ins",
        "post_del",
        "diffs",
        "equalities",
        "equalitiesLength",
        "diff_match_patch",
        "DIFF_DELETE",
        "lastEquality",
        "diffs",
        "equalities",
        "equalitiesLength",
        "DIFF_INSERT",
        "equalitiesLength",
        "lastEquality",
        "pre_ins",
        "pre_del",
        "post_ins",
        "post_del",
        "equalitiesLength",
        "equalitiesLength",
        "pointer",
        "equalitiesLength",
        "equalities",
        "equalitiesLength",
        "post_ins",
        "post_del",
        "changes",
        "pointer",
        "changes",
        "diffs",
        "diff_match_patch",
        "diffs",
        "diffs",
        "diff_match_patch",
        "DIFF_EQUAL",
        "pointer",
        "diffs",
        "diffs",
        "pointer",
        "DIFF_INSERT",
        "count_insert",
        "text_insert",
        "diffs",
        "pointer",
        "pointer",
        "DIFF_DELETE",
        "count_delete",
        "text_delete",
        "diffs",
        "pointer",
        "pointer",
        "DIFF_EQUAL",
        "count_delete",
        "count_insert",
        "count_delete",
        "count_insert",
        "commonlength",
        "text_insert",
        "text_delete",
        "commonlength",
        "pointer",
        "count_delete",
        "count_insert",
        "diffs",
        "pointer",
        "count_delete",
        "count_insert",
        "DIFF_EQUAL",
        "diffs",
        "pointer",
        "count_delete",
        "count_insert",
        "text_insert",
        "commonlength",
        "diffs",
        "diff_match_patch",
        "DIFF_EQUAL",
        "text_insert",
        "commonlength",
        "pointer",
        "text_insert",
        "text_insert",
        "commonlength",
        "text_delete",
        "text_delete",
        "commonlength",
        "commonlength",
        "text_insert",
        "text_delete",
        "commonlength",
        "diffs",
        "pointer",
        "text_insert",
        "text_insert",
        "commonlength",
        "diffs",
        "pointer",
        "text_insert",
        "text_insert",
        "text_insert",
        "commonlength",
        "text_delete",
        "text_delete",
        "text_delete",
        "commonlength",
        "pointer",
        "count_delete",
        "count_insert",
        "diffs",
        "pointer",
        "count_delete",
        "count_insert",
        "text_delete",
        "diffs",
        "pointer",
        "diff_match_patch",
        "DIFF_DELETE",
        "text_delete",
        "pointer",
        "text_insert",
        "diffs",
        "pointer",
        "diff_match_patch",
        "DIFF_INSERT",
        "text_insert",
        "pointer",
        "pointer",
        "pointer",
        "diffs",
        "pointer",
        "DIFF_EQUAL",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "pointer",
        "count_insert",
        "count_delete",
        "text_delete",
        "text_insert",
        "diffs",
        "diffs",
        "diffs",
        "pointer",
        "pointer",
        "diffs",
        "diffs",
        "pointer",
        "DIFF_EQUAL",
        "diffs",
        "pointer",
        "DIFF_EQUAL",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "changes",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "diffs",
        "pointer",
        "changes",
        "pointer",
        "changes",
        "diffs",
        "diff_match_patch",
        "diffs",
        "loc",
        "x",
        "x",
        "diffs",
        "x",
        "diffs",
        "x",
        "DIFF_INSERT",
        "chars1",
        "diffs",
        "x",
        "diffs",
        "x",
        "DIFF_DELETE",
        "chars2",
        "diffs",
        "x",
        "chars1",
        "loc",
        "last_chars1",
        "chars1",
        "last_chars2",
        "chars2",
        "diffs",
        "x",
        "diffs",
        "x",
        "DIFF_DELETE",
        "last_chars2",
        "last_chars2",
        "loc",
        "last_chars1",
        "diff_match_patch",
        "diffs",
        "x",
        "diffs",
        "x",
        "diffs",
        "x",
        "diffs",
        "x",
        "data",
        "pattern_amp",
        "pattern_lt",
        "pattern_gt",
        "pattern_para",
        "op",
        "DIFF_INSERT",
        "html",
        "x",
        "text",
        "DIFF_DELETE",
        "html",
        "x",
        "text",
        "DIFF_EQUAL",
        "html",
        "x",
        "text",
        "html",
        "diff_match_patch",
        "diffs",
        "x",
        "diffs",
        "x",
        "diffs",
        "x",
        "DIFF_INSERT",
        "text",
        "x",
        "diffs",
        "x",
        "text",
        "diff_match_patch",
        "diffs",
        "x",
        "diffs",
        "x",
        "diffs",
        "x",
        "DIFF_DELETE",
        "text",
        "x",
        "diffs",
        "x",
        "text",
        "diff_match_patch",
        "diffs",
        "x",
        "diffs",
        "x",
        "diffs",
        "x",
        "diffs",
        "x",
        "op",
        "DIFF_INSERT",
        "insertions",
        "data",
        "DIFF_DELETE",
        "deletions",
        "data",
        "DIFF_EQUAL",
        "levenshtein",
        "insertions",
        "deletions",
        "insertions",
        "deletions",
        "levenshtein",
        "insertions",
        "deletions",
        "levenshtein",
        "diff_match_patch",
        "diffs",
        "x",
        "diffs",
        "x",
        "diffs",
        "x",
        "DIFF_INSERT",
        "text",
        "x",
        "encodeURI",
        "diffs",
        "x",
        "DIFF_DELETE",
        "text",
        "x",
        "diffs",
        "x",
        "DIFF_EQUAL",
        "text",
        "x",
        "diffs",
        "x",
        "text",
        "diff_match_patch",
        "text1",
        "delta",
        "delta",
        "x",
        "tokens",
        "x",
        "tokens",
        "x",
        "tokens",
        "x",
        "diffs",
        "diffsLength",
        "diff_match_patch",
        "DIFF_INSERT",
        "decodeURI",
        "param",
        "ex",
        "param",
        "parseInt",
        "param",
        "isNaN",
        "n",
        "n",
        "param",
        "text1",
        "pointer",
        "pointer",
        "n",
        "tokens",
        "x",
        "diffs",
        "diffsLength",
        "diff_match_patch",
        "DIFF_EQUAL",
        "text",
        "diffs",
        "diffsLength",
        "diff_match_patch",
        "DIFF_DELETE",
        "text",
        "tokens",
        "x",
        "tokens",
        "x",
        "pointer",
        "text1",
        "pointer",
        "text1",
        "diffs",
        "diff_match_patch",
        "text",
        "pattern",
        "loc",
        "text",
        "pattern",
        "loc",
        "loc",
        "loc",
        "text",
        "text",
        "pattern",
        "text",
        "text",
        "loc",
        "loc",
        "pattern",
        "pattern",
        "loc",
        "text",
        "pattern",
        "loc",
        "diff_match_patch",
        "text",
        "pattern",
        "loc",
        "pattern",
        "pattern",
        "e",
        "x",
        "e",
        "pattern",
        "loc",
        "x",
        "dmp",
        "proximity",
        "accuracy",
        "accuracy",
        "proximity",
        "dmp",
        "text",
        "pattern",
        "loc",
        "best_loc",
        "score_threshold",
        "match_bitapScore_",
        "best_loc",
        "score_threshold",
        "best_loc",
        "text",
        "pattern",
        "loc",
        "pattern",
        "best_loc",
        "score_threshold",
        "match_bitapScore_",
        "best_loc",
        "score_threshold",
        "pattern",
        "best_loc",
        "pattern",
        "text",
        "d",
        "pattern",
        "d",
        "bin_min",
        "bin_mid",
        "bin_max",
        "bin_min",
        "bin_mid",
        "match_bitapScore_",
        "d",
        "loc",
        "bin_mid",
        "score_threshold",
        "bin_min",
        "bin_mid",
        "bin_max",
        "bin_mid",
        "bin_mid",
        "bin_max",
        "bin_min",
        "bin_min",
        "bin_max",
        "bin_mid",
        "loc",
        "bin_mid",
        "loc",
        "bin_mid",
        "text",
        "pattern",
        "finish",
        "rd",
        "finish",
        "d",
        "j",
        "start",
        "j",
        "s",
        "text",
        "j",
        "d",
        "rd",
        "j",
        "rd",
        "j",
        "charMatch",
        "rd",
        "j",
        "rd",
        "j",
        "charMatch",
        "last_rd",
        "j",
        "last_rd",
        "j",
        "last_rd",
        "j",
        "rd",
        "j",
        "matchmask",
        "match_bitapScore_",
        "d",
        "j",
        "score",
        "score_threshold",
        "score_threshold",
        "score",
        "best_loc",
        "j",
        "best_loc",
        "loc",
        "start",
        "loc",
        "best_loc",
        "match_bitapScore_",
        "d",
        "loc",
        "score_threshold",
        "last_rd",
        "rd",
        "best_loc",
        "diff_match_patch",
        "pattern",
        "i",
        "pattern",
        "i",
        "s",
        "pattern",
        "i",
        "i",
        "pattern",
        "i",
        "s",
        "pattern",
        "i",
        "pattern",
        "i",
        "s",
        "diff_match_patch",
        "patch",
        "text",
        "text",
        "patch",
        "text",
        "patch",
        "patch",
        "patch",
        "text",
        "pattern",
        "text",
        "pattern",
        "pattern",
        "padding",
        "pattern",
        "text",
        "patch",
        "padding",
        "patch",
        "patch",
        "padding",
        "padding",
        "text",
        "patch",
        "padding",
        "patch",
        "prefix",
        "patch",
        "diff_match_patch",
        "DIFF_EQUAL",
        "prefix",
        "text",
        "patch",
        "patch",
        "patch",
        "patch",
        "padding",
        "suffix",
        "patch",
        "diff_match_patch",
        "DIFF_EQUAL",
        "suffix",
        "patch",
        "prefix",
        "patch",
        "prefix",
        "patch",
        "prefix",
        "suffix",
        "patch",
        "prefix",
        "suffix",
        "diff_match_patch",
        "a",
        "opt_b",
        "opt_c",
        "a",
        "opt_b",
        "opt_c",
        "text1",
        "a",
        "diffs",
        "text1",
        "opt_b",
        "diffs",
        "diffs",
        "diffs",
        "a",
        "a",
        "opt_b",
        "opt_c",
        "diffs",
        "a",
        "text1",
        "diffs",
        "a",
        "opt_b",
        "opt_b",
        "opt_c",
        "text1",
        "a",
        "diffs",
        "opt_b",
        "a",
        "opt_b",
        "opt_c",
        "opt_c",
        "text1",
        "a",
        "diffs",
        "opt_c",
        "diffs",
        "diff_match_patch",
        "x",
        "diffs",
        "x",
        "diffs",
        "x",
        "diffs",
        "x",
        "patchDiffLength",
        "diff_type",
        "DIFF_EQUAL",
        "patch",
        "char_count1",
        "patch",
        "char_count2",
        "diff_type",
        "DIFF_INSERT",
        "patch",
        "patchDiffLength",
        "diffs",
        "x",
        "patch",
        "diff_text",
        "postpatch_text",
        "postpatch_text",
        "char_count2",
        "diff_text",
        "postpatch_text",
        "char_count2",
        "DIFF_DELETE",
        "patch",
        "diff_text",
        "patch",
        "patchDiffLength",
        "diffs",
        "x",
        "postpatch_text",
        "postpatch_text",
        "char_count2",
        "postpatch_text",
        "char_count2",
        "diff_text",
        "DIFF_EQUAL",
        "diff_text",
        "patchDiffLength",
        "diffs",
        "x",
        "patch",
        "patchDiffLength",
        "diffs",
        "x",
        "patch",
        "diff_text",
        "patch",
        "diff_text",
        "diff_text",
        "patchDiffLength",
        "patch",
        "prepatch_text",
        "patches",
        "patch",
        "patch",
        "diff_match_patch",
        "patchDiffLength",
        "prepatch_text",
        "postpatch_text",
        "char_count1",
        "char_count2",
        "diff_type",
        "DIFF_INSERT",
        "char_count1",
        "diff_text",
        "diff_type",
        "DIFF_DELETE",
        "char_count2",
        "diff_text",
        "patchDiffLength",
        "patch",
        "prepatch_text",
        "patches",
        "patch",
        "patches",
        "diff_match_patch",
        "patches",
        "x",
        "patches",
        "x",
        "patches",
        "x",
        "diff_match_patch",
        "patchCopy",
        "y",
        "patch",
        "y",
        "patchCopy",
        "y",
        "diff_match_patch",
        "patch",
        "y",
        "patch",
        "y",
        "patchCopy",
        "patch",
        "patchCopy",
        "patch",
        "patchCopy",
        "patch",
        "patchCopy",
        "patch",
        "patchesCopy",
        "x",
        "patchCopy",
        "patchesCopy",
        "diff_match_patch",
        "patches",
        "text",
        "patches",
        "text",
        "patches",
        "patches",
        "patches",
        "text",
        "nullPadding",
        "text",
        "nullPadding",
        "patches",
        "x",
        "patches",
        "x",
        "patches",
        "x",
        "delta",
        "patches",
        "x",
        "text1",
        "start_loc",
        "text",
        "text1",
        "expected_loc",
        "start_loc",
        "end_loc",
        "text",
        "text1",
        "text1",
        "expected_loc",
        "text1",
        "end_loc",
        "start_loc",
        "end_loc",
        "start_loc",
        "start_loc",
        "text",
        "text1",
        "expected_loc",
        "start_loc",
        "results",
        "x",
        "delta",
        "patches",
        "x",
        "patches",
        "x",
        "results",
        "x",
        "delta",
        "start_loc",
        "expected_loc",
        "end_loc",
        "text2",
        "text",
        "start_loc",
        "start_loc",
        "text1",
        "text2",
        "text",
        "start_loc",
        "end_loc",
        "text1",
        "text2",
        "text",
        "text",
        "start_loc",
        "patches",
        "x",
        "text",
        "start_loc",
        "text1",
        "text1",
        "text2",
        "text1",
        "diffs",
        "text1",
        "results",
        "x",
        "diffs",
        "y",
        "patches",
        "x",
        "y",
        "patches",
        "x",
        "y",
        "mod",
        "DIFF_EQUAL",
        "index2",
        "diffs",
        "index1",
        "mod",
        "DIFF_INSERT",
        "text",
        "text",
        "start_loc",
        "index2",
        "mod",
        "text",
        "start_loc",
        "index2",
        "mod",
        "DIFF_DELETE",
        "text",
        "text",
        "start_loc",
        "index2",
        "text",
        "start_loc",
        "diffs",
        "index1",
        "mod",
        "mod",
        "DIFF_DELETE",
        "index1",
        "mod",
        "text",
        "text",
        "nullPadding",
        "text",
        "nullPadding",
        "text",
        "results",
        "diff_match_patch",
        "patches",
        "x",
        "paddingLength",
        "x",
        "nullPadding",
        "x",
        "x",
        "patches",
        "x",
        "patches",
        "x",
        "paddingLength",
        "patches",
        "x",
        "paddingLength",
        "patches",
        "patch",
        "diffs",
        "diffs",
        "DIFF_EQUAL",
        "diffs",
        "diff_match_patch",
        "DIFF_EQUAL",
        "nullPadding",
        "patch",
        "paddingLength",
        "patch",
        "paddingLength",
        "patch",
        "paddingLength",
        "patch",
        "paddingLength",
        "paddingLength",
        "diffs",
        "paddingLength",
        "diffs",
        "diffs",
        "nullPadding",
        "diffs",
        "diffs",
        "patch",
        "extraLength",
        "patch",
        "extraLength",
        "patch",
        "extraLength",
        "patch",
        "extraLength",
        "patch",
        "patches",
        "patches",
        "diffs",
        "patch",
        "diffs",
        "diffs",
        "diffs",
        "DIFF_EQUAL",
        "diffs",
        "diff_match_patch",
        "DIFF_EQUAL",
        "nullPadding",
        "patch",
        "paddingLength",
        "patch",
        "paddingLength",
        "paddingLength",
        "diffs",
        "diffs",
        "paddingLength",
        "diffs",
        "diffs",
        "diffs",
        "diffs",
        "nullPadding",
        "extraLength",
        "patch",
        "extraLength",
        "patch",
        "extraLength",
        "nullPadding",
        "diff_match_patch",
        "patches",
        "x",
        "patches",
        "x",
        "patches",
        "x",
        "patch_size",
        "patches",
        "x",
        "patches",
        "x",
        "bigpatch",
        "bigpatch",
        "bigpatch",
        "diff_match_patch",
        "patch",
        "start1",
        "precontext",
        "patch",
        "start2",
        "precontext",
        "precontext",
        "patch",
        "patch",
        "precontext",
        "patch",
        "diff_match_patch",
        "DIFF_EQUAL",
        "precontext",
        "bigpatch",
        "patch",
        "patch_size",
        "bigpatch",
        "bigpatch",
        "diff_type",
        "DIFF_INSERT",
        "patch",
        "diff_text",
        "start2",
        "diff_text",
        "patch",
        "bigpatch",
        "empty",
        "diff_type",
        "DIFF_DELETE",
        "patch",
        "patch",
        "DIFF_EQUAL",
        "diff_text",
        "patch_size",
        "patch",
        "diff_text",
        "start1",
        "diff_text",
        "empty",
        "patch",
        "diff_match_patch",
        "diff_type",
        "diff_text",
        "bigpatch",
        "diff_text",
        "diff_text",
        "patch_size",
        "patch",
        "patch",
        "diff_text",
        "start1",
        "diff_text",
        "diff_type",
        "DIFF_EQUAL",
        "patch",
        "diff_text",
        "start2",
        "diff_text",
        "empty",
        "patch",
        "diff_match_patch",
        "diff_type",
        "diff_text",
        "diff_text",
        "bigpatch",
        "bigpatch",
        "bigpatch",
        "bigpatch",
        "diff_text",
        "precontext",
        "patch",
        "precontext",
        "precontext",
        "precontext",
        "bigpatch",
        "postcontext",
        "patch",
        "postcontext",
        "patch",
        "postcontext",
        "patch",
        "patch",
        "patch",
        "DIFF_EQUAL",
        "patch",
        "patch",
        "postcontext",
        "patch",
        "diff_match_patch",
        "DIFF_EQUAL",
        "postcontext",
        "empty",
        "patches",
        "x",
        "patch",
        "diff_match_patch",
        "patches",
        "x",
        "patches",
        "x",
        "text",
        "x",
        "patches",
        "x",
        "text",
        "diff_match_patch",
        "textline",
        "textline",
        "patches",
        "textline",
        "textPointer",
        "text",
        "text",
        "textPointer",
        "patchHeader",
        "m",
        "text",
        "textPointer",
        "diff_match_patch",
        "patches",
        "patch",
        "patch",
        "parseInt",
        "m",
        "m",
        "patch",
        "patch",
        "m",
        "patch",
        "patch",
        "patch",
        "parseInt",
        "m",
        "patch",
        "parseInt",
        "m",
        "m",
        "patch",
        "patch",
        "m",
        "patch",
        "patch",
        "patch",
        "parseInt",
        "m",
        "textPointer",
        "textPointer",
        "text",
        "text",
        "textPointer",
        "decodeURI",
        "text",
        "textPointer",
        "ex",
        "line",
        "sign",
        "patch",
        "diff_match_patch",
        "DIFF_DELETE",
        "line",
        "sign",
        "patch",
        "diff_match_patch",
        "DIFF_INSERT",
        "line",
        "sign",
        "patch",
        "diff_match_patch",
        "DIFF_EQUAL",
        "line",
        "sign",
        "sign",
        "sign",
        "line",
        "textPointer",
        "patches",
        "diff_match_patch",
        "diff_match_patch",
        "coords1",
        "coords1",
        "coords1",
        "coords2",
        "coords2",
        "coords2",
        "coords1",
        "coords2",
        "x",
        "x",
        "x",
        "DIFF_INSERT",
        "op",
        "DIFF_DELETE",
        "op",
        "DIFF_EQUAL",
        "op",
        "text",
        "x",
        "op",
        "encodeURI",
        "x",
        "text",
        "diff_match_patch",
        "diff_match_patch",
        "DIFF_DELETE",
        "DIFF_INSERT",
        "DIFF_EQUAL",
        "diffMatchPatch",
        "diffMatchPatch",
        "left",
        "right",
        "diffMatchPatchExports",
        "diff",
        "left",
        "right",
        "diff",
        "changes",
        "changes",
        "expose",
        "exports$1"
    ],
    "literals": [
        "'use strict'",
        "\"Comlink.proxy\"",
        "\"Comlink.endpoint\"",
        "\"Comlink.releaseProxy\"",
        "\"Comlink.finalizer\"",
        "\"Comlink.thrown\"",
        "\"object\"",
        "\"function\"",
        "\"proxy\"",
        "\"throw\"",
        "\"*\"",
        "\"*\"",
        "\"message\"",
        "Invalid origin '${ev.origin}' for comlink proxy",
        "\"GET\"",
        "\"SET\"",
        "\"APPLY\"",
        "\"CONSTRUCT\"",
        "\"ENDPOINT\"",
        "\"RELEASE\"",
        "\"RELEASE\"",
        "\"message\"",
        "\"function\"",
        "\"Unserializable return value\"",
        "\"MessagePort\"",
        "\"Proxy has been released and is not useable\"",
        "\"RELEASE\"",
        "\"FinalizationRegistry\"",
        "\"then\"",
        "\"GET\"",
        "\"SET\"",
        "\"ENDPOINT\"",
        "\"bind\"",
        "\"APPLY\"",
        "\"CONSTRUCT\"",
        "\"HANDLER\"",
        "\"RAW\"",
        "\"HANDLER\"",
        "\"RAW\"",
        "\"message\"",
        "\"message\"",
        "\"-\"",
        "'undefined'",
        "'Null input. (diff_main)'",
        "'undefined'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'\\n'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'&amp;'",
        "'&lt;'",
        "'&gt;'",
        "'&para;<br>'",
        "'<ins style=\"background:#e6ffe6;\">'",
        "'</ins>'",
        "'<del style=\"background:#ffe6e6;\">'",
        "'</del>'",
        "'<span>'",
        "'</span>'",
        "''",
        "''",
        "''",
        "'+'",
        "'-'",
        "'='",
        "'\\t'",
        "' '",
        "'+'",
        "'Illegal escape in diff_fromDelta: '",
        "'-'",
        "'='",
        "'Invalid number in diff_fromDelta: '",
        "'='",
        "'Invalid diff operation in diff_fromDelta: '",
        "'Delta length ('",
        "') does not equal source text length ('",
        "').'",
        "'Null input. (match_main)'",
        "'Pattern too long for this browser.'",
        "'patch not initialized'",
        "'string'",
        "'string'",
        "'undefined'",
        "'object'",
        "'undefined'",
        "'undefined'",
        "'string'",
        "'object'",
        "'undefined'",
        "'string'",
        "'string'",
        "'object'",
        "'Unknown call format to patch_make.'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'\\n'",
        "'Invalid patch string: '",
        "''",
        "'0'",
        "''",
        "'0'",
        "'Illegal escape in patch_fromText: '",
        "'-'",
        "'+'",
        "' '",
        "'@'",
        "''",
        "'Invalid patch mode \"'",
        "'\" in: '",
        "',0'",
        "','",
        "',0'",
        "','",
        "'@@ -'",
        "' +'",
        "' @@\\n'",
        "'+'",
        "'-'",
        "' '",
        "'\\n'",
        "''",
        "' '",
        "'diff_match_patch'",
        "'DIFF_DELETE'",
        "'DIFF_INSERT'",
        "'DIFF_EQUAL'"
    ],
    "variables": [
        "proxyMarker",
        "createEndpoint",
        "releaseProxy",
        "finalizer",
        "throwMarker",
        "isObject",
        "proxyTransferHandler",
        "throwTransferHandler",
        "serialized",
        "transferHandlers",
        "argumentList",
        "returnValue",
        "parent",
        "rawValue",
        "value",
        "wireValue",
        "transferables",
        "wireValue",
        "transferables",
        "proxyCounter",
        "proxyFinalizers",
        "newCount",
        "newCount",
        "isProxyReleased",
        "proxy",
        "r",
        "value",
        "transferables",
        "last",
        "argumentList",
        "transferables",
        "argumentList",
        "transferables",
        "processed",
        "transferCache",
        "name",
        "handler",
        "serializedValue",
        "transferables",
        "id",
        "diffMatchPatch",
        "diff_match_patch",
        "DIFF_DELETE",
        "DIFF_INSERT",
        "DIFF_EQUAL",
        "deadline",
        "opt_deadline",
        "checklines",
        "opt_checklines",
        "commonlength",
        "commonprefix",
        "commonsuffix",
        "diffs",
        "diffs",
        "longtext",
        "shorttext",
        "i",
        "hm",
        "text1_a",
        "text1_b",
        "text2_a",
        "text2_b",
        "mid_common",
        "diffs_a",
        "diffs_b",
        "a",
        "linearray",
        "diffs",
        "pointer",
        "count_delete",
        "count_insert",
        "text_delete",
        "text_insert",
        "subDiff",
        "j",
        "text1_length",
        "text2_length",
        "max_d",
        "v_offset",
        "max_d",
        "v_length",
        "v1",
        "v2",
        "x",
        "delta",
        "front",
        "k1start",
        "k1end",
        "k2start",
        "k2end",
        "d",
        "k1",
        "k1_offset",
        "x1",
        "y1",
        "k2_offset",
        "x2",
        "k2",
        "k2_offset",
        "x2",
        "y2",
        "k1_offset",
        "x1",
        "y1",
        "text1a",
        "text2a",
        "text1b",
        "text2b",
        "diffs",
        "diffsb",
        "lineArray",
        "lineHash",
        "chars",
        "lineStart",
        "lineEnd",
        "lineArrayLength",
        "line",
        "maxLines",
        "chars1",
        "chars2",
        "i",
        "chars",
        "text",
        "j",
        "pointermin",
        "pointermax",
        "pointermid",
        "pointermax",
        "pointerstart",
        "pointermin",
        "pointermax",
        "pointermid",
        "pointermax",
        "pointerend",
        "text1_length",
        "text2_length",
        "text_length",
        "best",
        "length",
        "pattern",
        "found",
        "longtext",
        "shorttext",
        "dmp",
        "seed",
        "j",
        "best_common",
        "best_longtext_a",
        "best_longtext_b",
        "best_shorttext_a",
        "best_shorttext_b",
        "prefixLength",
        "suffixLength",
        "hm1",
        "hm2",
        "hm",
        "text1_a",
        "text1_b",
        "text2_a",
        "text2_b",
        "mid_common",
        "changes",
        "equalities",
        "equalitiesLength",
        "lastEquality",
        "pointer",
        "length_insertions1",
        "length_deletions1",
        "length_insertions2",
        "length_deletions2",
        "deletion",
        "insertion",
        "overlap_length1",
        "overlap_length2",
        "char1",
        "char2",
        "nonAlphaNumeric1",
        "nonAlphaNumeric2",
        "whitespace1",
        "whitespace2",
        "lineBreak1",
        "lineBreak2",
        "blankLine1",
        "blankLine2",
        "pointer",
        "equality1",
        "edit",
        "equality2",
        "commonOffset",
        "commonString",
        "bestEquality1",
        "equality1",
        "bestEdit",
        "edit",
        "bestEquality2",
        "equality2",
        "bestScore",
        "score",
        "changes",
        "equalities",
        "equalitiesLength",
        "lastEquality",
        "pointer",
        "pre_ins",
        "pre_del",
        "post_ins",
        "post_del",
        "pointer",
        "count_delete",
        "count_insert",
        "text_delete",
        "text_insert",
        "commonlength",
        "changes",
        "chars1",
        "chars2",
        "last_chars1",
        "last_chars2",
        "x",
        "html",
        "pattern_amp",
        "pattern_lt",
        "pattern_gt",
        "pattern_para",
        "x",
        "op",
        "data",
        "text",
        "text",
        "x",
        "text",
        "x",
        "levenshtein",
        "insertions",
        "deletions",
        "x",
        "op",
        "data",
        "text",
        "x",
        "diffs",
        "diffsLength",
        "pointer",
        "tokens",
        "x",
        "param",
        "n",
        "text",
        "s",
        "dmp",
        "accuracy",
        "proximity",
        "score_threshold",
        "best_loc",
        "matchmask",
        "bin_min",
        "bin_mid",
        "bin_max",
        "last_rd",
        "d",
        "start",
        "finish",
        "rd",
        "j",
        "finish",
        "charMatch",
        "score",
        "s",
        "i",
        "i",
        "pattern",
        "padding",
        "prefix",
        "suffix",
        "text1",
        "diffs",
        "patches",
        "patch",
        "patchDiffLength",
        "char_count1",
        "char_count2",
        "prepatch_text",
        "text1",
        "postpatch_text",
        "text1",
        "x",
        "diff_type",
        "diff_text",
        "patchesCopy",
        "x",
        "patch",
        "patchCopy",
        "y",
        "nullPadding",
        "delta",
        "results",
        "x",
        "expected_loc",
        "text1",
        "start_loc",
        "end_loc",
        "text2",
        "diffs",
        "index1",
        "index2",
        "y",
        "mod",
        "paddingLength",
        "nullPadding",
        "x",
        "x",
        "patch",
        "diffs",
        "extraLength",
        "extraLength",
        "patch_size",
        "x",
        "bigpatch",
        "start1",
        "start2",
        "precontext",
        "patch",
        "empty",
        "diff_type",
        "diff_text",
        "postcontext",
        "text",
        "x",
        "patches",
        "text",
        "textPointer",
        "patchHeader",
        "m",
        "patch",
        "sign",
        "line",
        "coords1",
        "coords2",
        "text",
        "op",
        "x",
        "diffMatchPatchExports",
        "diff",
        "changes",
        "exports$1"
    ],
    "comments": [
        "MessageType.GET",
        "MessageType.SET",
        "MessageType.APPLY",
        "MessageType.CONSTRUCT",
        "MessageType.ENDPOINT",
        "MessageType.RELEASE",
        "MessageType.RELEASE",
        "detach and deactive after sending release response above.",
        "Send Serialization Error To Caller",
        "MessageType.RELEASE",
        "MessageType.GET",
        "FIXME: ES6 Proxy Handler `set` methods are supposed to return a",
        "boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯",
        "MessageType.SET",
        "MessageType.ENDPOINT",
        "We just pretend that `bind()` didn’t happen.",
        "MessageType.APPLY",
        "MessageType.CONSTRUCT",
        "WireValueType.HANDLER",
        "WireValueType.RAW",
        "WireValueType.HANDLER",
        "WireValueType.RAW",
        "Defaults.",
        "Redefine these in your program to override the defaults.",
        "Number of seconds to map a diff before giving up (0 for infinity).",
        "Cost of an empty edit operation in terms of edit characters.",
        "At what point is no match declared (0.0 = perfection, 1.0 = very loose).",
        "How far to search for a match (0 = exact location, 1000+ = broad match).",
        "A match this many characters away from the expected location will add",
        "1.0 to the score (0.0 is a perfect match).",
        "When deleting a large block of text (over ~64 characters), how close do",
        "the contents have to be to match the expected contents. (0.0 = perfection,",
        "1.0 = very loose).  Note that Match_Threshold controls how closely the",
        "end points of a delete need to match.",
        "Chunk size for context length.",
        "The number of bits in an int.",
        "DIFF FUNCTIONS",
        "Set a deadline by which time the diff must be complete.",
        "Check for null inputs.",
        "Check for equality (speedup).",
        "Trim off common prefix (speedup).",
        "Trim off common suffix (speedup).",
        "Compute the diff on the middle block.",
        "Restore the prefix and suffix.",
        "Just add some text (speedup).",
        "Just delete some text (speedup).",
        "Shorter text is inside the longer text (speedup).",
        "Swap insertions for deletions if diff is reversed.",
        "Single character string.",
        "After the previous speedup, the character can't be an equality.",
        "Check to see if the problem can be split in two.",
        "A half-match was found, sort out the return data.",
        "Send both pairs off for separate processing.",
        "Merge the results.",
        "Scan the text on a line-by-line basis first.",
        "Convert the diff back to original text.",
        "Eliminate freak matches (e.g. blank lines)",
        "Rediff any replacement blocks, this time character-by-character.",
        "Add a dummy entry at the end.",
        "Upon reaching an equality, check for prior redundancies.",
        "Delete the offending records and add the merged ones.",
        "Remove the dummy entry at the end.",
        "Cache the text lengths to prevent multiple calls.",
        "Setting all elements to -1 is faster in Chrome & Firefox than mixing",
        "integers and undefined.",
        "If the total number of characters is odd, then the front path will collide",
        "with the reverse path.",
        "Offsets for start and end of k loop.",
        "Prevents mapping of space beyond the grid.",
        "Bail out if deadline is reached.",
        "Walk the front path one step.",
        "Ran off the right of the graph.",
        "Ran off the bottom of the graph.",
        "Mirror x2 onto top-left coordinate system.",
        "Overlap detected.",
        "Walk the reverse path one step.",
        "Ran off the left of the graph.",
        "Ran off the top of the graph.",
        "Mirror x2 onto top-left coordinate system.",
        "Overlap detected.",
        "Diff took too long and hit the deadline or",
        "number of diffs equals number of characters, no commonality at all.",
        "Compute both diffs serially.",
        "e.g. lineArray[4] == 'Hello\\n'",
        "e.g. lineHash['Hello\\n'] == 4",
        "'\\x00' is a valid character, but various debuggers don't like it.",
        "So we'll insert a junk entry to avoid generating a null character.",
        "Walk the text, pulling out a substring for each line.",
        "text.split('\\n') would would temporarily double our memory footprint.",
        "Modifying text would create many large strings to garbage collect.",
        "Keeping our own length variable is faster than looking it up.",
        "Bail out at 65535 because",
        "String.fromCharCode(65536) == String.fromCharCode(0)",
        "Allocate 2/3rds of the space for text1, the rest for text2.",
        "Quick check for common null cases.",
        "Binary search.",
        "Performance analysis: https://neil.fraser.name/news/2007/10/09/",
        "Quick check for common null cases.",
        "Binary search.",
        "Performance analysis: https://neil.fraser.name/news/2007/10/09/",
        "Cache the text lengths to prevent multiple calls.",
        "Eliminate the null case.",
        "Truncate the longer string.",
        "Quick check for the worst case.",
        "Start by looking for a single character match",
        "and increase length until no match is found.",
        "Performance analysis: https://neil.fraser.name/news/2010/11/04/",
        "Don't risk returning a non-optimal diff if we have unlimited time.",
        "Pointless.",
        "'this' becomes 'window' in a closure.",
        "Start with a 1/4 length substring at position i as a seed.",
        "First check if the second quarter is the seed for a half-match.",
        "Check again based on the third quarter.",
        "Both matched.  Select the longest.",
        "A half-match was found, sort out the return data.",
        "Stack of indices where equalities are found.",
        "Keeping our own length var is faster in JS.",
        "@type {?string}",
        "Always equal to diffs[equalities[equalitiesLength - 1]][1]",
        "Index of current position.",
        "Number of characters that changed prior to the equality.",
        "Number of characters that changed after the equality.",
        "Equality found.",
        "An insertion or deletion.",
        "Eliminate an equality that is smaller or equal to the edits on both",
        "sides of it.",
        "Duplicate record.",
        "Change second copy to insert.",
        "Throw away the equality we just deleted.",
        "Throw away the previous equality (it needs to be reevaluated).",
        "Reset the counters.",
        "Normalize the diff.",
        "Find any overlaps between deletions and insertions.",
        "e.g: <del>abcxxx</del><ins>xxxdef</ins>",
        "-> <del>abc</del>xxx<ins>def</ins>",
        "e.g: <del>xxxabc</del><ins>defxxx</ins>",
        "-> <ins>def</ins>xxx<del>abc</del>",
        "Only extract an overlap if it is as big as the edit ahead or behind it.",
        "Overlap found.  Insert an equality and trim the surrounding edits.",
        "Reverse overlap found.",
        "Insert an equality and swap and trim the surrounding edits.",
        "Edges are the best.",
        "Each port of this function behaves slightly differently due to",
        "subtle differences in each language's definition of things like",
        "'whitespace'.  Since this function's purpose is largely cosmetic,",
        "the choice has been made to use each language's native features",
        "rather than force total conformity.",
        "Five points for blank lines.",
        "Four points for line breaks.",
        "Three points for end of sentences.",
        "Two points for whitespace.",
        "One point for non-alphanumeric.",
        "Intentionally ignore the first and last element (don't need checking).",
        "This is a single edit surrounded by equalities.",
        "First, shift the edit as far left as possible.",
        "Second, step character by character right, looking for the best fit.",
        "The >= encourages trailing rather than leading whitespace on edits.",
        "We have an improvement, save it back to the diff.",
        "Define some regex patterns for matching boundaries.",
        "Stack of indices where equalities are found.",
        "Keeping our own length var is faster in JS.",
        "@type {?string}",
        "Always equal to diffs[equalities[equalitiesLength - 1]][1]",
        "Index of current position.",
        "Is there an insertion operation before the last equality.",
        "Is there a deletion operation before the last equality.",
        "Is there an insertion operation after the last equality.",
        "Is there a deletion operation after the last equality.",
        "Equality found.",
        "Candidate found.",
        "Not a candidate, and can never become one.",
        "An insertion or deletion.",
        "Duplicate record.",
        "Change second copy to insert.",
        "Throw away the equality we just deleted;",
        "No changes made which could affect previous entry, keep going.",
        "Throw away the previous equality.",
        "Add a dummy entry at the end.",
        "Upon reaching an equality, check for prior redundancies.",
        "Factor out any common prefixies.",
        "Factor out any common suffixies.",
        "Delete the offending records and add the merged ones.",
        "Merge this equality with the previous one.",
        "Remove the dummy entry at the end.",
        "Second pass: look for single edits surrounded on both sides by equalities",
        "which can be shifted sideways to eliminate an equality.",
        "e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC",
        "Intentionally ignore the first and last element (don't need checking).",
        "This is a single edit surrounded by equalities.",
        "Shift the edit over the previous equality.",
        "Shift the edit over the next equality.",
        "If shifts were made, the diff needs reordering and another shift sweep.",
        "Equality or deletion.",
        "Equality or insertion.",
        "Overshot the location.",
        "Was the location was deleted?",
        "Add the remaining character length.",
        "Operation (insert, delete, equal)",
        "Text of change.",
        "A deletion and an insertion is one substitution.",
        "Keeping our own length var is faster in JS.",
        "Cursor in text1",
        "Each token begins with a one character parameter which specifies the",
        "operation of this token (delete, insert, equality).",
        "Malformed URI sequence.",
        "Fall through.",
        "Blank tokens are ok (from a trailing \\t).",
        "Anything else is an error.",
        "MATCH FUNCTIONS",
        "Check for null inputs.",
        "Shortcut (potentially not guaranteed by the algorithm)",
        "Nothing to match.",
        "Perfect match at the perfect spot!  (Includes case of null pattern)",
        "Do a fuzzy compare.",
        "Initialise the alphabet.",
        "'this' becomes 'window' in a closure.",
        "Dodge divide by zero error.",
        "Highest score beyond which we give up.",
        "Is there a nearby exact match? (speedup)",
        "What about in the other direction? (speedup)",
        "Initialise the bit arrays.",
        "Scan for the best match; each iteration allows for one more error.",
        "Run a binary search to determine how far from 'loc' we can stray at this",
        "error level.",
        "Use the result from this iteration as the maximum for the next.",
        "The alphabet (s) is a sparse hash, so the following line generates",
        "warnings.",
        "First pass: exact match.",
        "Subsequent passes: fuzzy match.",
        "This match will almost certainly be better than any existing match.",
        "But check anyway.",
        "Told you so.",
        "When passing loc, don't exceed our current distance from loc.",
        "Already passed loc, downhill from here on in.",
        "No hope for a (better) match at greater error levels.",
        "PATCH FUNCTIONS",
        "Look for the first and last matches of pattern in text.  If two different",
        "matches are found, increase the pattern length.",
        "Add one chunk for good luck.",
        "Add the prefix.",
        "Add the suffix.",
        "Roll back the start points.",
        "Extend the lengths.",
        "Method 1: text1, text2",
        "Compute diffs from text1 and text2.",
        "@type {string}",
        "@type {string}",
        "Method 2: diffs",
        "Compute text1 from diffs.",
        "@type {!Array.<!diff_match_patch.Diff>}",
        "Method 3: text1, diffs",
        "@type {string}",
        "@type {!Array.<!diff_match_patch.Diff>}",
        "Method 4: text1, text2, diffs",
        "text2 is not used.",
        "@type {string}",
        "@type {!Array.<!diff_match_patch.Diff>}",
        "Get rid of the null case.",
        "Keeping our own length var is faster in JS.",
        "Number of characters into the text1 string.",
        "Number of characters into the text2 string.",
        "Start with text1 (prepatch_text) and apply the diffs until we arrive at",
        "text2 (postpatch_text).  We recreate the patches one by one to determine",
        "context info.",
        "A new patch starts here.",
        "Small equality inside a patch.",
        "Time for a new patch.",
        "Unlike Unidiff, our patch lists have a rolling context.",
        "https://github.com/google/diff-match-patch/wiki/Unidiff",
        "Update prepatch text & pos to reflect the application of the",
        "just completed patch.",
        "Update the current character count.",
        "Pick up the leftover patch if not empty.",
        "Making deep copies is hard in JavaScript.",
        "Deep copy the patches so that no changes are made to originals.",
        "delta keeps track of the offset between the expected and actual location",
        "of the previous patch.  If there are patches expected at positions 10 and",
        "20, but the first patch was found at 12, delta is 2 and the second patch",
        "has an effective expected position of 22.",
        "patch_splitMax will only provide an oversized pattern in the case of",
        "a monster delete.",
        "Can't find valid trailing context.  Drop this patch.",
        "No match found.  :(",
        "Subtract the delta for this failed patch from subsequent patches.",
        "Found a match.  :)",
        "Perfect match, just shove the replacement text in.",
        "Imperfect match.  Run a diff to get a framework of equivalent",
        "indices.",
        "The end points match, but the content is unacceptably bad.",
        "Insertion",
        "Deletion",
        "Strip the padding off.",
        "Bump all the patches forward.",
        "Add some padding on start of first diff.",
        "Add nullPadding equality.",
        "Should be 0.",
        "Should be 0.",
        "Grow first equality.",
        "Add some padding on end of last diff.",
        "Add nullPadding equality.",
        "Grow last equality.",
        "Remove the big old patch.",
        "Create one of several smaller patches.",
        "Insertions are harmless.",
        "This is a large deletion.  Let it pass in one chunk.",
        "Deletion or equality.  Only take as much as we can stomach.",
        "Compute the head context for the next patch.",
        "Append the end context for this patch.",
        "Malformed URI sequence.",
        "Deletion.",
        "Insertion.",
        "Minor equality.",
        "Start of next patch.",
        "WTF?",
        "@type {!Array.<!diff_match_patch.Diff>}",
        "@type {?number}",
        "@type {?number}",
        "@type {number}",
        "@type {number}",
        "Escape the body of the patch with %xx notation.",
        "The following export code was added by @ForbesLindesay"
    ],
    "docstrings": [
        "* @license\n     * Copyright 2019 Google LLC\n     * SPDX-License-Identifier: Apache-2.0",
        "* Internal transfer handle to handle objects marked to proxy.",
        "* Internal transfer handler to handle thrown exceptions.",
        "* Allows customizing the serialization of certain values.",
        "* Diff Match and Patch\n     * Copyright 2018 The diff-match-patch Authors.\n     * https://github.com/google/diff-match-patch\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *   http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.",
        "* @fileoverview Computes the difference between two texts to create a patch.\n    \t * Applies the patch onto another text, allowing for errors.\n    \t * @author fraser@google.com (Neil Fraser)",
        "* Class containing the diff, match and patch methods.\n    \t * @constructor",
        "* The data structure representing a diff is an array of tuples:\n    \t * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n    \t * which means: delete 'Hello', add 'Goodbye' and keep ' world.'",
        "* Class representing one diff tuple.\n    \t * ~Attempts to look like a two-element array (which is what this used to be).~\n    \t * Constructor returns an actual two-element array, to allow destructing @JackuB\n    \t * See https://github.com/JackuB/diff-match-patch/issues/14 for details\n    \t * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n    \t * @param {string} text Text to be deleted, inserted, or retained.\n    \t * @constructor",
        "* Find the differences between two texts.  Simplifies the problem by stripping\n    \t * any common prefix or suffix off the texts before diffing.\n    \t * @param {string} text1 Old string to be diffed.\n    \t * @param {string} text2 New string to be diffed.\n    \t * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n    \t *     then don't run a line-level diff first to identify the changed areas.\n    \t *     Defaults to true, which does a faster, slightly less optimal diff.\n    \t * @param {number=} opt_deadline Optional time when the diff should be complete\n    \t *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n    \t *     instead.\n    \t * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.",
        "* Find the differences between two texts.  Assumes that the texts do not\n    \t * have any common prefix or suffix.\n    \t * @param {string} text1 Old string to be diffed.\n    \t * @param {string} text2 New string to be diffed.\n    \t * @param {boolean} checklines Speedup flag.  If false, then don't run a\n    \t *     line-level diff first to identify the changed areas.\n    \t *     If true, then run a faster, slightly less optimal diff.\n    \t * @param {number} deadline Time when the diff should be complete by.\n    \t * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n    \t * @private",
        "* Do a quick line-level diff on both strings, then rediff the parts for\n    \t * greater accuracy.\n    \t * This speedup can produce non-minimal diffs.\n    \t * @param {string} text1 Old string to be diffed.\n    \t * @param {string} text2 New string to be diffed.\n    \t * @param {number} deadline Time when the diff should be complete by.\n    \t * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n    \t * @private",
        "* Find the 'middle snake' of a diff, split the problem in two\n    \t * and return the recursively constructed diff.\n    \t * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n    \t * @param {string} text1 Old string to be diffed.\n    \t * @param {string} text2 New string to be diffed.\n    \t * @param {number} deadline Time at which to bail if not yet complete.\n    \t * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n    \t * @private",
        "* Given the location of the 'middle snake', split the diff in two parts\n    \t * and recurse.\n    \t * @param {string} text1 Old string to be diffed.\n    \t * @param {string} text2 New string to be diffed.\n    \t * @param {number} x Index of split point in text1.\n    \t * @param {number} y Index of split point in text2.\n    \t * @param {number} deadline Time at which to bail if not yet complete.\n    \t * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n    \t * @private",
        "* Split two texts into an array of strings.  Reduce the texts to a string of\n    \t * hashes where each Unicode character represents one line.\n    \t * @param {string} text1 First string.\n    \t * @param {string} text2 Second string.\n    \t * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n    \t *     An object containing the encoded text1, the encoded text2 and\n    \t *     the array of unique strings.\n    \t *     The zeroth element of the array of unique strings is intentionally blank.\n    \t * @private",
        "* Split a text into an array of strings.  Reduce the texts to a string of\n    \t   * hashes where each Unicode character represents one line.\n    \t   * Modifies linearray and linehash through being a closure.\n    \t   * @param {string} text String to encode.\n    \t   * @return {string} Encoded string.\n    \t   * @private",
        "* Rehydrate the text in a diff from a string of line hashes to real lines of\n    \t * text.\n    \t * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n    \t * @param {!Array.<string>} lineArray Array of unique strings.\n    \t * @private",
        "* Determine the common prefix of two strings.\n    \t * @param {string} text1 First string.\n    \t * @param {string} text2 Second string.\n    \t * @return {number} The number of characters common to the start of each\n    \t *     string.",
        "* Determine the common suffix of two strings.\n    \t * @param {string} text1 First string.\n    \t * @param {string} text2 Second string.\n    \t * @return {number} The number of characters common to the end of each string.",
        "* Determine if the suffix of one string is the prefix of another.\n    \t * @param {string} text1 First string.\n    \t * @param {string} text2 Second string.\n    \t * @return {number} The number of characters common to the end of the first\n    \t *     string and the start of the second string.\n    \t * @private",
        "* Do the two texts share a substring which is at least half the length of the\n    \t * longer text?\n    \t * This speedup can produce non-minimal diffs.\n    \t * @param {string} text1 First string.\n    \t * @param {string} text2 Second string.\n    \t * @return {Array.<string>} Five element Array, containing the prefix of\n    \t *     text1, the suffix of text1, the prefix of text2, the suffix of\n    \t *     text2 and the common middle.  Or null if there was no match.\n    \t * @private",
        "* Does a substring of shorttext exist within longtext such that the substring\n    \t   * is at least half the length of longtext?\n    \t   * Closure, but does not reference any external variables.\n    \t   * @param {string} longtext Longer string.\n    \t   * @param {string} shorttext Shorter string.\n    \t   * @param {number} i Start index of quarter length substring within longtext.\n    \t   * @return {Array.<string>} Five element Array, containing the prefix of\n    \t   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n    \t   *     of shorttext and the common middle.  Or null if there was no match.\n    \t   * @private",
        "* Reduce the number of edits by eliminating semantically trivial equalities.\n    \t * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.",
        "* Look for single edits surrounded on both sides by equalities\n    \t * which can be shifted sideways to align the edit to a word boundary.\n    \t * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n    \t * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.",
        "* Given two strings, compute a score representing whether the internal\n    \t   * boundary falls on logical boundaries.\n    \t   * Scores range from 6 (best) to 0 (worst).\n    \t   * Closure, but does not reference any external variables.\n    \t   * @param {string} one First string.\n    \t   * @param {string} two Second string.\n    \t   * @return {number} The score.\n    \t   * @private",
        "* Reduce the number of edits by eliminating operationally trivial equalities.\n    \t * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.",
        "* Five types to be split:\n    \t       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n    \t       * <ins>A</ins>X<ins>C</ins><del>D</del>\n    \t       * <ins>A</ins><del>B</del>X<ins>C</ins>\n    \t       * <ins>A</del>X<ins>C</ins><del>D</del>\n    \t       * <ins>A</ins><del>B</del>X<del>C</del>",
        "* Reorder and merge like edit sections.  Merge equalities.\n    \t * Any edit section can move as long as it doesn't cross an equality.\n    \t * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.",
        "* loc is a location in text1, compute and return the equivalent location in\n    \t * text2.\n    \t * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n    \t * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n    \t * @param {number} loc Location within text1.\n    \t * @return {number} Location within text2.",
        "* Convert a diff array into a pretty HTML report.\n    \t * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n    \t * @return {string} HTML representation.",
        "* Compute and return the source text (all equalities and deletions).\n    \t * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n    \t * @return {string} Source text.",
        "* Compute and return the destination text (all equalities and insertions).\n    \t * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n    \t * @return {string} Destination text.",
        "* Compute the Levenshtein distance; the number of inserted, deleted or\n    \t * substituted characters.\n    \t * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n    \t * @return {number} Number of changes.",
        "* Crush the diff into an encoded string which describes the operations\n    \t * required to transform text1 into text2.\n    \t * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n    \t * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n    \t * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n    \t * @return {string} Delta text.",
        "* Given the original text1, and an encoded string which describes the\n    \t * operations required to transform text1 into text2, compute the full diff.\n    \t * @param {string} text1 Source string for the diff.\n    \t * @param {string} delta Delta text.\n    \t * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n    \t * @throws {!Error} If invalid input.",
        "* Locate the best instance of 'pattern' in 'text' near 'loc'.\n    \t * @param {string} text The text to search.\n    \t * @param {string} pattern The pattern to search for.\n    \t * @param {number} loc The location to search around.\n    \t * @return {number} Best match index or -1.",
        "* Locate the best instance of 'pattern' in 'text' near 'loc' using the\n    \t * Bitap algorithm.\n    \t * @param {string} text The text to search.\n    \t * @param {string} pattern The pattern to search for.\n    \t * @param {number} loc The location to search around.\n    \t * @return {number} Best match index or -1.\n    \t * @private",
        "* Compute and return the score for a match with e errors and x location.\n    \t   * Accesses loc and pattern through being a closure.\n    \t   * @param {number} e Number of errors in match.\n    \t   * @param {number} x Location of match.\n    \t   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n    \t   * @private",
        "* Initialise the alphabet for the Bitap algorithm.\n    \t * @param {string} pattern The text to encode.\n    \t * @return {!Object} Hash of character locations.\n    \t * @private",
        "* Increase the context until it is unique,\n    \t * but don't let the pattern expand beyond Match_MaxBits.\n    \t * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n    \t * @param {string} text Source text.\n    \t * @private",
        "* Compute a list of patches to turn text1 into text2.\n    \t * Use diffs if provided, otherwise compute it ourselves.\n    \t * There are four ways to call this function, depending on what data is\n    \t * available to the caller:\n    \t * Method 1:\n    \t * a = text1, b = text2\n    \t * Method 2:\n    \t * a = diffs\n    \t * Method 3 (optimal):\n    \t * a = text1, b = diffs\n    \t * Method 4 (deprecated, use method 3):\n    \t * a = text1, b = text2, c = diffs\n    \t *\n    \t * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n    \t * Array of diff tuples for text1 to text2 (method 2).\n    \t * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n    \t * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n    \t * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n    \t * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n    \t * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.",
        "* Given an array of patches, return another array that is identical.\n    \t * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n    \t * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.",
        "* Merge a set of patches onto the text.  Return a patched text, as well\n    \t * as a list of true/false values indicating which patches were applied.\n    \t * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n    \t * @param {string} text Old text.\n    \t * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n    \t *      new text and an array of boolean values.",
        "* Add some padding on text start and end so that edges can match something.\n    \t * Intended to be called only from within patch_apply.\n    \t * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n    \t * @return {string} The padding string added to each side.",
        "* Look through the patches and break up any which are longer than the maximum\n    \t * limit of the match algorithm.\n    \t * Intended to be called only from within patch_apply.\n    \t * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.",
        "* Take a list of patches and return a textual representation.\n    \t * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n    \t * @return {string} Text representation of patches.",
        "* Parse a textual representation of patches and return a list of Patch objects.\n    \t * @param {string} textline Text representation of patches.\n    \t * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n    \t * @throws {!Error} If invalid input.",
        "* Class representing one patch operation.\n    \t * @constructor",
        "* Emulate GNU diff's format.\n    \t * Header: @@ -382,8 +481,9 @@\n    \t * Indices are printed as 1-based, not 0-based.\n    \t * @return {string} The GNU diff string."
    ],
    "functions": [
        "serialize",
        "deserialize",
        "serialize",
        "deserialize",
        "isAllowedOrigin",
        "expose",
        "isMessagePort",
        "closeEndPoint",
        "wrap",
        "throwIfProxyReleased",
        "releaseEndpoint",
        "registerProxy",
        "unregisterProxy",
        "createProxy",
        "get",
        "apply",
        "construct",
        "myFlat",
        "processArguments",
        "transfer",
        "proxy",
        "toWireValue",
        "fromWireValue",
        "requestResponseMessage",
        "generateUUID",
        "diff_linesToCharsMunge_",
        "diff_halfMatchI_",
        "diff_cleanupSemanticScore_",
        "match_bitapScore_",
        "calculateDiff"
    ],
    "classes": []
}