{
    "identifiers": [
        "logging",
        "django",
        "http",
        "HttpResponse",
        "HttpResponseServerError",
        "logging",
        "getLogger",
        "get_response",
        "get_response",
        "request",
        "request",
        "method",
        "request",
        "path",
        "readiness",
        "request",
        "request",
        "path",
        "healthz",
        "request",
        "get_response",
        "request",
        "request",
        "HttpResponse",
        "request",
        "django",
        "db",
        "connections",
        "name",
        "connections",
        "connections",
        "name",
        "cursor",
        "cursor",
        "execute",
        "cursor",
        "fetchone",
        "row",
        "HttpResponseServerError",
        "e",
        "logger",
        "exception",
        "e",
        "HttpResponseServerError",
        "django",
        "core",
        "cache",
        "caches",
        "django",
        "core",
        "cache",
        "backends",
        "memcached",
        "BaseMemcachedCache",
        "cache",
        "caches",
        "all",
        "isinstance",
        "cache",
        "BaseMemcachedCache",
        "cache",
        "_cache",
        "get_stats",
        "len",
        "stats",
        "len",
        "cache",
        "_servers",
        "HttpResponseServerError",
        "e",
        "logger",
        "exception",
        "e",
        "HttpResponseServerError",
        "HttpResponse"
    ],
    "literals": [
        "\"healthz\"",
        "\"GET\"",
        "\"/readiness\"",
        "\"/healthz\"",
        "\"OK\"",
        "\"SELECT 1;\"",
        "\"db: invalid response\"",
        "\"db: cannot connect to database.\"",
        "\"cache: cannot connect to cache.\"",
        "\"cache: cannot connect to cache.\"",
        "\"OK\""
    ],
    "variables": [
        "logger",
        "get_response",
        "cursor",
        "row",
        "stats"
    ],
    "comments": [
        "One-time configuration and initialization.",
        "Connect to each database and do a generic standard SQL query",
        "that doesn't write any data and doesn't depend on any tables",
        "being present.",
        "Call get_stats() to connect to each memcached instance and get its stats.",
        "This can effectively check if each is online."
    ],
    "docstrings": [
        "\"\"\"\n        Returns that the server is alive.\n        \"\"\""
    ],
    "functions": [
        "__call__",
        "healthz",
        "readiness"
    ],
    "classes": [
        "HealthCheckMiddleware"
    ]
}