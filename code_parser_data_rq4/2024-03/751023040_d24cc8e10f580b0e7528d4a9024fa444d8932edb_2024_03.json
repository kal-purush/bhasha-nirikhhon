{
    "identifiers": [
        "name",
        "name",
        "newEvent",
        "newEvent",
        "newEvent",
        "newEvent",
        "newEvent",
        "newEvent",
        "node",
        "depth",
        "levels",
        "depth",
        "levels",
        "depth",
        "levels",
        "depth",
        "levels",
        "depth",
        "node",
        "levels",
        "node",
        "depth",
        "s",
        "s",
        "DELIMITER",
        "DELIMITER_LEN",
        "depth",
        "node",
        "s",
        "recentNode",
        "recentNode",
        "node",
        "_",
        "hasCycle",
        "visitedNodes",
        "node",
        "visitedNodes",
        "node",
        "hasCycle",
        "CycleViolationInTreeError",
        "recentNode",
        "hasCycle",
        "apply",
        "atNode",
        "depth",
        "helper",
        "depth",
        "depth",
        "depth",
        "depth",
        "apply",
        "depth",
        "outcome",
        "outcome",
        "apply",
        "depth",
        "helper"
    ],
    "literals": [
        "' '",
        "\"\"",
        "${DELIMITER.repeat(DELIMITER_LEN * depth)}${node.name}\\n",
        "${recentNode.name} has caused a cycle in ${this.name}."
    ],
    "variables": [
        "DELIMITER_LEN",
        "DELIMITER",
        "levels",
        "s",
        "visitedNodes",
        "hasCycle",
        "helper"
    ],
    "comments": [
        "organize nodes by depth where array idx is depth, and array members are nodes at that depth",
        "represent tree as string. shows overall structure. indentation depth for each node reflects its actual depth",
        "what must be true after every insertion. in the case of a tree, no cycles",
        "currently not very efficient, must visit every node. TODO: make it quit upon finding a cycle",
        "TODO: make this a generator",
        "preorder traversal with depth tracking"
    ],
    "docstrings": [],
    "functions": [
        "add",
        "remove",
        "generateLevels",
        "toString",
        "invariant",
        "preorder"
    ],
    "classes": [
        "CycleViolationInTreeError",
        "EventNode"
    ]
}