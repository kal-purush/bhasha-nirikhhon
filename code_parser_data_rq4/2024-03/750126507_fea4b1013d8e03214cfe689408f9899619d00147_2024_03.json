{
    "identifiers": [
        "sys",
        "os",
        "bisect",
        "pprint",
        "pprint",
        "Records",
        "to_add_record",
        "to_add_record",
        "street",
        "to_add_record",
        "city",
        "to_add_record",
        "state",
        "to_add_record",
        "to_add_record",
        "name",
        "to_add_record",
        "ID",
        "to_add_record",
        "is_suspended",
        "data_dict",
        "directory",
        "target_file_name",
        "os",
        "listdir",
        "directory",
        "item",
        "all_files_and_dirs",
        "os",
        "path",
        "join",
        "directory",
        "item",
        "os",
        "path",
        "isfile",
        "full_path",
        "item",
        "target_file_name",
        "full_path",
        "relative_path",
        "file_name",
        "os",
        "getcwd",
        "os",
        "path",
        "join",
        "current_directory",
        "relative_path",
        "file_name",
        "os",
        "path",
        "join",
        "full_path",
        "file_name",
        "os",
        "makedirs",
        "os",
        "path",
        "dirname",
        "full_path",
        "exist_ok",
        "full_path",
        "to_add_record",
        "isinstance",
        "to_add_record",
        "ProviderRecord",
        "add_provider_record",
        "to_add_record",
        "isinstance",
        "to_add_record",
        "MemberRecord",
        "add_member_record",
        "to_add_record",
        "to_add_record",
        "package_into_dict",
        "to_add_record",
        "data_dict",
        "id_value",
        "get_full_path",
        "MemberRecords_relative_path",
        "id_value_with_prefix",
        "full_path",
        "os",
        "path",
        "isfile",
        "full_path",
        "open",
        "full_path",
        "file",
        "key",
        "value",
        "data_dict",
        "items",
        "file",
        "write",
        "value",
        "file",
        "write",
        "to_add_record",
        "UID",
        "open",
        "directory_file",
        "file",
        "line",
        "file",
        "line",
        "strip",
        "split",
        "directory",
        "append",
        "parts",
        "ValueError",
        "sys",
        "stderr",
        "write",
        "directory_file",
        "line",
        "sys",
        "stderr",
        "write",
        "directory_file",
        "FileNotFoundError",
        "sys",
        "stderr",
        "write",
        "directory_file",
        "e",
        "sys",
        "stderr",
        "write",
        "e",
        "open",
        "directory_file",
        "file",
        "service",
        "directory",
        "file",
        "write",
        "service",
        "service",
        "service",
        "directory",
        "service",
        "directory",
        "service",
        "name",
        "sid",
        "fee",
        "name",
        "sid",
        "fee",
        "element",
        "directory",
        "element",
        "name",
        "name",
        "element",
        "element",
        "element",
        "sid",
        "sid",
        "element",
        "element",
        "name",
        "sid",
        "fee",
        "bisect",
        "insort",
        "directory",
        "element",
        "key",
        "x",
        "x",
        "name",
        "sid",
        "fee",
        "update_file",
        "sid",
        "index",
        "element",
        "directory",
        "element",
        "sid",
        "element",
        "element",
        "directory",
        "index",
        "update_file",
        "element",
        "Address",
        "MemberRecord",
        "Adress",
        "DatabaseManager",
        "package_into_dict",
        "mem",
        "add_user_record",
        "mem",
        "get_record_member",
        "UID",
        "memberobject",
        "cleint",
        "then",
        "eddits",
        "the",
        "record",
        "edit_record",
        "edited_record_object"
    ],
    "literals": [
        "\"services.txt\"",
        "\"Data/UserRecords/MemberRecords\"",
        "\"Data/UserRecords/ProviderRecords\"",
        "\"Data/ServiceRecords\"",
        "\"Data/services.txt\"",
        "\"Street\"",
        "\"City\"",
        "\"State\"",
        "\"Zip\"",
        "\"Name\"",
        "\"ID\"",
        "\"Is Suspended\"",
        "\"Item is neither a ProviderRecord nor a MemberRecord.\"",
        "\"ID\"",
        "\"U\"",
        "\".txt\"",
        "f\"Full path: {full_path}\"",
        "\"The Member already exists on File. No new record will be created.\"",
        "'w'",
        "f\"{value}\\n\"",
        "\"=\\n\"",
        "\"MemberRecord successfully uploaded to the database\"",
        "'r'",
        "':'",
        "f\"Error: Invalid line format in '{self.directory_file}': {line}\\n\"",
        "f\"Error: Invalid file path '{self.directory_file}'\\n\"",
        "f\"Error: File '{self.directory_file}' not found\\n\"",
        "f\"Error: {e}\\n\"",
        "'w'",
        "f\"{service[0]}:{service[1]}:{service[2]}\\n\"",
        "\"The service directory is currently empty. No services are available.\\nIf you believe this is an error, please contact an administrator.\"",
        "\"---------------------------Service Directory-------------------------\\n\"",
        "\"Service Name                   Service ID                     Fee\\n\"",
        "f\"{name:<30} {sid:<30} {fee:<30}\"",
        "f\"The name '{name}' already associated with Serivce '{element[0]}:{element[1]}' in the Service Directory\"",
        "f\"The Service ID '{sid}' already associated with Serivce '{element[0]}:{element[1]}' in the Service Directory\"",
        "f\"The Service '{name}:{sid}:{fee}' has been added into the Service Directory\"",
        "f\"Service '{element[0]}:{element[1]}' has been removed from the Service Directory\"",
        "f\"Service ID '{element[1]}' is not associated with a Serivce in the Service Directory\"",
        "\"123 Main St\"",
        "\"Anytown\"",
        "\"CA\"",
        "\"12345\"",
        "\"Jim Bow\"",
        "\"223456789\""
    ],
    "variables": [
        "directory_file",
        "MemberRecords_relative_path",
        "ProviderRecords_relative_path",
        "ServiceRecords_relative_path",
        "ServiceDirectory_relative_path",
        "directory",
        "data_dict",
        "all_files_and_dirs",
        "full_path",
        "current_directory",
        "full_path",
        "full_path",
        "data_dict",
        "id_value",
        "id_value_with_prefix",
        "full_path",
        "parts",
        "name",
        "sid",
        "fee",
        "element",
        "Adress",
        "mem",
        "test"
    ],
    "comments": [
        "holds directory of serivices name/id/fee",
        "Files #",
        "name of file for service directory",
        "Relative Paths #",
        "Data Members #",
        "list where each element holds { Name: [ ID, FEE] } a service- comprised it is the service directory",
        "Package the attributes into a dictionary",
        "List all files and directories in the specified directory",
        "Check each item in the list",
        "Construct the full path to the item",
        "Check if the item is a file and if its name matches the target file name",
        "If the file is not found, return None",
        "Get the current working directory",
        "Construct the full path to the directory",
        "If a file name is provided, append it to the directory path",
        "Ensure the directory exists",
        "",
        "Member, Provider, ADMIN records Methods #######################################",
        "",
        "Assuming self.MemberRecords_relative_path is correctly defined",
        "Check if the file already exists",
        "Return False or an appropriate value to indicate the file already exists",
        "",
        "Service Directory Methods #######################################",
        "",
        "Loads the service entrys(one line each) from the file into the service directory list",
        "directory list will contain one sublist for each service, where each sublist is structured as [Name, ID, FEE].",
        "list is alphabetucally organized A-Z based off of each sublists[0] element, the name of service",
        "catch all o",
        "print(f\"{name:<30} {sid:<20} {fee:<10}\")",
        "Indicate that the service was successfully removed",
        "Indicate that no service with the given SID was found"
    ],
    "docstrings": [],
    "functions": [
        "package_into_dict",
        "find_file",
        "get_full_path",
        "add_user_record",
        "add_member_record",
        "add_provider_record",
        "remove_user_record",
        "load_directory",
        "update_file",
        "display_service_directory",
        "insert_directory_service",
        "remove_directory_service"
    ],
    "classes": [
        "DatabaseManager"
    ]
}