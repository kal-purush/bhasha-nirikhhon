{
    "identifiers": [
        "pandas",
        "pd",
        "seaborn",
        "sns",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "warnings",
        "datetime",
        "warnings",
        "filterwarnings",
        "pd",
        "read_csv",
        "car_details",
        "car_details",
        "head",
        "car_details",
        "shape",
        "car_details",
        "dtypes",
        "car_details",
        "duplicated",
        "duplicate",
        "sum",
        "car_details",
        "describe",
        "car_details",
        "copy",
        "car_details",
        "drop_duplicates",
        "inplace",
        "car_details",
        "head",
        "car_details",
        "shape",
        "car_details",
        "head",
        "car_details",
        "drop",
        "axis",
        "inplace",
        "car_details",
        "isnull",
        "sum",
        "null_values",
        "car_details",
        "head",
        "car_details",
        "sklearn",
        "impute",
        "SimpleImputer",
        "SimpleImputer",
        "strategy",
        "imputer",
        "fit_transform",
        "car_details",
        "SimpleImputer",
        "strategy",
        "imputer",
        "fit_transform",
        "car_details",
        "car_details",
        "head",
        "car_details",
        "head",
        "pd",
        "get_dummies",
        "car_details",
        "drop_first",
        "car_encoded",
        "car_encoded",
        "sklearn",
        "preprocessing",
        "LabelEncoder",
        "StandardScaler",
        "StandardScaler",
        "scaler",
        "fit_transform",
        "car_encoded",
        "car_encoded",
        "plt",
        "figure",
        "figsize",
        "sns",
        "histplot",
        "car_details",
        "kde",
        "plt",
        "title",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "show",
        "plt",
        "figure",
        "figsize",
        "sns",
        "boxplot",
        "x",
        "df",
        "y",
        "car_details",
        "plt",
        "title",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "show",
        "plt",
        "figure",
        "figsize",
        "sns",
        "boxplot",
        "x",
        "car_details",
        "y",
        "car_details",
        "plt",
        "title",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "show",
        "plt",
        "figure",
        "figsize",
        "sns",
        "countplot",
        "x",
        "car_details",
        "plt",
        "title",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "show",
        "plt",
        "figure",
        "figsize",
        "sns",
        "countplot",
        "x",
        "car_details",
        "plt",
        "title",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "show",
        "plt",
        "figure",
        "figsize",
        "sns",
        "scatterplot",
        "x",
        "df",
        "y",
        "df",
        "plt",
        "title",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "show",
        "plt",
        "figure",
        "figsize",
        "sns",
        "scatterplot",
        "x",
        "car_details",
        "y",
        "car_details",
        "plt",
        "title",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "show",
        "car_details",
        "apply",
        "pd",
        "to_numeric",
        "errors",
        "car_details_numeric",
        "fillna",
        "inplace",
        "car_details_numeric",
        "corr",
        "correlation_matrix",
        "plt",
        "figure",
        "figsize",
        "sns",
        "heatmap",
        "correlation_matrix",
        "annot",
        "cmap",
        "plt",
        "title",
        "plt",
        "show",
        "sklearn",
        "model_selection",
        "train_test_split",
        "car_encoded",
        "drop",
        "axis",
        "car_encoded",
        "train_test_split",
        "x",
        "y",
        "test_size",
        "random_state",
        "x_train",
        "shape",
        "x_test",
        "shape",
        "y_train",
        "shape",
        "y_test",
        "shape",
        "x",
        "head",
        "y",
        "head",
        "sklearn",
        "linear_model",
        "LinearRegression",
        "sklearn",
        "ensemble",
        "RandomForestRegressor",
        "sklearn",
        "metrics",
        "mean_squared_error",
        "r2_score",
        "mean_absolute_error",
        "sklearn",
        "metrics",
        "confusion_matrix",
        "classification_report",
        "accuracy_score",
        "sklearn",
        "metrics",
        "auc",
        "sklearn",
        "neighbors",
        "KNeighborsRegressor",
        "sklearn",
        "svm",
        "SVR",
        "sklearn",
        "tree",
        "DecisionTreeRegressor",
        "sklearn",
        "ensemble",
        "AdaBoostRegressor",
        "model",
        "model_name",
        "x_test",
        "y_test",
        "ypred",
        "mean_squared_error",
        "y_test",
        "ypred",
        "r2_score",
        "y_test",
        "ypred",
        "mean_absolute_error",
        "y_test",
        "ypred",
        "mean_squared_error",
        "y_test",
        "ypred",
        "squared",
        "mse",
        "r2",
        "mae",
        "rmse",
        "a",
        "append",
        "model_name",
        "a",
        "append",
        "r2",
        "a",
        "append",
        "mse",
        "a",
        "append",
        "rmse",
        "a",
        "append",
        "mae",
        "model",
        "model",
        "score",
        "x_train",
        "y_train",
        "model",
        "score",
        "x_test",
        "y_test",
        "LinearRegression",
        "linreg",
        "fit",
        "x_train",
        "y_train",
        "m_score",
        "linreg",
        "linreg",
        "predict",
        "x_test",
        "ypred_linreg",
        "evaluate",
        "linreg",
        "x_test",
        "y_test",
        "ypred_linreg",
        "sklearn",
        "linear_model",
        "Lasso",
        "sklearn",
        "linear_model",
        "Ridge",
        "Lasso",
        "las",
        "fit",
        "x_train",
        "y_train",
        "las",
        "predict",
        "x_test",
        "m_score",
        "las",
        "evaluate",
        "las",
        "x_test",
        "y_test",
        "ypred_las",
        "Ridge",
        "rid",
        "fit",
        "x_train",
        "y_train",
        "rid",
        "predict",
        "x_test",
        "m_score",
        "rid",
        "evaluate",
        "rid",
        "x_test",
        "y_test",
        "ypred_rid",
        "pd",
        "DataFrame",
        "a",
        "sum",
        "DecisionTreeRegressor",
        "dt_Regressor",
        "fit",
        "x_train",
        "y_train",
        "dt_Regressor",
        "predict",
        "x_test",
        "evaluate",
        "dt_Regressor",
        "x_test",
        "y_test",
        "ypred_tree",
        "m_score",
        "dt_Regressor",
        "KNeighborsRegressor",
        "knn_Regressor",
        "fit",
        "x_train",
        "y_train",
        "knn_Regressor",
        "predict",
        "x_test",
        "evaluate",
        "knn_Regressor",
        "x_test",
        "y_test",
        "knn_pred",
        "m_score",
        "knn_Regressor",
        "SVR",
        "svm_Regressor",
        "fit",
        "x_train",
        "y_train",
        "svm_Regressor",
        "predict",
        "x_test",
        "evaluate",
        "svm_Regressor",
        "x_test",
        "y_test",
        "svm_pred",
        "m_score",
        "svm_Regressor",
        "RandomForestRegressor",
        "n_estimators",
        "min_samples_split",
        "max_depth",
        "rf",
        "fit",
        "x_train",
        "y_train",
        "rf",
        "predict",
        "x_test",
        "evaluate",
        "rf",
        "x_test",
        "y_test",
        "ypred_rf",
        "m_score",
        "rf",
        "pd",
        "DataFrame",
        "a",
        "Model_performance",
        "x_train",
        "shape",
        "x_test",
        "shape",
        "x",
        "shape",
        "y",
        "shape",
        "RandomForestRegressor",
        "n_estimators",
        "min_samples_split",
        "max_depth",
        "Bestmodel",
        "fit",
        "x",
        "y",
        "car_encoded",
        "head",
        "car_encoded",
        "sample",
        "n",
        "random_state",
        "new_data",
        "shape",
        "new_data",
        "value_counts",
        "new_data",
        "to_csv",
        "new_data",
        "drop",
        "axis",
        "new_data",
        "joblib",
        "joblib",
        "dump",
        "Bestmodel",
        "joblib",
        "load",
        "loaded_model",
        "predict",
        "X_test",
        "predictions",
        "pd",
        "DataFrame",
        "Y_test",
        "predictions",
        "results"
    ],
    "literals": [
        "'ignore'",
        "\"CAR DETAILS.csv\"",
        "'name'",
        "'transmission'",
        "'median'",
        "'km_driven'",
        "'km_driven'",
        "'most_frequent'",
        "'fuel'",
        "'seller_type'",
        "'transmission'",
        "'owner'",
        "'fuel'",
        "'seller_type'",
        "'transmission'",
        "'owner'",
        "'year'",
        "'km_driven'",
        "'year'",
        "'km_driven'",
        "'km_driven'",
        "'Distribution of Kilometers Driven'",
        "'Kilometers Driven'",
        "'Count'",
        "'fuel'",
        "'selling_price'",
        "'Fuel Type vs Selling Price'",
        "'Fuel Type'",
        "'Selling Price'",
        "'transmission'",
        "'selling_price'",
        "'Transmission Type vs Selling Price'",
        "'Transmission Type'",
        "'Selling Price'",
        "'seller_type'",
        "'Count of Seller Types'",
        "'Seller Type'",
        "'Count'",
        "'owner'",
        "'Count of Owners'",
        "'Owner'",
        "'Count'",
        "'year'",
        "'selling_price'",
        "'Year vs Selling Price'",
        "'Year'",
        "'Selling Price'",
        "'km_driven'",
        "'selling_price'",
        "'Kilometers Driven vs Selling Price'",
        "'Kilometers Driven'",
        "'Selling Price'",
        "'coerce'",
        "'coolwarm'",
        "'Correlation Matrix'",
        "'selling_price'",
        "'selling_price'",
        "'Model'",
        "'r2 score'",
        "'MSE'",
        "'RMSE'",
        "'MAE'",
        "'mean squared error'",
        "'r2 score'",
        "'mean absolute error'",
        "'root mean squared error'",
        "'Model'",
        "'r2 score'",
        "'MSE'",
        "'RMSE'",
        "'MAE'",
        "'Training Score'",
        "'Testing Score'",
        "'Lin_Reg'",
        "'Lasso_Reg'",
        "'Ridge_Reg'",
        "'Decision Tree'",
        "'KNN'",
        "'SVM'",
        "'Random Forest'",
        "'selling_price'",
        "'sample_major.csv'",
        "\"selling_price\"",
        "\"selling_price\"",
        "'best_model.joblib'",
        "'best_model.joblib'",
        "'Predictions:'",
        "\"Actual Selling Price\"",
        "\"Predicted Selling Price\""
    ],
    "variables": [
        "car_details",
        "duplicate",
        "df",
        "null_values",
        "imputer",
        "car_details",
        "imputer",
        "car_details",
        "car_encoded",
        "scaler",
        "car_encoded",
        "car_details_numeric",
        "correlation_matrix",
        "x",
        "y",
        "x_train",
        "x_test",
        "y_train",
        "y_test",
        "a",
        "mse",
        "r2",
        "mae",
        "rmse",
        "linreg",
        "ypred_linreg",
        "las",
        "ypred_las",
        "rid",
        "ypred_rid",
        "sum",
        "dt_Regressor",
        "ypred_tree",
        "knn_Regressor",
        "knn_pred",
        "svm_Regressor",
        "svm_pred",
        "rf",
        "ypred_rf",
        "Model_performance",
        "Bestmodel",
        "new_data",
        "X_test",
        "Y_test",
        "loaded_model",
        "predictions",
        "results"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "Commented out IPython magic to ensure Python compatibility.",
        "%pip install matplotlib",
        "%pip install sklearn",
        "Ignore warning messages",
        "Perform imputation for numerical features",
        "Perform imputation for categorical features",
        "One-hot encoding for categorical features",
        "Scaling the numerical features",
        "Convert non-numeric columns to numeric if possible",
        "Check for NaN values and handle them",
        "You can choose a different strategy for handling NaN values if necessary",
        "Correlation matrix",
        "Split the data into features and target",
        "Split the data into training and testing sets",
        "Trainig Accuracy",
        "Testing Accuracy",
        "Building the linreg model",
        "Fit the model on the training data",
        "Computing Training and testing score",
        "Make predictions on the test set",
        "Evaluate the model",
        "Commented out IPython magic to ensure Python compatibility.",
        "%pip install Lasso",
        "Fit the model on the training data",
        "Make predictions on the test set",
        "Computing Training and testing score",
        "Evaluate the model",
        "Fit the model on the training data",
        "Make predictions on the test set",
        "Computing Training and testing score",
        "Create and train a decision tree classifier",
        "Fit the model on the training data",
        "Make predictions on the test set",
        "Fit the model on the training data",
        "Make predictions on the test set",
        "Fit the model on the training data",
        "Make predictions on the test set",
        "Building the RF Model",
        "Fit the model on the training data",
        "Building the RF Model",
        "Fit the model on the Actual data",
        "Predict on New Data",
        "Create a new dataset with 20 random data points from the car details dataset",
        "Assuming the saved model is loaded as 'model'",
        "Assuming \"selling_price\" is the target variable",
        "Save the best model",
        "Load the model",
        "Make predictions using the loaded model"
    ],
    "docstrings": [
        "\"\"\"capstone_project.ipynb\n\nAutomatically generated by Colaboratory.\n\nOriginal file is located at\n    https://colab.research.google.com/drive/1BylrYbbIKXPAKFjbko_WiX9EXN4QgvTh\n\"\"\"",
        "\"\"\" Feature engineering\"\"\"",
        "\"\"\" Data Preprocessing\n\n\"\"\"",
        "\"\"\"Exploratory Data Analysis\"\"\"",
        "\"\"\"Applying Linear Regression\"\"\"",
        "\"\"\" Lasso regression\"\"\"",
        "\"\"\"Ridge regression\"\"\"",
        "\"\"\"Summary of regression models\"\"\"",
        "\"\"\"Applying Decision Tree Regressor\"\"\"",
        "\"\"\"KNN Regressor\"\"\"",
        "\"\"\"Support vector Machine\"\"\"",
        "\"\"\"Random forest\"\"\"",
        "\"\"\"Comparing different Classification Models\"\"\"",
        "\"\"\"Saving and Loading the Best Model:\"\"\""
    ],
    "functions": [
        "evaluate",
        "m_score"
    ],
    "classes": []
}