{
    "identifiers": [
        "annotations",
        "typing",
        "Literal",
        "pandas",
        "pd",
        "plotly",
        "express",
        "px",
        "numpy",
        "nan",
        "plotly",
        "graph_objects",
        "Figure",
        "analytics",
        "datasets",
        "sprint_board",
        "SprintBoard",
        "analytics",
        "metrics",
        "BaseMetric",
        "Statistic",
        "Unit",
        "analytics",
        "metrics",
        "utils",
        "get_cum_sum_of_tix",
        "get_daily_tix_counts_by_status",
        "get_tix_date_range",
        "BaseMetric",
        "SprintBoard",
        "dataset",
        "SprintBoard",
        "sprint",
        "unit",
        "Unit",
        "dataset",
        "_get_and_validate_sprint_name",
        "sprint",
        "_isolate_data_for_this_sprint",
        "dataset",
        "opened_col",
        "dataset",
        "closed_col",
        "unit",
        "dataset",
        "pd",
        "DataFrame",
        "opened_col",
        "closed_col",
        "points_col",
        "sprint_data",
        "burnup_cols",
        "copy",
        "get_tix_date_range",
        "df_sprint",
        "opened_col",
        "closed_col",
        "dataset",
        "sprint_end",
        "sprint",
        "get_daily_tix_counts_by_status",
        "df_sprint",
        "unit",
        "get_daily_tix_counts_by_status",
        "df_sprint",
        "unit",
        "get_cum_sum_of_tix",
        "df_tix_range",
        "df_opened",
        "df_closed",
        "Figure",
        "dataset",
        "sprint_start",
        "sprint",
        "dataset",
        "sprint_end",
        "sprint",
        "results",
        "date_col",
        "between",
        "sprint_start",
        "min",
        "sprint_end",
        "pd",
        "Timestamp",
        "today",
        "tz",
        "results",
        "date_mask",
        "melt",
        "id_vars",
        "date_col",
        "value_vars",
        "var_name",
        "px",
        "area",
        "data_frame",
        "df",
        "x",
        "date_col",
        "y",
        "color",
        "color_discrete_sequence",
        "markers",
        "title",
        "sprint",
        "unit",
        "value",
        "template",
        "chart",
        "update_yaxes",
        "df",
        "max",
        "chart",
        "update_xaxes",
        "sprint_start",
        "sprint_end",
        "chart",
        "update_layout",
        "xaxis_title",
        "yaxis_title",
        "unit",
        "value",
        "capitalize",
        "legend_title",
        "unit",
        "value",
        "capitalize",
        "chart",
        "Statistic",
        "results",
        "dataset",
        "sprint_start",
        "sprint",
        "strftime",
        "dataset",
        "sprint_end",
        "sprint",
        "strftime",
        "df",
        "sum",
        "df",
        "sum",
        "round",
        "total_closed",
        "total_opened",
        "round",
        "pct_closed",
        "sprint_data",
        "Unit",
        "points",
        "value",
        "len",
        "sprint_data",
        "is_pointed",
        "len",
        "sprint_data",
        "round",
        "issues_pointed",
        "issues_total",
        "Statistic",
        "value",
        "sprint_start",
        "Statistic",
        "value",
        "sprint_end",
        "Statistic",
        "total_opened",
        "suffix",
        "unit",
        "value",
        "Statistic",
        "total_closed",
        "suffix",
        "unit",
        "value",
        "Statistic",
        "value",
        "pct_closed",
        "suffix",
        "Statistic",
        "value",
        "pct_remaining",
        "suffix",
        "Statistic",
        "value",
        "pct_pointed",
        "suffix",
        "Unit",
        "issues",
        "value",
        "sprint",
        "unit",
        "value",
        "label",
        "stat",
        "stats",
        "items",
        "message",
        "label",
        "stat",
        "value",
        "stat",
        "suffix",
        "message",
        "sprint",
        "dataset",
        "sprint",
        "dataset",
        "current_sprint",
        "sprint",
        "dataset",
        "sprints",
        "dataset",
        "sprint_col",
        "sprint",
        "valid_sprint",
        "ValueError",
        "msg",
        "sprint",
        "pd",
        "DataFrame",
        "dataset",
        "df",
        "dataset",
        "sprint_col",
        "sprint",
        "dataset",
        "df",
        "sprint_filter"
    ],
    "literals": [
        "\"date\"",
        "\"points\"",
        "\"opened\"",
        "\"closed\"",
        "\"utc\"",
        "\"total_closed\"",
        "\"total_open\"",
        "\"cols\"",
        "\"value\"",
        "\"cols\"",
        "\"#EFE0FC\"",
        "\"#2DA34D\"",
        "f\"{self.sprint} Burnup by {self.unit.value}\"",
        "\"none\"",
        "\"value\"",
        "\"Date\"",
        "f\"Total {self.unit.value.capitalize()}\"",
        "f\"{self.unit.value.capitalize()}\"",
        "\"%Y-%m-%d\"",
        "\"%Y-%m-%d\"",
        "\"opened\"",
        "\"closed\"",
        "\"Sprint start date\"",
        "\"Sprint end date\"",
        "\"Total opened\"",
        "f\" {self.unit.value}\"",
        "\"Total closed\"",
        "f\" {self.unit.value}\"",
        "\"Percent closed\"",
        "\"%\"",
        "\"Percent remaining\"",
        "\"%\"",
        "\"Percent pointed\"",
        "f\"% of {Unit.issues.value}\"",
        "f\"*:github: Burnup summary for {self.sprint} by {self.unit.value}*\\n\"",
        "f\"â€¢ *{label}:* {stat.value}{stat.suffix}\\n\"",
        "\"@current\"",
        "\"Sprint value doesn't match one of the available sprints\""
    ],
    "variables": [
        "dataset",
        "sprint",
        "sprint_data",
        "date_col",
        "points_col",
        "opened_col",
        "closed_col",
        "unit",
        "burnup_cols",
        "df_sprint",
        "df_tix_range",
        "df_opened",
        "df_closed",
        "sprint_start",
        "sprint_end",
        "date_mask",
        "df",
        "chart",
        "df",
        "sprint_start",
        "sprint_end",
        "total_opened",
        "total_closed",
        "pct_closed",
        "pct_remaining",
        "is_pointed",
        "issues_pointed",
        "issues_total",
        "pct_pointed",
        "message",
        "dataset",
        "sprint",
        "valid_sprint",
        "msg",
        "sprint_filter"
    ],
    "comments": [
        "type: ignore[attr-defined]",
        "type: ignore[attr-defined]",
        "make a copy of columns and rows we need to calculate burndown for this sprint",
        "get the date range over which tix were created and closed",
        "get the number of tix opened and closed each day",
        "combine the daily opened and closed counts to get total open and closed per day",
        "Limit the data in the area chart to dates within the sprint",
        "or through today, if the sprint hasn't yet ended",
        "NOTE: This will *not* affect the running totals on those days",
        "create a area chart from the data in self.results",
        "set the scale of the y axis to start at 0",
        "get sprint start and end dates",
        "get open and closed counts and percentages",
        "For burnup, we want to know at a glance the pct_remaining",
        "get the percentage of tickets that were ticketed",
        "format and return stats",
        "save dataset to local variable for brevity",
        "update sprint name if calculating burndown for the current sprint",
        "check that the sprint name matches one of the sprints in the dataset",
        "needs `not sprint` for mypy checking",
        "return the sprint name if it's valid",
        "def _get_daily_tix_counts_by_status(",
        "self,",
        "df: pd.DataFrame,",
        "status: Literal[\"opened\", \"closed\"],",
        ") -> pd.DataFrame:",
        "\"\"\"",
        "Count the number of issues or points opened or closed by date.",
        "Notes",
        "-----",
        "It does this by:",
        "- Grouping on the created_date or opened_date column, depending on status",
        "- Counting the total number of rows per group",
        "\"\"\"",
        "# create local copies of the key column names",
        "agg_col = self.opened_col if status == \"opened\" else self.closed_col",
        "unit_col = self.unit.value",
        "key_cols = [agg_col, unit_col]",
        "# create a dummy column to sum per row if the unit is tasks",
        "if self.unit == Unit.issues:",
        "df[unit_col] = 1",
        "# isolate the key columns, group by open or closed date, then sum the units",
        "df_agg = df[key_cols].groupby(agg_col, as_index=False).agg({unit_col: \"sum\"})",
        "return df_agg.rename(columns={agg_col: self.date_col, unit_col: status})",
        "def _get_tix_date_range(self, df: pd.DataFrame) -> pd.DataFrame:",
        "\"\"\"",
        "Get the date range over which issues were created and closed.",
        "Notes",
        "-----",
        "It does this by:",
        "- Finding the date when the sprint ends",
        "- Finding the earliest date a issue was created",
        "- Finding the latest date a issue was closed",
        "- Creating a row for each day between the earliest date a ticket was opened",
        "and either the sprint end _or_ the latest date an issue was closed,",
        "whichever is the later date.",
        "\"\"\"",
        "# get earliest date an issue was opened and latest date one was closed",
        "sprint_end = self.dataset.sprint_end(self.sprint)",
        "opened_min = df[self.opened_col].min()",
        "closed_max = df[self.closed_col].max()",
        "closed_max = sprint_end if closed_max is nan else max(sprint_end, closed_max)",
        "# creates a dataframe with one row for each day between min and max date",
        "return pd.DataFrame(",
        "pd.date_range(opened_min, closed_max),",
        "columns=[self.date_col],",
        ")"
    ],
    "docstrings": [
        "\"\"\"\nCalculates burnup for sprints.\n\nThis is a subclass of the BaseMetric class that calculates the running total of\nopen issues for each day in a sprint\n\"\"\"",
        "\"\"\"Calculates the running total of open issues per day in the sprint.\"\"\"",
        "\"\"\"Initialize the SprintBurnup metric.\"\"\"",
        "\"\"\"\n        Calculate the sprint burnup.\n\n        Notes\n        -----\n        Sprint burnup is calculated with the following algorithm:\n        1. Isolate Sprint records\n        2. Create data range for burnup\n        3. Group issues/points by date opened and date closed\n        4. Join on date\n\n        \"\"\"",
        "\"\"\"Plot the sprint burnup using a plotly area chart.\"\"\"",
        "\"\"\"Calculate summary statistics for this metric.\"\"\"",
        "\"\"\"Format the message that will be included with the charts posted to slack.\"\"\"",
        "\"\"\"Get the name of the sprint we're using to calculate burndown or raise an error.\"\"\"",
        "\"\"\"Filter out issues that are not assigned to the current sprint.\"\"\""
    ],
    "functions": [
        "calculate",
        "plot_results",
        "get_stats",
        "format_slack_message",
        "_get_and_validate_sprint_name",
        "_isolate_data_for_this_sprint"
    ],
    "classes": [
        "SprintBurnup"
    ]
}