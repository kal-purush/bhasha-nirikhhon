{
    "identifiers": [
        "cv2",
        "numpy",
        "np",
        "time",
        "argparse",
        "utills",
        "plot",
        "x",
        "y",
        "flags",
        "param",
        "mouse_pts",
        "cv2",
        "EVENT_LBUTTONDOWN",
        "len",
        "mouse_pts",
        "cv2",
        "circle",
        "image",
        "x",
        "y",
        "cv2",
        "circle",
        "image",
        "x",
        "y",
        "len",
        "mouse_pts",
        "len",
        "mouse_pts",
        "cv2",
        "line",
        "image",
        "x",
        "y",
        "mouse_pts",
        "len",
        "mouse_pts",
        "mouse_pts",
        "len",
        "mouse_pts",
        "len",
        "mouse_pts",
        "cv2",
        "line",
        "image",
        "x",
        "y",
        "mouse_pts",
        "mouse_pts",
        "globals",
        "mouse_pts",
        "append",
        "x",
        "y",
        "vid_path",
        "net",
        "output_dir",
        "output_vid",
        "ln1",
        "cv2",
        "VideoCapture",
        "vid_path",
        "vs",
        "get",
        "cv2",
        "CAP_PROP_FRAME_HEIGHT",
        "vs",
        "get",
        "cv2",
        "CAP_PROP_FRAME_WIDTH",
        "vs",
        "get",
        "cv2",
        "CAP_PROP_FPS",
        "utills",
        "get_scale",
        "width",
        "height",
        "cv2",
        "VideoWriter_fourcc",
        "cv2",
        "VideoWriter",
        "fourcc",
        "fps",
        "width",
        "height",
        "cv2",
        "VideoWriter",
        "fourcc",
        "fps",
        "width",
        "scale_w",
        "height",
        "scale_h",
        "image",
        "vs",
        "read",
        "grabbed",
        "frame",
        "shape",
        "count",
        "frame",
        "cv2",
        "imshow",
        "image",
        "cv2",
        "waitKey",
        "len",
        "mouse_pts",
        "cv2",
        "destroyWindow",
        "mouse_pts",
        "np",
        "float32",
        "np",
        "array",
        "points",
        "np",
        "float32",
        "H",
        "W",
        "H",
        "W",
        "cv2",
        "getPerspectiveTransform",
        "src",
        "dst",
        "np",
        "float32",
        "np",
        "array",
        "points",
        "cv2",
        "perspectiveTransform",
        "pts",
        "prespective_transform",
        "np",
        "sqrt",
        "warped_pt",
        "warped_pt",
        "warped_pt",
        "warped_pt",
        "np",
        "sqrt",
        "warped_pt",
        "warped_pt",
        "warped_pt",
        "warped_pt",
        "np",
        "array",
        "points",
        "np",
        "int32",
        "cv2",
        "polylines",
        "frame",
        "pnts",
        "thickness",
        "cv2",
        "dnn",
        "blobFromImage",
        "frame",
        "swapRB",
        "crop",
        "net",
        "setInput",
        "blob",
        "time",
        "time",
        "net",
        "forward",
        "ln1",
        "time",
        "time",
        "output",
        "layerOutputs",
        "detection",
        "output",
        "detection",
        "np",
        "argmax",
        "scores",
        "scores",
        "classID",
        "classID",
        "confidence",
        "confid",
        "detection",
        "np",
        "array",
        "W",
        "H",
        "W",
        "H",
        "box",
        "astype",
        "centerX",
        "width",
        "centerY",
        "height",
        "boxes",
        "append",
        "x",
        "y",
        "width",
        "height",
        "confidences",
        "append",
        "confidence",
        "classIDs",
        "append",
        "classID",
        "cv2",
        "dnn",
        "NMSBoxes",
        "boxes",
        "confidences",
        "confid",
        "thresh",
        "cv2",
        "FONT_HERSHEY_PLAIN",
        "i",
        "len",
        "boxes",
        "i",
        "idxs",
        "boxes1",
        "append",
        "boxes",
        "i",
        "boxes",
        "i",
        "len",
        "boxes1",
        "count",
        "utills",
        "get_transformed_points",
        "boxes1",
        "prespective_transform",
        "utills",
        "get_distances",
        "boxes1",
        "person_points",
        "distance_w",
        "distance_h",
        "utills",
        "get_count",
        "distances_mat",
        "np",
        "copy",
        "frame",
        "plot",
        "bird_eye_view",
        "frame",
        "distances_mat",
        "person_points",
        "scale_w",
        "scale_h",
        "risk_count",
        "plot",
        "social_distancing_view",
        "frame1",
        "bxs_mat",
        "boxes1",
        "risk_count",
        "confidences",
        "count",
        "output_movie",
        "write",
        "img",
        "bird_movie",
        "write",
        "bird_image",
        "cv2",
        "imshow",
        "bird_image",
        "cv2",
        "imwrite",
        "output_dir",
        "count",
        "img",
        "cv2",
        "imwrite",
        "output_dir",
        "count",
        "bird_image",
        "count",
        "cv2",
        "waitKey",
        "ord",
        "vs",
        "release",
        "cv2",
        "destroyAllWindows",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "action",
        "dest",
        "help",
        "parser",
        "add_argument",
        "action",
        "dest",
        "help",
        "parser",
        "add_argument",
        "action",
        "dest",
        "help",
        "parser",
        "add_argument",
        "action",
        "dest",
        "help",
        "parser",
        "add_argument",
        "action",
        "dest",
        "help",
        "parser",
        "parse_args",
        "values",
        "model",
        "model_path",
        "len",
        "model_path",
        "model_path",
        "values",
        "output_dir",
        "output_dir",
        "len",
        "output_dir",
        "output_dir",
        "values",
        "output_vid",
        "output_vid",
        "len",
        "output_vid",
        "output_vid",
        "model_path",
        "model_path",
        "cv2",
        "dnn",
        "readNetFromDarknet",
        "configPath",
        "weightsPath",
        "net_yl",
        "getLayerNames",
        "ln",
        "i",
        "i",
        "net_yl",
        "getUnconnectedOutLayers",
        "ln1",
        "cv2",
        "namedWindow",
        "cv2",
        "setMouseCallback",
        "get_mouse_points",
        "np",
        "random",
        "seed",
        "calculate_social_distancing",
        "values",
        "video_path",
        "net_yl",
        "output_dir",
        "output_vid",
        "ln1"
    ],
    "literals": [
        "\"mouse_pts\"",
        "\"XVID\"",
        "\"./output_vid/distancing.avi\"",
        "\"./output_vid/bird_eye_view.avi\"",
        "'here'",
        "\"image\"",
        "\"image\"",
        "\"int\"",
        "'Bird Eye View'",
        "\"frame%d.jpg\"",
        "\"bird_eye_view/frame%d.jpg\"",
        "'q'",
        "\"__main__\"",
        "'-v'",
        "'--video_path'",
        "'store'",
        "'video_path'",
        "'./data/example.mp4'",
        "'Path for input video'",
        "'-o'",
        "'--output_dir'",
        "'store'",
        "'output_dir'",
        "'./output/'",
        "'Path for Output images'",
        "'-O'",
        "'--output_vid'",
        "'store'",
        "'output_vid'",
        "'./output_vid/'",
        "'Path for Output videos'",
        "'-m'",
        "'--model'",
        "'store'",
        "'model'",
        "'./models/'",
        "'Path for models directory'",
        "'-u'",
        "'--uop'",
        "'store'",
        "'uop'",
        "'NO'",
        "'Use open pose or not (YES/NO)'",
        "'/'",
        "'/'",
        "'/'",
        "'/'",
        "'/'",
        "'/'",
        "\"yolov3.weights\"",
        "\"yolov3.cfg\"",
        "\"image\"",
        "\"image\""
    ],
    "variables": [
        "confid",
        "thresh",
        "mouse_pts",
        "mouse_pts",
        "count",
        "vs",
        "height",
        "width",
        "fps",
        "scale_w",
        "scale_h",
        "fourcc",
        "output_movie",
        "bird_movie",
        "points",
        "grabbed",
        "frame",
        "H",
        "W",
        "image",
        "points",
        "src",
        "dst",
        "prespective_transform",
        "pts",
        "warped_pt",
        "distance_w",
        "distance_h",
        "pnts",
        "blob",
        "start",
        "layerOutputs",
        "end",
        "boxes",
        "confidences",
        "classIDs",
        "scores",
        "classID",
        "confidence",
        "box",
        "centerX",
        "centerY",
        "width",
        "height",
        "x",
        "y",
        "idxs",
        "font",
        "boxes1",
        "x",
        "y",
        "w",
        "h",
        "count",
        "person_points",
        "distances_mat",
        "bxs_mat",
        "risk_count",
        "frame1",
        "bird_image",
        "img",
        "count",
        "parser",
        "values",
        "model_path",
        "model_path",
        "output_dir",
        "output_dir",
        "output_vid",
        "output_vid",
        "weightsPath",
        "configPath",
        "net_yl",
        "ln",
        "ln1"
    ],
    "comments": [
        "own modules",
        "print(\"Point detected\")",
        "print(mouse_pts)",
        "Get video height, width and fps",
        "Set scale for birds eye view",
        "Bird's eye view will only show ROI",
        "first frame will be used to draw ROI and horizontal and vertical 180 cm distance(unit length in both directions)",
        "using next 3 points for horizontal and vertical unit length(in this case 180 cm)",
        "since bird eye view has property that all points are equidistant in horizontal and vertical direction.",
        "distance_w and distance_h will give us 180 cm distance in both horizontal and vertical directions",
        "(how many pixels will be there in 180cm length in horizontal and vertical direction of birds eye view),",
        "which we can use to calculate distance between two humans in transformed view or bird eye view",
        "",
        "YOLO v3",
        "detecting humans in frame",
        "Here we will be using bottom center point of bounding box for all boxes and will transform all those",
        "bottom center points to bird eye view",
        "Here we will calculate distance between transformed points(humans)",
        "Draw bird eye view and frame with bouding boxes around humans according to risk factor",
        "Show/write image and videos",
        "Receives arguements specified by user",
        "load Yolov3 weights",
        "set mouse callback"
    ],
    "docstrings": [],
    "functions": [
        "get_mouse_points",
        "calculate_social_distancing"
    ],
    "classes": []
}