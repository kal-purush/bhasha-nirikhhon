{
    "identifiers": [
        "pytest",
        "acktest",
        "k8s",
        "resource",
        "k8s",
        "k8s",
        "CustomResourceReference",
        "cond_type_match",
        "CONDITION_TYPE_RESOURCE_SYNCED",
        "cond_status_match",
        "k8s",
        "get_resource_condition",
        "cond_type_match",
        "cond",
        "cond_type_match",
        "pytest",
        "fail",
        "msg",
        "cond",
        "get",
        "cond_status",
        "cond_status_match",
        "cond_type_match",
        "cond_status_match",
        "cond_status",
        "pytest",
        "fail",
        "msg",
        "k8s",
        "CustomResourceReference",
        "cond_status_match",
        "assert_type_status",
        "CONDITION_TYPE_RESOURCE_SYNCED",
        "cond_status_match",
        "k8s",
        "CustomResourceReference",
        "assert_synced_status",
        "k8s",
        "CustomResourceReference",
        "assert_synced_status"
    ],
    "literals": [
        "\"ACK.Adopted\"",
        "\"ACK.ResourceSynced\"",
        "\"ACK.Terminal\"",
        "\"ACK.Recoverable\"",
        "\"ACK.Advisory\"",
        "\"ACK.LateInitialized\"",
        "f\"Failed to find {cond_type_match} condition in \"",
        "f\"resource {ref}\"",
        "'status'",
        "f\"Expected {cond_type_match} condition to \"",
        "f\"have status {cond_status_match} but found {cond_status}\""
    ],
    "variables": [
        "CONDITION_TYPE_ADOPTED",
        "CONDITION_TYPE_RESOURCE_SYNCED",
        "CONDITION_TYPE_TERMINAL",
        "CONDITION_TYPE_RECOVERABLE",
        "CONDITION_TYPE_ADVISORY",
        "CONDITION_TYPE_LATE_INITIALIZED",
        "cond",
        "msg",
        "cond_status",
        "msg"
    ],
    "comments": [
        "Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\"). You may",
        "not use this file except in compliance with the License. A copy of the",
        "License is located at",
        "",
        "http://aws.amazon.com/apache2.0/",
        "",
        "or in the \"license\" file accompanying this file. This file is distributed",
        "on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either",
        "express or implied. See the License for the specific language governing",
        "permissions and limitations under the License.",
        "TODO(jaypipes): Move these functions to acktest library. The reason these are",
        "here is because the existing k8s.assert_condition_state_message doesn't",
        "actually assert anything. It returns true or false and logs messages."
    ],
    "docstrings": [
        "\"\"\"Utility functions to help processing Kubernetes resource conditions\"\"\"",
        "\"\"\"Asserts that the supplied resource has a condition of type\n    ACK.ResourceSynced and that the Status of this condition is True.\n\n    Usage:\n        from acktest.k8s import resource as k8s\n\n        from e2e import condition\n\n        ref = k8s.CustomResourceReference(\n            CRD_GROUP, CRD_VERSION, RESOURCE_PLURAL,\n            domain_name, namespace=\"default\",\n        )\n        k8s.create_custom_resource(ref, resource_data)\n        k8s.wait_resource_consumed_by_controller(ref)\n        condition.assert_type_status(\n            ref,\n            condition.CONDITION_TYPE_RESOURCE_SYNCED,\n            False)\n\n    Raises:\n        pytest.fail when condition of the specified type is not found or is not\n        in the supplied status.\n    \"\"\"",
        "\"\"\"Asserts that the supplied resource has a condition of type\n    ACK.ResourceSynced and that the Status of this condition is True.\n\n    Usage:\n        from acktest.k8s import resource as k8s\n\n        from e2e import condition\n\n        ref = k8s.CustomResourceReference(\n            CRD_GROUP, CRD_VERSION, RESOURCE_PLURAL,\n            domain_name, namespace=\"default\",\n        )\n        k8s.create_custom_resource(ref, resource_data)\n        k8s.wait_resource_consumed_by_controller(ref)\n        condition.assert_synced_status(ref, False)\n\n    Raises:\n        pytest.fail when ACK.ResourceSynced condition is not found or is not in\n        a True status.\n    \"\"\"",
        "\"\"\"Asserts that the supplied resource has a condition of type\n    ACK.ResourceSynced and that the Status of this condition is True.\n\n    Usage:\n        from acktest.k8s import resource as k8s\n\n        from e2e import condition\n\n        ref = k8s.CustomResourceReference(\n            CRD_GROUP, CRD_VERSION, RESOURCE_PLURAL,\n            domain_name, namespace=\"default\",\n        )\n        k8s.create_custom_resource(ref, resource_data)\n        k8s.wait_resource_consumed_by_controller(ref)\n        condition.assert_synced(ref)\n\n    Raises:\n        pytest.fail when ACK.ResourceSynced condition is not found or is not in\n        a True status.\n    \"\"\"",
        "\"\"\"Asserts that the supplied resource has a condition of type\n    ACK.ResourceSynced and that the Status of this condition is False.\n\n    Usage:\n        from acktest.k8s import resource as k8s\n\n        from e2e import condition\n\n        ref = k8s.CustomResourceReference(\n            CRD_GROUP, CRD_VERSION, RESOURCE_PLURAL,\n            domain_name, namespace=\"default\",\n        )\n        k8s.create_custom_resource(ref, resource_data)\n        k8s.wait_resource_consumed_by_controller(ref)\n        condition.assert_not_synced(ref)\n\n    Raises:\n        pytest.fail when ACK.ResourceSynced condition is not found or is not in\n        a False status.\n    \"\"\""
    ],
    "functions": [
        "assert_type_status",
        "assert_synced_status",
        "assert_synced",
        "assert_not_synced"
    ],
    "classes": []
}