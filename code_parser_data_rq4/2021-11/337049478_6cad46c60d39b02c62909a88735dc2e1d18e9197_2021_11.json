{
    "identifiers": [
        "Types",
        "parse",
        "printDocuments",
        "exportedForTesting",
        "transform",
        "describe",
        "it",
        "parse",
        "parse",
        "transform",
        "expect",
        "printDocuments",
        "result",
        "printDocuments",
        "expectedDocument",
        "describe",
        "it",
        "Types",
        "parse",
        "parse",
        "parse",
        "parse",
        "exportedForTesting",
        "documentFiles",
        "expect",
        "result"
    ],
    "literals": [
        "'@graphql-codegen/plugin-helpers'",
        "'graphql'",
        "'../../utils/testing/utils'",
        "'../fixVariableNotDefinedInRoot'",
        "'transform'",
        "'fix variables not defined in root based on argumentDefinitions'",
        "query TestQuery($arg4: Int) {\n        viewer {\n          ...Fragment_user\n        }\n      }\n      fragment Fragment_user on User\n      @argumentDefinitions(\n        arg1: { type: \"Int\", defaultValue: 10 } # It will put 10.\n        arg2: { type: \"String\" } # It will remove the argument because it is nullable and has no default value.\n        arg3: { type: \"Int!\" } # It will not do anything because it has no default value and it is not nullable.\n        arg4: { type: \"String\" } # It will not do anything because it's in root variables.\n      ) {\n        id\n        item(itemArg1: $arg1, itemArg2: $arg2, itemArg3: $arg3, itemArg4: $arg4) {\n          id\n          name\n        }\n      }",
        "query TestQuery($arg4: Int) {\n        viewer {\n          ...Fragment_user\n        }\n      }\n      fragment Fragment_user on User\n      @argumentDefinitions(\n        arg1: { type: \"Int\", defaultValue: 10 }\n        arg2: { type: \"String\" }\n        arg3: { type: \"Int!\" }\n        arg4: { type: \"String\" }\n      ) {\n        id\n        item(itemArg1: 10, itemArg3: $arg3, itemArg4: $arg4) {\n          id\n          name\n        }\n      }",
        "'getQueryNamesPairs'",
        "'generates pairs fragment names and variable names'",
        "query ($a: Int, $b: String) {\n            viewer {\n              ...Fragment1_user\n              ...Fragment2_user\n            }\n          }\n          fragment Fragment1_user on User {\n            id\n          }",
        "fragment Fragment2_user on User {\n            id\n            ...Fragment3_user\n          }",
        "fragment Fragment3_user on User {\n            id\n          }",
        "query ($c: Boolean, $d: Int!) {\n            viewer {\n              ...Fragment3_user\n            }\n          }\n          fragment Fragment1_user on User {\n            id\n          }",
        "'a'",
        "'b'",
        "'Fragment1_user'",
        "'Fragment2_user'",
        "'Fragment3_user'",
        "'c'",
        "'d'",
        "'Fragment3_user'"
    ],
    "variables": [
        "expectedDocument",
        "result",
        "documentFiles",
        "result"
    ],
    "comments": [
        "GraphQL",
        "GraphQL",
        "GraphQL",
        "GraphQL",
        "GraphQL",
        "GraphQL"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}