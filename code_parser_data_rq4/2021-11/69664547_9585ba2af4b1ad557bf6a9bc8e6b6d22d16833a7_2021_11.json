{
    "identifiers": [
        "FocusOrigin",
        "ListKeyManagerModifierKey",
        "DOWN_ARROW",
        "END",
        "HOME",
        "LEFT_ARROW",
        "RIGHT_ARROW",
        "TAB",
        "UP_ARROW",
        "QueryList",
        "FocusKeyManager",
        "ListKeyManager",
        "createKeyboardEvent",
        "take",
        "_label",
        "_origin",
        "describe",
        "beforeEach",
        "itemList",
        "QueryList",
        "fakeKeyEvents",
        "createKeyboardEvent",
        "DOWN_ARROW",
        "createKeyboardEvent",
        "UP_ARROW",
        "createKeyboardEvent",
        "LEFT_ARROW",
        "createKeyboardEvent",
        "RIGHT_ARROW",
        "createKeyboardEvent",
        "TAB",
        "createKeyboardEvent",
        "HOME",
        "createKeyboardEvent",
        "END",
        "createKeyboardEvent",
        "describe",
        "index",
        "beforeEach",
        "itemList",
        "FakeFocusable",
        "FakeFocusable",
        "FakeFocusable",
        "keyManager",
        "ListKeyManager",
        "itemList",
        "keyManager",
        "spyOn",
        "keyManager",
        "it",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "itemList",
        "FakeFocusable",
        "itemList",
        "itemList",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "xit",
        "expect",
        "ListKeyManager",
        "xit",
        "keyManager",
        "expect",
        "keyManager",
        "describe",
        "it",
        "jasmine",
        "keyManager",
        "take",
        "spy",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "spy",
        "it",
        "jasmine",
        "keyManager",
        "take",
        "spy",
        "fakeKeyEvents",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "spy",
        "it",
        "jasmine",
        "keyManager",
        "spy",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "spy",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "spy",
        "subscription",
        "xit",
        "jasmine",
        "keyManager",
        "spy",
        "keyManager",
        "itemList",
        "FakeFocusable",
        "itemList",
        "keyManager",
        "expect",
        "spy",
        "subscription",
        "it",
        "keyManager",
        "ListKeyManager",
        "itemList",
        "expect",
        "keyManager",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "it",
        "expect",
        "fakeKeyEvents",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "fakeKeyEvents",
        "it",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "fakeKeyEvents",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "expect",
        "fakeKeyEvents",
        "it",
        "keyManager",
        "expect",
        "keyManager",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "expect",
        "fakeKeyEvents",
        "it",
        "keyManager",
        "expect",
        "keyManager",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "expect",
        "fakeKeyEvents",
        "describe",
        "beforeEach",
        "keyManager",
        "it",
        "keyManager",
        "expect",
        "keyManager",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "it",
        "keyManager",
        "expect",
        "keyManager",
        "keyManager",
        "fakeKeyEvents",
        "keyManager",
        "itemList",
        "expect",
        "keyManager",
        "itemList",
        "describe",
        "beforeEach",
        "keyManager",
        "createKeyboardEvent",
        "DOWN_ARROW",
        "createKeyboardEvent",
        "UP_ARROW",
        "runDirectionalKeyTests",
        "describe",
        "beforeEach",
        "keyManager",
        "createKeyboardEvent",
        "RIGHT_ARROW",
        "createKeyboardEvent",
        "LEFT_ARROW",
        "runDirectionalKeyTests",
        "describe",
        "beforeEach",
        "keyManager",
        "createKeyboardEvent",
        "LEFT_ARROW",
        "createKeyboardEvent",
        "RIGHT_ARROW",
        "runDirectionalKeyTests",
        "it",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "itemList",
        "items",
        "itemList",
        "items",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "itemList",
        "items",
        "items",
        "items",
        "itemList",
        "items",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "itemList",
        "items",
        "itemList",
        "items",
        "keyManager",
        "expect",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "expect",
        "keyManager",
        "expect",
        "expect",
        "keyManager",
        "expect",
        "xit",
        "runModifierKeyTest",
        "xit",
        "runModifierKeyTest",
        "xit",
        "runModifierKeyTest",
        "xit",
        "runModifierKeyTest",
        "context",
        "modifier",
        "keyManager",
        "jasmine",
        "keyManager",
        "spy",
        "expect",
        "context",
        "expect",
        "context",
        "context",
        "modifier",
        "context",
        "modifier",
        "keyManager",
        "context",
        "expect",
        "context",
        "expect",
        "keyManager",
        "initialActiveIndex",
        "expect",
        "spy",
        "keyManager",
        "context",
        "expect",
        "context",
        "expect",
        "keyManager",
        "initialActiveIndex",
        "expect",
        "spy",
        "subscription",
        "describe",
        "it",
        "expect",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "expect",
        "keyManager",
        "keyManager",
        "itemList",
        "expect",
        "keyManager",
        "it",
        "jasmine",
        "keyManager",
        "spy",
        "expect",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "spy",
        "subscription",
        "it",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "itemList",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "itemList",
        "it",
        "keyManager",
        "fakeKeyEvents",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "itemList",
        "items",
        "itemList",
        "items",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "expect",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "itemList",
        "items",
        "itemList",
        "items",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "expect",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "itemList",
        "items",
        "itemList",
        "items",
        "expect",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "itemList",
        "items",
        "itemList",
        "items",
        "keyManager",
        "fakeKeyEvents",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "jasmine",
        "keyManager",
        "spy",
        "keyManager",
        "keyManager",
        "expect",
        "spy",
        "subscription",
        "describe",
        "it",
        "expect",
        "keyManager",
        "keyManager",
        "it",
        "keyManager",
        "keyManager",
        "fakeKeyEvents",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "it",
        "keyManager",
        "keyManager",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "expect",
        "keyManager",
        "it",
        "keyManager",
        "keyManager",
        "itemList",
        "items",
        "item",
        "item",
        "itemList",
        "items",
        "keyManager",
        "fakeKeyEvents",
        "it",
        "keyManager",
        "keyManager",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "itemList",
        "keyManager",
        "keyManager",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "describe",
        "it",
        "itemList",
        "items",
        "itemList",
        "items",
        "expect",
        "keyManager",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "it",
        "keyManager",
        "item",
        "item",
        "itemList",
        "items",
        "itemList",
        "items",
        "expect",
        "keyManager",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "keyManager",
        "describe",
        "beforeEach",
        "itemList",
        "FakeFocusable",
        "FakeFocusable",
        "FakeFocusable",
        "keyManager",
        "FocusKeyManager",
        "itemList",
        "keyManager",
        "spyOn",
        "itemList",
        "spyOn",
        "itemList",
        "spyOn",
        "itemList",
        "it",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "itemList",
        "expect",
        "itemList",
        "expect",
        "itemList",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "itemList",
        "expect",
        "itemList",
        "expect",
        "itemList",
        "it",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "itemList",
        "expect",
        "itemList",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "itemList",
        "expect",
        "itemList",
        "it",
        "expect",
        "keyManager",
        "keyManager",
        "expect",
        "keyManager",
        "expect",
        "itemList",
        "it",
        "keyManager",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "itemList",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "itemList",
        "keyManager",
        "keyManager",
        "fakeKeyEvents",
        "expect",
        "itemList"
    ],
    "literals": [
        "'@angular/cdk/a11y'",
        "'@angular/cdk/keycodes'",
        "'@angular/core'",
        "'@ptsecurity/cdk/a11y'",
        "'@ptsecurity/cdk/testing'",
        "'rxjs/operators'",
        "''",
        "'Key managers'",
        "'keydown'",
        "'keydown'",
        "'keydown'",
        "'keydown'",
        "'keydown'",
        "'keydown'",
        "'keydown'",
        "'keydown'",
        "'ListKeyManager'",
        "'setActiveItem'",
        "'one'",
        "'two'",
        "'three'",
        "'setActiveItem'",
        "'should maintain the active item if the amount of items changes'",
        "'one'",
        "'zero'",
        "'one'",
        "'should start off the activeItem as null'",
        "'should set the activeItem to null if an invalid index is passed in'",
        "'Key events'",
        "'should emit tabOut when the tab key is pressed'",
        "'tabOut spy'",
        "'should emit tabOut when the tab key is pressed with a modifier'",
        "'tabOut spy'",
        "'shiftKey'",
        "'should emit an event whenever the active item changes'",
        "'change spy'",
        "'should emit if the active item changed, but not the active index'",
        "'change spy'",
        "'zero'",
        "'should activate the first item when pressing down on a clean key manager'",
        "'Expected active index to default to -1.'",
        "'Expected first item to become active.'",
        "'should not prevent the default keyboard action when pressing tab'",
        "'should not do anything for unsupported key presses'",
        "'should ignore the horizontal keys when only in vertical mode'",
        "'should ignore the vertical keys when only in horizontal mode'",
        "'ltr'",
        "'withHomeAndEnd'",
        "'should focus the first item when Home is pressed'",
        "'should focus the last item when End is pressed'",
        "'with `vertical` direction'",
        "'keydown'",
        "'keydown'",
        "'with `ltr` direction'",
        "'ltr'",
        "'keydown'",
        "'keydown'",
        "'with `rtl` direction'",
        "'rtl'",
        "'keydown'",
        "'keydown'",
        "'should set subsequent items as active when the next key is pressed'",
        "'Expected active item to be 1 after one next key event.'",
        "'Expected active item to be 2 after two next key events.'",
        "'should set first item active when the next key is pressed if no active item'",
        "'Expected active item to be 0 after next key if active item was null.'",
        "'should set previous items as active when the previous key is pressed'",
        "'Expected active item to be 1 after one next key event.'",
        "'Expected active item to be 0 after one next and one previous key event.'",
        "'should do nothing when the prev key is pressed if no active item and not wrap'",
        "'Expected nothing to happen if prev event occurs and no active item.'",
        "'should skip disabled items'",
        "'Expected active item to skip past disabled item on next event.'",
        "'Expected active item to skip past disabled item on up arrow.'",
        "'should work normally when disabled property does not exist'",
        "'Expected active item to be 1 after one next event when disabled not set.'",
        "'Expected active item to be 2 after two next events when '",
        "'disabled not set.'",
        "'should not move active item past either end of the list'",
        "Expected last item of the list to be active.",
        "Expected active item to remain at the end of the list.",
        "Expected first item of the list to be active.",
        "Expected active item to remain at the beginning of the list.",
        "'should not move active item to end when the last item is disabled'",
        "Expected second item of the list to be active.",
        "Expected the second item to remain active.",
        "'should prevent the default keyboard action of handled events'",
        "'should not do anything for arrow keys if the alt key is held down'",
        "'altKey'",
        "'should not do anything for arrow keys if the control key is held down'",
        "'ctrlKey'",
        "'should not do anything for arrow keys if the meta key is held down'",
        "'metaKey'",
        "'should not do anything for arrow keys if the shift key is held down'",
        "'shiftKey'",
        "'change spy'",
        "'programmatic focus'",
        "'should setActiveItem()'",
        "Expected first item of the list to be active.",
        "Expected activeItemIndex to be updated when setActiveItem() was called.",
        "'should be able to set the active item by reference'",
        "Expected first item of the list to be active.",
        "Expected activeItemIndex to be updated.",
        "'should be able to set the active item without emitting an event'",
        "'change spy'",
        "'should expose the active item correctly'",
        "'Expected active item to be the second option.'",
        "'Expected the active item to match the second option.'",
        "'Expected active item to be the third option.'",
        "'Expected the active item ID to match the third option.'",
        "'should setFirstItemActive()'",
        "Expected last item of the list to be active.",
        "Expected setFirstItemActive() to set the active item to the first item.",
        "'should set the active item to the second item if the first one is disabled'",
        "Expected the second item to be active if the first was disabled.",
        "'should setLastItemActive()'",
        "Expected first item of the list to be active.",
        "Expected setLastItemActive() to set the active item to the last item.",
        "'should set the active item to the second to last item if the last is disabled'",
        "Expected the second to last item to be active if the last was disabled.",
        "'should setNextItemActive()'",
        "Expected first item of the list to be active.",
        "Expected setNextItemActive() to set the active item to the next item.",
        "'should set the active item to the next enabled item if next is disabled'",
        "Expected first item of the list to be active.",
        "Expected setNextItemActive() to only set enabled items as active.",
        "'should setPreviousItemActive()'",
        "Expected second item of the list to be active.",
        "Expected setPreviousItemActive() to set the active item to the previous.",
        "'should skip disabled items when setPreviousItemActive() is called'",
        "Expected third item of the list to be active.",
        "Expected setPreviousItemActive() to skip the disabled item.",
        "'should not emit an event if the item did not change'",
        "'change spy'",
        "'wrap mode'",
        "'should return itself to allow chaining'",
        "Expected withWrap() to return an instance of ListKeyManager.",
        "'should wrap focus when arrow keying past items while in wrap mode'",
        "'Expected last item to be active.'",
        "'Expected active item to wrap to beginning.'",
        "'Expected active item to wrap to end.'",
        "'should set last item active when up arrow is pressed if no active item'",
        "'Expected last item to be active on up arrow if no active item.'",
        "'Expected active item to be 0 after wrapping back to beginning.'",
        "'should not get into an infinite loop if all items are disabled'",
        "'should be able to disable wrapping'",
        "'skip predicate'",
        "'should skip disabled items by default'",
        "'should be able to skip items with a custom predicate'",
        "'FocusKeyManager'",
        "'focus'",
        "'focus'",
        "'focus'",
        "'should focus subsequent items when down arrow is pressed'",
        "'should focus previous items when up arrow is pressed'",
        "'should allow setting the focused item without calling focus'",
        "Expected first item of the list to be active.",
        "Expected activeItemIndex to update after calling updateActiveItem().",
        "'should be able to set the focus origin'",
        "'mouse'",
        "'mouse'",
        "'mouse'",
        "'keyboard'",
        "'keyboard'"
    ],
    "variables": [
        "itemList",
        "fakeKeyEvents",
        "keyManager",
        "spy",
        "spy",
        "spy",
        "subscription",
        "spy",
        "subscription",
        "items",
        "items",
        "items",
        "initialActiveIndex",
        "spy",
        "subscription",
        "spy",
        "subscription",
        "items",
        "items",
        "items",
        "items",
        "spy",
        "subscription",
        "items",
        "items",
        "items",
        "keyManager"
    ],
    "comments": [
        "tslint:disable:no-empty naming-convention no-magic-numbers mocha-no-side-effect-code max-func-body-length",
        "Whether the item is disabled or not.",
        "Test property that can be used to test the `skipPredicate` functionality.",
        "corresponds to the tilde character (~)",
        "We have a spy on the `setActiveItem` method of the list key manager. That method has",
        "multiple overloads and TypeScript is unable to infer the right parameters when calls are",
        "checked using jasmine's `hasBeenCalledWith` matcher. We work around this by explicitly",
        "specifying the overload signature that should be used.",
        "TODO: remove if https://github.com/DefinitelyTyped/DefinitelyTyped/issues/42455 is solved.",
        "first item is already focused",
        "Next event should skip past disabled item from 0 to 2",
        "Previous event should skip past disabled item from 2 to 0",
        "This next event would move active item past the end of the list",
        "This prev event would move active item past the beginning of the list",
        "This next key event would set active item to the last item, which is disabled",
        "Runs the test that asserts that we handle modifier keys correctly.",
        "this down arrow moves down past the end of the list",
        "this up arrow moves up past the beginning of the list",
        "This test should pass if all items are disabled and the down arrow key got pressed.",
        "If the test setup crashes or this test times out, this test can be considered as failed.",
        "first item is already focused"
    ],
    "docstrings": [
        "* Defines the directional key tests that should be run in a particular context. Note that\n             * parameters have to be passed in via Jasmine's context object (`this` inside a `beforeEach`)\n             * because this function has to run before any `beforeEach`, `beforeAll` etc. hooks."
    ],
    "functions": [
        "focus",
        "getLabel",
        "runDirectionalKeyTests",
        "runModifierKeyTest"
    ],
    "classes": [
        "FakeFocusable"
    ]
}