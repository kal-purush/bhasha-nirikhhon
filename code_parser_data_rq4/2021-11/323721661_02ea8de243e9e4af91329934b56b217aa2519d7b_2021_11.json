{
    "identifiers": [
        "os",
        "pytest",
        "torch",
        "torch",
        "distributed",
        "dist",
        "torch",
        "multiprocessing",
        "mp",
        "tests",
        "helpers",
        "testers",
        "_assert_allclose",
        "_assert_tensor",
        "torchmetrics",
        "functional",
        "text",
        "squad",
        "torchmetrics",
        "text",
        "squad",
        "SQuAD",
        "pytest",
        "mark",
        "parametrize",
        "SAMPLE_1",
        "SAMPLE_1",
        "SAMPLE_1",
        "SAMPLE_1",
        "SAMPLE_2",
        "SAMPLE_2",
        "SAMPLE_2",
        "SAMPLE_2",
        "preds",
        "targets",
        "exact_match",
        "f1",
        "squad",
        "preds",
        "targets",
        "_assert_tensor",
        "metrics_score",
        "_assert_tensor",
        "metrics_score",
        "_assert_allclose",
        "metrics_score",
        "exact_match",
        "_assert_allclose",
        "metrics_score",
        "f1",
        "pytest",
        "mark",
        "parametrize",
        "BATCH",
        "BATCH",
        "BATCH",
        "BATCH",
        "preds",
        "targets",
        "exact_match",
        "f1",
        "SQuAD",
        "pred",
        "target",
        "preds",
        "targets",
        "squad_metric",
        "update",
        "preds",
        "pred",
        "targets",
        "target",
        "squad_metric",
        "compute",
        "_assert_tensor",
        "metrics_score",
        "_assert_tensor",
        "metrics_score",
        "_assert_allclose",
        "metrics_score",
        "torch",
        "mean",
        "torch",
        "tensor",
        "exact_match",
        "_assert_allclose",
        "metrics_score",
        "torch",
        "mean",
        "torch",
        "tensor",
        "f1",
        "rank",
        "world_size",
        "pred",
        "target",
        "exact_match",
        "f1",
        "os",
        "environ",
        "os",
        "environ",
        "dist",
        "init_process_group",
        "rank",
        "rank",
        "world_size",
        "world_size",
        "SQuAD",
        "squad_metric",
        "update",
        "pred",
        "target",
        "squad_metric",
        "compute",
        "_assert_tensor",
        "metrics_score",
        "_assert_tensor",
        "metrics_score",
        "_assert_allclose",
        "metrics_score",
        "exact_match",
        "_assert_allclose",
        "metrics_score",
        "f1",
        "dist",
        "destroy_process_group",
        "rank",
        "world_size",
        "preds",
        "targets",
        "exact_match",
        "f1",
        "_squad_score_ddp",
        "rank",
        "world_size",
        "preds",
        "rank",
        "targets",
        "rank",
        "exact_match",
        "rank",
        "f1",
        "rank",
        "pytest",
        "mark",
        "parametrize",
        "BATCH",
        "BATCH",
        "BATCH",
        "BATCH",
        "pytest",
        "mark",
        "skipif",
        "dist",
        "is_available",
        "reason",
        "preds",
        "targets",
        "exact_match",
        "f1",
        "mp",
        "spawn",
        "_test_score_ddp_fn",
        "args",
        "world_size",
        "preds",
        "targets",
        "exact_match",
        "f1",
        "nprocs",
        "world_size",
        "join"
    ],
    "literals": [
        "\"exact_match\"",
        "\"f1\"",
        "\"predictions\"",
        "\"prediction_text\"",
        "\"1976\"",
        "\"id\"",
        "\"id1\"",
        "\"references\"",
        "\"answers\"",
        "\"answer_start\"",
        "\"text\"",
        "\"1976\"",
        "\"id\"",
        "\"id1\"",
        "\"exact_match\"",
        "\"f1\"",
        "\"predictions\"",
        "\"prediction_text\"",
        "\"Hello\"",
        "\"id\"",
        "\"id2\"",
        "\"references\"",
        "\"answers\"",
        "\"answer_start\"",
        "\"text\"",
        "\"World\"",
        "\"id\"",
        "\"id2\"",
        "\"exact_match\"",
        "\"f1\"",
        "\"predictions\"",
        "\"prediction_text\"",
        "\"1976\"",
        "\"id\"",
        "\"id1\"",
        "\"prediction_text\"",
        "\"Hello\"",
        "\"id\"",
        "\"id2\"",
        "\"references\"",
        "\"answers\"",
        "\"answer_start\"",
        "\"text\"",
        "\"1976\"",
        "\"id\"",
        "\"id1\"",
        "\"answers\"",
        "\"answer_start\"",
        "\"text\"",
        "\"World\"",
        "\"id\"",
        "\"id2\"",
        "\"preds,targets,exact_match,f1\"",
        "\"predictions\"",
        "\"references\"",
        "\"exact_match\"",
        "\"exact_match\"",
        "\"predictions\"",
        "\"references\"",
        "\"exact_match\"",
        "\"exact_match\"",
        "\"exact_match\"",
        "\"f1\"",
        "\"exact_match\"",
        "\"f1\"",
        "\"preds,targets,exact_match,f1\"",
        "\"predictions\"",
        "\"references\"",
        "\"exact_match\"",
        "\"f1\"",
        "\"exact_match\"",
        "\"f1\"",
        "\"exact_match\"",
        "\"f1\"",
        "\"MASTER_ADDR\"",
        "\"localhost\"",
        "\"MASTER_PORT\"",
        "\"12355\"",
        "\"gloo\"",
        "\"exact_match\"",
        "\"f1\"",
        "\"exact_match\"",
        "\"f1\"",
        "\"preds,targets,exact_match,f1\"",
        "\"predictions\"",
        "\"references\"",
        "\"exact_match\"",
        "\"f1\"",
        "\"test requires torch distributed\""
    ],
    "variables": [
        "SAMPLE_1",
        "SAMPLE_2",
        "BATCH",
        "metrics_score",
        "squad_metric",
        "metrics_score",
        "squad_metric",
        "metrics_score",
        "world_size"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"Tests for functional.\"\"\"",
        "\"\"\"Tests for metric works with accumulation.\"\"\"",
        "\"\"\"Define a DDP process for SQuAD metric.\"\"\"",
        "\"\"\"Core functionality for the `test_score_ddp` test.\"\"\"",
        "\"\"\"Tests for metric using DDP.\"\"\""
    ],
    "functions": [
        "test_score_fn",
        "test_accumulation",
        "_squad_score_ddp",
        "_test_score_ddp_fn",
        "test_score_ddp"
    ],
    "classes": []
}