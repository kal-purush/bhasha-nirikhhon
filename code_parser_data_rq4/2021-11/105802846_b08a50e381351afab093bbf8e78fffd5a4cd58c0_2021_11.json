{
    "identifiers": [
        "spec",
        "crypto",
        "spec",
        "assemblies",
        "spec",
        "assembly",
        "assemblies",
        "assembly",
        "assembly",
        "fqns",
        "crypto",
        "fqn",
        "fqns",
        "hash",
        "fqn",
        "hash",
        "fqn",
        "fqn",
        "fqn",
        "fqn",
        "recursionBreaker",
        "fqn",
        "existing",
        "existing",
        "crypto",
        "hash",
        "fqn",
        "fqn",
        "hash",
        "spec",
        "member",
        "sortedByName",
        "hash",
        "member",
        "spec",
        "spec",
        "spec",
        "visitType",
        "visitCallable",
        "prop",
        "sortedByName",
        "hash",
        "prop",
        "visitBools",
        "prop",
        "prop",
        "prop",
        "prop",
        "visitTypeReference",
        "prop",
        "method",
        "sortedByName",
        "hash",
        "method",
        "visitCallable",
        "method",
        "visitBools",
        "method",
        "visitTypeReference",
        "method",
        "implint",
        "visitType",
        "implint",
        "hash",
        "fqn",
        "ret",
        "ret",
        "fqn",
        "fqn",
        "recursionBreaker",
        "fqn",
        "hash",
        "recursionBreaker",
        "fqn",
        "hash",
        "fqn",
        "recursionBreaker",
        "recursionBreaker",
        "fqn",
        "callable",
        "spec",
        "callable",
        "visitBools",
        "callable",
        "param",
        "callable",
        "visitBools",
        "param",
        "param",
        "visitTypeReference",
        "param",
        "typeRef",
        "spec",
        "typeRef",
        "spec",
        "typeRef",
        "hash",
        "typeRef",
        "spec",
        "typeRef",
        "visitType",
        "typeRef",
        "spec",
        "typeRef",
        "hash",
        "typeRef",
        "visitTypeReference",
        "typeRef",
        "spec",
        "typeRef",
        "typeRef",
        "visitTypeReference",
        "vs",
        "hash",
        "vs",
        "v",
        "v",
        "fqn",
        "fqn",
        "assemblyName",
        "fqn",
        "xs",
        "xs",
        "a",
        "b",
        "a",
        "b",
        "xs"
    ],
    "literals": [
        "'@jsii/spec'",
        "'crypto'",
        "string",
        "string",
        "string",
        "string",
        "'sha256'",
        "'hex'",
        "string",
        "string",
        "string",
        "'sha256'",
        "'hex'",
        "string",
        "'$RECURSION$'",
        "'1'",
        "'0'",
        "''",
        "string",
        "'.'",
        "string"
    ],
    "variables": [
        "hash",
        "existing",
        "hash",
        "ret",
        "assemblyName"
    ],
    "comments": [
        "eslint-disable-next-line @typescript-eslint/no-this-alias"
    ],
    "docstrings": [
        "* Return a fingerprint for a type.\n *\n * The fingerprint will change if the API of the given type changes.\n *\n * The fingerprint is an approximation, it's not exhaustive. It will not trace\n * into types from assemblies it can't see, for example. For the purposes of Rosetta,\n * we'll assume this is Good Enoughâ„¢.",
        "* Return a single fingerprint that encompasses all fqns in the list",
        "* Return the fingerprint for the given FQN in the assembly of this fingerprinter\n   *\n   * The fingerprint is always going to contain the FQN, even if the type doesn't exist\n   * in this assembly."
    ],
    "functions": [
        "fingerprintAll",
        "fingerprintType",
        "doFingerprint",
        "visitType",
        "visitCallable",
        "visitTypeReference",
        "visitBools",
        "findType",
        "sortedByName"
    ],
    "classes": [
        "TypeFingerprinter"
    ]
}