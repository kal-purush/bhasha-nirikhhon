{
    "identifiers": [
        "de",
        "adito",
        "git",
        "impl",
        "ssh",
        "org",
        "jetbrains",
        "annotations",
        "NotNull",
        "java",
        "lang",
        "reflect",
        "Field",
        "java",
        "lang",
        "reflect",
        "InvocationTargetException",
        "java",
        "lang",
        "reflect",
        "Method",
        "java",
        "net",
        "URI",
        "java",
        "net",
        "URL",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "stream",
        "Collectors",
        "SuppressWarnings",
        "authCacheValue",
        "getPath",
        "removeFromCache",
        "NotNull",
        "pURL",
        "removeFromCache",
        "_populateMethodCalls",
        "url",
        "URI",
        "create",
        "pURL",
        "toURL",
        "cacheField",
        "authCacheValue",
        "getDeclaredField",
        "cacheField",
        "setAccessible",
        "cacheValue",
        "cacheField",
        "get",
        "hashTableField",
        "cacheValue",
        "getClass",
        "getDeclaredField",
        "hashTableField",
        "setAccessible",
        "SuppressWarnings",
        "hashtable",
        "hashTableField",
        "get",
        "cacheValue",
        "matchingAuthenticators",
        "hashtable",
        "entrySet",
        "stream",
        "pEntry",
        "pEntry",
        "getKey",
        "contains",
        "url",
        "getHost",
        "flatMap",
        "pEntry",
        "pEntry",
        "getValue",
        "stream",
        "collect",
        "Collectors",
        "toList",
        "matchingAuthenticators",
        "stream",
        "pAuthenticator",
        "_isPathEqual",
        "url",
        "pAuthenticator",
        "forEach",
        "ClearHttpCacheHandler",
        "_removeFromCache",
        "e",
        "e",
        "NotNull",
        "obj",
        "removeFromCache",
        "invoke",
        "obj",
        "pE",
        "pE",
        "NotNull",
        "url",
        "NotNull",
        "pAuthenticator",
        "getPath",
        "invoke",
        "pAuthenticator",
        "startsWith",
        "url",
        "getPath",
        "pE",
        "pE",
        "authCacheValue",
        "Class",
        "forName",
        "authenticationInfo",
        "Class",
        "forName",
        "getPath",
        "authenticationInfo",
        "getDeclaredMethod",
        "getPath",
        "setAccessible",
        "removeFromCache",
        "authenticationInfo",
        "getDeclaredMethod",
        "removeFromCache",
        "setAccessible"
    ],
    "literals": [
        "\"squid:S3011\"",
        "\"cache\"",
        "\"hashtable\"",
        "\"unchecked\"",
        "\"sun.net.www.protocol.http.AuthCacheValue\"",
        "\"sun.net.www.protocol.http.AuthenticationInfo\"",
        "\"getPath\"",
        "\"removeFromCache\""
    ],
    "variables": [
        "authCacheValue",
        "getPath",
        "removeFromCache"
    ],
    "comments": [
        "Wir verwenden hier reflections -> setAccessible call ist notwendig",
        "Cast auf HashMap um an die Authenticators zu kommen"
    ],
    "docstrings": [
        "* @author m.kaspera, 30.11.2021",
        "* Leert den Base Java Authentication cache für eine gegebene URL, es werden nur Einträge entfernt, die der URL und dem Pfad entsprechen.\n   * Dies muss getan werden, da JGit bei NONE Authentifizierung davon ausgeht, dass kein Auth Header mitgegeben wird. Gibt es im besagten Cache aber einen Eintrag für die\n   * URL, so wird der Auth Header gesetzt und JGit meint, es bräuchte keine Authentifizierung, weshalb der nächste Request fehlschlagen kann\n   *\n   * @param pURL URL, für die die Cache Einträge entfernt werden sollen"
    ],
    "functions": [
        "ClearHttpCacheHandler",
        "clearCache",
        "_removeFromCache",
        "_isPathEqual",
        "_populateMethodCalls"
    ],
    "classes": [
        "ClearHttpCacheHandler"
    ]
}