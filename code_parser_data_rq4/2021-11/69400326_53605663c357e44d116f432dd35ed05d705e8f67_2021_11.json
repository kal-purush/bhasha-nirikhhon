{
    "identifiers": [
        "io",
        "confluent",
        "ksql",
        "rest",
        "integration",
        "io",
        "confluent",
        "ksql",
        "rest",
        "integration",
        "HighAvailabilityTestUtil",
        "extractQueryId",
        "io",
        "confluent",
        "ksql",
        "rest",
        "integration",
        "HighAvailabilityTestUtil",
        "makeAdminRequest",
        "io",
        "confluent",
        "ksql",
        "rest",
        "integration",
        "HighAvailabilityTestUtil",
        "makeAdminRequestWithResponse",
        "io",
        "confluent",
        "ksql",
        "rest",
        "integration",
        "HighAvailabilityTestUtil",
        "waitForClusterToBeDiscovered",
        "io",
        "confluent",
        "ksql",
        "rest",
        "integration",
        "HighAvailabilityTestUtil",
        "waitForRemoteServerToChangeStatus",
        "io",
        "confluent",
        "ksql",
        "rest",
        "integration",
        "HighAvailabilityTestUtil",
        "waitForStreamsMetadataToInitialize",
        "io",
        "confluent",
        "ksql",
        "util",
        "KsqlConfig",
        "KSQL_QUERY_PULL_CONSISTENCY_OFFSET_VECTOR_ENABLED",
        "io",
        "confluent",
        "ksql",
        "util",
        "KsqlConfig",
        "KSQL_STREAMS_PREFIX",
        "org",
        "apache",
        "kafka",
        "streams",
        "StreamsConfig",
        "CONSUMER_PREFIX",
        "org",
        "hamcrest",
        "MatcherAssert",
        "assertThat",
        "org",
        "hamcrest",
        "Matchers",
        "containsInAnyOrder",
        "org",
        "hamcrest",
        "Matchers",
        "hasSize",
        "org",
        "hamcrest",
        "Matchers",
        "org",
        "hamcrest",
        "Matchers",
        "com",
        "google",
        "common",
        "collect",
        "ImmutableList",
        "com",
        "google",
        "common",
        "collect",
        "ImmutableMap",
        "io",
        "confluent",
        "common",
        "utils",
        "IntegrationTest",
        "io",
        "confluent",
        "ksql",
        "api",
        "auth",
        "AuthenticationPlugin",
        "io",
        "confluent",
        "ksql",
        "integration",
        "IntegrationTestHarness",
        "io",
        "confluent",
        "ksql",
        "integration",
        "Retry",
        "io",
        "confluent",
        "ksql",
        "name",
        "ColumnName",
        "io",
        "confluent",
        "ksql",
        "rest",
        "client",
        "BasicCredentials",
        "io",
        "confluent",
        "ksql",
        "rest",
        "client",
        "KsqlRestClient",
        "io",
        "confluent",
        "ksql",
        "rest",
        "client",
        "RestResponse",
        "io",
        "confluent",
        "ksql",
        "rest",
        "entity",
        "ActiveStandbyEntity",
        "io",
        "confluent",
        "ksql",
        "rest",
        "entity",
        "ClusterStatusResponse",
        "io",
        "confluent",
        "ksql",
        "rest",
        "entity",
        "KsqlEntity",
        "io",
        "confluent",
        "ksql",
        "rest",
        "entity",
        "KsqlHostInfoEntity",
        "io",
        "confluent",
        "ksql",
        "rest",
        "entity",
        "StreamedRow",
        "io",
        "confluent",
        "ksql",
        "rest",
        "integration",
        "FaultyKafkaConsumer",
        "FaultyKafkaConsumer0",
        "io",
        "confluent",
        "ksql",
        "rest",
        "integration",
        "FaultyKafkaConsumer",
        "FaultyKafkaConsumer1",
        "io",
        "confluent",
        "ksql",
        "rest",
        "integration",
        "FaultyKafkaConsumer",
        "FaultyKafkaConsumer2",
        "io",
        "confluent",
        "ksql",
        "rest",
        "integration",
        "HighAvailabilityTestUtil",
        "Shutoffs",
        "io",
        "confluent",
        "ksql",
        "rest",
        "server",
        "KsqlRestConfig",
        "io",
        "confluent",
        "ksql",
        "rest",
        "server",
        "TestKsqlRestApp",
        "io",
        "confluent",
        "ksql",
        "rest",
        "server",
        "utils",
        "TestUtils",
        "io",
        "confluent",
        "ksql",
        "schema",
        "ksql",
        "LogicalSchema",
        "io",
        "confluent",
        "ksql",
        "schema",
        "ksql",
        "PhysicalSchema",
        "io",
        "confluent",
        "ksql",
        "schema",
        "ksql",
        "types",
        "SqlTypes",
        "io",
        "confluent",
        "ksql",
        "serde",
        "FormatFactory",
        "io",
        "confluent",
        "ksql",
        "serde",
        "SerdeFeatures",
        "io",
        "confluent",
        "ksql",
        "test",
        "util",
        "KsqlIdentifierTestUtil",
        "io",
        "confluent",
        "ksql",
        "test",
        "util",
        "KsqlTestFolder",
        "io",
        "confluent",
        "ksql",
        "test",
        "util",
        "TestBasicJaasConfig",
        "io",
        "confluent",
        "ksql",
        "util",
        "ConsistencyOffsetVector",
        "io",
        "confluent",
        "ksql",
        "util",
        "KsqlConfig",
        "io",
        "confluent",
        "ksql",
        "util",
        "KsqlRequestConfig",
        "io",
        "confluent",
        "ksql",
        "util",
        "UserDataProvider",
        "io",
        "vertx",
        "core",
        "WorkerExecutor",
        "io",
        "vertx",
        "ext",
        "web",
        "RoutingContext",
        "java",
        "io",
        "java",
        "security",
        "Principal",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Optional",
        "java",
        "util",
        "concurrent",
        "CompletableFuture",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "java",
        "util",
        "concurrent",
        "atomic",
        "AtomicLong",
        "java",
        "util",
        "stream",
        "Collectors",
        "kafka",
        "zookeeper",
        "ZooKeeperClientException",
        "org",
        "apache",
        "kafka",
        "clients",
        "consumer",
        "ConsumerConfig",
        "org",
        "apache",
        "kafka",
        "streams",
        "StreamsConfig",
        "org",
        "checkerframework",
        "checker",
        "units",
        "qual",
        "C",
        "org",
        "junit",
        "After",
        "org",
        "junit",
        "Before",
        "org",
        "junit",
        "BeforeClass",
        "org",
        "junit",
        "ClassRule",
        "org",
        "junit",
        "Rule",
        "org",
        "junit",
        "Test",
        "org",
        "junit",
        "experimental",
        "categories",
        "Category",
        "org",
        "junit",
        "rules",
        "RuleChain",
        "org",
        "junit",
        "rules",
        "TemporaryFolder",
        "org",
        "junit",
        "rules",
        "Timeout",
        "org",
        "junit",
        "runner",
        "RunWith",
        "org",
        "mockito",
        "junit",
        "MockitoJUnitRunner",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "SuppressWarnings",
        "Category",
        "RunWith",
        "LOG",
        "LoggerFactory",
        "getLogger",
        "USER_TOPIC",
        "USERS_STREAM",
        "USER_PROVIDER",
        "HEADER",
        "TEST_HARNESS",
        "IntegrationTestHarness",
        "build",
        "TMP",
        "KsqlTestFolder",
        "temporaryFolder",
        "BASE_TIME",
        "KEY0",
        "USER_PROVIDER",
        "getStringKey",
        "KEY1",
        "USER_PROVIDER",
        "getStringKey",
        "KEY2",
        "USER_PROVIDER",
        "getStringKey",
        "KEY3",
        "USER_PROVIDER",
        "getStringKey",
        "KEY4",
        "USER_PROVIDER",
        "getStringKey",
        "timestampSupplier",
        "BASE_TIME",
        "output",
        "queryId",
        "sqlTableScan",
        "topic",
        "AGGREGATE_SCHEMA",
        "PhysicalSchema",
        "LogicalSchema",
        "builder",
        "keyColumn",
        "ColumnName",
        "of",
        "SqlTypes",
        "STRING",
        "valueColumn",
        "ColumnName",
        "of",
        "SqlTypes",
        "BIGINT",
        "build",
        "SerdeFeatures",
        "of",
        "SerdeFeatures",
        "of",
        "PROPS_JAAS_REALM",
        "KSQL_RESOURCE",
        "USER_WITH_ACCESS",
        "USER_WITH_ACCESS_PWD",
        "USER_CREDS",
        "Optional",
        "of",
        "BasicCredentials",
        "of",
        "USER_WITH_ACCESS",
        "USER_WITH_ACCESS_PWD",
        "ClassRule",
        "JAAS_CONFIG",
        "TestBasicJaasConfig",
        "builder",
        "PROPS_JAAS_REALM",
        "addUser",
        "USER_WITH_ACCESS",
        "USER_WITH_ACCESS_PWD",
        "KSQL_RESOURCE",
        "build",
        "COMMON_CONFIG",
        "ImmutableMap",
        "builder",
        "put",
        "KSQL_STREAMS_PREFIX",
        "StreamsConfig",
        "NUM_STREAM_THREADS_CONFIG",
        "put",
        "KsqlRestConfig",
        "KSQL_HEARTBEAT_ENABLE_CONFIG",
        "put",
        "KsqlRestConfig",
        "KSQL_HEARTBEAT_SEND_INTERVAL_MS_CONFIG",
        "put",
        "KsqlRestConfig",
        "KSQL_HEARTBEAT_CHECK_INTERVAL_MS_CONFIG",
        "put",
        "KsqlRestConfig",
        "KSQL_HEARTBEAT_DISCOVER_CLUSTER_MS_CONFIG",
        "put",
        "KsqlRestConfig",
        "KSQL_LAG_REPORTING_ENABLE_CONFIG",
        "put",
        "KsqlRestConfig",
        "KSQL_LAG_REPORTING_SEND_INTERVAL_MS_CONFIG",
        "put",
        "KsqlConfig",
        "KSQL_QUERY_PULL_ENABLE_STANDBY_READS",
        "put",
        "KsqlConfig",
        "KSQL_STREAMS_PREFIX",
        "put",
        "KsqlConfig",
        "KSQL_SHUTDOWN_TIMEOUT_MS_CONFIG",
        "put",
        "KsqlRestConfig",
        "AUTHENTICATION_METHOD_CONFIG",
        "KsqlRestConfig",
        "AUTHENTICATION_METHOD_BASIC",
        "put",
        "KsqlRestConfig",
        "AUTHENTICATION_REALM_CONFIG",
        "PROPS_JAAS_REALM",
        "put",
        "KsqlRestConfig",
        "AUTHENTICATION_ROLES_CONFIG",
        "KSQL_RESOURCE",
        "put",
        "KsqlRestConfig",
        "AUTHENTICATION_SKIP_PATHS_CONFIG",
        "put",
        "KsqlRestConfig",
        "KSQL_AUTHENTICATION_PLUGIN_CLASS",
        "put",
        "KsqlConfig",
        "KSQL_QUERY_PULL_CONSISTENCY_OFFSET_VECTOR_ENABLED",
        "put",
        "KsqlConfig",
        "KSQL_QUERY_PULL_TABLE_SCAN_ENABLED",
        "build",
        "APP_SHUTOFFS_0",
        "APP_SHUTOFFS_1",
        "APP_SHUTOFFS_2",
        "INT_PORT_0",
        "TestUtils",
        "findFreeLocalPort",
        "INT_PORT_1",
        "TestUtils",
        "findFreeLocalPort",
        "INT_PORT_2",
        "TestUtils",
        "findFreeLocalPort",
        "HOST0",
        "INT_PORT_0",
        "HOST1",
        "INT_PORT_1",
        "HOST2",
        "INT_PORT_2",
        "Rule",
        "REST_APP_0",
        "TestKsqlRestApp",
        "builder",
        "TEST_HARNESS",
        "kafkaBootstrapServers",
        "withProperty",
        "KSQL_STREAMS_PREFIX",
        "StreamsConfig",
        "STATE_DIR_CONFIG",
        "getNewStateDir",
        "withProperty",
        "KsqlRestConfig",
        "LISTENERS_CONFIG",
        "withProperty",
        "KsqlRestConfig",
        "INTERNAL_LISTENER_CONFIG",
        "INT_PORT_0",
        "withProperty",
        "KsqlRestConfig",
        "ADVERTISED_LISTENER_CONFIG",
        "INT_PORT_0",
        "withFaultyKsqlClient",
        "APP_SHUTOFFS_0",
        "getKsqlOutgoing",
        "withProperty",
        "KSQL_STREAMS_PREFIX",
        "CONSUMER_PREFIX",
        "ConsumerConfig",
        "INTERCEPTOR_CLASSES_CONFIG",
        "getName",
        "withProperties",
        "COMMON_CONFIG",
        "build",
        "Rule",
        "REST_APP_1",
        "TestKsqlRestApp",
        "builder",
        "TEST_HARNESS",
        "kafkaBootstrapServers",
        "withProperty",
        "KSQL_STREAMS_PREFIX",
        "StreamsConfig",
        "STATE_DIR_CONFIG",
        "getNewStateDir",
        "withProperty",
        "KsqlRestConfig",
        "LISTENERS_CONFIG",
        "withProperty",
        "KsqlRestConfig",
        "INTERNAL_LISTENER_CONFIG",
        "INT_PORT_1",
        "withProperty",
        "KsqlRestConfig",
        "ADVERTISED_LISTENER_CONFIG",
        "INT_PORT_1",
        "withFaultyKsqlClient",
        "APP_SHUTOFFS_1",
        "getKsqlOutgoing",
        "withProperty",
        "KSQL_STREAMS_PREFIX",
        "CONSUMER_PREFIX",
        "ConsumerConfig",
        "INTERCEPTOR_CLASSES_CONFIG",
        "getName",
        "withProperties",
        "COMMON_CONFIG",
        "build",
        "Rule",
        "REST_APP_2",
        "TestKsqlRestApp",
        "builder",
        "TEST_HARNESS",
        "kafkaBootstrapServers",
        "withProperty",
        "KSQL_STREAMS_PREFIX",
        "StreamsConfig",
        "STATE_DIR_CONFIG",
        "getNewStateDir",
        "withProperty",
        "KsqlRestConfig",
        "LISTENERS_CONFIG",
        "withProperty",
        "KsqlRestConfig",
        "INTERNAL_LISTENER_CONFIG",
        "INT_PORT_2",
        "withProperty",
        "KsqlRestConfig",
        "ADVERTISED_LISTENER_CONFIG",
        "INT_PORT_2",
        "withFaultyKsqlClient",
        "APP_SHUTOFFS_2",
        "getKsqlOutgoing",
        "withProperty",
        "KSQL_STREAMS_PREFIX",
        "CONSUMER_PREFIX",
        "ConsumerConfig",
        "INTERCEPTOR_CLASSES_CONFIG",
        "getName",
        "withProperties",
        "COMMON_CONFIG",
        "build",
        "TEST_APP_0",
        "HOST0",
        "REST_APP_0",
        "APP_SHUTOFFS_0",
        "TEST_APP_1",
        "HOST1",
        "REST_APP_1",
        "APP_SHUTOFFS_1",
        "TEST_APP_2",
        "HOST2",
        "REST_APP_2",
        "APP_SHUTOFFS_2",
        "ClassRule",
        "CHAIN",
        "RuleChain",
        "outerRule",
        "Retry",
        "of",
        "TimeUnit",
        "SECONDS",
        "around",
        "TEST_HARNESS",
        "around",
        "JAAS_CONFIG",
        "around",
        "TMP",
        "Rule",
        "timeout",
        "Timeout",
        "builder",
        "withTimeout",
        "TimeUnit",
        "MINUTES",
        "withLookingForStuckThread",
        "build",
        "BeforeClass",
        "FaultyKafkaConsumer0",
        "setPauseOffset",
        "APP_SHUTOFFS_0",
        "getKafkaPauseOffset",
        "FaultyKafkaConsumer1",
        "setPauseOffset",
        "APP_SHUTOFFS_1",
        "getKafkaPauseOffset",
        "FaultyKafkaConsumer2",
        "setPauseOffset",
        "APP_SHUTOFFS_2",
        "getKafkaPauseOffset",
        "Before",
        "topic",
        "USER_TOPIC",
        "KsqlIdentifierTestUtil",
        "uniqueIdentifierName",
        "TEST_HARNESS",
        "ensureTopics",
        "topic",
        "TEST_HARNESS",
        "produceRows",
        "topic",
        "USER_PROVIDER",
        "FormatFactory",
        "KAFKA",
        "FormatFactory",
        "timestampSupplier",
        "getAndIncrement",
        "makeAdminRequest",
        "REST_APP_0",
        "USERS_STREAM",
        "USER_PROVIDER",
        "ksqlSchemaString",
        "topic",
        "USER_CREDS",
        "output",
        "KsqlIdentifierTestUtil",
        "uniqueIdentifierName",
        "sqlTableScan",
        "output",
        "res",
        "makeAdminRequestWithResponse",
        "REST_APP_0",
        "output",
        "USER_PROVIDER",
        "key",
        "USERS_STREAM",
        "USER_PROVIDER",
        "key",
        "USER_CREDS",
        "queryId",
        "extractQueryId",
        "res",
        "get",
        "toString",
        "queryId",
        "queryId",
        "substring",
        "queryId",
        "length",
        "waitForTableRows",
        "waitForStreamsMetadataToInitialize",
        "REST_APP_0",
        "ImmutableList",
        "of",
        "HOST0",
        "HOST1",
        "HOST2",
        "USER_CREDS",
        "After",
        "REST_APP_0",
        "closePersistentQueries",
        "USER_CREDS",
        "REST_APP_0",
        "dropSourcesExcept",
        "USER_CREDS",
        "APP_SHUTOFFS_0",
        "reset",
        "APP_SHUTOFFS_1",
        "reset",
        "APP_SHUTOFFS_2",
        "reset",
        "SuppressWarnings",
        "Test",
        "clusterFormation",
        "findClusterFormation",
        "TEST_APP_0",
        "TEST_APP_1",
        "TEST_APP_2",
        "waitForClusterToBeDiscovered",
        "clusterFormation",
        "router",
        "getApp",
        "USER_CREDS",
        "waitForRemoteServerToChangeStatus",
        "clusterFormation",
        "router",
        "getApp",
        "clusterFormation",
        "router",
        "getHost",
        "HighAvailabilityTestUtil",
        "lagsReported",
        "USER_CREDS",
        "waitForRemoteServerToChangeStatus",
        "clusterFormation",
        "router",
        "getApp",
        "clusterFormation",
        "active",
        "getHost",
        "HighAvailabilityTestUtil",
        "remoteServerIsUp",
        "USER_CREDS",
        "waitForRemoteServerToChangeStatus",
        "clusterFormation",
        "router",
        "getApp",
        "clusterFormation",
        "standBy",
        "getHost",
        "HighAvailabilityTestUtil",
        "remoteServerIsUp",
        "USER_CREDS",
        "restClient",
        "clusterFormation",
        "router",
        "getApp",
        "buildKsqlClient",
        "USER_CREDS",
        "restClient",
        "setProperty",
        "KSQL_QUERY_PULL_CONSISTENCY_OFFSET_VECTOR_ENABLED",
        "offsetVector",
        "offsetVector",
        "update",
        "res",
        "restClient",
        "makeQueryRequest",
        "sqlTableScan",
        "ImmutableMap",
        "of",
        "KsqlRequestConfig",
        "KSQL_REQUEST_QUERY_PULL_CONSISTENCY_OFFSET_VECTOR",
        "rows",
        "res",
        "getResponse",
        "values",
        "rows",
        "stream",
        "skip",
        "HEADER",
        "sr",
        "sr",
        "getRow",
        "isPresent",
        "sr",
        "sr",
        "getRow",
        "get",
        "getColumns",
        "collect",
        "Collectors",
        "toList",
        "assertThat",
        "rows",
        "hasSize",
        "HEADER",
        "assertThat",
        "rows",
        "get",
        "HEADER",
        "getConsistencyToken",
        "Optional",
        "empty",
        "receivedVector",
        "ConsistencyOffsetVector",
        "deserialize",
        "rows",
        "get",
        "HEADER",
        "getConsistencyToken",
        "get",
        "getConsistencyToken",
        "expectedVector",
        "expectedVector",
        "setVersion",
        "expectedVector",
        "addTopicOffsets",
        "ImmutableMap",
        "of",
        "assertThat",
        "receivedVector",
        "expectedVector",
        "assertThat",
        "values",
        "containsInAnyOrder",
        "ImmutableList",
        "of",
        "KEY0",
        "ImmutableList",
        "of",
        "KEY1",
        "ImmutableList",
        "of",
        "KEY2",
        "ImmutableList",
        "of",
        "KEY3",
        "ImmutableList",
        "of",
        "KEY4",
        "testApp0",
        "testApp1",
        "testApp2",
        "clusterFormation",
        "clusterStatusResponse",
        "HighAvailabilityTestUtil",
        "sendClusterStatusRequest",
        "testApp0",
        "getApp",
        "USER_CREDS",
        "entity0",
        "clusterStatusResponse",
        "getClusterStatus",
        "get",
        "testApp0",
        "getHost",
        "getActiveStandbyPerQuery",
        "get",
        "queryId",
        "entity1",
        "clusterStatusResponse",
        "getClusterStatus",
        "get",
        "testApp1",
        "getHost",
        "getActiveStandbyPerQuery",
        "get",
        "queryId",
        "entity0",
        "getActiveStores",
        "isEmpty",
        "entity0",
        "getActivePartitions",
        "isEmpty",
        "clusterFormation",
        "setActive",
        "testApp0",
        "entity1",
        "getActiveStores",
        "isEmpty",
        "entity1",
        "getActivePartitions",
        "isEmpty",
        "clusterFormation",
        "setActive",
        "testApp1",
        "clusterFormation",
        "setActive",
        "testApp2",
        "entity0",
        "getStandByStores",
        "isEmpty",
        "entity0",
        "getStandByPartitions",
        "isEmpty",
        "clusterFormation",
        "setStandBy",
        "testApp0",
        "entity1",
        "getStandByStores",
        "isEmpty",
        "entity1",
        "getStandByPartitions",
        "isEmpty",
        "clusterFormation",
        "setStandBy",
        "testApp1",
        "clusterFormation",
        "setStandBy",
        "testApp2",
        "entity0",
        "getStandByStores",
        "isEmpty",
        "entity0",
        "getActiveStores",
        "isEmpty",
        "clusterFormation",
        "setRouter",
        "testApp0",
        "entity1",
        "getStandByStores",
        "isEmpty",
        "entity1",
        "getActiveStores",
        "isEmpty",
        "clusterFormation",
        "setRouter",
        "testApp1",
        "clusterFormation",
        "setRouter",
        "testApp2",
        "clusterFormation",
        "active",
        "standBy",
        "router",
        "active",
        "active",
        "active",
        "standBy",
        "standBy",
        "standBy",
        "router",
        "router",
        "router",
        "append",
        "append",
        "active",
        "getHost",
        "append",
        "append",
        "standBy",
        "getHost",
        "append",
        "append",
        "router",
        "getHost",
        "toString",
        "TEST_HARNESS",
        "verifyAvailableUniqueRows",
        "output",
        "toUpperCase",
        "USER_PROVIDER",
        "data",
        "size",
        "FormatFactory",
        "KAFKA",
        "FormatFactory",
        "AGGREGATE_SCHEMA",
        "TMP",
        "newFolder",
        "getAbsolutePath",
        "e",
        "e",
        "host",
        "app",
        "shutoffs",
        "host",
        "app",
        "shutoffs",
        "host",
        "host",
        "app",
        "app",
        "shutoffs",
        "shutoffs",
        "host",
        "app",
        "shutoffs",
        "Override",
        "Override",
        "routingContext",
        "workerExecutor",
        "CompletableFuture",
        "completedFuture"
    ],
    "literals": [
        "\"OptionalGetWithoutIsPresent\"",
        "\"user_topic_\"",
        "\"users\"",
        "\"USERID\"",
        "\"COUNT\"",
        "\"KsqlServer-Props\"",
        "\"ksql-user\"",
        "\"harry\"",
        "\"changeme\"",
        "\"num.standby.replicas\"",
        "\"/heartbeat,/lag\"",
        "\"localhost\"",
        "\"localhost\"",
        "\"localhost\"",
        "\"http://localhost:0\"",
        "\"http://localhost:\"",
        "\"http://localhost:\"",
        "\"http://localhost:0\"",
        "\"http://localhost:\"",
        "\"http://localhost:\"",
        "\"http://localhost:0\"",
        "\"http://localhost:\"",
        "\"http://localhost:\"",
        "\"CREATE STREAM \"",
        "\" (\"",
        "\")\"",
        "\" WITH (\"",
        "\"   kafka_topic='\"",
        "\"', \"",
        "\"   value_format='JSON');\"",
        "\"SELECT * FROM \"",
        "\";\"",
        "\"CREATE TABLE \"",
        "\" AS\"",
        "\" SELECT \"",
        "\", COUNT(1) AS COUNT FROM \"",
        "\" GROUP BY \"",
        "\";\"",
        "\"unchecked\"",
        "\"bla\"",
        "\"\"",
        "\"dummy\"",
        "\"Active = \"",
        "\", Standby = \"",
        "\", Router = \"",
        "\"Failed to create new state dir\""
    ],
    "variables": [
        "output",
        "queryId",
        "sqlTableScan",
        "topic",
        "active",
        "standBy",
        "router",
        "host",
        "app",
        "shutoffs"
    ],
    "comments": [
        "In order to whitelist the above paths for auth, we need to install a noop authentication",
        "plugin.  In practice, these are internal paths so we're not interested in testing auth",
        "for them in these tests.",
        "Create topic with 1 partition to control who is active and standby",
        "Create stream",
        "Create table",
        "Given:",
        "When:",
        "Then:",
        "find active",
        "find standby",
        "find router",
        "AuthenticationPlugin which never returns a Principal"
    ],
    "docstrings": [
        "* Copyright 2020 Confluent Inc.\n *\n * Licensed under the Confluent Community License (the \"License\"); you may not use\n * this file except in compliance with the License.  You may obtain a copy of the\n * License at\n *\n * http://www.confluent.io/confluent-community-license\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations under the License.",
        "* Test to ensure pull queries route across multiple KSQL nodes correctly.\n *\n * <p>For tests on general syntax and handled see RestQueryTranslationTest's\n * materialized-aggregate-static-queries.json"
    ],
    "functions": [
        "setUpClass",
        "setUp",
        "cleanUp",
        "shouldPassConsistencyTokenInFanOutTableScan",
        "ClusterFormation",
        "findClusterFormation",
        "ClusterFormation",
        "setActive",
        "setStandBy",
        "setRouter",
        "toString",
        "waitForTableRows",
        "getNewStateDir",
        "TestApp",
        "KsqlHostInfoEntity",
        "getHost",
        "TestKsqlRestApp",
        "getApp",
        "Shutoffs",
        "getShutoffs",
        "configure",
        "handleAuth"
    ],
    "classes": [
        "PullQueryConsistencyFunctionalTest",
        "ClusterFormation",
        "TestApp",
        "NoAuthPlugin"
    ]
}