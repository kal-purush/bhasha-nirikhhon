{
    "identifiers": [
        "typing",
        "Optional",
        "sqlfluff",
        "core",
        "parser",
        "SymbolSegment",
        "sqlfluff",
        "core",
        "parser",
        "segments",
        "BaseSegment",
        "sqlfluff",
        "core",
        "parser",
        "segments",
        "raw",
        "NewlineSegment",
        "sqlfluff",
        "core",
        "rules",
        "BaseRule",
        "LintResult",
        "LintFix",
        "RuleContext",
        "sqlfluff",
        "core",
        "rules",
        "doc_decorators",
        "document_configuration",
        "document_fix_compatible",
        "document_configuration",
        "document_fix_compatible",
        "BaseRule",
        "context",
        "RuleContext",
        "Optional",
        "LintResult",
        "context",
        "segment",
        "name",
        "context",
        "segment",
        "segment",
        "context",
        "raw_stack",
        "segment",
        "name",
        "whitespace_set",
        "whitespace_deletions",
        "append",
        "segment",
        "segment",
        "LintFix",
        "semicolon_newline",
        "whitespace_deletions",
        "fixes",
        "extend",
        "LintFix",
        "d",
        "d",
        "whitespace_deletions",
        "segment",
        "segment",
        "whitespace_deletions",
        "segment",
        "is_type",
        "segment",
        "segment",
        "whitespace_deletions",
        "segment",
        "is_type",
        "fixes",
        "extend",
        "LintFix",
        "d",
        "d",
        "non_newline_deletions",
        "len",
        "newline_deletions",
        "fixes",
        "append",
        "LintFix",
        "context",
        "segment",
        "NewlineSegment",
        "len",
        "newline_deletions",
        "fixes",
        "extend",
        "LintFix",
        "d",
        "d",
        "newline_deletions",
        "fixes",
        "LintResult",
        "anchor",
        "anchor_segment",
        "fixes",
        "fixes",
        "require_final_semicolon",
        "len",
        "filter_meta",
        "context",
        "siblings_post",
        "len",
        "context",
        "segment",
        "segments",
        "context",
        "segment",
        "is_meta",
        "len",
        "context",
        "segment",
        "pos_marker",
        "templated_file",
        "templated_str",
        "context",
        "segment",
        "pos_marker",
        "templated_slice",
        "stop",
        "file_len",
        "pos",
        "BaseSegment",
        "context",
        "raw_stack",
        "complete_stack",
        "append",
        "context",
        "segment",
        "context",
        "segment",
        "segment",
        "complete_stack",
        "segment",
        "name",
        "segment",
        "name",
        "whitespace_set",
        "segment",
        "is_meta",
        "segment",
        "semi_colon_exist_flag",
        "semicolon_newline",
        "LintFix",
        "anchor_segment",
        "anchor_segment",
        "SymbolSegment",
        "raw",
        "name",
        "LintFix",
        "anchor_segment",
        "anchor_segment",
        "NewlineSegment",
        "SymbolSegment",
        "raw",
        "name",
        "LintResult",
        "anchor",
        "anchor_segment",
        "fixes",
        "fixes"
    ],
    "literals": [
        "\"semicolon_newline\"",
        "\"require_final_semicolon\"",
        "\"newline\"",
        "\"whitespace\"",
        "\"semicolon\"",
        "\"delete\"",
        "\"newline\"",
        "\"newline\"",
        "\"delete\"",
        "\"create\"",
        "\"delete\"",
        "\"semicolon\"",
        "\"edit\"",
        "\";\"",
        "\"symbol\"",
        "\"semicolon\"",
        "\"edit\"",
        "\";\"",
        "\"symbol\"",
        "\"semicolon\""
    ],
    "variables": [
        "config_keywords",
        "semicolon_newline",
        "require_final_semicolon",
        "whitespace_set",
        "anchor_segment",
        "whitespace_deletions",
        "anchor_segment",
        "fixes",
        "newline_deletions",
        "non_newline_deletions",
        "file_len",
        "pos",
        "complete_stack",
        "anchor_segment",
        "semi_colon_exist_flag",
        "semi_colon_exist_flag",
        "anchor_segment",
        "fixes",
        "fixes"
    ],
    "comments": [
        "Config type hints",
        "First we can simply handle the case of existing semi-colon alignment.",
        "Locate semicolon and iterate back over the raw stack to find",
        "whitespace between the semi-colon and the end of the preceding statement.",
        "Semi-colon on same line.",
        "If whitespace is found then delete.",
        "Semi-colon on new line.",
        "Remove pre-semi-colon whitespace.",
        "Create missing newline.",
        "Remove excess newlines.",
        "SQL does not require a final trailing semi-colon, however",
        "this rule looks to enforce that it is there.",
        "Therefore we first locate the end of the file.",
        "This can only fail on the last segment",
        "This can only fail on the last base segment",
        "We can't fail on a meta segment",
        "So this looks like the end of the file, but we",
        "need to check that each parent segment is also the last.",
        "We do this with reference to the templated file, because it's",
        "the best we can do given the information available.",
        "Does the length of the file equal the end of the templated position?",
        "Include current segment for complete stack.",
        "Iterate backwards over complete stack to find",
        "if the final semi-colon is already present.",
        "type: ignore",
        "Create the final semi-colon if it does not yet exist."
    ],
    "docstrings": [
        "\"\"\"Implementation of Rule L052.\"\"\"",
        "\"\"\"Statements must end with a semi-colon.\n\n    | **Anti-pattern**\n    | A statement is not immediately terminated with a semi-colon, the • represents space.\n\n    .. code-block:: sql\n       :force:\n\n        SELECT\n            a\n        FROM foo\n\n        ;\n\n        SELECT\n            b\n        FROM bar••;\n\n    | **Best practice**\n    | Immediately terminate the statement with a semi-colon.\n\n    .. code-block:: sql\n       :force:\n\n        SELECT\n            a\n        FROM foo;\n    \"\"\"",
        "\"\"\"Statements must end with a semi-colon.\"\"\""
    ],
    "functions": [
        "_eval"
    ],
    "classes": [
        "Rule_L052"
    ]
}