{
    "identifiers": [
        "color",
        "Config",
        "IManifest",
        "cli",
        "spawn",
        "fs",
        "HTTP",
        "_",
        "path",
        "extract",
        "ls",
        "wait",
        "options",
        "path",
        "path",
        "cli",
        "fs",
        "dirOrFile",
        "dirOrFile",
        "dirOrFile",
        "versions",
        "cli",
        "versions",
        "version",
        "version",
        "versions",
        "pinToVersion",
        "pinToVersion",
        "fs",
        "path",
        "pinToVersion",
        "pinToVersion",
        "cli",
        "cli",
        "pinToVersion",
        "pinToVersion",
        "cli",
        "cli",
        "cli",
        "manifest",
        "manifest",
        "manifest",
        "manifest",
        "reason",
        "cli",
        "reason",
        "manifest",
        "cli",
        "cli",
        "cli",
        "HTTP",
        "require",
        "cli",
        "http",
        "url",
        "body",
        "body",
        "body",
        "error",
        "error",
        "error",
        "output",
        "manifest",
        "channel",
        "filesize",
        "n",
        "require",
        "n",
        "num",
        "suffix",
        "HTTP",
        "require",
        "manifest",
        "http",
        "gzUrl",
        "stream",
        "manifest",
        "extract",
        "stream",
        "baseDir",
        "output",
        "manifest",
        "cli",
        "parseInt",
        "stream",
        "_",
        "newStatus",
        "cli",
        "newStatus",
        "stream",
        "data",
        "current",
        "data",
        "updateStatus",
        "filesize",
        "current",
        "filesize",
        "total",
        "stream",
        "extraction",
        "manifest",
        "channel",
        "cli",
        "color",
        "color",
        "channel",
        "color",
        "channel",
        "path",
        "fs",
        "output",
        "output",
        "manifest",
        "channel",
        "version",
        "version",
        "instructions",
        "cli",
        "instructions",
        "path",
        "fs",
        "channelPath",
        "fs",
        "channelPath",
        "channel",
        "fs",
        "currentVersion",
        "matches",
        "matches",
        "error",
        "cli",
        "error",
        "bin",
        "platform",
        "arch",
        "folder",
        "folder",
        "s3SubDir",
        "s3SubDir",
        "s3SubDir",
        "s3SubDir",
        "path",
        "s3SubDir",
        "bin",
        "platform",
        "arch",
        "path",
        "fs",
        "channelPath",
        "cli",
        "require",
        "logChopper",
        "error",
        "cli",
        "error",
        "f",
        "fs",
        "f",
        "mtime",
        "path",
        "lastrunfile",
        "m",
        "m",
        "m",
        "m",
        "output",
        "cli",
        "msg",
        "cli",
        "msg",
        "output",
        "wait",
        "cli",
        "fs",
        "root",
        "ls",
        "root",
        "files",
        "f",
        "path",
        "f",
        "f",
        "mtime",
        "mtime",
        "mtime",
        "fs",
        "f",
        "p",
        "promises",
        "p",
        "error",
        "cli",
        "error",
        "path",
        "cli",
        "p",
        "fs",
        "p",
        "fs",
        "p",
        "error",
        "cli",
        "error",
        "cli",
        "_",
        "reject",
        "cli",
        "spawn",
        "process",
        "reject",
        "status",
        "status",
        "status",
        "error",
        "reject",
        "error",
        "version",
        "redirectedEnvVar",
        "binPathEnvVar",
        "bin",
        "version",
        "bin",
        "fs",
        "dst",
        "body",
        "binPathEnvVar",
        "bin",
        "redirectedEnvVar",
        "version",
        "bin",
        "fs",
        "dst",
        "fs",
        "dst",
        "body",
        "fs",
        "dst",
        "fs",
        "path",
        "fs",
        "version",
        "path",
        "fs",
        "error",
        "error",
        "fs",
        "fs",
        "error"
    ],
    "literals": [
        "'@oclif/color'",
        "'@oclif/core'",
        "'oclif'",
        "'cli-ux'",
        "'cross-spawn'",
        "'fs-extra'",
        "'http-call'",
        "'lodash'",
        "'path'",
        "'./tar'",
        "'./util'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'OCLIF_CLIENT_HOME'",
        "'client'",
        "'bin'",
        "${this.options.config.bin}.cmd",
        "Looking for locally installed versions at ${this.clientRoot}",
        "'bin'",
        "'current'",
        "'No locally installed versions found.'",
        "Found versions: \\n${versions.map(version => `     ${version}`).join('\\n')}\\n",
        "${version}",
        "'\\n'",
        "Version ${pinToVersion} not found in the locally installed versions.",
        "Version ${pinToVersion} is not already installed at ${this.clientRoot}.",
        "${this.options.config.name}: Updating CLI",
        "switching to existing version ${pinToVersion}",
        "Updating to an already installed version will not update the channel. If autoupdate is enabled, the CLI will eventually be updated back to ${this.channel}.",
        "${this.options.config.name}: Updating CLI",
        "'preupdate'",
        "${manifest.version}-${(manifest as any).sha}",
        "'done'",
        "'tidy'",
        "'update'",
        "'done'",
        "'http-call'",
        "'fetching manifest'",
        "'manifest'",
        "string",
        "'string'",
        "HTTP 403: Invalid channel ${this.channel}",
        "string",
        "string",
        "string",
        "'filesize'",
        "'array'",
        "${suffix}",
        "'http-call'",
        "'versioned'",
        "'gz'",
        "'baseDir'",
        "'content-length'",
        "string",
        "'data'",
        "${filesize(current)}/${filesize(total)}",
        "'stable'",
        "${this.options.config.name}: Updating CLI from ${color.green(this.currentVersion)} to ${color.green(this.updatedVersion)}${channel === 'stable' ? '' : ' (' + color.yellow(channel) + ')'}",
        "'stable'",
        "''",
        "' ('",
        "')'",
        "string",
        "string",
        "'UPDATE_INSTRUCTIONS'",
        "'not updatable'",
        "'HIDE_UPDATED_MESSAGE'",
        "'done'",
        "already on latest version: ${this.currentVersion}",
        "string",
        "'channel'",
        "'utf8'",
        "'stable'",
        "string",
        "'utf8'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "''",
        "''",
        "'/'",
        "${s3SubDir}/",
        "'channels'",
        "${bin}-${platform}-${arch}-buildmanifest",
        "'channel'",
        "'utf8'",
        "'log chop'",
        "'log-chopper'",
        "string",
        "'lastrun'",
        "waiting until ${m.toISOString()} to update",
        "'time to update'",
        "'bin'",
        "'current'",
        "'touching client at'",
        "'restarting CLI after update'",
        "'update'",
        "'inherit'",
        "'HIDE_UPDATED_MESSAGE'",
        "'1'",
        "'error'",
        "'close'",
        "string",
        "'BINPATH'",
        "'REDIRECTED'",
        "@echo off\nsetlocal enableextensions\nset ${redirectedEnvVar}=1\nset ${binPathEnvVar}=%~dp0${bin}\n\"%~dp0..\\\\${version}\\\\bin\\\\${bin}.cmd\" %*",
        "#!/usr/bin/env bash\nset -e\nget_script_dir () {\n  SOURCE=\"\\${BASH_SOURCE[0]}\"\n  # While $SOURCE is a symlink, resolve it\n  while [ -h \"$SOURCE\" ]; do\n    DIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" && pwd )\"\n    SOURCE=\"$( readlink \"$SOURCE\" )\"\n    # If $SOURCE was a relative symlink (so no \"/\" as prefix, need to resolve it relative to the symlink base directory\n    [[ $SOURCE != /* ]] && SOURCE=\"$DIR/$SOURCE\"\n  done\n  DIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" && pwd )\"\n  echo \"$DIR\"\n}\nDIR=$(get_script_dir)\n${binPathEnvVar}=\"\\$DIR/${bin}\" ${redirectedEnvVar}=1 \"$DIR/../${version}/bin/${bin}\" \"$@\"",
        "'current'",
        "./${version}",
        "'current'",
        "'EEXIST'"
    ],
    "variables": [
        "versions",
        "pinToVersion",
        "manifest",
        "reason",
        "http",
        "url",
        "manifest",
        "filesize",
        "num",
        "suffix",
        "http",
        "gzUrl",
        "stream",
        "baseDir",
        "extraction",
        "total",
        "current",
        "updateStatus",
        "output",
        "instructions",
        "channelPath",
        "channel",
        "currentVersion",
        "matches",
        "s3SubDir",
        "channelPath",
        "logChopper",
        "output",
        "lastrunfile",
        "m",
        "msg",
        "root",
        "files",
        "promises",
        "mtime",
        "p",
        "dst",
        "binPathEnvVar",
        "redirectedEnvVar",
        "body",
        "body"
    ],
    "comments": [
        "Do not show known non-local version folder names, bin and current.",
        "in case the content-type is not set, parse as a string",
        "this will happen if uploading without `oclif-dev publish`",
        "to-do: use cli.action.type",
        "if spinner action",
        "when autoupdating, wait until the CLI isn't active",
        "wait 1 minute",
        "removes any unused CLIs",
        "eslint-disable-line no-await-in-loop",
        "touch the client so it won't be tidied up right away",
        "eslint-disable no-useless-escape",
        "eslint-enable no-useless-escape",
        "for some reason the client directory is sometimes a file",
        "if so, this happens. Delete it and recreate"
    ],
    "docstrings": [],
    "functions": [
        "runUpdate",
        "fetchManifest",
        "downloadAndExtract",
        "update",
        "updateToExistingVersion",
        "skipUpdate",
        "determineChannel",
        "determineCurrentVersion",
        "s3ChannelManifestKey",
        "setChannel",
        "logChop",
        "mtime",
        "debounce",
        "tidy",
        "touch",
        "reexec",
        "createBin",
        "ensureClientDir"
    ],
    "classes": [
        "UpdateCli"
    ]
}