{
    "identifiers": [
        "PacketKind",
        "arg",
        "arg",
        "arg",
        "arg",
        "palette",
        "palette",
        "rec",
        "rec",
        "r",
        "r",
        "g",
        "g",
        "b",
        "b",
        "levels",
        "r",
        "levels",
        "g",
        "levels",
        "b",
        "col",
        "i",
        "i",
        "grey_level",
        "grey_level",
        "grey_level",
        "grey_level",
        "gry",
        "txt",
        "txt",
        "txt",
        "txt",
        "PacketKind",
        "len",
        "pkt",
        "pos",
        "pkt",
        "PacketKind",
        "pkt",
        "pkt",
        "pos",
        "pkt",
        "PacketKind",
        "pkt",
        "pos",
        "pos",
        "pkt",
        "pos",
        "len",
        "pkt",
        "PacketKind",
        "pkt",
        "next_char",
        "next_char",
        "pkt",
        "PacketKind",
        "pkt",
        "pkt",
        "next_char",
        "rgx",
        "match",
        "pkt",
        "PacketKind",
        "pkt",
        "match",
        "pkt",
        "PacketKind",
        "pkt",
        "pkt",
        "match",
        "match",
        "pkt",
        "PacketKind",
        "pkt",
        "PacketKind",
        "pkt",
        "match",
        "match",
        "rpos",
        "pkt",
        "next_char",
        "len",
        "pkt",
        "PacketKind",
        "pkt",
        "pkt",
        "PacketKind",
        "pkt",
        "pkt",
        "rgxG",
        "match",
        "pkt",
        "PacketKind",
        "pkt",
        "match",
        "pkt",
        "PacketKind",
        "pkt",
        "pkt",
        "match",
        "pkt",
        "PacketKind",
        "pkt",
        "match",
        "pkt",
        "PacketKind",
        "pkt",
        "pkt",
        "rgx",
        "match",
        "pkt",
        "PacketKind",
        "pkt",
        "pkt",
        "pkt",
        "PacketKind",
        "pkt",
        "match",
        "pkt",
        "match",
        "match",
        "rpos",
        "pkt",
        "txt",
        "txt",
        "packet",
        "PacketKind",
        "packet",
        "PacketKind",
        "packet",
        "PacketKind",
        "packet",
        "PacketKind",
        "packet",
        "PacketKind",
        "blocks",
        "packet",
        "packet",
        "PacketKind",
        "packet",
        "packet",
        "PacketKind",
        "blocks",
        "packet",
        "blocks",
        "pkt",
        "pkt",
        "pkt",
        "pkt",
        "sgr_cmds",
        "sgr_cmds",
        "parseInt",
        "sgr_cmd_str",
        "isNaN",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "sgr_cmds",
        "num",
        "sgr_cmds",
        "mode_cmd",
        "sgr_cmds",
        "parseInt",
        "sgr_cmds",
        "palette_index",
        "palette_index",
        "is_foreground",
        "palette_index",
        "palette_index",
        "mode_cmd",
        "sgr_cmds",
        "parseInt",
        "sgr_cmds",
        "parseInt",
        "sgr_cmds",
        "parseInt",
        "sgr_cmds",
        "r",
        "r",
        "g",
        "g",
        "b",
        "b",
        "r",
        "g",
        "b",
        "is_foreground",
        "c",
        "c",
        "fragment",
        "fragment",
        "txt",
        "txt",
        "fragment",
        "fragment",
        "fragment",
        "fragment",
        "fragment",
        "txt",
        "fragment",
        "fragment",
        "fragment",
        "styles",
        "fragment",
        "styles",
        "fragment",
        "styles",
        "fg",
        "styles",
        "fg",
        "bg",
        "styles",
        "bg",
        "fg",
        "fg",
        "classes",
        "fg",
        "styles",
        "fg",
        "bg",
        "bg",
        "classes",
        "bg",
        "styles",
        "bg",
        "classes",
        "class_string",
        "classes",
        "styles",
        "style_string",
        "styles",
        "style_string",
        "class_string",
        "txt",
        "pkt",
        "pkt",
        "parts",
        "parts",
        "pkt",
        "pkt",
        "result",
        "tmplObj",
        "subst",
        "tmplObj",
        "regexText",
        "wsrgx",
        "txt2",
        "tmplObj",
        "subst",
        "tmplObj",
        "regexText",
        "wsrgx",
        "txt2"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "'5.0.1'",
        "string",
        "''",
        "'ansi-black'",
        "'ansi-red'",
        "'ansi-green'",
        "'ansi-yellow'",
        "'ansi-blue'",
        "'ansi-magenta'",
        "'ansi-cyan'",
        "'ansi-white'",
        "'ansi-bright-black'",
        "'ansi-bright-red'",
        "'ansi-bright-green'",
        "'ansi-bright-yellow'",
        "'ansi-bright-blue'",
        "'ansi-bright-magenta'",
        "'ansi-bright-cyan'",
        "'ansi-bright-white'",
        "'truecolor'",
        "'truecolor'",
        "string",
        "string",
        "'&'",
        "'&amp;'",
        "'<'",
        "'&lt;'",
        "'>'",
        "'&gt;'",
        "'\"'",
        "'&quot;'",
        "\"'\"",
        "'&#x27;'",
        "string",
        "''",
        "''",
        "'\\x1B'",
        "''",
        "'['",
        "']'",
        "'['",
        "^                           # beginning of line\n                                                    #\n                                                    # First attempt\n                        (?:                         # legal sequence\n                          \\x1b\\[                      # CSI\n                          ([\\x3c-\\x3f]?)              # private-mode char\n                          ([\\d;]*)                    # any digits or semicolons\n                          ([\\x20-\\x2f]?               # an intermediate modifier\n                          [\\x40-\\x7e])                # the command\n                        )\n                        |                           # alternate (second attempt)\n                        (?:                         # illegal sequence\n                          \\x1b\\[                      # CSI\n                          [\\x20-\\x7e]*                # anything legal\n                          ([\\x00-\\x1f:])              # anything illegal\n                        )",
        "''",
        "'m'",
        "']'",
        "'8'",
        "';'",
        "(?:                         # legal sequence\n                          (\\x1b\\\\)                    # ESC \\\n                          |                           # alternate\n                          (\\x07)                      # BEL (what xterm did)\n                        )\n                        |                           # alternate (second attempt)\n                        (                           # illegal sequence\n                          [\\x00-\\x06]                 # anything illegal\n                          |                           # alternate\n                          [\\x08-\\x1a]                 # anything illegal\n                          |                           # alternate\n                          [\\x1c-\\x1f]                 # anything illegal\n                        )",
        "^                           # beginning of line\n                                                    #\n                        \\x1b\\]8;                    # OSC Hyperlink\n                        [\\x20-\\x3a\\x3c-\\x7e]*       # params (excluding ;)\n                        ;                           # end of params\n                        ([\\x21-\\x7e]{0,512})        # URL capture\n                        (?:                         # ST\n                          (?:\\x1b\\\\)                  # ESC \\\n                          |                           # alternate\n                          (?:\\x07)                    # BEL (what xterm did)\n                        )\n                        ([\\x20-\\x7e]+)              # TEXT capture\n                        \\x1b\\]8;;                   # OSC Hyperlink End\n                        (?:                         # ST\n                          (?:\\x1b\\\\)                  # ESC \\\n                          |                           # alternate\n                          (?:\\x07)                    # BEL (what xterm did)\n                        )",
        "string",
        "string",
        "string",
        "''",
        "';'",
        "'5'",
        "'2'",
        "'truecolor'",
        "string",
        "string",
        "string",
        "'font-weight:bold'",
        "'font-style:italic'",
        "'text-decoration:underline'",
        "color:rgb(${fg.rgb.join(',')})",
        "','",
        "background-color:rgb(${bg.rgb})",
        "'truecolor'",
        "${fg.class_name}-fg",
        "color:rgb(${fg.rgb.join(',')})",
        "','",
        "'truecolor'",
        "${bg.class_name}-bg",
        "background-color:rgb(${bg.rgb.join(',')})",
        "','",
        "''",
        "''",
        "class=\"${classes.join(' ')}\"",
        "' '",
        "style=\"${styles.join(';')}\"",
        "';'",
        "<span${style_string}${class_string}>${txt}</span>",
        "string",
        "':'",
        "''",
        "''",
        "<a href=\"${this.escape_txt_for_html(pkt.url)}\">${this.escape_txt_for_html(pkt.text)}</a>",
        "string",
        "''",
        "string",
        "''",
        "'g'"
    ],
    "variables": [
        "levels",
        "r",
        "g",
        "b",
        "col",
        "grey_level",
        "i",
        "gry",
        "pkt",
        "len",
        "pos",
        "next_char",
        "match",
        "rpos",
        "match",
        "match",
        "match",
        "rpos",
        "blocks",
        "packet",
        "sgr_cmds",
        "sgr_cmd_str",
        "num",
        "is_foreground",
        "mode_cmd",
        "palette_index",
        "r",
        "g",
        "b",
        "c",
        "txt",
        "styles",
        "classes",
        "fg",
        "bg",
        "class_string",
        "style_string",
        "parts",
        "result",
        "regexText",
        "wsrgx",
        "txt2",
        "regexText",
        "wsrgx",
        "txt2"
    ],
    "comments": [
        "ansi_up.js\n * author : Dru Nelson\n * license : MIT\n * http://github.com/drudru/ansi_up",
        "",
        "INTERFACES",
        "",
        "eslint-disable",
        "Represents the output of process_ansi(): a snapshot of the AnsiUp state machine",
        "at a given point in time, which wraps a fragment of text. This would allow deferred",
        "processing of text fragments and colors, if ever needed.",
        "Used internally when breaking up the raw text into packets",
        "An Incomplete ESC sequence",
        "A single ESC char - random",
        "A valid CSI but not an SGR code",
        "Select Graphic Rendition",
        "Operating System Command",
        "",
        "MAIN CLASS",
        "",
        "",
        "",
        "256 Colors Palette",
        "CSS RGB strings - ex. \"255, 255, 255\"",
        "All construction occurs here",
        "Normal colors",
        "Bright colors",
        "Index 0..15 : Ansi-Colors",
        "Index 16..231 : RGB 6x6x6",
        "https://gist.github.com/jasonm23/2868981#file-xterm-256color-yaml",
        "Index 232..255 : Grayscale",
        "The most common case, no ESC codes",
        "NOW WE HANDLE ESCAPES",
        "Lone ESC in Buffer, We don't know yet",
        "We treat this as a single ESC",
        "Which effecitvely shows",
        "DeMorgan",
        "OK is this an SGR or OSC that we handle",
        "SGR CHECK",
        "We do this regex initialization here so",
        "we can keep the regex close to its use (Readability)",
        "All ansi codes are typically in the following format.",
        "We parse it and focus specifically on the",
        "graphics commands (SGR)",
        "",
        "CONTROL-SEQUENCE-INTRODUCER CSI             (ESC, '[')",
        "PRIVATE-MODE-CHAR                           (!, <, >, ?)",
        "Numeric parameters separated by semicolons  ('0' - '9', ';')",
        "Intermediate-modifiers                      (0x20 - 0x2f)",
        "COMMAND-CHAR                                (0x40 - 0x7e)",
        "",
        "This match is guaranteed to terminate (even on",
        "invalid input). The key is to match on legal and",
        "illegal sequences.",
        "The first alternate matches everything legal and",
        "the second matches everything illegal.",
        "",
        "If it doesn't match, then we have not received",
        "either the full sequence or an illegal sequence.",
        "If it does match, the presence of field 4 tells",
        "us whether it was legal or illegal.",
        "match is an array",
        "0 - total match",
        "1 - private mode chars group",
        "2 - digits and semicolons group",
        "3 - command",
        "4 - illegal char",
        "Illegal sequence, just remove the ESC",
        "If not a valid SGR, we don't handle",
        "Just the parameters",
        "OSC CHECK",
        "This is not a match, so we'll just treat it as ESC",
        "We do this regex initialization here so",
        "we can keep the regex close to its use (Readability)",
        "Matching a Hyperlink OSC with a regex is difficult",
        "because Javascript's regex engine doesn't support",
        "'partial match' support.",
        "",
        "Therefore, we require the system to match the",
        "string-terminator(ST) before attempting a match.",
        "Once we find it, we attempt the Hyperlink-Begin",
        "match.",
        "If that goes ok, we scan forward for the next",
        "ST.",
        "Finally, we try to match it all and return",
        "the sequence.",
        "Also, it is important to note that we consider",
        "certain control characters as an invalidation of",
        "the entire sequence.",
        "We do regex initializations here so",
        "we can keep the regex close to its use (Readability)",
        "STRING-TERMINATOR",
        "This is likely to terminate in most scenarios",
        "because it will terminate on a newline",
        "VERY IMPORTANT",
        "We do a stateful regex match with exec.",
        "If the regex is global, and it used with 'exec',",
        "then it will search starting at the 'lastIndex'",
        "If it matches, the regex can be used again to",
        "find the next match.",
        "If an illegal character was found, bail on the match",
        "Illegal sequence, just remove the ESC",
        "OK - we might have the prefix and URI",
        "Lets start our search for the next ST",
        "past this index",
        "If an illegal character was found, bail on the match",
        "Illegal sequence, just remove the ESC",
        "OK, at this point we should have a FULL match!",
        "",
        "Lets try to match that now",
        "Illegal sequence, just remove the ESC",
        "match is an array",
        "0 - total match",
        "1 - URL",
        "2 - Text",
        "If a valid SGR",
        "Drop single ESC or Unknown CSI",
        "Ok - we have a valid \"SGR\" (Select Graphic Rendition)",
        "Each of these params affects the SGR state",
        "Why do we shift through the array instead of a forEach??",
        "... because some commands consume the params that follow !",
        "extended set foreground/background color",
        "validate that param exists",
        "extend color (38=fg, 48=bg)",
        "MODE '5' - 256 color palette",
        "MODE '2' - True Color",
        "txt = this.escape_txt_for_html(txt);",
        "If colors not set, default style is used",
        "Note on bold: https://stackoverflow.com/questions/6737005/what-are-some-advantages-to-using-span-style-font-weightbold-rather-than-b?rq=1",
        "USE INLINE STYLES",
        "USE CLASSES",
        "Check URL scheme",
        "",
        "PRIVATE FUNCTIONS",
        "",
        "ES5 template string transformer",
        "Use the 'raw' value so we don't have to double backslash in a template string",
        "Remove white-space and comments",
        "ES5 template string transformer",
        "Multi-Line On",
        "Use the 'raw' value so we don't have to double backslash in a template string",
        "Remove white-space and comments"
    ],
    "docstrings": [
        "*** SEE README ON GITHUB FOR PUBLIC API ***"
    ],
    "functions": [
        "use_classes",
        "use_classes",
        "url_whitelist",
        "url_whitelist",
        "setup_palettes",
        "escape_txt_for_html",
        "append_buffer",
        "get_next_packet",
        "ansi_to_html",
        "with_state",
        "process_ansi",
        "transform_to_html",
        "process_hyperlink",
        "rgx",
        "rgxG"
    ],
    "classes": [
        "AnsiUp"
    ]
}