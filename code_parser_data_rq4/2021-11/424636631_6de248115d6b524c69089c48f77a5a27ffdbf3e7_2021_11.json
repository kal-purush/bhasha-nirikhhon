{
    "identifiers": [
        "com",
        "com619",
        "group6",
        "controllers",
        "java",
        "time",
        "LocalDateTime",
        "java",
        "util",
        "java",
        "util",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "GetMapping",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "RequestParam",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "RestController",
        "com",
        "com619",
        "group6",
        "model",
        "Berth",
        "RestController",
        "GetMapping",
        "value",
        "RequestParam",
        "required",
        "berthID",
        "RequestParam",
        "required",
        "time",
        "GetMapping",
        "value",
        "GetMapping",
        "value",
        "RequestParam",
        "required",
        "bookingID",
        "GetMapping",
        "value",
        "RequestParam",
        "required",
        "bookingID",
        "GetMapping",
        "value"
    ],
    "literals": [
        "\"/isBerthAvailable\"",
        "\"/createBooking\"",
        "\"/updateBooking\"",
        "\"/cancelBooking\"",
        "\"/getAvailableBerths\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Rest controller to handle scheduling functions.\n * @TODO: Understand booking information requirements.\n * \n * @author WhitearL",
        "* Is the berth with the given ID free at the given time?\n\t * Optionally accepts time. If time not supplied then will check availability at time of request.\n\t * @param berthID ID of berth\n\t * @param time Time to check berth availability (optional)\n\t * @return Boolean indicating whether berth is free at given time.",
        "* Create a new booking\n     * TODO: Get information needed to create a booking and accept as parameters.\n     * @return Boolean indicating success",
        "* Update an open booking\n     * @param bookingID Booking ID to update\n     * TODO: Get information needed to update a booking and accept as parameters.\n     * @return Boolean indicating success",
        "* Cancel an open booking\n     * @param bookingID Booking ID to cancel\n     * @return Boolean indicating success",
        "* @return All available berths in a list."
    ],
    "functions": [
        "isBerthAvailable",
        "createBooking",
        "updateBooking",
        "cancelBooking",
        "getAvailableBerths"
    ],
    "classes": [
        "SchedulingController"
    ]
}