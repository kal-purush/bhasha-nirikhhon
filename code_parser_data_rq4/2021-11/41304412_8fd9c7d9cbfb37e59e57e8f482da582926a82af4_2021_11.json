{
    "identifiers": [
        "com",
        "aspectran",
        "core",
        "util",
        "java",
        "util",
        "Locale",
        "java",
        "util",
        "TimeZone",
        "localeValue",
        "tokens",
        "tokenizeLocaleSource",
        "localeValue",
        "tokens",
        "length",
        "validateLocalePart",
        "localeValue",
        "resolved",
        "Locale",
        "forLanguageTag",
        "localeValue",
        "resolved",
        "getLanguage",
        "length",
        "resolved",
        "parseLocaleTokens",
        "localeValue",
        "tokens",
        "localeString",
        "parseLocaleTokens",
        "localeString",
        "tokenizeLocaleSource",
        "localeString",
        "localeSource",
        "StringUtils",
        "tokenize",
        "localeSource",
        "localeString",
        "tokens",
        "language",
        "tokens",
        "length",
        "tokens",
        "StringUtils",
        "EMPTY",
        "country",
        "tokens",
        "length",
        "tokens",
        "StringUtils",
        "EMPTY",
        "validateLocalePart",
        "language",
        "validateLocalePart",
        "country",
        "variant",
        "StringUtils",
        "EMPTY",
        "tokens",
        "length",
        "endIndexOfCountryCode",
        "localeString",
        "indexOf",
        "country",
        "language",
        "length",
        "country",
        "length",
        "variant",
        "StringUtils",
        "trimLeadingWhitespace",
        "localeString",
        "substring",
        "endIndexOfCountryCode",
        "variant",
        "startsWith",
        "variant",
        "StringUtils",
        "trimLeadingCharacter",
        "variant",
        "variant",
        "isEmpty",
        "country",
        "startsWith",
        "variant",
        "country",
        "country",
        "StringUtils",
        "EMPTY",
        "language",
        "length",
        "language",
        "country",
        "variant",
        "localePart",
        "i",
        "i",
        "localePart",
        "length",
        "i",
        "ch",
        "localePart",
        "charAt",
        "i",
        "ch",
        "ch",
        "ch",
        "ch",
        "isLetterOrDigit",
        "ch",
        "localePart",
        "timeZoneString",
        "timeZone",
        "TimeZone",
        "getTimeZone",
        "timeZoneString",
        "equals",
        "timeZone",
        "getID",
        "timeZoneString",
        "startsWith",
        "timeZoneString",
        "timeZone"
    ],
    "literals": [
        "\"_ \"",
        "\"_\"",
        "\"#\"",
        "\"Locale part \\\"\"",
        "\"\\\" contains invalid characters\"",
        "\"GMT\"",
        "\"GMT\"",
        "\"Invalid time zone specification '\"",
        "\"'\""
    ],
    "variables": [],
    "comments": [
        "There is definitely a variant, and it is everything after the country",
        "code sans the separator between the country code and the variant.",
        "Strip off any leading '_' and whitespace, what's left is the variant.",
        "We don't want that GMT fallback..."
    ],
    "docstrings": [
        "* Copyright (c) 2008-2021 The Aspectran Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* This class has utility methods useful for parsing locale and timezone strings.",
        "* Parse the given {@code String} value into a {@link Locale}, accepting\n     * the {@link Locale#toString} format as well as BCP 47 language tags.\n     * @param localeValue the locale value: following either {@code Locale's}\n     *      {@code toString()} format (\"en\", \"en_UK\", etc), also accepting spaces as\n     *      separators (as an alternative to underscores), or BCP 47 (e.g. \"en-UK\")\n     *      as specified by {@link Locale#forLanguageTag} on Java 7+\n     * @return a corresponding {@code Locale} instance, or {@code null} if none\n     * @throws IllegalArgumentException in case of an invalid locale specification\n     * @see #parseLocaleString\n     * @see Locale#forLanguageTag",
        "* Parse the given {@code String} representation into a {@link Locale}.\n     * <p>For many parsing scenarios, this is an inverse operation of\n     * {@link Locale#toString Locale's toString}, in a lenient sense.\n     * This method does not aim for strict {@code Locale} design compliance;\n     * it is rather specifically tailored for typical Spring parsing needs.</p>\n     * <p><strong>Note:</strong> This delegate does not accept the BCP 47 language tag format.\n     * Please use {@link #parseLocale} for lenient parsing of both formats.</p>\n     * @param localeString the locale {@code String}: following {@code Locale's}\n     *      {@code toString()} format (\"en\", \"en_UK\", etc), also accepting spaces as\n     *      separators (as an alternative to underscores)\n     * @return a corresponding {@code Locale} instance, or {@code null} if none\n     * @throws IllegalArgumentException in case of an invalid locale specification",
        "* Parse the given {@code timeZoneString} value into a {@link TimeZone}.\n     * @param timeZoneString the time zone {@code String}, following {@link TimeZone#getTimeZone(String)}\n     *      but throwing {@link IllegalArgumentException} in case of an invalid time zone specification\n     * @return a corresponding {@link TimeZone} instance\n     * @throws IllegalArgumentException in case of an invalid time zone specification"
    ],
    "functions": [
        "Locale",
        "parseLocale",
        "Locale",
        "parseLocaleString",
        "tokenizeLocaleSource",
        "Locale",
        "parseLocaleTokens",
        "validateLocalePart",
        "TimeZone",
        "parseTimeZoneString"
    ],
    "classes": [
        "LocaleUtils"
    ]
}