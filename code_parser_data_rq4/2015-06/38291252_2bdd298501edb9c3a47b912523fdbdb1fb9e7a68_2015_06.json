{
    "identifiers": [
        "InputWritr",
        "eventInformation",
        "i",
        "i",
        "i",
        "args",
        "i",
        "i",
        "i",
        "keepHistory",
        "i",
        "alias",
        "alias",
        "key",
        "name",
        "canTriggerNew",
        "isRecordingNew",
        "eventInformationNew",
        "name",
        "values",
        "name",
        "values",
        "name",
        "valuesOld",
        "valuesNew",
        "aliasesRaw",
        "trigger",
        "label",
        "callback",
        "trigger",
        "label",
        "name",
        "events",
        "keycode",
        "sourceEvent",
        "trigger",
        "codeLabel",
        "preventDefaults",
        "InputWritr",
        "i",
        "i",
        "i",
        "settings",
        "settings",
        "settings",
        "settings",
        "performance",
        "performance",
        "performance",
        "performance",
        "performance",
        "performance",
        "performance",
        "settings",
        "settings",
        "settings",
        "settings",
        "settings",
        "settings",
        "settings",
        "settings",
        "settings",
        "keepHistory",
        "keepHistory",
        "i",
        "alias",
        "alias",
        "output",
        "alias",
        "alias",
        "output",
        "alias",
        "alias",
        "alias",
        "alias",
        "alias",
        "alias",
        "alias",
        "alias",
        "alias",
        "alias",
        "alias",
        "alias",
        "alias",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "name",
        "arguments",
        "name",
        "history",
        "canTriggerNew",
        "canTriggerNew",
        "canTriggerNew",
        "canTriggerNew",
        "isRecordingNew",
        "isRecordingNew",
        "isRecordingNew",
        "isRecordingNew",
        "eventInformationNew",
        "eventInformationNew",
        "name",
        "values",
        "name",
        "name",
        "values",
        "name",
        "name",
        "values",
        "triggerName",
        "triggerName",
        "triggerGroup",
        "triggerName",
        "triggerGroup",
        "name",
        "i",
        "i",
        "values",
        "i",
        "triggerGroup",
        "values",
        "i",
        "triggerGroup",
        "name",
        "name",
        "values",
        "name",
        "i",
        "i",
        "values",
        "i",
        "name",
        "name",
        "values",
        "i",
        "triggerName",
        "triggerName",
        "triggerGroup",
        "triggerName",
        "triggerGroup",
        "name",
        "i",
        "i",
        "values",
        "i",
        "triggerGroup",
        "values",
        "i",
        "triggerGroup",
        "values",
        "i",
        "name",
        "valuesOld",
        "valuesNew",
        "name",
        "valuesOld",
        "name",
        "valuesNew",
        "aliasesRaw",
        "aliasName",
        "aliasesRaw",
        "aliasesRaw",
        "aliasName",
        "aliasName",
        "aliasesRaw",
        "aliasName",
        "trigger",
        "label",
        "callback",
        "trigger",
        "trigger",
        "trigger",
        "label",
        "callback",
        "label",
        "i",
        "i",
        "label",
        "i",
        "trigger",
        "label",
        "i",
        "callback",
        "trigger",
        "label",
        "trigger",
        "trigger",
        "trigger",
        "label",
        "label",
        "i",
        "i",
        "label",
        "i",
        "trigger",
        "label",
        "i",
        "trigger",
        "label",
        "i",
        "name",
        "history",
        "arguments",
        "name",
        "history",
        "events",
        "time",
        "events",
        "events",
        "time",
        "call",
        "events",
        "time",
        "timeouts",
        "time",
        "setTimeout",
        "call",
        "time",
        "keycode",
        "sourceEvent",
        "keycode",
        "keycode",
        "sourceEvent",
        "trigger",
        "codeLabel",
        "preventDefaults",
        "trigger",
        "functions",
        "trigger",
        "Pipe",
        "codeLabel",
        "preventDefaults",
        "functions",
        "alias",
        "InputWriter",
        "InputWriter",
        "InputWriter",
        "trigger",
        "alias",
        "InputWriter",
        "functions",
        "alias",
        "alias",
        "info",
        "info",
        "info"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"use strict\"",
        "string",
        "string",
        "string",
        "\"No triggers given to InputWritr.\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"canTrigger\"",
        "\"isRecording\"",
        "\"length\"",
        "\"shift\"",
        "\"ctrl\"",
        "\"space\"",
        "\"left\"",
        "\"up\"",
        "\"right\"",
        "\"down\"",
        "\"16\"",
        "\"shift\"",
        "\"17\"",
        "\"ctrl\"",
        "\"32\"",
        "\"space\"",
        "\"37\"",
        "\"left\"",
        "\"38\"",
        "\"up\"",
        "\"39\"",
        "\"right\"",
        "\"40\"",
        "\"down\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"undefined\"",
        "\"?\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"undefined\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Unknown trigger requested: '\"",
        "\"'.\"",
        "string",
        "\"Unknown trigger requested: '\"",
        "\"'.\"",
        "string",
        "string",
        "string",
        "\"Blank event given, ignoring it.\"",
        "string",
        "string",
        "string",
        "\"No trigger of label '\"",
        "\"' defined.\""
    ],
    "variables": [
        "output",
        "alias",
        "triggerName",
        "triggerGroup",
        "i",
        "triggerName",
        "triggerGroup",
        "i",
        "aliasName",
        "i",
        "i",
        "timeouts",
        "time",
        "call",
        "functions",
        "InputWriter",
        "alias"
    ],
    "comments": [
        "Headless browsers like PhantomJS might not contain the performance",
        "class, so Date.now is used as a backup",
        "Simple gets",
        "Simple sets",
        "Aliases",
        "triggerName = \"onkeydown\", \"onkeyup\", ...",
        "triggerGroup = { \"left\": function, ... }, ...",
        "values[i] = 37, 65, ...",
        "triggerName = \"onkeydown\", \"onkeyup\", ...",
        "triggerGroup = { \"left\": function, ... }, ...",
        "values[i] = 37, 65, ...",
        "Functions",
        "Typical usage means alias will be an event from a key/mouse input",
        "If there's a function under that alias, run it"
    ],
    "docstrings": [
        "* The mapping of events to their key codes, to their callbacks.",
        "* The first argument to be passed to event callbacks.",
        "* Function to generate a current timestamp, commonly performance.now.",
        "* Known, allowed aliases for triggers.",
        "* A quick lookup table of key aliases to their character codes.",
        "* A quick lookup table of character codes to their key aliases.",
        "* Whether events are initially allowed to trigger (by default, true).",
        "* Whether triggered inputs are initially allowed to be written to history\n         * (by default, true).",
        "* A general utility for automating interactions with user-called events linked\n     * with callbacks. Pipe functions are available that take in user input, switch \n     * on the event code, and call the appropriate callback. These Pipe functions \n     * can be made during runtime; further utilities allow for saving and playback \n     * of input histories in JSON format.",
        "* A mapping of events to their key codes, to their callbacks.",
        "* Known, allowed aliases for triggers.",
        "* Recording of every action that has happened, with a timestamp.",
        "* A listing of all histories, with indices set by this.saveHistory.",
        "* Function to generate a current timestamp, commonly performance.now.",
        "* A starting time used for calculating playback delays in playHistory.",
        "* An Object to be passed to event calls, commonly with key information,\n         * such as { \"Down\": 0 }.",
        "* An optional Boolean callback to disable or enable input triggers.",
        "* Whether to record events into history.",
        "* A quick lookup table of key aliases to their character codes.",
        "* A quick lookup table of character codes to their key aliases.",
        "* @param {IInputWritrSettings} settings",
        "* Clears the currently tracked inputs history and resets the starting time,\n         * and (optionally) saves the current history.\n         * \n         * @param {Boolean} [keepHistory]   Whether the currently tracked history\n         *                                  of inputs should be added to the master\n         *                                  Array of histories (defaults to true).",
        "* @return {Object} The stored mapping of aliases to values.",
        "* @return {Object} The stored mapping of aliases to values, with values\n         *                  mapped to their equivalent key Strings.",
        "* @param {Mixed} alias   An alias allowed to be passed in, typically a\n         *                        character code.\n         * @return {String[]}   The mapped key Strings corresponding to that alias,\n         *                      typically the human-readable Strings representing \n         *                      input names, such as \"a\" or \"left\".",
        "* @param {Mixed} alias   The alias of an input, typically a character \n         *                        code.\n         * @return {String} The human-readable String representing the input name,\n         *                  such as \"a\" or \"left\".",
        "* @param {Mixed} key   The number code of an input.\n         * @return {Number} The machine-usable character code of the input.\n         *",
        "* Get function for a single history, either the current or a past one.\n         * \n         * @param {String} [name]   The identifier for the old history to return. If\n         *                          none is provided, the current history is used.\n         * @return {Object}   A history of inputs in JSON-friendly form.",
        "* @return {Object} All previously stored histories.",
        "* @return {Boolean} Whether this is currently allowing inputs.",
        "* @return {Boolean} Whether this is currently recording allowed inputs.",
        "* @param {Mixed} canTriggerNew   Whether this is now allowing inputs. This \n         *                                may be either a Function (to be evaluated \n         *                                on each input) or a general Boolean.",
        "* @param {Boolean} isRecordingNew   Whether this is now recording allowed\n         *                                   inputs.",
        "* @param {Mixed} eventInformationNew   A new first argument for event \n         *                                      callbacks.",
        "* Adds a list of values by which an event may be triggered.\n         * \n         * @param {String} name   The name of the event that is being given \n         *                        aliases, such as \"left\".\n         * @param {Array} values   An array of aliases by which the event will also\n         *                         be callable.",
        "* Removes a list of values by which an event may be triggered.\n         * \n         * @param {String} name   The name of the event that is having aliases\n         *                        removed, such as \"left\".\n         * @param {Array} values   An array of aliases by which the event will no\n         *                         longer be callable.",
        "* Shortcut to remove old alias values and add new ones in.\n         * \n         * \n         * @param {String} name   The name of the event that is having aliases\n         *                        added and removed, such as \"left\".\n         * @param {Array} valuesOld   An array of aliases by which the event will no\n         *                            longer be callable.\n         * @param {Array} valuesNew   An array of aliases by which the event will \n         *                            now be callable.",
        "* Adds a set of alises from an Object containing \"name\" => [values] pairs.\n         * \n         * @param {Object} aliasesRaw",
        "* Adds a triggerable event by marking a new callback under the trigger's\n         * triggers. Any aliases for the label are also given the callback.\n         * \n         * @param {String} trigger   The name of the triggered event.\n         * @param {Mixed} label   The code within the trigger to call within, \n         *                        typically either a character code or an alias.\n         * @param {Function} callback   The callback Function to be triggered.",
        "* Removes a triggerable event by deleting any callbacks under the trigger's\n         * triggers. Any aliases for the label are also given the callback.\n         * \n         * @param {String} trigger   The name of the triggered event.\n         * @param {Mixed} label   The code within the trigger to call within, \n         *                        typically either a character code or an alias.",
        "* Stores the current history in the histories listing. this.restartHistory \n         * is typically called directly after.",
        "* Plays back the current history using this.playEvents.",
        "* \"Plays\" back an Array of event information by simulating each keystroke\n         * in a new call, timed by setTimeout.\n         * \n         * @param {Object} events   The events history to play back.\n         * @remarks This will execute the same actions in the same order as before,\n         *          but the arguments object may be different.",
        "* Primary driver function to run an event. The event is chosen from the\n         * triggers object, and called with eventInformation as the input.\n         * \n         * @param {Function, String} event   The event function (or string alias of\n         *                                   it) that will be called.\n         * @param {Number} [keycode]   The alias of the event function under\n         *                             triggers[event], if event is a String.\n         * @param {Event} [sourceEvent]   The raw event that caused the calling Pipe\n         *                                to be triggered, such as a MouseEvent.\n         * @return {Mixed}",
        "* Creates and returns a function to run a trigger.\n         * \n         * @param {String} trigger   The label for the Array of functions that the\n         *                           pipe function should choose from.\n         * @param {String} codeLabel   A mapping String for the alias to get the\n         *                             alias from the event.\n         * @param {Boolean} [preventDefaults]   Whether the input to the pipe\n         *                                       function will be an HTML-style\n         *                                       event, where .preventDefault()\n         *                                       should be clicked.\n         * @return {Function}",
        "* Curry utility to create a closure that runs call() when called.\n         * \n         * @param {Array} info   An array containing [alias, keycode].\n         * @return {Function} A closure Function that activates a trigger\n         *                    when called."
    ],
    "functions": [
        "restartHistory",
        "getAliases",
        "getAliasesAsKeyStrings",
        "getAliasAsKeyStrings",
        "convertAliasToKeyString",
        "convertKeyStringToAlias",
        "getHistory",
        "getHistories",
        "getCanTrigger",
        "getIsRecording",
        "setCanTrigger",
        "setIsRecording",
        "setEventInformation",
        "addAliasValues",
        "removeAliasValues",
        "switchAliasValues",
        "addAliases",
        "addEvent",
        "removeEvent",
        "saveHistory",
        "playHistory",
        "playEvents",
        "callEvent",
        "makePipe",
        "makeEventCall"
    ],
    "classes": [
        "InputWritr"
    ]
}