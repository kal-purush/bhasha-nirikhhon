{
    "identifiers": [
        "sys",
        "os",
        "numpy",
        "np",
        "tables",
        "chromosome",
        "argparse",
        "gzip",
        "chrom",
        "pos",
        "name",
        "ref_allele",
        "alt_allele",
        "chrom",
        "pos",
        "name",
        "ref_allele",
        "alt_allele",
        "args",
        "tables",
        "openFile",
        "args",
        "snp_tab",
        "tables",
        "openFile",
        "args",
        "snp_index",
        "tables",
        "openFile",
        "args",
        "haplotype",
        "snp_tab_h5",
        "close",
        "snp_index_h5",
        "close",
        "hap_h5",
        "close",
        "output_dir",
        "chrom_list",
        "output_dir",
        "tables",
        "openFile",
        "as_count_filename",
        "output_dir",
        "tables",
        "openFile",
        "read_count_filename",
        "output_dir",
        "tables",
        "openFile",
        "ref_count_filename",
        "output_dir",
        "tables",
        "openFile",
        "alt_count_filename",
        "output_dir",
        "tables",
        "openFile",
        "het_count_filename",
        "as_count_filename",
        "read_count_filename",
        "ref_count_filename",
        "alt_count_filename",
        "het_count_filename",
        "as_count_h5",
        "read_count_h5",
        "ref_count_h5",
        "alt_count_h5",
        "het_count_h5",
        "tables",
        "UInt16Atom",
        "dflt",
        "h5f",
        "h5_files",
        "chrom",
        "chrom_list",
        "create_carray",
        "h5f",
        "chrom",
        "atom",
        "h5f",
        "chrom",
        "atom",
        "tables",
        "Filters",
        "complevel",
        "complib",
        "chrom",
        "length",
        "h5f",
        "createCArray",
        "h5f",
        "root",
        "chrom",
        "name",
        "atom",
        "shape",
        "filters",
        "zlib_filter",
        "carray",
        "chrom_list",
        "ind_files",
        "snp_files",
        "ind_idx",
        "chrom",
        "chrom_list",
        "chrom",
        "name",
        "node_name",
        "ind_files",
        "ref_as_count_h5",
        "node_name",
        "ind_files",
        "alt_as_count_h5",
        "node_name",
        "ind_files",
        "read_count_h5",
        "node_name",
        "snp_files",
        "hap_h5",
        "node_name",
        "snp_files",
        "snp_index_h5",
        "node_name",
        "snp_files",
        "snp_tab_h5",
        "sys",
        "stderr",
        "write",
        "chrom",
        "name",
        "as_count_h5",
        "getNode",
        "node_name",
        "ind_files",
        "ref_as_count_h5",
        "getNode",
        "node_name",
        "node",
        "ind_node",
        "ind_files",
        "alt_as_count_h5",
        "getNode",
        "node_name",
        "node",
        "ind_node",
        "read_count_h5",
        "getNode",
        "node_name",
        "ind_files",
        "read_count_h5",
        "getNode",
        "chrom",
        "name",
        "node",
        "ind_node",
        "ind_idx",
        "ind_idx",
        "snp_files",
        "hap_h5",
        "getNode",
        "chrom",
        "name",
        "hap_tab",
        "hap_a_idx",
        "hap_tab",
        "hap_b_idx",
        "a_hap",
        "b_hap",
        "a_hap",
        "b_hap",
        "a_hap",
        "b_hap",
        "a_hap",
        "b_hap",
        "snp_files",
        "snp_index_h5",
        "getNode",
        "chrom",
        "name",
        "np",
        "where",
        "i",
        "SNP_UNDEF",
        "i",
        "chrom_idx",
        "ref_count_h5",
        "getNode",
        "chrom",
        "name",
        "node",
        "chrom_idx",
        "is_homo_ref",
        "snp_idx",
        "het_count_h5",
        "getNode",
        "chrom",
        "name",
        "node",
        "chrom_idx",
        "is_het",
        "snp_idx",
        "alt_count_h5",
        "getNode",
        "chrom",
        "name",
        "node",
        "chrom_idx",
        "is_homo_alt",
        "snp_idx",
        "h5f",
        "h5_files",
        "h5f",
        "close",
        "filename",
        "filenames",
        "os",
        "unlink",
        "filename",
        "read_count_dir",
        "individual",
        "tables",
        "openFile",
        "read_count_dir",
        "individual",
        "tables",
        "openFile",
        "read_count_dir",
        "individual",
        "tables",
        "openFile",
        "read_count_dir",
        "individual",
        "ref_as_count_h5",
        "close",
        "alt_as_count_h5",
        "close",
        "read_count_h5",
        "close",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "metavar",
        "required",
        "parser",
        "add_argument",
        "help",
        "required",
        "metavar",
        "parser",
        "add_argument",
        "help",
        "metavar",
        "required",
        "parser",
        "add_argument",
        "help",
        "metavar",
        "required",
        "parser",
        "add_argument",
        "help",
        "metavar",
        "required",
        "parser",
        "add_argument",
        "help",
        "metavar",
        "required",
        "parser",
        "add_argument",
        "help",
        "metavar",
        "required",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "args",
        "options",
        "sys",
        "stderr",
        "write",
        "options",
        "samples",
        "open",
        "options",
        "samples",
        "line",
        "f",
        "line",
        "rstrip",
        "split",
        "words",
        "name",
        "ind_dict",
        "ValueError",
        "name",
        "options",
        "samples",
        "idx",
        "idx",
        "ind_dict",
        "options",
        "samp_idx",
        "os",
        "path",
        "exists",
        "options",
        "individuals",
        "open",
        "options",
        "individuals",
        "line",
        "f",
        "line",
        "rstrip",
        "split",
        "words",
        "ind_list",
        "append",
        "identifier",
        "options",
        "individuals",
        "split",
        "len",
        "ind_list",
        "ValueError",
        "options",
        "individuals",
        "i",
        "ind_list",
        "i",
        "samp_idx",
        "ValueError",
        "i",
        "options",
        "samples",
        "ind_list",
        "parse_args",
        "args",
        "output_file",
        "args",
        "output_file",
        "endswith",
        "gzip",
        "open",
        "args",
        "output_file",
        "open",
        "args",
        "output_file",
        "sys",
        "stdout",
        "get_samples_index",
        "args",
        "read_individuals",
        "args",
        "samp_idx",
        "chromosome",
        "get_all_chromosomes",
        "args",
        "chrom",
        "chromosome",
        "get_chromosome_dict",
        "args",
        "chrom",
        "CombinedFiles",
        "OUTPUT_DIR",
        "chrom_list",
        "SNPFiles",
        "args",
        "sys",
        "stderr",
        "write",
        "ind",
        "individuals",
        "sys",
        "stderr",
        "write",
        "ind",
        "CountFiles",
        "args",
        "read_count_dir",
        "ind",
        "samp_idx",
        "ind",
        "combined_files",
        "add_counts",
        "chrom_list",
        "count_files",
        "snp_files",
        "ind_idx",
        "count_files",
        "close",
        "sys",
        "stderr",
        "write",
        "write_target_regions",
        "out_f",
        "args",
        "chrom_list",
        "combined_files",
        "snp_files",
        "combined_files",
        "close",
        "snp_files",
        "close",
        "out_f",
        "args",
        "chrom_list",
        "combined_files",
        "snp_files",
        "chrom",
        "chrom_list",
        "chrom",
        "name",
        "node_name",
        "snp_files",
        "snp_index_h5",
        "node_name",
        "snp_files",
        "snp_tab_h5",
        "sys",
        "stderr",
        "write",
        "chrom",
        "name",
        "sys",
        "stderr",
        "write",
        "combined_files",
        "ref_count_h5",
        "getNode",
        "node_name",
        "combined_files",
        "het_count_h5",
        "getNode",
        "node_name",
        "ref_geno_count",
        "het_geno_count",
        "ref_geno_count",
        "combined_files",
        "alt_count_h5",
        "getNode",
        "node_name",
        "alt_geno_count",
        "het_geno_count",
        "alt_geno_count",
        "sys",
        "stderr",
        "write",
        "np",
        "amin",
        "np",
        "vstack",
        "ref_allele_count",
        "alt_allele_count",
        "axis",
        "np",
        "where",
        "minor_count",
        "args",
        "min_minor_allele_count",
        "het_geno_count",
        "args",
        "min_het_count",
        "het_geno_count",
        "minor_count",
        "sys",
        "stderr",
        "write",
        "idx",
        "shape",
        "combined_files",
        "read_count_h5",
        "getNode",
        "node_name",
        "combined_files",
        "as_count_h5",
        "getNode",
        "node_name",
        "snp_files",
        "snp_index_h5",
        "getNode",
        "node_name",
        "snp_files",
        "snp_tab_h5",
        "getNode",
        "node_name",
        "i",
        "idx",
        "max",
        "i",
        "args",
        "target_region_size",
        "min",
        "chrom",
        "length",
        "i",
        "args",
        "target_region_size",
        "np",
        "sum",
        "read_counts",
        "start",
        "end",
        "np",
        "sum",
        "as_read_counts",
        "start",
        "end",
        "snp_tab",
        "snp_idx",
        "i",
        "n_reads",
        "args",
        "min_read_count",
        "n_as_reads",
        "args",
        "min_as_count",
        "out_f",
        "write",
        "chrom",
        "name",
        "i",
        "i",
        "snp_row",
        "snp_row",
        "chrom",
        "name",
        "start",
        "start",
        "end",
        "n_region",
        "sys",
        "stderr",
        "write",
        "n_region",
        "main"
    ],
    "literals": [
        "\".\"",
        "\"r\"",
        "\"r\"",
        "\"r\"",
        "\"%s/combined_as_count.h5\"",
        "\"w\"",
        "\"%s/combined_read_count.h5\"",
        "\"w\"",
        "\"%s/combined_ref_count.h5\"",
        "\"w\"",
        "\"%s/combined_alt_count.h5\"",
        "\"w\"",
        "\"%s/combined_het_count.h5\"",
        "\"w\"",
        "\"zlib\"",
        "\"/%s\"",
        "\"  %s\\n\"",
        "\"/%s\"",
        "\"/%s\"",
        "\"/%s\"",
        "\"/%s\"",
        "\"/%s\"",
        "\"/%s\"",
        "\"%s/ref_as_counts.%s.h5\"",
        "\"r\"",
        "\"%s/alt_as_counts.%s.h5\"",
        "\"r\"",
        "\"%s/read_counts.%s.h5\"",
        "\"r\"",
        "\"Uses read count and SNP information to generate \"",
        "\"a list of target regions and \"",
        "\"test SNPs that match specified \"",
        "\"criteria. The target regions\"",
        "\"are output to a BED-like file \"",
        "\"that can be used as input \"",
        "\"to the extract_haplotype_read_counts.py \"",
        "\"script.\"",
        "'--target_region_size'",
        "'size of the target regions to output'",
        "'--min_as_count'",
        "\"minimum number of allele-specific reads \"",
        "\"in target region (summed across individuals)\"",
        "'--min_read_count'",
        "\"minimum number of mapped reads in target region\"",
        "\" (summed across individuals)\"",
        "'--min_het_count'",
        "\"minimum number of individuals that are heterozygous for \"",
        "\"test SNP\"",
        "'--min_minor_allele_count'",
        "'minimum number of test SNP minor alleles '",
        "'present in individuals'",
        "\"--chrom\"",
        "\"Path to chromInfo.txt file (may be gzipped) \"",
        "\"with list of chromosomes for the relevant genome \"",
        "\"assembly. Each line in file should contain \"",
        "\"tab-separated chromosome name and chromosome length \"",
        "\"(in basepairs). chromInfo.txt files can be \"",
        "\"downloaded from the UCSC genome browser. For \"",
        "\"example, a chromInfo.txt.gz file for hg19 can \"",
        "\"be downloaded from \"",
        "\"http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/\"",
        "\"CHROM_TXT_FILE\"",
        "\"--samples\"",
        "\"Path to text file containing identifiers for the \"",
        "\"complete set of individuals with genotyping data. The \"",
        "\"ordering of identifiers must be consistent with the \"",
        "\"column order in the haplotype file. \"",
        "\"The samples file is assumed to have one identifier \"",
        "\"per line in the first column (other columns are \"",
        "\"ignored).\"",
        "\"SAMPLES_TXT_FILE\"",
        "\"--individuals\"",
        "\"A list of identifiers for the individuals that \"",
        "\"will be used by the combined haplotype test. Read \"",
        "\"counts for these individuals are read from HDF5 files \"",
        "\"in the --read_count_dir. The argument can be a comma-\"",
        "\"delimited list of identifiers (provided on command \"",
        "\"line) or a path to a file containing a single \"",
        "\"identifier per line. The individuals must be a subset \"",
        "\"of those provided with the --samples argument.\"",
        "\"INDIVIDUAL\"",
        "\"--snp_tab\"",
        "\"Path to HDF5 file to read SNP information \"",
        "\"from. Each row of SNP table contains SNP name \"",
        "\"(rs_id), position, allele1, allele2.\"",
        "\"SNP_TABLE_H5_FILE\"",
        "\"--snp_index\"",
        "\"Path to HDF5 file containing SNP index. The \"",
        "\"SNP index is used to convert the genomic position \"",
        "\"of a SNP to its corresponding row in the haplotype \"",
        "\"and snp_tab HDF5 files.\"",
        "\"SNP_INDEX_H5_FILE\"",
        "\"--haplotype\"",
        "\"Path to HDF5 file to read phased haplotypes \"",
        "\"from.\"",
        "\"HAPLOTYPE_H5_FILE\"",
        "\"--read_count_dir\"",
        "\"Path to directory containing HDF5 files with read counts \"",
        "\"for each individual. These files are written by the bam2h5.py \"",
        "\"program. The files must be named like: \"",
        "\"ref_as_counts.<INDIVIDUAL>.h5, alt_as_counts.<INDIVIDUAL>.h5, \"",
        "\"other_as_counts.<INDIVIDUAL>.h5, read_counts.<INDIVIDUAL>.h5\"",
        "\"READ_COUNT_DIR\"",
        "\"--output_file\"",
        "\"Path to output file. If not specified output is written to stdout.\"",
        "\"reading list of individuals from %s\\n\"",
        "\"sample identifier '%s' appears multiple \"",
        "\"times in file %s\"",
        "\",\"",
        "\"could not read any individuals from '%s'\"",
        "\"individual %s is not in samples file '%s'\"",
        "\".gz\"",
        "\"w\"",
        "\"w\"",
        "\"summing genotypes and read counts across individuals\\n\"",
        "\"individual: %s\\n\"",
        "\"generating list of target regions\\n\"",
        "\"/%s\"",
        "\"  %s\\n\"",
        "\"  getting genotype counts\\n\"",
        "\"  getting minor allele counts\\n\"",
        "\"  %d possible test SNPs\\n\"",
        "\"%s %d %d %s %s + %s.%d %d %d\\n\"",
        "'allele1'",
        "'allele2'",
        "\"  wrote %d test SNP / target region pairs\\n\""
    ],
    "variables": [
        "OUTPUT_DIR",
        "SNP_UNDEF",
        "chrom",
        "pos",
        "name",
        "ref_allele",
        "alt_allele",
        "snp_tab_h5",
        "snp_index_h5",
        "hap_h5",
        "as_count_filename",
        "as_count_h5",
        "read_count_filename",
        "read_count_h5",
        "ref_count_filename",
        "ref_count_h5",
        "alt_count_filename",
        "alt_count_h5",
        "het_count_filename",
        "het_count_h5",
        "filenames",
        "h5_files",
        "atom",
        "zlib_filter",
        "shape",
        "carray",
        "node_name",
        "node",
        "ind_node",
        "ind_node",
        "node",
        "ind_node",
        "hap_a_idx",
        "hap_b_idx",
        "hap_tab",
        "a_hap",
        "b_hap",
        "is_homo_ref",
        "is_het",
        "is_homo_alt",
        "i",
        "chrom_idx",
        "snp_idx",
        "node",
        "node",
        "node",
        "ref_as_count_h5",
        "alt_as_count_h5",
        "read_count_h5",
        "parser",
        "args",
        "f",
        "ind_dict",
        "idx",
        "words",
        "name",
        "ind_dict",
        "name",
        "ind_list",
        "f",
        "words",
        "identifier",
        "ind_list",
        "args",
        "out_f",
        "out_f",
        "out_f",
        "out_f",
        "samp_idx",
        "individuals",
        "chrom_list",
        "chrom_dict",
        "combined_files",
        "snp_files",
        "count_files",
        "ind_idx",
        "node_name",
        "ref_geno_count",
        "het_geno_count",
        "ref_allele_count",
        "alt_geno_count",
        "alt_allele_count",
        "minor_count",
        "idx",
        "read_counts",
        "as_read_counts",
        "snp_idx",
        "snp_tab",
        "n_region",
        "start",
        "end",
        "n_reads",
        "n_as_reads",
        "snp_row"
    ],
    "comments": [
        "TODO: change output dir--make command line arg?",
        "open tracks where SNP information can be extracted",
        "combined allele-specific read counts",
        "combined mapped read counts",
        "counts of genotypes",
        "initialize all of these files",
        "create CArray for this chromosome",
        "add contribution from one individual to combined counts",
        "get haplotypes for this individual",
        "determine genotype of SNPs for this individual",
        "get genomic location of SNPs",
        "add to total genotype counts",
        "remove tempory combined files",
        "open read count tracks for a single individual",
        "name = words[0].replace(\"NA\", \"\")",
        "read individuals from specified file",
        "no file specified, assume ','-delimited file",
        "provided on command line",
        "check that all individuals were present in samples file",
        "make dictionary of identifier => index mapping",
        "read individuals",
        "STEP 1: make combined HDF5 files of AS counts,",
        "total mapped read counts, and genotype counts",
        "open count files for this indivudal",
        "add counts to combined totals",
        "STEP 2: generate list of target regions centered on test SNPs:",
        "free memory as it is no longer needed",
        "keep this target region",
        "NOTE: currently this filter just uses total count of AS reads in region.",
        "Would be better to take into account genotypes of each individual, since AS reads",
        "are only useful for test in individuals that are heterozygous for test SNP"
    ],
    "docstrings": [
        "\"\"\"closes all of the data files\"\"\"",
        "\"\"\"Gets dictionary of sample_id => index mappings that is used \n    to lookup information in the genotype and haplotype tables\"\"\"",
        "\"\"\"Choose test SNPs and corresponding target regions and write to output file.\n    Selected test SNPs:\n       (a) are heterozygous in at least min_het_count individuals\n       (b) have a minor allele count of at least min_minor_allele_count\n\n    Selected target regions are centered on test SNPs and\n         (a) have at least min_as_count allele-specific reads (across all individuals)\n         (b) have at least min_read_count mapped reads (across all individuals)\n    \"\"\""
    ],
    "functions": [
        "close",
        "create_carray",
        "add_counts",
        "close",
        "close",
        "parse_args",
        "get_samples_index",
        "read_individuals",
        "main",
        "write_target_regions"
    ],
    "classes": [
        "SNP",
        "SNPFiles",
        "CombinedFiles",
        "CountFiles"
    ]
}