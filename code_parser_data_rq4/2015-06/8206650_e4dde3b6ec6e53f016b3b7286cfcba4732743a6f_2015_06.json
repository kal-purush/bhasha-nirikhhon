{
    "identifiers": [
        "sys",
        "os",
        "json",
        "csv",
        "datetime",
        "requests",
        "requests",
        "auth",
        "HTTPBasicAuth",
        "getpass",
        "pickle",
        "smtplib",
        "email",
        "mime",
        "text",
        "MIMEText",
        "subprocess",
        "SMTP_USER",
        "USERID",
        "TOO_MANY_RESTORES_ACTION",
        "TOO_MANY_RESTORES_THRESHOLD",
        "NON_ORIGIN_DEVICE_RESTORE_ACTION",
        "NON_OWNER_RESTORE_ACTION",
        "WEB_RESTORE_ACTION",
        "datetime",
        "datetime",
        "now",
        "now",
        "file",
        "pickle",
        "load",
        "open",
        "file",
        "IOError",
        "data_from_file",
        "file",
        "data",
        "pickle",
        "dump",
        "data",
        "open",
        "file",
        "data",
        "user",
        "data",
        "key",
        "default_key_values",
        "data",
        "user",
        "has_key",
        "key",
        "data",
        "user",
        "default_key_values",
        "key",
        "user",
        "c42_master",
        "c42_port",
        "user",
        "user",
        "requests",
        "get",
        "request_url",
        "auth",
        "c42_admin",
        "c42_password",
        "payload",
        "verify",
        "VERIFY_CERT",
        "json",
        "loads",
        "new_restores_json",
        "text",
        "new_restores_converted_to_python_object",
        "from_hours_ago",
        "user",
        "user_data",
        "restore_events",
        "user_data",
        "restore_events",
        "IndexError",
        "last_restore",
        "user_data",
        "append",
        "last_restore",
        "restore",
        "restore_events",
        "restore",
        "restoreId",
        "user_data",
        "temp_list_restores",
        "append",
        "restore",
        "temp_list_restores",
        "reverse",
        "temp_list_restores",
        "report_data",
        "restore",
        "event_type",
        "action",
        "result",
        "monitorStartTime",
        "event_type",
        "restore",
        "restore",
        "restore",
        "restore",
        "restore",
        "restore",
        "action",
        "result",
        "monitorStartTime",
        "report_data",
        "append",
        "row",
        "user",
        "c42_master",
        "c42_port",
        "user",
        "requests",
        "put",
        "request_url",
        "auth",
        "c42_admin",
        "c42_password",
        "verify",
        "VERIFY_CERT",
        "r",
        "status_code",
        "use_mailx",
        "email_address",
        "email_string",
        "open",
        "f",
        "write",
        "email_string",
        "f",
        "close",
        "use_mailx",
        "c42_admin_email",
        "subprocess",
        "Popen",
        "mail_cmd",
        "shell",
        "stdout",
        "subprocess",
        "PIPE",
        "os",
        "remove",
        "open",
        "MIMEText",
        "email_file",
        "read",
        "email_file",
        "close",
        "SMTP_USER",
        "email_address",
        "SMTP_USE_SSL",
        "SMTP_PORT",
        "smtplib",
        "SMTP",
        "MAIL_HOST",
        "SMTP_PORT",
        "smtplib",
        "SMTP",
        "MAIL_HOST",
        "SMTP_PORT",
        "smtplib",
        "SMTP_SSL",
        "MAIL_HOST",
        "SMTP_PORT",
        "smtplib",
        "SMTP_SSL",
        "MAIL_HOST",
        "SMTP_REQUIRES_AUTH",
        "s",
        "login",
        "SMTP_USER",
        "SMTP_PASS",
        "s",
        "sendmail",
        "SMTP_SENDING_USER",
        "email_address",
        "email_msg",
        "as_string",
        "s",
        "quit",
        "os",
        "remove",
        "userId",
        "c42_master",
        "c42_port",
        "userId",
        "requests",
        "get",
        "request_url",
        "auth",
        "c42_admin",
        "c42_password",
        "verify",
        "VERIFY_CERT",
        "json",
        "loads",
        "user_info_json",
        "text",
        "convert_user_info_to_python_object",
        "email",
        "email",
        "getStoredDataFromDisk",
        "DATA_FILE",
        "len",
        "temp_data",
        "initial_data",
        "copy",
        "verifyData",
        "data",
        "temp_data",
        "copy",
        "user",
        "data",
        "data",
        "user",
        "user_data",
        "user",
        "getNewUserRestores",
        "user",
        "newRestoreEvents",
        "user",
        "user_data",
        "restore_events",
        "user_data",
        "extend",
        "new_restores",
        "user_data",
        "user_data",
        "restore",
        "new_restores",
        "restore",
        "restore",
        "sourceUserId",
        "action",
        "blockUser",
        "restore",
        "buildReport",
        "report_data",
        "restore",
        "action",
        "result",
        "monitorStartTime",
        "format",
        "sourceUserId",
        "format",
        "action",
        "format",
        "restore",
        "format",
        "restore",
        "format",
        "result",
        "user_email_string",
        "str1",
        "str2",
        "str3",
        "str4",
        "str5",
        "user_email_string",
        "format",
        "separator",
        "admin_email_string",
        "str1",
        "str2",
        "str3",
        "str4",
        "str5",
        "admin_email_string",
        "format",
        "CSV_FILE",
        "separator",
        "user_data",
        "user_data",
        "restore",
        "new_restores",
        "restore",
        "restore",
        "restore",
        "action",
        "blockUser",
        "restore",
        "buildReport",
        "report_data",
        "restore",
        "action",
        "result",
        "monitorStartTime",
        "format",
        "sourceUserId",
        "format",
        "action",
        "format",
        "restore",
        "format",
        "restore",
        "format",
        "result",
        "user_email_string",
        "str1",
        "str2",
        "str3",
        "str4",
        "str5",
        "user_email_string",
        "format",
        "separator",
        "admin_email_string",
        "str1",
        "str2",
        "str3",
        "str4",
        "str5",
        "admin_email_string",
        "format",
        "CSV_FILE",
        "separator",
        "user_data",
        "user_data",
        "restore",
        "new_restores",
        "restore",
        "restore",
        "action",
        "blockUser",
        "restore",
        "buildReport",
        "report_data",
        "restore",
        "action",
        "result",
        "monitorStartTime",
        "format",
        "sourceUserId",
        "format",
        "action",
        "format",
        "restore",
        "format",
        "restore",
        "format",
        "result",
        "user_email_string",
        "str1",
        "str2",
        "str3",
        "str4",
        "str5",
        "user_email_string",
        "format",
        "separator",
        "admin_email_string",
        "str1",
        "str2",
        "str3",
        "str4",
        "str5",
        "admin_email_string",
        "format",
        "CSV_FILE",
        "separator",
        "user_data",
        "user_data",
        "len",
        "new_restores",
        "restore_count",
        "user_data",
        "new_restores",
        "restore",
        "action",
        "user",
        "blockUser",
        "restore",
        "buildReport",
        "report_data",
        "restore",
        "action",
        "result",
        "monitorStartTime",
        "format",
        "sourceUserId",
        "format",
        "action",
        "format",
        "restore",
        "format",
        "restore",
        "format",
        "restore_count",
        "format",
        "result",
        "user_email_string",
        "str1",
        "str2",
        "str3",
        "str4",
        "str5",
        "str6",
        "user_email_string",
        "format",
        "separator",
        "admin_email_string",
        "str1",
        "str2",
        "str3",
        "str4",
        "str5",
        "str6",
        "admin_email_string",
        "format",
        "CSV_FILE",
        "separator",
        "user_email_trigger",
        "EMAIL_ARCHIVE_OWNER",
        "getUserEmail",
        "user",
        "user_email",
        "sendEmail",
        "USE_MAILX",
        "user_email",
        "user_email_string",
        "len",
        "report_data",
        "report_data",
        "keys",
        "open",
        "CSV_FILE",
        "csv_file",
        "csv",
        "DictWriter",
        "csv_file",
        "keys",
        "dict_writer",
        "writeheader",
        "dict_writer",
        "writerows",
        "report_data",
        "sendEmail",
        "USE_MAILX",
        "c42_admin_email",
        "admin_email_string",
        "storeDataToDisk",
        "DATA_FILE",
        "data",
        "main"
    ],
    "literals": [
        "'https://master-server.example.com'",
        "'4285'",
        "'admin'",
        "'serect_password'",
        "'c42admin@example.com'",
        "'1100'",
        "'WARN'",
        "'WARN'",
        "'NONE'",
        "'BLOCK'",
        "'restoreWatchData'",
        "'restoreWatch.csv'",
        "'smtp.your_email_server.com'",
        "'Default'",
        "'user@your_email_server.com'",
        "'secret_password'",
        "'too_many_restores_action'",
        "'too_many_restores_threshold'",
        "'non_origin_device_restore_action'",
        "'non_owner_restore_action'",
        "'web_restore_action'",
        "'monitorStartTime'",
        "'restores'",
        "'restoreId'",
        "'1'",
        "'too_many_restores_action'",
        "'NONE'",
        "'too_many_restores_threshold'",
        "'non_origin_device_restore_action'",
        "'WARN'",
        "'non_owner_restore_action'",
        "'WARN'",
        "'web_restore_action'",
        "'WARN'",
        "'firstLook'",
        "'rb'",
        "'wb'",
        "':'",
        "'/api/restoreRecord'",
        "'sourceUserId'",
        "'data'",
        "'restoreRecords'",
        "'firstLook'",
        "'firstLook'",
        "'restores'",
        "'restoreId'",
        "'restores'",
        "'restoreId'",
        "'Event type'",
        "'restoreId'",
        "'restoreId'",
        "'startDate'",
        "'startDate'",
        "'Device owner Id'",
        "'sourceUserId'",
        "'Restore user Id'",
        "'requestingUserId'",
        "'File count'",
        "'fileCount'",
        "'Type'",
        "'type'",
        "'Action'",
        "'Action result'",
        "'Monitoring start'",
        "':'",
        "'/api/UserBlock/'",
        "'SUCCESS'",
        "'FAIL'",
        "'restoreWatchEmail.tmp'",
        "'w'",
        "\"cat restoreWatchEmail.tmp | mailx -s 'RestoreWatch alert!' \"",
        "'restoreWatchEmail.tmp'",
        "'restoreWatchEmail.tmp'",
        "'rb'",
        "'Subject'",
        "'restoreWatch Data Leak & Protection Report'",
        "'From'",
        "'To'",
        "'Default'",
        "'Default'",
        "'restoreWatchEmail.tmp'",
        "':'",
        "'/api/User/'",
        "'data'",
        "'email'",
        "'@'",
        "'SUMMARY OF ALERTS AND ACTIONS\\n'",
        "\"***********************************************\\n\"",
        "'monitorStartTime'",
        "'ALERT FROM RESTORE WATCH REGARDING YOUR DATA\\n'",
        "'ALL'",
        "'restores'",
        "'non_owner_restore_action'",
        "'NONE'",
        "'non_owner_restore_action'",
        "'N/A'",
        "'sourceUserId'",
        "'requestingUserId'",
        "'BLOCK'",
        "'requestingUserId'",
        "'Non-owner restore'",
        "\"Non-owner restore detected for user with GUID {}.\\n\"",
        "\"Action taken: {}\\n\"",
        "\"The restoring user's GUID is {}\\n\"",
        "'requestingUserId'",
        "\"The accepting device is {}\\n\"",
        "'acceptingComputerGuid'",
        "\"Action result: {}\\n\"",
        "\"\\nPlease contact your CrashPlan administrator.\\n{}\"",
        "\"\\nPlease view the CSV file {} for more details.\\n{}\"",
        "'non_origin_device_restore_action'",
        "'NONE'",
        "'non_origin_device_restore_action'",
        "'N/A'",
        "'sourceUserId'",
        "'sourceComputerGuid'",
        "'acceptingComputerGuid'",
        "'BLOCK'",
        "'requestingUserId'",
        "'Non-origin device restore'",
        "\"Non-origin device restore detected for user with GUID {}.\\n\"",
        "\"Action taken: {}\\n\"",
        "\"The restoring user's GUID is {}\\n\"",
        "'requestingUserId'",
        "\"The accepting device is {}\\n\"",
        "'acceptingComputerGuid'",
        "\"Action result: {}\\n\"",
        "\"\\nPlease contact your CrashPlan administrator.\\n{}\"",
        "\"\\nPlease view the CSV file {} for more details.\\n{}\"",
        "'web_restore_action'",
        "'NONE'",
        "'web_restore_action'",
        "'N/A'",
        "'sourceUserId'",
        "'type'",
        "'WEB'",
        "'BLOCK'",
        "'requestingUserId'",
        "'Web restore detected'",
        "\"Web restore detected for user with GUID {}.\\n\"",
        "\"Action taken: {}\\n\"",
        "\"The restoring user's GUID is {}\\n\"",
        "'requestingUserId'",
        "\"The accepting device is {}\\n\"",
        "'acceptingComputerGuid'",
        "\"Action result: {}\\n\"",
        "\"\\nPlease contact your CrashPlan administrator.\\n{}\"",
        "\"\\nPlease view the CSV file {} for more details.\\n{}\"",
        "'too_many_restores_action'",
        "'NONE'",
        "'too_many_restores_action'",
        "'N/A'",
        "'too_many_restores_threshold'",
        "'sourceUserId'",
        "'BLOCK'",
        "'requestingUserId'",
        "'Too many restores'",
        "\"Too many restores detected for user with GUID {}.\\n\"",
        "\"Action taken: {}\\n\"",
        "\"The restoring user's GUID is {}\\n\"",
        "'requestingUserId'",
        "\"The accepting device is {}\\n\"",
        "'acceptingComputerGuid'",
        "\"Total number of restores since last monitoring event: {}\\n\"",
        "\"Action result: {}\\n\"",
        "\"\\nPlease contact your CrashPlan administrator.\\n{}\"",
        "\"\\nPlease view the CSV file {} for more details.\\n{}\"",
        "'ab+'"
    ],
    "variables": [
        "c42_master",
        "c42_port",
        "c42_admin",
        "c42_password",
        "c42_admin_email",
        "USERID",
        "TOO_MANY_RESTORES_ACTION",
        "TOO_MANY_RESTORES_THRESHOLD",
        "NON_ORIGIN_DEVICE_RESTORE_ACTION",
        "NON_OWNER_RESTORE_ACTION",
        "WEB_RESTORE_ACTION",
        "EMAIL_ARCHIVE_OWNER",
        "DATA_FILE",
        "CSV_FILE",
        "VERIFY_CERT",
        "USE_MAILX",
        "MAIL_HOST",
        "SMTP_USE_SSL",
        "SMTP_PORT",
        "SMTP_REQUIRES_AUTH",
        "SMTP_USER",
        "SMTP_PASS",
        "SMTP_SENDING_USER",
        "initial_data",
        "now",
        "default_key_values",
        "data_from_file",
        "data_from_file",
        "key",
        "request_url",
        "payload",
        "payload",
        "new_restores_json",
        "new_restores_converted_to_python_object",
        "user_data",
        "last_restore",
        "last_restore",
        "temp_list_restores",
        "restoreId",
        "row",
        "row",
        "row",
        "row",
        "row",
        "row",
        "row",
        "row",
        "row",
        "row",
        "row",
        "request_url",
        "r",
        "f",
        "mail_cmd",
        "p",
        "email_file",
        "email_msg",
        "email_msg",
        "email_msg",
        "email_msg",
        "s",
        "s",
        "s",
        "s",
        "request_url",
        "user_info_json",
        "convert_user_info_to_python_object",
        "email",
        "email",
        "report_data",
        "admin_email_string",
        "separator",
        "temp_data",
        "data",
        "data",
        "user_data",
        "monitorStartTime",
        "user_email_string",
        "user_email_trigger",
        "user",
        "restore_events",
        "new_restores",
        "action",
        "result",
        "sourceUserId",
        "result",
        "user_email_trigger",
        "str1",
        "str2",
        "str3",
        "str4",
        "str5",
        "action",
        "result",
        "sourceUserId",
        "result",
        "user_email_trigger",
        "str1",
        "str2",
        "str3",
        "str4",
        "str5",
        "action",
        "result",
        "sourceUserId",
        "result",
        "user_email_trigger",
        "str1",
        "str2",
        "str3",
        "str4",
        "str5",
        "action",
        "result",
        "restore_count",
        "restore",
        "sourceUserId",
        "result",
        "user_email_trigger",
        "str1",
        "str2",
        "str3",
        "str4",
        "str5",
        "str6",
        "user_email",
        "keys",
        "dict_writer"
    ],
    "comments": [
        "All modules below are part of the standard Python distribution",
        "Used to serialize data before writing to disk",
        "Used to send email to those who get alerts (note being used in version 1.0)",
        "Used to run Unix commands from within Python (currently sending email via mailx and bash)",
        "ADMIN PARAMETERS",
        "Come up with a safer method for deployment. Store in file with restricted read access?",
        "MONITORED USER PARAMETERS",
        "",
        "Enter a single user to monitor and the user's configuration, by setting the",
        "constants below. To enter multiple users, fill in the data",
        "dictionary \"initial_data\" with extra iterations of user entries by",
        "copying the first user's entry, then changing USERID to the actual",
        "userId's of the additional users.  The other constants can be copied verbatim.",
        "Options are: NONE, WARN, BLOCK. Case sensitive.",
        "The constants set below are not stored in the user state binary file, and can be changed after monitoring has started, without resetting/deleting binary file.",
        "REPORTING SETTINGS",
        "MISC PARAMETERS",
        "SSL SECURITY SETTINGS",
        "Verify SSL certs for requests to Code42 API. Set to False if your",
        "master server's cert is self-certified to avoid fatal error. Case",
        "sensitive.",
        "EMAIL SETTINGS",
        "Set to string \"Default\" to use defaults set by SMTP Lib, or to an integer value.",
        "Modify initial_data dictionary object with care.",
        "The 'w' option overwrites any existing file",
        "This function should be improved to page back to the last stored",
        "restore record if necessary. Currently, if more than 100 restores",
        "were performed for this user between runs, restores over 100 will",
        "be ignored.",
        "Remove this from master branch",
        "If this is the first time this user has been monitored, this is a",
        "special case: just store the last restore as the benchmark for",
        "change. # If there was no \"last restore,\" then nothing will be",
        "inserted, but the first seeded restore with restoreID of 1 will be",
        "there, and the # flag firstLook will be changed to false",
        "",
        "The restoreId of the restore event is greater than the restoreId of the last one in the list, so append it. I assume that the restoreIds increase with each new restore.",
        "Errors for sending email can be caught below. Use for testing script.",
        "output, errors = p.communicate()",
        "print errors,output",
        "This list contains the report to send via email and output to a CSV file on disk",
        "If there is no stored data, then load initial data from variables set in script",
        "When user none is passed to getNewUserRestores, returned restores are not restricted to a user",
        "Further processing is required to determine which events are new, by",
        "comparing the events to the previously stored events",
        "Append the new restores for this user to the current data file in memory",
        "Check for non-owner restore",
        "Build the string to send in email about this event",
        "Check for non-origin device restore",
        "Build the string to send in email about this event",
        "Check for Web restore",
        "Build the string to send in email about this event",
        "Check for too many restores.",
        "The restore to use for determining the suspect user to block taken from last in series (most recent)",
        "Only makes sense to set this for when user is not ALL (None)",
        "A block action doesn't make sense for all users and possibly different users doing restores",
        "Include the very last restore in the report",
        "Build the string to send in email about this event",
        "This doesn't really make sense for ALL users",
        "This doesn't really make sense for ALL users",
        "This doesn't really make sense for ALL users",
        "Create CSV report and write to disk file.",
        "Output the report data to a disk file in CSV format.",
        "Append the new data to the current file. Delete the csv file manually if desired.",
        "Store the important user and config data to disk between runs"
    ],
    "docstrings": [
        "'''\nSUMMARY: restoreWatch.py is a data leak prevention (DSP) solution that\nmonitors users in the Code42 environment for restore activity that might\nbe of concern. It can take actions to stop suspcious restores from\noccurring after detection, and warn admins  and users about the activity.\n\nVersion 1.3\nby Todd Ojala\nDate: 5/28/2015\nOriginal creation date: 4/24/2015\n\nCopyright (c) 2015 Code 42 Software\n\nLicensed under the Apache License, Version 2.0 (the â€œLicenseâ€); you may\nnot use this file except in compliance with the License. You may obtain\na copy of the License at\n \nwww.apache.org/licenses/LICENSE-2.0\n \nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an â€œAS ISâ€ BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n** DISCLAIMER **\nThis script is provided as-is, and is not guaranteed to be suitable for\nany particular application. Use at your own risk.\n\nPURPOSE\nTo prevent data leaks, detect restore activity of concern, and take\naction when such activity is detected. Actions include warning the\nadmin, blocking admin, and blocking the user who has initiated the\nrestores.\n\nOUTPUT\nThe script produces the following output:\n1. Email to administrator or designated recipient of warning messages.\n2. CSV file with warnings, affected users, actions taken, and other\ninformation. This file is only created or appended to when a trigger\nevent is detected!\n3. restoreWatchData: a binary file that stores data needed by the script.\nThis file is not user-viewable.\n\nREQUIRED PERMISSIONS\nThe user credentials used to invoke this script must have SYSADMIN\npermission.\n\nWARNING\nThis script will contain the credentials of a user with SYSADMIN rights\non your Code42 master server in order to function as intended.\n** Take appropriate precautions to restrict access to this file **\n\nINSTRUCTIONS:\n1. Copy the script to a safe location on your computer's filesystem. Set\n    file permissions so that non-trusted users cannot read the contents\n    of the file.\n2. Set the variables under the \"ADMIN PARAMETERS\" section to values that\n    work in your envirnment. WARNING: as this section may contain\n    sensitive info, make sure that only trusted users have access to\n    this file.\n3. Set the variables under the \"MONITORED USER PARAMETERS\" section, or\n    add multiple users to the \"initial_data\" dictionary object with\n    care.\n4. Set the email address for the person who should receive alerts. \n5. Configure your system's cron job scheduler (or other scheduler) to\n    run the script at an interval that is appropriate for your\n    environment, e.g. every minute.\n6. To reset the start of monitoring, simply delete or rename the file\n\"restoreWatchData.\"\n8. To change the monitoring parameters or actions after monitoring has\n    started, change the constants under \"MONITORED USER PARAMETERS\",\n    then delete the file \"restoreWatchData.\"\n\nAVAILABLE TRIGGERS FOR WARNINGS, ALERTS AND ACTIONS\n1. TOO_MANY_RESTORES_ACTION: What action to take if the number of\n    restores of a user's data exceeds a defined rate. Values: NONE,\n    WARN, BLOCK.\n2. TOO_MANY_RESTORES_THRESHOLD: The threshold for the action in #1.\n    Values: integers from 1 to a large number. This threshold is a count\n    of the number of restores that have been occurred since the script\n    last ran. The count starts over after each run.\n3. NON_ORIGIN_DEVICE_RESTORE_ACTION: What action to take if a user's\n    files are restored to a device that was not the source of the files.\n    Values: NONE, WARN, BLOCK\n4. NON_OWNER_RESTORE_ACTION: What action to take if a user's files are\n    restored by a user who is not the owner of the files. Values: NONE,\n    WARN, BLOCK\n5. WEB_RESTORE_ACTION: What action to take if a user's files are\nrestored via a web restore. Values: NONE, WARN, BLOCK\n\nTECHNICAL NOTES\nWorking data about users in the monitored list, the restores that have\nbeen detected, actions to take, and thresholds are stored in the file\n\"restoreWatchData.\" This file is not human readable, but may contain\nsensitive info. The file name may be changed under MISC PARAMETERS\nbelow, to facilitate running multiple instances of the script.\n\nThe parameters are set only during the first time the script is run, and\nthen stored in \"restoreWatchData.\" The setup parameters will not be read\nagain, unless the file \"restoreWatchData\" is deleted or renamed. To\nforce the parameters to be read again, delete or rename the file\n\"restoreWatchData\". This also resets the monitoring \"start time\", and\nresets any other variables used by the script.\n\nThe results of the restore audit are stored in a file named\nrestoreWatch.csv. This file is cumulative, and stores all previous data\nwritten to it, even if monitoring is reset by deleting or renaming\nrestoreWatchData.\n\nThe CSV file name may be changed under MISC PARAMETERS below, to\nfacilitate running multiple instances of the script.\n\n\nModifications:\n5/6/2015 Improved docstrings for each function, so that the Python help function will work for each function.\n    Also improved email function by breaking out into separate function that can use mailx or smtplib based on user preference \n5/8/2015 Further improvements to email functions. Mailx now uses the email address specified in the configuration variable/constant\n    c42_admin_email. Smtplib can send successfully to an email server that uses SSL.\n5/14/2015 Lots of changes, including support for sending email to the owner of the archive, and but fixes.\n5/20/2015 Starting changes based on meeting with Peter L., Justin G., and Marc J. of 5/15/2015\n5/27/2015 Improvements to comments, doc string, and general readability.\n5/28/2015 Testing, added missing Web Restore event detection code.\n\n'''",
        "*** Do not change anything below this line! ***",
        "''' Retrieves the serialized user data and program data from disk\n    where it is stored between script executions. '''",
        "''' Serializes and stores user data and program data to disk. '''",
        "''' Verifies that each required key in the main data dictionary used to\n    store user data, actions, thresholds, etc. exists. If not, create\n    the key and give it a default value. '''",
        "''' Retrieve up to the last 100 restores for this user or for all users\n    if no user supplied. '''",
        "'''\n    Retrieve all restores going back in time by the defined number of hours. The default number of hours is 24.\n    '''",
        "''' Returns only the restores that are new for this user since the last\n    monitoring event (the last time the script was run). '''",
        "'''\n    Build the CSV report by adding a new entry to the list containing the data. \n    '''",
        "''' Block specified user using the UserBlock resource of the Code42\n    API. '''",
        "''' Write admin email to disk, but only if there were events to\n    report In the current version, using mailx requires the email text\n    to be on a disk file. '''",
        "''' Retrieve the email address of the user using the API '''"
    ],
    "functions": [
        "getStoredDataFromDisk",
        "storeDataToDisk",
        "verifyData",
        "getNewUserRestores",
        "getRecentRestores",
        "newRestoreEvents",
        "buildReport",
        "blockUser",
        "sendEmail",
        "getUserEmail",
        "main"
    ],
    "classes": []
}