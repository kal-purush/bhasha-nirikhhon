{
    "identifiers": [
        "os",
        "re",
        "argparse",
        "threading",
        "uuid",
        "colorama",
        "colorama",
        "Fore",
        "Style",
        "paramiko",
        "requests",
        "sys",
        "yaml",
        "args",
        "args",
        "discovery_url",
        "get_nodes_from_discovery_url",
        "args",
        "discovery_url",
        "get_nodes_from_discovery_url",
        "get_discovery_url_from_user_data",
        "discovery_url",
        "requests",
        "get",
        "discovery_url",
        "json",
        "json",
        "node",
        "discovery_nodes",
        "node",
        "re",
        "search",
        "value",
        "group",
        "nodes",
        "append",
        "ip",
        "nodes",
        "IOError",
        "discovery_url",
        "log_info",
        "name",
        "os",
        "path",
        "dirname",
        "file",
        "os",
        "path",
        "abspath",
        "os",
        "path",
        "join",
        "current_dir",
        "name",
        "yaml",
        "safe_load",
        "user_data_file",
        "user_data",
        "IOError",
        "name",
        "ip",
        "re",
        "match",
        "ip",
        "node_ips",
        "Template",
        "rules_template_text",
        "rules_template",
        "substitute",
        "node_ips",
        "join",
        "node_ips",
        "multiport_private",
        "multiport_private",
        "host_ips",
        "rules",
        "private_key",
        "detect_and_create_private_key",
        "private_key",
        "ip",
        "host_ips",
        "target",
        "apply_rules",
        "args",
        "ip",
        "rules",
        "pkey",
        "t",
        "setDaemon",
        "t",
        "start",
        "threads",
        "append",
        "t",
        "thread",
        "threads",
        "thread",
        "join",
        "private_key",
        "private_key",
        "read",
        "private_key",
        "seek",
        "private_key_text",
        "paramiko",
        "RSAKey",
        "from_private_key",
        "private_key",
        "private_key_text",
        "paramiko",
        "DSSKey",
        "from_private_key",
        "private_key",
        "ValueError",
        "private_key",
        "name",
        "host_ip",
        "rules",
        "private_key",
        "paramiko",
        "SSHClient",
        "ssh",
        "set_missing_host_key_policy",
        "paramiko",
        "AutoAddPolicy",
        "ssh",
        "connect",
        "host_ip",
        "username",
        "allow_agent",
        "look_for_keys",
        "pkey",
        "private_key",
        "uuid",
        "uuid4",
        "ssh",
        "open_sftp",
        "ssh",
        "open_sftp",
        "sftp",
        "open",
        "temp_file",
        "write",
        "rules",
        "temp_file",
        "command",
        "commands",
        "ssh",
        "exec_command",
        "command",
        "stdout",
        "channel",
        "recv_exit_status",
        "ssh",
        "close",
        "log_success",
        "host_ip",
        "colorama",
        "init",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "required",
        "file",
        "dest",
        "help",
        "parser",
        "add_argument",
        "action",
        "dest",
        "help",
        "parser",
        "add_argument",
        "dest",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "dest",
        "help",
        "parser",
        "parse_args",
        "get_nodes_from_args",
        "args",
        "args",
        "hosts",
        "args",
        "hosts",
        "nodes",
        "ip",
        "nodes",
        "validate_ip_address",
        "ip",
        "node_ips",
        "append",
        "ip",
        "log_warning",
        "ip",
        "len",
        "node_ips",
        "ValueError",
        "ip",
        "hosts",
        "validate_ip_address",
        "ip",
        "host_ips",
        "append",
        "ip",
        "log_warning",
        "ip",
        "len",
        "host_ips",
        "ValueError",
        "log_info",
        "get_firewall_contents",
        "node_ips",
        "args",
        "log_success",
        "log_debug",
        "rules",
        "log_info",
        "apply_rules_to_all",
        "host_ips",
        "rules",
        "args",
        "private_key",
        "log_success",
        "message",
        "Style",
        "DIM",
        "Fore",
        "MAGENTA",
        "message",
        "Fore",
        "RESET",
        "Style",
        "RESET_ALL",
        "message",
        "Fore",
        "CYAN",
        "message",
        "Fore",
        "RESET",
        "message",
        "Fore",
        "YELLOW",
        "message",
        "Fore",
        "RESET",
        "message",
        "Style",
        "BRIGHT",
        "Fore",
        "GREEN",
        "message",
        "Fore",
        "RESET",
        "Style",
        "RESET_ALL",
        "message",
        "Style",
        "BRIGHT",
        "Fore",
        "RED",
        "message",
        "Fore",
        "RESET",
        "Style",
        "RESET_ALL",
        "main",
        "e",
        "log_error",
        "e",
        "message",
        "sys",
        "exit"
    ],
    "literals": [
        "'node'",
        "'nodes'",
        "'value'",
        "'([0-9]{1,3}\\.){3}[0-9]{1,3}'",
        "'Could not load nodes from discovery url '",
        "'linode-user-data.yaml'",
        "'Loading discovery url from '",
        "'r'",
        "'coreos'",
        "'etcd'",
        "'discovery'",
        "'Could not load discovery url from '",
        "'([0-9]{1,3}\\.){3}[0-9]{1,3}'",
        "' -s 192.168.0.0/16'",
        "''",
        "','",
        "'-----BEGIN RSA PRIVATE KEY-----'",
        "'-----BEGIN DSA PRIVATE KEY-----'",
        "'Invalid private key file '",
        "'core'",
        "'/tmp/'",
        "'w'",
        "'sudo mv '",
        "' /var/lib/iptables/rules-save'",
        "'sudo chown root:root /var/lib/iptables/rules-save'",
        "'sudo systemctl enable iptables-restore.service'",
        "'sudo systemctl start iptables-restore.service'",
        "'Applied rule to '",
        "'Apply a \"Security Group\" to a Deis cluster'",
        "'--private-key'",
        "'private_key'",
        "'Cluster SSH Private Key'",
        "'--private'",
        "'store_true'",
        "'private'",
        "'Only allow access to the cluster from the private network'",
        "'--discovery-url'",
        "'discovery_url'",
        "'Etcd discovery url'",
        "'--hosts'",
        "'+'",
        "'hosts'",
        "'The IP addresses of the hosts to apply rules to'",
        "'Invalid IP will not be added to security group: '",
        "'No valid IP addresses in security group.'",
        "'Host has invalid IP address: '",
        "'No valid host addresses.'",
        "'Generating iptables rules...'",
        "'Generated rules:'",
        "'Applying rules...'",
        "'Done!'",
        "\"__main__\""
    ],
    "variables": [
        "nodes",
        "json",
        "discovery_nodes",
        "value",
        "ip",
        "name",
        "current_dir",
        "user_data_file",
        "user_data",
        "rules_template_text",
        "multiport_private",
        "rules_template",
        "pkey",
        "threads",
        "t",
        "private_key_text",
        "ssh",
        "temp_file",
        "sftp",
        "commands",
        "stdin",
        "stdout",
        "stderr",
        "parser",
        "args",
        "nodes",
        "hosts",
        "node_ips",
        "host_ips",
        "rules"
    ],
    "comments": [
        "!/usr/bin/env python",
        "connect to the server via ssh",
        "copy the rules to the temp directory",
        "move the rules in to place and enable and run the iptables-restore.service"
    ],
    "docstrings": [
        "\"\"\"\nApply a \"Security Group\" to the members of an etcd cluster.\n\nUsage: apply-firewall.py\n\"\"\"",
        "\"\"\"*filter\n:INPUT DROP [0:0]\n:FORWARD DROP [0:0]\n:OUTPUT ACCEPT [0:0]\n:DOCKER - [0:0]\n:Firewall-INPUT - [0:0]\n-A INPUT -j Firewall-INPUT\n-A FORWARD -j Firewall-INPUT\n-A Firewall-INPUT -i lo -j ACCEPT\n-A Firewall-INPUT -p icmp --icmp-type echo-reply -j ACCEPT\n-A Firewall-INPUT -p icmp --icmp-type destination-unreachable -j ACCEPT\n-A Firewall-INPUT -p icmp --icmp-type time-exceeded -j ACCEPT\n# Ping\n-A Firewall-INPUT -p icmp --icmp-type echo-request -j ACCEPT\n# Accept any established connections\n-A Firewall-INPUT -m conntrack --ctstate  ESTABLISHED,RELATED -j ACCEPT\n# Enable the traffic between the nodes of the cluster\n-A Firewall-INPUT -s $node_ips -j ACCEPT\n# Allow connections from docker container\n-A Firewall-INPUT -i docker0 -j ACCEPT\n# Accept ssh, http, https and git\n-A Firewall-INPUT -m conntrack --ctstate NEW -m multiport$multiport_private -p tcp --dports 22,2222,80,443 -j ACCEPT\n# Log and drop everything else\n-A Firewall-INPUT -j REJECT\nCOMMIT\n\"\"\""
    ],
    "functions": [
        "get_nodes_from_args",
        "get_nodes_from_discovery_url",
        "get_discovery_url_from_user_data",
        "validate_ip_address",
        "get_firewall_contents",
        "apply_rules_to_all",
        "detect_and_create_private_key",
        "apply_rules",
        "main",
        "log_debug",
        "log_info",
        "log_warning",
        "log_success",
        "log_error"
    ],
    "classes": []
}