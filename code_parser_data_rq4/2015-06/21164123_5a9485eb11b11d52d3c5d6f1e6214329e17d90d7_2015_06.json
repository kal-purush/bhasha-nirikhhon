{
    "identifiers": [
        "unittest",
        "ut",
        "espressomd",
        "espressomd",
        "_system",
        "es",
        "espressomd",
        "code_info",
        "numpy",
        "np",
        "espressomd",
        "interactions",
        "FeneBond",
        "HarmonicBond",
        "Dihedral",
        "Angle_Harmonic",
        "Angle_Cosine",
        "Angle_Cossquare",
        "Subt_Lj",
        "Stretching_Force",
        "Area_Force_Local",
        "Bending_Force",
        "Volume_Force",
        "Area_Force_Global",
        "Stretchlin_Force",
        "ut",
        "TestCase",
        "espressomd",
        "inType",
        "outType",
        "inParams",
        "outParams",
        "inType",
        "outType",
        "k",
        "inParams",
        "keys",
        "k",
        "outParams",
        "outParams",
        "k",
        "inParams",
        "k",
        "system",
        "part",
        "pid",
        "_bondId",
        "_bondClass",
        "_params",
        "_bondId",
        "_bondClass",
        "_params",
        "system",
        "bondedInter",
        "bondClass",
        "system",
        "bondedInter",
        "bondId",
        "bondClass",
        "typeNumber",
        "outBond",
        "typeNumber",
        "outBond",
        "assertTrue",
        "bondsMatch",
        "tnIn",
        "tnOut",
        "outParams",
        "bondClass",
        "typeName",
        "bondId",
        "__str__",
        "outParams",
        "__str__",
        "func",
        "system",
        "bondedInter",
        "HarmonicBond",
        "k",
        "r_0",
        "system",
        "bondedInter",
        "assertTrue",
        "isinstance",
        "bond",
        "HarmonicBond",
        "generateTestForBondParams",
        "FeneBond",
        "generateTestForBondParams",
        "FeneBond",
        "generateTestForBondParams",
        "HarmonicBond",
        "generateTestForBondParams",
        "HarmonicBond",
        "generateTestForBondParams",
        "Dihedral",
        "generateTestForBondParams",
        "Angle_Harmonic",
        "generateTestForBondParams",
        "Angle_Cosine",
        "generateTestForBondParams",
        "Angle_Cossquare",
        "generateTestForBondParams",
        "Subt_Lj",
        "generateTestForBondParams",
        "Stretching_Force",
        "generateTestForBondParams",
        "Area_Force_Local",
        "generateTestForBondParams",
        "Bending_Force",
        "generateTestForBondParams",
        "Volume_Force",
        "generateTestForBondParams",
        "Area_Force_Global",
        "generateTestForBondParams",
        "Stretchlin_Force",
        "code_info",
        "features",
        "ut",
        "main"
    ],
    "literals": [
        "\": value set and value gotten back differ for bond id \"",
        "\": \"",
        "\" vs. \"",
        "\"The bond was created as harmonic bond but the instance gotten back is of different type.\"",
        "\"r_0\"",
        "\"k\"",
        "\"d_r_max\"",
        "\"r_0\"",
        "\"k\"",
        "\"d_r_max\"",
        "\"r_0\"",
        "\"k\"",
        "\"r_0\"",
        "\"k\"",
        "\"r_cut\"",
        "\"mult\"",
        "\"bend\"",
        "\"phase\"",
        "\"bend\"",
        "\"phi0\"",
        "\"bend\"",
        "\"phi0\"",
        "\"bend\"",
        "\"phi0\"",
        "\"k\"",
        "\"r\"",
        "\"r0\"",
        "\"ks\"",
        "\"A0_l\"",
        "\"ka_l\"",
        "\"phi0\"",
        "\"kb\"",
        "\"V0\"",
        "\"kv\"",
        "\"A0_g\"",
        "\"ka_g\"",
        "\"r0\"",
        "\"kslin\"",
        "\"__main__\"",
        "\"Features: \""
    ],
    "variables": [
        "system",
        "pid",
        "tol",
        "pos",
        "bondId",
        "bondClass",
        "bondId",
        "outBond",
        "tnIn",
        "tnOut",
        "outParams",
        "bond",
        "test_fene",
        "test_fene2",
        "test_harmonic",
        "test_harmonic2",
        "test_dihedral",
        "test_angle_harm",
        "test_angle_cos",
        "test_angle_cossquare",
        "test_subt_lj",
        "test_stretching_force",
        "test_area_force_local",
        "test_bending_force",
        "test_volume_force",
        "test_area_force_global",
        "test_stretchlin_force"
    ],
    "comments": [
        "",
        "Copyright (C) 2013,2014 The ESPResSo project",
        "",
        "This file is part of ESPResSo.",
        "",
        "ESPResSo is free software: you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation, either version 3 of the License, or",
        "(at your option) any later version.",
        "",
        "ESPResSo is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU General Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License",
        "along with this program.  If not, see <http://www.gnu.org/licenses/>.",
        "",
        "Tests particle property setters/getters",
        "def __init__(self,particleId):",
        "self.pid=particleId",
        "the system which will be tested",
        "Particle id to work on",
        "Error tolerance when comparing arrays/tuples...",
        "This code is run at the execution of the generated function.",
        "It will use the state of the variables in the outer function,",
        "which was there, when the outer function was called"
    ],
    "docstrings": [
        "\"\"\"Check, if the bond type set and gotten back as well as the bond \n        parameters set and gotten back match. Only check keys present in\n        inParams.\n        \"\"\"",
        "\"\"\"Generates test cases for checking bond parameters set and gotten back\n        from Es actually match. Only keys which are present  in _params are checked\n        1st arg: Id of the bonded ia in Espresso to test on, i.e., 0,2,1...\n        2nd: Class of the bond potential to test, ie.e, FeneBond, HarmonicBond\n        3rd: Bond parameters as dictionary, i.e., {\"k\"=1.,\"r_0\"=0.\n        \"\"\""
    ],
    "functions": [
        "bondsMatch",
        "setUp",
        "generateTestForBondParams",
        "func",
        "test_aa_bondedInterSetterGetter"
    ],
    "classes": [
        "ParticleProperties"
    ]
}