{
    "identifiers": [
        "sys",
        "re",
        "urllib",
        "request",
        "urlopen",
        "urllib",
        "parse",
        "parse",
        "urllib",
        "error",
        "URLError",
        "ImportError",
        "urllib2",
        "urlopen",
        "URLError",
        "urlparse",
        "parse",
        "domain",
        "parse",
        "urlparse",
        "domain",
        "p",
        "scheme",
        "parse",
        "urlparse",
        "domain",
        "p",
        "geturl",
        "domain",
        "getUrl",
        "domain",
        "crawlForEmail",
        "url",
        "addresses",
        "url",
        "urlopen",
        "url",
        "resp",
        "URLError",
        "err",
        "s",
        "re",
        "compile",
        "email_pattern_string",
        "pattern",
        "findall",
        "s",
        "email",
        "email",
        "startswith",
        "email",
        "email",
        "emails",
        "s",
        "domain",
        "re",
        "compile",
        "link_pattern_string",
        "pattern",
        "findall",
        "s",
        "parse",
        "urljoin",
        "domain",
        "link",
        "link",
        "links",
        "link",
        "link",
        "links",
        "parse",
        "urlparse",
        "link",
        "geturl",
        "startswith",
        "domain",
        "links",
        "url",
        "domain",
        "visited",
        "getPage",
        "url",
        "resp",
        "resp",
        "read",
        "domain",
        "resp",
        "geturl",
        "visited",
        "add",
        "domain",
        "getEmails",
        "rtext",
        "getLinks",
        "rtext",
        "domain",
        "link",
        "link",
        "links",
        "link",
        "visited",
        "visited",
        "update",
        "links",
        "link",
        "links",
        "emails",
        "update",
        "crawlForEmail",
        "link",
        "domain",
        "visited",
        "emails",
        "len",
        "sys",
        "argv",
        "printUsage",
        "findEmailAddresses",
        "sys",
        "argv",
        "len",
        "emails",
        "email",
        "emails",
        "email"
    ],
    "literals": [
        "''",
        "'http://'",
        "\"\"",
        "r\"\"\"([A-Za-z0-9#\\-_~!$&'()*+,;=:]+(?:\\.[A-Za-z0-9#\\-_~!$&'()*+,;=:]+)*@[A-Za-z0-9\\-]+\\.[A-Za-z0-9\\-]+)\"\"\"",
        "\"mailto:\"",
        "r\"\"\"<a[^<>]+href=\"([^\"]+)\"\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"USAGE: find_email_addresses.py [DOMAIN.EXT]\"",
        "\"__main__\"",
        "\"Found these email addresses:\""
    ],
    "variables": [
        "p",
        "p",
        "url",
        "addresses",
        "resp",
        "email_pattern_string",
        "pattern",
        "emails",
        "link_pattern_string",
        "pattern",
        "links",
        "links",
        "links",
        "resp",
        "rtext",
        "domain",
        "emails",
        "links",
        "links",
        "emails"
    ],
    "comments": [
        "Python 3",
        "Python 2",
        "First, construct a valid url from the domain name",
        "Crawl",
        "A regex pattern for email addresses",
        "Add the domain to relative links,",
        "Finally, remove any links not in the domain",
        "First get all text, and get all emails and links",
        "Remove any links already visited",
        "Add all of the links intended to visit to the visited set",
        "For each link",
        "Recur on this function, add emails to the email set",
        "Return all found emails",
        "Verify the correct number of arguments"
    ],
    "docstrings": [
        "\"\"\"\n    Given a domain, return a valid URL, inserting a scheme if necessary.\n    \"\"\"",
        "\"\"\"\n    Given a domain name, find and return a list of email addresses on that\n    web page, and any discoverable web page in the domain.\n    \"\"\"",
        "\"\"\"\n    Retrieve webpage stream for a given URL. If the requested resource is not \n    found or an error occurs, the empty string \"\" will be returned.\n    \"\"\"",
        "\"\"\"\n    Find and return all email addresses in the given string s.\n    \"\"\"",
        "\"\"\"\n    Find and return all clickable links in the given string s.\n    \"\"\"",
        "\"\"\"\n    Recursive function that scans for emails in the text on the page at url,\n    then recursively calls on each link on that page in the same domain that\n    is not in the visited set, and returns all emails found in this way.\n    \"\"\"",
        "\"\"\"\n    Prints the usage statement for the program. A domain name should\n    be given as the first and only argument to the program.\n    \"\"\""
    ],
    "functions": [
        "getUrl",
        "findEmailAddresses",
        "getPage",
        "getEmails",
        "getLinks",
        "crawlForEmail",
        "printUsage"
    ],
    "classes": []
}