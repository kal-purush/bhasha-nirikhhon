{
    "identifiers": [
        "describe",
        "it",
        "expect",
        "describe",
        "it",
        "a",
        "expect",
        "a",
        "describe",
        "it",
        "expect",
        "it",
        "expect",
        "describe",
        "it",
        "expect",
        "a",
        "b",
        "expect",
        "a",
        "describe",
        "it",
        "expect",
        "a",
        "it",
        "expect",
        "foo",
        "bar",
        "it",
        "expect",
        "message",
        "expect",
        "message",
        "expect",
        "message",
        "it",
        "expect",
        "a",
        "expect",
        "a",
        "it",
        "expect",
        "a",
        "expect",
        "a",
        "it",
        "expect",
        "expect",
        "a",
        "expect",
        "foo",
        "it",
        "expect",
        "foo",
        "expect",
        "a",
        "it",
        "expect",
        "a",
        "expect",
        "foo",
        "it",
        "expect",
        "a",
        "expect",
        "a",
        "it",
        "expect",
        "e",
        "pi",
        "expect",
        "pi",
        "e",
        "it",
        "expect",
        "pi",
        "e",
        "expect",
        "e",
        "pi",
        "it",
        "expect",
        "pi",
        "e",
        "expect",
        "pi",
        "e",
        "it",
        "a",
        "expect",
        "foo",
        "expect",
        "bar",
        "describe",
        "it",
        "foo",
        "expect",
        "foo",
        "it",
        "foo",
        "expect",
        "foo",
        "expect",
        "describe",
        "beforeEach",
        "foo",
        "foo",
        "afterEach",
        "foo",
        "it",
        "expect",
        "foo",
        "it",
        "expect",
        "foo",
        "expect",
        "describe",
        "beforeEach",
        "foo",
        "foo",
        "afterEach",
        "foo",
        "it",
        "expect",
        "foo",
        "it",
        "expect",
        "foo",
        "expect",
        "describe",
        "beforeEach",
        "bar",
        "it",
        "expect",
        "foo",
        "bar",
        "xdescribe",
        "beforeEach",
        "foo",
        "foo",
        "it",
        "expect",
        "foo",
        "describe",
        "xit",
        "expect",
        "it",
        "it",
        "expect",
        "pending",
        "pending",
        "describe",
        "beforeEach",
        "foo",
        "value",
        "bar",
        "value",
        "spyOn",
        "foo",
        "foo",
        "foo",
        "it",
        "expect",
        "foo",
        "it",
        "expect",
        "foo",
        "expect",
        "foo",
        "it",
        "expect",
        "bar",
        "describe",
        "beforeEach",
        "foo",
        "value",
        "bar",
        "value",
        "bar",
        "spyOn",
        "foo",
        "foo",
        "fetchedBar",
        "foo",
        "it",
        "expect",
        "foo",
        "it",
        "expect",
        "bar",
        "it",
        "expect",
        "fetchedBar",
        "describe",
        "beforeEach",
        "foo",
        "value",
        "bar",
        "value",
        "bar",
        "spyOn",
        "foo",
        "foo",
        "fetchedBar",
        "foo",
        "it",
        "expect",
        "foo",
        "it",
        "expect",
        "bar",
        "it",
        "expect",
        "fetchedBar",
        "describe",
        "beforeEach",
        "foo",
        "value",
        "bar",
        "value",
        "bar",
        "spyOn",
        "foo",
        "foo",
        "fetchedBar",
        "foo",
        "it",
        "expect",
        "foo",
        "it",
        "expect",
        "bar",
        "it",
        "expect",
        "fetchedBar",
        "describe",
        "beforeEach",
        "foo",
        "value",
        "bar",
        "value",
        "spyOn",
        "foo",
        "it",
        "expect",
        "foo",
        "describe",
        "beforeEach",
        "foo",
        "value",
        "bar",
        "value",
        "bar",
        "spyOn",
        "foo",
        "foo",
        "fetchedBar",
        "foo",
        "it",
        "expect",
        "foo",
        "it",
        "expect",
        "bar",
        "it",
        "expect",
        "fetchedBar",
        "it",
        "expect",
        "describe",
        "beforeEach",
        "foo",
        "value",
        "bar",
        "value",
        "spyOn",
        "foo",
        "it",
        "foo",
        "expect",
        "bar",
        "foo",
        "bar",
        "foo",
        "expect",
        "bar",
        "describe",
        "beforeEach",
        "foo",
        "value",
        "bar",
        "value",
        "spyOn",
        "foo",
        "it",
        "expect",
        "foo",
        "foo",
        "expect",
        "foo",
        "it",
        "expect",
        "foo",
        "foo",
        "foo",
        "expect",
        "foo",
        "it",
        "foo",
        "foo",
        "expect",
        "foo",
        "expect",
        "foo",
        "it",
        "foo",
        "foo",
        "expect",
        "foo",
        "it",
        "foo",
        "expect",
        "foo",
        "foo",
        "it",
        "foo",
        "foo",
        "expect",
        "foo",
        "foo",
        "it",
        "foo",
        "foo",
        "expect",
        "foo",
        "foo",
        "it",
        "foo",
        "foo",
        "expect",
        "foo",
        "foo",
        "expect",
        "foo",
        "describe",
        "beforeEach",
        "whatAmI",
        "jasmine",
        "whatAmI",
        "it",
        "expect",
        "whatAmI",
        "it",
        "expect",
        "whatAmI",
        "it",
        "expect",
        "whatAmI",
        "it",
        "expect",
        "whatAmI",
        "it",
        "expect",
        "whatAmI",
        "describe",
        "beforeEach",
        "tape",
        "jasmine",
        "tape",
        "tape",
        "tape",
        "it",
        "expect",
        "tape",
        "expect",
        "tape",
        "expect",
        "tape",
        "expect",
        "tape",
        "it",
        "expect",
        "tape",
        "expect",
        "tape",
        "expect",
        "tape",
        "expect",
        "tape",
        "it",
        "expect",
        "tape",
        "describe",
        "it",
        "expect",
        "jasmine",
        "expect",
        "jasmine",
        "describe",
        "it",
        "jasmine",
        "foo",
        "expect",
        "foo",
        "jasmine",
        "jasmine",
        "describe",
        "beforeEach",
        "foo",
        "it",
        "expect",
        "foo",
        "jasmine",
        "expect",
        "foo",
        "jasmine",
        "describe",
        "it",
        "jasmine",
        "callback",
        "expect",
        "callback",
        "jasmine",
        "expect",
        "callback",
        "jasmine",
        "describe",
        "beforeEach",
        "timerCallback",
        "jasmine",
        "jasmine",
        "afterEach",
        "jasmine",
        "it",
        "setTimeout",
        "timerCallback",
        "expect",
        "timerCallback",
        "jasmine",
        "expect",
        "timerCallback",
        "it",
        "setInterval",
        "timerCallback",
        "expect",
        "timerCallback",
        "jasmine",
        "expect",
        "timerCallback",
        "jasmine",
        "expect",
        "timerCallback",
        "jasmine",
        "expect",
        "timerCallback",
        "describe",
        "beforeEach",
        "done",
        "setTimeout",
        "value",
        "done",
        "it",
        "done",
        "value",
        "expect",
        "value",
        "done",
        "describe",
        "beforeEach",
        "done",
        "done",
        "it",
        "done",
        "setTimeout",
        "done",
        "afterEach",
        "done",
        "done",
        "describe",
        "it",
        "fail",
        "it",
        "fail",
        "it",
        "fail",
        "describe",
        "jasmine",
        "first",
        "second",
        "first",
        "second",
        "first",
        "second",
        "beforeEach",
        "jasmine",
        "myCustomEquality",
        "it",
        "expect",
        "it",
        "expect",
        "jasmine",
        "util",
        "jasmine",
        "customEqualityTesters",
        "jasmine",
        "actual",
        "expected",
        "jasmine",
        "expected",
        "expected",
        "jasmine",
        "result",
        "util",
        "actual",
        "expected",
        "customEqualityTesters",
        "result",
        "result",
        "actual",
        "result",
        "actual",
        "result",
        "jasmine",
        "expected",
        "describe",
        "beforeEach",
        "jasmine",
        "customMatchers",
        "it",
        "expect",
        "it",
        "expect",
        "it",
        "expect",
        "jasmine",
        "jasmine",
        "env",
        "htmlReporter",
        "jasmine",
        "env",
        "spec",
        "specFilter",
        "spec",
        "currentWindowOnload",
        "currentWindowOnload",
        "htmlReporter",
        "env",
        "jasmine"
    ],
    "literals": [
        "\"A suite\"",
        "\"contains spec with an expectation\"",
        "\"A suite is just a function\"",
        "\"and so is a spec\"",
        "\"The 'toBe' matcher compares with ===\"",
        "\"and has a positive case\"",
        "\"and can have a negative case\"",
        "\"Included matchers:\"",
        "\"The 'toBe' matcher compares with ===\"",
        "\"The 'toEqual' matcher\"",
        "\"works for simple literals and variables\"",
        "\"should work for objects\"",
        "\"The 'toMatch' matcher is for regular expressions\"",
        "\"foo bar baz\"",
        "\"bar\"",
        "\"The 'toBeDefined' matcher compares against `undefined`\"",
        "\"foo\"",
        "\"The `toBeUndefined` matcher compares against `undefined`\"",
        "\"foo\"",
        "\"The 'toBeNull' matcher compares against null\"",
        "string",
        "\"foo\"",
        "\"The 'toBeTruthy' matcher is for boolean casting testing\"",
        "string",
        "\"foo\"",
        "\"The 'toBeFalsy' matcher is for boolean casting testing\"",
        "string",
        "\"foo\"",
        "\"The 'toContain' matcher is for finding an item in an Array\"",
        "\"foo\"",
        "\"bar\"",
        "\"baz\"",
        "\"bar\"",
        "\"quux\"",
        "\"The 'toBeLessThan' matcher is for mathematical comparisons\"",
        "\"The 'toBeGreaterThan' is for mathematical comparisons\"",
        "\"The 'toBeCloseTo' matcher is for precision math comparison\"",
        "\"The 'toThrow' matcher is for testing if a function throws an exception\"",
        "\"A spec\"",
        "\"is just a function, so it can contain any code\"",
        "\"can have more than one expectation\"",
        "\"A spec (with setup and tear-down)\"",
        "\"is just a function, so it can contain any code\"",
        "\"can have more than one expectation\"",
        "\"A spec\"",
        "\"is just a function, so it can contain any code\"",
        "\"can have more than one expectation\"",
        "\"nested inside a second describe\"",
        "\"can reference both scopes as needed\"",
        "\"A spec\"",
        "\"is just a function, so it can contain any code\"",
        "\"Pending specs\"",
        "\"can be declared 'xit'\"",
        "\"can be declared with 'it' but without a function\"",
        "\"can be declared by calling 'pending' in the spec body\"",
        "'this is why it is pending'",
        "\"A spy\"",
        "'setBar'",
        "'another param'",
        "\"tracks that the spy was called\"",
        "\"tracks all the arguments of its calls\"",
        "'another param'",
        "\"stops all execution on a function\"",
        "\"A spy, when configured to call through\"",
        "'getBar'",
        "\"tracks that the spy was called\"",
        "\"should not effect other functions\"",
        "\"when called returns the requested value\"",
        "\"A spy, when configured to fake a return value\"",
        "\"getBar\"",
        "\"tracks that the spy was called\"",
        "\"should not effect other functions\"",
        "\"when called returns the requested value\"",
        "\"A spy, when configured with an alternate implementation\"",
        "\"getBar\"",
        "\"tracks that the spy was called\"",
        "\"should not effect other functions\"",
        "\"when called returns the requested value\"",
        "\"A spy, when configured to throw a value\"",
        "\"setBar\"",
        "\"quux\"",
        "\"throws the value\"",
        "\"quux\"",
        "\"A spy, when configured with multiple actions\"",
        "'getBar'",
        "\"tracks that the spy was called\"",
        "\"should not effect other functions\"",
        "\"when called returns the requested value\"",
        "\"should have called the fake implementation\"",
        "\"A spy\"",
        "'setBar'",
        "\"can call through and then stub in the same spec\"",
        "\"A spy\"",
        "'setBar'",
        "\"tracks if it was called at all\"",
        "\"tracks the number of times it was called\"",
        "\"tracks the arguments of each call\"",
        "\"baz\"",
        "\"baz\"",
        "\"tracks the arguments of all calls\"",
        "\"baz\"",
        "\"baz\"",
        "\"can provide the context and arguments to all calls\"",
        "\"has a shortcut to the most recent call\"",
        "\"baz\"",
        "\"baz\"",
        "\"has a shortcut to the first call\"",
        "\"baz\"",
        "\"can be reset\"",
        "\"baz\"",
        "\"A spy, when created manually\"",
        "'whatAmI'",
        "\"I\"",
        "\"am\"",
        "\"a\"",
        "\"spy\"",
        "\"is named, which helps in error reporting\"",
        "'whatAmI'",
        "\"tracks that the spy was called\"",
        "\"tracks its number of calls\"",
        "\"tracks all the arguments of its calls\"",
        "\"I\"",
        "\"am\"",
        "\"a\"",
        "\"spy\"",
        "\"allows access to the most recent call\"",
        "\"I\"",
        "\"Multiple spies, when created manually\"",
        "'tape'",
        "'play'",
        "'pause'",
        "'stop'",
        "'rewind'",
        "\"creates spies for each requested function\"",
        "\"tracks that the spies were called\"",
        "\"tracks all the arguments of its calls\"",
        "\"jasmine.any\"",
        "\"matches any value\"",
        "\"when used with a spy\"",
        "\"is useful for comparing arguments\"",
        "'foo'",
        "\"jasmine.objectContaining\"",
        "\"baz\"",
        "\"matches objects with the expect key/value pairs\"",
        "\"baz\"",
        "\"when used with a spy\"",
        "\"is useful for comparing arguments\"",
        "'callback'",
        "\"baz\"",
        "\"baz\"",
        "\"Manually ticking the Jasmine Clock\"",
        "\"timerCallback\"",
        "\"causes a timeout to be called synchronously\"",
        "\"causes an interval to be called synchronously\"",
        "\"Asynchronous specs\"",
        "\"should support async execution of test preparation and expectations\"",
        "\"long asynchronous specs\"",
        "\"takes a long time\"",
        "\"Fail\"",
        "\"should fail test when called without arguments\"",
        "\"should fail test when called with a fail message\"",
        "\"The test failed\"",
        "\"should fail test when called an error\"",
        "\"The test failed with this error\"",
        "\"custom equality\"",
        "\"string\"",
        "\"string\"",
        "\"should be custom equal\"",
        "\"abc\"",
        "\"aaa\"",
        "\"should be custom not equal\"",
        "\"abc\"",
        "\"abc\"",
        "''",
        "''",
        "\"gawrsh\"",
        "\"Expected \"",
        "\" not to be quite so goofy\"",
        "\"Expected \"",
        "\" to be goofy, but it was not very goofy\"",
        "\"Custom matcher: 'toBeGoofy'\"",
        "\"is available on an expectation\"",
        "'gawrsh'",
        "\"can take an 'expected' parameter\"",
        "'gawrsh is fun'",
        "' is fun'",
        "\"can be negated\"",
        "'this is fun'"
    ],
    "variables": [
        "a",
        "a",
        "b",
        "a",
        "a",
        "foo",
        "bar",
        "message",
        "a",
        "a",
        "a",
        "foo",
        "a",
        "foo",
        "a",
        "foo",
        "a",
        "pi",
        "e",
        "pi",
        "e",
        "pi",
        "e",
        "foo",
        "bar",
        "a",
        "foo",
        "foo",
        "foo",
        "foo",
        "bar",
        "foo",
        "foo",
        "bar",
        "foo",
        "bar",
        "fetchedBar",
        "foo",
        "bar",
        "fetchedBar",
        "foo",
        "bar",
        "fetchedBar",
        "foo",
        "bar",
        "foo",
        "bar",
        "fetchedBar",
        "foo",
        "bar",
        "foo",
        "bar",
        "whatAmI",
        "tape",
        "foo",
        "foo",
        "callback",
        "timerCallback",
        "value",
        "myCustomEquality",
        "customMatchers",
        "result",
        "env",
        "htmlReporter",
        "specFilter",
        "currentWindowOnload"
    ],
    "comments": [
        "<reference path=\"jasmine.d.ts\" />",
        "tests based on http://jasmine.github.io/2.2/introduction.html",
        "without reason",
        "test based on http://jasmine.github.io/2.2/custom_equality.html",
        "test based on http://jasmine.github.io/2.2/custom_matcher.html",
        "add the custom matchers to interface jasmine.Matchers via TypeScript declaration merging",
        "from boot.js"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}