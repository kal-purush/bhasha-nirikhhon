{
    "identifiers": [
        "logging",
        "os",
        "hashlib",
        "contextlib",
        "closing",
        "tarfile",
        "tempfile",
        "datetime",
        "datetime",
        "json",
        "globster",
        "Globster",
        "logging",
        "getLogger",
        "exclude_file",
        "open",
        "exclude_file",
        "read",
        "split",
        "filepath",
        "blocksize",
        "hashlib",
        "sha256",
        "open",
        "filepath",
        "fp",
        "fp",
        "read",
        "blocksize",
        "data",
        "sha",
        "update",
        "data",
        "sha",
        "filepath",
        "blocksize",
        "_filehash",
        "filepath",
        "blocksize",
        "sha",
        "hexdigest",
        "path",
        "os",
        "path",
        "basename",
        "path",
        "os",
        "path",
        "abspath",
        "path",
        "_filehash",
        "path",
        "filehash",
        "path",
        "archive_path",
        "archive_path",
        "tempfile",
        "NamedTemporaryFile",
        "archive",
        "archive",
        "name",
        "archive_path",
        "archive_path",
        "tar_kwargs",
        "update",
        "closing",
        "tarfile",
        "open",
        "tar_args",
        "tar_kwargs",
        "tar",
        "tar",
        "add",
        "path",
        "arcname",
        "file",
        "_return",
        "directory",
        "exclude_file",
        "excludes",
        "os",
        "path",
        "isdir",
        "directory",
        "os",
        "path",
        "basename",
        "directory",
        "os",
        "path",
        "abspath",
        "directory",
        "os",
        "path",
        "dirname",
        "path",
        "os",
        "path",
        "join",
        "path",
        "exclude_file",
        "excludes",
        "os",
        "path",
        "isfile",
        "exclude_file",
        "patterns",
        "extend",
        "load_patterns",
        "exclude_file",
        "Globster",
        "patterns",
        "index_func",
        "os",
        "path",
        "getmtime",
        "hashlib",
        "sha256",
        "f",
        "files",
        "shadir",
        "update",
        "index_func",
        "os",
        "path",
        "join",
        "path",
        "f",
        "IOError",
        "OSError",
        "shadir",
        "hexdigest",
        "pattern",
        "abspath",
        "pattern",
        "Globster",
        "pattern",
        "root",
        "dirs",
        "files",
        "walk",
        "f",
        "files",
        "pattern",
        "pattern",
        "globster",
        "match",
        "f",
        "abspath",
        "os",
        "path",
        "join",
        "root",
        "f",
        "relpath",
        "os",
        "path",
        "join",
        "root",
        "f",
        "pattern",
        "sort_key",
        "k",
        "k",
        "sort_reverse",
        "abspath",
        "sorted",
        "iterfiles",
        "pattern",
        "abspath",
        "abspath",
        "key",
        "sort_key",
        "reverse",
        "sort_reverse",
        "pattern",
        "sort_key",
        "k",
        "k",
        "sort_reverse",
        "abspath",
        "files",
        "pattern",
        "sort_key",
        "sort_key",
        "sort_reverse",
        "sort_reverse",
        "abspath",
        "abspath",
        "res",
        "res",
        "pattern",
        "abspath",
        "pattern",
        "Globster",
        "pattern",
        "root",
        "dirs",
        "files",
        "walk",
        "d",
        "dirs",
        "pattern",
        "pattern",
        "globster",
        "match",
        "d",
        "abspath",
        "os",
        "path",
        "join",
        "root",
        "d",
        "relpath",
        "os",
        "path",
        "join",
        "root",
        "d",
        "pattern",
        "sort_key",
        "k",
        "k",
        "sort_reverse",
        "abspath",
        "sorted",
        "itersubdirs",
        "pattern",
        "abspath",
        "abspath",
        "key",
        "sort_key",
        "reverse",
        "sort_reverse",
        "f",
        "iterfiles",
        "abspath",
        "dir_size",
        "os",
        "path",
        "getsize",
        "f",
        "dir_size",
        "path",
        "globster",
        "match",
        "relpath",
        "path",
        "match",
        "log",
        "debug",
        "format",
        "path",
        "match",
        "root",
        "dirs",
        "files",
        "os",
        "walk",
        "path",
        "topdown",
        "d",
        "dirs",
        "is_excluded",
        "os",
        "path",
        "join",
        "root",
        "d",
        "dirs",
        "remove",
        "d",
        "os",
        "path",
        "islink",
        "os",
        "path",
        "join",
        "root",
        "d",
        "ndirs",
        "append",
        "d",
        "fpath",
        "os",
        "path",
        "join",
        "root",
        "f",
        "f",
        "files",
        "is_excluded",
        "fpath",
        "os",
        "path",
        "islink",
        "fpath",
        "nfiles",
        "append",
        "os",
        "path",
        "relpath",
        "fpath",
        "root",
        "root",
        "ndirs",
        "nfiles",
        "file_identifier",
        "d",
        "subdirs",
        "os",
        "path",
        "join",
        "directory",
        "d",
        "file_identifier",
        "os",
        "path",
        "isfile",
        "project_file",
        "projects",
        "append",
        "d",
        "projects",
        "path",
        "os",
        "path",
        "relpath",
        "path",
        "start",
        "path",
        "archive_path",
        "archive_path",
        "tempfile",
        "NamedTemporaryFile",
        "archive",
        "archive",
        "name",
        "archive_path",
        "archive_path",
        "tar_kwargs",
        "update",
        "closing",
        "tarfile",
        "open",
        "tar_args",
        "tar_kwargs",
        "tar",
        "tar",
        "add",
        "path",
        "arcname",
        "exclude",
        "is_excluded",
        "_return",
        "_dir",
        "state",
        "index_cmp",
        "os",
        "path",
        "getmtime",
        "_dir",
        "index_cmp",
        "state",
        "compute_state",
        "_dir",
        "path",
        "_dir",
        "files",
        "_dir",
        "subdirs",
        "index",
        "data",
        "f",
        "_dir",
        "iterfiles",
        "index_cmp",
        "os",
        "path",
        "join",
        "_dir",
        "path",
        "f",
        "exc",
        "f",
        "exc",
        "index",
        "other",
        "index_cmp",
        "other",
        "index_cmp",
        "compute_diff",
        "state",
        "other",
        "state",
        "base_path",
        "dt",
        "fmt",
        "fmt",
        "dt",
        "datetime",
        "utcnow",
        "fmt",
        "format",
        "_dir",
        "path",
        "strip",
        "split",
        "dt",
        "isoformat",
        "os",
        "path",
        "join",
        "base_path",
        "path",
        "open",
        "path",
        "f",
        "f",
        "write",
        "json",
        "dumps",
        "state",
        "path",
        "classmethod",
        "cls",
        "path",
        "open",
        "path",
        "f",
        "cls",
        "state",
        "json",
        "loads",
        "f",
        "read",
        "dir_base",
        "dir_cmp",
        "dir_cmp",
        "dir_base",
        "dir_base",
        "dir_cmp",
        "dir_cmp",
        "dir_base",
        "f",
        "dir_cmp",
        "intersection",
        "dir_base",
        "dir_base",
        "f",
        "dir_cmp",
        "f",
        "data",
        "append",
        "f",
        "data"
    ],
    "literals": [
        "\"dirtools\"",
        "\".exclude\"",
        "\"\\n\"",
        "'rb'",
        "'fileobj'",
        "'mode'",
        "'w:gz'",
        "\".\"",
        "\".exclude\"",
        "'.git/'",
        "'.hg/'",
        "'.svn/'",
        "\"Directory must be a directory.\"",
        "\"{0} matched {1} for exclusion\"",
        "\".project\"",
        "'fileobj'",
        "'mode'",
        "'w:gz'",
        "''",
        "'directory'",
        "'files'",
        "'subdirs'",
        "'index'",
        "'Both DirState instance must have the same index_cmp.'",
        "'.'",
        "'{0}@{1}.json'",
        "'/'",
        "'/'",
        "'wb'",
        "'rb'",
        "'deleted'",
        "'files'",
        "'files'",
        "'created'",
        "'files'",
        "'files'",
        "'updated'",
        "'deleted_dirs'",
        "'subdirs'",
        "'subdirs'",
        "'files'",
        "'files'",
        "'index'",
        "'index'",
        "'updated'"
    ],
    "variables": [
        "log",
        "sha",
        "data",
        "sha",
        "file",
        "path",
        "archive",
        "tar_args",
        "tar_kwargs",
        "_return",
        "tar_args",
        "tar_kwargs",
        "_return",
        "directory",
        "path",
        "parent",
        "exclude_file",
        "patterns",
        "globster",
        "shadir",
        "globster",
        "res",
        "globster",
        "dir_size",
        "match",
        "ndirs",
        "nfiles",
        "projects",
        "project_file",
        "archive",
        "tar_args",
        "tar_kwargs",
        "_return",
        "tar_args",
        "tar_kwargs",
        "_return",
        "_dir",
        "index_cmp",
        "state",
        "data",
        "data",
        "data",
        "data",
        "data",
        "index",
        "index",
        "f",
        "fmt",
        "dt",
        "path",
        "path",
        "data",
        "data",
        "data",
        "data",
        "data"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "Source: https://github.com/tsileo/dirtools (copied here because pypi package is not updated)",
        "for Python2.6 compatibility",
        "TODO abs=True args for .files(), .subdirs() ?",
        "TODO alternative to filehash => mtime as a faster alternative",
        "TODO relative walk, recursive call if root excluder found???",
        "root_excluder = get_root_excluder(root)",
        "First we exclude directories"
    ],
    "docstrings": [
        "\"\"\" Load patterns to exclude file from `exclude_file',\n    and return a list of pattern.\n\n    :type exclude_file: str\n    :param exclude_file: File containing exclude patterns\n\n    :rtype: list\n    :return: List a patterns\n\n    \"\"\"",
        "\"\"\" Return the hash object for the file `filepath', processing the file\n    by chunk of `blocksize'.\n\n    :type filepath: str\n    :param filepath: Path to file\n\n    :type blocksize: int\n    :param blocksize: Size of the chunk when processing the file\n\n    \"\"\"",
        "\"\"\" Return the hash hexdigest() for the file `filepath', processing the file\n    by chunk of `blocksize'.\n\n    :type filepath: str\n    :param filepath: Path to file\n\n    :type blocksize: int\n    :param blocksize: Size of the chunk when processing the file\n\n    \"\"\"",
        "\"\"\" Return the hash object. \"\"\"",
        "\"\"\" Return the hash hexdigest. \"\"\"",
        "\"\"\" Compress the directory with gzip using tarlib.\n\n        :type archive_path: str\n        :param archive_path: Path to the archive, if None, a tempfile is created\n\n        \"\"\"",
        "\"\"\" Wrapper for dirtools arround a path.\n\n    Try to load a .exclude file, ready to compute hashdir,\n\n\n    :type directory: str\n    :param directory: Root directory for initialization\n\n    :type exclude_file: str\n    :param exclude_file: File containing exclusion pattern,\n        .exclude by default, you can also load .gitignore files.\n\n    :type excludes: list\n    :param excludes: List of additionals patterns for exclusion,\n        by default: ['.git/', '.hg/', '.svn/']\n\n    \"\"\"",
        "\"\"\" Hash for the entire directory (except excluded files) recursively.\n\n        Use mtime instead of sha256 by default for a faster hash.\n\n        >>> dir.hash(index_func=dirtools.filehash)\n\n        \"\"\"",
        "\"\"\" Generator for all the files not excluded recursively.\n\n        Return relative path.\n\n        :type pattern: str\n        :param pattern: Unix style (glob like/gitignore like) pattern\n\n        \"\"\"",
        "\"\"\" Return a sorted list containing relative path of all files (recursively).\n\n        :type pattern: str\n        :param pattern: Unix style (glob like/gitignore like) pattern\n\n        :param sort_key: key argument for sorted\n\n        :param sort_reverse: reverse argument for sorted\n\n        :rtype: list\n        :return: List of all relative files paths.\n\n        \"\"\"",
        "\"\"\" Generator for all subdirs (except excluded).\n\n        :type pattern: str\n        :param pattern: Unix style (glob like/gitignore like) pattern\n\n        \"\"\"",
        "\"\"\" Return a sorted list containing relative path of all subdirs (recursively).\n\n        :type pattern: str\n        :param pattern: Unix style (glob like/gitignore like) pattern\n\n        :param sort_key: key argument for sorted\n\n        :param sort_reverse: reverse argument for sorted\n\n        :rtype: list\n        :return: List of all relative files paths.\n        \"\"\"",
        "\"\"\" Return directory size in bytes.\n\n        :rtype: int\n        :return: Total directory size in bytes.\n        \"\"\"",
        "\"\"\" Return True if `path' should be excluded\n        given patterns in the `exclude_file'. \"\"\"",
        "\"\"\" Walk the directory like os.path\n        (yields a 3-tuple (dirpath, dirnames, filenames)\n        except it exclude all files/directories on the fly. \"\"\"",
        "\"\"\" Search all directory recursively for subdirs\n        with `file_identifier' in it.\n\n        :type file_identifier: str\n        :param file_identifier: File identier, .project by default.\n\n        :rtype: list\n        :return: The list of subdirs with a `file_identifier' in it.\n\n        \"\"\"",
        "\"\"\" Return a relative filepath to path from Dir path. \"\"\"",
        "\"\"\" Compress the directory with gzip using tarlib.\n\n        :type archive_path: str\n        :param archive_path: Path to the archive, if None, a tempfile is created\n\n        \"\"\"",
        "\"\"\" Hold a directory state / snapshot meta-data for later comparison. \"\"\"",
        "\"\"\" Generate the index. \"\"\"",
        "\"\"\" Compute diff with operator overloading.\n\n        >>> path = DirState(Dir('/path'))\n        >>> path_copy = DirState(Dir('/path_copy'))\n        >>> diff =  path_copy - path\n        >>> # Equals to\n        >>> diff = compute_diff(path_copy.state, path.state)\n\n        \"\"\"",
        "\"\"\" Compare `dir_base' and `dir_cmp' and returns a list with\n    the following keys:\n     - deleted files `deleted'\n     - created files `created'\n     - updated files `updated'\n     - deleted directories `deleted_dirs'\n\n    \"\"\""
    ],
    "functions": [
        "load_patterns",
        "_filehash",
        "filehash",
        "_hash",
        "hash",
        "compress_to",
        "hash",
        "iterfiles",
        "files",
        "get",
        "itersubdirs",
        "subdirs",
        "size",
        "is_excluded",
        "walk",
        "find_projects",
        "relpath",
        "compress_to",
        "compute_state",
        "index",
        "__sub__",
        "to_json",
        "from_json",
        "compute_diff"
    ],
    "classes": [
        "File",
        "Dir",
        "DirState"
    ]
}