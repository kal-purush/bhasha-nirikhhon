{
    "identifiers": [
        "simpledb",
        "java",
        "util",
        "serialVersionUID",
        "pred",
        "child1",
        "child2",
        "comboTD",
        "t1",
        "t2",
        "p",
        "child1",
        "child2",
        "pred",
        "p",
        "child1",
        "child1",
        "child2",
        "child2",
        "comboTD",
        "TupleDesc",
        "merge",
        "child1",
        "getTupleDesc",
        "child2",
        "getTupleDesc",
        "pred",
        "comboTD",
        "child1",
        "getTupleDesc",
        "getFieldName",
        "pred",
        "getField1",
        "child2",
        "getTupleDesc",
        "getFieldName",
        "pred",
        "getField2",
        "MAP_SIZE",
        "cnt",
        "clear",
        "child1",
        "hasNext",
        "t1",
        "child1",
        "next",
        "get",
        "t1",
        "getField",
        "pred",
        "getField1",
        "put",
        "t1",
        "getField",
        "pred",
        "getField1",
        "add",
        "t1",
        "cnt",
        "MAP_SIZE",
        "cnt",
        "child1",
        "open",
        "child2",
        "open",
        "loadMap",
        "close",
        "child2",
        "close",
        "child1",
        "close",
        "t1",
        "t2",
        "listIt",
        "clear",
        "child1",
        "rewind",
        "child2",
        "rewind",
        "listIt",
        "t1",
        "listIt",
        "next",
        "td1n",
        "t1",
        "getTupleDesc",
        "numFields",
        "td2n",
        "t2",
        "getTupleDesc",
        "numFields",
        "t",
        "comboTD",
        "i",
        "i",
        "td1n",
        "i",
        "t",
        "setField",
        "i",
        "t1",
        "getField",
        "i",
        "i",
        "i",
        "td2n",
        "i",
        "t",
        "setField",
        "td1n",
        "i",
        "t2",
        "getField",
        "i",
        "t",
        "listIt",
        "listIt",
        "hasNext",
        "processList",
        "child2",
        "hasNext",
        "t2",
        "child2",
        "next",
        "l",
        "get",
        "t2",
        "getField",
        "pred",
        "getField2",
        "l",
        "listIt",
        "l",
        "iterator",
        "processList",
        "child2",
        "rewind",
        "loadMap",
        "fetchNext",
        "Override",
        "child1",
        "child2",
        "Override",
        "children",
        "child1",
        "children",
        "child2",
        "children"
    ],
    "literals": [],
    "variables": [
        "pred",
        "child1",
        "child2",
        "comboTD"
    ],
    "comments": [
        "set fields in combined tuple",
        "loop around child2",
        "if match, create a combined tuple and fill it with the values",
        "from both tuples",
        "child2 is done: advance child1"
    ],
    "docstrings": [
        "* The Join operator implements the relational join operation.",
        "* Constructor. Accepts to children to join and the predicate to join them\n     * on\n     * \n     * @param p\n     *            The predicate to use to join the children\n     * @param child1\n     *            Iterator for the left(outer) relation to join\n     * @param child2\n     *            Iterator for the right(inner) relation to join",
        "* Returns the next tuple generated by the join, or null if there are no\n     * more tuples. Logically, this is the next tuple in r1 cross r2 that\n     * satisfies the join predicate. There are many possible implementations;\n     * the simplest is a nested loops join.\n     * <p>\n     * Note that the tuples returned from this particular implementation of Join\n     * are simply the concatenation of joining tuples from the left and right\n     * relation. Therefore, there will be two copies of the join attribute in\n     * the results. (Removing such duplicate columns can be done with an\n     * additional projection operator if needed.)\n     * <p>\n     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},\n     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.\n     * \n     * @return The next matching tuple.\n     * @see JoinPredicate#filter"
    ],
    "functions": [
        "HashEquiJoin",
        "JoinPredicate",
        "getJoinPredicate",
        "TupleDesc",
        "getTupleDesc",
        "getJoinField1Name",
        "getJoinField2Name",
        "loadMap",
        "open",
        "close",
        "rewind",
        "Tuple",
        "processList",
        "Tuple",
        "fetchNext",
        "getChildren",
        "setChildren"
    ],
    "classes": [
        "HashEquiJoin"
    ]
}