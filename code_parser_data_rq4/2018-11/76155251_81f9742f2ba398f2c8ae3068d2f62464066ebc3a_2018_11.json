{
    "identifiers": [
        "io",
        "atomix",
        "core",
        "log",
        "io",
        "atomix",
        "primitive",
        "AsyncPrimitive",
        "io",
        "atomix",
        "primitive",
        "DistributedPrimitive",
        "java",
        "time",
        "Duration",
        "java",
        "util",
        "concurrent",
        "CompletableFuture",
        "java",
        "util",
        "Consumer",
        "AsyncDistributedLogPartition",
        "entry",
        "consumer",
        "consume",
        "consumer",
        "offset",
        "consumer",
        "sync",
        "Duration",
        "ofMillis",
        "DistributedPrimitive",
        "DEFAULT_OPERATION_TIMEOUT_MILLIS",
        "operationTimeout"
    ],
    "literals": [],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Copyright 2018-present Open Networking Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Asynchronous distributed log partition.",
        "* Returns the partition ID.\n   *\n   * @return the partition ID",
        "* Appends an entry to the distributed log.\n   *\n   * @param entry the entry to append\n   * @return a future to be completed once the entry has been produced",
        "* Adds a consumer to the log partition.\n   *\n   * @param consumer the log partition consumer\n   * @return a future to be completed once the consumer has been added",
        "* Adds a consumer to the log partition.\n   *\n   * @param offset the offset from which to begin consuming the log partition\n   * @param consumer the log partition consumer\n   * @return a future to be completed once the consumer has been added",
        "* Returns a synchronous log partition.\n   *\n   * @return the synchronous log partition",
        "* Returns a synchronous log partition.\n   *\n   * @param operationTimeout the log partition operation timeout\n   * @return the synchronous log partition"
    ],
    "functions": [
        "id",
        "produce",
        "consume",
        "consume",
        "sync",
        "sync"
    ],
    "classes": []
}