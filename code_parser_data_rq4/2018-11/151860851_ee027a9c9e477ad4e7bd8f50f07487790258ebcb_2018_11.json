{
    "identifiers": [
        "numpy",
        "np",
        "cv2",
        "cv",
        "sys",
        "glob",
        "attrgetter",
        "math",
        "argparse",
        "random",
        "rng",
        "cv",
        "imread",
        "cv",
        "imshow",
        "src",
        "cv",
        "waitKey",
        "cv",
        "destroyAllWindows",
        "rng",
        "seed",
        "val",
        "val",
        "cv",
        "Canny",
        "src_gray",
        "threshold",
        "threshold",
        "cv",
        "findContours",
        "canny_output",
        "cv",
        "RETR_TREE",
        "cv",
        "CHAIN_APPROX_SIMPLE",
        "format",
        "len",
        "contours",
        "contours",
        "i",
        "len",
        "contours",
        "cv",
        "convexHull",
        "contours",
        "i",
        "hull_list",
        "append",
        "hull",
        "i",
        "len",
        "contours",
        "cv",
        "arcLength",
        "contours",
        "i",
        "cv",
        "approxPolyDP",
        "contours",
        "i",
        "epsilon",
        "simplified_list",
        "append",
        "approx",
        "format",
        "len",
        "contours",
        "i",
        "len",
        "approx",
        "np",
        "zeros",
        "canny_output",
        "shape",
        "canny_output",
        "shape",
        "dtype",
        "np",
        "uint8",
        "i",
        "len",
        "contours",
        "init_color",
        "init_color",
        "init_color",
        "rng",
        "randint",
        "rng",
        "randint",
        "rng",
        "randint",
        "cv",
        "drawContours",
        "drawing",
        "simplified_list",
        "i",
        "init_color",
        "hierarchy",
        "hier",
        "maxLevel",
        "cv",
        "imshow",
        "drawing",
        "cv",
        "waitKey",
        "cv",
        "cvtColor",
        "src",
        "cv",
        "COLOR_BGR2GRAY",
        "cv",
        "blur",
        "src_gray",
        "cv",
        "namedWindow",
        "source_window",
        "cv",
        "imshow",
        "source_window",
        "src",
        "cv",
        "createTrackbar",
        "source_window",
        "thresh",
        "max_thresh",
        "thresh_callback",
        "thresh_callback",
        "thresh",
        "cv",
        "waitKey"
    ],
    "literals": [
        "'../sample-images/qr_test2.png'",
        "'Window title'",
        "'Number of contours: {}'",
        "'lengths: plain contours {}; simplified {}'",
        "'Contours'",
        "'Source'",
        "'Canny thresh:'"
    ],
    "variables": [
        "src",
        "threshold",
        "canny_output",
        "_",
        "contours",
        "hier",
        "hull_list",
        "hull",
        "simplified_list",
        "epsilon",
        "approx",
        "drawing",
        "init_color",
        "init_color",
        "color",
        "src_gray",
        "src_gray",
        "source_window",
        "max_thresh",
        "thresh"
    ],
    "comments": [
        "Detect edges using Canny",
        "Find contours",
        "contours.sort(key=cv.contourArea, reverse=True)",
        "contours = contours[:10]",
        "Find the convex hull object for each contour",
        "Draw contours + hull results",
        "cv.drawContours(drawing, hull_list, i, init_color)",
        "largest = sorted(hull_list, key=cv.contourArea, reverse=True)",
        "cv.drawContours(drawing, largest, 0, (255,255,255))",
        "Show in a window",
        "Load source image",
        "Convert image to gray and blur it",
        "Create Window",
        "initial threshold"
    ],
    "docstrings": [
        "'''\nparser = argparse.ArgumentParser(description='Code for Convex Hull tutorial.')\nparser.add_argument('--input', help='Path to input image.', default='../data/stuff.jpg')\nargs = parser.parse_args()\nsrc = cv.imread(args.input)\nif src is None:\n    print('Could not open or find the image:', args.input)\n    exit(0)\n'''"
    ],
    "functions": [
        "thresh_callback"
    ],
    "classes": []
}