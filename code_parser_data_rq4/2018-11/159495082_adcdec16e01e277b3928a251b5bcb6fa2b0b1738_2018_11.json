{
    "identifiers": [
        "bwfdm",
        "exporter",
        "commons",
        "java",
        "io",
        "File",
        "java",
        "io",
        "java",
        "util",
        "java",
        "util",
        "ExportRepository",
        "collectionURL",
        "metadataMap",
        "collectionURL",
        "file",
        "unpackFileIfArchive",
        "metadataMap"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "TODO: use this interface as a common interface for each export repository. Move it to package with SwordExporter.",
        "TODO: activate in future releases",
        "TODO: differentiate between dublin core (DC) and METS formats",
        "public String exportNewEntryWithMetadata(String collectionURL, File metadataFileXml) throws IOException;",
        "TODO: activate in future releases",
        "TODO: differentiate between dublin core (DC) and METS formats",
        "public String exportNewEntryWithFileAndMetadata(String collectionURL, File file,",
        "boolean unpackFileIfArchive, File metadataFileXml) throws IOException;"
    ],
    "docstrings": [
        "* Unless expressly otherwise stated, code from this project is licensed under the MIT license [https://opensource.org/licenses/MIT].\n * \n * Copyright (c) <2018> <Volodymyr Kushnarenko, Florian Fritze, Markus GÃ¤rtner, Stefan Kombrink, Matthias Fratz, Daniel Scharon, Sibylle Hermann, Franziska Rapp and Uli Hahn>\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), \n * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, \n * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \n * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH \n * THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "* Check if export repository is accessible via API.\n\t * \n\t * @return {@code true} if repository is accessible and {@code false} otherwise.",
        "* Check if current authentication credentials (e.g. API token, user login and password) are registered \n\t * in the export repository.\n\t * <p>\n\t * <b>IMPORTANT:</b> credentials are used implicitly. Definition of the credentials must be done in other place, \n\t * e.g. via class constructor.\n\t * \n\t * @return {@code true} if credentials are registered and {@code false} otherwise.",
        "* Check if current authentication credentials (e.g. API token, user login and password) \n\t * are assigned to export in the repository.\n\t * <p>\n\t * <b>IMPORTANT:</b> credentials are used implicitly. Definition of the credentials must be done in other place, \n\t * e.g. via class constructor.\n\t *\n\t * @return {@code true} if count of user available collections is great than zero, \n\t * \t\t   otherwise {@code false}.",
        "* Get collections, which are available for the current authentication credentials.\n\t * Could be, that different credentials can have an access to different collections.\n\t * <p>\n\t * <b>IMPORTANT:</b> credentials are used implicitly. Definition of the credentials must be done in other place, \n\t * e.g. via class constructor.\n\t *  \n\t * @return {@link Map} of Strings, where key = \"collection full URL\", value = \"collection title\". \n\t * \t\tThe map can be also empty if there are not available collections. \n\t * \t\tIn case of some error should be returned a {@code null} value.",
        "* Export (create) a new entry with metadata only (without any file) in some collection, which is available \n\t * for the current authentication credentials. Metadata are described as a {@link java.util.Map}. \n\t * <p>\n\t * <b>IMPORTANT:</b> credentials are used implicitly. Definition of the credentials must be done in other place, \n\t * e.g. via class constructor.\n\t *  \n\t * @param collectionURL the full URL of the collection, where the export (ingest) will be done.\n\t * @param metadataMap metadata as {@link Map}, where key = metadata field (e.g. \"creator\", \"title\", \"year\", ... ), \n\t * \t\tvalue = {@link List} with the metadata field values (e.g. {\"Author-1\", \"Author-2\", ... }).\n\t * \n\t * @return {@link String} with the URL of the new created entry or {@code null} in case of error.",
        "* Export (create) a new entry with metadata only (without any file) in some collection, which is available \n\t * for the current authentication credentials. Metadata are described as a xml-file.\n\t * <p>\n\t * <b>IMPORTANT:</b> credentials are used implicitly. Definition of the credentials must be done in other place, \n\t * e.g. via class constructor.\n\t * \n\t * @param collectionURL the full URL of the collection, where the export (ingest) will be done.\n\t * @param metadataFileXml metadata as a xml-file in dublin core (DC) format.\n\t * \n\t * @return {@link String} with the URL of the new created entry or {@code null} in case of error.\n\t * \n\t * @throws IOException",
        "* Export (create) a new entry with a file and metadata in some collection, which is available \n\t * for the current authentication credentials. Metadata are described as a {@link java.util.Map}. \n\t * <p>\n\t * <b>IMPORTANT:</b> credentials are used implicitly. Definition of the credentials must be done in other place, \n\t * e.g. via class constructor.\n\t * \n\t * @param collectionURL the full URL of the collection, where the export (ingest) will be done \n\t * @param file an archive file with one or more files inside (e.g. ZIP-file as a standard) or a binary file \n\t * \t\t\twhich will be exported.\n\t * @param unpackFileIfArchive should be used for archive files (e.g. ZIP). A flag which decides, \n\t * \t\t\tif the exported archive will be unpacked in the repository ({@code true} value,\n\t * \t\t\tnew entry will include in this case all files of the archive file) or archive will be exported \n\t * \t\t\tas a binary file ({@code false} value, new entry will include only 1 file - the exported archive\n\t * \t\t\tas a binary file). <b>NOTE:</b> if unpacking is not supported by the repository, \n\t * \t\t\tplease use {@code false} value. \n\t * @param metadataMap metadata as {@link Map}, where key = metadata field (e.g. \"creator\", \"title\", \"year\", ... ), \n\t * \t\tvalue = {@link List} with the metadata field values (e.g. {\"Author-1\", \"Author-2\", ... }). \n\t * \n\t * @return {@link String} with the URL of the new created entry or {@code null} in case of error.\n\t * \n\t * @throws IOException",
        "* Export (create) a new entry with a file and metadata in some collection, which is available \n\t * for the current authentication credentials. Metadata are described as a xml-file.\n\t * <p>\n\t * <b>IMPORTANT:</b> credentials are used implicitly. Definition of the credentials must be done in other place, \n\t * e.g. via class constructor.\n\t * \n\t * @param collectionURL the full URL of the collection, where the export (ingest) will be done.\n\t * @param file an archive file with one or more files inside (e.g. ZIP-file as a standard) or a binary file \n\t * \t\t\twhich will be exported.\n\t * @param unpackFileIfArchive should be used for archive files (e.g. ZIP). A flag which decides, \n\t * \t\t\tif the exported archive will be unpacked in the repository ({@code true} value,\n\t * \t\t\tnew entry will include in this case all files of the archive file) or archive will be exported \n\t * \t\t\tas a binary file ({@code false} value, new entry will include only 1 file - the exported archive\n\t * \t\t\tas a binary file). <b>NOTE:</b> if unpacking is not supported by the repository, \n\t * \t\t\tplease use {@code false} value.\n\t * @param metadataFileXml metadata as a xml-file in dublin core (DC) format.\n\t * \n\t * @return {@link String} with the URL of the new created entry or {@code null} in case of error.\n\t * \n\t * @throws IOException"
    ],
    "functions": [
        "isRepositoryAccessible",
        "hasRegisteredCredentials",
        "hasAssignedCredentials",
        "getAvailableCollections",
        "exportNewEntryWithMetadata",
        "exportNewEntryWithFileAndMetadata"
    ],
    "classes": []
}