{
    "identifiers": [
        "createAction",
        "defaultState",
        "IAction",
        "IDefaultState",
        "axios",
        "AxiosRequestConfig",
        "fromJS",
        "all",
        "call",
        "put",
        "takeEvery",
        "ROUTER",
        "tag",
        "url",
        "requestConfig",
        "ROUTER",
        "error",
        "ROUTER",
        "tag",
        "url",
        "requestConfig",
        "ROUTER",
        "tag",
        "url",
        "data",
        "requestConfig",
        "ROUTER",
        "tag",
        "url",
        "data",
        "requestConfig",
        "ROUTER",
        "tag",
        "url",
        "data",
        "requestConfig",
        "ROUTER",
        "data",
        "ROUTER",
        "tag",
        "url",
        "requestConfig",
        "createAction",
        "ROUTER",
        "ROUTER",
        "error",
        "createAction",
        "ROUTER",
        "ROUTER",
        "error",
        "tag",
        "url",
        "requestConfig",
        "createAction",
        "ROUTER",
        "ROUTER",
        "tag",
        "url",
        "data",
        "requestConfig",
        "createAction",
        "ROUTER",
        "ROUTER",
        "data",
        "tag",
        "url",
        "data",
        "requestConfig",
        "createAction",
        "ROUTER",
        "ROUTER",
        "data",
        "tag",
        "url",
        "data",
        "requestConfig",
        "createAction",
        "ROUTER",
        "ROUTER",
        "data",
        "data",
        "createAction",
        "ROUTER",
        "ROUTER",
        "data",
        "handleDelete",
        "action",
        "action",
        "call",
        "axios",
        "url",
        "requestConfig",
        "put",
        "dispatchRouter",
        "tag",
        "data",
        "e",
        "action",
        "put",
        "dispatchRouter",
        "tag",
        "e",
        "handleGet",
        "action",
        "action",
        "call",
        "axios",
        "url",
        "requestConfig",
        "put",
        "dispatchRouter",
        "tag",
        "data",
        "e",
        "action",
        "put",
        "dispatchRouter",
        "tag",
        "e",
        "handlePatch",
        "action",
        "action",
        "call",
        "axios",
        "url",
        "requestConfig",
        "put",
        "dispatchRouter",
        "tag",
        "data",
        "e",
        "action",
        "put",
        "dispatchRouter",
        "tag",
        "e",
        "handlePost",
        "action",
        "action",
        "call",
        "axios",
        "url",
        "requestConfig",
        "put",
        "dispatchRouter",
        "tag",
        "data",
        "e",
        "action",
        "put",
        "dispatchRouter",
        "tag",
        "e",
        "handlePut",
        "action",
        "action",
        "call",
        "axios",
        "url",
        "requestConfig",
        "put",
        "dispatchRouter",
        "tag",
        "data",
        "e",
        "action",
        "put",
        "dispatchRouter",
        "tag",
        "e",
        "watchRouterSagas",
        "all",
        "takeEvery",
        "ROUTER",
        "handleDelete",
        "takeEvery",
        "ROUTER",
        "handleGet",
        "takeEvery",
        "ROUTER",
        "handlePatch",
        "takeEvery",
        "ROUTER",
        "handlePost",
        "takeEvery",
        "ROUTER",
        "handlePut",
        "fromJS",
        "defaultState",
        "state",
        "initialState",
        "action",
        "action",
        "ROUTER",
        "ROUTER",
        "ROUTER",
        "ROUTER",
        "ROUTER",
        "ROUTER",
        "ROUTER",
        "state",
        "action",
        "state",
        "tag"
    ],
    "literals": [
        "\"@misk/common\"",
        "\"axios\"",
        "\"immutable\"",
        "\"redux-saga/effects\"",
        "\"SIMPLENETWORK_DELETE\"",
        "\"SIMPLENETWORK_FAILURE\"",
        "\"SIMPLENETWORK_GET\"",
        "\"SIMPLENETWORK_PATCH\"",
        "\"SIMPLENETWORK_POST\"",
        "\"SIMPLENETWORK_PUT\"",
        "\"SIMPLENETWORK_SUCCESS\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"latest\"",
        "string",
        "string",
        "\"latest\"",
        "string",
        "string",
        "\"latest\"",
        "string",
        "string",
        "\"latest\"",
        "string",
        "string",
        "\"latest\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "dispatchRouter",
        "initialState"
    ],
    "comments": [
        "export const paletteState = (state: IState) => state.palette",
        "export const paletteSelector = () =>",
        "createSelector(",
        "paletteState,",
        "state => state.toJS()",
        ")"
    ],
    "docstrings": [
        "*   TODO: ROUTER SAGA\n *\n * from: React-Redux-Saga-Advanced-Starter / src/exampleSagas\n * In case you need to use a selector\n * import also select from redux-saga/effects\n * and then simplie yield select(yourSelector())\n * In case you need to redirect to whatever route\n * import { push } from react-router-redux and then\n * yield put(push('/next-page'))\n *",
        "* Actions\n * string enum of the defined actions that is used as type enforcement for Reducer and Sagas arguments",
        "* Dispatch Object\n * Object of functions that dispatch Actions with standard defaults and any required passed in input\n * dispatch Object is used within containers to initiate any saga provided functionality",
        "* Sagas are generating functions that consume actions and\n * pass either latest (takeLatest) or every (takeEvery) action\n * to a handling generating function.\n *\n * Handling function is where obtaining web resources is done\n * Web requests are done within try/catch so that\n *  if request fails: a failure action is dispatched\n *  if request succeeds: a success action with the data is dispatched\n * Further processing of the data should be minimized within the handling\n *  function to prevent unhelpful errors. Ie. a failed request error is\n *  returned but it actually was just a parsing error within the try/catch.",
        "* Initial State\n * Reducer merges all changes from dispatched action objects on to this initial state",
        "* Duck Reducer\n * Merges dispatched action objects on to the existing (or initial) state to generate new state",
        "* State Interface\n * Provides a complete Typescript interface for the object on state that this duck manages\n * Consumed by the root reducer in ./ducks index to update global state\n * Duck state is attached at the root level of global state",
        "* Selector\n * A memoized, efficient way to compute and return the latest domain of the state"
    ],
    "functions": [
        "RouterReducer"
    ],
    "classes": []
}