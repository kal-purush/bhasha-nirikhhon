{
    "identifiers": [
        "c",
        "Client",
        "ClientOptions",
        "Message",
        "RichEmbed",
        "process",
        "OuterXRegExp",
        "embed",
        "ConniebotDatabase",
        "startup",
        "log",
        "messageSummary",
        "x2i",
        "message",
        "args",
        "key",
        "token",
        "dbFile",
        "clientOptions",
        "log",
        "Client",
        "clientOptions",
        "ConniebotDatabase",
        "dbFile",
        "startup",
        "err",
        "err",
        "err",
        "err",
        "log",
        "err",
        "token",
        "process",
        "err",
        "exit",
        "log",
        "err",
        "err",
        "exit",
        "process",
        "message",
        "OuterXRegExp",
        "OuterXRegExp",
        "c",
        "message",
        "prefixRegex",
        "toks",
        "cmd",
        "cb",
        "cb",
        "message",
        "args",
        "log",
        "cmd",
        "logItem",
        "err",
        "log",
        "cmd",
        "err",
        "message",
        "x2i",
        "message",
        "results",
        "results",
        "parsed",
        "RichEmbed",
        "c",
        "parseInt",
        "c",
        "results",
        "charMax",
        "results",
        "results",
        "charMax",
        "response",
        "c",
        "c",
        "logCode",
        "response",
        "results",
        "respond",
        "stat",
        "ms",
        "log",
        "stat",
        "logCode",
        "messageSummary",
        "message",
        "ms",
        "embed",
        "message",
        "response",
        "respond",
        "err",
        "respond",
        "err",
        "parsed",
        "message",
        "message",
        "message",
        "message",
        "callbacks",
        "callbacks",
        "name",
        "cmd",
        "command",
        "callback",
        "command",
        "callback"
    ],
    "literals": [
        "\"config\"",
        "\"discord.js\"",
        "\"process\"",
        "\"xregexp\"",
        "\"./embed\"",
        "\"./helper/db-management\"",
        "\"./helper/startup\"",
        "\"./helper/utils\"",
        "\"./x2i\"",
        "string",
        "string",
        "string",
        "string",
        "\"verbose\"",
        "\"Starting to load bot...\"",
        "\"ready\"",
        "\"message\"",
        "\"error\"",
        "\"ECONNRESET\"",
        "\"warn\"",
        "\"connection reset. oops!\"",
        "\"uncaughtException\"",
        "\"error\"",
        "(?:^${OuterXRegExp.escape(c.get(\"prefix\"))})(\\\\S*) ?(.*)",
        "\"prefix\"",
        "\" \"",
        "success:command/${cmd}",
        "error:command/${cmd}",
        "\"embeds.colors.success\"",
        "\"all\"",
        "\"embeds.timeoutChars\"",
        "${results.slice(0, charMax - 1)}â€¦",
        "\"Timeout\"",
        "\"embeds.timeoutMessage\"",
        "\"embeds.colors.warning\"",
        "\"partial\"",
        "string",
        "${stat}:x2i/${logCode}",
        "\"success\"",
        "\"error\"",
        "string"
    ],
    "variables": [
        "prefixRegex",
        "toks",
        "cmd",
        "args",
        "toks",
        "cb",
        "logItem",
        "results",
        "parsed",
        "response",
        "logCode",
        "charMax",
        "respond",
        "name",
        "cmd"
    ],
    "comments": [
        "commands",
        "assume that command has already been bound",
        "no way currently to express this without clearing the types",
        "check timeout"
    ],
    "docstrings": [
        "* Record the error and proceed to crash.\n   *\n   * @param err The error to catch.\n   * @param exit Should exit? (eg ECONNRESET would not require reset)",
        "* Looks for a reply message.\n   *\n   * @param message Received message.",
        "* Sends an x2i string (but also could be used for simple embeds)\n   *\n   * @param message Message to reply to",
        "* Acts for a response to a message.\n   *\n   * @param message Message to parse for responses",
        "* Register multiple commands at once.",
        "* Register a single custom command.\n   *\n   * @param command Command name that comes after prefix. Name must be `\\S+`.\n   * @param callback Callback upon seeing the name. `this` will be bound automatically."
    ],
    "functions": [
        "command",
        "x2iExec",
        "registerCommands",
        "register"
    ],
    "classes": [
        "Conniebot"
    ]
}