{
    "identifiers": [
        "os",
        "pytest",
        "pylato",
        "pylato_IO",
        "WriteTotalEnergy",
        "args",
        "Def",
        "results_dir",
        "Def",
        "Def",
        "results_dir",
        "FakeHamilton",
        "filename",
        "directory",
        "os",
        "path",
        "join",
        "directory",
        "filename",
        "os",
        "path",
        "isfile",
        "filepath",
        "os",
        "remove",
        "filepath",
        "filepath",
        "value",
        "traceback",
        "os",
        "path",
        "isfile",
        "filepath",
        "os",
        "remove",
        "filepath",
        "FakeJob",
        "Job",
        "Hamilton",
        "total_energy",
        "Job",
        "TemporaryFile",
        "filename",
        "Job",
        "results_dir",
        "filepath",
        "WriteTotalEnergy",
        "Job",
        "filename",
        "filename",
        "open",
        "filepath",
        "fh",
        "fh",
        "read",
        "total_energy",
        "expected_energy"
    ],
    "literals": [
        "\"/tmp\"",
        "'write_total_energy'",
        "\"energy.txt\"",
        "'r'"
    ],
    "variables": [
        "Def",
        "Def",
        "results_dir",
        "Hamilton",
        "filepath",
        "Job",
        "filename",
        "expected_energy",
        "total_energy"
    ],
    "comments": [
        "Setup",
        "if the file already exists, remove it",
        "Cleanup",
        "if the file exists, remove it",
        "Fake",
        "Action",
        "Result",
        "check that file exists and that its contents match the expectation"
    ],
    "docstrings": [
        "\"\"\"\n    Keep the setup and cleanup of the file in one context manager to keep\n    things neat and simple.\n\n    Here we use the context manager pattern, so to use this in your test:\n        with TemporaryFile(filename, directory) as filepath:\n            ...code using filepath...\n\n    Then you do what you want with the the file and you know that it will get\n    cleaned up when you're done with it.\n    \"\"\""
    ],
    "functions": [
        "total_energy",
        "__enter__",
        "__exit__",
        "test_WriteTotalEnergy"
    ],
    "classes": [
        "FakeHamilton",
        "FakeJob",
        "TemporaryFile"
    ]
}