{
    "identifiers": [
        "opendap",
        "bes",
        "opendap",
        "bes",
        "dap2Responders",
        "BesApi",
        "opendap",
        "coreServlet",
        "opendap",
        "dap",
        "Request",
        "opendap",
        "io",
        "HyraxStringEncoding",
        "opendap",
        "logging",
        "LogUtil",
        "opendap",
        "logging",
        "Procedure",
        "opendap",
        "logging",
        "Timer",
        "opendap",
        "ppt",
        "PPTException",
        "org",
        "jdom",
        "Document",
        "javax",
        "servlet",
        "ServletException",
        "javax",
        "servlet",
        "ServletOutputStream",
        "javax",
        "servlet",
        "http",
        "HttpServlet",
        "javax",
        "servlet",
        "http",
        "HttpServletRequest",
        "javax",
        "servlet",
        "http",
        "HttpServletResponse",
        "java",
        "io",
        "java",
        "util",
        "TreeSet",
        "java",
        "util",
        "concurrent",
        "atomic",
        "AtomicInteger",
        "SITE_MAP_FILE_MAX_ENTRIES",
        "SITE_MAP_FILE_MAX_BYTES",
        "reqNumber",
        "log",
        "configDoc",
        "LogUtil",
        "initLogging",
        "log",
        "org",
        "slf4j",
        "LoggerFactory",
        "getLogger",
        "getClass",
        "RequestCache",
        "openThreadCache",
        "reqNumber",
        "log",
        "debug",
        "log",
        "info",
        "RequestCache",
        "closeThreadCache",
        "request",
        "siteMap",
        "baos",
        "besApi",
        "dapReq",
        "request",
        "dapService",
        "dapReq",
        "getWebApplicationUrl",
        "besApi",
        "writeSiteMapResponse",
        "dapService",
        "baos",
        "bais",
        "baos",
        "toByteArray",
        "bfr",
        "bais",
        "HyraxStringEncoding",
        "getCharset",
        "i",
        "line",
        "bfr",
        "readLine",
        "byte_count",
        "line",
        "i",
        "siteMap",
        "add",
        "line",
        "byte_count",
        "line",
        "length",
        "line",
        "bfr",
        "readLine",
        "log",
        "debug",
        "i",
        "log",
        "debug",
        "siteMap",
        "size",
        "byte_count",
        "byte_count",
        "PseudoFileOpener",
        "PseudoFileCloser",
        "request",
        "siteMapFileCount",
        "sb",
        "dapReq",
        "request",
        "siteMapService",
        "dapReq",
        "getServiceUrl",
        "log",
        "debug",
        "i",
        "i",
        "siteMapFileCount",
        "i",
        "pfn",
        "siteMapService",
        "PseudoFileOpener",
        "toString",
        "i",
        "PseudoFileCloser",
        "sb",
        "append",
        "pfn",
        "append",
        "sb",
        "toString",
        "request",
        "sos",
        "siteMapFileCount",
        "siteMap",
        "siteMapFileCount",
        "aline",
        "siteMap",
        "sos",
        "aline",
        "log",
        "debug",
        "sos",
        "buildSiteMapFileIndex",
        "request",
        "siteMapFileCount",
        "Override",
        "request",
        "response",
        "relativeUrl",
        "ReqInfo",
        "getLocalUrl",
        "request",
        "request_status",
        "HttpServletResponse",
        "SC_OK",
        "timedProcedure",
        "Timer",
        "start",
        "RequestCache",
        "openThreadCache",
        "reqno",
        "reqNumber",
        "incrementAndGet",
        "LogUtil",
        "logServerAccessStart",
        "request",
        "toString",
        "reqno",
        "log",
        "debug",
        "Util",
        "getMemoryReport",
        "log",
        "debug",
        "ServletUtil",
        "showRequest",
        "request",
        "reqno",
        "log",
        "debug",
        "ServletUtil",
        "probeRequest",
        "request",
        "opendap_context",
        "request",
        "getContextPath",
        "ReqInfo",
        "isServiceOnlyRequest",
        "request",
        "reqURI",
        "request",
        "getRequestURI",
        "newURI",
        "reqURI",
        "response",
        "sendRedirect",
        "Scrub",
        "urlContent",
        "newURI",
        "log",
        "debug",
        "sos",
        "response",
        "getOutputStream",
        "msg",
        "relativeUrl",
        "ReqInfo",
        "getRequestSuffix",
        "request",
        "ReqInfo",
        "getConstraintExpression",
        "request",
        "log",
        "debug",
        "msg",
        "siteMap",
        "byte_count",
        "getSiteMap",
        "request",
        "siteMap",
        "siteMapFileCount",
        "siteMap",
        "size",
        "SITE_MAP_FILE_MAX_ENTRIES",
        "bytesPerFile",
        "byte_count",
        "siteMapFileCount",
        "newFileCount",
        "siteMapFileCount",
        "done",
        "bytesPerFile",
        "SITE_MAP_FILE_MAX_BYTES",
        "done",
        "newFileCount",
        "bytesPerFile",
        "byte_count",
        "newFileCount",
        "newFileCount",
        "siteMapFileCount",
        "SITE_MAP_FILE_MAX_ENTRIES",
        "done",
        "siteMapFileCount",
        "newFileCount",
        "log",
        "debug",
        "siteMapFileCount",
        "relativeUrl",
        "equals",
        "log",
        "debug",
        "request",
        "getRequestURI",
        "sendSiteMap",
        "request",
        "sos",
        "siteMapFileCount",
        "siteMap",
        "pseudoFilename",
        "relativeUrl",
        "indx",
        "pseudoFilename",
        "indexOf",
        "PseudoFileOpener",
        "file_index",
        "indx",
        "indx",
        "s",
        "pseudoFilename",
        "substring",
        "indx",
        "PseudoFileOpener",
        "length",
        "indx",
        "s",
        "indexOf",
        "PseudoFileCloser",
        "indx",
        "s",
        "s",
        "substring",
        "indx",
        "file_index",
        "parseInt",
        "s",
        "nfe",
        "log",
        "error",
        "pseudoFilename",
        "file_index",
        "file_index",
        "siteMapFileCount",
        "sendSiteMap",
        "request",
        "sos",
        "siteMapFileCount",
        "siteMap",
        "send_pseudoSiteMapFile",
        "file_index",
        "siteMapFileCount",
        "siteMap",
        "sos",
        "Timer",
        "stop",
        "timedProcedure",
        "t",
        "request_status",
        "OPeNDAPException",
        "anyExceptionHandler",
        "t",
        "response",
        "t2",
        "log",
        "error",
        "t2",
        "t3",
        "LogUtil",
        "logServerAccessEnd",
        "request_status",
        "RequestCache",
        "closeThreadCache",
        "log",
        "info",
        "log",
        "info",
        "Timer",
        "report",
        "Timer",
        "reset",
        "file_index",
        "siteMapFileCount",
        "siteMap",
        "sos",
        "linksPerFile",
        "siteMap",
        "size",
        "siteMapFileCount",
        "start",
        "file_index",
        "linksPerFile",
        "stop",
        "start",
        "linksPerFile",
        "index",
        "line",
        "siteMap",
        "index",
        "start",
        "index",
        "stop",
        "SITE_MAP_FILE_MAX_BYTES",
        "sos",
        "line",
        "line",
        "length",
        "index"
    ],
    "literals": [
        "\"init() start\"",
        "\"init() complete.\"",
        "\"i: {}\"",
        "\"siteMap has {} entries, {} bytes.\"",
        "\"smap_\"",
        "\".txt\"",
        "\"Building siteMap files index response.\"",
        "\"/\"",
        "\"\\n\"",
        "\"siteMap is large! It must be decomposed.\"",
        "\"HyraxAccess\"",
        "\"HTTP-GET\"",
        "\"/\"",
        "\"Sent redirectForServiceOnlyRequest to map the servlet \"",
        "\"context to a URL that ends in a '/' character!\"",
        "\"Requested relative URL: '\"",
        "\"' suffix: '\"",
        "\"' CE: '\"",
        "\"'\"",
        "\"siteMapFileCount: {}\"",
        "\"/\"",
        "\"Just the service endpoint. {}\"",
        "\"Failed to parse integer file number in string '{}'\"",
        "\"\\n########################################################\\n\"",
        "\"Request processing failed.\\n\"",
        "\"Normal Exception handling failed.\\n\"",
        "\"This is the last error log attempt for this request.\\n\"",
        "\"########################################################\\n\"",
        "\"HyraxAccess\"",
        "\"doGet(): Response completed.\\n\"",
        "\"doGet() - Timing Report: \\n{}\""
    ],
    "variables": [
        "reqNumber",
        "log",
        "configDoc"
    ],
    "comments": [
        "public static final long SITE_MAP_FILE_MAX_ENTRIES = 100;",
        "public static final long SITE_MAP_FILE_MAX_BYTES = 500;",
        "Timer.enable();",
        "Here we send the entire siteMap if the size is cool",
        "otherwise we send back the list of files.",
        "Here we try to allow for long lines in the files, but only up to a point...",
        "If we are here then the request should be asking for a siteMap sub file.",
        "If not then error (?) or possibly top level site map response...",
        "We look at the total number of siteMapfiles in this siteMap (computed)",
        "and then form the ith file based on their URL path.",
        "Did the parse effort succeed?",
        "If the parse effort failed we just return the top level file index.",
        "It's boned now.. Leave it be.",
        "Now we need to transmit a range from the site map that corresponds to their selected",
        "pseudo file number. The following is crude, but required due to the nature of the",
        "accessor methods in the underlying TreeSet. We could change up to Vector but at the cost",
        "of ordering..."
    ],
    "docstrings": [
        "* ************************************************************************\n     * A thread safe hit counter\n     *\n     * @serial",
        "* ************************************************************************\n     * Intitializes the servlet. Init (at this time) basically sets up\n     * the object opendap.util.Debug from the debuggery flags in the\n     * servlet InitParameters. The Debug object can be referenced (with\n     * impunity) from any of the dods code...\n     *\n     * @throws javax.servlet.ServletException",
        "* ***********************************************************************\n     * Handles incoming requests from clients. Parses the request and determines\n     * what kind of OPeNDAP response the cleint is requesting. If the request is\n     * understood, then the appropriate handler method is called, otherwise\n     * an error is returned to the client.\n     * <p/>\n     * This method is the entry point for <code>OLFS</code>. It uses\n     * the methods <code>processOpendapURL</code> to extract the OPeNDAP URL\n     * information from the incoming client request. This OPeNDAP URL information\n     * is cached and made accessible through get and set methods.\n     * <p/>\n     * After  <code>processOpendapURL</code> is called <code>loadIniFile()</code>\n     * is called to load configuration information from a .ini file,\n     * <p/>\n     * If the standard behaviour of the servlet (extracting the OPeNDAP URL\n     * information from the client request, or loading the .ini file) then\n     * you should overload <code>processOpendapURL</code> and <code>loadIniFile()\n     * </code>. <b> We don't recommend overloading <code>doGet()</code> beacuse\n     * the logic contained there may change in our core and cause your server\n     * to behave unpredictably when future releases are installed.</b>\n     *\n     * @param request  The client's <code> HttpServletRequest</code> request\n     *                 object.\n     * @param response The server's <code> HttpServletResponse</code> response\n     *                 object.\n     * @see ReqInfo"
    ],
    "functions": [
        "init",
        "getSiteMap",
        "buildSiteMapFileIndex",
        "sendSiteMap",
        "doGet",
        "send_pseudoSiteMapFile"
    ],
    "classes": [
        "BESSiteMapHandler"
    ]
}