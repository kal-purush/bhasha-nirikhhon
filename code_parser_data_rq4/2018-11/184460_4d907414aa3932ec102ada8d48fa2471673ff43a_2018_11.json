{
    "identifiers": [
        "absolute_import",
        "unicode_literals",
        "kombu",
        "utils",
        "cached_property",
        "kombu",
        "utils",
        "encoding",
        "bytes_to_str",
        "kombu",
        "utils",
        "url",
        "_parse_url",
        "celery",
        "exceptions",
        "ImproperlyConfigured",
        "celery",
        "utils",
        "log",
        "get_logger",
        "KeyValueStoreBackend",
        "pydocumentdb",
        "pydocumentdb",
        "document_client",
        "DocumentClient",
        "pydocumentdb",
        "documents",
        "ConnectionPolicy",
        "pydocumentdb",
        "documents",
        "ConsistencyLevel",
        "pydocumentdb",
        "documents",
        "PartitionKind",
        "pydocumentdb",
        "errors",
        "HTTPFailure",
        "pydocumentdb",
        "retry_options",
        "RetryOptions",
        "ImportError",
        "get_logger",
        "KeyValueStoreBackend",
        "url",
        "database_name",
        "collection_name",
        "consistency_level",
        "max_retry_attempts",
        "max_retry_wait_time",
        "args",
        "kwargs",
        "CosmosDBSQLBackend",
        "args",
        "kwargs",
        "pydocumentdb",
        "ImproperlyConfigured",
        "app",
        "conf",
        "_endpoint",
        "_key",
        "_parse_url",
        "url",
        "database_name",
        "conf",
        "collection_name",
        "conf",
        "getattr",
        "ConsistencyLevel",
        "consistency_level",
        "conf",
        "AttributeError",
        "ImproperlyConfigured",
        "max_retry_attempts",
        "conf",
        "max_retry_wait_time",
        "conf",
        "classmethod",
        "cls",
        "url",
        "_parse_url",
        "url",
        "host",
        "password",
        "ImproperlyConfigured",
        "port",
        "port",
        "scheme",
        "host",
        "port",
        "endpoint",
        "password",
        "cached_property",
        "ConnectionPolicy",
        "RetryOptions",
        "max_retry_attempt_count",
        "_max_retry_attempts",
        "max_wait_time_in_seconds",
        "_max_retry_wait_time",
        "DocumentClient",
        "_endpoint",
        "_key",
        "connection_policy",
        "connection_policy",
        "consistency_level",
        "_consistency_level",
        "_create_database_if_not_exists",
        "client",
        "_create_collection_if_not_exists",
        "client",
        "client",
        "client",
        "client",
        "CreateDatabase",
        "_database_name",
        "HTTPFailure",
        "ex",
        "ex",
        "status_code",
        "ERROR_EXISTS",
        "LOGGER",
        "info",
        "_database_name",
        "client",
        "client",
        "CreateCollection",
        "_database_link",
        "_collection_name",
        "PartitionKind",
        "Hash",
        "HTTPFailure",
        "ex",
        "ex",
        "status_code",
        "ERROR_EXISTS",
        "LOGGER",
        "info",
        "_database_name",
        "_collection_name",
        "cached_property",
        "_database_name",
        "cached_property",
        "_database_link",
        "_collection_name",
        "key",
        "_collection_link",
        "key",
        "classmethod",
        "cls",
        "key",
        "key",
        "key",
        "isspace",
        "ValueError",
        "key",
        "key",
        "bytes_to_str",
        "key",
        "LOGGER",
        "debug",
        "_database_name",
        "_collection_name",
        "key",
        "_client",
        "ReadDocument",
        "_get_document_link",
        "key",
        "_get_partition_key",
        "key",
        "HTTPFailure",
        "ex",
        "ex",
        "status_code",
        "ERROR_NOT_FOUND",
        "get",
        "key",
        "value",
        "bytes_to_str",
        "key",
        "LOGGER",
        "debug",
        "_database_name",
        "_collection_name",
        "key",
        "_client",
        "CreateDocument",
        "_collection_link",
        "key",
        "value",
        "_get_partition_key",
        "key",
        "keys",
        "get",
        "key",
        "key",
        "keys",
        "key",
        "bytes_to_str",
        "key",
        "LOGGER",
        "debug",
        "_database_name",
        "_collection_name",
        "key",
        "_client",
        "DeleteDocument",
        "_get_document_link",
        "key",
        "_get_partition_key",
        "key"
    ],
    "literals": [
        "\"CosmosDBSQLBackend\"",
        "\"You need to install the pydocumentdb library to use the \"",
        "\"CosmosDB backend.\"",
        "\"cosmosdbsql_database_name\"",
        "\"cosmosdbsql_collection_name\"",
        "\"cosmosdbsql_consistency_level\"",
        "\"Unknown CosmosDB consistency level\"",
        "\"cosmosdbsql_max_retry_attempts\"",
        "\"cosmosdbsql_max_retry_wait_time\"",
        "\"Invalid URL\"",
        "\"https\"",
        "\"http\"",
        "\"%s://%s:%s\"",
        "\"masterKey\"",
        "\"id\"",
        "\"Created CosmosDB database %s\"",
        "\"id\"",
        "\"partitionKey\"",
        "\"paths\"",
        "\"/id\"",
        "\"kind\"",
        "\"Created CosmosDB collection %s/%s\"",
        "\"dbs/\"",
        "\"/colls/\"",
        "\"/docs/\"",
        "\"Key cannot be none, empty or whitespace.\"",
        "\"partitionKey\"",
        "\"Getting CosmosDB document %s/%s/%s\"",
        "\"value\"",
        "\"Creating CosmosDB document %s/%s/%s\"",
        "\"id\"",
        "\"value\"",
        "\"Deleting CosmosDB document %s/%s/%s\""
    ],
    "variables": [
        "pydocumentdb",
        "DocumentClient",
        "ConsistencyLevel",
        "PartitionKind",
        "HTTPFailure",
        "ConnectionPolicy",
        "RetryOptions",
        "__all__",
        "ERROR_NOT_FOUND",
        "ERROR_EXISTS",
        "LOGGER",
        "conf",
        "_database_name",
        "_collection_name",
        "_consistency_level",
        "_max_retry_attempts",
        "_max_retry_wait_time",
        "_",
        "host",
        "port",
        "_",
        "password",
        "_",
        "_",
        "port",
        "scheme",
        "endpoint",
        "connection_policy",
        "connection_policy",
        "RetryOptions",
        "client",
        "key",
        "key",
        "key"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "pragma: no cover",
        "noqa"
    ],
    "docstrings": [
        "\"\"\"The CosmosDB/SQL backend for Celery (experimental).\"\"\"",
        "\"\"\"CosmosDB/SQL backend for Celery.\"\"\"",
        "\"\"\"Return the CosmosDB/SQL client.\n\n        If this is the first call to the property, the client is created and\n        the database and collection are initialized if they don't yet exist.\n\n        \"\"\"",
        "\"\"\"Read the value stored at the given key.\n\n        Args:\n              key: The key for which to read the value.\n\n        \"\"\"",
        "\"\"\"Store a value for a given key.\n\n        Args:\n              key: The key at which to store the value.\n              value: The value to store.\n\n        \"\"\"",
        "\"\"\"Read all the values for the provided keys.\n\n        Args:\n              keys: The list of keys to read.\n\n        \"\"\"",
        "\"\"\"Delete the value at a given key.\n\n        Args:\n              key: The key of the value to delete.\n\n        \"\"\""
    ],
    "functions": [
        "_parse_url",
        "_client",
        "_create_database_if_not_exists",
        "_create_collection_if_not_exists",
        "_database_link",
        "_collection_link",
        "_get_document_link",
        "_get_partition_key",
        "get",
        "mget"
    ],
    "classes": [
        "CosmosDBSQLBackend"
    ]
}