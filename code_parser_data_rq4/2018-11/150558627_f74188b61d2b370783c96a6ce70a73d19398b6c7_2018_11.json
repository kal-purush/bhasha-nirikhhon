{
    "identifiers": [
        "Buffer",
        "i",
        "i",
        "_HEX",
        "i",
        "i",
        "i",
        "buffer",
        "offset",
        "array",
        "offset",
        "num",
        "hi",
        "lo",
        "a1",
        "a2",
        "a1",
        "Buffer",
        "a1",
        "a2",
        "a1",
        "Buffer",
        "a1",
        "a2",
        "Buffer",
        "arguments",
        "o",
        "i",
        "o",
        "i",
        "b",
        "i",
        "carry",
        "b",
        "i",
        "v",
        "carry",
        "v",
        "num",
        "hi",
        "lo",
        "hi",
        "lo",
        "arguments",
        "hi",
        "negate",
        "hi",
        "hi",
        "hi",
        "lo",
        "hi",
        "VAL32",
        "hi",
        "hi",
        "VAL32",
        "hi",
        "VAL32",
        "RangeError",
        "hi",
        "hi",
        "hi",
        "hi",
        "hi",
        "hi",
        "lo",
        "parseInt",
        "hi",
        "hi",
        "hi",
        "hi",
        "hi",
        "hi",
        "parseInt",
        "hi",
        "hi",
        "i",
        "i",
        "b",
        "o",
        "i",
        "lo",
        "lo",
        "i",
        "hi",
        "lo",
        "negate",
        "allowImprecise",
        "b",
        "o",
        "i",
        "i",
        "m",
        "b",
        "o",
        "i",
        "negate",
        "v",
        "v",
        "carry",
        "carry",
        "v",
        "v",
        "v",
        "x",
        "v",
        "m",
        "allowImprecise",
        "x",
        "Int64",
        "negate",
        "Infinity",
        "Infinity",
        "negate",
        "x",
        "x",
        "radix",
        "radix",
        "sep",
        "i",
        "i",
        "i",
        "_HEX",
        "b",
        "o",
        "i",
        "sep",
        "rawBuffer",
        "rawBuffer",
        "Buffer",
        "targetBuffer",
        "targetOffset",
        "targetBuffer",
        "targetOffset",
        "other",
        "other",
        "other",
        "other",
        "other",
        "i",
        "i",
        "i",
        "other",
        "other",
        "i",
        "i",
        "other",
        "other",
        "i",
        "other",
        "other"
    ],
    "literals": [
        "\"buffer\"",
        "string",
        "\"\"",
        "\"0\"",
        "string",
        "string",
        "\"[object Uint8Array]\"",
        "string",
        "string",
        "\"number\"",
        "\" is outside Int64 range\"",
        "\"string\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\" must be a Number or String\"",
        "string",
        "string",
        "string",
        "\"\"",
        "string",
        "\"[Int64 value:\"",
        "\" octets:\"",
        "\" \"",
        "\"]\""
    ],
    "variables": [
        "VAL32",
        "_HEX",
        "i",
        "b",
        "o",
        "carry",
        "i",
        "v",
        "negate",
        "b",
        "o",
        "i",
        "b",
        "o",
        "negate",
        "x",
        "carry",
        "i",
        "m",
        "v",
        "b",
        "o",
        "i",
        "i"
    ],
    "comments": [
        "Int64.js",
        "",
        "Copyright (c) 2012 Robert Kieffer",
        "MIT License - http://opensource.org/licenses/mit-license.php",
        "Useful masks and values for bit twiddling",
        "Map for converting hex octets to strings",
        "",
        "Int64",
        "",
        "Max integer value that JS can accurately represent",
        "Min integer value that JS can accurately represent",
        "Under Browserify, Buffers can extend Uint8Arrays rather than an",
        "instance of Buffer. We could assume the passed in Uint8Array is actually",
        "a buffer but that won't handle the case where a raw Uint8Array is passed",
        "in. We construct a new Buffer just in case.",
        "Simplify bitfield retrieval by using abs() value.  We restore sign",
        "later",
        "Technically we should throw if hi or lo is outside int32 range here, but",
        "it's not worth the effort. Anything past the 32'nd bit is ignored.",
        "Copy bytes to buffer",
        "Restore sign of passed argument",
        "Running sum of octets, doing a 2's complement",
        "2's complement for negative numbers",
        "Return Infinity if we've lost integer precision",
        "If sign bits differ ...",
        "otherwise, compare bytes lexicographically"
    ],
    "docstrings": [
        "* Support for handling 64-bit int numbers in Javascript (node.js)\n *\n * JS Numbers are IEEE-754 binary double-precision floats, which limits the\n * range of values that can be represented with integer precision to:\n *\n * 2^^53 <= N <= 2^53\n *\n * Int64 objects wrap a node Buffer that holds the 8-bytes of int64 data.  These\n * objects operate directly on the buffer which means that if they are created\n * using an existing buffer then setting the value will modify the Buffer, and\n * vice-versa.\n *\n * Internal Representation\n *\n * The internal buffer format is Big Endian.  I.e. the most-significant byte is\n * at buffer[0], the least-significant at buffer[7].  For the purposes of\n * converting to/from JS native numbers, the value is assumed to be a signed\n * integer stored in 2's complement form.\n *\n * For details about IEEE-754 see:\n * http://en.wikipedia.org/wiki/Double_precision_floating-point_format",
        "* Constructor accepts any of the following argument types:\n     *\n     * new Int64(buffer[, offset=0]) - Existing Buffer with byte offset\n     * new Int64(Uint8Array[, offset=0]) - Existing Uint8Array with a byte offset\n     * new Int64(string)             - Hex string (throws if n is outside int64 range)\n     * new Int64(number)             - Number (throws if n is outside int64 range)\n     * new Int64(hi, lo)             - Raw bits as two 32-bit values",
        "* Do in-place 2's compliment.  See\n     * http://en.wikipedia.org/wiki/Two's_complement",
        "* Set the value. Takes any of the following arguments:\n     *\n     * setValue(string) - A hexidecimal string\n     * setValue(number) - Number (throws if n is outside int64 range)\n     * setValue(hi, lo) - Raw bits as two 32-bit values",
        "* Convert to a native JS number.\n     *\n     * WARNING: Do not expect this value to be accurate to integer precision for\n     * large (positive or negative) numbers!\n     *\n     * @param allowImprecise If true, no check is performed to verify the\n     * returned value is accurate to integer precision.  If false, imprecise\n     * numbers (very large positive or negative numbers) will be forced to +/-\n     * Infinity.",
        "* Convert to a JS Number. Returns +/-Infinity for values that can't be\n     * represented to integer precision.",
        "* Return string value\n     *\n     * @param radix Just like Number#toString()'s radix",
        "* Return a string showing the buffer octets, with MSB on the left.\n     *\n     * @param sep separator string. default is '' (empty string)",
        "* Returns the int64's 8 bytes in a buffer.\n     *\n     * @param {bool} [rawBuffer=false]  If no offset and this is true, return the internal buffer.  Should only be used if\n     *                                  you're discarding the Int64 afterwards, as it breaks encapsulation.",
        "* Copy 8 bytes of int64 into target buffer at target offset.\n     *\n     * @param {Buffer} targetBuffer       Buffer to copy into.\n     * @param {number} [targetOffset=0]   Offset into target buffer.",
        "* Returns a number indicating whether this comes before or after or is the\n     * same as the other in sort order.\n     *\n     * @param {Int64} other  Other Int64 to compare.",
        "* Returns a boolean indicating if this integer is equal to other.\n     *\n     * @param {Int64} other  Other Int64 to compare.",
        "* Pretty output in console.log"
    ],
    "functions": [
        "_2scomp",
        "setValue",
        "toNumber",
        "valueOf",
        "toString",
        "toOctetString",
        "toBuffer",
        "copy",
        "compare",
        "equals",
        "inspect"
    ],
    "classes": [
        "Int64"
    ]
}