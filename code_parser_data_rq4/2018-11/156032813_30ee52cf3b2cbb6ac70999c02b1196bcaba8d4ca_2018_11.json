{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "process",
        "process",
        "fs",
        "paths",
        "webpackEnv",
        "webpackEnv",
        "webpackEnv",
        "isEnvProduction",
        "paths",
        "isEnvDevelopment",
        "publicPath",
        "isEnvProduction",
        "publicPath",
        "isEnvDevelopment",
        "getClientEnvironment",
        "publicUrl",
        "getStyleLoaders",
        "cssOptions",
        "preProcessor",
        "isEnvDevelopment",
        "require",
        "isEnvProduction",
        "MiniCssExtractPlugin",
        "shouldUseRelativeAssetPaths",
        "require",
        "cssOptions",
        "require",
        "require",
        "require",
        "isEnvProduction",
        "shouldUseSourceMap",
        "preProcessor",
        "loaders",
        "require",
        "preProcessor",
        "isEnvProduction",
        "shouldUseSourceMap",
        "loaders",
        "isEnvProduction",
        "isEnvDevelopment",
        "isEnvProduction",
        "isEnvProduction",
        "shouldUseSourceMap",
        "isEnvDevelopment",
        "isEnvDevelopment",
        "require",
        "paths",
        "isEnvProduction",
        "paths",
        "isEnvDevelopment",
        "isEnvProduction",
        "isEnvDevelopment",
        "isEnvProduction",
        "isEnvDevelopment",
        "publicPath",
        "isEnvProduction",
        "info",
        "path",
        "paths",
        "info",
        "isEnvDevelopment",
        "info",
        "path",
        "info",
        "isEnvProduction",
        "TerserPlugin",
        "shouldUseSourceMap",
        "OptimizeCSSAssetsPlugin",
        "safePostCssParser",
        "shouldUseSourceMap",
        "process",
        "path",
        "paths",
        "ext",
        "ext",
        "ext",
        "useTypeScript",
        "ext",
        "PnpWebpackPlugin",
        "ModuleScopePlugin",
        "paths",
        "paths",
        "PnpWebpackPlugin",
        "require",
        "require",
        "require",
        "require",
        "paths",
        "require",
        "paths",
        "require",
        "require",
        "require",
        "getCacheIdentifier",
        "isEnvProduction",
        "isEnvDevelopment",
        "require",
        "isEnvProduction",
        "isEnvProduction",
        "require",
        "require",
        "isEnvProduction",
        "getCacheIdentifier",
        "isEnvProduction",
        "isEnvDevelopment",
        "cssRegex",
        "cssModuleRegex",
        "getStyleLoaders",
        "isEnvProduction",
        "shouldUseSourceMap",
        "cssModuleRegex",
        "getStyleLoaders",
        "isEnvProduction",
        "shouldUseSourceMap",
        "getCSSModuleLocalIdent",
        "sassRegex",
        "sassModuleRegex",
        "getStyleLoaders",
        "isEnvProduction",
        "shouldUseSourceMap",
        "sassModuleRegex",
        "getStyleLoaders",
        "isEnvProduction",
        "shouldUseSourceMap",
        "getCSSModuleLocalIdent",
        "require",
        "HtmlWebpackPlugin",
        "paths",
        "isEnvProduction",
        "isEnvProduction",
        "shouldInlineRuntimeChunk",
        "InlineChunkHtmlPlugin",
        "HtmlWebpackPlugin",
        "InterpolateHtmlPlugin",
        "HtmlWebpackPlugin",
        "env",
        "ModuleNotFoundPlugin",
        "paths",
        "webpack",
        "env",
        "isEnvDevelopment",
        "webpack",
        "isEnvDevelopment",
        "CaseSensitivePathsPlugin",
        "isEnvDevelopment",
        "WatchMissingNodeModulesPlugin",
        "paths",
        "isEnvProduction",
        "MiniCssExtractPlugin",
        "ManifestPlugin",
        "publicPath",
        "webpack",
        "isEnvProduction",
        "WorkboxWebpackPlugin",
        "publicUrl",
        "useTypeScript",
        "ForkTsCheckerWebpackPlugin",
        "resolve",
        "paths",
        "paths",
        "paths",
        "typescriptFormatter"
    ],
    "literals": [
        "'use strict'",
        "'fs'",
        "'path'",
        "'webpack'",
        "'resolve'",
        "'pnp-webpack-plugin'",
        "'html-webpack-plugin'",
        "'case-sensitive-paths-webpack-plugin'",
        "'react-dev-utils/InlineChunkHtmlPlugin'",
        "'terser-webpack-plugin'",
        "'mini-css-extract-plugin'",
        "'optimize-css-assets-webpack-plugin'",
        "'postcss-safe-parser'",
        "'webpack-manifest-plugin'",
        "'react-dev-utils/InterpolateHtmlPlugin'",
        "'workbox-webpack-plugin'",
        "'react-dev-utils/WatchMissingNodeModulesPlugin'",
        "'react-dev-utils/ModuleScopePlugin'",
        "'react-dev-utils/getCSSModuleLocalIdent'",
        "'./paths'",
        "'./env'",
        "'react-dev-utils/ModuleNotFoundPlugin'",
        "'fork-ts-checker-webpack-plugin-alt'",
        "'react-dev-utils/typescriptFormatter'",
        "'react-dev-utils/getCacheIdentifier'",
        "'false'",
        "'false'",
        "'development'",
        "'production'",
        "'/'",
        "'./'",
        "''",
        "'style-loader'",
        "'../../'",
        "'css-loader'",
        "'postcss-loader'",
        "'postcss'",
        "'postcss-flexbugs-fixes'",
        "'postcss-preset-env'",
        "'no-2009'",
        "'production'",
        "'development'",
        "'source-map'",
        "'cheap-module-source-map'",
        "'react-dev-utils/webpackHotDevClient'",
        "'static/js/[name].[chunkhash:8].js'",
        "'static/js/bundle.js'",
        "'static/js/[name].[chunkhash:8].chunk.js'",
        "'static/js/[name].chunk.js'",
        "'/'",
        "'/'",
        "'all'",
        "'node_modules'",
        ".${ext}",
        "'ts'",
        "'react-native'",
        "'react-native-web'",
        "'pre'",
        "'react-dev-utils/eslintFormatter'",
        "'eslint'",
        "'eslint-config-react-app'",
        "'999.999.999'",
        "'eslint-loader'",
        "'url-loader'",
        "'static/media/[name].[hash:8].[ext]'",
        "'babel-loader'",
        "'babel-preset-react-app/webpack-overrides'",
        "'babel-preset-react-app'",
        "'production'",
        "'development'",
        "'babel-plugin-named-asset-import'",
        "'babel-preset-react-app'",
        "'react-dev-utils'",
        "'react-scripts'",
        "'babel-plugin-named-asset-import'",
        "'@svgr/webpack?-prettier,-svgo![path]'",
        "'babel-loader'",
        "'babel-preset-react-app/dependencies'",
        "'production'",
        "'development'",
        "'babel-plugin-named-asset-import'",
        "'babel-preset-react-app'",
        "'react-dev-utils'",
        "'react-scripts'",
        "'sass-loader'",
        "'sass-loader'",
        "'file-loader'",
        "'static/media/[name].[hash:8].[ext]'",
        "'static/css/[name].[contenthash:8].css'",
        "'static/css/[name].[contenthash:8].chunk.css'",
        "'asset-manifest.json'",
        "'cdn'",
        "'/index.html'",
        "'^/_'",
        "'/[^/]+\\\\.[^/]+$'",
        "'typescript'",
        "'esnext'",
        "'node'",
        "'preserve'",
        "'**'",
        "'!**/*.json'",
        "'!**/__tests__/**'",
        "'!**/?(*.)(spec|test).*'",
        "'!src/setupProxy.js'",
        "'!src/setupTests.*'",
        "'empty'",
        "'empty'",
        "'empty'",
        "'empty'",
        "'empty'"
    ],
    "variables": [
        "fs",
        "path",
        "webpack",
        "resolve",
        "PnpWebpackPlugin",
        "HtmlWebpackPlugin",
        "CaseSensitivePathsPlugin",
        "InlineChunkHtmlPlugin",
        "TerserPlugin",
        "MiniCssExtractPlugin",
        "OptimizeCSSAssetsPlugin",
        "safePostCssParser",
        "ManifestPlugin",
        "InterpolateHtmlPlugin",
        "WorkboxWebpackPlugin",
        "WatchMissingNodeModulesPlugin",
        "ModuleScopePlugin",
        "getCSSModuleLocalIdent",
        "paths",
        "getClientEnvironment",
        "ModuleNotFoundPlugin",
        "ForkTsCheckerWebpackPlugin",
        "typescriptFormatter",
        "getCacheIdentifier",
        "shouldUseSourceMap",
        "shouldInlineRuntimeChunk",
        "useTypeScript",
        "cssRegex",
        "cssModuleRegex",
        "sassRegex",
        "sassModuleRegex",
        "isEnvDevelopment",
        "isEnvProduction",
        "publicPath",
        "shouldUseRelativeAssetPaths",
        "publicUrl",
        "env",
        "getStyleLoaders",
        "loaders"
    ],
    "comments": [
        "@remove-on-eject-begin",
        "@remove-on-eject-end",
        "@remove-on-eject-begin",
        "@remove-on-eject-end",
        "Source maps are resource heavy and can cause out of memory issue for large source files.",
        "Some apps do not need the benefits of saving a web request, so not inlining the chunk",
        "makes for a smoother build process.",
        "Check if TypeScript is setup",
        "style files regexes",
        "This is the production and development configuration.",
        "It is focused on developer experience, fast rebuilds, and a minimal bundle.",
        "Webpack uses `publicPath` to determine where the app is being served from.",
        "It requires a trailing slash, or the file assets will get an incorrect path.",
        "In development, we always serve from the root. This makes config easier.",
        "Some apps do not use client-side routing with pushState.",
        "For these, \"homepage\" can be set to \".\" to enable relative asset paths.",
        "`publicUrl` is just like `publicPath`, but we will provide it to our app",
        "as %PUBLIC_URL% in `index.html` and `process.env.PUBLIC_URL` in JavaScript.",
        "Omit trailing slash as %PUBLIC_URL%/xyz looks better than %PUBLIC_URL%xyz.",
        "Get environment variables to inject into our app.",
        "common function to get style loaders",
        "Options for PostCSS as we reference these options twice",
        "Adds vendor prefixing based on your specified browser support in",
        "package.json",
        "Necessary for external CSS imports to work",
        "https://github.com/facebook/create-react-app/issues/2677",
        "Stop compilation early in production",
        "These are the \"entry points\" to our application.",
        "This means they will be the \"root\" imports that are included in JS bundle.",
        "Include an alternative client for WebpackDevServer. A client's job is to",
        "connect to WebpackDevServer by a socket and get notified about changes.",
        "When you save a file, the client will either apply hot updates (in case",
        "of CSS changes), or refresh the page (in case of JS changes). When you",
        "make a syntax error, this client will display a syntax error overlay.",
        "Note: instead of the default WebpackDevServer client, we use a custom one",
        "to bring better experience for Create React App users. You can replace",
        "the line below with these two lines if you prefer the stock client:",
        "require.resolve('webpack-dev-server/client') + '?/',",
        "require.resolve('webpack/hot/dev-server'),",
        "Finally, this is your app's code:",
        "We include the app code last so that if there is a runtime error during",
        "initialization, it doesn't blow up the WebpackDevServer client, and",
        "changing JS code would still trigger a refresh.",
        "The build folder.",
        "Add /* filename */ comments to generated require()s in the output.",
        "There will be one main bundle, and one file per asynchronous chunk.",
        "In development, it does not produce real files.",
        "There are also additional JS chunk files if you use code splitting.",
        "We inferred the \"public path\" (such as / or /my-project) from homepage.",
        "We use \"/\" in development.",
        "Point sourcemap entries to original disk location (format as URL on Windows)",
        "This is only used in production mode",
        "we want terser to parse ecma 8 code. However, we don't want it",
        "to apply any minfication steps that turns valid ecma 5 code",
        "into invalid ecma 5 code. This is why the 'compress' and 'output'",
        "sections only apply transformations that are ecma 5 safe",
        "https://github.com/facebook/create-react-app/pull/4234",
        "Disabled because of an issue with Uglify breaking seemingly valid code:",
        "https://github.com/facebook/create-react-app/issues/2376",
        "Pending further investigation:",
        "https://github.com/mishoo/UglifyJS2/issues/2011",
        "Disabled because of an issue with Terser breaking valid code:",
        "https://github.com/facebook/create-react-app/issues/5250",
        "Pending futher investigation:",
        "https://github.com/terser-js/terser/issues/120",
        "Turned on because emoji and regex is not minified properly using default",
        "https://github.com/facebook/create-react-app/issues/2488",
        "Use multi-process parallel running to improve the build speed",
        "Default number of concurrent runs: os.cpus().length - 1",
        "Enable file caching",
        "This is only used in production mode",
        "`inline: false` forces the sourcemap to be output into a",
        "separate file",
        "`annotation: true` appends the sourceMappingURL to the end of",
        "the css file, helping the browser find the sourcemap",
        "Automatically split vendor and commons",
        "https://twitter.com/wSokra/status/969633336732905474",
        "https://medium.com/webpack/webpack-4-code-splitting-chunk-graph-and-the-splitchunks-optimization-be739a861366",
        "Keep the runtime chunk seperated to enable long term caching",
        "https://twitter.com/wSokra/status/969679223278505985",
        "This allows you to set a fallback for where Webpack should look for modules.",
        "We placed these paths second because we want `node_modules` to \"win\"",
        "if there are any conflicts. This matches Node resolution mechanism.",
        "https://github.com/facebook/create-react-app/issues/253",
        "It is guaranteed to exist because we tweak it in `env.js`",
        "These are the reasonable defaults supported by the Node ecosystem.",
        "We also include JSX as a common component filename extension to support",
        "some tools, although we do not recommend using it, see:",
        "https://github.com/facebook/create-react-app/issues/290",
        "`web` extension prefixes have been added for better support",
        "for React Native Web.",
        "Support React Native Web",
        "https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/",
        "Adds support for installing with Plug'n'Play, leading to faster installs and adding",
        "guards against forgotten dependencies and such.",
        "Prevents users from importing files from outside of src/ (or node_modules/).",
        "This often causes confusion because we only process files within src/ with babel.",
        "To fix this, we prevent you from importing files out of src/ -- if you'd like to,",
        "please link the files into your node_modules/ and let module-resolution kick in.",
        "Make sure your source files are compiled, as they will not be processed in any way.",
        "Also related to Plug'n'Play, but this time it tells Webpack to load its loaders",
        "from the current package.",
        "Disable require.ensure as it's not a standard language feature.",
        "First, run the linter.",
        "It's important to do this before Babel processes the JS.",
        "@remove-on-eject-begin",
        "@remove-on-eject-end",
        "\"oneOf\" will traverse all following loaders until one will",
        "match the requirements. When no loader matches it will fall",
        "back to the \"file\" loader at the end of the loader list.",
        "\"url\" loader works like \"file\" loader except that it embeds assets",
        "smaller than specified limit in bytes as data URLs to avoid requests.",
        "A missing `test` is equivalent to a match.",
        "Process application JS with Babel.",
        "The preset includes JSX, Flow, TypeScript, and some ESnext features.",
        "@remove-on-eject-begin",
        "Make sure we have a unique cache identifier, erring on the",
        "side of caution.",
        "We remove this when the user ejects because the default",
        "is sane and uses Babel options. Instead of options, we use",
        "the react-scripts and babel-preset-react-app versions.",
        "@remove-on-eject-end",
        "This is a feature of `babel-loader` for webpack (not Babel itself).",
        "It enables caching results in ./node_modules/.cache/babel-loader/",
        "directory for faster rebuilds.",
        "Process any JS outside of the app with Babel.",
        "Unlike the application JS, we only compile the standard ES features.",
        "@remove-on-eject-begin",
        "@remove-on-eject-end",
        "If an error happens in a package, it's possible to be",
        "because it was compiled. Thus, we don't want the browser",
        "debugger to show the original code. Instead, the code",
        "being evaluated would be much more helpful.",
        "\"postcss\" loader applies autoprefixer to our CSS.",
        "\"css\" loader resolves paths in CSS and adds assets as dependencies.",
        "\"style\" loader turns CSS into JS modules that inject <style> tags.",
        "In production, we use MiniCSSExtractPlugin to extract that CSS",
        "to a file, but in development \"style\" loader enables hot editing",
        "of CSS.",
        "By default we support CSS Modules with the extension .module.css",
        "Don't consider CSS imports dead code even if the",
        "containing package claims to have no side effects.",
        "Remove this when webpack adds a warning or an error for this.",
        "See https://github.com/webpack/webpack/issues/6571",
        "Adds support for CSS Modules (https://github.com/css-modules/css-modules)",
        "using the extension .module.css",
        "Opt-in support for SASS (using .scss or .sass extensions).",
        "By default we support SASS Modules with the",
        "extensions .module.scss or .module.sass",
        "Don't consider CSS imports dead code even if the",
        "containing package claims to have no side effects.",
        "Remove this when webpack adds a warning or an error for this.",
        "See https://github.com/webpack/webpack/issues/6571",
        "Adds support for CSS Modules, but using SASS",
        "using the extension .module.scss or .module.sass",
        "\"file\" loader makes sure those assets get served by WebpackDevServer.",
        "When you `import` an asset, you get its (virtual) filename.",
        "In production, they would get copied to the `build` folder.",
        "This loader doesn't use a \"test\" so it will catch all modules",
        "that fall through the other loaders.",
        "Exclude `js` files to keep \"css\" loader working as it injects",
        "its runtime that would otherwise be processed through \"file\" loader.",
        "Also exclude `html` and `json` extensions so they get processed",
        "by webpacks internal loaders.",
        "Make sure to add the new loader(s) before the \"file\" loader.",
        "Generates an `index.html` file with the <script> injected.",
        "Inlines the webpack runtime script. This script is too small to warrant",
        "a network request.",
        "Makes some environment variables available in index.html.",
        "The public URL is available as %PUBLIC_URL% in index.html, e.g.:",
        "<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">",
        "In production, it will be an empty string unless you specify \"homepage\"",
        "in `package.json`, in which case it will be the pathname of that URL.",
        "In development, this will be an empty string.",
        "This gives some necessary context to module not found errors, such as",
        "the requesting resource.",
        "Makes some environment variables available to the JS code, for example:",
        "if (process.env.NODE_ENV === 'production') { ... }. See `./env.js`.",
        "It is absolutely essential that NODE_ENV is set to production",
        "during a production build.",
        "Otherwise React will be compiled in the very slow development mode.",
        "This is necessary to emit hot updates (currently CSS only):",
        "Watcher doesn't work well if you mistype casing in a path so we use",
        "a plugin that prints an error when you attempt to do this.",
        "See https://github.com/facebook/create-react-app/issues/240",
        "If you require a missing module and then `npm install` it, you still have",
        "to restart the development server for Webpack to discover it. This plugin",
        "makes the discovery automatic so you don't have to restart.",
        "See https://github.com/facebook/create-react-app/issues/186",
        "Options similar to the same options in webpackOptions.output",
        "both options are optional",
        "Generate a manifest file which contains a mapping of all asset filenames",
        "to their corresponding output file so that tools can pick it up without",
        "having to parse `index.html`.",
        "Moment.js is an extremely popular library that bundles large locale files",
        "by default due to how Webpack interprets its code. This is a practical",
        "solution that requires the user to opt into importing specific locales.",
        "https://github.com/jmblog/how-to-optimize-momentjs-with-webpack",
        "You can remove this if you don't use Moment.js:",
        "Generate a service worker script that will precache, and keep up to date,",
        "the HTML & assets that are part of the Webpack build.",
        "Exclude URLs starting with /_, as they're likely an API call",
        "Exclude URLs containing a dot, as they're likely a resource in",
        "public/ and not a SPA route",
        "TypeScript type checking",
        "Some libraries import Node modules but don't use them in the browser.",
        "Tell Webpack to provide empty mocks for them so importing them works.",
        "Turn off performance processing because we utilize",
        "our own hints via the FileSizeReporter"
    ],
    "docstrings": [
        "* Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.",
        "** STOP ** Are you adding a new loader?"
    ],
    "functions": [],
    "classes": []
}