{
    "identifiers": [
        "json",
        "requests",
        "socket",
        "ssl",
        "time",
        "xml",
        "etree",
        "ElementTree",
        "ElementTree",
        "oauth2client",
        "client",
        "GoogleCredentials",
        "googleapiclient",
        "discovery",
        "BaseHTTPServer",
        "BaseHTTPRequestHandler",
        "HTTPServer",
        "pprint",
        "pprint",
        "urllib3",
        "exceptions",
        "InsecureRequestWarning",
        "requests",
        "packages",
        "urllib3",
        "disable_warnings",
        "InsecureRequestWarning",
        "apiKey",
        "apiKey",
        "sessionid",
        "natsport",
        "rxtime",
        "client_address",
        "fw_url_log_cmd1",
        "client_address",
        "fw_url_log_cmd2",
        "sessionid",
        "fw_url_log_cmd3",
        "natsport",
        "fw_url_log_cmd4",
        "rxtime",
        "split",
        "rxtime",
        "split",
        "fw_url_log_cmd5",
        "debug",
        "cmd",
        "requests",
        "get",
        "cmd",
        "verify",
        "log_query",
        "text",
        "debug",
        "response",
        "ElementTree",
        "fromstring",
        "response",
        "dom",
        "find",
        "text",
        "jobid",
        "jobid",
        "client_address",
        "fw_url_xff_cmd1",
        "client_address",
        "fw_url_xff_cmd2",
        "jobid",
        "debug",
        "cmd",
        "requests",
        "get",
        "cmd",
        "verify",
        "xff_query",
        "text",
        "debug",
        "response",
        "ElementTree",
        "fromstring",
        "response",
        "dom",
        "attrib",
        "dom",
        "find",
        "text",
        "xff",
        "get_project_cmd",
        "requests",
        "get",
        "cmd",
        "headers",
        "get_project",
        "text",
        "debug",
        "project_id",
        "project_id",
        "service",
        "project_id",
        "policy_name",
        "debug",
        "service",
        "project_id",
        "policy_name",
        "policy_name",
        "service",
        "securityPolicies",
        "project",
        "project_id",
        "policy_filter",
        "request",
        "execute",
        "item",
        "response",
        "debug",
        "item",
        "rule_priorities",
        "append",
        "item",
        "rule_priorities",
        "sort",
        "key",
        "rule_priorities",
        "list_priorities",
        "priority_list",
        "debug",
        "list_priorities",
        "priority_list",
        "priority_list",
        "list_priorities",
        "list_diff",
        "sort",
        "key",
        "list_diff",
        "next_priority",
        "service",
        "project_id",
        "policy_name",
        "next_available_priority",
        "actual_xff",
        "debug",
        "service",
        "project_id",
        "policy_name",
        "next_available_priority",
        "actual_xff",
        "actual_xff",
        "actual_xff",
        "rule_description",
        "next_available_priority",
        "rule_source",
        "debug",
        "security_policy_body",
        "service",
        "securityPolicies",
        "addRule",
        "project",
        "project_id",
        "securityPolicy",
        "policy_name",
        "body",
        "security_policy_body",
        "request",
        "execute",
        "response",
        "BaseHTTPRequestHandler",
        "debug",
        "path",
        "headers",
        "rfile",
        "read",
        "content_length",
        "client_address",
        "json",
        "loads",
        "post_data",
        "decode",
        "json_data",
        "json_data",
        "json_data",
        "json_data",
        "debug",
        "post_data",
        "client_address",
        "json_data",
        "sessionid",
        "natsport",
        "rxtime",
        "send_response",
        "connection",
        "close",
        "count",
        "url_log_jobid_extracter",
        "sessionid",
        "natsport",
        "rxtime",
        "client_address",
        "debug",
        "jobid",
        "time",
        "sleep",
        "xff_extractor",
        "jobid",
        "client_address",
        "xff",
        "count",
        "debug",
        "xff",
        "xff",
        "split",
        "debug",
        "actual_xff",
        "get_project_id",
        "debug",
        "project_id",
        "get_rule_priorities",
        "service",
        "project_id",
        "policy_name",
        "debug",
        "list_priorities",
        "get_next_priority",
        "list_priorities",
        "priority_list",
        "debug",
        "next_available_priority",
        "create_security_rule",
        "service",
        "project_id",
        "policy_name",
        "next_available_priority",
        "actual_xff",
        "debug",
        "create_rule",
        "HTTPServer",
        "hostName",
        "hostPort",
        "MyServer",
        "time",
        "asctime",
        "hostName",
        "hostPort",
        "GoogleCredentials",
        "get_application_default",
        "discovery",
        "build",
        "credentials",
        "credentials",
        "myServer",
        "serve_forever",
        "KeyboardInterrupt",
        "myServer",
        "server_close",
        "debug",
        "time",
        "asctime",
        "hostName",
        "hostPort"
    ],
    "literals": [
        "\"LUFRPT1CU0dMRHIrOWFET0JUNzNaTmRoYmkwdjBkWWM9alUvUjBFTTNEQm93Vmx0OVhFRlNkOXdJNmVwYWk5Zmw4bEs3NjgwMkh5QT0=\"",
        "\"\"",
        "\"https://\"",
        "\"/api/?type=log&log-type=url&key=\"",
        "\"&query=((sessionid%20eq%20'\"",
        "\"')%20and%20(natsport%20eq%20'\"",
        "\"')%20and%20(receive_time%20geq%20'\"",
        "\"'))\"",
        "\"https://\"",
        "\"/api/?type=log&action=get&key=\"",
        "\"&job-id=\"",
        "\"http://metadata.google.internal/computeMetadata/v1/project/project-id\"",
        "\" \"",
        "\"%20\"",
        "\" \"",
        "\"The command to extract jobid is\"",
        "\"response = \"",
        "'job'",
        "\"The command to extract XFF is\"",
        "\"response = \"",
        "'count'",
        "\"0\"",
        "\"RETRY\"",
        "'./result/log/logs/entry/xff'",
        "'Metadata-Flavor'",
        "'Google'",
        "\"project_id = \"",
        "\"service = \"",
        "\"project_id = \"",
        "\"policy_name = \"",
        "\"name eq \"",
        "'items'",
        "'rules'",
        "\"priority = \"",
        "'priority'",
        "'priority'",
        "\"list_priorities = \"",
        "\"priority_list = \"",
        "\"service = \"",
        "\"project_id = \"",
        "\"policy_name = \"",
        "\"next_available_priority = \"",
        "\"actual_xff = \"",
        "\"block \"",
        "\"/32\"",
        "\"description\"",
        "\"priority\"",
        "\"match\"",
        "\"versionedExpr\"",
        "\"SRC_IPS_V1\"",
        "\"config\"",
        "\"srcIpRanges\"",
        "\"action\"",
        "\"deny(403)\"",
        "\"preview\"",
        "\"security_policy_body = \"",
        "\"incoming http: \"",
        "'Content-Length'",
        "'utf-8'",
        "'SessionID'",
        "'NATSRCPort'",
        "'ReceiveTime'",
        "'SecurityPolicy'",
        "\"post_data = \"",
        "\"client_address = \"",
        "\"json_data = \"",
        "\"sessionid = \"",
        "\"natsport = \"",
        "\"rxtime = \"",
        "'Job id is:'",
        "\"Sleeping for 2 seconds...\"",
        "\"RETRY\"",
        "\"Original XFF extracted is\"",
        "\",\"",
        "\"Actual XFF extracted is\"",
        "\"project id is \"",
        "\"priorities in use = \"",
        "\"next_available_priority = \"",
        "\"security rule created. response = \"",
        "\"Server Starts - %s:%s\"",
        "'compute'",
        "'beta'",
        "\"Server Stops - %s:%s\""
    ],
    "variables": [
        "apiKey",
        "debug",
        "hostName",
        "hostPort",
        "priority_list",
        "rule_priorities",
        "fw_url_log_cmd1",
        "fw_url_log_cmd2",
        "fw_url_log_cmd3",
        "fw_url_log_cmd4",
        "fw_url_log_cmd5",
        "fw_url_xff_cmd1",
        "fw_url_xff_cmd2",
        "get_project_cmd",
        "cmd",
        "log_query",
        "response",
        "dom",
        "jobid",
        "cmd",
        "xff_query",
        "response",
        "dom",
        "xff",
        "cmd",
        "get_project",
        "project_id",
        "policy_filter",
        "request",
        "response",
        "list_diff",
        "next_priority",
        "rule_description",
        "rule_source",
        "security_policy_body",
        "request",
        "response",
        "content_length",
        "post_data",
        "client_address",
        "json_data",
        "sessionid",
        "natsport",
        "rxtime",
        "policy_name",
        "count",
        "jobid",
        "xff",
        "count",
        "actual_xff",
        "project_id",
        "list_priorities",
        "next_available_priority",
        "create_rule",
        "myServer",
        "credentials",
        "service"
    ],
    "comments": [
        "!/usr/bin/python",
        "Define various variables",
        "API Key to login to the FW",
        "Flag for verbose logging",
        "Host name of the local server. Must be defined but can be empty.",
        "Port on local server on which to listen",
        "List 1-999 that is used to determine the first available priority for rule creation",
        "List of rule priorities",
        "Create the query that is sent to the FW to retrieve the XFF from the URLF log",
        "Create the query that is used to determine when the log query has completed",
        "Query to retrieve the project ID associated with the FW",
        "Create the command to query the FW",
        "Send query to the FW",
        "Extract the jobid from the FW and return it",
        "Create the command to query the FW by jobid",
        "The original query does not return immediately so we query multiple times (up to 6 @ 2 scond intervals) for the results.",
        "Send query to the FW",
        "If we do not get a positive response, then we trigger a retry",
        "Otherwise, return the IP of the bad actor",
        "Create the command to query the GCP environment for the project ID",
        "Send query to GCP",
        "Return the project ID to the requester",
        "Create a filter so that we only grab the rules associated with the target policy",
        "Send query to GCP",
        "Iterate through the response and build a list of extant rule priorities",
        "Return the list of list of extant rule priorities",
        "Compare the list of extant rule priorities to the reference list",
        "Sort the list numerically",
        "Grab the first available number",
        "Return the first available number (priority) to the requester",
        "Create the description for the security rule",
        "Create the source match for the host we wish to block",
        "Create the json-formatted request body",
        "Send the properly-formatted request to GCP",
        "Return the response",
        "Get the size of data posted",
        "Get the actual data from the post",
        "Get the address of the firewall that sent the request",
        "Parse the request for the relevant information: Session-ID, NAT Source Port, Log Receipt Time, and FW Security Policy Name",
        "Try 6 times to gather the original client IP associated with the threat.",
        "The FW query is no synchronous so we make a callback to get the results.",
        "Job ID associated with the query for the URLF with the XFF information",
        "Query the FW and get back the XFF information or \"RETRY\" if we need to check back",
        "Start listening for HTTP POSTs from the FW",
        "Get the credentials from the GCP environment so that we can query/modify as required",
        "Run as a server in a continuous loop until keyboard interrupt received",
        "If we recieve an interrupt, exit gracefully"
    ],
    "docstrings": [
        "\"\"\"\nQuery the FW for the URLF log associated with the original threat\n\"\"\"",
        "\"\"\"\nExtract the XFF\n\"\"\"",
        "\"\"\"\nGet the project ID\n\"\"\"",
        "\"\"\"\nGet a list of all currently-used rule priorities\n\"\"\"",
        "\"\"\"\nGet next available rule priority\n\"\"\"",
        "\"\"\"\nBlock the bad actor\n\"\"\"",
        "\"\"\"\n  Process the POSTed data from the FW\n  \"\"\"",
        "\"\"\"\n    Get project ID so we know which project's security policy we are updating\n    \"\"\"",
        "\"\"\"\n    Get a list of all currently-used rule priorities\n    \"\"\"",
        "\"\"\"\n    Get next available rule priority\n    \"\"\"",
        "\"\"\"\n    Block the bad actor\n    \"\"\""
    ],
    "functions": [
        "url_log_jobid_extracter",
        "xff_extractor",
        "get_project_id",
        "get_rule_priorities",
        "get_next_priority",
        "create_security_rule",
        "do_POST"
    ],
    "classes": [
        "MyServer"
    ]
}