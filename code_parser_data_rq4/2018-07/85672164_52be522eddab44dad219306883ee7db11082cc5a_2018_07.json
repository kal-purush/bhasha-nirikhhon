{
    "identifiers": [
        "matplotlib",
        "pyplot",
        "plt",
        "numpy",
        "np",
        "os",
        "W",
        "second",
        "saveable",
        "shape",
        "name",
        "fig_idx",
        "saveable",
        "plt",
        "ion",
        "plt",
        "figure",
        "fig_idx",
        "W",
        "shape",
        "W",
        "shape",
        "np",
        "sqrt",
        "n_units",
        "np",
        "ceil",
        "n_units",
        "num_r",
        "row",
        "num_r",
        "col",
        "num_c",
        "count",
        "n_units",
        "fig",
        "add_subplot",
        "num_r",
        "num_c",
        "count",
        "W",
        "count",
        "np",
        "sqrt",
        "W",
        "count",
        "sum",
        "plt",
        "imshow",
        "np",
        "reshape",
        "feature",
        "shape",
        "shape",
        "cmap",
        "interpolation",
        "plt",
        "gca",
        "xaxis",
        "set_major_locator",
        "plt",
        "NullLocator",
        "plt",
        "gca",
        "yaxis",
        "set_major_locator",
        "plt",
        "NullLocator",
        "count",
        "saveable",
        "plt",
        "savefig",
        "name",
        "format",
        "plt",
        "draw",
        "plt",
        "pause",
        "second",
        "I",
        "second",
        "saveable",
        "name",
        "cmap",
        "fig_idx",
        "saveable",
        "plt",
        "ion",
        "plt",
        "figure",
        "fig_idx",
        "len",
        "I",
        "shape",
        "I",
        "shape",
        "I",
        "plt",
        "imshow",
        "I",
        "cmap",
        "plt",
        "title",
        "name",
        "saveable",
        "plt",
        "savefig",
        "name",
        "format",
        "plt",
        "draw",
        "plt",
        "pause",
        "second",
        "CNN",
        "second",
        "saveable",
        "name",
        "fig_idx",
        "CNN",
        "shape",
        "CNN",
        "shape",
        "CNN",
        "shape",
        "CNN",
        "shape",
        "np",
        "sqrt",
        "n_mask",
        "np",
        "ceil",
        "n_mask",
        "row",
        "plt",
        "ion",
        "plt",
        "figure",
        "fig_idx",
        "ir",
        "row",
        "ic",
        "col",
        "count",
        "n_mask",
        "fig",
        "add_subplot",
        "col",
        "row",
        "count",
        "n_color",
        "plt",
        "imshow",
        "np",
        "reshape",
        "CNN",
        "count",
        "n_row",
        "n_col",
        "cmap",
        "interpolation",
        "n_color",
        "plt",
        "imshow",
        "np",
        "reshape",
        "CNN",
        "count",
        "n_row",
        "n_col",
        "n_color",
        "cmap",
        "interpolation",
        "plt",
        "gca",
        "xaxis",
        "set_major_locator",
        "plt",
        "NullLocator",
        "plt",
        "gca",
        "yaxis",
        "set_major_locator",
        "plt",
        "NullLocator",
        "count",
        "saveable",
        "plt",
        "savefig",
        "name",
        "format",
        "plt",
        "draw",
        "plt",
        "pause",
        "second",
        "images",
        "second",
        "saveable",
        "name",
        "dtype",
        "fig_idx",
        "dtype",
        "np",
        "asarray",
        "images",
        "dtype",
        "dtype",
        "images",
        "shape",
        "images",
        "shape",
        "images",
        "shape",
        "images",
        "shape",
        "np",
        "sqrt",
        "n_mask",
        "np",
        "ceil",
        "n_mask",
        "row",
        "plt",
        "ion",
        "plt",
        "figure",
        "fig_idx",
        "ir",
        "row",
        "ic",
        "col",
        "count",
        "n_mask",
        "fig",
        "add_subplot",
        "col",
        "row",
        "count",
        "n_color",
        "plt",
        "imshow",
        "np",
        "reshape",
        "images",
        "count",
        "n_row",
        "n_col",
        "cmap",
        "interpolation",
        "n_color",
        "plt",
        "imshow",
        "images",
        "count",
        "cmap",
        "interpolation",
        "plt",
        "gca",
        "xaxis",
        "set_major_locator",
        "plt",
        "NullLocator",
        "plt",
        "gca",
        "yaxis",
        "set_major_locator",
        "plt",
        "NullLocator",
        "count",
        "saveable",
        "plt",
        "savefig",
        "name",
        "format",
        "plt",
        "draw",
        "plt",
        "pause",
        "second",
        "embeddings",
        "reverse_dictionary",
        "plot_only",
        "second",
        "saveable",
        "name",
        "fig_idx",
        "low_dim_embs",
        "labels",
        "figsize",
        "second",
        "saveable",
        "name",
        "fig_idx",
        "low_dim_embs",
        "shape",
        "len",
        "labels",
        "saveable",
        "plt",
        "ion",
        "plt",
        "figure",
        "fig_idx",
        "plt",
        "figure",
        "figsize",
        "figsize",
        "i",
        "label",
        "labels",
        "low_dim_embs",
        "i",
        "plt",
        "scatter",
        "x",
        "y",
        "plt",
        "annotate",
        "label",
        "xy",
        "x",
        "y",
        "xytext",
        "textcoords",
        "ha",
        "va",
        "saveable",
        "plt",
        "savefig",
        "name",
        "format",
        "plt",
        "draw",
        "plt",
        "pause",
        "second",
        "sklearn",
        "manifold",
        "TSNE",
        "matplotlib",
        "pyplot",
        "plt",
        "six",
        "moves",
        "xrange",
        "TSNE",
        "perplexity",
        "n_components",
        "init",
        "n_iter",
        "tsne",
        "fit_transform",
        "embeddings",
        "plot_only",
        "reverse_dictionary",
        "i",
        "i",
        "xrange",
        "plot_only",
        "plot_with_labels",
        "low_dim_embs",
        "labels",
        "second",
        "second",
        "saveable",
        "saveable",
        "name",
        "name",
        "fig_idx",
        "fig_idx",
        "ImportError"
    ],
    "literals": [
        "'mnist'",
        "'gray'",
        "\"nearest\"",
        "'.pdf'",
        "'pdf'",
        "'frame'",
        "'.pdf'",
        "'pdf'",
        "'cnn'",
        "'gray'",
        "\"nearest\"",
        "'gray'",
        "\"nearest\"",
        "\"Unknown n_color\"",
        "'.pdf'",
        "'pdf'",
        "'images'",
        "'gray'",
        "\"nearest\"",
        "'gray'",
        "\"nearest\"",
        "\"Unknown n_color\"",
        "'.pdf'",
        "'pdf'",
        "'tsne'",
        "'tsne'",
        "\"More labels than embeddings\"",
        "'offset points'",
        "'right'",
        "'bottom'",
        "'.pdf'",
        "'pdf'",
        "'pca'",
        "\"Please install sklearn and matplotlib to visualize embeddings.\""
    ],
    "variables": [
        "fig",
        "size",
        "n_units",
        "num_r",
        "num_c",
        "count",
        "a",
        "feature",
        "count",
        "fig",
        "I",
        "n_mask",
        "n_row",
        "n_col",
        "n_color",
        "row",
        "col",
        "fig",
        "count",
        "a",
        "count",
        "images",
        "n_mask",
        "n_row",
        "n_col",
        "n_color",
        "row",
        "col",
        "fig",
        "count",
        "a",
        "count",
        "x",
        "y",
        "tsne",
        "low_dim_embs",
        "labels"
    ],
    "comments": [
        "! /usr/bin/python",
        "-*- coding: utf8 -*-",
        "show all feature images",
        "每行显示的个数   若25个hidden unit -> 每行显示5个",
        "------------------------------------------------------------",
        "plt.imshow(np.reshape(W[:,count-1],(28,28)), cmap='gray')",
        "------------------------------------------------------------",
        "feature[feature<0.0001] = 0   # value threshold",
        "if count == 1 or count == 2:",
        "print(np.mean(feature))",
        "if np.std(feature) < 0.03:      # condition threshold",
        "feature = np.zeros_like(feature)",
        "if np.mean(feature) < -0.015:      # condition threshold",
        "feature = np.zeros_like(feature)",
        ", vmin=np.min(feature), vmax=np.max(feature))",
        "plt.title(name)",
        "------------------------------------------------------------",
        "plt.imshow(np.reshape(W[:,count-1] ,(np.sqrt(size),np.sqrt(size))), cmap='gray', interpolation=\"nearest\")",
        "distable tick",
        "show all feature images",
        "(10,10,1) --> (10,10)",
        "plt.gca().xaxis.set_major_locator(plt.NullLocator())    # distable tick",
        "plt.gca().yaxis.set_major_locator(plt.NullLocator())",
        "print(CNN.shape)    # (5, 5, 3, 64)",
        "exit()",
        "active mode",
        "print(CNN[:,:,:,count-1].shape, n_row, n_col)   # (5, 1, 32) 5 5",
        "exit()",
        "plt.imshow(",
        "np.reshape(CNN[count-1,:,:,:], (n_row, n_col)),",
        "cmap='gray', interpolation=\"nearest\")     # theano",
        "distable tick",
        "print(images.shape)    # (50000, 32, 32, 3)",
        "exit()",
        "active mode",
        "print(images[:,:,:,count-1].shape, n_row, n_col)   # (5, 1, 32) 5 5",
        "plt.imshow(",
        "np.reshape(images[count-1,:,:,:], (n_row, n_col)),",
        "cmap='gray', interpolation=\"nearest\")     # theano",
        "plt.title(name)",
        "plt.title(name)",
        "distable tick",
        "in inches",
        "plot_only = 500",
        ""
    ],
    "docstrings": [
        "\"\"\"Visualize every columns of the weight matrix to a group of Greyscale img.\n\n    Parameters\n    ----------\n    W : numpy.array\n        The weight matrix\n    second : int\n        The display second(s) for the image(s), if saveable is False.\n    saveable : boolean\n        Save or plot the figure.\n    shape : a list with 2 int\n        The shape of feature image, MNIST is [28, 80].\n    name : a string\n        A name to save the image, if saveable is True.\n    fig_idx : int\n        matplotlib figure index.\n\n    Examples\n    --------\n    >>> tl.visualize.W(network.all_params[0].eval(), second=10, saveable=True, name='weight_of_1st_layer', fig_idx=2012)\n    \"\"\"",
        "\"\"\"Display a frame(image). Make sure OpenAI Gym render() is disable before using it.\n\n    Parameters\n    ----------\n    I : numpy.array\n        The image\n    second : int\n        The display second(s) for the image(s), if saveable is False.\n    saveable : boolean\n        Save or plot the figure.\n    name : a string\n        A name to save the image, if saveable is True.\n    cmap : None or string\n        'gray' for greyscale, None for default, etc.\n    fig_idx : int\n        matplotlib figure index.\n\n    Examples\n    --------\n    >>> env = gym.make(\"Pong-v0\")\n    >>> observation = env.reset()\n    >>> tl.visualize.frame(observation)\n    \"\"\"",
        "\"\"\"Display a group of RGB or Greyscale CNN masks.\n\n    Parameters\n    ----------\n    CNN : numpy.array\n        The image. e.g: 64 5x5 RGB images can be (5, 5, 3, 64).\n    second : int\n        The display second(s) for the image(s), if saveable is False.\n    saveable : boolean\n        Save or plot the figure.\n    name : a string\n        A name to save the image, if saveable is True.\n    fig_idx : int\n        matplotlib figure index.\n\n    Examples\n    --------\n    >>> tl.visualize.CNN2d(network.all_params[0].eval(), second=10, saveable=True, name='cnn1_mnist', fig_idx=2012)\n    \"\"\"",
        "\"\"\"Display a group of RGB or Greyscale images.\n\n    Parameters\n    ----------\n    images : numpy.array\n        The images.\n    second : int\n        The display second(s) for the image(s), if saveable is False.\n    saveable : boolean\n        Save or plot the figure.\n    name : a string\n        A name to save the image, if saveable is True.\n    dtype : None or numpy data type\n        The data type for displaying the images.\n    fig_idx : int\n        matplotlib figure index.\n\n    Examples\n    --------\n    >>> X_train, y_train, X_test, y_test = tl.files.load_cifar10_dataset(shape=(-1, 32, 32, 3), plotable=False)\n    >>> tl.visualize.images2d(X_train[0:100,:,:,:], second=10, saveable=False, name='cifar10', dtype=np.uint8, fig_idx=20212)\n    \"\"\"",
        "\"\"\"Visualize the embeddings by using t-SNE.\n\n    Parameters\n    ----------\n    embeddings : a matrix\n        The images.\n    reverse_dictionary : a dictionary\n        id_to_word, mapping id to unique word.\n    plot_only : int\n        The number of examples to plot, choice the most common words.\n    second : int\n        The display second(s) for the image(s), if saveable is False.\n    saveable : boolean\n        Save or plot the figure.\n    name : a string\n        A name to save the image, if saveable is True.\n    fig_idx : int\n        matplotlib figure index.\n\n    Examples\n    --------\n    >>> see 'tutorial_word2vec_basic.py'\n    >>> final_embeddings = normalized_embeddings.eval()\n    >>> tl.visualize.tsne_embedding(final_embeddings, labels, reverse_dictionary,\n    ...                   plot_only=500, second=5, saveable=False, name='tsne')\n    \"\"\""
    ],
    "functions": [
        "W",
        "frame",
        "CNN2d",
        "images2d",
        "tsne_embedding",
        "plot_with_labels"
    ],
    "classes": []
}