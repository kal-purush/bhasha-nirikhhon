{
    "identifiers": [
        "be",
        "nbb",
        "demetra",
        "hello",
        "ec",
        "satoolkit",
        "DefaultSeriesDecomposition",
        "ec",
        "satoolkit",
        "algorithm",
        "implementation",
        "TramoSeatsProcessingFactory",
        "ec",
        "satoolkit",
        "tramoseats",
        "TramoSeatsSpecification",
        "ec",
        "satoolkit",
        "x13",
        "X13Specification",
        "ec",
        "tstoolkit",
        "algorithm",
        "IProcResults",
        "ec",
        "tstoolkit",
        "algorithm",
        "implementation",
        "RegArimaProcessingFactory",
        "ec",
        "tstoolkit",
        "arima",
        "ArimaModel",
        "ec",
        "tstoolkit",
        "modelling",
        "ComponentInformation",
        "ec",
        "tstoolkit",
        "modelling",
        "ComponentType",
        "ec",
        "tstoolkit",
        "modelling",
        "arima",
        "IPreprocessor",
        "ec",
        "tstoolkit",
        "modelling",
        "arima",
        "PreprocessingModel",
        "ec",
        "tstoolkit",
        "modelling",
        "arima",
        "tramo",
        "SeasonalityTests",
        "ec",
        "tstoolkit",
        "modelling",
        "arima",
        "x13",
        "RegArimaSpecification",
        "ec",
        "tstoolkit",
        "sarima",
        "SarimaModel",
        "ec",
        "tstoolkit",
        "timeseries",
        "TsPeriodSelector",
        "ec",
        "tstoolkit",
        "timeseries",
        "calendars",
        "TradingDaysType",
        "ec",
        "tstoolkit",
        "timeseries",
        "regression",
        "OutlierType",
        "ec",
        "tstoolkit",
        "timeseries",
        "simplets",
        "TsData",
        "args",
        "input",
        "Data",
        "P",
        "spec",
        "RegArimaSpecification",
        "RG5",
        "clone",
        "spec",
        "getOutliers",
        "remove",
        "OutlierType",
        "TC",
        "processor",
        "spec",
        "build",
        "model",
        "processor",
        "process",
        "input",
        "forecast",
        "model",
        "forecast",
        "arima",
        "model",
        "estimation",
        "getArima",
        "forecast2",
        "model",
        "getData",
        "arima2",
        "model",
        "getData",
        "arima",
        "forecast"
    ],
    "literals": [
        "\"fcasts(3)\"",
        "\"arima\""
    ],
    "variables": [],
    "comments": [
        "Test the new feature",
        "Make a copy if you want to change something !",
        "td1coeff",
        "spec.getRegression().getTradingDays().setTradingDaysType(TradingDaysType.WorkingDays);",
        "No transitory change",
        "forecasts are retrieved dynamically",
        "If you use pre-specified variables/calendars, you should use:",
        "IPreprocessor processor = spec.build(context);",
        "results can be retrieved directly or using the usual dictionary (generic approach)"
    ],
    "docstrings": [
        "* Copyright 2015 National Bank of Belgium\n *  \n * Licensed under the EUPL, Version 1.1 or â€“ as soon they will be approved \n * by the European Commission - subsequent versions of the EUPL (the \"Licence\");\n * You may not use this work except in compliance with the Licence.\n * You may obtain a copy of the Licence at:\n *  \n * http://ec.europa.eu/idabc/eupl\n *  \n * Unless required by applicable law or agreed to in writing, software \n * distributed under the Licence is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the Licence for the specific language governing permissions and \n * limitations under the Licence.",
        "",
        "* This example shows how to use X13 for forecasting.\n *\n * @author Jean Palate"
    ],
    "functions": [
        "main"
    ],
    "classes": [
        "HelloDemetra32"
    ]
}