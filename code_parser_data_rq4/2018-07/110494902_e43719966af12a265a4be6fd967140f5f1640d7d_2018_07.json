{
    "identifiers": [
        "org",
        "snobot",
        "lib",
        "autonomous",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "org",
        "apache",
        "logging",
        "log4j",
        "Level",
        "org",
        "apache",
        "logging",
        "log4j",
        "LogManager",
        "org",
        "apache",
        "logging",
        "log4j",
        "Logger",
        "org",
        "snobot",
        "lib",
        "ASnobot",
        "edu",
        "wpi",
        "first",
        "wpilibj",
        "command",
        "Command",
        "sLOGGER",
        "LogManager",
        "getLogger",
        "mCommandCreatorMap",
        "mCommandCreatorMap",
        "aCommandName",
        "aCreator",
        "mCommandCreatorMap",
        "put",
        "aCommandName",
        "aCreator",
        "aCommandName",
        "aCommandArgs",
        "aSnobot",
        "newCommand",
        "commandCreator",
        "mCommandCreatorMap",
        "get",
        "aCommandName",
        "commandCreator",
        "newCommand",
        "sLOGGER",
        "log",
        "Level",
        "ERROR",
        "aCommandName",
        "newCommand",
        "commandCreator",
        "createCommand",
        "aCommandArgs",
        "aSnobot",
        "newCommand"
    ],
    "literals": [
        "\"No creater registered for command '\"",
        "\"'\""
    ],
    "variables": [
        "mCommandCreatorMap",
        "newCommand"
    ],
    "comments": [],
    "docstrings": [
        "* This class holds a map of all the autonomous command classes and allows\n * generic create of a command with just the command name.\n * \n * @author Nora/Josh\n *",
        "* This is the map that holds all our autonomous command create references\n     * Note: For each autonomous command in org.snobot.commands put a entry in\n     * the map.",
        "* Constructor.",
        "* It returns a command object after looking it up in the map by the command\n     * name and then calling create command on the reference in the map.\n     * \n     * @param aCommandName\n     *            The name of the command\n     * @param aCommandArgs\n     *            The list of commands that are in the command text file.\n     * @returns the command for that name or null if i doesn't exist."
    ],
    "functions": [
        "AAutonomousCommandFactory",
        "registerCreator",
        "Command",
        "createCommand"
    ],
    "classes": [
        "AAutonomousCommandFactory"
    ]
}