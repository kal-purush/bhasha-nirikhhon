{
    "identifiers": [
        "Collections",
        "Collections",
        "Generic",
        "Globalization",
        "Linq",
        "Text",
        "SimpleJSON",
        "JSONNodeType",
        "NullValue",
        "Custom",
        "JSONTextMode",
        "Compact",
        "Indent",
        "Enumerator",
        "Type",
        "JSONNode",
        "Enumerator",
        "JSONNode",
        "Enumerator",
        "Type",
        "JSONNode",
        "Enumerator",
        "aArrayEnum",
        "Type",
        "m_Object",
        "JSONNode",
        "Enumerator",
        "m_Array",
        "aArrayEnum",
        "JSONNode",
        "Enumerator",
        "aDictEnum",
        "Type",
        "m_Object",
        "aDictEnum",
        "m_Array",
        "JSONNode",
        "Enumerator",
        "KeyValuePair",
        "JSONNode",
        "Type",
        "KeyValuePair",
        "JSONNode",
        "Empty",
        "m_Array",
        "Current",
        "Type",
        "m_Object",
        "Current",
        "KeyValuePair",
        "JSONNode",
        "Empty",
        "Type",
        "m_Array",
        "MoveNext",
        "Type",
        "m_Object",
        "MoveNext",
        "ValueEnumerator",
        "JSONNode",
        "Enumerator",
        "aArrayEnum",
        "Enumerator",
        "aArrayEnum",
        "JSONNode",
        "Enumerator",
        "aDictEnum",
        "Enumerator",
        "aDictEnum",
        "Enumerator",
        "aEnumerator",
        "m_Enumerator",
        "aEnumerator",
        "m_Enumerator",
        "Current",
        "Value",
        "m_Enumerator",
        "MoveNext",
        "KeyEnumerator",
        "JSONNode",
        "Enumerator",
        "aArrayEnum",
        "Enumerator",
        "aArrayEnum",
        "JSONNode",
        "Enumerator",
        "aDictEnum",
        "Enumerator",
        "aDictEnum",
        "Enumerator",
        "aEnumerator",
        "m_Enumerator",
        "aEnumerator",
        "m_Enumerator",
        "Current",
        "Key",
        "m_Enumerator",
        "MoveNext",
        "IEnumerator",
        "KeyValuePair",
        "JSONNode",
        "KeyValuePair",
        "JSONNode",
        "JSONNode",
        "aNode",
        "m_Node",
        "aNode",
        "m_Node",
        "m_Enumerator",
        "m_Node",
        "GetEnumerator",
        "KeyValuePair",
        "JSONNode",
        "m_Enumerator",
        "Current",
        "IEnumerator",
        "m_Enumerator",
        "Current",
        "m_Enumerator",
        "MoveNext",
        "m_Node",
        "m_Enumerator",
        "Enumerator",
        "IEnumerator",
        "KeyValuePair",
        "JSONNode",
        "LinqEnumerator",
        "m_Node",
        "m_Node",
        "m_Enumerator",
        "m_Node",
        "GetEnumerator",
        "LinqEnumerator",
        "m_Node",
        "JSONNode",
        "aIndex",
        "JSONNode",
        "aKey",
        "aKey",
        "JSONNode",
        "aItem",
        "JSONNode",
        "aItem",
        "Add",
        "aItem",
        "aKey",
        "aIndex",
        "JSONNode",
        "aNode",
        "aNode",
        "JSONNode",
        "JSONNode",
        "C",
        "Children",
        "D",
        "C",
        "DeepChildren",
        "D",
        "StringBuilder",
        "WriteToStringBuilder",
        "sb",
        "JSONTextMode",
        "Compact",
        "sb",
        "ToString",
        "aIndent",
        "StringBuilder",
        "WriteToStringBuilder",
        "sb",
        "aIndent",
        "JSONTextMode",
        "Indent",
        "sb",
        "ToString",
        "StringBuilder",
        "aSB",
        "aIndent",
        "aIndentInc",
        "JSONTextMode",
        "aMode",
        "KeyValuePair",
        "JSONNode",
        "LinqEnumerator",
        "KeyEnumerator",
        "GetEnumerator",
        "ValueEnumerator",
        "GetEnumerator",
        "TryParse",
        "Value",
        "NumberStyles",
        "CultureInfo",
        "InvariantCulture",
        "v",
        "v",
        "Value",
        "value",
        "ToString",
        "CultureInfo",
        "InvariantCulture",
        "AsDouble",
        "AsDouble",
        "value",
        "AsDouble",
        "AsDouble",
        "value",
        "TryParse",
        "Value",
        "v",
        "v",
        "IsNullOrEmpty",
        "Value",
        "Value",
        "value",
        "TryParse",
        "Value",
        "val",
        "val",
        "Value",
        "value",
        "ToString",
        "JSONArray",
        "JSONObject",
        "JSONNode",
        "s",
        "JSONString",
        "s",
        "JSONNode",
        "d",
        "d",
        "d",
        "Value",
        "JSONNode",
        "n",
        "JSONNumber",
        "n",
        "JSONNode",
        "d",
        "d",
        "d",
        "AsDouble",
        "JSONNode",
        "n",
        "JSONNumber",
        "n",
        "JSONNode",
        "d",
        "d",
        "d",
        "AsFloat",
        "JSONNode",
        "n",
        "JSONNumber",
        "n",
        "JSONNode",
        "d",
        "d",
        "d",
        "AsInt",
        "JSONNode",
        "n",
        "longAsString",
        "JSONString",
        "n",
        "ToString",
        "JSONNumber",
        "n",
        "JSONNode",
        "d",
        "d",
        "d",
        "AsLong",
        "JSONNode",
        "b",
        "JSONBool",
        "b",
        "JSONNode",
        "d",
        "d",
        "d",
        "AsBool",
        "JSONNode",
        "KeyValuePair",
        "JSONNode",
        "aKeyValue",
        "aKeyValue",
        "Value",
        "JSONNode",
        "a",
        "b",
        "ReferenceEquals",
        "a",
        "b",
        "a",
        "JSONNull",
        "ReferenceEquals",
        "a",
        "a",
        "JSONLazyCreator",
        "b",
        "JSONNull",
        "ReferenceEquals",
        "b",
        "b",
        "JSONLazyCreator",
        "aIsNull",
        "bIsNull",
        "aIsNull",
        "a",
        "Equals",
        "b",
        "JSONNode",
        "a",
        "b",
        "a",
        "b",
        "obj",
        "ReferenceEquals",
        "obj",
        "GetHashCode",
        "ThreadStatic",
        "m_EscapeBuilder",
        "m_EscapeBuilder",
        "StringBuilder",
        "m_EscapeBuilder",
        "aText",
        "sb",
        "Length",
        "sb",
        "Capacity",
        "aText",
        "Length",
        "aText",
        "Length",
        "sb",
        "Capacity",
        "aText",
        "Length",
        "aText",
        "Length",
        "c",
        "aText",
        "c",
        "sb",
        "Append",
        "sb",
        "Append",
        "sb",
        "Append",
        "sb",
        "Append",
        "sb",
        "Append",
        "sb",
        "Append",
        "sb",
        "Append",
        "c",
        "forceASCII",
        "c",
        "sb",
        "Append",
        "Append",
        "val",
        "ToString",
        "sb",
        "Append",
        "c",
        "sb",
        "ToString",
        "sb",
        "Length",
        "result",
        "token",
        "quoted",
        "quoted",
        "token",
        "token",
        "ToLower",
        "tmp",
        "tmp",
        "tmp",
        "tmp",
        "JSONNull",
        "CreateOrGet",
        "TryParse",
        "token",
        "NumberStyles",
        "CultureInfo",
        "InvariantCulture",
        "val",
        "val",
        "token",
        "aJSON",
        "JSONNode",
        "JSONNode",
        "StringBuilder",
        "i",
        "aJSON",
        "Length",
        "aJSON",
        "i",
        "QuoteMode",
        "Token",
        "Append",
        "aJSON",
        "i",
        "stack",
        "Push",
        "JSONObject",
        "ctx",
        "ctx",
        "Add",
        "TokenName",
        "stack",
        "Peek",
        "TokenName",
        "Token",
        "Length",
        "ctx",
        "stack",
        "Peek",
        "QuoteMode",
        "Token",
        "Append",
        "aJSON",
        "i",
        "stack",
        "Push",
        "JSONArray",
        "ctx",
        "ctx",
        "Add",
        "TokenName",
        "stack",
        "Peek",
        "TokenName",
        "Token",
        "Length",
        "ctx",
        "stack",
        "Peek",
        "QuoteMode",
        "Token",
        "Append",
        "aJSON",
        "i",
        "stack",
        "Count",
        "stack",
        "Pop",
        "Token",
        "Length",
        "TokenIsQuoted",
        "ctx",
        "Add",
        "TokenName",
        "ParseElement",
        "Token",
        "ToString",
        "TokenIsQuoted",
        "TokenIsQuoted",
        "TokenName",
        "Token",
        "Length",
        "stack",
        "Count",
        "ctx",
        "stack",
        "Peek",
        "QuoteMode",
        "Token",
        "Append",
        "aJSON",
        "i",
        "TokenName",
        "Token",
        "ToString",
        "Token",
        "Length",
        "TokenIsQuoted",
        "QuoteMode",
        "TokenIsQuoted",
        "QuoteMode",
        "QuoteMode",
        "Token",
        "Append",
        "aJSON",
        "i",
        "Token",
        "Length",
        "TokenIsQuoted",
        "ctx",
        "Add",
        "TokenName",
        "ParseElement",
        "Token",
        "ToString",
        "TokenIsQuoted",
        "TokenIsQuoted",
        "TokenName",
        "Token",
        "Length",
        "TokenIsQuoted",
        "QuoteMode",
        "Token",
        "Append",
        "aJSON",
        "i",
        "i",
        "QuoteMode",
        "aJSON",
        "i",
        "C",
        "Token",
        "Append",
        "Token",
        "Append",
        "Token",
        "Append",
        "Token",
        "Append",
        "Token",
        "Append",
        "aJSON",
        "Substring",
        "i",
        "Token",
        "Append",
        "Parse",
        "s",
        "Globalization",
        "NumberStyles",
        "AllowHexSpecifier",
        "i",
        "Token",
        "Append",
        "C",
        "Token",
        "Append",
        "aJSON",
        "i",
        "i",
        "QuoteMode",
        "ctx",
        "ParseElement",
        "Token",
        "ToString",
        "TokenIsQuoted",
        "ctx",
        "JSONNode",
        "JSONNode",
        "JSONNode",
        "inline",
        "inline",
        "value",
        "JSONNodeType",
        "Enumerator",
        "m_List",
        "GetEnumerator",
        "JSONNode",
        "aIndex",
        "aIndex",
        "aIndex",
        "m_List",
        "Count",
        "JSONLazyCreator",
        "m_List",
        "aIndex",
        "value",
        "value",
        "JSONNull",
        "CreateOrGet",
        "aIndex",
        "aIndex",
        "m_List",
        "Count",
        "m_List",
        "Add",
        "value",
        "m_List",
        "aIndex",
        "value",
        "JSONNode",
        "aKey",
        "JSONLazyCreator",
        "value",
        "value",
        "JSONNull",
        "CreateOrGet",
        "m_List",
        "Add",
        "value",
        "m_List",
        "Count",
        "aKey",
        "JSONNode",
        "aItem",
        "aItem",
        "aItem",
        "JSONNull",
        "CreateOrGet",
        "m_List",
        "Add",
        "aItem",
        "aIndex",
        "aIndex",
        "aIndex",
        "m_List",
        "Count",
        "m_List",
        "aIndex",
        "m_List",
        "RemoveAt",
        "aIndex",
        "tmp",
        "JSONNode",
        "aNode",
        "m_List",
        "Remove",
        "aNode",
        "aNode",
        "JSONNode",
        "JSONNode",
        "N",
        "m_List",
        "N",
        "StringBuilder",
        "aSB",
        "aIndent",
        "aIndentInc",
        "JSONTextMode",
        "aMode",
        "aSB",
        "Append",
        "m_List",
        "Count",
        "inline",
        "aMode",
        "JSONTextMode",
        "Compact",
        "i",
        "count",
        "i",
        "i",
        "aSB",
        "Append",
        "aMode",
        "JSONTextMode",
        "Indent",
        "aSB",
        "AppendLine",
        "aMode",
        "JSONTextMode",
        "Indent",
        "aSB",
        "Append",
        "aIndent",
        "aIndentInc",
        "m_List",
        "i",
        "WriteToStringBuilder",
        "aSB",
        "aIndent",
        "aIndentInc",
        "aIndentInc",
        "aMode",
        "aMode",
        "JSONTextMode",
        "Indent",
        "aSB",
        "AppendLine",
        "Append",
        "aIndent",
        "aSB",
        "Append",
        "JSONNode",
        "JSONNode",
        "JSONNode",
        "inline",
        "inline",
        "value",
        "JSONNodeType",
        "Enumerator",
        "m_Dict",
        "GetEnumerator",
        "JSONNode",
        "aKey",
        "m_Dict",
        "ContainsKey",
        "aKey",
        "m_Dict",
        "aKey",
        "JSONLazyCreator",
        "aKey",
        "value",
        "value",
        "JSONNull",
        "CreateOrGet",
        "m_Dict",
        "ContainsKey",
        "aKey",
        "m_Dict",
        "aKey",
        "value",
        "m_Dict",
        "Add",
        "aKey",
        "value",
        "JSONNode",
        "aIndex",
        "aIndex",
        "aIndex",
        "m_Dict",
        "Count",
        "m_Dict",
        "ElementAt",
        "aIndex",
        "Value",
        "value",
        "value",
        "JSONNull",
        "CreateOrGet",
        "aIndex",
        "aIndex",
        "m_Dict",
        "Count",
        "m_Dict",
        "ElementAt",
        "aIndex",
        "Key",
        "m_Dict",
        "key",
        "value",
        "m_Dict",
        "Count",
        "aKey",
        "JSONNode",
        "aItem",
        "aItem",
        "aItem",
        "JSONNull",
        "CreateOrGet",
        "IsNullOrEmpty",
        "aKey",
        "m_Dict",
        "ContainsKey",
        "aKey",
        "m_Dict",
        "aKey",
        "aItem",
        "m_Dict",
        "Add",
        "aKey",
        "aItem",
        "m_Dict",
        "Add",
        "Guid",
        "NewGuid",
        "ToString",
        "aItem",
        "aKey",
        "m_Dict",
        "ContainsKey",
        "aKey",
        "m_Dict",
        "aKey",
        "m_Dict",
        "Remove",
        "aKey",
        "tmp",
        "aIndex",
        "aIndex",
        "aIndex",
        "m_Dict",
        "Count",
        "m_Dict",
        "ElementAt",
        "aIndex",
        "m_Dict",
        "Remove",
        "item",
        "Key",
        "item",
        "Value",
        "JSONNode",
        "aNode",
        "m_Dict",
        "Where",
        "k",
        "Value",
        "aNode",
        "First",
        "m_Dict",
        "Remove",
        "item",
        "Key",
        "aNode",
        "JSONNode",
        "KeyValuePair",
        "JSONNode",
        "N",
        "m_Dict",
        "N",
        "Value",
        "StringBuilder",
        "aSB",
        "aIndent",
        "aIndentInc",
        "JSONTextMode",
        "aMode",
        "aSB",
        "Append",
        "inline",
        "aMode",
        "JSONTextMode",
        "Compact",
        "k",
        "m_Dict",
        "first",
        "aSB",
        "Append",
        "first",
        "aMode",
        "JSONTextMode",
        "Indent",
        "aSB",
        "AppendLine",
        "aMode",
        "JSONTextMode",
        "Indent",
        "aSB",
        "Append",
        "aIndent",
        "aIndentInc",
        "aSB",
        "Append",
        "Append",
        "Escape",
        "k",
        "Key",
        "Append",
        "aMode",
        "JSONTextMode",
        "Compact",
        "aSB",
        "Append",
        "aSB",
        "Append",
        "k",
        "Value",
        "WriteToStringBuilder",
        "aSB",
        "aIndent",
        "aIndentInc",
        "aIndentInc",
        "aMode",
        "aMode",
        "JSONTextMode",
        "Indent",
        "aSB",
        "AppendLine",
        "Append",
        "aIndent",
        "aSB",
        "Append",
        "JSONNode",
        "JSONNodeType",
        "Enumerator",
        "m_Data",
        "m_Data",
        "value",
        "aData",
        "m_Data",
        "aData",
        "StringBuilder",
        "aSB",
        "aIndent",
        "aIndentInc",
        "JSONTextMode",
        "aMode",
        "aSB",
        "Append",
        "Append",
        "Escape",
        "m_Data",
        "Append",
        "obj",
        "Equals",
        "obj",
        "obj",
        "s",
        "m_Data",
        "s",
        "obj",
        "JSONString",
        "s2",
        "m_Data",
        "s2",
        "m_Data",
        "m_Data",
        "GetHashCode",
        "JSONNode",
        "JSONNodeType",
        "Enumerator",
        "m_Data",
        "ToString",
        "CultureInfo",
        "InvariantCulture",
        "TryParse",
        "value",
        "NumberStyles",
        "CultureInfo",
        "InvariantCulture",
        "v",
        "m_Data",
        "v",
        "m_Data",
        "m_Data",
        "value",
        "m_Data",
        "m_Data",
        "value",
        "aData",
        "m_Data",
        "aData",
        "aData",
        "Value",
        "aData",
        "StringBuilder",
        "aSB",
        "aIndent",
        "aIndentInc",
        "JSONTextMode",
        "aMode",
        "aSB",
        "Append",
        "Value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "obj",
        "obj",
        "Equals",
        "obj",
        "obj",
        "JSONNumber",
        "s2",
        "m_Data",
        "s2",
        "m_Data",
        "IsNumeric",
        "obj",
        "Convert",
        "ToDouble",
        "obj",
        "m_Data",
        "m_Data",
        "GetHashCode",
        "JSONNode",
        "JSONNodeType",
        "Enumerator",
        "m_Data",
        "ToString",
        "TryParse",
        "value",
        "v",
        "m_Data",
        "v",
        "m_Data",
        "m_Data",
        "value",
        "aData",
        "m_Data",
        "aData",
        "aData",
        "Value",
        "aData",
        "StringBuilder",
        "aSB",
        "aIndent",
        "aIndentInc",
        "JSONTextMode",
        "aMode",
        "aSB",
        "Append",
        "m_Data",
        "obj",
        "obj",
        "obj",
        "m_Data",
        "obj",
        "m_Data",
        "GetHashCode",
        "JSONNode",
        "JSONNull",
        "reuseSameInstance",
        "m_StaticInstance",
        "JSONNull",
        "JSONNodeType",
        "NullValue",
        "Enumerator",
        "obj",
        "ReferenceEquals",
        "obj",
        "obj",
        "JSONNull",
        "StringBuilder",
        "aSB",
        "aIndent",
        "aIndentInc",
        "JSONTextMode",
        "aMode",
        "aSB",
        "Append",
        "JSONNode",
        "JSONNodeType",
        "Enumerator",
        "JSONNode",
        "aNode",
        "m_Node",
        "aNode",
        "m_Key",
        "JSONNode",
        "aNode",
        "aKey",
        "m_Node",
        "aNode",
        "m_Key",
        "aKey",
        "T",
        "T",
        "aVal",
        "T",
        "JSONNode",
        "m_Key",
        "m_Node",
        "Add",
        "aVal",
        "m_Node",
        "Add",
        "m_Key",
        "aVal",
        "m_Node",
        "aVal",
        "JSONNode",
        "aIndex",
        "JSONLazyCreator",
        "JSONArray",
        "Add",
        "value",
        "JSONNode",
        "aKey",
        "JSONLazyCreator",
        "aKey",
        "JSONObject",
        "Add",
        "aKey",
        "value",
        "JSONNode",
        "aItem",
        "JSONArray",
        "Add",
        "aItem",
        "aKey",
        "JSONNode",
        "aItem",
        "JSONObject",
        "Add",
        "aKey",
        "aItem",
        "JSONLazyCreator",
        "a",
        "b",
        "b",
        "ReferenceEquals",
        "a",
        "b",
        "JSONLazyCreator",
        "a",
        "b",
        "a",
        "b",
        "obj",
        "obj",
        "ReferenceEquals",
        "obj",
        "JSONNumber",
        "JSONNumber",
        "value",
        "JSONNumber",
        "JSONNumber",
        "value",
        "JSONNumber",
        "JSONNumber",
        "value",
        "longAsString",
        "JSONString",
        "JSONNumber",
        "longAsString",
        "JSONString",
        "value",
        "ToString",
        "JSONNumber",
        "value",
        "JSONBool",
        "JSONBool",
        "value",
        "JSONArray",
        "JSONObject",
        "StringBuilder",
        "aSB",
        "aIndent",
        "aIndentInc",
        "JSONTextMode",
        "aMode",
        "aSB",
        "Append",
        "aJSON",
        "JSONNode",
        "Parse",
        "aJSON"
    ],
    "literals": [
        "\"\"",
        "\"\"",
        "\"true\"",
        "\"false\"",
        "\"\\\\\\\\\"",
        "\"\\\\\\\"\"",
        "\"\\\\n\"",
        "\"\\\\r\"",
        "\"\\\\t\"",
        "\"\\\\b\"",
        "\"\\\\f\"",
        "\"\\\\u\"",
        "\"X4\"",
        "\"false\"",
        "\"true\"",
        "\"true\"",
        "\"null\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"JSON Parse: Too many closing brackets\"",
        "\"\"",
        "\"\"",
        "\"JSON Parse: Quotation marks seems to be messed up.\"",
        "\" : \"",
        "\"true\"",
        "\"false\"",
        "\"null\"",
        "\"null\"",
        "\"0\"",
        "\"null\""
    ],
    "variables": [
        "Type",
        "m_Object",
        "m_Array",
        "IsValid",
        "Current",
        "Enumerator",
        "m_Enumerator",
        "JSONNode",
        "Current",
        "Enumerator",
        "m_Enumerator",
        "JSONNode",
        "Current",
        "JSONNode",
        "m_Node",
        "Enumerator",
        "m_Enumerator",
        "Current",
        "Current",
        "forceASCII",
        "longAsString",
        "JSONNodeType",
        "Tag",
        "Value",
        "Count",
        "IsNumber",
        "IsString",
        "IsBoolean",
        "IsNull",
        "IsArray",
        "IsObject",
        "Inline",
        "Children",
        "DeepChildren",
        "StringBuilder",
        "sb",
        "StringBuilder",
        "sb",
        "Linq",
        "KeyEnumerator",
        "Keys",
        "ValueEnumerator",
        "Values",
        "AsDouble",
        "v",
        "AsInt",
        "AsFloat",
        "AsBool",
        "v",
        "AsLong",
        "val",
        "JSONArray",
        "AsArray",
        "JSONObject",
        "AsObject",
        "aIsNull",
        "bIsNull",
        "StringBuilder",
        "m_EscapeBuilder",
        "StringBuilder",
        "EscapeBuilder",
        "sb",
        "EscapeBuilder",
        "val",
        "c",
        "result",
        "tmp",
        "val",
        "stack",
        "JSONNode",
        "ctx",
        "i",
        "StringBuilder",
        "Token",
        "TokenName",
        "QuoteMode",
        "TokenIsQuoted",
        "C",
        "s",
        "m_List",
        "inline",
        "Inline",
        "JSONNodeType",
        "Tag",
        "IsArray",
        "Count",
        "JSONNode",
        "tmp",
        "Children",
        "count",
        "i",
        "m_Dict",
        "inline",
        "Inline",
        "JSONNodeType",
        "Tag",
        "IsObject",
        "key",
        "Count",
        "JSONNode",
        "tmp",
        "item",
        "item",
        "Children",
        "first",
        "m_Data",
        "JSONNodeType",
        "Tag",
        "IsString",
        "Value",
        "s",
        "JSONString",
        "s2",
        "m_Data",
        "JSONNodeType",
        "Tag",
        "IsNumber",
        "Value",
        "v",
        "AsDouble",
        "AsLong",
        "JSONNumber",
        "s2",
        "m_Data",
        "JSONNodeType",
        "Tag",
        "IsBoolean",
        "Value",
        "v",
        "AsBool",
        "JSONNull",
        "m_StaticInstance",
        "reuseSameInstance",
        "JSONNodeType",
        "Tag",
        "IsNull",
        "Value",
        "AsBool",
        "JSONNode",
        "m_Node",
        "m_Key",
        "JSONNodeType",
        "Tag",
        "AsInt",
        "AsFloat",
        "AsDouble",
        "AsLong",
        "AsBool",
        "JSONArray",
        "AsArray",
        "JSONObject",
        "AsObject"
    ],
    "comments": [
        "Use Unicode by default",
        "lazy creator creates a JSONString instead of JSONNumber",
        "End of JSONNode",
        "End of JSONArray",
        "End of JSONObject",
        "End of JSONString",
        "End of JSONNumber",
        "End of JSONBool",
        "End of JSONNull",
        "Be GC friendly.",
        "End of JSONLazyCreator"
    ],
    "docstrings": [
        "* * * *\n * A simple JSON Parser / builder\n * ------------------------------\n * \n * It mainly has been written as a simple JSON parser. It can build a JSON string\n * from the node-tree, or generate a node tree from any valid JSON string.\n * \n * If you want to use compression when saving to file / stream / B64 you have to include\n * SharpZipLib ( http://www.icsharpcode.net/opensource/sharpziplib/ ) in your project and\n * define \"USE_SharpZipLib\" at the top of the file\n * \n * Written by Bunny83 \n * 2012-06-09\n * \n * [2012-06-09 First Version]\n * - provides strongly typed node classes and lists / dictionaries\n * - provides easy access to class members / array items / data values\n * - the parser now properly identifies types. So generating JSON with this framework should work.\n * - only double quotes (\") are used for quoting strings.\n * - provides \"casting\" properties to easily convert to / from those types:\n *   int / float / double / bool\n * - provides a common interface for each node so no explicit casting is required.\n * - the parser tries to avoid errors, but if malformed JSON is parsed the result is more or less undefined\n * - It can serialize/deserialize a node tree into/from an experimental compact binary format. It might\n *   be handy if you want to store things in a file and don't want it to be easily modifiable\n * \n * [2012-12-17 Update]\n * - Added internal JSONLazyCreator class which simplifies the construction of a JSON tree\n *   Now you can simple reference any item that doesn't exist yet and it will return a JSONLazyCreator\n *   The class determines the required type by it's further use, creates the type and removes itself.\n * - Added binary serialization / deserialization.\n * - Added support for BZip2 zipped binary format. Requires the SharpZipLib ( http://www.icsharpcode.net/opensource/sharpziplib/ )\n *   The usage of the SharpZipLib library can be disabled by removing or commenting out the USE_SharpZipLib define at the top\n * - The serializer uses different types when it comes to store the values. Since my data values\n *   are all of type string, the serializer will \"try\" which format fits best. The order is: int, float, double, bool, string.\n *   It's not the most efficient way but for a moderate amount of data it should work on all platforms.\n * \n * [2017-03-08 Update]\n * - Optimised parsing by using a StringBuilder for token. This prevents performance issues when large\n *   string data fields are contained in the json data.\n * - Finally refactored the badly named JSONClass into JSONObject.\n * - Replaced the old JSONData class by distict typed classes ( JSONString, JSONNumber, JSONBool, JSONNull ) this\n *   allows to propertly convert the node tree back to json without type information loss. The actual value\n *   parsing now happens at parsing time and not when you actually access one of the casting properties.\n * \n * [2017-04-11 Update]\n * - Fixed parsing bug where empty string values have been ignored.\n * - Optimised \"ToString\" by using a StringBuilder internally. This should heavily improve performance for large files\n * - Changed the overload of \"ToString(string aIndent)\" to \"ToString(int aIndent)\"\n * \n * [2017-11-29 Update]\n * - Removed the IEnumerator implementations on JSONArray & JSONObject and replaced it with a common\n *   struct Enumerator in JSONNode that should avoid garbage generation. The enumerator always works\n *   on KeyValuePair<string, JSONNode>, even for JSONArray.\n * - Added two wrapper Enumerators that allows for easy key or value enumeration. A JSONNode now has\n *   a \"Keys\" and a \"Values\" enumerable property. Those are also struct enumerators / enumerables\n * - A KeyValuePair<string, JSONNode> can now be implicitly converted into a JSONNode. This allows\n *   a foreach loop over a JSONNode to directly access the values only. Since KeyValuePair as well as\n *   all the Enumerators are structs, no garbage is allocated.\n * - To add Linq support another \"LinqEnumerator\" is available through the \"Linq\" property. This\n *   enumerator does implement the generic IEnumerable interface so most Linq extensions can be used\n *   on this enumerable object. This one does allocate memory as it's a wrapper class.\n * - The Escape method now escapes all control characters (# < 32) in strings as uncode characters\n *   (\\uXXXX) and if the static bool JSONNode.forceASCII is set to true it will also escape all\n *   characters # > 127. This might be useful if you require an ASCII output. Though keep in mind\n *   when your strings contain many non-ascii characters the strings become much longer (x6) and are\n *   no longer human readable.\n * - The node types JSONObject and JSONArray now have an \"Inline\" boolean switch which will default to\n *   false. It can be used to serialize this element inline even you serialize with an indented format\n *   This is useful for arrays containing numbers so it doesn't place every number on a new line\n * - Extracted the binary serialization code into a seperate extension file. All classes are now declared\n *   as \"partial\" so an extension file can even add a new virtual or abstract method / interface to\n *   JSONNode and override it in the concrete type classes. It's of course a hacky approach which is\n *   generally not recommended, but i wanted to keep everything tightly packed.\n * - Added a static CreateOrGet method to the JSONNull class. Since this class is immutable it could\n *   be reused without major problems. If you have a lot null fields in your data it will help reduce\n *   the memory / garbage overhead. I also added a static setting (reuseSameInstance) to JSONNull\n *   (default is true) which will change the behaviour of \"CreateOrGet\". If you set this to false\n *   CreateOrGet will not reuse the cached instance but instead create a new JSONNull instance each time.\n *   I made the JSONNull constructor private so if you need to create an instance manually use\n *   JSONNull.CreateOrGet()\n * \n * [2018-01-09 Update]\n * - Changed all double.TryParse and double.ToString uses to use the invariant culture to avoid problems\n *   on systems with a culture that uses a comma as decimal point.\n * \n * [2018-01-26 Update]\n * - Added AsLong. Note that a JSONNumber is stored as double and can't represent all long values. However\n *   storing it as string would work.\n * - Added static setting \"JSONNode.longAsString\" which controls the default type that is used by the\n *   LazyCreator when using AsLong\n * \n * [2018-04-25 Update]\n *  - Added support for parsing single values (JSONBool, JSONString, JSONNumber, JSONNull) as top level value.\n * \n * The MIT License (MIT)\n * \n * Copyright (c) 2012-2017 Markus Göbel (Bunny83)\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n * * * *"
    ],
    "functions": [
        "Enumerator",
        "Enumerator",
        "MoveNext",
        "ValueEnumerator",
        "ValueEnumerator",
        "ValueEnumerator",
        "MoveNext",
        "ValueEnumerator",
        "GetEnumerator",
        "KeyEnumerator",
        "KeyEnumerator",
        "KeyEnumerator",
        "MoveNext",
        "KeyEnumerator",
        "GetEnumerator",
        "LinqEnumerator",
        "MoveNext",
        "Dispose",
        "GetEnumerator",
        "Reset",
        "IEnumerator",
        "GetEnumerator",
        "Add",
        "Add",
        "JSONNode",
        "Remove",
        "JSONNode",
        "Remove",
        "JSONNode",
        "Remove",
        "ToString",
        "ToString",
        "WriteToStringBuilder",
        "Enumerator",
        "GetEnumerator",
        "Equals",
        "GetHashCode",
        "Escape",
        "JSONNode",
        "ParseElement",
        "JSONNode",
        "Parse",
        "Enumerator",
        "GetEnumerator",
        "Add",
        "JSONNode",
        "Remove",
        "JSONNode",
        "Remove",
        "WriteToStringBuilder",
        "Enumerator",
        "GetEnumerator",
        "Add",
        "JSONNode",
        "Remove",
        "JSONNode",
        "Remove",
        "JSONNode",
        "Remove",
        "WriteToStringBuilder",
        "Enumerator",
        "GetEnumerator",
        "JSONString",
        "WriteToStringBuilder",
        "Equals",
        "GetHashCode",
        "Enumerator",
        "GetEnumerator",
        "JSONNumber",
        "JSONNumber",
        "WriteToStringBuilder",
        "IsNumeric",
        "Equals",
        "GetHashCode",
        "Enumerator",
        "GetEnumerator",
        "JSONBool",
        "JSONBool",
        "WriteToStringBuilder",
        "Equals",
        "GetHashCode",
        "JSONNull",
        "CreateOrGet",
        "JSONNull",
        "Enumerator",
        "GetEnumerator",
        "Equals",
        "GetHashCode",
        "WriteToStringBuilder",
        "Enumerator",
        "GetEnumerator",
        "JSONLazyCreator",
        "JSONLazyCreator",
        "T",
        "Add",
        "Add",
        "Equals",
        "GetHashCode",
        "WriteToStringBuilder",
        "JSONNode",
        "Parse"
    ],
    "classes": [
        "JSONNode",
        "LinqEnumerator",
        "JSONArray",
        "JSONObject",
        "JSONString",
        "JSONNumber",
        "JSONBool",
        "JSONNull",
        "JSONLazyCreator"
    ]
}