{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "unicode_literals",
        "future",
        "builtins",
        "disabled",
        "future",
        "builtins",
        "werkzeug",
        "exceptions",
        "HTTPException",
        "NotFound",
        "ServiceUnavailable",
        "werkzeug",
        "wrappers",
        "Response",
        "Request",
        "werkzeug",
        "wsgi",
        "responder",
        "wrap_file",
        "cms",
        "db",
        "filecacher",
        "FileCacher",
        "TombstoneError",
        "file_cacher",
        "app",
        "file_cacher",
        "app",
        "environ",
        "start_response",
        "wsgi_app",
        "environ",
        "start_response",
        "responder",
        "environ",
        "start_response",
        "Response",
        "from_app",
        "wrapped_app",
        "environ",
        "DIGEST_HEADER",
        "original_response",
        "headers",
        "original_response",
        "original_response",
        "headers",
        "pop",
        "DIGEST_HEADER",
        "original_response",
        "headers",
        "pop",
        "FILENAME_HEADER",
        "original_response",
        "mimetype",
        "file_cacher",
        "get_file",
        "digest",
        "file_cacher",
        "get_size",
        "digest",
        "KeyError",
        "NotFound",
        "TombstoneError",
        "ServiceUnavailable",
        "Request",
        "environ",
        "Response",
        "mimetype",
        "filename",
        "response",
        "headers",
        "add",
        "filename",
        "filename",
        "response",
        "set_etag",
        "digest",
        "response",
        "cache_control",
        "SECONDS_IN_A_YEAR",
        "response",
        "cache_control",
        "wrap_file",
        "environ",
        "fobj",
        "buffer_size",
        "FileCacher",
        "CHUNK_SIZE",
        "response",
        "make_conditional",
        "request",
        "accept_ranges",
        "complete_length",
        "size",
        "HTTPException",
        "exc",
        "exc",
        "response"
    ],
    "literals": [
        "\"X-CMS-File-Digest\"",
        "\"X-CMS-File-Filename\"",
        "\"strict\"",
        "\"Content-Disposition\"",
        "\"attachment\""
    ],
    "variables": [
        "SECONDS_IN_A_YEAR",
        "DIGEST_HEADER",
        "FILENAME_HEADER",
        "file_cacher",
        "wrapped_app",
        "original_response",
        "digest",
        "filename",
        "mimetype",
        "fobj",
        "size",
        "request",
        "request",
        "encoding_errors",
        "response",
        "response",
        "status_code",
        "response",
        "mimetype",
        "max_age",
        "response",
        "response",
        "response",
        "direct_passthrough"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8 -*-",
        "Contest Management System - http://cms-dev.github.io/",
        "Copyright Â© 2018 Luca Wehrstedt <luca.wehrstedt@gmail.com>",
        "",
        "This program is free software: you can redistribute it and/or modify",
        "it under the terms of the GNU Affero General Public License as",
        "published by the Free Software Foundation, either version 3 of the",
        "License, or (at your option) any later version.",
        "",
        "This program is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU Affero General Public License for more details.",
        "",
        "You should have received a copy of the GNU Affero General Public License",
        "along with this program.  If not, see <http://www.gnu.org/licenses/>.",
        "This takes care of conditional and partial requests."
    ],
    "docstrings": [
        "\"\"\"Intercept requests wanting to serve files and serve those files.\n\n    Tornado's WSGI adapter contravenes the specification by buffering\n    the entire output produced by a handler rather than streaming it\n    down as soon as it's available (even when an explicit flush is\n    issued). This is especially problematic when serving files, as it\n    causes them to be entirely loaded into memory, providing a vector\n    for a denial-of-service attack.\n\n    This class is one half of a two-part solution to this problem. When\n    a Tornado handler wants to serve a file it instead serves an empty\n    response with custom headers. This middleware looks out for\n    responses of that form and, when it encounters one, it fetches and\n    streams back the file that was requested, using a proper compliant\n    way.\n\n    \"\"\"",
        "\"\"\"Create an instance.\n\n        file_cacher (FileCacher): the cacher to retrieve files from.\n        app (function): the WSGI application to wrap.\n\n        \"\"\"",
        "\"\"\"Execute this instance as a WSGI application.\n\n        See the PEP for the meaning of parameters. The separation of\n        __call__ and wsgi_app eases the insertion of middlewares.\n\n        \"\"\"",
        "\"\"\"Execute this instance as a WSGI application.\n\n        See the PEP for the meaning of parameters. The separation of\n        __call__ and wsgi_app eases the insertion of middlewares.\n\n        \"\"\""
    ],
    "functions": [
        "__call__",
        "wsgi_app"
    ],
    "classes": [
        "FileServerMiddleware"
    ]
}