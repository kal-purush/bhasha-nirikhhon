{
    "identifiers": [
        "com",
        "nike",
        "cerberus",
        "service",
        "com",
        "google",
        "common",
        "collect",
        "ImmutableMap",
        "com",
        "nike",
        "cerberus",
        "mapper",
        "LockMapper",
        "com",
        "nike",
        "riposte",
        "server",
        "config",
        "ServerConfig",
        "com",
        "nike",
        "riposte",
        "server",
        "hooks",
        "ServerShutdownHook",
        "io",
        "netty",
        "channel",
        "Channel",
        "org",
        "apache",
        "ibatis",
        "session",
        "SqlSession",
        "org",
        "apache",
        "ibatis",
        "session",
        "SqlSessionFactory",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "javax",
        "inject",
        "Inject",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "Semaphore",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "java",
        "util",
        "concurrent",
        "atomic",
        "AtomicBoolean",
        "log",
        "LoggerFactory",
        "getLogger",
        "getClass",
        "LOCK_ACQUIRED",
        "LOCK_ACQUIRE_FAILURE",
        "LOCK_RELEASED",
        "LOCK_RELEASE_FAILURE",
        "sqlSessionFactory",
        "metricsService",
        "locks",
        "Inject",
        "sqlSessionFactory",
        "metricsService",
        "sqlSessionFactory",
        "sqlSessionFactory",
        "metricsService",
        "metricsService",
        "lockName",
        "log",
        "debug",
        "lockName",
        "lockName",
        "thread",
        "thread",
        "start",
        "locks",
        "put",
        "lockName",
        "lockThread",
        "thread",
        "semaphore",
        "acquireUninterruptibly",
        "semaphore",
        "release",
        "didAcquireLock",
        "isLocked",
        "didAcquireLock",
        "metricsService",
        "getOrCreateCounter",
        "LOCK_ACQUIRED",
        "ImmutableMap",
        "of",
        "lockName",
        "inc",
        "locks",
        "remove",
        "lockName",
        "log",
        "error",
        "metricsService",
        "getOrCreateCounter",
        "LOCK_ACQUIRE_FAILURE",
        "ImmutableMap",
        "of",
        "lockName",
        "inc",
        "didAcquireLock",
        "lockName",
        "locks",
        "containsKey",
        "lockName",
        "locks",
        "get",
        "lockName",
        "release",
        "semaphore",
        "acquireUninterruptibly",
        "semaphore",
        "release",
        "didRelease",
        "metricsService",
        "getOrCreateCounter",
        "LOCK_RELEASED",
        "ImmutableMap",
        "of",
        "lockName",
        "inc",
        "locks",
        "remove",
        "lockName",
        "didRelease",
        "Override",
        "serverConfig",
        "channel",
        "log",
        "info",
        "locks",
        "forEach",
        "name",
        "release",
        "semaphore",
        "tryAcquire",
        "TimeUnit",
        "SECONDS",
        "locks",
        "remove",
        "name",
        "e",
        "log",
        "error",
        "e",
        "interrupt",
        "log",
        "info",
        "lockThread",
        "semaphore",
        "shouldKeepLock",
        "isLocked",
        "didRelease",
        "name",
        "name",
        "semaphore",
        "acquireUninterruptibly",
        "name",
        "name",
        "semaphore",
        "acquireUninterruptibly",
        "shouldKeepLock",
        "lockThread",
        "lockThread",
        "isAlive",
        "lockThread",
        "interrupt",
        "Override",
        "log",
        "debug",
        "session",
        "sqlSessionFactory",
        "openSession",
        "lockMapper",
        "session",
        "getMapper",
        "lockStatus",
        "lockMapper",
        "getLock",
        "name",
        "isLocked",
        "lockStatus",
        "log",
        "debug",
        "name",
        "lockStatus",
        "isLocked",
        "shouldKeepLock",
        "semaphore",
        "release",
        "shouldKeepLock",
        "get",
        "sleep",
        "e",
        "log",
        "error",
        "e",
        "shouldKeepLock",
        "semaphore",
        "release",
        "isLocked",
        "log",
        "debug",
        "releaseStatus",
        "lockMapper",
        "releaseLock",
        "name",
        "didRelease",
        "releaseStatus",
        "didRelease",
        "metricsService",
        "getOrCreateCounter",
        "LOCK_RELEASE_FAILURE",
        "ImmutableMap",
        "of",
        "name",
        "inc",
        "log",
        "warn",
        "name",
        "releaseStatus",
        "sleep",
        "e",
        "log",
        "error",
        "e",
        "didRelease",
        "log",
        "debug",
        "session",
        "commit",
        "semaphore",
        "release"
    ],
    "literals": [
        "\"cms.lock-acquired\"",
        "\"cms.lock-acquire-failure\"",
        "\"cms.lock-released\"",
        "\"cms.lock-release-failure\"",
        "\"Attempting to acquire lock for {}\"",
        "\"lock-name\"",
        "\"Failed to acquire lock, returning false.\"",
        "\"lock-name\"",
        "\"lock-name\"",
        "\"Received shutdown hook, attempting to shutdown gracefully\"",
        "\"Failed to gracefully release lock: {}, interrupting thread\"",
        "\"Shutdown hook finished\"",
        "\"Attempting to get lock\"",
        "\"Lock acquire for name: {} res: {}\"",
        "\"Failed to sleep\"",
        "\"Attempting to release lock\"",
        "\"lock-name\"",
        "\"Failed to release lock for {}, retrying, status: {}\"",
        "\"Failed to sleep\"",
        "\"Lock released\""
    ],
    "variables": [
        "sqlSessionFactory",
        "metricsService",
        "lockThread",
        "name"
    ],
    "comments": [
        "Create a lock thread and start it.",
        "wait for the lock to signal that it finished attempting to acquire the lock",
        "check to see if the lock was acquired",
        "if the lock wasn't acquired clear the thread and lock so it can be garbage collected",
        "return the result",
        "If this service doesn't have the requested named lock then return true.",
        "Get the lock and tell it to release",
        "wait for the lock to signal that it has finished releasing.",
        "if the lock was released clean up the objects for garbage collection",
        "return the status"
    ],
    "docstrings": [
        "* Copyright (c) 2017 Nike, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* This service provides the needed functionality to acquire and release a named lock from the data store in an independent transaction.\n * If you can lock and do work in a single transaction then using the LockDao directly is more efficient.",
        "* This method acquires a distributed named lock.\n     *\n     * @param lockName The named lock that should try to be acquired.\n     * @return true if the lock was successfully acquired.",
        "* Releases a named lock, it is not required to have the lock to call this method.\n     *\n     * @param lockName The lock name that was acquired.\n     * @return true if the lock was released or this instance didn't have the lock to release.",
        "* Shutdown hook to release locks and kill running threads.\n     * Explicitly releasing the locks is not required, as the mysql will release the lock when the connection is closed.\n     * However this will kill the threads which might try to keep the Java process alive during a graceful shutdown.",
        "* A simple class that can acquire, keep and release a lock in a single thread / mysql transaction."
    ],
    "functions": [
        "DistributedLockService",
        "acquireLock",
        "releaseLock",
        "executeServerShutdownHook",
        "Lock",
        "release",
        "interrupt",
        "run"
    ],
    "classes": [
        "DistributedLockService",
        "Lock"
    ]
}