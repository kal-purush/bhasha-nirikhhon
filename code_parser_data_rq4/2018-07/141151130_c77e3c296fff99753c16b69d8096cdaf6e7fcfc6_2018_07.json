{
    "identifiers": [
        "GraphQLEnumType",
        "DocumentNode",
        "parse",
        "DefinitionNode",
        "defaultFieldResolver",
        "buildASTSchema",
        "extendSchema",
        "GraphQLScalarType",
        "getNamedType",
        "GraphQLObjectType",
        "GraphQLSchema",
        "GraphQLResolveInfo",
        "GraphQLField",
        "GraphQLFieldResolver",
        "GraphQLType",
        "GraphQLInterfaceType",
        "GraphQLFieldMap",
        "GraphQLUnionType",
        "IExecutableSchemaDefinition",
        "ILogger",
        "IResolvers",
        "ITypeDefinitions",
        "ITypedef",
        "IFieldIteratorFn",
        "IConnectors",
        "IConnector",
        "IConnectorCls",
        "IResolverValidationOptions",
        "IDirectiveResolvers",
        "UnitOrList",
        "GraphQLParseOptions",
        "IAddResolveFunctionsToSchemaOptions",
        "SchemaDirectiveVisitor",
        "deprecated",
        "mergeDeep",
        "message",
        "message",
        "message",
        "typeDefinitions",
        "resolveFunctions",
        "logger",
        "allowUndefinedInResolve",
        "resolverValidationOptions",
        "parseOptions",
        "inheritResolversFromInterfaces",
        "resolverValidationOptions",
        "SchemaError",
        "typeDefinitions",
        "SchemaError",
        "resolveFunctions",
        "SchemaError",
        "resolveFunctions",
        "resolveFunctions",
        "resolverObj",
        "resolverObj",
        "mergeDeep",
        "resolveFunctions",
        "buildSchemaFromTypeDefinitions",
        "typeDefinitions",
        "parseOptions",
        "addResolveFunctionsToSchema",
        "assertResolveFunctionsPresent",
        "schema",
        "resolverValidationOptions",
        "allowUndefinedInResolve",
        "addCatchUndefinedToSchema",
        "schema",
        "logger",
        "addErrorLoggingToSchema",
        "schema",
        "logger",
        "schema",
        "_generateSchema",
        "typeDefs",
        "resolvers",
        "logger",
        "allowUndefinedInResolve",
        "resolverValidationOptions",
        "parseOptions",
        "inheritResolversFromInterfaces",
        "resolvers",
        "addSchemaLevelResolveFunction",
        "jsSchema",
        "resolvers",
        "connectors",
        "attachConnectorsToContext",
        "jsSchema",
        "connectors",
        "directiveResolvers",
        "attachDirectiveResolvers",
        "jsSchema",
        "directiveResolvers",
        "schemaDirectives",
        "SchemaDirectiveVisitor",
        "jsSchema",
        "schemaDirectives",
        "jsSchema",
        "typeDefinitions",
        "typeDefinitions",
        "typeDefinitions",
        "array",
        "array",
        "accumulator",
        "currentValue",
        "accumulator",
        "currentValue",
        "accumulator",
        "currentValue",
        "accumulator",
        "typeDefinitionsAry",
        "calledFunctionRefs",
        "typeDefinitionsAry",
        "typeDef",
        "isDocumentNode",
        "typeDef",
        "typeDef",
        "typeDef",
        "typeDef",
        "calledFunctionRefs",
        "typeDef",
        "calledFunctionRefs",
        "typeDef",
        "resolvedTypeDefinitions",
        "resolvedTypeDefinitions",
        "concatenateTypeDefs",
        "typeDef",
        "calledFunctionRefs",
        "typeDef",
        "resolvedTypeDefinitions",
        "typeDef",
        "typeDef",
        "SchemaError",
        "uniq",
        "resolvedTypeDefinitions",
        "x",
        "x",
        "typeDefinitions",
        "parseOptions",
        "isDocumentNode",
        "typeDefinitions",
        "astDocument",
        "typeDefinitions",
        "myDefinitions",
        "myDefinitions",
        "myDefinitions",
        "SchemaError",
        "myDefinitions",
        "concatenateTypeDefs",
        "myDefinitions",
        "myDefinitions",
        "astDocument",
        "parse",
        "myDefinitions",
        "parseOptions",
        "buildASTSchema",
        "astDocument",
        "backcompatOptions",
        "extractExtensionDefinitions",
        "astDocument",
        "extensionsAst",
        "schema",
        "extendSchema",
        "schema",
        "extensionsAst",
        "backcompatOptions",
        "schema",
        "ast",
        "ast",
        "newExtensionDefinitionKind",
        "interfaceExtensionDefinitionKind",
        "ast",
        "extensionDefs",
        "schema",
        "fn",
        "schema",
        "typeMap",
        "typeName",
        "typeMap",
        "typeName",
        "getNamedType",
        "GraphQLObjectType",
        "fields",
        "fieldName",
        "fields",
        "fieldName",
        "fn",
        "field",
        "typeName",
        "fieldName",
        "deprecated",
        "schema",
        "connectors",
        "schema",
        "schema",
        "GraphQLSchema",
        "connectors",
        "connectors",
        "connectorType",
        "connectors",
        "connectors",
        "schema",
        "schema",
        "attachconnectorFn",
        "root",
        "args",
        "key",
        "ctx",
        "ctx",
        "ctx",
        "contextType",
        "ctx",
        "ctx",
        "connectors",
        "connectorName",
        "connectors",
        "connectorName",
        "connector",
        "ctx",
        "connectorName",
        "connector",
        "ctx",
        "root",
        "addSchemaLevelResolveFunction",
        "schema",
        "attachconnectorFn",
        "schema",
        "fn",
        "schema",
        "schema",
        "schema",
        "x",
        "x",
        "rootTypes",
        "runAtMostOncePerRequest",
        "fn",
        "fields",
        "fieldName",
        "schema",
        "fields",
        "fieldName",
        "wrapResolver",
        "fields",
        "fieldName",
        "fn",
        "fields",
        "fieldName",
        "wrapResolver",
        "fields",
        "fieldName",
        "rootResolveFn",
        "GraphQLObjectType",
        "GraphQLInterfaceType",
        "options",
        "legacyInputResolvers",
        "legacyInputValidationOptions",
        "options",
        "GraphQLSchema",
        "options",
        "options",
        "legacyInputResolvers",
        "legacyInputValidationOptions",
        "inheritResolversFromInterfaces",
        "extendResolversFromInterfaces",
        "schema",
        "inputResolvers",
        "inputResolvers",
        "resolvers",
        "typeName",
        "schema",
        "typeName",
        "typeName",
        "allowResolversNotInSchema",
        "SchemaError",
        "typeName",
        "resolvers",
        "typeName",
        "fieldName",
        "fieldName",
        "fieldName",
        "resolvers",
        "typeName",
        "fieldName",
        "GraphQLScalarType",
        "fieldName",
        "resolvers",
        "typeName",
        "fieldName",
        "GraphQLEnumType",
        "fieldName",
        "SchemaError",
        "typeName",
        "fieldName",
        "fieldName",
        "resolvers",
        "typeName",
        "fieldName",
        "getFieldsForType",
        "fields",
        "allowResolversNotInSchema",
        "SchemaError",
        "typeName",
        "fields",
        "fieldName",
        "allowResolversNotInSchema",
        "SchemaError",
        "typeName",
        "fieldName",
        "fields",
        "fieldName",
        "resolvers",
        "typeName",
        "fieldName",
        "fieldResolve",
        "setFieldProperties",
        "field",
        "fieldResolve",
        "fieldResolve",
        "SchemaError",
        "typeName",
        "fieldName",
        "setFieldProperties",
        "field",
        "fieldResolve",
        "checkForResolveTypeResolver",
        "schema",
        "requireResolversForResolveType",
        "schema",
        "resolvers",
        "schema",
        "resolvers",
        "typeNames",
        "typeName",
        "resolvers",
        "typeName",
        "schema",
        "typeName",
        "GraphQLObjectType",
        "iFace",
        "resolvers",
        "iFace",
        "extendedResolvers",
        "typeName",
        "interfaceResolvers",
        "typeResolvers",
        "typeResolvers",
        "extendedResolvers",
        "typeName",
        "typeResolvers",
        "extendedResolvers",
        "schema",
        "requireResolversForResolveType",
        "schema",
        "typeName",
        "schema",
        "typeName",
        "GraphQLUnionType",
        "GraphQLInterfaceType",
        "requireResolversForResolveType",
        "requireResolversForResolveType",
        "SchemaError",
        "field",
        "propertiesObj",
        "propertiesObj",
        "propertyName",
        "field",
        "propertyName",
        "propertiesObj",
        "propertyName",
        "schema",
        "resolverValidationOptions",
        "requireResolversForAllFields",
        "requireResolversForArgs",
        "requireResolversForNonScalar",
        "forEachField",
        "schema",
        "field",
        "typeName",
        "fieldName",
        "requireResolversForAllFields",
        "expectResolveFunction",
        "field",
        "typeName",
        "fieldName",
        "requireResolversForArgs",
        "field",
        "expectResolveFunction",
        "field",
        "typeName",
        "fieldName",
        "requireResolversForNonScalar",
        "getNamedType",
        "field",
        "GraphQLScalarType",
        "expectResolveFunction",
        "field",
        "typeName",
        "fieldName",
        "field",
        "typeName",
        "fieldName",
        "field",
        "typeName",
        "fieldName",
        "field",
        "SchemaError",
        "typeName",
        "fieldName",
        "schema",
        "logger",
        "logger",
        "logger",
        "forEachField",
        "schema",
        "field",
        "typeName",
        "fieldName",
        "typeName",
        "fieldName",
        "field",
        "decorateWithLogger",
        "field",
        "logger",
        "errorHint",
        "innerResolver",
        "outerResolver",
        "obj",
        "args",
        "ctx",
        "info",
        "outerResolver",
        "obj",
        "args",
        "ctx",
        "info",
        "root",
        "innerResolver",
        "innerResolver",
        "root",
        "args",
        "ctx",
        "info",
        "defaultFieldResolver",
        "root",
        "args",
        "ctx",
        "info",
        "resolvers",
        "root",
        "args",
        "argName",
        "ctx",
        "info",
        "resolvers",
        "prev",
        "curResolver",
        "curResolver",
        "curResolver",
        "prev",
        "args",
        "ctx",
        "info",
        "defaultFieldResolver",
        "prev",
        "args",
        "ctx",
        "info",
        "root",
        "fn",
        "logger",
        "hint",
        "fn",
        "fn",
        "defaultFieldResolver",
        "logError",
        "e",
        "newE",
        "e",
        "hint",
        "newE",
        "e",
        "newE",
        "hint",
        "e",
        "logger",
        "newE",
        "root",
        "args",
        "ctx",
        "info",
        "fn",
        "root",
        "args",
        "ctx",
        "info",
        "result",
        "result",
        "result",
        "result",
        "reason",
        "reason",
        "reason",
        "reason",
        "logError",
        "error",
        "reason",
        "result",
        "e",
        "logError",
        "e",
        "e",
        "schema",
        "forEachField",
        "schema",
        "field",
        "typeName",
        "fieldName",
        "typeName",
        "fieldName",
        "field",
        "decorateToCatchUndefined",
        "field",
        "errorHint",
        "fn",
        "hint",
        "fn",
        "fn",
        "defaultFieldResolver",
        "root",
        "args",
        "ctx",
        "info",
        "fn",
        "root",
        "args",
        "ctx",
        "info",
        "result",
        "hint",
        "result",
        "fn",
        "root",
        "args",
        "ctx",
        "info",
        "info",
        "info",
        "info",
        "randomNumber",
        "info",
        "randomNumber",
        "value",
        "fn",
        "root",
        "args",
        "ctx",
        "info",
        "value",
        "schema",
        "directiveResolvers",
        "directiveResolvers",
        "directiveResolvers",
        "directiveResolvers",
        "directiveResolvers",
        "directiveName",
        "schemaDirectives",
        "directiveName",
        "SchemaDirectiveVisitor",
        "field",
        "directiveResolvers",
        "directiveName",
        "field",
        "defaultFieldResolver",
        "field",
        "args",
        "resolver",
        "originalResolver",
        "field",
        "args",
        "source",
        "directiveArgs",
        "context",
        "info",
        "SchemaDirectiveVisitor",
        "schema",
        "schemaDirectives",
        "makeExecutableSchema",
        "SchemaError",
        "forEachField",
        "chainResolvers",
        "addErrorLoggingToSchema",
        "addResolveFunctionsToSchema",
        "addCatchUndefinedToSchema",
        "assertResolveFunctionsPresent",
        "buildSchemaFromTypeDefinitions",
        "addSchemaLevelResolveFunction",
        "attachConnectorsToContext",
        "concatenateTypeDefs",
        "attachDirectiveResolvers"
    ],
    "literals": [
        "'graphql'",
        "'./Interfaces'",
        "'./schemaVisitor'",
        "'deprecated-decorator'",
        "'./mergeDeep'",
        "string",
        "string",
        "'object'",
        "'Expected `resolverValidationOptions` to be an object'",
        "'Must provide typeDefs'",
        "'Must provide resolvers'",
        "'object'",
        "'__schema'",
        "'function'",
        "'__schema'",
        "string",
        "string",
        "'function'",
        "'string'",
        "typeDef array must contain only strings and functions, got ${type}",
        "'\\n'",
        "'string'",
        "typeDefs must be a string, array or schema AST, got ${type}",
        "'string'",
        "'ObjectTypeExtension'",
        "'InterfaceTypeExtension'",
        "'__'",
        "'0.7.0'",
        "'https://github.com/apollostack/graphql-tools/issues/140'",
        "'schema must be an instance of GraphQLSchema. '",
        "'This error could be caused by installing more than one version of GraphQL-JS'",
        "'object'",
        "Expected connectors to be of type object, got ${connectorType}",
        "'Expected connectors to not be an empty object'",
        "'Expected connectors to be of type object, got Array'",
        "'_apolloConnectorsAttached'",
        "'Connectors already attached to context, cannot attach more than once'",
        "'_apolloConnectorsAttached'",
        "string",
        "'object'",
        "Cannot attach connector because context is not an object: ${contextType}",
        "'undefined'",
        "Connector must be a function or an class",
        "'The addResolveFunctionsToSchema function takes named options now; see IAddResolveFunctionsToSchemaOptions'",
        "'__schema'",
        "\"${typeName}\" defined in resolvers, but not in schema",
        "'__'",
        "${typeName}.${fieldName} was defined in resolvers, but enum is not in schema",
        "'value'",
        "${typeName} was defined in resolvers, but it's not an object",
        "${typeName}.${fieldName} defined in resolvers, but not in schema",
        "'function'",
        "'object'",
        "Resolver ${typeName}.${fieldName} must be object or function",
        "Type \"${type.name}\" is missing a \"resolveType\" resolver",
        "Type \"${type.name}\" is missing a \"resolveType\" resolver. Pass false into \"resolverValidationOptions.requireResolversForResolveType\" to disable this warning.",
        "'requireResolversForAllFields takes precedence over the more specific assertions. '",
        "'Please configure either requireResolversForAllFields or requireResolversForArgs / '",
        "'requireResolversForNonScalar, but not a combination of them.'",
        "string",
        "string",
        "Resolve function missing for \"${typeName}.${fieldName}\". To disable this warning check https://github.com/apollostack/graphql-tools/issues/131",
        "'function'",
        "Resolver \"${typeName}.${fieldName}\" must be a function",
        "'Must provide a logger'",
        "'function'",
        "'Logger.log must be a function'",
        "${typeName}.${fieldName}",
        "string",
        "string",
        "'undefined'",
        "'originalMessage'",
        "'message'",
        "Error in resolver ${hint}\\n${e.message}",
        "'function'",
        "'function'",
        "string",
        "${typeName}.${fieldName}",
        "string",
        "'undefined'",
        "'undefined'",
        "Resolve function for \"${hint}\" returned undefined",
        "'__runAtMostOnce'",
        "'__runAtMostOnce'",
        "'__runAtMostOnce'",
        "'__runAtMostOnce'",
        "'object'",
        "Expected directiveResolvers to be of type object, got ${typeof directiveResolvers}",
        "'Expected directiveResolvers to be of type object, got Array'"
    ],
    "variables": [
        "resolvers",
        "schema",
        "jsSchema",
        "resolvedTypeDefinitions",
        "myDefinitions",
        "typeDefinitions",
        "astDocument",
        "backcompatOptions",
        "schema",
        "extensionsAst",
        "newExtensionDefinitionKind",
        "interfaceExtensionDefinitionKind",
        "extensionDefs",
        "typeMap",
        "fields",
        "field",
        "attachConnectorsToContext",
        "connectorType",
        "attachconnectorFn",
        "contextType",
        "connector",
        "rootTypes",
        "rootResolveFn",
        "fields",
        "inputResolvers",
        "options",
        "resolverValidationOptions",
        "resolvers",
        "fields",
        "field",
        "fieldResolve",
        "typeNames",
        "extendedResolvers",
        "typeResolvers",
        "interfaceResolvers",
        "resolverValidationOptions",
        "errorHint",
        "logError",
        "newE",
        "result",
        "error",
        "errorHint",
        "result",
        "value",
        "randomNumber",
        "schemaDirectives",
        "resolver",
        "originalResolver",
        "directiveArgs",
        "source",
        "context",
        "info",
        "args"
    ],
    "comments": [
        "Generates a schema for graphql-js given a shorthand schema",
        "TODO: document each function clearly in the code: what arguments it accepts",
        "and what it outputs.",
        "TODO: we should refactor this file, rename it to makeExecutableSchema, and move",
        "a bunch of utility functions into a separate utitlities folder, one file per function.",
        "@schemaDefinition: A GraphQL type schema in shorthand",
        "@resolvers: Definitions for resolvers to be merged with schema",
        "type definitions can be a string or an array of strings.",
        "TODO: rename to allowUndefinedInResolve to be consistent",
        "TODO: check that typeDefinitions is either string or array of strings",
        "TODO a bit of a hack now, better rewrite generateSchema to attach it there.",
        "not doing that now, because I'd have to rewrite a lot of tests.",
        "connectors are optional, at least for now. That means you can just import them in the resolve",
        "function if you want.",
        "TODO: accept only array here, otherwise interfaces get confusing.",
        "TODO fix types https://github.com/apollographql/graphql-tools/issues/542",
        "TODO fix types https://github.com/apollographql/graphql-tools/issues/542",
        "TODO: maybe have an option to include these?",
        "takes a GraphQL-JS schema and an object of connectors, then attaches",
        "the connectors to the context by wrapping each query or mutation resolve",
        "function with a function that attaches connectors if they don't exist.",
        "attaches connectors only once to make sure they are singletons",
        "if in any way possible, we should throw an error when the attachconnectors",
        "function is called, not when a query is executed.",
        "wraps all resolve functions of query, mutation or subscription fields",
        "with the provided function to simulate a root schema level resolve funciton",
        "TODO test that schema is a schema, fn is a function",
        "XXX this should run at most once per request to simulate a true root resolver",
        "for graphql-js this is an approximation that works with queries but not mutations",
        "XXX if the type is a subscription, a same query AST will be ran multiple times so we",
        "deactivate here the runOnce if it's a subscription. This may not be optimal though...",
        "this is for isTypeOf and resolveType and all the other stuff.",
        "object type",
        "for convenience. Allows shorter syntax in resolver definition file",
        "If we have any union or interface types throw if no there is no resolveType or isTypeOf resolvers",
        "tslint:disable-next-line:max-line-length",
        "requires a resolve function for *every* field.",
        "requires a resolve function on every field that has arguments",
        "requires a resolve function on every field that returns a non-scalar type",
        "tslint:disable-next-line: max-line-length",
        "XXX badly named function. this doesn't really wrap, it just chains resolvers...",
        "TODO: clone the error properly",
        "istanbul ignore else: always get the hint from addErrorLoggingToSchema",
        "If the resolve function returns a Promise log any Promise rejects.",
        "make sure that it's an error we're logging.",
        "We don't want to leave an unhandled exception so pass on error.",
        "we want to pass on the error, just in case.",
        "XXX this function only works for resolvers",
        "XXX very hacky way to remember if the function",
        "already ran for this request. This will only work",
        "if people don't actually cache the operation.",
        "if they do cache the operation, they will have to",
        "manually remove the __runAtMostOnce before every request.",
        "original args"
    ],
    "docstrings": [
        "* fn: The function to decorate with the logger\n * logger: an object instance of type Logger\n * hint: an optional hint to add to the error's message"
    ],
    "functions": [
        "_generateSchema",
        "makeExecutableSchema",
        "isDocumentNode",
        "uniq",
        "concatenateTypeDefs",
        "buildSchemaFromTypeDefinitions",
        "extractExtensionDefinitions",
        "forEachField",
        "addSchemaLevelResolveFunction",
        "getFieldsForType",
        "addResolveFunctionsToSchema",
        "extendResolversFromInterfaces",
        "checkForResolveTypeResolver",
        "setFieldProperties",
        "assertResolveFunctionsPresent",
        "expectResolveFunction",
        "addErrorLoggingToSchema",
        "wrapResolver",
        "chainResolvers",
        "decorateWithLogger",
        "addCatchUndefinedToSchema",
        "decorateToCatchUndefined",
        "runAtMostOncePerRequest",
        "attachDirectiveResolvers",
        "visitFieldDefinition"
    ],
    "classes": [
        "SchemaError"
    ]
}