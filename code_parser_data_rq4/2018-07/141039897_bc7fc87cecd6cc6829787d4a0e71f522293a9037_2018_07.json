{
    "identifiers": [
        "java",
        "awt",
        "Graphics2D",
        "java",
        "awt",
        "color",
        "ColorSpace",
        "java",
        "awt",
        "image",
        "BufferedImage",
        "java",
        "awt",
        "image",
        "ColorConvertOp",
        "java",
        "io",
        "InputStream",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileInputStream",
        "javax",
        "imageio",
        "ImageIO",
        "size",
        "smallerSize",
        "initCoefficients",
        "size",
        "smallerSize",
        "size",
        "size",
        "smallerSize",
        "smallerSize",
        "initCoefficients",
        "s1",
        "s2",
        "counter",
        "k",
        "k",
        "s1",
        "length",
        "k",
        "s1",
        "charAt",
        "k",
        "s2",
        "charAt",
        "k",
        "counter",
        "counter",
        "img",
        "ImageIO",
        "read",
        "img",
        "resize",
        "img",
        "size",
        "size",
        "img",
        "grayscale",
        "img",
        "vals",
        "size",
        "size",
        "x",
        "x",
        "img",
        "getWidth",
        "x",
        "y",
        "y",
        "img",
        "getHeight",
        "y",
        "vals",
        "x",
        "y",
        "getBlue",
        "img",
        "x",
        "y",
        "start",
        "currentTimeMillis",
        "dctVals",
        "applyDCT",
        "vals",
        "currentTimeMillis",
        "start",
        "total",
        "x",
        "x",
        "smallerSize",
        "x",
        "y",
        "y",
        "smallerSize",
        "y",
        "total",
        "dctVals",
        "x",
        "y",
        "total",
        "dctVals",
        "avg",
        "total",
        "smallerSize",
        "smallerSize",
        "hash",
        "x",
        "x",
        "smallerSize",
        "x",
        "y",
        "y",
        "smallerSize",
        "y",
        "hash",
        "dctVals",
        "x",
        "y",
        "avg",
        "hash",
        "hash1",
        "hash2",
        "distance",
        "hash1",
        "hash2",
        "image",
        "width",
        "height",
        "resizedImage",
        "width",
        "height",
        "BufferedImage",
        "TYPE_INT_ARGB",
        "g",
        "resizedImage",
        "createGraphics",
        "g",
        "drawImage",
        "image",
        "width",
        "height",
        "g",
        "dispose",
        "resizedImage",
        "colorConvert",
        "ColorSpace",
        "getInstance",
        "ColorSpace",
        "CS_GRAY",
        "img",
        "colorConvert",
        "img",
        "img",
        "img",
        "img",
        "x",
        "y",
        "img",
        "getRGB",
        "x",
        "y",
        "c",
        "c",
        "size",
        "i",
        "i",
        "size",
        "i",
        "c",
        "i",
        "c",
        "sqrt",
        "f",
        "N",
        "size",
        "F",
        "N",
        "N",
        "u",
        "u",
        "N",
        "u",
        "v",
        "v",
        "N",
        "v",
        "sum",
        "i",
        "i",
        "N",
        "i",
        "j",
        "j",
        "N",
        "j",
        "sum",
        "cos",
        "i",
        "N",
        "u",
        "PI",
        "cos",
        "j",
        "N",
        "v",
        "PI",
        "f",
        "i",
        "j",
        "sum",
        "c",
        "u",
        "c",
        "v",
        "F",
        "u",
        "v",
        "sum",
        "F",
        "args",
        "f1",
        "fis1",
        "f1",
        "hash1",
        "getHash",
        "fis1",
        "f2",
        "fis2",
        "f2",
        "hash2",
        "getHash",
        "fis2",
        "ImagePHash",
        "similarity",
        "hash1",
        "hash2"
    ],
    "literals": [
        "\"DCT: \"",
        "\"\"",
        "\"1\"",
        "\"0\"",
        "\"D:/Python3/projects/compare_files/File1.jpg\"",
        "\"D:/Python3/projects/compare_files/File3.jpg\""
    ],
    "variables": [
        "c"
    ],
    "comments": [
        "Returns a 'binary string' (like. 001010111011100010) which is easy to do a hamming distance on.",
        "if (x != 0 && y != 0) {",
        "}",
        "DCT function stolen from http://stackoverflow.com/questions/4240490/problems-with-dct-and-idct-algorithm-in-java"
    ],
    "docstrings": [
        "* pHash-like image hash. \n * Author: Elliot Shepherd (elliot@jarofworms.com\n * Based On: http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html",
        "1. Reduce size. \n     * Like Average Hash, pHash starts with a small image. \n     * However, the image is larger than 8x8; 32x32 is a good size. \n     * This is really done to simplify the DCT computation and not \n     * because it is needed to reduce the high frequencies.",
        "2. Reduce color. \n     * The image is reduced to a grayscale just to further simplify \n     * the number of computations.",
        "3. Compute the DCT. \n     * The DCT separates the image into a collection of frequencies \n     * and scalars. While JPEG uses an 8x8 DCT, this algorithm uses \n     * a 32x32 DCT.",
        "4. Reduce the DCT. \n     * This is the magic step. While the DCT is 32x32, just keep the \n     * top-left 8x8. Those represent the lowest frequencies in the \n     * picture.",
        "5. Compute the average value. \n     * Like the Average Hash, compute the mean DCT value (using only \n     * the 8x8 DCT low-frequency values and excluding the first term \n     * since the DC coefficient can be significantly different from \n     * the other values and will throw off the average).",
        "6. Further reduce the DCT. \n     * This is the magic step. Set the 64 hash bits to 0 or 1 \n     * depending on whether each of the 64 DCT values is above or \n     * below the average value. The result doesn't tell us the \n     * actual low frequencies; it just tells us the very-rough \n     * relative scale of the frequencies to the mean. The result \n     * will not vary as long as the overall structure of the image \n     * remains the same; this can survive gamma and color histogram \n     * adjustments without a problem."
    ],
    "functions": [
        "ImagePHash",
        "ImagePHash",
        "distance",
        "getHash",
        "similarity",
        "BufferedImage",
        "resize",
        "BufferedImage",
        "grayscale",
        "getBlue",
        "initCoefficients",
        "applyDCT",
        "main"
    ],
    "classes": [
        "ImagePHash"
    ]
}