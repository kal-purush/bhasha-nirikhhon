{
    "identifiers": [
        "itertools",
        "json",
        "typing",
        "Dict",
        "INTEGER",
        "STRING",
        "INTEGER",
        "NUMBER",
        "BOOLEAN",
        "NULL",
        "schema",
        "build_schedule_from_schema",
        "schema",
        "step",
        "schedule",
        "regex",
        "match_step_to_regex",
        "step",
        "regex",
        "schema",
        "json",
        "loads",
        "schema",
        "schema",
        "definition",
        "annotation",
        "schema",
        "items",
        "definition",
        "annotation",
        "expand_json_schema",
        "schema",
        "definitions",
        "build_schedule_from_instance",
        "schema",
        "x",
        "cls",
        "grp",
        "itertools",
        "groupby",
        "schedule",
        "x",
        "join",
        "grp",
        "cls",
        "grp",
        "reduced_schedule",
        "raw_schema",
        "Dict",
        "definitions",
        "Dict",
        "raw_schema",
        "name",
        "value",
        "raw_schema",
        "items",
        "value",
        "expand_json_schema",
        "definitions",
        "value",
        "definitions",
        "value",
        "value",
        "value",
        "value",
        "expanded_properties",
        "name",
        "expand_json_schema",
        "definitions",
        "value",
        "definitions",
        "expanded_properties",
        "name",
        "value",
        "value",
        "raw_schema",
        "raw_schema",
        "expanded_properties",
        "raw_schema",
        "instance",
        "Dict",
        "indent",
        "instance",
        "schedule",
        "append",
        "schedule",
        "build_schedule_from_instance",
        "instance",
        "indent",
        "indent",
        "schedule",
        "append",
        "indent",
        "schedule",
        "append",
        "i",
        "name",
        "annotation",
        "instance",
        "items",
        "schedule",
        "append",
        "indent",
        "schedule",
        "append",
        "name",
        "annotation",
        "schedule",
        "append",
        "annotation",
        "annotation",
        "schedule",
        "build_schedule_from_instance",
        "annotation",
        "indent",
        "schedule",
        "append",
        "annotation",
        "i",
        "len",
        "instance",
        "schedule",
        "append",
        "schedule",
        "append",
        "schedule",
        "step",
        "step",
        "step",
        "step",
        "choices",
        "choice",
        "choice",
        "choices",
        "join",
        "choices",
        "choices",
        "choice",
        "choice",
        "choices",
        "join",
        "choices",
        "items",
        "match_step_to_regex",
        "items",
        "item_regexes",
        "item_regexes",
        "build_schedule_from_schema",
        "json",
        "dumps",
        "step",
        "steps",
        "regex_str",
        "match_step_to_regex",
        "step",
        "regex_str",
        "max_length",
        "max_length",
        "min_length",
        "min_length",
        "field_type",
        "type_to_regex",
        "field_type",
        "choices",
        "match_step_to_regex",
        "choice",
        "choice",
        "choices",
        "join",
        "regexes",
        "NotImplementedError"
    ],
    "literals": [
        "r'\".*\"'",
        "r\"(0|[1-9][0-9]*)\"",
        "rf\"(-)?({INTEGER})(\\.[0-9]+)?([eE][+-][0-9]+)?\"",
        "r\"(true|false)\"",
        "r\"null\"",
        "\"string\"",
        "\"integer\"",
        "\"number\"",
        "\"boolean\"",
        "\"null\"",
        "\"\"",
        "\"$defs\"",
        "\"$defs\"",
        "f\"#/$defs/{definition}\"",
        "\"\"",
        "\"properties\"",
        "\"properties\"",
        "\"$ref\"",
        "\"$ref\"",
        "\"type\"",
        "\"type\"",
        "\"array\"",
        "\"$ref\"",
        "\"items\"",
        "\"items\"",
        "\"items\"",
        "\"$ref\"",
        "\"items\"",
        "\"items\"",
        "\"title\"",
        "\"title\"",
        "\"type\"",
        "\"type\"",
        "\"properties\"",
        "\"properties\"",
        "\"{\\n\"",
        "\"properties\"",
        "\" \"",
        "\"}\"",
        "\" \"",
        "f'\"{name}\": '",
        "\"anyOf\"",
        "\"type\"",
        "\"object\"",
        "\"\\n\"",
        "\",\\n\"",
        "\"enum\"",
        "\"type\"",
        "\"string\"",
        "f'\"{choice}\"'",
        "f\"({'|'.join(choices)})\"",
        "'|'",
        "\"enum\"",
        "f\"({'|'.join(choices)})\"",
        "'|'",
        "\"type\"",
        "\"array\"",
        "\"items\"",
        "rf\"\\[({item_regexes})(,({item_regexes}))*\\]\"",
        "\"type\"",
        "\"object\"",
        "\"\"",
        "\"type\"",
        "\"string\"",
        "\"maxLength\"",
        "f'\".{{,{max_length}}}\"'",
        "\"type\"",
        "\"string\"",
        "\"minLength\"",
        "f'\".{{{min_length},}}\"'",
        "\"type\"",
        "\"anyOf\"",
        "rf\"({'|'.join(regexes)})\"",
        "'|'"
    ],
    "variables": [
        "STRING",
        "INTEGER",
        "NUMBER",
        "BOOLEAN",
        "NULL",
        "type_to_regex",
        "schedule",
        "regex",
        "schema",
        "definitions",
        "definitions",
        "schema",
        "schedule",
        "reduced_schedule",
        "expanded_properties",
        "expanded_properties",
        "name",
        "expanded_properties",
        "name",
        "expanded_properties",
        "name",
        "schedule",
        "choices",
        "choices",
        "item_regexes",
        "steps",
        "regex_str",
        "regexes"
    ],
    "comments": [
        "Find object definitions in the schema, if any",
        "Concatenate adjacent strings",
        "if item is a single element",
        "if item is a list",
        "We cannot add commas after the last key-value pair in JSON"
    ],
    "docstrings": [
        "\"\"\"Turn a JSON schema into a regex that matches any JSON object that follows\n    this schema.\n\n    Parameters\n    ----------\n    schema\n        A string that contains the JSON schema.\n\n    Returns\n    -------\n    A string that contains a regular expression that matches any JSON object that\n    follows the schema.\n\n    \"\"\"",
        "\"\"\"Turn a JSON schema into a regex that matches any JSON object that follows\n    this schema.\n\n    JSON Schema is a declarative language that allows to annotate JSON documents\n    with types and descriptions. These schemas can be generated from any Python\n    datastructure that has type annotation: namedtuples, dataclasses, Pydantic\n    models. And by ensuring that the generation respects the schema we ensure\n    that the output can be parsed into these objects.\n    This function parses the provided schema and builds a generation schedule which\n    mixes deterministic generation (fixed strings), and sampling with constraints.\n\n    Parameters\n    ----------\n    schema\n        A string that represents a JSON Schema.\n\n    Returns\n    -------\n    A generation schedule. A list of strings that represent the JSON\n    schema's structure and regular expression that define the structure of\n    the fields.\n\n    References\n    ----------\n    .. [0] JSON Schema. https://json-schema.org/\n\n    \"\"\"",
        "\"\"\"Replace references by their value in the JSON Schema.\n\n    This recursively follows the references to other schemas in case\n    of nested models. Other schemas are stored under the \"definitions\"\n    key in the schema of the top-level model.\n\n    Parameters\n    ---------\n    raw_schema\n        The raw JSON schema as a Python dictionary, possibly with definitions\n        and references.\n    definitions\n        The currently known definitions.\n\n    Returns\n    -------\n    A dictionary that represents the flattened equivalent of the input\n    JSON schema.\n\n    \"\"\"",
        "\"\"\"Build a generation schedule from a instance.\n\n    This recursively follows the references to other instances.\n\n    Parameters\n    ----------\n    instance\n        An instance, can be the JSON schema itself.\n    indent\n        The current indentation level\n\n    Returns\n    -------\n    A generation schedule for the instance, a list of strings that represent\n    the structure of the JSON schema and dictionaries that contain the\n    instance definition.\n\n    \"\"\"",
        "\"\"\"Translate an element of a JSON schema to a regex that defines its content.\n\n    Parameters\n    ----------\n    step:\n        A string that represents the schema's structure, or a dictionnary\n        that represents a field in the schema.\n\n    Returns\n    -------\n    A string that represents a regular expression that defines the value of the\n    schedule's step.\n\n    \"\"\""
    ],
    "functions": [
        "build_regex_from_schema",
        "build_schedule_from_schema",
        "expand_json_schema",
        "build_schedule_from_instance",
        "match_step_to_regex"
    ],
    "classes": []
}