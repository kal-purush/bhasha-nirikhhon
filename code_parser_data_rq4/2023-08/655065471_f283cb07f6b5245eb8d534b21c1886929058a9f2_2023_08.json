{
    "identifiers": [
        "sklearn",
        "BaseEstimator",
        "TransformerMixin",
        "BaseEstimator",
        "TransformerMixin",
        "add_bedrooms_per_room",
        "add_bedrooms_per_room",
        "X",
        "y",
        "X",
        "y",
        "X",
        "rooms_ix",
        "X",
        "household_ix",
        "X",
        "population_ix",
        "X",
        "household_ix",
        "add_bedrooms_per_room",
        "X",
        "bedrooms_ix",
        "X",
        "rooms_ix",
        "np",
        "c_",
        "X",
        "rooms_per_household",
        "population_per_household",
        "bedrooms_per_room",
        "np",
        "c_",
        "X",
        "rooms_per_household",
        "population_per_household",
        "CombinedAttributesAdder",
        "add_bedrooms_per_room",
        "attr_adder",
        "transform",
        "housing",
        "values"
    ],
    "literals": [],
    "variables": [
        "rooms_ix",
        "bedrooms_ix",
        "population_ix",
        "household_ix",
        "add_bedrooms_per_room",
        "rooms_per_household",
        "population_per_household",
        "bedrooms_per_room",
        "attr_adder",
        "housing_extra_attribs"
    ],
    "comments": [
        "no *args or **kwargs",
        "nothing else to do",
        "64 | Chapter 2: End-to-End Machine Learning Project",
        "Hands-On Machine Learning with Scikit-Learn and TensorFlow"
    ],
    "docstrings": [
        "\"\"\"\nAlthough Scikit-Learn provides many useful transformers, you will need to write your own for tasks such as custom cleanup operations or combining specific\nattributes. You will want your transformer to work seamlessly with Scikit-Learn functionalities (such as pipelines), and since Scikit-Learn relies on duck \ntyping (not inheritance), all you need is to create a class and implement three methods: fit() (returning self), transform(), and fit_transform(). You can \nget the last one for free by simply adding TransformerMixin as a base class. Also, if you add BaseEstimator as a base class (and avoid *args and **kargs in \nyour constructor) you will get two extra methods (get_params() and set_params()) that will be useful for automatic hyperparameter tuning. For example, here \nis a small transformer class that adds the combined attributes we discussed earlier:\n\"\"\"",
        "\"\"\"\nIn this example, the transformer has one hyperparameter, add_bedrooms_per_room, set to True by default (it is often helpful to provide sensible defaults). \nThis hyperparameter will allow you to easily find out whether adding this attribute helps the Machine Learning algorithms or not. More generally, you can \nadd a hyperparameter to gate any data preparation step that you are not 100% sure about. The more you automate these data preparation steps, the more \ncombinations you can automatically try out, making it much more likely that you will find a great combination (and saving you a lot of time).\n\"\"\""
    ],
    "functions": [
        "fit",
        "transform"
    ],
    "classes": [
        "CombinedAttributesAdder"
    ]
}