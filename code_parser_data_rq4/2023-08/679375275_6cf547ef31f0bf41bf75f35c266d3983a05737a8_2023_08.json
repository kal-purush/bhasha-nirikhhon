{
    "identifiers": [
        "ACTIONS",
        "all",
        "msactions",
        "ACTIONS",
        "Imsactions",
        "T",
        "jsonObj",
        "Microsoft",
        "AspNetCore",
        "Http",
        "IFormFile",
        "oldfilePath",
        "root",
        "Microsoft",
        "AspNetCore",
        "Http",
        "IFormFile",
        "oldfilePath",
        "root",
        "num",
        "text",
        "email",
        "text",
        "urlstring",
        "urlstring",
        "all",
        "msactions",
        "ControllerResponses",
        "all",
        "msactions",
        "Token",
        "emailOrusername",
        "whatIsBeingEncrypted",
        "whatIsBeingEncrypted",
        "emailOrusername",
        "whatIsBeingDecrypted",
        "whatIsBeingDecrypted",
        "plainText",
        "base64EncodedData",
        "text",
        "Microsoft",
        "AspNetCore",
        "Http",
        "HttpContext",
        "httpContext",
        "text",
        "Microsoft",
        "AspNetCore",
        "Http",
        "IFormFile",
        "oldfilePath",
        "root",
        "Microsoft",
        "AspNetCore",
        "Http",
        "IFormFile",
        "file",
        "FolderName",
        "rootPath",
        "encodedImageName",
        "Microsoft",
        "AspNetCore",
        "Http",
        "IFormFile",
        "file",
        "rootPath",
        "encodedImageName",
        "Microsoft",
        "AspNetCore",
        "Http",
        "IFormFile",
        "file",
        "rootPath",
        "encodedImageName",
        "Microsoft",
        "AspNetCore",
        "Http",
        "IFormFile",
        "file",
        "rootPath",
        "encodedImageName",
        "ConvType",
        "T",
        "Type",
        "t",
        "o",
        "ConvType",
        "T",
        "C",
        "Type",
        "t",
        "o"
    ],
    "literals": [],
    "variables": [
        "NullObjectExceptionFindingWriter",
        "NullObjWriter"
    ],
    "comments": [
        "using MS.MODELS;",
        "using System.Text;",
        "using MS.MODELS.v2;",
        "using MS.REPO.ACTIONS;",
        "using MODELS;",
        "Gets a Form File from a specified path v3",
        "</summary>",
        "<param name=\"oldfilePath\"></param>",
        "<param name=\"root\"></param>",
        "<returns></returns>",
        "Gets a Form File from a specified path",
        "</summary>",
        "<param name=\"oldfilePath\"></param>",
        "<param name=\"root\"></param>",
        "<returns></returns>",
        "Waits asyncronously",
        "</summary>",
        "<param name=\"num\"></param>",
        "<returns></returns>",
        "Decrypts a text coming from the client",
        "</summary>",
        "<param name=\"text\"></param>",
        "<returns></returns>",
        "Checks is an email is valid or not",
        "</summary>",
        "<param name=\"email\"></param>",
        "<returns></returns>",
        "Converts a text to a list of strings where there are spaces",
        "</summary>",
        "<param name=\"text\"></param>",
        "<returns></returns>",
        "Encode a url string",
        "</summary>",
        "<param name=\"urlstring\"></param>",
        "<returns></returns>",
        "Decode a url string",
        "</summary>",
        "<param name=\"urlstring\"></param>",
        "<returns></returns>",
        "Convert integer to a Status Type Enum",
        "</summary>",
        "<param name=\"membership\"></param>",
        "<param name=\"statuses\"></param>",
        "<returns></returns>",
        "object CONVERT_INT_TO_ENUM_STATUS(int membership, dynamic statuses);",
        "Gets the Controller Responses",
        "</summary>",
        "<returns></returns>",
        "Gets a ms Token Instance",
        "</summary>",
        "<returns></returns>",
        "Encrypt by specified key",
        "</summary>",
        "<param name=\"emailOrusername\"></param>",
        "<param name=\"whatIsBeingEncrypted\"></param>",
        "<returns></returns>",
        "Encrypt generically",
        "</summary>",
        "<param name=\"whatIsBeingEncrypted\"></param>",
        "<returns></returns>",
        "Decrypt by specified key",
        "</summary>",
        "<param name=\"emailOrusername\"></param>",
        "<param name=\"whatIsBeingDecrypted\"></param>",
        "<returns></returns>",
        "Decrypt generically",
        "</summary>",
        "<param name=\"whatIsBeingDecrypted\"></param>",
        "<returns></returns>",
        "Encrypts the string",
        "</summary>",
        "<param name=\"plainText\"></param>",
        "<returns></returns>",
        "Decrypts the string",
        "</summary>",
        "<param name=\"base64EncodedData\"></param>",
        "<returns></returns>",
        "Encryption using Rsa Algorithm",
        "</summary>",
        "<param name=\"text\"></param>",
        "<returns></returns>",
        "Decryption using Rsa Algorithm. returns default guid if text null",
        "</summary>",
        "<param name=\"text\"></param>",
        "<returns></returns>",
        "Encryption using Rsa Algorithm v3",
        "</summary>",
        "<param name=\"text\"></param>",
        "<returns></returns>",
        "string v3_Encrypt(string text);",
        "Decryption using Rsa Algorithm v3",
        "</summary>",
        "<param name=\"text\"></param>",
        "<returns></returns>",
        "string v3_Decrypt(string text);",
        "Binary Search to Find business from a List by name",
        "</summary>",
        "<param name=\"businesses\"></param>",
        "<param name=\"name\"></param>",
        "<param name=\"timer\"></param>",
        "<returns></returns>",
        "List<MODELS.IBusiness> FindBusiness_in_ListOfObjects(List<MODELS.IBusiness> businesses, string name, System.Diagnostics.Stopwatch timer);",
        "Binary Search to Find business from a List by business number",
        "</summary>",
        "<param name=\"businesses\"></param>",
        "<param name=\"id\"></param>",
        "<param name=\"timer\"></param>",
        "<returns></returns>",
        "List<MODELS.IBusiness> FindBusiness_in_ListOfObjects(List<MODELS.IBusiness> businesses, int id, System.Diagnostics.Stopwatch timer);",
        "Sorts a list of Businesses",
        "</summary>",
        "<param name=\"bs\"></param>",
        "<returns></returns>",
        "List<MODELS.IBusiness> SortBusinesses(List<MODELS.IBusiness> bs);",
        "This converts a List of IBusiness to a List of Object[]",
        "</summary>",
        "<param name=\"l\"></param>",
        "<returns></returns>",
        "List<object[]> ConvertList_of_Type_to_object(List<IBusiness> l);",
        "Gets the image from the file path",
        "</summary>",
        "<param name=\"oldfilePath\"></param>",
        "<returns></returns>",
        "This saves an image based from a specified folder name",
        "</summary>",
        "<param name=\"file\"></param>",
        "<param name=\"FolderName\"></param>",
        "<param name=\"rootPath\"></param>",
        "<param name=\"encodedImageName\"></param>",
        "<returns></returns>",
        "This saves the business image in Year , Month format",
        "</summary>",
        "<param name=\"file\"></param>",
        "<param name=\"rootPath\"></param>",
        "<param name=\"encodedImageName\"></param>",
        "This saves the Service image in Year , Month format",
        "</summary>",
        "<param name=\"file\"></param>",
        "<param name=\"rootPath\"></param>",
        "<param name=\"encodedImageName\"></param>",
        "<returns></returns>",
        "This saves the Product image in Year , Month format",
        "</summary>",
        "<param name=\"file\"></param>",
        "<param name=\"rootPath\"></param>",
        "<param name=\"encodedImageName\"></param>",
        "<returns></returns>",
        "This converts the type and gets the objects emitted by its methods",
        "</summary>",
        "<param name=\"t\"></param>",
        "<returns></returns>",
        "Converts a type and gets the name and method objects into a dictionary",
        "</summary>",
        "<param name=\"t\"></param>",
        "<param name=\"o\"></param>",
        "<typeparam name=\"T\"></typeparam>",
        "<typeparam name=\"C\"></typeparam>",
        "<returns></returns>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "break_",
        "T",
        "ConvertJsonObj",
        "GetImage3",
        "GetImage2",
        "WaitTask",
        "DecryptFromClient",
        "IsValidEmail",
        "GetKeyWords",
        "UrlEncode",
        "UrlDecode",
        "GetControllerResponses",
        "GetToken",
        "Encrypt",
        "Encrypt",
        "Dencrypt",
        "Dencrypt",
        "Base64Encode",
        "Base64Decode",
        "v2_Encrypt",
        "GetClientIpAddress",
        "v2_Decrypt",
        "GetImage",
        "SaveImage",
        "SaveBusinessImage",
        "SaveServiceImage",
        "SaveProductImage",
        "GetConvType",
        "GetConvType"
    ],
    "classes": []
}