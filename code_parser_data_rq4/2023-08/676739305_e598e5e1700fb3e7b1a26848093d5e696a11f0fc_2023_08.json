{
    "identifiers": [
        "Collections",
        "Generic",
        "Data",
        "Linq",
        "NUnit",
        "Framework",
        "SqlocityNetCore",
        "Tests",
        "MySql",
        "DatabaseCommandExtensionsTests",
        "TestFixture",
        "Test",
        "Sqlocity",
        "GetDatabaseCommand",
        "ConnectionStringsNames",
        "MySqlConnectionString",
        "SetCommandText",
        "sql",
        "ExecuteReaderAsync",
        "SuperHeroId",
        "record",
        "GetValue",
        "SuperHeroName",
        "record",
        "GetValue",
        "Add",
        "obj",
        "Assert",
        "That",
        "Count",
        "Test",
        "Sqlocity",
        "GetDatabaseCommand",
        "ConnectionStringsNames",
        "MySqlConnectionString",
        "SetCommandText",
        "sql",
        "databaseCommand",
        "ExecuteReaderAsync",
        "SuperHeroId",
        "record",
        "GetValue",
        "SuperHeroName",
        "record",
        "GetValue",
        "Add",
        "obj",
        "Assert",
        "IsNull",
        "databaseCommand",
        "DbCommand",
        "Test",
        "Sqlocity",
        "GetDatabaseCommand",
        "ConnectionStringsNames",
        "MySqlConnectionString",
        "SetCommandText",
        "sql",
        "databaseCommand",
        "ExecuteReaderAsync",
        "SuperHeroId",
        "record",
        "GetValue",
        "SuperHeroName",
        "record",
        "GetValue",
        "Add",
        "obj",
        "Assert",
        "That",
        "databaseCommand",
        "DbCommand",
        "Connection",
        "State",
        "ConnectionState",
        "Open",
        "databaseCommand",
        "Dispose",
        "Test",
        "Sqlocity",
        "ConfigurationSettings",
        "EventHandlers",
        "DatabaseCommandPreExecuteEventHandlers",
        "Add",
        "wasPreExecuteEventHandlerCalled",
        "Sqlocity",
        "GetDatabaseCommand",
        "ConnectionStringsNames",
        "MySqlConnectionString",
        "SetCommandText",
        "ExecuteReaderAsync",
        "Assert",
        "IsTrue",
        "wasPreExecuteEventHandlerCalled",
        "Test",
        "Sqlocity",
        "ConfigurationSettings",
        "EventHandlers",
        "DatabaseCommandPostExecuteEventHandlers",
        "Add",
        "wasPostExecuteEventHandlerCalled",
        "Sqlocity",
        "GetDatabaseCommand",
        "ConnectionStringsNames",
        "MySqlConnectionString",
        "SetCommandText",
        "ExecuteReaderAsync",
        "Assert",
        "IsTrue",
        "wasPostExecuteEventHandlerCalled",
        "Test",
        "Sqlocity",
        "ConfigurationSettings",
        "EventHandlers",
        "DatabaseCommandUnhandledExceptionEventHandlers",
        "Add",
        "exception",
        "command",
        "wasUnhandledExceptionEventHandlerCalled",
        "Sqlocity",
        "GetDatabaseCommand",
        "ConnectionStringsNames",
        "MySqlConnectionString",
        "SetCommandText",
        "ExecuteReaderAsync",
        "Assert",
        "Throws",
        "MySql",
        "Data",
        "MySqlClient",
        "MySqlException",
        "action",
        "Assert",
        "IsTrue",
        "wasUnhandledExceptionEventHandlerCalled",
        "TestFixture"
    ],
    "literals": [
        "\"SELECT 1\"",
        "\"SELECT 1\"",
        "\"asdf;lkj\""
    ],
    "variables": [
        "sql",
        "obj",
        "sql",
        "databaseCommand",
        "obj",
        "sql",
        "databaseCommand",
        "obj",
        "wasPreExecuteEventHandlerCalled",
        "wasPostExecuteEventHandlerCalled",
        "wasUnhandledExceptionEventHandlerCalled",
        "TestDelegate",
        "action"
    ],
    "comments": [
        "Arrange",
        "Act",
        "Assert",
        "Arrange",
        "Act",
        "Assert",
        "Arrange",
        "Act",
        "Assert",
        "Cleanup",
        "Arrange",
        "Act",
        "Assert",
        "Arrange",
        "Act",
        "Assert",
        "Arrange",
        "Act",
        "Assert",
        "[Test]",
        "public async void Should_Call_The_DataRecordCall_Func_For_Each_Record_In_The_Result_Set()",
        "{",
        "// Arrange",
        "const string sql = @\"",
        "DROP TEMPORARY TABLE IF EXISTS SuperHero;",
        "CREATE TEMPORARY TABLE SuperHero",
        "(",
        "SuperHeroId     INT             NOT NULL    AUTO_INCREMENT,",
        "SuperHeroName\tVARCHAR(120)    NOT NULL,",
        "PRIMARY KEY ( SuperHeroId )",
        ");",
        "INSERT INTO SuperHero ( SuperHeroName )",
        "VALUES ( 'Superman' );",
        "INSERT INTO SuperHero ( SuperHeroName )",
        "VALUES ( 'Batman' );",
        "SELECT  SuperHeroId,",
        "SuperHeroName",
        "FROM    SuperHero;",
        "\";",
        "List<object> list;",
        "// Act",
        "list = Sqlocity.GetDatabaseCommand( ConnectionStringsNames.MySqlConnectionString )",
        ".SetCommandText( sql )",
        ".ExecuteReader<object>( record => new",
        "{",
        "SuperHeroId = record.GetValue( 0 ),",
        "SuperHeroName = record.GetValue( 1 )",
        "} )",
        ".ToList();",
        "// Assert",
        "Assert.That( list.Count == 2 );",
        "}",
        "[Test]",
        "public async void Should_Null_The_DbCommand_By_Default()",
        "{",
        "// Arrange",
        "const string sql = @\"",
        "DROP TEMPORARY TABLE IF EXISTS SuperHero;",
        "CREATE TEMPORARY TABLE SuperHero",
        "(",
        "SuperHeroId     INT             NOT NULL    AUTO_INCREMENT,",
        "SuperHeroName\tVARCHAR(120)    NOT NULL,",
        "PRIMARY KEY ( SuperHeroId )",
        ");",
        "INSERT INTO SuperHero ( SuperHeroName )",
        "VALUES ( 'Superman' );",
        "INSERT INTO SuperHero ( SuperHeroName )",
        "VALUES ( 'Batman' );",
        "SELECT  SuperHeroId,",
        "SuperHeroName",
        "FROM    SuperHero;",
        "\";",
        "var databaseCommand = Sqlocity.GetDatabaseCommand( ConnectionStringsNames.MySqlConnectionString )",
        ".SetCommandText( sql );",
        "List<object> list;",
        "// Act",
        "list = databaseCommand",
        ".ExecuteReader<object>( record => new",
        "{",
        "SuperHeroId = record.GetValue( 0 ),",
        "SuperHeroName = record.GetValue( 1 )",
        "} )",
        ".ToList();",
        "// Assert",
        "Assert.IsNull( databaseCommand.DbCommand );",
        "}",
        "[Test]",
        "public async void Should_Keep_The_Database_Connection_Open_If_keepConnectionOpen_Parameter_Was_True()",
        "{",
        "// Arrange",
        "const string sql = @\"",
        "DROP TEMPORARY TABLE IF EXISTS SuperHero;",
        "CREATE TEMPORARY TABLE SuperHero",
        "(",
        "SuperHeroId     INT             NOT NULL    AUTO_INCREMENT,",
        "SuperHeroName\tVARCHAR(120)    NOT NULL,",
        "PRIMARY KEY ( SuperHeroId )",
        ");",
        "INSERT INTO SuperHero ( SuperHeroName )",
        "VALUES ( 'Superman' );",
        "INSERT INTO SuperHero ( SuperHeroName )",
        "VALUES ( 'Batman' );",
        "SELECT  SuperHeroId,",
        "SuperHeroName",
        "FROM    SuperHero;",
        "\";",
        "var databaseCommand = Sqlocity.GetDatabaseCommand( ConnectionStringsNames.MySqlConnectionString )",
        ".SetCommandText( sql );",
        "List<object> list;",
        "// Act",
        "list = databaseCommand",
        ".ExecuteReader<object>( record => new",
        "{",
        "SuperHeroId = record.GetValue( 0 ),",
        "SuperHeroName = record.GetValue( 1 )",
        "}, true )",
        ".ToList();",
        "// Assert",
        "Assert.That( databaseCommand.DbCommand.Connection.State == ConnectionState.Open );",
        "// Cleanup",
        "databaseCommand.Dispose();",
        "}",
        "[Test]",
        "public async void Should_Call_The_DatabaseCommandPreExecuteEventHandler()",
        "{",
        "// Arrange",
        "bool wasPreExecuteEventHandlerCalled = false;",
        "Sqlocity.ConfigurationSettings.EventHandlers.DatabaseCommandPreExecuteEventHandlers.Add( command => wasPreExecuteEventHandlerCalled = true );",
        "// Act",
        "Sqlocity.GetDatabaseCommand( ConnectionStringsNames.MySqlConnectionString )",
        ".SetCommandText( \"SELECT 1\" )",
        ".ExecuteReader<object>( record => new { } )",
        ".ToList();",
        "// Assert",
        "Assert.IsTrue( wasPreExecuteEventHandlerCalled );",
        "}",
        "[Test]",
        "public async void Should_Call_The_DatabaseCommandPostExecuteEventHandler()",
        "{",
        "// Arrange",
        "bool wasPostExecuteEventHandlerCalled = false;",
        "Sqlocity.ConfigurationSettings.EventHandlers.DatabaseCommandPostExecuteEventHandlers.Add( command => wasPostExecuteEventHandlerCalled = true );",
        "// Act",
        "Sqlocity.GetDatabaseCommand( ConnectionStringsNames.MySqlConnectionString )",
        ".SetCommandText( \"SELECT 1\" )",
        ".ExecuteReader<object>( record => new { } )",
        ".ToList();",
        "// Assert",
        "Assert.IsTrue( wasPostExecuteEventHandlerCalled );",
        "}",
        "[Test]",
        "public async void Should_Call_The_DatabaseCommandUnhandledExceptionEventHandler()",
        "{",
        "// Arrange",
        "bool wasUnhandledExceptionEventHandlerCalled = false;",
        "Sqlocity.ConfigurationSettings.EventHandlers.DatabaseCommandUnhandledExceptionEventHandlers.Add( ( exception, command ) =>",
        "{",
        "wasUnhandledExceptionEventHandlerCalled = true;",
        "} );",
        "// Act",
        "TestDelegate action = () => Sqlocity.GetDatabaseCommand( ConnectionStringsNames.MySqlConnectionString )",
        ".SetCommandText( \"asdf;lkj\" )",
        ".ExecuteReader<object>( record => new { } )",
        ".ToList();",
        "// Assert",
        "Assert.Throws<global::MySql.Data.MySqlClient.MySqlException>( action );",
        "Assert.IsTrue( wasUnhandledExceptionEventHandlerCalled );",
        "}",
        "[Test]",
        "public async void Should_Null_The_DbCommand_If_Iteration_Ends_Before_Full_Enumeration()",
        "{",
        "// Arrange",
        "const string sql = @\"",
        "DROP TEMPORARY TABLE IF EXISTS SuperHero;",
        "CREATE TEMPORARY TABLE SuperHero",
        "(",
        "SuperHeroId     INT             NOT NULL    AUTO_INCREMENT,",
        "SuperHeroName\tVARCHAR(120)    NOT NULL,",
        "PRIMARY KEY ( SuperHeroId )",
        ");",
        "INSERT INTO SuperHero ( SuperHeroName )",
        "VALUES ( 'Superman' );",
        "INSERT INTO SuperHero ( SuperHeroName )",
        "VALUES ( 'Batman' );",
        "SELECT  SuperHeroId,",
        "SuperHeroName",
        "FROM    SuperHero;",
        "\";",
        "var databaseCommand = Sqlocity.GetDatabaseCommand( ConnectionStringsNames.MySqlConnectionString )",
        ".SetCommandText( sql );",
        "// Act",
        "databaseCommand",
        ".ExecuteReader( record => new",
        "{",
        "SuperHeroId = record.GetValue( 0 ),",
        "SuperHeroName = record.GetValue( 1 )",
        "} )",
        ".First();",
        "// Assert",
        "Assert.IsNull( databaseCommand.DbCommand );",
        "}",
        "[Test]",
        "public async void Should_Null_The_DbCommand_If_Exception_Occurs_During_Iteration()",
        "{",
        "// Arrange",
        "const string sql = @\"",
        "DROP TEMPORARY TABLE IF EXISTS SuperHero;",
        "CREATE TEMPORARY TABLE SuperHero",
        "(",
        "SuperHeroId     INT             NOT NULL    AUTO_INCREMENT,",
        "SuperHeroName\tVARCHAR(120)    NOT NULL,",
        "PRIMARY KEY ( SuperHeroId )",
        ");",
        "INSERT INTO SuperHero ( SuperHeroName )",
        "VALUES ( 'Superman' );",
        "INSERT INTO SuperHero ( SuperHeroName )",
        "VALUES ( 'Batman' );",
        "SELECT  SuperHeroId,",
        "SuperHeroName",
        "FROM    SuperHero;",
        "\";",
        "var databaseCommand = Sqlocity.GetDatabaseCommand( ConnectionStringsNames.MySqlConnectionString )",
        ".SetCommandText( sql );",
        "var iter = databaseCommand.ExecuteReader( record => new",
        "{",
        "SuperHeroId = record.GetValue( 0 ),",
        "SuperHeroName = record.GetValue( 1 )",
        "} );",
        "// Act",
        "try",
        "{",
        "foreach ( var item in iter )",
        "{",
        "throw new Exception( \"Exception occured during iteration.\" );",
        "}",
        "}",
        "catch { }",
        "// Assert",
        "Assert.IsNull( databaseCommand.DbCommand );",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "Should_Call_The_DataRecordCall_Action_For_Each_Record_In_The_Result_Set",
        "Should_Null_The_DbCommand_By_Default",
        "Should_Keep_The_Database_Connection_Open_If_keepConnectionOpen_Parameter_Was_True",
        "Should_Call_The_DatabaseCommandPreExecuteEventHandler",
        "Should_Call_The_DatabaseCommandPostExecuteEventHandler",
        "Should_Call_The_DatabaseCommandUnhandledExceptionEventHandler"
    ],
    "classes": [
        "ExecuteReaderTests",
        "ExecuteReader_Of_Type_T_Tests"
    ]
}