{
    "identifiers": [
        "scapy",
        "all",
        "sniff",
        "IP",
        "ICMP",
        "time",
        "json",
        "packet",
        "packet_count",
        "packet_queue",
        "packet",
        "haslayer",
        "ICMP",
        "packet",
        "ICMP",
        "icmp_packet",
        "packet_count",
        "packet_queue",
        "append",
        "time",
        "time",
        "time",
        "time",
        "ts",
        "ts",
        "packet_queue",
        "current_time",
        "ts",
        "len",
        "packet_queue",
        "rate_limit",
        "packet_count",
        "notification_threshold",
        "packet_queue",
        "clear",
        "time",
        "time",
        "x",
        "time",
        "time",
        "start_time",
        "sniff_duration",
        "sniff",
        "prn",
        "process_packet",
        "stop_filter",
        "stop_sniffing",
        "open",
        "output_filename",
        "output_file",
        "json",
        "dump",
        "captured_packets",
        "output_file",
        "output_filename",
        "main"
    ],
    "literals": [
        "\"ICMP flood rate exceeded!\"",
        "\"Notifying user...\"",
        "\"icmp\"",
        "\"captured_packets.json\"",
        "\"w\"",
        "\"Captured packets saved to\"",
        "\"___main__\""
    ],
    "variables": [
        "packet_count",
        "packet_queue",
        "rate_limit",
        "notification_threshold",
        "sniff_duration",
        "icmp_packet",
        "current_time",
        "packet_queue",
        "packet_count",
        "start_time",
        "captured_packets",
        "output_filename"
    ],
    "comments": [
        "Rate limit and notification threshold",
        "Packets per second",
        "Notify if the rate exceeds this count",
        "Time to run the sniffing (in seconds)",
        "For example, run for 60 seconds",
        "Function to process captured packets",
        "ICMP Echo Request (ping)",
        "Remove timestamps older than 1 second from the queue",
        "Check if the packet rate exceeds the limit",
        "Add your notification code here",
        "Reset packet count and queue",
        "Sniff network traffic and call the process_packet function",
        "Filter for ICMP traffic (adjust filters as needed)",
        "Save the captured_packets list to a JSON file"
    ],
    "docstrings": [],
    "functions": [
        "main",
        "process_packet",
        "stop_sniffing"
    ],
    "classes": []
}