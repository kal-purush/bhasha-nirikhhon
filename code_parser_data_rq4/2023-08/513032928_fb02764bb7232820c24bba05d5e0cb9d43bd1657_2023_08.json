{
    "identifiers": [
        "annotations",
        "logging",
        "mimetypes",
        "shutil",
        "datetime",
        "datetime",
        "pathlib",
        "Path",
        "typing",
        "Any",
        "Dict",
        "Optional",
        "IPython",
        "get_ipython",
        "IPython",
        "core",
        "interactiveshell",
        "InteractiveShell",
        "IPython",
        "core",
        "magic",
        "Magics",
        "line_cell_magic",
        "magics_class",
        "needs_local_scope",
        "IPython",
        "display",
        "HTML",
        "display",
        "manim",
        "config",
        "logger",
        "tempconfig",
        "manim",
        "main",
        "manim",
        "constants",
        "RendererType",
        "manim",
        "renderer",
        "shader",
        "shader_program_cache",
        "convert",
        "RevealJS",
        "present",
        "get_scenes_presentation_config",
        "magics_class",
        "Magics",
        "shell",
        "InteractiveShell",
        "shell",
        "Dict",
        "Path",
        "Path",
        "needs_local_scope",
        "line_cell_magic",
        "line",
        "cell",
        "Optional",
        "local_ns",
        "Dict",
        "Any",
        "cell",
        "exec",
        "cell",
        "local_ns",
        "line",
        "split",
        "split_args",
        "split",
        "len",
        "split_args",
        "split_args",
        "split",
        "manim_args",
        "len",
        "args",
        "args",
        "args",
        "args",
        "main",
        "args",
        "standalone_mode",
        "prog_name",
        "add_additional_args",
        "args",
        "main",
        "modified_args",
        "standalone_mode",
        "prog_name",
        "tempconfig",
        "local_ns",
        "get",
        "config",
        "digest_args",
        "args",
        "logging",
        "getLogger",
        "setLevel",
        "logging",
        "getLogger",
        "level",
        "config",
        "renderer",
        "RendererType",
        "OPENGL",
        "manim",
        "renderer",
        "opengl_renderer",
        "OpenGLRenderer",
        "OpenGLRenderer",
        "local_ns",
        "config",
        "SceneClass",
        "renderer",
        "renderer",
        "scene",
        "render",
        "shader_program_cache",
        "clear",
        "renderer",
        "renderer",
        "renderer",
        "close",
        "config",
        "logger",
        "info",
        "Path",
        "config",
        "relative_to",
        "Path",
        "cwd",
        "Path",
        "config",
        "_generate_file_name",
        "local_path",
        "rendered_files",
        "rendered_files",
        "local_path",
        "unlink",
        "rendered_files",
        "tmpfile",
        "tmpfile",
        "parent",
        "mkdir",
        "parents",
        "exist_ok",
        "shutil",
        "copy",
        "local_path",
        "tmpfile",
        "mimetypes",
        "guess_type",
        "config",
        "config",
        "embed",
        "get_ipython",
        "file_type",
        "startswith",
        "ValueError",
        "file_type",
        "config",
        "arg",
        "split",
        "arg",
        "manim_slides_args",
        "embed",
        "kwargs",
        "get",
        "lower",
        "strip",
        "logger",
        "warn",
        "get_scenes_presentation_config",
        "clsname",
        "Path",
        "RevealJS",
        "presentation_configs",
        "presentation_configs",
        "kwargs",
        "convert_to",
        "tmpfile",
        "embed",
        "HTML",
        "format",
        "srcdoc",
        "tmpfile",
        "read_text",
        "replace",
        "HTML",
        "format",
        "src",
        "tmpfile",
        "as_posix",
        "display",
        "result",
        "args",
        "args",
        "args",
        "additional_args",
        "additional_args",
        "args",
        "args",
        "config",
        "datetime",
        "now",
        "strftime"
    ],
    "literals": [
        "r\"\"\"Render Manim Slides contained in IPython cells.\n        Works as a line or cell magic.\n\n        .. note::\n\n            This magic works pretty much like the one from Manim, except that it\n            will render Manim Slides using RevealJS. For passing arguments to\n            Manim Slides' convert module, use ``-manim-slides key=value``.\n\n            Everything that is after ``--manim-slides`` will be send to\n            Manim Slides' command. E.g., use ``--manim-slides controls=true``\n            to display control buttons.\n\n        .. hint::\n\n            This line and cell magic works best when used in a JupyterLab\n            environment: while all of the functionality is available for\n            classic Jupyter notebooks as well, it is possible that videos\n            sometimes don't update on repeated execution of the same cell\n            if the scene name stays the same.\n\n            This problem does not occur when using JupyterLab.\n\n        Please refer to `<https://jupyter.org/>`_ for more information about JupyterLab\n        and Jupyter notebooks.\n\n        Usage in line mode::\n\n            %manim_slides [CLI options] MyAwesomeSlide\n\n        Usage in cell mode::\n\n            %%manim_slides [CLI options] MyAwesomeSlide\n\n            class MyAweseomeSlide(Slide):\n                def construct(self):\n                    ...\n\n        Run ``%manim_slides --help`` and ``%manim_slides render --help``\n        for possible command line interface options.\n\n        .. note::\n\n            The maximal width of the rendered videos that are displayed in the notebook can be\n            configured via the ``media_width`` configuration option. The default is set to ``25vw``,\n            which is 25% of your current viewport width. To allow the output to become as large\n            as possible, set ``config.media_width = \"100%\"``.\n\n            The ``media_embed`` option will embed the image/video output in the notebook. This is\n            generally undesirable as it makes the notebooks very large, but is required on some\n            platforms (notably Google's CoLab, where it is automatically enabled unless suppressed\n            by ``config.embed = False``) and needed in cases when the notebook (or converted HTML\n            file) will be moved relative to the video locations. Use-cases include building\n            documentation with Sphinx and JupyterBook. See also the\n            :mod:`Manim Slides directive for Sphinx\n            <manim_slides.docs.manim_slides_directive>`.\n\n        Examples\n        --------\n\n        First make sure to put ``from manim_slides import ManimSlidesMagic``,\n        or even ``from manim_slides import *``\n        in a cell and evaluate it. Then, a typical Jupyter notebook cell for Manim Slides\n        could look as follows::\n\n            %%manim_slides -v WARNING --progress_bar None MySlide --manim-slides controls=true data_uri=true\n\n            class MySlide(Slide):\n                def construct(self):\n                    square = Square()\n                    circle = Circle()\n\n                    self.play(Create(square))\n                    self.next_slide()\n                    self.play(Transform(square, circle))\n\n        Evaluating this cell will render and display the ``MySlide`` slide\n        defined in the body of the cell.\n\n        .. note::\n\n            In case you want to hide the red box containing the output progress bar, the ``progress_bar`` config\n            option should be set to ``None``. This can also be done by passing ``--progress_bar None`` as a\n            CLI flag.\n\n        \"\"\"",
        "\"--manim-slides\"",
        "\"-h\"",
        "\"--help\"",
        "\"--version\"",
        "\"manim\"",
        "\"manim\"",
        "\"config\"",
        "\"manim-slides\"",
        "\"manim\"",
        "\"scene_names\"",
        "\"output_file\"",
        "\"No output file produced\"",
        "\"output_file\"",
        "\"media_dir\"",
        "\"jupyter\"",
        "f\"{_generate_file_name()}.html\"",
        "\"output_file\"",
        "\"video/mp4\"",
        "\"media_embed\"",
        "\"google.colab\"",
        "\"video\"",
        "f\"Manim Slides only supports video files, not {file_type}\"",
        "\"scene_names\"",
        "\"=\"",
        "\"data_uri\"",
        "\"true\"",
        "\"data_uri\"",
        "\"false\"",
        "\"false\"",
        "\"data_uri option is currently automatically enabled, \"",
        "\"because using local video files does not seem to work properly.\"",
        "\"data_uri\"",
        "\"true\"",
        "\"./slides\"",
        "'\"'",
        "\"'\"",
        "\"--jupyter\"",
        "\"-t\"",
        "\"--format\"",
        "\"--format\"",
        "\"webm\"",
        "\"\"",
        "\"scene_names\"",
        "\"@\"",
        "\"%Y-%m-%d@%H-%M-%S\""
    ],
    "variables": [
        "rendered_files",
        "split_args",
        "manim_args",
        "manim_slides_args",
        "manim_slides_args",
        "args",
        "modified_args",
        "args",
        "renderer",
        "renderer",
        "SceneClass",
        "scene",
        "local_path",
        "tmpfile",
        "local_path",
        "file_type",
        "embed",
        "embed",
        "clsname",
        "kwargs",
        "kwargs",
        "kwargs",
        "presentation_configs",
        "result",
        "result",
        "additional_args"
    ],
    "comments": [
        "type: ignore",
        "Shader cache becomes invalid as the context is destroyed",
        "Close OpenGL window here instead of waiting for the main thread to",
        "finish causing the window to stay open and freeze",
        "videos need to be embedded when running in google colab.",
        "do this automatically in case config.media_embed has not been",
        "set explicitly.",
        "Embedding implies data-uri",
        "TODO: FIXME",
        "Seems like files are blocked so date-uri is the only working option...",
        "Use webm to support transparency",
        "type: ignore"
    ],
    "docstrings": [
        "\"\"\"\nUtilities for using Manim Slides with IPython (in particular: Jupyter notebooks).\n=================================================================================\n\n.. toctree::\n    :hidden:\n\n    magic_example\n\n\n.. note::\n\n    The current implementation is highly inspired from Manim's own\n    IPython magics, from v0.17.3.\n\nThis magic requires two additional dependencies: ``manim`` and ``IPython``.\nYou can install them manually, or with the extra keyword:\n\n    pip install manim-slides[magic]\n\nNote that you will still need to install Manim's platform-specific dependencies,\nsee\n`their installation page <https://docs.manim.community/en/stable/installation.html>`_.\n\"\"\"",
        "\"\"\"<div style=\"position:relative;padding-bottom:56.25%;\"><iframe style=\"width:100%;height:100%;position:absolute;left:0px;top:0px;\" frameborder=\"0\" width=\"100%\" height=\"100%\" allowfullscreen allow=\"autoplay\" srcdoc=\"{srcdoc}\"></iframe></div>\"\"\"",
        "\"\"\"<div style=\"position:relative;padding-bottom:56.25%;\"><iframe style=\"width:100%;height:100%;position:absolute;left:0px;top:0px;\" frameborder=\"0\" width=\"100%\" height=\"100%\" allowfullscreen allow=\"autoplay\" src=\"{src}\"></iframe></div>\"\"\""
    ],
    "functions": [
        "manim_slides",
        "add_additional_args",
        "_generate_file_name"
    ],
    "classes": [
        "ManimSlidesMagic"
    ]
}