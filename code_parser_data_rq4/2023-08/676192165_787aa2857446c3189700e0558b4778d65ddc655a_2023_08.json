{
    "identifiers": [
        "tempfile",
        "PIL",
        "Image",
        "os",
        "langchain",
        "llms",
        "OpenAI",
        "langchain",
        "embeddings",
        "OpenAIEmbeddings",
        "streamlit",
        "st",
        "langchain",
        "document_loaders",
        "PyPDFLoader",
        "langchain",
        "vectorstores",
        "Chroma",
        "langchain",
        "agents",
        "agent_toolkits",
        "create_vectorstore_agent",
        "VectorStoreToolkit",
        "VectorStoreInfo",
        "st",
        "title",
        "st",
        "subheader",
        "Image",
        "open",
        "st",
        "image",
        "image",
        "st",
        "subheader",
        "st",
        "file_uploader",
        "os",
        "getcwd",
        "uploaded_file",
        "uploaded_file",
        "tempfile",
        "TemporaryDirectory",
        "os",
        "path",
        "join",
        "temp_dir",
        "name",
        "uploaded_file",
        "name",
        "open",
        "temp_file_path",
        "temp_file",
        "temp_file",
        "write",
        "uploaded_file",
        "read",
        "st",
        "write",
        "temp_file_path",
        "os",
        "environ",
        "OpenAI",
        "temperature",
        "verbose",
        "OpenAIEmbeddings",
        "PyPDFLoader",
        "temp_file_path",
        "loader",
        "load_and_split",
        "Chroma",
        "from_documents",
        "pages",
        "embeddings",
        "collection_name",
        "VectorStoreInfo",
        "name",
        "description",
        "vectorstore",
        "store",
        "VectorStoreToolkit",
        "vectorstore_info",
        "vectorstore_info",
        "create_vectorstore_agent",
        "llm",
        "llm",
        "toolkit",
        "toolkit",
        "verbose",
        "st",
        "text_input",
        "prompt",
        "agent_executor",
        "run",
        "prompt",
        "st",
        "write",
        "response",
        "st",
        "expander",
        "store",
        "similarity_search_with_score",
        "prompt",
        "st",
        "write",
        "search",
        "page_content"
    ],
    "literals": [
        "'ðŸ¦œðŸ”— PDF-Chat: Interact with Your PDFs in a Conversational Way'",
        "'Load your PDF, ask questions, and receive answers directly from the document.'",
        "'PDF-Chat App.png'",
        "'Upload your pdf'",
        "''",
        "'pdf'",
        "\"tsv\"",
        "\"csv\"",
        "\"txt\"",
        "\"tab\"",
        "\"xlsx\"",
        "\"xls\"",
        "\"wb\"",
        "\"Full path of the uploaded file:\"",
        "'OPENAI_API_KEY'",
        "'Pdf'",
        "\"Pdf\"",
        "\" A pdf file to answer your questions\"",
        "'Input your prompt here'",
        "'Document Similarity Search'"
    ],
    "variables": [
        "image",
        "uploaded_file",
        "temp_file_path",
        "x",
        "temp_dir",
        "temp_file_path",
        "OPENAI_API_KEY",
        "llm",
        "embeddings",
        "loader",
        "pages",
        "store",
        "vectorstore_info",
        "toolkit",
        "agent_executor",
        "prompt",
        "response",
        "search"
    ],
    "comments": [
        "Import os to set API key",
        "Import OpenAI as main LLM service",
        "Bring in streamlit for UI/app interface",
        "Import PDF document loaders...there's other ones as well!",
        "Import chroma as the vector store",
        "Import vector store stuff",
        "Set the title and subtitle of the app",
        "Load the image",
        "Loading the Pdf file and return a temporary path for it",
        "Save the uploaded file to a temporary location",
        "Set APIkey for OpenAI Service",
        "Can sub this out for other LLM providers",
        "Create instance of OpenAI LLM",
        "Create and load PDF Loader",
        "Split pages from pdf",
        "Load documents into vector database aka ChromaDB",
        "Create vectorstore info object",
        "Convert the document store into a langchain toolkit",
        "Add the toolkit to an end-to-end LC",
        "Create a text input box for the user",
        "If the user hits enter",
        "Then pass the prompt to the LLM",
        "...and write it out to the screen",
        "With a streamlit expander",
        "Find the relevant pages",
        "Write out the first"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}