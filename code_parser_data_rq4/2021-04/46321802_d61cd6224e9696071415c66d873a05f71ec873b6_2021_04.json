{
    "identifiers": [
        "Particular",
        "CodeRules",
        "Tests",
        "Collections",
        "Generic",
        "Threading",
        "Tasks",
        "Particular",
        "CodeRules",
        "Tests",
        "Helpers",
        "Xunit",
        "Xunit",
        "Abstractions",
        "Data",
        "Collections",
        "Generic",
        "AnalyzerTestFixture",
        "DroppedTaskAnalyzer",
        "ToData",
        "ToData",
        "ITestOutputHelper",
        "output",
        "output",
        "Theory",
        "MemberData",
        "nameof",
        "SadMethodData",
        "method",
        "Assert",
        "GetCode",
        "method",
        "DiagnosticIds",
        "DroppedTask",
        "Theory",
        "MemberData",
        "nameof",
        "HappyMethodData",
        "method",
        "Assert",
        "GetCode",
        "method",
        "method",
        "Format",
        "code",
        "method"
    ],
    "literals": [
        "\"void MyMethod() { [|Task.Delay(0)|]; }\"",
        "\"void MyMethod() { [|myFuncField()|]; }\"",
        "\"void MyMethod() { [|myFuncLocal()|]; }\"",
        "\"void MyMethod(Func<Task> myFuncParameter) { [|myFuncParameter()|]; }\"",
        "\"void MyMethod() { [|MyFuncProperty()|]; }\"",
        "\"void MyMethod() { [|myDelegateField()|]; }\"",
        "\"void MyMethod() { [|myDelegateLocal()|]; }\"",
        "\"void MyMethod(MyDelegate myDelegateParameter) { [|myDelegateParameter()|]; }\"",
        "\"void MyMethod() { [|MyDelegateProperty()|]; }\"",
        "\"void MyMethod() { var task = Task.Delay(0); }\"",
        "\"async Task MyMethod() => await Task.Delay(0);\"",
        "\"void MyMethod() { _ = Task.Delay(0); }\"",
        "\"Task MyMethod() => Task.Delay(0);\"",
        "\"void MyMethod() { var task = myFuncField(); }\"",
        "\"async Task MyMethod() => await myFuncField();\"",
        "\"void MyMethod() { _ = myFuncField(); }\"",
        "\"Task MyMethod() => myFuncField();\"",
        "\"void MyMethod() { var task = myFuncLocal(); }\"",
        "\"async Task MyMethod() => await myFuncLocal();\"",
        "\"void MyMethod() { _ = myFuncLocal(); }\"",
        "\"Task MyMethod() => myFuncLocal();\"",
        "\"void MyMethod() { var task = MyFuncProperty(); }\"",
        "\"async Task MyMethod() => await MyFuncProperty();\"",
        "\"void MyMethod() { _ = MyFuncProperty(); }\"",
        "\"Task MyMethod() => MyFuncProperty();\"",
        "\"void MyMethod(Func<Task> myFuncParameter) { var task = myFuncParameter(); }\"",
        "\"async Task MyMethod(Func<Task> myFuncParameter) => await myFuncParameter();\"",
        "\"void MyMethod(Func<Task> myFuncParameter) { _ = myFuncParameter(); }\"",
        "\"Task MyMethod(Func<Task> myFuncParameter) => myFuncParameter();\"",
        "\"void MyMethod() { var task = myDelegateField(); }\"",
        "\"async Task MyMethod() => await myDelegateField();\"",
        "\"void MyMethod() { _ = myDelegateField(); }\"",
        "\"Task MyMethod() => myDelegateField();\"",
        "\"void MyMethod() { var task = myDelegateLocal(); }\"",
        "\"async Task MyMethod() => await myDelegateLocal();\"",
        "\"void MyMethod() { _ = myDelegateLocal(); }\"",
        "\"Task MyMethod() => myDelegateLocal();\"",
        "\"void MyMethod(MyDelegate myDelegateParameter) { var task = myDelegateParameter(); }\"",
        "\"async Task MyMethod(MyDelegate myDelegateParameter) => await myDelegateParameter();\"",
        "\"void MyMethod(MyDelegate myDelegateParameter) { _ = myDelegateParameter(); }\"",
        "\"Task MyMethod(MyDelegate myDelegateParameter) => myDelegateParameter();\"",
        "\"void MyMethod() { var task = MyDelegateProperty(); }\"",
        "\"async Task MyMethod() => await MyDelegateProperty();\"",
        "\"void MyMethod() { _ = MyDelegateProperty(); }\"",
        "\"Task MyMethod() => MyDelegateProperty();\""
    ],
    "variables": [
        "code",
        "Data",
        "SadMethodData",
        "Data",
        "HappyMethodData"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [
        "DroppedTaskAnalyzerTests",
        "SadMethods",
        "HappyMethods",
        "GetCode"
    ],
    "classes": [
        "DroppedTaskAnalyzerTests"
    ]
}