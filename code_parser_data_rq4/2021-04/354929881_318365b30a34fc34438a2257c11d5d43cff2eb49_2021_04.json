{
    "identifiers": [
        "artifacts",
        "require",
        "contract",
        "accounts",
        "beforeEach",
        "multiSignature",
        "MultiSignatureWallet",
        "accounts",
        "accounts",
        "accounts",
        "it",
        "multiSignature",
        "minSignatures",
        "minSignatures",
        "multiSignature",
        "maxSignatures",
        "maxSignatures",
        "multiSignature",
        "addresses",
        "addresses",
        "addresses",
        "accounts",
        "addresses",
        "addresses",
        "addresses",
        "accounts",
        "addresses",
        "addresses",
        "addresses",
        "accounts",
        "addresses",
        "addresses",
        "multiSignature",
        "balance",
        "balance",
        "multiSignature",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "multiSignature",
        "transactions",
        "transactions",
        "it",
        "web3",
        "accounts",
        "multiSignature",
        "multiSignature",
        "balance",
        "balance",
        "it",
        "expectRevert",
        "multiSignature",
        "accounts",
        "accounts",
        "expectRevert",
        "multiSignature",
        "accounts",
        "expectRevert",
        "multiSignature",
        "accounts",
        "expectRevert",
        "multiSignature",
        "accounts",
        "expectRevert",
        "multiSignature",
        "accounts",
        "expectRevert",
        "multiSignature",
        "accounts",
        "expectRevert",
        "multiSignature",
        "accounts",
        "expectRevert",
        "multiSignature",
        "accounts",
        "accounts",
        "expectRevert",
        "multiSignature",
        "accounts",
        "expectRevert",
        "multiSignature",
        "accounts",
        "expectRevert",
        "multiSignature",
        "accounts",
        "it",
        "multiSignature",
        "accounts",
        "accounts",
        "multiSignature",
        "accounts",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "accounts",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "accounts",
        "transaction",
        "transaction",
        "transaction",
        "it",
        "multiSignature",
        "accounts",
        "accounts",
        "multiSignature",
        "accounts",
        "multiSignature",
        "accounts",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "it",
        "multiSignature",
        "accounts",
        "accounts",
        "multiSignature",
        "accounts",
        "expectRevert",
        "multiSignature",
        "accounts",
        "multiSignature",
        "accounts",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "it",
        "multiSignature",
        "accounts",
        "accounts",
        "multiSignature",
        "accounts",
        "multiSignature",
        "multiSignature",
        "accounts",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "it",
        "multiSignature",
        "accounts",
        "accounts",
        "expectRevert",
        "multiSignature",
        "accounts",
        "multiSignature",
        "accounts",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "it",
        "web3",
        "accounts",
        "multiSignature",
        "multiSignature",
        "accounts",
        "accounts",
        "multiSignature",
        "accounts",
        "multiSignature",
        "accounts",
        "web3",
        "accounts",
        "multiSignature",
        "accounts",
        "web3",
        "accounts",
        "parseInt",
        "endingBalance",
        "parseInt",
        "startingBalance",
        "multiSignature",
        "accounts",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "balanceDelta",
        "transaction",
        "balanceDelta",
        "transaction",
        "it",
        "multiSignature",
        "accounts",
        "accounts",
        "multiSignature",
        "accounts",
        "expectRevert",
        "multiSignature",
        "accounts",
        "multiSignature",
        "accounts",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "it",
        "multiSignature",
        "accounts",
        "accounts",
        "multiSignature",
        "accounts",
        "multiSignature",
        "accounts",
        "web3",
        "accounts",
        "expectRevert",
        "multiSignature",
        "accounts",
        "web3",
        "accounts",
        "parseInt",
        "endingBalance",
        "parseInt",
        "startingBalance",
        "multiSignature",
        "accounts",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "balanceDelta",
        "balanceDelta"
    ],
    "literals": [
        "'MultiSignature'",
        "'@openzeppelin/test-helpers'",
        "'MultiSignature'",
        "'Testing for constructor and getters'",
        "Invalid minSignature number: ${minSignatures.toNumber()}. Expecting 2.",
        "Invalid maxSignatures number: ${maxSignatures.toNumber()}. Expecting 3.",
        "Invalid addresses length: ${addresses.length}. Expecting 3.",
        "Invalid address at position 1: ${addresses[0]}. accounts ${addresses[0]}.",
        "Invalid address at position 1: ${addresses[2]}. accounts ${addresses[2]}.",
        "Invalid address at position 1: ${addresses[1]}. accounts ${addresses[1]}.",
        "Invalid balance: ${balance.toNumber()}. Expecting 0.",
        "Invalid transaction id: ${transaction.id}. Expecting undefined.",
        "Invalid transaction amount: ${transaction.amount}. Expecting undefined.",
        "Invalid transaction recipient: ${transaction.to}. Expecting undefined.",
        "Invalid transaction approvals number: ${transaction.approvals}. Expecting undefined.",
        "Invalid transaction requirer: ${transaction.requirer}. Expecting undefined.",
        "Invalid status: payed = ${transaction.payed}. Expecting undefined.",
        "Invalid transactions number: ${transactions.length}. Expecting 0.",
        "'Testing for contract funding'",
        "Invalid balance: ${balance.toString()}. Expecting {(1e18).toString()}.",
        "'Testing for failing via modifier approversOnly'",
        "'Not a multi-signature approver'",
        "'Not a multi-signature approver'",
        "'Not a multi-signature approver'",
        "'Not a multi-signature approver'",
        "'Not a multi-signature approver'",
        "'Not a multi-signature approver'",
        "'Not a multi-signature approver'",
        "'Not a multi-signature approver'",
        "'Not a multi-signature approver'",
        "'Not a multi-signature approver'",
        "'Not a multi-signature approver'",
        "'Testing for creating a TransferRequest'",
        "'0'",
        "Invalid transaction id: ${transaction.id}. Expecting 0.",
        "Invalid transaction amount: ${transaction.amount.toString()}. Expecting {(1e18).toString()}.",
        "Invalid transaction recipient: ${transaction.to.toString()}. Expecting {(accounts[5]).toString()}.",
        "'0'",
        "Invalid transaction approvals number: ${transaction.approvals}. Expecting 0.",
        "Invalid transaction requirer: ${transaction.requirer.toString()}. Expecting {accounts[0].toString()}.",
        "Invalid status: payed = ${transaction.payed.toString()}. Expecting false.",
        "'Testing for approving a transaction'",
        "'1'",
        "Invalid transaction approvals number: ${transaction.approvals}. Expecting 1.",
        "Invalid status: payed = ${transaction.payed.toString()}. Expecting false.",
        "'Testing for failing approving a transaction'",
        "'Transaction already approved'",
        "'1'",
        "Invalid transaction approvals number: ${transaction.approvals}. Expecting 1.",
        "Invalid status: payed = ${transaction.payed.toString()}. Expecting false.",
        "'Testing for unapproving a transaction'",
        "'0'",
        "Invalid transaction approvals number: ${transaction.approvals}. Expecting 1.",
        "Invalid status: payed = ${transaction.payed.toString()}. Expecting false.",
        "'Testing for failing unapproving a transaction'",
        "'Transaction is not approved'",
        "'0'",
        "Invalid transaction approvals number: ${transaction.approvals}. Expecting 0.",
        "Invalid status: payed = ${transaction.payed.toString()}. Expecting false.",
        "'Testing for executing a transaction'",
        "'2'",
        "Invalid transaction approvals number: ${transaction.approvals}. Expecting 2.",
        "Invalid status: payed = ${transaction.payed.toString()}. Expecting true.",
        "Invalid balance for the recipient: ${balanceDelta.toString()}'. Expecting ${transaction.amount.toString()}",
        "'Testing for failing executing a transaction for insufficient approvals'",
        "'Transaction is not approved'",
        "'1'",
        "Invalid transaction approvals number: ${transaction.approvals}. Expecting 1.",
        "Invalid status: payed = ${transaction.payed.toString()}. Expecting false.",
        "'Testing for failing executing a transaction for insufficient balance'",
        "'revert'",
        "'2'",
        "Invalid transaction approvals number: ${transaction.approvals}. Expecting 2.",
        "Invalid status: payed = ${transaction.payed.toString()}. Expecting false.",
        "'0'",
        "Invalid balance for the recipient: ${balanceDelta.toString()}'. Expecting 0"
    ],
    "variables": [
        "MultiSignatureWallet",
        "multiSignature",
        "minSignatures",
        "maxSignatures",
        "addresses",
        "balance",
        "transaction",
        "transactions",
        "balance",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "startingBalance",
        "endingBalance",
        "balanceDelta",
        "transaction",
        "transaction",
        "startingBalance",
        "endingBalance",
        "balanceDelta",
        "transaction"
    ],
    "comments": [
        "import contract artifact",
        "import expectRevert from open zeppelin test helpers",
        "testing contract MultiSignature",
        "instance a variable to deploy the contract",
        "execute before tests",
        "deploy the contract",
        "constructor args",
        "address[] memory",
        "uint",
        "declare a test: it('description', async(args) => {});",
        "function getMinSignatures() external view approversOnly() returns(uint)",
        "function getMaxSignatures() external view approversOnly() returns(uint)",
        "function getAddresses() exernal view returns(address[] memory)",
        "function getbalance() external view approversOnly() returns(uint)",
        "function getTransactions() external view approversOnly() returns(TransactionRequest[] memory)",
        "function getTransactions() external view approversOnly() returns(TransactionRequest[] memory)",
        "receive() payable external",
        "truffle is already injected with web3",
        "sender",
        "recipient",
        "amount: 1 eth",
        "function getbalance() external view approversOnly() returns(uint)",
        "expecting these transactions to be reverted by modifier approversOnly()",
        "function addTransaction(uint amount, address payable to) external approversOnly() returns(uint)",
        "function getMinSignatures() external view approversOnly() returns(uint)",
        "function getMaxSignatures() external view approversOnly() returns(uint)",
        "function getAddresses() external view approversOnly() returns(address[] memory)",
        "function getbalance() external view approversOnly() returns(uint)",
        "function getTransaction(uint id) external view approversOnly() returns(TransactionRequest memory)",
        "function getTransactions() external view approversOnly() returns(TransactionRequest[] memory)",
        "function addTransaction(uint amount, address payable to) external approversOnly()",
        "function approveTransaction(uint id) external approversOnly() notPayed(id)",
        "function unapproveTransaction(uint id) external approversOnly() notPayed(id)",
        "function executeTransaction(uint id) external approversOnly() notPayed(id)",
        "function addTransaction(uint amount, address payable to) external approversOnly() returns(uint)",
        "function getTransaction(uint id) external view approversOnly() returns(TransactionRequest memory)",
        "function addTransaction(uint amount, address payable to) external approversOnly() returns(uint)",
        "function approveTransaction(uint id) external approversOnly() notPayed(id)",
        "function getTransaction(uint id) external view approversOnly() returns(TransactionRequest memory)",
        "function addTransaction(uint amount, address payable to) external approversOnly() returns(uint)",
        "function approveTransaction(uint id) external approversOnly() notPayed(id)",
        "expecting this transaction to be reverted",
        "function approveTransaction(uint id) external approversOnly() notPayed(id)",
        "function getTransaction(uint id) external view approversOnly() returns(TransactionRequest memory)",
        "function addTransaction(uint amount, address payable to) external approversOnly() returns(uint)",
        "function approveTransaction(uint id) external approversOnly() notPayed(id)",
        "function unapproveTransaction(uint id) external approversOnly() notPayed(id)",
        "function getTransaction(uint id) external view approversOnly() returns(TransactionRequest memory)",
        "function addTransaction(uint amount, address payable to) external approversOnly() returns(uint)",
        "expecting this transaction to be reverted",
        "function unapproveTransaction(uint id) external approversOnly() notPayed(id)",
        "function getTransaction(uint id) external view approversOnly() returns(TransactionRequest memory)",
        "fund contract",
        "truffle is already injected with web3",
        "sender",
        "recipient",
        "amount (1 eth)",
        "function addTransaction(uint amount, address payable to) external approversOnly() returns(uint)",
        "function approveTransaction(uint id) external approversOnly() notPayed(id)",
        "function approveTransaction(uint id) external approversOnly() notPayed(id)",
        "save starting balance for transaction recipient",
        "function executeTransaction(uint id) external approversOnly() notPayed(id)",
        "saving ending balance after transaction is executed",
        "saving balance delta",
        "function getTransaction(uint id) external view approversOnly() returns(TransactionRequest memory)",
        "function addTransaction(uint amount, address payable to) external approversOnly() returns(uint)",
        "function approveTransaction(uint id) external approversOnly() notPayed(id)",
        "expecting this transaction to be reverted",
        "function executeTransaction(uint id) external approversOnly() notPayed(id)",
        "function getTransaction(uint id) external view approversOnly() returns(TransactionRequest memory)",
        "function addTransaction(uint amount, address payable to) external approversOnly() returns(uint)",
        "function approveTransaction(uint id) external approversOnly() notPayed(id)",
        "function approveTransaction(uint id) external approversOnly() notPayed(id)",
        "save starting balance for transaction recipient",
        "expecting this transaction to be reverted",
        "function executeTransaction(uint id) external approversOnly() notPayed(id)",
        "saving ending balance after transaction is executed",
        "saving balance delta",
        "function getTransaction(uint id) external view approversOnly() returns(TransactionRequest memory)"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}