{
    "identifiers": [
        "readableReport",
        "DisjoitedNotificationHubPartitionArray",
        "NotificationHubPartition",
        "RegExpFromString",
        "beforeEach",
        "jest",
        "describe",
        "aRegex",
        "aComplementaryRegex",
        "anOverlappingRegex",
        "aGapedRegex",
        "partitionRegex",
        "i",
        "NotificationHubPartition",
        "i",
        "i",
        "e",
        "fail",
        "i",
        "readableReport",
        "e",
        "it",
        "DisjoitedNotificationHubPartitionArray",
        "aPartition",
        "aComplementaryPartition",
        "expect",
        "result",
        "it",
        "DisjoitedNotificationHubPartitionArray",
        "aPartition",
        "anOverlappingPartition",
        "expect",
        "result",
        "it",
        "DisjoitedNotificationHubPartitionArray",
        "aPartition",
        "aGapedPartition",
        "expect",
        "result",
        "describe",
        "it",
        "RegExpFromString",
        "input",
        "e",
        "fail",
        "input",
        "readableReport",
        "e",
        "expect",
        "result",
        "expected",
        "expect",
        "result",
        "expect",
        "result",
        "goodExample",
        "badExample",
        "expect",
        "result",
        "badExample",
        "it",
        "RegExpFromString",
        "input",
        "expect",
        "result",
        "expected",
        "expect",
        "result",
        "it",
        "RegExpFromString",
        "input",
        "e",
        "fail",
        "readableReport",
        "e",
        "RegExpFromString",
        "decoded",
        "RegExpFromString",
        "input",
        "e",
        "fail",
        "readableReport",
        "e",
        "RegExpFromString",
        "decoded",
        "expect",
        "decoded",
        "decodedAgain",
        "expect",
        "encoded",
        "encodedAgain"
    ],
    "literals": [
        "\"italia-ts-commons/lib/reporters\"",
        "\"../types\"",
        "\"nhDisjoitedFirstCharacterPartitionReadonlyArray\"",
        "partition${i}",
        "ns${i}",
        "\"shared\"",
        "Cannot decode NotificationHubPartitions, i: ${i} error: ${readableReport(\n            e\n          )}",
        "\"should accept complementary partitions\"",
        "\"should not accept overlapping partitions\"",
        "\"should not accept gaped partitions\"",
        "\"RegExpFromString\"",
        "title                  | input        | expected          | goodExample | badExample\n    ${\"a string prefix\"}   | ${\"^foo\"}    | ${/^foo/}         | ${\"foo\"}    | ${\"afoo\"}\n    ${\"a string\"}          | ${\"foo\"}     | ${/foo/}          | ${\"afoos\"}  | ${\"bar\"}\n    ${\"an escaped string\"} | ${\"^fo\\\\so\"} | ${/^fo\\so/}       | ${\"fo o\"}   | ${\"foo\"}\n    ${\"an empty string\"}   | ${\"\"}        | ${new RegExp(\"\")} | ${\"\"}       | ${undefined}\n    ${\"a regex\"}           | ${/^foo/}    | ${/^foo/}         | ${\"foo\"}    | ${\"afoo\"}",
        "\"a string prefix\"",
        "\"^foo\"",
        "\"foo\"",
        "\"afoo\"",
        "\"a string\"",
        "\"foo\"",
        "\"afoos\"",
        "\"bar\"",
        "\"an escaped string\"",
        "\"^fo\\\\so\"",
        "\"fo o\"",
        "\"foo\"",
        "\"an empty string\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"a regex\"",
        "\"foo\"",
        "\"afoo\"",
        "\"should decode $title into a regex\"",
        "Cannot decode ${input}, err: ${readableReport(e)}",
        "\"undefined\"",
        "title                  | input             | expected\n    ${\"a string\"}          | ${\"any string\"}   | ${\"any string\"}\n    ${\"an escaped string\"} | ${\"any \\\\string\"} | ${\"any \\\\string\"}\n    ${\"a regex\"}           | ${/^foo/}         | ${\"^foo\"}",
        "\"a string\"",
        "\"any string\"",
        "\"any string\"",
        "\"an escaped string\"",
        "\"any \\\\string\"",
        "\"any \\\\string\"",
        "\"a regex\"",
        "\"^foo\"",
        "\"should encode $title into a string\"",
        "\"string\"",
        "title         | input\n    ${\"a string\"} | ${\"foo\"}\n    ${\"a regex\"}  | ${/^foo/}",
        "\"a string\"",
        "\"foo\"",
        "\"a regex\"",
        "\"should decode and encode $title idempotently\"",
        "Cannot decode RegExpFromString, error: ${readableReport(e)}",
        "Cannot decode RegExpFromString, error: ${readableReport(e)}"
    ],
    "variables": [
        "aRegex",
        "aComplementaryRegex",
        "anOverlappingRegex",
        "aGapedRegex",
        "aPartition",
        "aComplementaryPartition",
        "anOverlappingPartition",
        "aGapedPartition",
        "result",
        "result",
        "result",
        "result",
        "result",
        "decoded",
        "encoded",
        "decodedAgain",
        "encodedAgain"
    ],
    "comments": [
        "just a partition",
        "a partition which is complementary to aPartition",
        "a partition which overlaps with aPartition",
        "a partition which leaves gaps when used with aPartition",
        "testing the regex performs well on a good example",
        "testing the regex performs well on a bad example",
        "undefined means \"don't test\""
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}