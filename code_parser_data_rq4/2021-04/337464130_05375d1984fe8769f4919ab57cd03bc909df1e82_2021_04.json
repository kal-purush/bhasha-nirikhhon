{
    "identifiers": [
        "pytest",
        "pyconnect",
        "workflows",
        "core",
        "pyconnect",
        "workflows",
        "core",
        "CoreWorkflow",
        "datetime",
        "unittest",
        "mock",
        "AsyncMock",
        "Mock",
        "pytest",
        "fixture",
        "err",
        "msg",
        "MockCallback",
        "pytest",
        "fixture",
        "CoreWorkflow",
        "CoreWorkflow",
        "config",
        "workflow",
        "workflow",
        "CoreWorkflow",
        "workflow",
        "message",
        "workflow",
        "data_format",
        "workflow",
        "origin_url",
        "workflow",
        "start_time",
        "workflow",
        "use_response",
        "workflow",
        "verify_certs",
        "workflow",
        "lfh_exception_topic",
        "workflow",
        "lfh_id",
        "workflow",
        "state",
        "pytest",
        "mark",
        "asyncio",
        "workflow",
        "CoreWorkflow",
        "monkeypatch",
        "kafka_callback",
        "mock_httpx_client",
        "datetime",
        "datetime",
        "utcnow",
        "AsyncMock",
        "monkeypatch",
        "context",
        "m",
        "m",
        "setattr",
        "core",
        "Mock",
        "return_value",
        "AsyncMock",
        "m",
        "setattr",
        "core",
        "kafka_callback",
        "m",
        "setattr",
        "core",
        "mock_httpx_client",
        "m",
        "setattr",
        "core",
        "AsyncMock",
        "return_value",
        "nats_mock",
        "workflow",
        "validate",
        "workflow",
        "state",
        "name",
        "workflow",
        "transform",
        "workflow",
        "state",
        "name",
        "workflow",
        "persist",
        "workflow",
        "state",
        "name",
        "workflow",
        "message",
        "workflow",
        "message",
        "workflow",
        "message",
        "workflow",
        "message",
        "workflow",
        "transmit",
        "Mock",
        "workflow",
        "state",
        "name",
        "workflow",
        "message",
        "workflow",
        "message",
        "workflow",
        "use_response",
        "workflow",
        "synchronize",
        "workflow",
        "state",
        "name",
        "nats_mock",
        "publish",
        "assert_called_once",
        "pytest",
        "mark",
        "asyncio",
        "workflow",
        "CoreWorkflow",
        "monkeypatch",
        "kafka_callback",
        "mock_httpx_client",
        "datetime",
        "datetime",
        "utcnow",
        "monkeypatch",
        "context",
        "m",
        "m",
        "setattr",
        "core",
        "Mock",
        "return_value",
        "AsyncMock",
        "m",
        "setattr",
        "core",
        "kafka_callback",
        "m",
        "setattr",
        "core",
        "mock_httpx_client",
        "workflow",
        "validate",
        "workflow",
        "state",
        "name",
        "workflow",
        "transform",
        "workflow",
        "state",
        "name",
        "workflow",
        "persist",
        "workflow",
        "state",
        "name",
        "workflow",
        "transmit",
        "Mock",
        "workflow",
        "state",
        "name",
        "workflow",
        "message",
        "workflow",
        "message",
        "workflow",
        "use_response",
        "pytest",
        "mark",
        "asyncio",
        "workflow",
        "CoreWorkflow",
        "monkeypatch",
        "kafka_callback",
        "mock_httpx_client",
        "datetime",
        "datetime",
        "utcnow",
        "monkeypatch",
        "context",
        "m",
        "m",
        "setattr",
        "core",
        "Mock",
        "return_value",
        "AsyncMock",
        "m",
        "setattr",
        "core",
        "kafka_callback",
        "m",
        "setattr",
        "core",
        "mock_httpx_client",
        "m",
        "setattr",
        "core",
        "AsyncMock",
        "return_value",
        "AsyncMock",
        "workflow",
        "run",
        "Mock",
        "actual_value",
        "actual_value",
        "actual_value",
        "actual_value",
        "actual_value",
        "actual_value",
        "actual_value",
        "actual_value",
        "actual_value",
        "actual_value",
        "actual_value",
        "actual_value",
        "actual_value",
        "actual_value",
        "pytest",
        "mark",
        "asyncio",
        "workflow",
        "CoreWorkflow",
        "monkeypatch",
        "kafka_callback",
        "mock_httpx_client",
        "datetime",
        "datetime",
        "utcnow",
        "Mock",
        "side_effect",
        "monkeypatch",
        "context",
        "m",
        "m",
        "setattr",
        "core",
        "Mock",
        "return_value",
        "AsyncMock",
        "m",
        "setattr",
        "core",
        "kafka_callback",
        "m",
        "setattr",
        "core",
        "mock_httpx_client",
        "m",
        "setattr",
        "core",
        "AsyncMock",
        "return_value",
        "AsyncMock",
        "pytest",
        "raises",
        "workflow",
        "run",
        "Mock"
    ],
    "literals": [
        "'CUSTOM:0:0'",
        "'success'",
        "'message'",
        "'first_name'",
        "'John'",
        "'last_name'",
        "'Doe'",
        "'origin_url'",
        "'http://localhost:5000/data'",
        "'certificate_verify'",
        "'lfh_id'",
        "'90cf887d-eaa0-4997-b2b7-b1e39ae0ec03'",
        "'data_format'",
        "'custom'",
        "'first_name'",
        "'John'",
        "'last_name'",
        "'Doe'",
        "'custom'",
        "'http://localhost:5000/data'",
        "'LFH_EXCEPTION'",
        "'90cf887d-eaa0-4997-b2b7-b1e39ae0ec03'",
        "'parse'",
        "'get_kafka_producer'",
        "'KafkaCallback'",
        "'AsyncClient'",
        "'get_nats_client'",
        "'validate'",
        "'transform'",
        "'persist'",
        "'elapsed_storage_time'",
        "'elapsed_total_time'",
        "'data_record_location'",
        "'CUSTOM:0:0'",
        "'status'",
        "'success'",
        "'https://external-server.com/data'",
        "'transmit'",
        "'transmit_date'",
        "'elapsed_transmit_time'",
        "'sync'",
        "'get_kafka_producer'",
        "'KafkaCallback'",
        "'AsyncClient'",
        "'validate'",
        "'transform'",
        "'persist'",
        "'transmit'",
        "'transmit_date'",
        "'elapsed_transmit_time'",
        "'get_kafka_producer'",
        "'KafkaCallback'",
        "'AsyncClient'",
        "'get_nats_client'",
        "'consuming_endpoint_url'",
        "'http://localhost:5000/data'",
        "'creation_date'",
        "'data'",
        "'eyJmaXJzdF9uYW1lIjogIkpvaG4iLCAibGFzdF9uYW1lIjogIkRvZSJ9'",
        "'data_format'",
        "'custom'",
        "'data_record_location'",
        "'CUSTOM:0:0'",
        "'elapsed_storage_time'",
        "'elapsed_total_time'",
        "'elapsed_transmit_time'",
        "'lfh_id'",
        "'status'",
        "'success'",
        "'store_date'",
        "'target_endpoint_url'",
        "'transmit_date'",
        "'uuid'",
        "'test exception'",
        "'get_kafka_producer'",
        "'KafkaCallback'",
        "'AsyncClient'",
        "'get_nats_client'"
    ],
    "variables": [
        "kafka_result",
        "kafka_status",
        "config",
        "workflow",
        "workflow",
        "start_time",
        "nats_mock",
        "workflow",
        "transmit_server",
        "workflow",
        "start_time",
        "workflow",
        "start_time",
        "actual_value",
        "workflow",
        "start_time",
        "workflow",
        "validate"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\ntest_core.py\n\nTests the processes and transitions defined within the Core Workflow implementation.\n\"\"\"",
        "\"\"\"\n    Tests CoreWorkflow.__init__ and the state transition.\n    :param workflow: The CoreWorkflow fixture\n    \"\"\"",
        "\"\"\"\n    Manually tests CoreWorkflow state transitions.\n\n    Transitions are tested in a single test case since the workflow model requires methods to be executed\n    sequentially in a specific order. The testing order mirrors the execution order provider in\n    CoreWorkflow.run.\n\n    :param workflow: The CoreWorkflow fixture\n    :param monkeypatch: Pytest monkeypatch fixture\n    :param kafka_callback: KafkaCallback fixture\n    :param mock_httpx_client: Mock HTTPX Client fixture\n    \"\"\"",
        "\"\"\"\n    Manually tests CoreWorkflow state transitions where transmission is disabled\n\n    Transitions are tested in a single test case since the workflow model requires methods to be executed\n    sequentially in a specific order. The testing order mirrors the execution order provider in\n    CoreWorkflow.run.\n\n    :param workflow: The CoreWorkflow fixture\n    :param monkeypatch: Pytest monkeypatch fixture\n    :param kafka_callback: KafkaCallback fixture\n    :param mock_httpx_client: Mock HTTPX Client fixture\n    \"\"\"",
        "\"\"\"\n    Tests the CoreWorkflow.run method.\n\n    :param workflow: The CoreWorkflow fixture\n    :param monkeypatch: Pytest monkeypatch fixture\n    :param kafka_callback: KafkaCallback fixture\n    :param mock_httpx_client: Mock HTTPX Client fixture\n    \"\"\"",
        "\"\"\"\n    Tests the CoreWorkflow.run method when an exception occurs\n\n    :param workflow: The CoreWorkflow fixture\n    :param monkeypatch: Pytest monkeypatch fixture\n    :param kafka_callback: KafkaCallback fixture\n    :param mock_httpx_client: Mock HTTPX Client fixture\n    \"\"\""
    ],
    "functions": [
        "kafka_callback",
        "get_kafka_result",
        "workflow",
        "test_init",
        "test_manual_flow",
        "test_manual_flow_transmit_disabled",
        "test_run_flow",
        "test_run_flow_error"
    ],
    "classes": [
        "MockCallback"
    ]
}