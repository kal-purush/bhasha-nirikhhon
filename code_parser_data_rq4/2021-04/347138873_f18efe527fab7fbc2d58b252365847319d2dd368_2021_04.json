{
    "identifiers": [
        "absolute_import",
        "unicode_literals",
        "collections",
        "inspect",
        "core",
        "platform",
        "models",
        "jobs",
        "types",
        "audit_errors",
        "python_utils",
        "apache_beam",
        "beam",
        "apache_beam",
        "typehints",
        "models",
        "Registry",
        "get_all_storage_model_classes",
        "models",
        "Registry",
        "get_storage_model_classes",
        "models",
        "NAMES",
        "base_model",
        "base_model_cls",
        "base_model_cls",
        "union",
        "cls",
        "cls",
        "_ALL_MODEL_CLASSES",
        "issubclass",
        "cls",
        "base_model_cls",
        "base_model_cls",
        "_ALL_BASE_MODEL_CLASSES",
        "python_utils",
        "OBJECT",
        "collections",
        "defaultdict",
        "model_cls_args",
        "model_cls_args",
        "ValueError",
        "cls",
        "model_cls_args",
        "cls",
        "_MODEL_CLASSES_BY_BASE_CLASS",
        "_model_classes",
        "update",
        "_MODEL_CLASSES_BY_BASE_CLASS",
        "cls",
        "cls",
        "_ALL_MODEL_CLASSES",
        "_model_classes",
        "add",
        "cls",
        "cls",
        "do_fn",
        "issubclass",
        "do_fn",
        "beam",
        "DoFn",
        "do_fn",
        "inspect",
        "getmro",
        "do_fn",
        "cls",
        "_model_classes",
        "_DO_FNS_BY_MODEL_KIND",
        "cls",
        "issubclass",
        "r",
        "do_fn",
        "r",
        "registered_do_fns",
        "registered_do_fns",
        "base_classes_of_do_fn",
        "registered_do_fns",
        "add",
        "do_fn",
        "typehints",
        "with_input_types",
        "typehints",
        "Union",
        "_model_classes",
        "typehints",
        "with_output_types",
        "audit_errors",
        "BaseAuditError",
        "with_input_types",
        "with_output_types",
        "do_fn",
        "classmethod",
        "cls",
        "model_kind",
        "cls",
        "_DO_FNS_BY_MODEL_KIND",
        "model_kind"
    ],
    "literals": [
        "'Must provide at least one model'",
        "'%r is not a model registered in core.platform'",
        "'%r is not a subclass of DoFn'"
    ],
    "variables": [
        "_ALL_MODEL_CLASSES",
        "_ALL_BASE_MODEL_CLASSES",
        "_MODEL_CLASSES_BY_BASE_CLASS",
        "_DO_FNS_BY_MODEL_KIND",
        "_model_classes",
        "base_classes_of_do_fn",
        "registered_do_fns",
        "with_input_types",
        "with_output_types"
    ],
    "comments": [
        "coding: utf-8",
        "",
        "Copyright 2021 The Oppia Authors. All Rights Reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS-IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "pylint: disable=import-only-modules",
        "pylint: disable=import-only-modules",
        "The \"mro\" (method resolution order) of a class is the list of types",
        "the class is derived from, including itself, in the order they are",
        "searched for methods and attributes.",
        "To learn more see: https://stackoverflow.com/a/2010732/4859885.",
        "Always keep the most-derived DoFn.",
        "Decorate the DoFn with type constraints that raise an error when",
        "arguments or return values have the wrong type."
    ],
    "docstrings": [
        "\"\"\"Decorators for assigning DoFn classes to specific storage models.\"\"\"",
        "\"\"\"Decorator for registering DoFns that audit storage models.\n\n    DoFns registered by this decorator should assume that the models they\n    receive as input do not have `deleted=True`.\n\n    When decorating a DoFn that inherits from another, it overwrites the base\n    class. For example, ValidateExplorationModelId overwrites ValidateModelId if\n    and only if ValidateExplorationModelId inherits from ValidateModelId.\n    \"\"\"",
        "\"\"\"Initializes the decorator to target the given models.\n\n        Args:\n            *model_cls_args: tuple(class). The models the decorator will target.\n                If an argument is a base class, all of its subclasses will be\n                targeted as well.\n\n        Raises:\n            TypeError. When a non-model type is provided.\n        \"\"\"",
        "\"\"\"Decorator which registers the given DoFn to the targeted models.\n\n        This decorator also installs type constraints on the DoFn to guard it\n        from invalid argument types.\n\n        Args:\n            do_fn: DoFn. The DoFn to decorate.\n\n        Returns:\n            do_fn. The decorated DoFn.\n\n        Raises:\n            TypeError. When the input argument is not a DoFn.\n        \"\"\"",
        "\"\"\"Returns the list of DoFns registered to the given model kind.\n\n        Args:\n            model_kind: str. The kind/name of the model.\n\n        Returns:\n            list(DoFn). The DoFns registered to the model kind.\n        \"\"\""
    ],
    "functions": [
        "__call__",
        "get_do_fns_for_model_kind"
    ],
    "classes": [
        "AuditsExisting"
    ]
}