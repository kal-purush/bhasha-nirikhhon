{
    "identifiers": [
        "asyncio",
        "hashlib",
        "inspect",
        "logging",
        "math",
        "os",
        "collections",
        "defaultdict",
        "typing",
        "Optional",
        "AsyncGenerator",
        "Union",
        "Awaitable",
        "DefaultDict",
        "Tuple",
        "BinaryIO",
        "telethon",
        "utils",
        "helpers",
        "TelegramClient",
        "telethon",
        "crypto",
        "AuthKey",
        "telethon",
        "network",
        "MTProtoSender",
        "telethon",
        "tl",
        "alltlobjects",
        "LAYER",
        "telethon",
        "tl",
        "functions",
        "InvokeWithLayerRequest",
        "telethon",
        "tl",
        "functions",
        "auth",
        "ExportAuthorizationRequest",
        "ImportAuthorizationRequest",
        "telethon",
        "tl",
        "functions",
        "upload",
        "GetFileRequest",
        "SaveFilePartRequest",
        "SaveBigFilePartRequest",
        "telethon",
        "tl",
        "types",
        "Document",
        "InputFileLocation",
        "InputDocumentFileLocation",
        "InputPhotoFileLocation",
        "InputPeerPhotoFileLocation",
        "TypeInputFile",
        "InputFileBig",
        "InputFile",
        "logging",
        "Logger",
        "logging",
        "getLogger",
        "Union",
        "Document",
        "InputDocumentFileLocation",
        "InputPeerPhotoFileLocation",
        "InputFileLocation",
        "InputPhotoFileLocation",
        "TelegramClient",
        "MTProtoSender",
        "GetFileRequest",
        "client",
        "TelegramClient",
        "sender",
        "MTProtoSender",
        "file",
        "TypeLocation",
        "offset",
        "limit",
        "stride",
        "count",
        "sender",
        "client",
        "GetFileRequest",
        "file",
        "offset",
        "offset",
        "limit",
        "limit",
        "stride",
        "count",
        "Optional",
        "remaining",
        "client",
        "_call",
        "sender",
        "request",
        "remaining",
        "request",
        "offset",
        "stride",
        "result",
        "Awaitable",
        "sender",
        "disconnect",
        "TelegramClient",
        "MTProtoSender",
        "Union",
        "SaveFilePartRequest",
        "SaveBigFilePartRequest",
        "Optional",
        "asyncio",
        "asyncio",
        "AbstractEventLoop",
        "client",
        "TelegramClient",
        "sender",
        "MTProtoSender",
        "file_id",
        "part_count",
        "big",
        "index",
        "stride",
        "loop",
        "asyncio",
        "AbstractEventLoop",
        "client",
        "sender",
        "part_count",
        "big",
        "SaveBigFilePartRequest",
        "file_id",
        "index",
        "part_count",
        "SaveFilePartRequest",
        "file_id",
        "index",
        "stride",
        "loop",
        "data",
        "previous",
        "previous",
        "loop",
        "create_task",
        "_next",
        "data",
        "data",
        "request",
        "data",
        "log",
        "debug",
        "request",
        "file_part",
        "part_count",
        "len",
        "data",
        "client",
        "_call",
        "sender",
        "request",
        "request",
        "file_part",
        "stride",
        "previous",
        "previous",
        "sender",
        "disconnect",
        "TelegramClient",
        "asyncio",
        "AbstractEventLoop",
        "Optional",
        "Union",
        "DownloadSender",
        "UploadSender",
        "AuthKey",
        "client",
        "TelegramClient",
        "dc_id",
        "Optional",
        "client",
        "client",
        "loop",
        "dc_id",
        "client",
        "session",
        "dc_id",
        "dc_id",
        "client",
        "session",
        "dc_id",
        "dc_id",
        "client",
        "session",
        "auth_key",
        "asyncio",
        "gather",
        "sender",
        "disconnect",
        "sender",
        "senders",
        "staticmethod",
        "file_size",
        "max_count",
        "full_size",
        "file_size",
        "full_size",
        "max_count",
        "math",
        "ceil",
        "file_size",
        "full_size",
        "max_count",
        "connections",
        "file",
        "TypeLocation",
        "part_count",
        "part_size",
        "divmod",
        "part_count",
        "connections",
        "remainder",
        "remainder",
        "remainder",
        "minimum",
        "minimum",
        "_create_download_sender",
        "file",
        "part_size",
        "connections",
        "part_size",
        "get_part_count",
        "asyncio",
        "gather",
        "_create_download_sender",
        "file",
        "i",
        "part_size",
        "connections",
        "part_size",
        "get_part_count",
        "i",
        "connections",
        "file",
        "TypeLocation",
        "index",
        "part_size",
        "stride",
        "part_count",
        "DownloadSender",
        "DownloadSender",
        "client",
        "_create_sender",
        "file",
        "index",
        "part_size",
        "part_size",
        "stride",
        "part_count",
        "connections",
        "file_id",
        "part_count",
        "big",
        "_create_upload_sender",
        "file_id",
        "part_count",
        "big",
        "connections",
        "asyncio",
        "gather",
        "_create_upload_sender",
        "file_id",
        "part_count",
        "big",
        "i",
        "connections",
        "i",
        "connections",
        "file_id",
        "part_count",
        "big",
        "index",
        "stride",
        "UploadSender",
        "UploadSender",
        "client",
        "_create_sender",
        "file_id",
        "part_count",
        "big",
        "index",
        "stride",
        "loop",
        "loop",
        "MTProtoSender",
        "client",
        "_get_dc",
        "dc_id",
        "MTProtoSender",
        "auth_key",
        "loggers",
        "client",
        "_log",
        "sender",
        "connect",
        "client",
        "_connection",
        "dc",
        "ip_address",
        "dc",
        "port",
        "dc",
        "id",
        "loggers",
        "client",
        "_log",
        "proxy",
        "client",
        "_proxy",
        "auth_key",
        "log",
        "debug",
        "dc_id",
        "client",
        "ExportAuthorizationRequest",
        "dc_id",
        "client",
        "_init_request",
        "ImportAuthorizationRequest",
        "id",
        "auth",
        "id",
        "auth",
        "InvokeWithLayerRequest",
        "LAYER",
        "client",
        "_init_request",
        "sender",
        "send",
        "req",
        "sender",
        "auth_key",
        "sender",
        "file_id",
        "file_size",
        "part_size_kb",
        "Optional",
        "connection_count",
        "Optional",
        "Tuple",
        "connection_count",
        "_get_connection_count",
        "file_size",
        "part_size_kb",
        "utils",
        "get_appropriated_part_size",
        "file_size",
        "file_size",
        "part_size",
        "part_size",
        "file_size",
        "_init_upload",
        "connection_count",
        "file_id",
        "part_count",
        "is_large",
        "part_size",
        "part_count",
        "is_large",
        "part",
        "senders",
        "upload_ticker",
        "next",
        "part",
        "upload_ticker",
        "len",
        "senders",
        "_cleanup",
        "file",
        "TypeLocation",
        "file_size",
        "part_size_kb",
        "Optional",
        "connection_count",
        "Optional",
        "AsyncGenerator",
        "connection_count",
        "_get_connection_count",
        "file_size",
        "part_size_kb",
        "utils",
        "get_appropriated_part_size",
        "file_size",
        "math",
        "ceil",
        "file_size",
        "part_size",
        "log",
        "debug",
        "connection_count",
        "part_size",
        "part_count",
        "file",
        "_init_download",
        "connection_count",
        "file",
        "part_count",
        "part_size",
        "part",
        "part_count",
        "sender",
        "senders",
        "tasks",
        "append",
        "loop",
        "create_task",
        "sender",
        "next",
        "task",
        "tasks",
        "task",
        "data",
        "data",
        "part",
        "log",
        "debug",
        "part",
        "log",
        "debug",
        "_cleanup",
        "DefaultDict",
        "asyncio",
        "Lock",
        "defaultdict",
        "asyncio",
        "Lock",
        "file_to_stream",
        "BinaryIO",
        "chunk_size",
        "file_to_stream",
        "read",
        "chunk_size",
        "data_read",
        "data_read",
        "client",
        "TelegramClient",
        "response",
        "BinaryIO",
        "progress_callback",
        "callable",
        "Tuple",
        "TypeInputFile",
        "helpers",
        "generate_random_long",
        "os",
        "path",
        "getsize",
        "response",
        "name",
        "hashlib",
        "md5",
        "ParallelTransferrer",
        "client",
        "uploader",
        "init_upload",
        "file_id",
        "file_size",
        "data",
        "stream_file",
        "response",
        "progress_callback",
        "progress_callback",
        "response",
        "tell",
        "file_size",
        "inspect",
        "isawaitable",
        "r",
        "r",
        "is_large",
        "hash_md5",
        "update",
        "data",
        "len",
        "buffer",
        "len",
        "data",
        "part_size",
        "uploader",
        "upload",
        "data",
        "len",
        "buffer",
        "len",
        "data",
        "new_len",
        "part_size",
        "part_size",
        "len",
        "buffer",
        "buffer",
        "extend",
        "data",
        "cutoff",
        "uploader",
        "upload",
        "buffer",
        "buffer",
        "clear",
        "buffer",
        "extend",
        "data",
        "cutoff",
        "buffer",
        "extend",
        "data",
        "len",
        "buffer",
        "uploader",
        "upload",
        "buffer",
        "uploader",
        "finish_upload",
        "is_large",
        "InputFileBig",
        "file_id",
        "part_count",
        "filename",
        "file_size",
        "InputFile",
        "file_id",
        "part_count",
        "filename",
        "hash_md5",
        "hexdigest",
        "file_size",
        "client",
        "TelegramClient",
        "location",
        "TypeLocation",
        "BinaryIO",
        "progress_callback",
        "callable",
        "BinaryIO",
        "location",
        "size",
        "utils",
        "get_input_location",
        "location",
        "ParallelTransferrer",
        "client",
        "dc_id",
        "downloader",
        "download",
        "location",
        "size",
        "x",
        "downloaded",
        "write",
        "x",
        "progress_callback",
        "progress_callback",
        "tell",
        "size",
        "inspect",
        "isawaitable",
        "r",
        "r",
        "client",
        "TelegramClient",
        "file",
        "BinaryIO",
        "name",
        "progress_callback",
        "callable",
        "TypeInputFile",
        "filename",
        "name",
        "_internal_transfer_to_telegram",
        "client",
        "file",
        "progress_callback"
    ],
    "literals": [
        "\"\"",
        "\"telethon\"",
        "b\"\"",
        "b\"\"",
        "f\"Sending file part {self.request.file_part}/{self.part_count}\"",
        "f\" with {len(data)} bytes\"",
        "f\"Exporting auth to DC {self.dc_id}\"",
        "\"Starting parallel download: \"",
        "f\"{connection_count} {part_size} {part_count} {file!s}\"",
        "f\"Part {part} downloaded\"",
        "\"Parallel download finished, cleaning up connections\""
    ],
    "variables": [
        "filename",
        "async_encrypt_attachment",
        "log",
        "TypeLocation",
        "client",
        "sender",
        "request",
        "remaining",
        "stride",
        "sender",
        "client",
        "request",
        "stride",
        "remaining",
        "result",
        "client",
        "sender",
        "request",
        "part_count",
        "stride",
        "previous",
        "loop",
        "client",
        "sender",
        "part_count",
        "request",
        "request",
        "stride",
        "previous",
        "loop",
        "previous",
        "client",
        "loop",
        "dc_id",
        "senders",
        "auth_key",
        "upload_ticker",
        "client",
        "loop",
        "dc_id",
        "auth_key",
        "senders",
        "upload_ticker",
        "senders",
        "minimum",
        "remainder",
        "senders",
        "senders",
        "dc",
        "sender",
        "auth",
        "query",
        "req",
        "auth_key",
        "connection_count",
        "part_size",
        "part_count",
        "is_large",
        "upload_ticker",
        "connection_count",
        "part_size",
        "part_count",
        "part",
        "tasks",
        "data",
        "parallel_transfer_locks",
        "data_read",
        "file_id",
        "file_size",
        "hash_md5",
        "uploader",
        "part_size",
        "part_count",
        "is_large",
        "buffer",
        "r",
        "new_len",
        "cutoff",
        "size",
        "dc_id",
        "location",
        "downloader",
        "downloaded",
        "r",
        "filename"
    ],
    "comments": [
        "The first cross-DC sender will export+import the authorization, so we always create it",
        "before creating any other senders.",
        "We lock the transfers because telegram has connection count limits"
    ],
    "docstrings": [
        "\"\"\"\n> Based on parallel_file_transfer.py from mautrix-telegram, with permission to distribute under the MIT license\n> Copyright (C) 2019 Tulir Asokan - https://github.com/tulir/mautrix-telegram\n\"\"\""
    ],
    "functions": [
        "next",
        "disconnect",
        "next",
        "_next",
        "disconnect",
        "_cleanup",
        "_get_connection_count",
        "_init_download",
        "get_part_count",
        "_create_download_sender",
        "_init_upload",
        "_create_upload_sender",
        "_create_sender",
        "init_upload",
        "upload",
        "finish_upload",
        "download",
        "stream_file",
        "_internal_transfer_to_telegram",
        "download_file",
        "upload_file"
    ],
    "classes": [
        "DownloadSender",
        "UploadSender",
        "ParallelTransferrer"
    ]
}