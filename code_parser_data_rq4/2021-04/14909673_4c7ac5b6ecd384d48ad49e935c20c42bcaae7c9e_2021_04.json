{
    "identifiers": [
        "abc",
        "collections",
        "configparser",
        "errno",
        "io",
        "logging",
        "os",
        "typing",
        "Any",
        "BinaryIO",
        "Dict",
        "Type",
        "grr_response_core",
        "lib",
        "util",
        "compat",
        "yaml",
        "SaveDataError",
        "ReadDataError",
        "ReadDataError",
        "metaclass",
        "abc",
        "ABCMeta",
        "config_path",
        "config_path",
        "__class__",
        "_config_path",
        "property",
        "_config_path",
        "abc",
        "abstractmethod",
        "NotImplementedError",
        "abc",
        "abstractmethod",
        "raw_data",
        "Dict",
        "Any",
        "NotImplementedError",
        "abc",
        "abstractmethod",
        "Dict",
        "Any",
        "NotImplementedError",
        "GRRConfigParser",
        "abc",
        "abstractmethod",
        "raw_data",
        "Dict",
        "Any",
        "NotImplementedError",
        "abc",
        "abstractmethod",
        "b",
        "Dict",
        "Any",
        "NotImplementedError",
        "raw_data",
        "Dict",
        "Any",
        "fd",
        "io",
        "BufferedWriter",
        "fd",
        "write",
        "RawDataToBytes",
        "raw_data",
        "fd",
        "BinaryIO",
        "Dict",
        "Any",
        "RawDataFromBytes",
        "fd",
        "read",
        "raw_data",
        "Dict",
        "Any",
        "config_path",
        "SaveDataPathNotSpecifiedError",
        "logging",
        "info",
        "config_path",
        "os",
        "makedirs",
        "os",
        "path",
        "dirname",
        "config_path",
        "OSError",
        "os",
        "O_WRONLY",
        "os",
        "O_CREAT",
        "os",
        "O_TRUNC",
        "os",
        "open",
        "config_path",
        "mode",
        "os",
        "fdopen",
        "fd",
        "config_file",
        "config_file",
        "write",
        "RawDataToBytes",
        "raw_data",
        "OSError",
        "e",
        "logging",
        "exception",
        "config_path",
        "e",
        "SaveDataError",
        "config_path",
        "e",
        "e",
        "Dict",
        "Any",
        "config_path",
        "ReadDataPathNotSpecifiedError",
        "io",
        "open",
        "config_path",
        "fd",
        "ReadDataFromFD",
        "fd",
        "OSError",
        "e",
        "e",
        "errno",
        "errno",
        "EACCES",
        "ReadDataPermissionError",
        "e",
        "e",
        "collections",
        "OrderedDict",
        "__class__",
        "_config_path",
        "GRRConfigFileParser",
        "raw_data",
        "Dict",
        "Any",
        "_Parser",
        "key",
        "value",
        "raw_data",
        "items",
        "parser",
        "key",
        "value",
        "value",
        "io",
        "StringIO",
        "parser",
        "write",
        "sio",
        "sio",
        "getvalue",
        "encode",
        "b",
        "Dict",
        "Any",
        "_Parser",
        "parser",
        "read_file",
        "b",
        "decode",
        "splitlines",
        "collections",
        "OrderedDict",
        "section",
        "parser",
        "sections",
        "key",
        "value",
        "parser",
        "items",
        "section",
        "join",
        "section",
        "key",
        "value",
        "raw_data",
        "configparser",
        "RawConfigParser",
        "parser",
        "GRRConfigFileParser",
        "raw_data",
        "Dict",
        "Any",
        "yaml",
        "Dump",
        "raw_data",
        "encode",
        "b",
        "Dict",
        "Any",
        "yaml",
        "Parse",
        "b",
        "decode",
        "collections",
        "OrderedDict",
        "GRRConfigParser",
        "data",
        "parser",
        "GRRConfigFileParser",
        "data",
        "parser",
        "raw_data",
        "Dict",
        "Any",
        "SaveDataError",
        "Dict",
        "Any",
        "_parser",
        "RawDataFromBytes",
        "_data",
        "__class__",
        "_data",
        "_parser",
        "Dict",
        "Type",
        "GRRConfigParser",
        "scheme",
        "parser_cls",
        "Type",
        "GRRConfigParser",
        "parser_cls",
        "path",
        "Type",
        "GRRConfigParser",
        "path",
        "split",
        "scheme",
        "parser_cls",
        "_ADDITIONAL_PARSERS",
        "items",
        "scheme",
        "path_scheme",
        "parser_cls",
        "os",
        "path",
        "splitext",
        "path",
        "extension",
        "YamlConfigFileParser",
        "IniConfigFileParser",
        "path",
        "GRRConfigParser",
        "_GetParserClassFromPath",
        "path",
        "cls",
        "path"
    ],
    "literals": [
        "\"<%s config_path=\\\"%s\\\">\"",
        "\"GRRConfigParser\"",
        "\"Parser's config_path is empty.\"",
        "\"Writing back configuration to file %s\"",
        "\"wb\"",
        "\"Unable to write config file %s: %s.\"",
        "f\"Unable to write config file {self.config_path}: {e}.\"",
        "\"Parser's config_path is empty.\"",
        "\"rb\"",
        "\"GRRConfigFileParser\"",
        "\"\"",
        "\"utf-8\"",
        "\"utf-8\"",
        "\".\"",
        "\"utf-8\"",
        "\"utf-8\"",
        "\"\"",
        "\"File parser initialized from bytes can't save data.\"",
        "\"FileParserDataWrapper\"",
        "\"://\"",
        "\".yaml\"",
        "\".yml\""
    ],
    "variables": [
        "_config_path",
        "mode",
        "fd",
        "parser",
        "sio",
        "parser",
        "raw_data",
        "raw_data",
        "parser",
        "parser",
        "optionxform",
        "_data",
        "_parser",
        "_ADDITIONAL_PARSERS",
        "_ADDITIONAL_PARSERS",
        "scheme",
        "path_scheme",
        "extension",
        "cls"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Ensure intermediate directories exist",
        "We can not use the standard open() call because we need to",
        "enforce restrictive file permissions on the created file.",
        "TODO(user): a normal \"open\" would do, but we have a test",
        "in config_lib_test.py that relies on mocking io.open.",
        "Specifically catch access denied errors, this usually indicates the",
        "user wanted to read the file, and it existed, but they lacked the",
        "permissions.",
        "pytype: disable=not-instantiable",
        "Use an empty config_path.",
        "Find the configuration parser.",
        "Handle the filename.",
        "pytype: disable=not-instantiable"
    ],
    "docstrings": [
        "\"\"\"GRR config parsing code.\"\"\"",
        "\"\"\"Raised when config data can't be saved.\"\"\"",
        "\"\"\"Raised on save, if config path is not specified.\"\"\"",
        "\"\"\"Raised when config data can't be read.\"\"\"",
        "\"\"\"Raised on read, if config path is not specified.\"\"\"",
        "\"\"\"Raised when config is present but can't be accessed.\"\"\"",
        "\"\"\"The base class for all GRR configuration parsers.\"\"\"",
        "\"\"\"Convert the file to a more suitable data structure.\n\n    Returns:\n    The standard data format from this method is for example:\n\n    {\n     name: default_value;\n     name2: default_value2;\n\n     \"Context1\": {\n         name: value,\n         name2: value,\n\n         \"Nested Context\" : {\n           name: value;\n         };\n      },\n     \"Context2\": {\n         name: value,\n      }\n    }\n\n    i.e. raw_data is an OrderedDict() with keys representing parameter names\n    and values representing values. Contexts are represented by nested\n    OrderedDict() structures with similar format.\n\n    Note that support for contexts is optional and depends on the config file\n    format. If contexts are not supported, a flat OrderedDict() is returned.\n    \"\"\"",
        "\"\"\"Base class for file-based parsers.\"\"\"",
        "\"\"\"Store the raw data as our configuration.\"\"\"",
        "\"\"\"A parser for ini style config files.\"\"\"",
        "\"\"\"A parser for yaml style config files.\"\"\"",
        "\"\"\"Wrapper that makes GRRConfigFileParser read data from predefined bytes.\"\"\"",
        "\"\"\"Returns the appropriate parser class from the path.\"\"\"",
        "\"\"\"Returns the appropriate parser class from the path.\"\"\""
    ],
    "functions": [
        "__str__",
        "config_path",
        "Copy",
        "SaveData",
        "ReadData",
        "RawDataToBytes",
        "RawDataFromBytes",
        "SaveDataToFD",
        "ReadDataFromFD",
        "SaveData",
        "ReadData",
        "Copy",
        "RawDataToBytes",
        "RawDataFromBytes",
        "_Parser",
        "RawDataToBytes",
        "RawDataFromBytes",
        "SaveData",
        "ReadData",
        "Copy",
        "RegisterParserClass",
        "_GetParserClassFromPath",
        "GetParserFromPath"
    ],
    "classes": [
        "SaveDataError",
        "SaveDataPathNotSpecifiedError",
        "ReadDataError",
        "ReadDataPathNotSpecifiedError",
        "ReadDataPermissionError",
        "GRRConfigParser",
        "GRRConfigFileParser",
        "IniConfigFileParser",
        "YamlConfigFileParser",
        "FileParserDataWrapper"
    ]
}