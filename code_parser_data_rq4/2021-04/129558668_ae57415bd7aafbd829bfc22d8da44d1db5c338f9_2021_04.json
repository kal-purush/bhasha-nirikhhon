{
    "identifiers": [
        "BN",
        "bufferToHex",
        "isValidAddress",
        "toBuffer",
        "t",
        "assertHardhatInvariant",
        "HardhatError",
        "ERRORS",
        "t",
        "BN",
        "u",
        "c",
        "isRpcQuantityString",
        "u",
        "t",
        "BN",
        "toBuffer",
        "u",
        "t",
        "u",
        "c",
        "t",
        "t",
        "Buffer",
        "u",
        "c",
        "isRpcDataString",
        "u",
        "t",
        "toBuffer",
        "u",
        "t",
        "u",
        "c",
        "t",
        "t",
        "v",
        "v",
        "Buffer",
        "v",
        "v",
        "HASH_LENGTH_BYTES",
        "u",
        "c",
        "isRpcHashString",
        "u",
        "t",
        "toBuffer",
        "u",
        "t",
        "u",
        "c",
        "t",
        "t",
        "v",
        "v",
        "Buffer",
        "v",
        "v",
        "ADDRESS_LENGTH_BYTES",
        "u",
        "c",
        "isRpcAddressString",
        "u",
        "t",
        "toBuffer",
        "u",
        "t",
        "u",
        "c",
        "t",
        "t",
        "isInteger",
        "u",
        "c",
        "isInteger",
        "u",
        "u",
        "t",
        "u",
        "t",
        "u",
        "c",
        "t",
        "quantity",
        "rpcQuantityToBN",
        "quantity",
        "quantity",
        "isRpcQuantityString",
        "quantity",
        "HardhatError",
        "ERRORS",
        "quantity",
        "toBuffer",
        "quantity",
        "BN",
        "buffer",
        "n",
        "assertHardhatInvariant",
        "n",
        "BN",
        "n",
        "n",
        "data",
        "rpcDataToBN",
        "data",
        "data",
        "BN",
        "rpcDataToBuffer",
        "data",
        "buffer",
        "padToBytes",
        "bufferToHex",
        "buffer",
        "padToBytes",
        "s",
        "padToBytes",
        "s",
        "padToBytes",
        "s",
        "s",
        "s",
        "data",
        "isRpcDataString",
        "data",
        "HardhatError",
        "ERRORS",
        "data",
        "toBuffer",
        "data",
        "u",
        "u",
        "u",
        "u",
        "u",
        "u",
        "u",
        "u",
        "u",
        "u",
        "u",
        "u",
        "isRpcDataString",
        "u",
        "u",
        "u",
        "u",
        "safeIsValidAddress",
        "u",
        "num",
        "num",
        "num",
        "u",
        "isValid",
        "isValidAddress",
        "u",
        "e",
        "isValid"
    ],
    "literals": [
        "\"ethereumjs-util\"",
        "\"io-ts\"",
        "\"../../errors\"",
        "\"../../errors-list\"",
        "\"QUANTITY\"",
        "\"DATA\"",
        "\"HASH\"",
        "\"ADDRESS\"",
        "\"Unsigned integer\"",
        "string",
        "string",
        "string",
        "\"number\"",
        "\"Expected number\"",
        "0x${n.toString(16)}",
        "string",
        "string",
        "string",
        "0x${\"0\".repeat(padToBytes * 2 + 2 - s.length)}${s.slice(2)}",
        "\"0\"",
        "string",
        "string",
        "\"string\"",
        "string",
        "\"string\"",
        "string",
        "\"string\"",
        "string",
        "\"string\"",
        "string"
    ],
    "variables": [
        "ADDRESS_LENGTH_BYTES",
        "HASH_LENGTH_BYTES",
        "rpcQuantity",
        "rpcData",
        "rpcHash",
        "rpcAddress",
        "rpcUnsignedInteger",
        "buffer",
        "s",
        "isValid"
    ],
    "comments": [
        "Conversion functions",
        "We validate it in case a value gets here through a cast or any",
        "We validate it in case a value gets here through a cast or any",
        "Type guards",
        "This try catch should be here until this is released: https://github.com/ethereumjs/ethereumjs-monorepo/pull/1174"
    ],
    "docstrings": [
        "* Transforms a QUANTITY into a number. It should only be used if you are 100% sure that the value\n * fits in a number.",
        "* Transforms a DATA into a number. It should only be used if you are 100% sure that the data\n * represents a value fits in a number."
    ],
    "functions": [
        "rpcQuantityToNumber",
        "rpcQuantityToBN",
        "numberToRpcQuantity",
        "rpcDataToNumber",
        "rpcDataToBN",
        "bufferToRpcData",
        "rpcDataToBuffer",
        "isRpcQuantityString",
        "isRpcDataString",
        "isRpcHashString",
        "isRpcAddressString",
        "isInteger",
        "safeIsValidAddress"
    ],
    "classes": []
}