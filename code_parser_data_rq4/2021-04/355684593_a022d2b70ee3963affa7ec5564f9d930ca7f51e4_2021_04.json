{
    "identifiers": [
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "java",
        "util",
        "javax",
        "swing",
        "JOptionPane",
        "javax",
        "swing",
        "table",
        "pidCounter",
        "llp",
        "ready",
        "blocked",
        "running",
        "initComponents",
        "pidCounter",
        "ready",
        "blocked",
        "pidCounter",
        "pidCounter",
        "ready",
        "add",
        "pidCounter",
        "ProcessStatus",
        "FREE",
        "pidCounter",
        "drawTable",
        "SuppressWarnings",
        "mySeperator",
        "addproc",
        "procLabel",
        "scroller",
        "firstTable",
        "controlArea",
        "processKill",
        "inputPriority",
        "exit",
        "labelBig",
        "timeExceeded",
        "setDefaultCloseOperation",
        "javax",
        "swing",
        "WindowConstants",
        "EXIT_ON_CLOSE",
        "addproc",
        "setText",
        "addproc",
        "addActionListener",
        "evt",
        "addProcessButtonPress",
        "evt",
        "procLabel",
        "setText",
        "firstTable",
        "setModel",
        "canEdit",
        "rowIndex",
        "columnIndex",
        "canEdit",
        "columnIndex",
        "scroller",
        "setViewportView",
        "firstTable",
        "firstTable",
        "getColumnModel",
        "getColumnCount",
        "firstTable",
        "getColumnModel",
        "getColumn",
        "setResizable",
        "firstTable",
        "getColumnModel",
        "getColumn",
        "setResizable",
        "firstTable",
        "getColumnModel",
        "getColumn",
        "setResizable",
        "controlArea",
        "setText",
        "timeExceeded",
        "setText",
        "timeExceeded",
        "addActionListener",
        "evt",
        "timeSliceExceededButtonPress",
        "evt",
        "processKill",
        "setText",
        "processKill",
        "addActionListener",
        "evt",
        "killProcessButtonPress",
        "evt",
        "inputPriority",
        "setText",
        "exit",
        "setText",
        "exit",
        "addActionListener",
        "evt",
        "exitButtonPress",
        "evt",
        "labelBig",
        "setText",
        "layout",
        "getContentPane",
        "getContentPane",
        "setLayout",
        "layout",
        "layout",
        "setHorizontalGroup",
        "layout",
        "createParallelGroup",
        "javax",
        "swing",
        "GroupLayout",
        "Alignment",
        "LEADING",
        "addGroup",
        "layout",
        "createSequentialGroup",
        "addContainerGap",
        "addGroup",
        "layout",
        "createParallelGroup",
        "javax",
        "swing",
        "GroupLayout",
        "Alignment",
        "LEADING",
        "addComponent",
        "scroller",
        "addComponent",
        "mySeperator",
        "addGroup",
        "layout",
        "createSequentialGroup",
        "addGroup",
        "layout",
        "createParallelGroup",
        "javax",
        "swing",
        "GroupLayout",
        "Alignment",
        "LEADING",
        "addGroup",
        "layout",
        "createSequentialGroup",
        "addGroup",
        "layout",
        "createParallelGroup",
        "javax",
        "swing",
        "GroupLayout",
        "Alignment",
        "LEADING",
        "addGroup",
        "layout",
        "createSequentialGroup",
        "addGap",
        "addComponent",
        "inputPriority",
        "javax",
        "swing",
        "GroupLayout",
        "PREFERRED_SIZE",
        "javax",
        "swing",
        "GroupLayout",
        "DEFAULT_SIZE",
        "javax",
        "swing",
        "GroupLayout",
        "PREFERRED_SIZE",
        "addPreferredGap",
        "javax",
        "swing",
        "LayoutStyle",
        "ComponentPlacement",
        "RELATED",
        "addComponent",
        "addproc",
        "addComponent",
        "labelBig",
        "addGap",
        "addGroup",
        "layout",
        "createParallelGroup",
        "javax",
        "swing",
        "GroupLayout",
        "Alignment",
        "LEADING",
        "addGroup",
        "layout",
        "createSequentialGroup",
        "addGap",
        "addComponent",
        "procLabel",
        "addGap",
        "addGroup",
        "layout",
        "createParallelGroup",
        "javax",
        "swing",
        "GroupLayout",
        "Alignment",
        "LEADING",
        "addComponent",
        "controlArea",
        "addGroup",
        "layout",
        "createParallelGroup",
        "javax",
        "swing",
        "GroupLayout",
        "Alignment",
        "LEADING",
        "addGroup",
        "layout",
        "createSequentialGroup",
        "addComponent",
        "processKill",
        "javax",
        "swing",
        "GroupLayout",
        "PREFERRED_SIZE",
        "javax",
        "swing",
        "GroupLayout",
        "PREFERRED_SIZE",
        "addGap",
        "addGroup",
        "layout",
        "createSequentialGroup",
        "addComponent",
        "timeExceeded",
        "javax",
        "swing",
        "GroupLayout",
        "PREFERRED_SIZE",
        "javax",
        "swing",
        "GroupLayout",
        "PREFERRED_SIZE",
        "addGap",
        "addComponent",
        "exit",
        "javax",
        "swing",
        "GroupLayout",
        "PREFERRED_SIZE",
        "javax",
        "swing",
        "GroupLayout",
        "PREFERRED_SIZE",
        "addContainerGap",
        "layout",
        "setVerticalGroup",
        "layout",
        "createParallelGroup",
        "javax",
        "swing",
        "GroupLayout",
        "Alignment",
        "LEADING",
        "addGroup",
        "javax",
        "swing",
        "GroupLayout",
        "Alignment",
        "TRAILING",
        "layout",
        "createSequentialGroup",
        "addContainerGap",
        "addComponent",
        "scroller",
        "javax",
        "swing",
        "GroupLayout",
        "PREFERRED_SIZE",
        "javax",
        "swing",
        "GroupLayout",
        "PREFERRED_SIZE",
        "addPreferredGap",
        "javax",
        "swing",
        "LayoutStyle",
        "ComponentPlacement",
        "RELATED",
        "javax",
        "swing",
        "GroupLayout",
        "DEFAULT_SIZE",
        "MAX_VALUE",
        "addComponent",
        "mySeperator",
        "javax",
        "swing",
        "GroupLayout",
        "PREFERRED_SIZE",
        "javax",
        "swing",
        "GroupLayout",
        "PREFERRED_SIZE",
        "addGroup",
        "layout",
        "createParallelGroup",
        "javax",
        "swing",
        "GroupLayout",
        "Alignment",
        "LEADING",
        "addGroup",
        "layout",
        "createSequentialGroup",
        "addComponent",
        "controlArea",
        "addPreferredGap",
        "javax",
        "swing",
        "LayoutStyle",
        "ComponentPlacement",
        "RELATED",
        "addGroup",
        "layout",
        "createParallelGroup",
        "javax",
        "swing",
        "GroupLayout",
        "Alignment",
        "BASELINE",
        "addComponent",
        "processKill",
        "addGroup",
        "layout",
        "createSequentialGroup",
        "addPreferredGap",
        "javax",
        "swing",
        "LayoutStyle",
        "ComponentPlacement",
        "RELATED",
        "addComponent",
        "procLabel",
        "addPreferredGap",
        "javax",
        "swing",
        "LayoutStyle",
        "ComponentPlacement",
        "RELATED",
        "addGroup",
        "layout",
        "createParallelGroup",
        "javax",
        "swing",
        "GroupLayout",
        "Alignment",
        "BASELINE",
        "addComponent",
        "addproc",
        "addComponent",
        "inputPriority",
        "javax",
        "swing",
        "GroupLayout",
        "PREFERRED_SIZE",
        "javax",
        "swing",
        "GroupLayout",
        "DEFAULT_SIZE",
        "javax",
        "swing",
        "GroupLayout",
        "PREFERRED_SIZE",
        "addPreferredGap",
        "javax",
        "swing",
        "LayoutStyle",
        "ComponentPlacement",
        "RELATED",
        "addGroup",
        "layout",
        "createParallelGroup",
        "javax",
        "swing",
        "GroupLayout",
        "Alignment",
        "LEADING",
        "addGroup",
        "layout",
        "createSequentialGroup",
        "addGroup",
        "layout",
        "createParallelGroup",
        "javax",
        "swing",
        "GroupLayout",
        "Alignment",
        "BASELINE",
        "addComponent",
        "timeExceeded",
        "addComponent",
        "exit",
        "addGap",
        "addGroup",
        "javax",
        "swing",
        "GroupLayout",
        "Alignment",
        "TRAILING",
        "layout",
        "createSequentialGroup",
        "addComponent",
        "labelBig",
        "addContainerGap",
        "pack",
        "evt",
        "ready",
        "clear",
        "blocked",
        "clear",
        "running",
        "model",
        "firstTable",
        "getModel",
        "model",
        "setRowCount",
        "ready",
        "blocked",
        "evt",
        "model",
        "firstTable",
        "getModel",
        "row",
        "firstTable",
        "getSelectedRow",
        "rowData",
        "model",
        "getDataVector",
        "elementAt",
        "row",
        "targetPid",
        "rowData",
        "elementAt",
        "status",
        "rowData",
        "elementAt",
        "p",
        "ready",
        "p",
        "getPid",
        "targetPid",
        "p",
        "setStatus",
        "ProcessStatus",
        "FREE",
        "p",
        "setPid",
        "reDrawTable",
        "evt",
        "isInteger",
        "inputPriority",
        "getText",
        "getPriority",
        "parseInt",
        "inputPriority",
        "getText",
        "model",
        "firstTable",
        "getModel",
        "firstTable",
        "setModel",
        "model",
        "getPriority",
        "running",
        "running",
        "pidCounter",
        "getPriority",
        "ProcessStatus",
        "FREE",
        "isThereSpace",
        "ready",
        "getPriority",
        "addMem",
        "getPriority",
        "pidCounter",
        "dothegarb",
        "isThereSpace",
        "ready",
        "getPriority",
        "addMem",
        "getPriority",
        "pidCounter",
        "JOptionPane",
        "showMessageDialog",
        "reDrawTable",
        "JOptionPane",
        "showMessageDialog",
        "JOptionPane",
        "showMessageDialog",
        "evt",
        "ready",
        "clear",
        "blocked",
        "clear",
        "running",
        "model",
        "firstTable",
        "getModel",
        "model",
        "setRowCount",
        "pidCounter",
        "ready",
        "blocked",
        "running",
        "pidCounter",
        "ProcessStatus",
        "FREE",
        "pidCounter",
        "initialSet",
        "drawTable",
        "evt",
        "exit",
        "evt",
        "skip",
        "i",
        "i",
        "ready",
        "size",
        "i",
        "ready",
        "get",
        "llp",
        "getStatus",
        "ProcessStatus",
        "FREE",
        "skip",
        "garbageCollectInThisSpot",
        "i",
        "skip",
        "modInc",
        "reDrawTable",
        "skip",
        "i",
        "i",
        "ready",
        "size",
        "i",
        "ready",
        "get",
        "llp",
        "getStatus",
        "ProcessStatus",
        "FREE",
        "skip",
        "garbageCollectInThisSpot",
        "i",
        "skip",
        "modInc",
        "reDrawTable",
        "ready",
        "size",
        "llp",
        "ready",
        "get",
        "llp",
        "getStatus",
        "ProcessStatus",
        "FREE",
        "ready",
        "get",
        "llp",
        "getStatus",
        "ProcessStatus",
        "FREE",
        "ready",
        "get",
        "llp",
        "setMem",
        "ready",
        "get",
        "llp",
        "getMem",
        "ready",
        "get",
        "llp",
        "getMem",
        "ready",
        "remove",
        "llp",
        "llp",
        "ready",
        "size",
        "ready",
        "get",
        "llp",
        "getStatus",
        "ProcessStatus",
        "FREE",
        "ready",
        "get",
        "llp",
        "getStatus",
        "ProcessStatus",
        "FREE",
        "ready",
        "get",
        "llp",
        "setMem",
        "ready",
        "get",
        "llp",
        "getMem",
        "ready",
        "get",
        "llp",
        "getMem",
        "ready",
        "remove",
        "llp",
        "ready",
        "get",
        "llp",
        "getStatus",
        "ProcessStatus",
        "FREE",
        "ready",
        "get",
        "llp",
        "getStatus",
        "ProcessStatus",
        "FREE",
        "ready",
        "get",
        "llp",
        "getStatus",
        "ProcessStatus",
        "FREE",
        "ready",
        "get",
        "llp",
        "setMem",
        "ready",
        "get",
        "llp",
        "getMem",
        "ready",
        "get",
        "llp",
        "getMem",
        "ready",
        "get",
        "llp",
        "getMem",
        "ready",
        "remove",
        "llp",
        "ready",
        "remove",
        "llp",
        "llp",
        "ready",
        "get",
        "llp",
        "getStatus",
        "ProcessStatus",
        "FREE",
        "ready",
        "get",
        "llp",
        "getStatus",
        "ProcessStatus",
        "FREE",
        "ready",
        "get",
        "llp",
        "setMem",
        "ready",
        "get",
        "llp",
        "getMem",
        "ready",
        "get",
        "llp",
        "getMem",
        "ready",
        "remove",
        "ready",
        "get",
        "llp",
        "ready",
        "get",
        "llp",
        "getStatus",
        "ProcessStatus",
        "FREE",
        "ready",
        "get",
        "llp",
        "getStatus",
        "ProcessStatus",
        "FREE",
        "ready",
        "get",
        "llp",
        "setMem",
        "ready",
        "get",
        "llp",
        "getMem",
        "ready",
        "get",
        "llp",
        "getMem",
        "ready",
        "remove",
        "llp",
        "llp",
        "evt",
        "model",
        "firstTable",
        "getModel",
        "row",
        "firstTable",
        "getSelectedRow",
        "rowData",
        "model",
        "getDataVector",
        "elementAt",
        "row",
        "rowData",
        "elementAt",
        "ProcessStatus",
        "FREE",
        "running",
        "contextSwitch",
        "targetPid",
        "rowData",
        "elementAt",
        "p",
        "ready",
        "p",
        "getPid",
        "targetPid",
        "p",
        "setStatus",
        "ProcessStatus",
        "BLOCKED",
        "blocked",
        "add",
        "p",
        "ready",
        "remove",
        "p",
        "reDrawTable",
        "evt",
        "model",
        "firstTable",
        "getModel",
        "row",
        "firstTable",
        "getSelectedRow",
        "rowData",
        "model",
        "getDataVector",
        "elementAt",
        "row",
        "rowData",
        "elementAt",
        "ProcessStatus",
        "BLOCKED",
        "targetPid",
        "rowData",
        "elementAt",
        "p",
        "blocked",
        "p",
        "getPid",
        "targetPid",
        "p",
        "setStatus",
        "ProcessStatus",
        "TAKEN",
        "ready",
        "add",
        "p",
        "blocked",
        "remove",
        "p",
        "running",
        "running",
        "contextSwitch",
        "reDrawTable",
        "args",
        "info",
        "javax",
        "swing",
        "UIManager",
        "getInstalledLookAndFeels",
        "equals",
        "info",
        "getName",
        "javax",
        "swing",
        "UIManager",
        "setLookAndFeel",
        "info",
        "getClassName",
        "ex",
        "java",
        "util",
        "logging",
        "Logger",
        "getLogger",
        "getName",
        "log",
        "java",
        "util",
        "logging",
        "Level",
        "SEVERE",
        "ex",
        "ex",
        "java",
        "util",
        "logging",
        "Logger",
        "getLogger",
        "getName",
        "log",
        "java",
        "util",
        "logging",
        "Level",
        "SEVERE",
        "ex",
        "ex",
        "java",
        "util",
        "logging",
        "Logger",
        "getLogger",
        "getName",
        "log",
        "java",
        "util",
        "logging",
        "Level",
        "SEVERE",
        "ex",
        "ex",
        "java",
        "util",
        "logging",
        "Logger",
        "getLogger",
        "getName",
        "log",
        "java",
        "util",
        "logging",
        "Level",
        "SEVERE",
        "ex",
        "java",
        "awt",
        "EventQueue",
        "invokeLater",
        "setVisible",
        "processes",
        "spaceRequested",
        "i",
        "i",
        "processes",
        "size",
        "i",
        "processes",
        "get",
        "llp",
        "getStatus",
        "ProcessStatus",
        "FREE",
        "ready",
        "get",
        "llp",
        "getMem",
        "spaceRequested",
        "modInc",
        "llp",
        "ready",
        "size",
        "llp",
        "llp",
        "m",
        "holder",
        "ready",
        "get",
        "llp",
        "getMem",
        "newM",
        "holder",
        "m",
        "newM",
        "ready",
        "get",
        "llp",
        "setStatus",
        "ProcessStatus",
        "TAKEN",
        "ready",
        "get",
        "llp",
        "setPid",
        "pidCounter",
        "ready",
        "get",
        "llp",
        "setMem",
        "newM",
        "ready",
        "add",
        "llp",
        "pidCounter",
        "m",
        "ProcessStatus",
        "TAKEN",
        "modInc",
        "processes",
        "model",
        "firstTable",
        "getModel",
        "firstTable",
        "setModel",
        "model",
        "processes",
        "stream",
        "process",
        "row",
        "row",
        "process",
        "getPid",
        "process",
        "getStatus",
        "ProcessStatus",
        "BLOCKED",
        "row",
        "row",
        "process",
        "getPriority",
        "row",
        "process",
        "getStatus",
        "row",
        "forEachOrdered",
        "row",
        "model",
        "addRow",
        "row",
        "process",
        "running",
        "populateTable",
        "running",
        "populateTable",
        "ready",
        "populateTable",
        "blocked",
        "populateTable",
        "ready",
        "populateTable",
        "blocked",
        "model",
        "firstTable",
        "getModel",
        "model",
        "setRowCount",
        "drawTable",
        "ready",
        "add",
        "pidCounter",
        "ProcessStatus",
        "TAKEN",
        "pidCounter",
        "ready",
        "add",
        "pidCounter",
        "ProcessStatus",
        "TAKEN",
        "pidCounter",
        "ready",
        "add",
        "pidCounter",
        "ProcessStatus",
        "TAKEN",
        "pidCounter",
        "ready",
        "add",
        "pidCounter",
        "ProcessStatus",
        "TAKEN",
        "pidCounter",
        "ready",
        "size",
        "newRunning",
        "ready",
        "get",
        "newRunning",
        "setStatus",
        "ProcessStatus",
        "FREE",
        "running",
        "running",
        "setStatus",
        "ProcessStatus",
        "BLOCKED",
        "blocked",
        "add",
        "running",
        "ready",
        "remove",
        "newRunning",
        "running",
        "running",
        "setStatus",
        "ProcessStatus",
        "BLOCKED",
        "blocked",
        "add",
        "running",
        "ready",
        "size",
        "newRunning",
        "ready",
        "get",
        "newRunning",
        "setStatus",
        "ProcessStatus",
        "FREE",
        "ready",
        "remove",
        "running",
        "running",
        "setStatus",
        "ProcessStatus",
        "TAKEN",
        "ready",
        "add",
        "running",
        "newRunning",
        "running",
        "running",
        "setStatus",
        "ProcessStatus",
        "BLOCKED",
        "blocked",
        "add",
        "running",
        "s",
        "radix",
        "s",
        "isEmpty",
        "i",
        "i",
        "s",
        "length",
        "i",
        "i",
        "s",
        "charAt",
        "i",
        "s",
        "length",
        "digit",
        "s",
        "charAt",
        "i",
        "radix",
        "controlArea",
        "exit",
        "processKill",
        "labelBig",
        "inputPriority",
        "addproc",
        "procLabel",
        "scroller",
        "mySeperator",
        "firstTable",
        "timeExceeded"
    ],
    "literals": [
        "\"unchecked\"",
        "\"Add\"",
        "\"Add Process\"",
        "\"Process ID\"",
        "\"Memory\"",
        "\"Status\"",
        "\"Control Panel\"",
        "\"Collect Garbage\"",
        "\"Kill Selected\"",
        "\"Memory Request as Integer\"",
        "\"Exit\"",
        "\"First Fist Memory Management System, with Garbage Collection\"",
        "\"There isn't a big enough memory slot, even after garbage collection.\"",
        "\"Please enter a positive integer value greater than 0.\"",
        "\"Please enter an integer value.\"",
        "\"Nimbus\""
    ],
    "variables": [
        "pidCounter",
        "ready",
        "blocked",
        "running",
        "controlArea",
        "exit",
        "processKill",
        "labelBig",
        "inputPriority",
        "addproc",
        "procLabel",
        "scroller",
        "mySeperator",
        "firstTable",
        "timeExceeded"
    ],
    "comments": [
        "Liam Robb, lr003",
        "",
        "running = new Process(pidCounter, 1337, ProcessStatus.BLOCKED); // outside of init, hardcoded",
        "start ready/memory list with mem",
        "status \"FREE\"",
        "--** testing",
        "initialSet(); // ** maybe could still have an implementation of this",
        "--",
        "seem 'global' in relation to program",
        "processBlock = new javax.swing.JButton();",
        "processUnblock = new javax.swing.JButton();",
        "endAll = new javax.swing.JButton();",
        "reset = new javax.swing.JButton();",
        "2d array",
        "heading and define length of first array",
        "processBlock.setText(\"Block Selected\");",
        "processBlock.addActionListener(new java.awt.event.ActionListener() {",
        "public void actionPerformed(java.awt.event.ActionEvent evt) {",
        "blockProcessButtonPress(evt);",
        "}",
        "});",
        "processBlock next line",
        ".addComponent(processBlock, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)",
        ".addComponent(processUnblock, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))",
        ".addComponent(reset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))",
        ".addComponent(endAll, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)",
        "",
        ".addComponent(processBlock)",
        ".addComponent(reset)))",
        ".addComponent(processUnblock)",
        ".addComponent(endAll)",
        "Kills all processes.",
        "maybe keep as a start over button",
        "Kills the selected Process (That is, the process currently highlighted on the table).",
        "seems mostly ok",
        "used to be final",
        "fun other way to iterate through",
        "ready.remove(p);",
        "model.removeRow(row); // ** this is where we might make diff",
        "Remove the process from ArrayList",
        "Adds a Process, given a priority, to the ready ArrayList.",
        "JOptionPane.showMessageDialog(null, \"There isn't a big enough memory slot.\");",
        "Resets the program to its initial state.",
        "this is oitside of init",
        "Exits the program.",
        "time exceed context switch",
        "this increments everything in list rn",
        "running = contextSwitch2(); // ** just call the garbage man on it",
        "smaller garbofunc",
        "this increments everything in list rn",
        "running = contextSwitch2(); // ** just call the garbage man on it",
        "add message?",
        "System.out.println(\"what does it add to, first 2\");",
        "combine",
        "get process and mutate it",
        "with +1 and +0 result same",
        "this one works properly",
        "System.out.println(\"2nd if\");",
        "combine",
        "System.out.println(\"2nd if shouldnt get here at first\");",
        "get process and mutate it",
        "get rid of other",
        "ready.remove pics as if 1 indecied",
        "llp--;",
        "System.out.println(\"last else\");",
        "all 3 ready to be merged",
        "System.out.println(\"removed 3\");",
        "destory the + and - 1's",
        "",
        "destroy next",
        "added one to all ready remove",
        "destroy prev",
        "aaahhhhhhhhhh soooo many",
        "Blocks the selected process.",
        "If blocking the running process, simply context switch",
        "Otherwise move the selected process to the blocked list",
        "Resumes the currently selected blocked process.",
        "this increments everything in list rn",
        "System.out.println(\"the status was free\");",
        "System.out.println(String.valueOf(spaceRequested));",
        "System.out.println(String.valueOf(ready.get(llp).getMem()));",
        "System.out.println(\"did i get here and somehow not add mem?\");",
        "i think maybe -1 for ready.size",
        "llp has to have been modified at this point",
        "pidCounter++;",
        "Populate table with a set of processes",
        "If reading off of blocked list, ignore priority",
        "Populates table with one process",
        "Draw the table from lists.",
        "Collections.sort(ready);",
        "Collections.sort(ready);",
        "Erases contents of the table and redraws it.",
        "Fills the sets with arbitrary initial values.",
        "Switches the running process to the process on the Ready list with the highest priority unless the ready list is empty, in which case it returns null.",
        "for just context switching",
        "input sanitizing",
        "declaring my gui variables",
        "private javax.swing.JButton processBlock;",
        "private javax.swing.JButton endAll;",
        "private javax.swing.JButton reset;",
        "private javax.swing.JButton processUnblock;"
    ],
    "docstrings": [
        "** add a 'where we are int' to simulate LL",
        "** fine for last, but maybe change to demonstrate mem slots?",
        "** swap out this next for initializing it to 1000 mem: pid at 10 is fine, mem = prio",
        "** make our unused task 9",
        "processUnblock.setText(\"Unblock Selected\");\n        processUnblock.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                unblockProcessButtonPress(evt);\n            }\n        });",
        "endAll.setText(\"Kill All\");\n        endAll.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                killsAllButtonPress(evt);\n            }\n        });",
        "** took out directions for easier testing",
        "reset.setText(\"Reset\");\n        reset.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                resetButtonPress(evt);\n            }\n        });",
        "** <<<<<<",
        "** could be repurposed as garb collector -- gutted --",
        "** can be repurposed to deallocate memory, can we change pid to some null value",
        "** needed",
        "** pid can be memory or still process ID",
        "** (int)rowData.elementAt(0) will give the status bit which we are looking for",
        "** could not remove it, and instead just change status",
        "//byebye for now\n        switch(status){ // **  probabaly can get rid of any row altering logic, or use this as part of garbo\n            case FREE:\n                running = null;\n                running = contextSwitch();\n                reDrawTable();\n                break;\n\n            case TAKEN: // ** useful\n                for (Process p : ready) {\n                    if(p.getPid() == targetPid){\n                        ready.remove(p);\n                        break;\n                    }\n                }\n                break;\n\n            case BLOCKED:\n                for (Process p : blocked) {\n                    if(p.getPid() == targetPid){\n                        blocked.remove(p);\n                        break;\n                    }\n                }\n                break;\n\n            default:\n                System.err.println(\"Invalid status\");\n                break;\n        }",
        "** this is changed to ask for memory",
        "** >>>>> add place",
        "** 10 size of buffer",
        "**get the resources needed",
        "** may not need",
        "** new one shouldn't ever be null, but leaving this for now",
        "** never here now",
        "** default everything to ready when we add it, that has 1 to 1 with 'taken mem'",
        "** check if there is space by ff (loop)",
        "** message",
        "** really we need to garbo compact and check again",
        "** these effectively deal with bad input, as they exlude non integer and negatives",
        "** probably need to take this out or modify it, reset needs to wipe memory if modifying",
        "** this is state of table when initial set is called",
        "** should comment this out too",
        "** can keep, but is useless",
        "** think this is useless, this juggles the two highest priority processses",
        "** which i don't think has a one to one parallel with ff memory mangagement",
        "** <<<<<<",
        "** took out else, in off chance that was wrong descision",
        "** took out else, in off chance that was wrong descision",
        "** big if statement incoming",
        "** at the beginning, check here and next in line",
        "** at the end, check here and the one before",
        "** check all three, it can still be two sets of two so more ifs to come",
        "** for this there will be no difference between block and kill",
        "** I don't think there is any point to \"Un\" Deallocating memory",
        "** so I'll throw this out or comment out",
        "Create and display the form",
        "** wearehere changed to llp (linklistpointer) for length purposes",
        "** added to check if there is any space in the 'ready list hijacked to hold the memory'",
        "** took out else, in off chance that was wrong descision",
        "** false alarm, this works, incrementing all including one just added",
        "** for now",
        "** need an easier way to think about modular llp incrementing",
        "** antoher timesaver, only call after calling isThereSpace",
        "** old mem slot number, subtract from this",
        "** I think get rid of this, start from nothing in the memory",
        "** this is setupr",
        "** >>>>>>>",
        "** adding rows could use this method when expanding or shrinking",
        "DefaultTableModel model = (DefaultTableModel) firstTable.getModel();\n        firstTable.setModel(model);\n        Object[] row = new Object[3];\n        row[0] = process.getPid();\n        row[1] = \"Running\";\n        row[2] = process.getStatus();\n        model.addRow(row);",
        "** begin gutting",
        "**end gutting so far",
        "** gutgutgut",
        "** can't be sorting a link list"
    ],
    "functions": [
        "Dispatcher",
        "initComponents",
        "actionPerformed",
        "isCellEditable",
        "actionPerformed",
        "actionPerformed",
        "actionPerformed",
        "killsAllButtonPress",
        "killProcessButtonPress",
        "addProcessButtonPress",
        "resetButtonPress",
        "exitButtonPress",
        "timeSliceExceededButtonPress",
        "dothegarb",
        "garbageCollectInThisSpot",
        "blockProcessButtonPress",
        "unblockProcessButtonPress",
        "main",
        "isThereSpace",
        "modInc",
        "addMem",
        "populateTable",
        "populateTable",
        "drawTable",
        "reDrawTable",
        "initialSet",
        "Process",
        "contextSwitch",
        "Process",
        "contextSwitch2",
        "isInteger"
    ],
    "classes": [
        "Dispatcher"
    ]
}