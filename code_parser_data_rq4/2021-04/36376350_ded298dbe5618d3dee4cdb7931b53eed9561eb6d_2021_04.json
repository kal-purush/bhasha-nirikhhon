{
    "identifiers": [],
    "literals": [
        "function handleInlineEditEvents(editor) {\n        editor.on(\"focus blur\", (e) => {\n            const { target: ed, type: eventType } = e;\n\n            const content = ed.getContent();\n            const dataset = ed.targetElm.dataset;\n            const element = ed.targetElm;\n\n            const data = {\n                dataset,\n                innerHTML: content,\n                element,\n                eventType,\n                isNotDirty: ed.isNotDirty,\n            }\n\n            // For full editor we are adding pointer-events: none to all it children, \n            // this is the way we can capture the click to init in the editor itself, after the editor \n            // is initialized and clicked we set the pointer-events: auto so users can use the editor as intended.\n            if (eventType === \"focus\" && dataset.mode) {\n                ed.bodyElement.classList.add(\"active\");\n            }\n\n            if (eventType === \"blur\" && ed.bodyElement.classList.contains(\"active\")) {\n                ed.bodyElement.classList.remove(\"active\");\n            }\n\n            if (eventType === \"blur\") {\n                e.stopImmediatePropagation();\n                ed.destroy(false);\n            }\n\n            window.contentletEvents.next({\n                name: \"inlineEdit\",\n                data,\n            });\n        });\n    }\n\n    const defaultConfig = {\n        menubar: false,\n        inline: true,\n        valid_styles: {\n            \"*\": \"font-size,font-family,color,text-decoration,text-align\",\n        },\n        powerpaste_word_import: \"clean\",\n        powerpaste_html_import: \"clean\",\n        setup: (editor) => handleInlineEditEvents(editor)\n    };\n\n    const tinyMCEConfig = {\n    minimal: {\n        plugins: [\"link\", \"autolink\"],\n        toolbar: \"bold italic underline | link\",\n        valid_elements: \"strong,em,span[style],a[href]\",\n        content_css: [\"//fonts.googleapis.com/css?family=Lato:300,300i,400,400i\"],\n        ...defaultConfig,\n    },\n    full: {\n        plugins: [\"link\", \"lists\", \"autolink\", \"hr\", \"charmap\"],\n        style_formats: [\n        { title: \"Paragraph\", format: \"p\" },\n        { title: \"Header 1\", format: \"h1\" },\n        { title: \"Header 2\", format: \"h2\" },\n        { title: \"Header 3\", format: \"h3\" },\n        { title: \"Header 4\", format: \"h4\" },\n        { title: \"Header 5\", format: \"h5\" },\n        { title: \"Header 6\", format: \"h6\" },\n        { title: \"Pre\", format: \"pre\" },\n        { title: \"Code\", format: \"code\" },\n        ],\n        toolbar: [\n        \"styleselect | undo redo | bold italic underline | forecolor backcolor | alignleft aligncenter alignright alignfull | numlist bullist outdent indent | hr charmap removeformat | link\",\n        ],\n        ...defaultConfig,\n    },\n    };\n\n    document.addEventListener(\"click\", function (event) {\n        \n    const { target: { dataset } } = event;\n\n    const dataSelector =\n        '[data-inode=\"' +\n        dataset.inode +\n        '\"][data-field-name=\"' +\n        dataset.fieldName +\n        '\"]';\n\n    // if the mode is truthy we initialize tinymce\n        if (dataset.mode) {\n\n            event.stopPropagation();\n            event.preventDefault();\n\n            tinymce\n            .init({\n                ...tinyMCEConfig[dataset.mode],\n                selector: dataSelector,\n            })\n            .then(([ed]) => {\n                ed?.editorCommands.execCommand(\"mceFocus\");\n            });\n        }\n    });"
    ],
    "variables": [
        "INLINE_TINYMCE_SCRIPTS"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [],
    "classes": []
}