{
    "identifiers": [
        "print_function",
        "multiprocessing",
        "optparse",
        "os",
        "signal",
        "subprocess",
        "sys",
        "multiprocessing",
        "cpu_count",
        "sys",
        "stdout",
        "isatty",
        "sys",
        "stdout",
        "isatty",
        "sys",
        "stdout",
        "isatty",
        "sys",
        "stdout",
        "isatty",
        "sys",
        "stdout",
        "isatty",
        "sys",
        "stdout",
        "isatty",
        "sys",
        "stdout",
        "isatty",
        "sys",
        "stdout",
        "isatty",
        "staticmethod",
        "color_codes",
        "join",
        "color_codes",
        "format",
        "begin",
        "colors",
        "sys",
        "stdout",
        "isatty",
        "end",
        "Bcolors",
        "ENDC",
        "sys",
        "stdout",
        "isatty",
        "opts",
        "opts",
        "signal",
        "signal",
        "signal",
        "SIGINT",
        "signal",
        "SIG_IGN",
        "os",
        "environ",
        "copy",
        "nshards",
        "shard",
        "subprocess",
        "check_output",
        "executable",
        "split",
        "stderr",
        "subprocess",
        "STDOUT",
        "env",
        "env",
        "universal_newlines",
        "Bcolors",
        "colorize",
        "Bcolors",
        "OKGREEN",
        "end",
        "sys",
        "stdout",
        "flush",
        "output",
        "subprocess",
        "CalledProcessError",
        "ex",
        "Bcolors",
        "colorize",
        "Bcolors",
        "FAIL",
        "end",
        "sys",
        "stdout",
        "flush",
        "ex",
        "output",
        "optparse",
        "OptionParser",
        "usage",
        "parser",
        "add_option",
        "DEFAULT_NUM_JOBS",
        "help",
        "format",
        "default_",
        "DEFAULT_NUM_JOBS",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "parser",
        "parse_args",
        "executable",
        "parser",
        "print_usage",
        "sys",
        "exit",
        "os",
        "path",
        "isfile",
        "executable",
        "Bcolors",
        "colorize",
        "format",
        "file",
        "executable",
        "Bcolors",
        "FAIL",
        "file",
        "sys",
        "stderr",
        "sys",
        "exit",
        "os",
        "access",
        "executable",
        "os",
        "X_OK",
        "Bcolors",
        "colorize",
        "format",
        "file",
        "executable",
        "Bcolors",
        "FAIL",
        "file",
        "sys",
        "stderr",
        "sys",
        "exit",
        "options",
        "sequential",
        "options",
        "sequential",
        "count",
        "Bcolors",
        "colorize",
        "format",
        "options",
        "sequential",
        "Bcolors",
        "FAIL",
        "file",
        "sys",
        "stderr",
        "sys",
        "exit",
        "options",
        "sequential",
        "os",
        "environ",
        "get",
        "os",
        "environ",
        "count",
        "Bcolors",
        "colorize",
        "Bcolors",
        "FAIL",
        "file",
        "sys",
        "stderr",
        "sys",
        "exit",
        "os",
        "environ",
        "get",
        "format",
        "env_filter",
        "os",
        "environ",
        "sequential_filter",
        "options",
        "sequential",
        "format",
        "sequential_filter",
        "options",
        "sequential",
        "executable",
        "options",
        "parse_arguments",
        "executable",
        "filter_",
        "jobs",
        "jobs",
        "sys",
        "stdout",
        "isatty",
        "executable",
        "format",
        "exe",
        "executable",
        "args",
        "args",
        "args",
        "filter_",
        "format",
        "exe",
        "executable",
        "filter_",
        "opt",
        "opts",
        "opt",
        "jobs",
        "executable",
        "multiprocessing",
        "Pool",
        "processes",
        "OPTIONS",
        "jobs",
        "RESULTS",
        "extend",
        "POOL",
        "map_async",
        "run_test",
        "options_gen",
        "EXECUTABLE",
        "OPTIONS",
        "parallel",
        "OPTIONS",
        "jobs",
        "get",
        "timeout",
        "sys",
        "maxint",
        "OPTIONS",
        "sequential",
        "RESULTS",
        "extend",
        "POOL",
        "map_async",
        "run_test",
        "options_gen",
        "EXECUTABLE",
        "OPTIONS",
        "sequential",
        "get",
        "timeout",
        "sys",
        "maxint",
        "len",
        "success",
        "success",
        "__",
        "RESULTS",
        "success",
        "result",
        "RESULTS",
        "result",
        "OPTIONS",
        "verbosity",
        "result",
        "file",
        "sys",
        "stderr",
        "OPTIONS",
        "verbosity",
        "result",
        "file",
        "sys",
        "stdout",
        "NFAILED",
        "Bcolors",
        "colorize",
        "Bcolors",
        "FAIL",
        "Bcolors",
        "BOLD",
        "file",
        "sys",
        "stderr",
        "Bcolors",
        "colorize",
        "Bcolors",
        "OKGREEN",
        "Bcolors",
        "BOLD",
        "sys",
        "exit",
        "NFAILED",
        "KeyboardInterrupt",
        "POOL",
        "terminate",
        "POOL",
        "join",
        "sys",
        "exit",
        "OSError",
        "ex",
        "Bcolors",
        "colorize",
        "format",
        "ex",
        "ex",
        "Bcolors",
        "FAIL",
        "Bcolors",
        "BOLD",
        "POOL",
        "terminate",
        "POOL",
        "join",
        "sys",
        "exit"
    ],
    "literals": [
        "'\\033[95m'",
        "''",
        "'\\033[94m'",
        "''",
        "'\\033[92m'",
        "''",
        "'\\033[93m'",
        "''",
        "'\\033[91m'",
        "''",
        "'\\033[0m'",
        "''",
        "'\\033[1m'",
        "''",
        "'\\033[4m'",
        "''",
        "''",
        "'{begin}{string}{end}'",
        "''",
        "''",
        "'GTEST_TOTAL_SHARDS'",
        "'GTEST_SHARD_INDEX'",
        "'.'",
        "''",
        "'.'",
        "''",
        "'Usage: %prog [options] <test> [-- <test_options>]'",
        "'-j'",
        "'--jobs'",
        "'int'",
        "'number of parallel jobs to spawn. DEFAULT: {default_}'",
        "'-s'",
        "'--sequential'",
        "'string'",
        "''",
        "'gtest filter for tests to run sequentially'",
        "'-v'",
        "'--verbosity'",
        "'int'",
        "'output verbosity:'",
        "' 0 only shows summarized information,'",
        "' 1 also shows full logs of failed shards, and anything'",
        "' >1 shows all output. DEFAULT: 1'",
        "\"ERROR: File '{file}' does not exists\"",
        "\"ERROR: File '{file}' is not executable\"",
        "':-'",
        "\"ERROR: Cannot use negative filters in \"",
        "\"'sequential' parameter: '{filter}'\"",
        "'GTEST_FILTER'",
        "'GTEST_FILTER'",
        "':-'",
        "\"ERROR: Cannot specify both 'sequential' \"",
        "\"option \"",
        "\"and environment variable 'GTEST_FILTER' \"",
        "\"containing negative filters\"",
        "'GTEST_FILTER'",
        "'{env_filter}:-{sequential_filter}'",
        "'GTEST_FILTER'",
        "'*:-{sequential_filter}'",
        "'__main__'",
        "'{exe} --gtest_color=yes {args}'",
        "''",
        "'{exe} --gtest_filter={filter}'",
        "'\\n[FAIL]'",
        "'\\n[PASS]'",
        "'Caught KeyboardInterrupt, terminating workers'",
        "'\\nERROR: {ex}'"
    ],
    "variables": [
        "DEFAULT_NUM_JOBS",
        "HEADER",
        "OKBLUE",
        "OKGREEN",
        "WARNING",
        "FAIL",
        "ENDC",
        "BOLD",
        "UNDERLINE",
        "colors",
        "shard",
        "nshards",
        "executable",
        "env",
        "env",
        "env",
        "output",
        "parser",
        "options",
        "executable",
        "options",
        "parallel",
        "options",
        "parallel",
        "EXECUTABLE",
        "OPTIONS",
        "opts",
        "args",
        "executable",
        "executable",
        "RESULTS",
        "POOL",
        "NFAILED"
    ],
    "comments": [
        "!/usr/bin/env python",
        "",
        "Licensed to the Apache Software Foundation (ASF) under one",
        "or more contributor license agreements.  See the NOTICE file",
        "distributed with this work for additional information",
        "regarding copyright ownership.  The ASF licenses this file",
        "to you under the Apache License, Version 2.0 (the",
        "\"License\"); you may not use this file except in compliance",
        "with the License.  You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "If we run in a terminal, enable colored test output. We",
        "still allow users to disable this themselves via extra args.",
        "Run parallel tests.",
        "",
        "Multiprocessing's `map` cannot properly handle `KeyboardInterrupt` in",
        "some python versions. Use `map_async` with an explicit timeout",
        "instead. See http://stackoverflow.com/a/1408476.",
        "Now run sequential tests.",
        "Count the number of failed shards and print results from",
        "failed shards.",
        "",
        "NOTE: The `RESULTS` array stores the result for each",
        "`run_test` invocation returning a tuple (success, output).",
        "TODO(bbannier): Introduce a verbosity which prints results",
        "as they arrive; this likely requires some output parsing to",
        "ensure results from different tests do not interleave.",
        "Force a newline after intermediate test reports."
    ],
    "docstrings": [
        "\"\"\"\nParallel test runner for GoogleTest programs.\n\nThis script allows one to execute GoogleTest tests in parallel.\nGoogleTest programs come with built-in support for running in parallel.\nHere tests can automatically be partitioned across a number of test\nprogram invocations (\"shards\"). This script provides a convenient\nwrapper around that functionality and stream-lined output.\n\"\"\"",
        "\"\"\"\n    A collection of tty output modifiers.\n\n    To switch the output of a string, prefix it with the desired\n    modifier, and terminate it with 'ENDC'.\n    \"\"\"",
        "\"\"\"Decorate a string with a number of color codes.\"\"\"",
        "\"\"\"\n    Perform an actual run of the test executable.\n\n    Expects a list of parameters giving the number of the current\n    shard, the total number of shards, and the executable to run.\n    \"\"\"",
        "\"\"\"Return the executable to work on, and a list of options.\"\"\"",
        "\"\"\"Generator for options for a certain shard.\n\n        Here we set up GoogleTest specific flags, and generate\n        distinct shard indices.\n        \"\"\""
    ],
    "functions": [
        "colorize",
        "run_test",
        "parse_arguments",
        "options_gen"
    ],
    "classes": [
        "Bcolors"
    ]
}