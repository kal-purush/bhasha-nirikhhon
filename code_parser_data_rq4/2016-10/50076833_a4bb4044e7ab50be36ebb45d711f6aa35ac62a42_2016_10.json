{
    "identifiers": [
        "tensorflow",
        "tf",
        "time",
        "numpy",
        "np",
        "mdl_data",
        "sys",
        "sys",
        "argv",
        "sys",
        "argv",
        "tf",
        "device",
        "GPUNUM",
        "tf",
        "placeholder",
        "n_input_aud",
        "tf",
        "placeholder",
        "n_input_img",
        "tf",
        "placeholder",
        "n_classes",
        "tf",
        "placeholder",
        "tf",
        "float32",
        "_X_aud",
        "_X_img",
        "_w_aud",
        "_b_aud",
        "_w_img",
        "_b_img",
        "_w_out",
        "_b_out",
        "_dropout",
        "tf",
        "nn",
        "relu",
        "tf",
        "add",
        "tf",
        "matmul",
        "_X_aud",
        "_w_aud",
        "_b_aud",
        "tf",
        "nn",
        "relu",
        "tf",
        "add",
        "tf",
        "matmul",
        "aud_layer_1",
        "_w_aud",
        "_b_aud",
        "tf",
        "nn",
        "relu",
        "tf",
        "add",
        "tf",
        "matmul",
        "_X_img",
        "_w_img",
        "_b_img",
        "tf",
        "nn",
        "dropout",
        "img_layer_1",
        "_dropout",
        "tf",
        "nn",
        "relu",
        "tf",
        "add",
        "tf",
        "matmul",
        "drop_1",
        "_w_img",
        "_b_img",
        "tf",
        "nn",
        "dropout",
        "img_layer_2",
        "_dropout",
        "tf",
        "add",
        "aud_layer_2",
        "drop_2",
        "tf",
        "reduce_sum",
        "tmp_pool",
        "keep_dims",
        "tf",
        "nn",
        "relu",
        "tf",
        "add",
        "tf",
        "matmul",
        "tmp_pool",
        "_w_out",
        "_b_out",
        "tf",
        "nn",
        "relu",
        "tf",
        "add",
        "tf",
        "matmul",
        "out_layer_1",
        "_w_out",
        "_b_out",
        "tf",
        "matmul",
        "out_layer_2",
        "_w_out",
        "_b_out",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_hidden_1_in",
        "n_hidden_1_out",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_hidden_1_out",
        "n_hidden_2_out",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_hidden_2_out",
        "n_classes",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_hidden_1_out",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_hidden_2_out",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_classes",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_input_aud",
        "n_hidden_1_aud",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_hidden_1_aud",
        "n_hidden_2_aud",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_hidden_2_aud",
        "n_classes",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_hidden_1_aud",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_hidden_2_aud",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_classes",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_input_img",
        "n_hidden_1_img",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_hidden_1_img",
        "n_hidden_2_img",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_hidden_2_img",
        "n_classes",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_hidden_1_img",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_hidden_2_img",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "n_classes",
        "multimodal",
        "x_aud",
        "x_img",
        "w_aud",
        "b_aud",
        "w_img",
        "b_img",
        "w_out",
        "b_out",
        "keep_prob",
        "tf",
        "reduce_mean",
        "tf",
        "nn",
        "softmax_cross_entropy_with_logits",
        "pred",
        "y",
        "tf",
        "train",
        "AdamOptimizer",
        "learning_rate",
        "learning_rate",
        "minimize",
        "cost",
        "tf",
        "initialize_all_variables",
        "labels_dense",
        "num_classes",
        "labels_dense",
        "shape",
        "np",
        "arange",
        "num_labels",
        "num_classes",
        "np",
        "zeros",
        "num_labels",
        "num_classes",
        "labels_one_hot",
        "flat",
        "index_offset",
        "labels_dense",
        "ravel",
        "labels_one_hot",
        "mdl_data",
        "YLIMED",
        "FILEPATH",
        "FILEPATH",
        "data",
        "get_vid_info",
        "data",
        "get_vid_info",
        "np",
        "random",
        "permutation",
        "len",
        "Vid_training",
        "Vid_training",
        "p",
        "np",
        "random",
        "permutation",
        "len",
        "Vid_test",
        "Vid_test",
        "p",
        "tf",
        "Session",
        "config",
        "tf",
        "ConfigProto",
        "allow_soft_placement",
        "log_device_placement",
        "sess",
        "sess",
        "run",
        "init",
        "epoch",
        "training_epochs",
        "len",
        "Vid_training",
        "i",
        "total_batch",
        "data",
        "get_vid_data",
        "Vid_training",
        "i",
        "data",
        "get_vid_data",
        "Vid_training",
        "i",
        "np",
        "asarray",
        "Vid_training",
        "i",
        "split",
        "dense_to_one_hot",
        "batch_y",
        "sess",
        "run",
        "optimizer",
        "feed_dict",
        "x_aud",
        "batch_x_aud",
        "x_img",
        "batch_x_img",
        "y",
        "batch_y",
        "keep_prob",
        "dropout",
        "avg_cost",
        "sess",
        "run",
        "cost",
        "feed_dict",
        "x_aud",
        "batch_x_aud",
        "x_img",
        "batch_x_img",
        "y",
        "batch_y",
        "keep_prob",
        "np",
        "random",
        "permutation",
        "len",
        "Vid_training",
        "Vid_training",
        "p",
        "epoch",
        "display_step",
        "epoch",
        "format",
        "avg_cost",
        "tf",
        "equal",
        "tf",
        "argmax",
        "pred",
        "tf",
        "argmax",
        "y",
        "len",
        "Vid_test",
        "i",
        "total_batch",
        "data",
        "get_vid_data",
        "Vid_test",
        "i",
        "data",
        "get_vid_data",
        "Vid_test",
        "i",
        "np",
        "asarray",
        "Vid_test",
        "i",
        "split",
        "dense_to_one_hot",
        "batch_y",
        "correct_prediction",
        "eval",
        "x_aud",
        "batch_x_aud",
        "x_img",
        "batch_x_img",
        "y",
        "batch_y",
        "keep_prob",
        "correct",
        "i",
        "i",
        "correct",
        "len",
        "Vid_test"
    ],
    "literals": [
        "'/gpu:'",
        "\"float\"",
        "\"float\"",
        "\"float\"",
        "'h1'",
        "'b1'",
        "'h2'",
        "'b2'",
        "'h1'",
        "'b1'",
        "'h2'",
        "'b2'",
        "'h1'",
        "'b1'",
        "'h2'",
        "'b2'",
        "'out'",
        "'out'",
        "'h1'",
        "'h2'",
        "'out'",
        "'b1'",
        "'b2'",
        "'out'",
        "'h1'",
        "'h2'",
        "'out'",
        "'b1'",
        "'b2'",
        "'out'",
        "'h1'",
        "'h2'",
        "'out'",
        "'b1'",
        "'b2'",
        "'out'",
        "'YLIMED_info.csv'",
        "'/YLIMED150924/audio/mfcc20'",
        "'/YLIMED150924/keyframe/fc7'",
        "'Training'",
        "'Test'",
        "'Aud'",
        "'Img'",
        "\"Epoch:\"",
        "'%04d'",
        "\"cost=\"",
        "\"{:.9f}\"",
        "\"Optimization Finished!\"",
        "'Aud'",
        "'Img'",
        "\"Accuracy:\"",
        "\"MM_video.py\""
    ],
    "variables": [
        "GPUNUM",
        "FILEPATH",
        "learning_rate",
        "training_epochs",
        "batch_size",
        "display_step",
        "n_input_img",
        "n_hidden_1_img",
        "n_hidden_2_img",
        "n_input_aud",
        "n_hidden_1_aud",
        "n_hidden_2_aud",
        "n_hidden_1_in",
        "n_hidden_1_out",
        "n_hidden_2_out",
        "n_classes",
        "dropout",
        "x_aud",
        "x_img",
        "y",
        "keep_prob",
        "aud_layer_1",
        "aud_layer_2",
        "img_layer_1",
        "drop_1",
        "img_layer_2",
        "drop_2",
        "tmp_pool",
        "tmp_pool",
        "out_layer_1",
        "out_layer_2",
        "w_out",
        "b_out",
        "w_aud",
        "b_aud",
        "w_img",
        "b_img",
        "pred",
        "cost",
        "optimizer",
        "init",
        "num_labels",
        "index_offset",
        "labels_one_hot",
        "data",
        "Vid_training",
        "Vid_test",
        "p",
        "Vid_training",
        "p",
        "Vid_test",
        "avg_cost",
        "total_batch",
        "batch_x_aud",
        "batch_x_img",
        "batch_y",
        "batch_y",
        "p",
        "Vid_training",
        "correct",
        "correct_prediction",
        "total_batch",
        "batch_x_aud",
        "batch_x_img",
        "batch_y",
        "batch_y"
    ],
    "comments": [
        "Network Parameters",
        "YLI_MED image data input (data shape: 4096, fc7 layer output)",
        "1st layer num features 1000",
        "2nd layer num features 600",
        "YLI_MED audio data input (data shape: 2000, mfcc output)",
        "1st layer num features 1000",
        "2nd layer num features 600",
        "YLI_MED total classes (0-9 digits)",
        "-------------------------------Struct Graph",
        "tf Graph input",
        "dropout (keep probability)",
        "Create model",
        "aud",
        "Hidden layer with RELU activation",
        "Hidden layer with RELU activation",
        "aud_out = tf.matmul(aud_layer_2, _w_aud['out']) + _b_aud['out']",
        "Image",
        "Hidden layer with RELU activation",
        "Hidden layer with RELU activation",
        "img_out = tf.matmul(drop_2, _w_img['out']) + _b_img['out']",
        "Hidden layer with RELU activation",
        "Hidden layer with RELU activation",
        "return out_drop",
        "Store layers weight & bias",
        "Construct model",
        "Define loss and optimizer",
        "Softmax loss",
        "Adam Optimizer",
        "Initializing the variables",
        "Source reference: https://github.com/aymericdamien/TensorFlow-Examples.git/input_data.py",
        "Load data",
        "Shuffle initial data",
        "Load test data",
        "X_img_test = data.get_img_X_test()",
        "X_aud_test = data.get_aud_X_test()",
        "y_test = data.get_y_test()",
        "Y_test = dense_to_one_hot(y_test)",
        "Training cycle",
        "Loop oveer all batches",
        "Fit traning using batch data",
        "Compute average loss",
        "Shuffling",
        "Display logs per epoch step",
        "Test model"
    ],
    "docstrings": [
        "'''\n    -------------------------------\n    Load data\n    -------------------------------\n    '''",
        "\"\"\"Convert class labels from scalars to one-hot vectors.\"\"\"",
        "'''\n    -------------------------------\n    Launch the graph\n    -------------------------------\n    '''"
    ],
    "functions": [
        "multimodal",
        "dense_to_one_hot"
    ],
    "classes": []
}