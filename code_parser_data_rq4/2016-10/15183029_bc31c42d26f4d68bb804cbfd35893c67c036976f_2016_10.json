{
    "identifiers": [
        "_",
        "parse",
        "parseUrl",
        "os",
        "generic",
        "Reader",
        "Writer",
        "http",
        "https",
        "net",
        "NodeJS",
        "data",
        "encoding",
        "err",
        "emitter",
        "emitter",
        "emitter",
        "fn",
        "fn",
        "_",
        "_",
        "callback",
        "err",
        "callback",
        "callback",
        "callback",
        "close",
        "callback",
        "err",
        "nop",
        "callback",
        "err",
        "callback",
        "nop",
        "close",
        "_",
        "closed",
        "NodeJS",
        "Wrapper",
        "err",
        "chunk",
        "emitter",
        "options",
        "emitter",
        "options",
        "options",
        "options",
        "options",
        "emitter",
        "err",
        "err",
        "emitter",
        "chunk",
        "chunk",
        "emitter",
        "generic",
        "err",
        "chunk",
        "err",
        "err",
        "chunk",
        "chunk",
        "chunk",
        "callback",
        "err",
        "data",
        "chunk",
        "callback",
        "chunk",
        "e",
        "callback",
        "callback",
        "err",
        "chunk",
        "err",
        "err",
        "chunk",
        "replied",
        "callback",
        "err",
        "chunk",
        "chunk",
        "replied",
        "chunks",
        "total",
        "chunks",
        "chunks",
        "chunks",
        "Buffer",
        "total",
        "chunks",
        "val",
        "chunk",
        "chunk",
        "chunk",
        "result",
        "val",
        "val",
        "chunk",
        "result",
        "enc",
        "enc",
        "enc",
        "enc",
        "_",
        "len",
        "len",
        "_",
        "len",
        "len",
        "Infinity",
        "len",
        "Buffer",
        "total",
        "len",
        "_",
        "chunk",
        "chunks",
        "chunks",
        "total",
        "total",
        "chunk",
        "len",
        "chunks",
        "chunk",
        "total",
        "chunk",
        "chunks",
        "chunk",
        "len",
        "total",
        "chunk",
        "len",
        "total",
        "total",
        "len",
        "chunks",
        "total",
        "_",
        "_",
        "result",
        "result",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "count",
        "chunk",
        "count",
        "chunk",
        "_",
        "arg",
        "arg",
        "arg",
        "arg",
        "NodeJS",
        "Wrapper",
        "err",
        "emitter",
        "options",
        "emitter",
        "options",
        "options",
        "options",
        "emitter",
        "err",
        "err",
        "err",
        "emitter",
        "err",
        "err",
        "generic",
        "_",
        "data",
        "data",
        "data",
        "data",
        "data",
        "Buffer",
        "data",
        "data",
        "_",
        "_",
        "_",
        "_",
        "_",
        "callback",
        "err",
        "err",
        "nop",
        "callback",
        "err",
        "callback",
        "nop",
        "_",
        "_",
        "data",
        "enc",
        "data",
        "data",
        "Buffer",
        "data",
        "enc",
        "data",
        "data",
        "_",
        "data",
        "data",
        "enc",
        "data",
        "data",
        "data",
        "Buffer",
        "data",
        "enc",
        "data",
        "data",
        "data",
        "_",
        "_",
        "_",
        "data",
        "err",
        "err",
        "err",
        "_",
        "_",
        "_",
        "err",
        "err",
        "err",
        "key",
        "headers",
        "headers",
        "comps",
        "i",
        "comps",
        "i",
        "comps",
        "i",
        "pair",
        "pair",
        "pair",
        "enc",
        "enc",
        "ctype",
        "ctype",
        "headers",
        "headers",
        "headers",
        "headers",
        "comps",
        "i",
        "comps",
        "i",
        "comps",
        "i",
        "pair",
        "pair",
        "pair",
        "Headers",
        "headers",
        "options",
        "headers",
        "options",
        "_getEncodingDefault",
        "headers",
        "options",
        "options",
        "headers",
        "options",
        "_getEncodingStrict",
        "headers",
        "_getEncodingDefault",
        "headers",
        "listener",
        "request",
        "http",
        "response",
        "http",
        "http",
        "https",
        "ReadableStream",
        "http",
        "req",
        "http",
        "options",
        "req",
        "options",
        "_getEncoding",
        "req",
        "options",
        "req",
        "req",
        "WritableStream",
        "http",
        "resp",
        "http",
        "options",
        "resp",
        "options",
        "statusCode",
        "reasonPhrase",
        "headers",
        "statusCode",
        "reasonPhrase",
        "headers",
        "name",
        "value",
        "name",
        "value",
        "name",
        "name",
        "name",
        "name",
        "trailers",
        "trailers",
        "val",
        "val",
        "val",
        "val",
        "options",
        "options",
        "opts",
        "listener",
        "http",
        "https",
        "listener",
        "listener",
        "opts",
        "https",
        "opts",
        "listener",
        "http",
        "listener",
        "opts",
        "args",
        "Wrapper",
        "emitter",
        "emitter",
        "_",
        "args",
        "_",
        "callback",
        "err",
        "result",
        "reply",
        "err",
        "result",
        "replied",
        "callback",
        "err",
        "result",
        "replied",
        "args",
        "reply",
        "reply",
        "reply",
        "args",
        "_",
        "request",
        "response",
        "_",
        "listener",
        "options",
        "options",
        "options",
        "request",
        "http",
        "response",
        "http",
        "_",
        "_",
        "_",
        "listener",
        "HttpServerRequest",
        "request",
        "options",
        "HttpServerResponse",
        "response",
        "options",
        "_",
        "err",
        "request",
        "request",
        "err",
        "err",
        "requestListener",
        "options",
        "HttpServer",
        "requestListener",
        "options",
        "Server",
        "http",
        "https",
        "requestListener",
        "options",
        "_fixHttpServerOptions",
        "options",
        "opts",
        "httpListener",
        "requestListener",
        "options",
        "msecs",
        "callback",
        "http",
        "msecs",
        "callback",
        "ReadableStream",
        "http",
        "resp",
        "http",
        "options",
        "resp",
        "options",
        "_getEncoding",
        "resp",
        "options",
        "statuses",
        "statuses",
        "statuses",
        "statuses",
        "statuses",
        "net",
        "options",
        "options",
        "opts",
        "opts",
        "opts",
        "opts",
        "parseUrl",
        "opts",
        "opts",
        "parsed",
        "opts",
        "parsed",
        "opts",
        "parsed",
        "opts",
        "parsed",
        "parsed",
        "parsed",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "headers",
        "key",
        "opts",
        "key",
        "headers",
        "key",
        "opts",
        "key",
        "headers",
        "opts",
        "require",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "token",
        "Buffer",
        "token",
        "opts",
        "token",
        "opts",
        "opts",
        "os",
        "opts",
        "opts",
        "parseUrl",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "require",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "proxyToken",
        "Buffer",
        "proxyToken",
        "opts",
        "proxyToken",
        "opts",
        "opts",
        "proxyAuthenticator",
        "proxyAuthenticator",
        "opts",
        "proxyAuthenticator",
        "opts",
        "opts",
        "WritableStream",
        "http",
        "http",
        "err",
        "response",
        "http",
        "options",
        "options",
        "options",
        "response",
        "http",
        "response",
        "request",
        "options",
        "options",
        "err",
        "err",
        "err",
        "resp",
        "http",
        "err",
        "err",
        "resp",
        "resp",
        "callback",
        "err",
        "resp",
        "http",
        "callback",
        "callback",
        "callback",
        "err",
        "resp",
        "replied",
        "callback",
        "err",
        "resp",
        "replied",
        "_",
        "_",
        "_",
        "HttpClientResponse",
        "response",
        "ms",
        "ms",
        "_",
        "options",
        "_fixHttpClientOptions",
        "options",
        "_",
        "options",
        "_",
        "callback",
        "err",
        "resolved",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "proxyOpt",
        "res",
        "socket",
        "net",
        "head",
        "options",
        "socket",
        "options",
        "replied",
        "callback",
        "HttpClientRequest",
        "options",
        "replied",
        "err",
        "replied",
        "callback",
        "err",
        "replied",
        "_",
        "options",
        "options",
        "_",
        "options",
        "HttpClientRequest",
        "options",
        "_",
        "options",
        "options",
        "_fixHttpClientOptions",
        "options",
        "options",
        "options",
        "HttpProxyClientRequest",
        "options",
        "HttpClientRequest",
        "options",
        "ReadableStream",
        "net",
        "net",
        "emitter",
        "net",
        "options",
        "emitter",
        "options",
        "options",
        "options",
        "WritableStream",
        "emitter",
        "options",
        "options",
        "options",
        "_",
        "data",
        "enc",
        "_",
        "data",
        "enc",
        "data",
        "enc",
        "data",
        "enc",
        "ms",
        "callback",
        "ms",
        "callback",
        "noDelay",
        "noDelay",
        "enable",
        "enable",
        "port",
        "host",
        "options",
        "host",
        "host",
        "options",
        "options",
        "NetClient",
        "options",
        "port",
        "host",
        "path",
        "options",
        "options",
        "options",
        "NetClient",
        "options",
        "path",
        "net",
        "err",
        "options",
        "args",
        "options",
        "net",
        "net",
        "args",
        "err",
        "err",
        "nop",
        "nop",
        "err",
        "err",
        "err",
        "callback",
        "err",
        "stream",
        "callback",
        "callback",
        "callback",
        "NetStream",
        "err",
        "callback",
        "err",
        "NetStream",
        "callback",
        "nop",
        "stream",
        "_",
        "serverOptions",
        "connectionListener",
        "streamOptions",
        "NetServer",
        "serverOptions",
        "connectionListener",
        "streamOptions",
        "Server",
        "net",
        "serverOptions",
        "connectionListener",
        "streamOptions",
        "serverOptions",
        "streamOptions",
        "connectionListener",
        "connectionListener",
        "serverOptions",
        "serverOptions",
        "net",
        "serverOptions",
        "connection",
        "_",
        "_",
        "_",
        "connectionListener",
        "NetStream",
        "connection",
        "streamOptions",
        "_",
        "err",
        "err",
        "err",
        "emitter",
        "exports",
        "_",
        "emitter",
        "NodeJS",
        "options",
        "fn",
        "_",
        "stream",
        "fn",
        "options",
        "fn",
        "options",
        "options",
        "fn",
        "emitter",
        "options",
        "fn",
        "_",
        "stream",
        "stream",
        "_",
        "exports",
        "_",
        "emitter",
        "NodeJS",
        "options",
        "fn",
        "_",
        "stream",
        "exports",
        "_",
        "ReadableStream",
        "emitter",
        "options",
        "fn",
        "exports",
        "_",
        "emitter",
        "NodeJS",
        "options",
        "fn",
        "_",
        "stream",
        "exports",
        "_",
        "WritableStream",
        "emitter",
        "options",
        "fn",
        "exports",
        "_",
        "inStream",
        "outStream",
        "data",
        "inStream",
        "_",
        "outStream",
        "_",
        "data"
    ],
    "literals": [
        "'streamline-runtime'",
        "'url'",
        "'os'",
        "'./devices/generic'",
        "'./reader'",
        "'./writer'",
        "'http'",
        "'https'",
        "'net'",
        "string",
        "'close'",
        "'function'",
        "\"bad callback parameter: \"",
        "\"function\"",
        "\"close\"",
        "string",
        "string",
        "'error'",
        "'data'",
        "'end'",
        "\"stream was closed unexpectedly\"",
        "''",
        "'string'",
        "'expected Buffer, not string'",
        "string",
        "\"\"",
        "\"error\"",
        "\"data\"",
        "\"end\"",
        "\"close\"",
        "string",
        "string",
        "'error'",
        "'drain'",
        "\"stream was closed unexpectedly\"",
        "\"string\"",
        "\"utf8\"",
        "string",
        "\"string\"",
        "\"utf8\"",
        "string",
        "\"invalid attempt to write after end\"",
        "\"string\"",
        "\"utf8\"",
        "\"drain\"",
        "\"close\"",
        "string",
        "string",
        "'content-type'",
        "'text/plain'",
        "';'",
        "'='",
        "'charset'",
        "\"iso-8859-1\"",
        "\"binary\"",
        "'text'",
        "'json'",
        "\"utf8\"",
        "'content-type'",
        "'content-encoding'",
        "'content-type'",
        "';'",
        "'='",
        "'charset'",
        "'utf8'",
        "'utf-8'",
        "'utf8'",
        "'utf16le'",
        "'utf-16le'",
        "'utf16le'",
        "'us-ascii'",
        "'ascii'",
        "'strict'",
        "'disable'",
        "string",
        "'content-encoding'",
        "\"function\"",
        "'strict'",
        "'disable'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'function'",
        "\"bad listener parameter: \"",
        "\"cannot listen: server is closed\"",
        "\"server was closed unexpectedly\"",
        "'error'",
        "'get'",
        "'number'",
        "\"invalid status: \"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"request error: no options\"",
        "\"string\"",
        "\"?\"",
        "\"\"",
        "\"http:\"",
        "\"https:\"",
        "'443'",
        "'80'",
        "\"/\"",
        "\"request error: no host\"",
        "\"GET\"",
        "\":\"",
        "\"\"",
        "\"utf8\"",
        "\"base64\"",
        "'Authorization'",
        "\"Basic \"",
        "\"string\"",
        "\"proxy configuration error: no host\"",
        "\"proxy configuration error: no port\"",
        "\"http:\"",
        "\"https\"",
        "\"//\"",
        "\":\"",
        "'host'",
        "\"basic\"",
        "\"request error: no proxy user\"",
        "\":\"",
        "\"\"",
        "\"utf8\"",
        "\"base64\"",
        "\"Proxy-Authorization\"",
        "\"Basic \"",
        "\"ntlm\"",
        "\"Proxy Authenticator module required\"",
        "\"NTLM Engine module MUST provide 'authenticate' function\"",
        "\"digest\"",
        "\"Proxy Digest authentication not yet implemented\"",
        "'error'",
        "\"stream was closed unexpectedly\"",
        "'function'",
        "\"bad callback parameter: \"",
        "'error'",
        "'timeout'",
        "'CONNECT'",
        "\":\"",
        "'connect'",
        "'error'",
        "\"proxyConnect(_) call missing\"",
        "string",
        "string",
        "string",
        "\"localhost\"",
        "string",
        "'error'",
        "'connect'",
        "'function'",
        "\"bad callback parameter: \"",
        "'function'",
        "'function'",
        "\"using body missing\""
    ],
    "variables": [
        "close",
        "chunk",
        "replied",
        "result",
        "chunks",
        "total",
        "chunk",
        "result",
        "err",
        "comps",
        "ctype",
        "i",
        "pair",
        "enc",
        "comps",
        "ctype",
        "i",
        "pair",
        "opts",
        "replied",
        "reply",
        "opts",
        "opts",
        "options",
        "parsed",
        "token",
        "proxyToken",
        "proxyAuthenticator",
        "request",
        "replied",
        "response",
        "options",
        "proxyOpt",
        "replied",
        "emitter",
        "stream",
        "data"
    ],
    "comments": [
        "!doc",
        "",
        "# Wrappers for node.js streams",
        "",
        "These wrappers implement a _pull style_ API.",
        "For readable streams, instead of having the stream _push_ the data to its consumer by emitting `data` and `end` events,",
        "the wrapper lets the consumer _pull_ the data from the stream by calling asynchronous `read` methods.",
        "The wrapper takes care of the low level `pause`/`resume` logic.",
        "",
        "Similarly, for writable streams, the wrapper provides a simple asynchronous `write` method and takes",
        "care of the low level `drain` logic.",
        "",
        "For more information on this design,",
        "see [this blog post](http://bjouhier.wordpress.com/2011/04/25/asynchronous-episode-3-adventures-in-event-land/)",
        "",
        "For a simple example of this API in action,",
        "see the [google client example](../../../examples/streams/googleClient._js)",
        "",
        "## Wrapper",
        "",
        "Base wrapper for all objects that emit an `end` or `close` event.",
        "All stream wrappers derive from this wrapper.",
        "",
        "creates a wrapper.",
        "returns the underlying emitter. The emitter stream can be used to attach additional observers.",
        "hook for subclasses",
        "returns true if the `close` event has been received.",
        "unwraps and returns the underlying emitter.",
        "The wrapper should not be used after this call.",
        "",
        "## ReadableStream",
        "",
        "All readable stream wrappers derive from this wrapper.",
        "",
        "creates a readable stream wrapper.",
        "returns a clean ez reader.",
        "initialize _onData before setting listeners because listeners may emit data events immediately",
        "(during the `on` call!)",
        "resume it for keep-alive",
        "socket may be closed",
        "should we resume if paused?",
        "restore it",
        "sets the encoding.",
        "returns `this` for chaining.",
        "reads asynchronously from the stream and returns a `string` or a `Buffer` depending on the encoding.",
        "If a `len` argument is passed, the `read` call returns when `len` characters or bytes",
        "(depending on encoding) have been read, or when the underlying stream has emitted its `end` event",
        "(so it may return less than `len` bytes or chars).",
        "Reads till the end if `len` is negative.",
        "Without `len`, the read calls returns the data chunks as they have been emitted by the underlying stream.",
        "Once the end of stream has been reached, the `read` call returns `null`.",
        "reads till the end of stream.",
        "Equivalent to `stream.read(_, -1)`.",
        "pushes the chunk back to the stream.",
        "returns `this` for chaining.",
        "returns the number of bytes/chars that have been received and not read yet.",
        "",
        "## WritableStream",
        "",
        "All writable stream wrappers derive from this wrapper.",
        "",
        "creates a writable stream wrapper.",
        "returns a clean ez writer.",
        "node streams don't differentiate between null and undefined. So end in both cases",
        "if data is empty do nothing but it's not to be interpreted as end",
        "",
        "Writes the data.",
        "This operation is asynchronous because it _drains_ the stream if necessary.",
        "Returns `this` for chaining.",
        "signals the end of the send operation.",
        "Returns `this` for chaining.",
        "As per RFC-2616-7.2.1, if media type is unknown we should treat it",
        "as \"application/octet-stream\" (may optionally try to determine it by",
        "looking into content body - we don't)",
        "List of charsets: http://www.iana.org/assignments/character-sets/character-sets.xml",
        "Node Buffer supported encodings: http://nodejs.org/api/buffer.html#buffer_buffer",
        "Fallthrough",
        "Fallthrough",
        "we do not understand this charset - do *not* encode",
        "",
        "## HttpServerRequest",
        "",
        "This is a wrapper around node's `http.ServerRequest`:",
        "This stream is readable (see `ReadableStream` above).",
        "",
        "returns a wrapper around `req`, an `http.ServerRequest` object.",
        "The `options` parameter can be used to pass `lowMark` and `highMark` values, or",
        "to control encoding detection (see section below).",
        "special sage hack - clean up later",
        "warning: these were writable before !!",
        "sage hack",
        "",
        "## HttpServerResponse",
        "",
        "This is a wrapper around node's `http.ServerResponse`.",
        "This stream is writable (see `WritableStream` above).",
        "",
        "returns a wrapper around `resp`, an `http.ServerResponse` object.",
        "(same as `http.ServerResponse`)",
        "Abstract class shared by HttpServer and NetServer",
        "",
        "## HttpServer",
        "",
        "This is a wrapper around node's `http.Server` object:",
        "",
        "creates the wrapper.",
        "`requestListener` is called as `requestListener(request, response, _)`",
        "where `request` and `response` are wrappers around `http.ServerRequest` and `http.ServerResponse`.",
        "A fresh empty global context is set before every call to `requestListener`. See [Global context API](https://github.com/Sage/streamline-runtime/blob/master/index.md).",
        "(same as `http.Server`)",
        "handlers do not read GET requests - so we remove the listeners, in case",
        "node.js version lower than 0.11.2 do not inmplement a https.Server.setTimeout method.",
        "",
        "## HttpClientResponse",
        "",
        "This is a wrapper around node's `http.ClientResponse`",
        "",
        "This stream is readable (see `ReadableStream` above).",
        "",
        "wraps a node response object.",
        "`options.detectEncoding` and be used to control encoding detection (see section below).",
        "returns the response stream.",
        "returns the HTTP status code.",
        "returns the HTTP version.",
        "returns the HTTP response headers.",
        "returns the HTTP response trailers.",
        "throws an error if the status is not in the `statuses` array.",
        "If only one status is expected, it may be passed directly as an integer rather than as an array.",
        "Returns `this` for chaining.",
        "refine later",
        "refine later",
        "assumes basic auth for now",
        "Do not use proxy for local requests",
        "Check excludes",
        "Do nothing",
        "https requests will be handled with CONNECT method",
        "",
        "## HttpClientRequest",
        "",
        "This is a wrapper around node's `http.ClientRequest`.",
        "",
        "This stream is writable (see `WritableStream` above).",
        "",
        "creates the wrapper.",
        "The options are the following:",
        "on encoding).",
        "Note that these values are only hints as the data is received in chunks.",
        "returns the response.",
        "options.reader?",
        "TODO: Don't authenticate with ntlm, nodejs raises \"Parse error\" in return of connect with 407 -> HPE_INVALID_CONSTANT",
        "open proxy socket",
        "",
        "",
        "",
        "## NetStream",
        "",
        "This is a wrapper around streams returned by TCP and socket clients:",
        "",
        "These streams are both readable and writable (see `ReadableStream` and `WritableStream` above).",
        "",
        "creates a network stream wrapper.",
        "no multiple inheritance - so we delegate WritableStream methods",
        "",
        "## TCP and Socket clients",
        "",
        "These are wrappers around node's `net.createConnection`:",
        "",
        "returns a TCP connection client.",
        "returns a socket client.",
        "The `options` parameter of the constructor provide options for the stream (`lowMark` and `highMark`).",
        "If you want different options for `read` and `write` operations, you can specify them by creating `options.read` and `options.write` sub-objects inside `options`.",
        "connects the client and returns a network stream.",
        "",
        "## NetServer",
        "",
        "This is a wrapper around node's `net.Server` object:",
        "",
        "creates the wrapper.",
        "`connectionListener` is called as `connectionListener(stream, _)`",
        "where `stream` is a `NetStream` wrapper around the native connection.",
        "A fresh empty global context is set before every call to `connectionListener`. See [Global context API](https://github.com/Sage/streamline-runtime/blob/master/index.md).",
        "(same as `net.Server`)",
        "Obsolete API - use legacy exports to keep it hidden in TypeScript",
        "!nodoc",
        "## try/finally wrappers and pump",
        "",
        "wraps `stream` with an instance of `constructor`;",
        "passes the wrapper to `fn(_, wrapper)` and closes the stream after `fn` returns.",
        "`fn` is called inside a `try/finally` block to guarantee that the stream is closed in all cases.",
        "Returns the value returned by `fn`.",
        "shortcut for `streams.using(_, streams.ReadableStream, stream, options, fn)`",
        "shortcut for `streams.using(_, streams.WritableStream, stream, options, fn)`",
        "Pumps from `inStream` to `outStream`.",
        "Does not close the streams at the end.",
        "",
        "## Encoding detection",
        "",
        "The `options.detectEncoding` option controls how the encoding is sent by the",
        "`HttpServerRequest` and `HttpClientResponse` constructors.",
        "This option can take the following values:",
        "",
        "This algorithm is more lenient and sets the encoding to `utf8` when text content is detected, even",
        "if there is no charset indication.",
        "The function is called as `fn(headers)` and returns the encoding.",
        ""
    ],
    "docstrings": [
        "* Copyright (c) 2011 Bruno Jouhier <bruno.jouhier@sage.com>\n * MIT License",
        "* `wrapper = new streams.Wrapper(stream)`",
        "* `emitter = wrapper.emitter`",
        "* `closed = wrapper.closed`",
        "* `emitter = wrapper.unwrap()`",
        "* `stream = new streams.ReadableStream(stream[, options])`",
        "* `reader = stream.reader`",
        "* `stream.setEncoding(enc)`",
        "* `data = stream.read(_[, len])`",
        "* `data = stream.readAll(_)`",
        "* `stream.unread(chunk)`",
        "* `len = stream.available()`",
        "* `stream = new streams.WritableStream(stream[, options])`",
        "* `writer = stream.writer`",
        "* `stream.write(_, data[, enc])`",
        "* `stream.end()`",
        "* `request = new streams.HttpServerRequest(req[, options])`",
        "* `response = new streams.HttpServerResponse(resp[, options])`",
        "* `response.writeContinue()`",
        "* `response.writeHead(statusCode, headers)`",
        "* `response.setHeader(name, value)`",
        "* `value = response.getHeader(head)`",
        "* `response.removeHeader(name)`",
        "* `response.addTrailers(trailers)`",
        "* `response.statusCode = value`",
        "* `server = streams.createHttpServer(requestListener[, options])`",
        "* `server.listen(_, port[, host])`",
        "* `server.listen(_, path)`",
        "* `response = new HttpClientResponse(resp, options)`",
        "* `response = request.response(_)`",
        "* `status = response.statusCode`",
        "* `version = response.httpVersion`",
        "* `headers = response.headers`",
        "* `trailers = response.trailers`",
        "* `response.checkStatus(statuses)`",
        "* `request = streams.httpRequest(options)`",
        "* `method`: the HTTP method, `'GET'` by default.",
        "* `headers`: the HTTP headers.",
        "* `url`: the requested URL (with query string if necessary).",
        "* `proxy.url`: the proxy URL.",
        "* `lowMark` and `highMark`: low and high water mark values for buffering (in bytes or characters depending",
        "* `response = request.response(_)`",
        "* `stream = new streams.NetStream(stream[, options])`",
        "* `client = streams.tcpClient(port, host[, options])`",
        "* `client = streams.socketClient(path[, options])`",
        "* `stream = client.connect(_)`",
        "* `server = streams.createNetServer([serverOptions,] connectionListener [, streamOptions])`",
        "* `server.listen(_, port[, host])`",
        "* `server.listen(_, path)`",
        "* `result = streams.using(_, constructor, stream[, options], fn)`",
        "* `result = streams.usingReadable(_, stream[, options], fn)`",
        "* `result = streams.usingWritable(_, stream[, options], fn)`",
        "* `streams.pump(_, inStream, outStream)`",
        "* `strict`: the RFC-2616-7.2.1 rules are applied.",
        "* `default`: the default algorithm used by streamline v0.4 is used.",
        "* `disable`: null is always returned and the stream is always handled in binary mode (buffers rather than strings).",
        "* a function. This is a hook for custom encoding detection."
    ],
    "functions": [
        "nop",
        "_trackClose",
        "close",
        "closed",
        "unwrap",
        "_trackData",
        "_readChunk",
        "_concat",
        "setEncoding",
        "read",
        "readAll",
        "unread",
        "available",
        "stop",
        "events",
        "_drain",
        "write",
        "end",
        "events",
        "_getEncodingDefault",
        "_getEncodingStrict",
        "_getEncoding",
        "method",
        "url",
        "headers",
        "trailers",
        "rawHeaders",
        "rawTrailers",
        "httpVersion",
        "connection",
        "socket",
        "statusCode",
        "statusMessage",
        "client",
        "writeContinue",
        "writeHead",
        "setHeader",
        "getHeader",
        "removeHeader",
        "addTrailers",
        "statusCode",
        "statusCode",
        "statusMessage",
        "statusMessage",
        "_fixHttpServerOptions",
        "listen",
        "httpListener",
        "createHttpServer",
        "setTimeout",
        "statusCode",
        "statusMessage",
        "httpVersion",
        "headers",
        "trailers",
        "rawHeaders",
        "rawTrailers",
        "checkStatus",
        "_fixHttpClientOptions",
        "_trackResponse",
        "_responseCb",
        "response",
        "setTimeout",
        "proxyConnect",
        "proxyConnect",
        "response",
        "httpRequest",
        "write",
        "end",
        "writer",
        "setTimeout",
        "setNoDelay",
        "setKeepAlive",
        "unref",
        "destroy",
        "address",
        "localAddress",
        "localPort",
        "remoteAddress",
        "remotePort",
        "tcpClient",
        "socketClient",
        "_trackConnect",
        "connect",
        "createNetServer"
    ],
    "classes": [
        "Wrapper",
        "ReadableStream",
        "WritableStream",
        "HttpServerRequest",
        "HttpServerResponse",
        "Server",
        "HttpServer",
        "HttpClientResponse",
        "HttpClientRequest",
        "HttpProxyClientRequest",
        "NetStream",
        "NetClient",
        "NetServer"
    ]
}