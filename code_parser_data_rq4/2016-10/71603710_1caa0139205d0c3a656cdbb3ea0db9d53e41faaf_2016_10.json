{
    "identifiers": [
        "numpy",
        "np",
        "pandas",
        "pd",
        "random",
        "inspect",
        "functools",
        "partial",
        "multiprocessing",
        "Pool",
        "sklearn",
        "cross_validation",
        "pyfm_fast",
        "FM_fast_parallel",
        "CSRDataset",
        "num_factors",
        "num_iter",
        "num_epoch",
        "k0",
        "k1",
        "k2",
        "init_stdev",
        "validation_size",
        "learning_rate_schedule",
        "initial_learning_rate",
        "power_t",
        "t0",
        "task",
        "reg_speedup",
        "shuffle_training",
        "seed",
        "num_processes",
        "grad_threshold",
        "v_threshold",
        "num_factors",
        "num_iter",
        "np",
        "zeros",
        "num_factors",
        "np",
        "zeros",
        "num_factors",
        "k0",
        "k1",
        "k2",
        "init_stdev",
        "validation_size",
        "task",
        "shuffle_training",
        "seed",
        "num_processes",
        "learning_rate_schedule",
        "initial_learning_rate",
        "power_t",
        "initial_learning_rate",
        "t0",
        "np",
        "repeat",
        "num_factors",
        "reg_speedup",
        "grad_threshold",
        "v_threshold",
        "isinstance",
        "shuffle_training",
        "ValueError",
        "num_iter",
        "ValueError",
        "learning_rate_schedule",
        "eta0",
        "ValueError",
        "learning_rate",
        "LEARNING_RATE_TYPES",
        "learning_rate",
        "KeyError",
        "ValueError",
        "learning_rate",
        "task",
        "TASKS",
        "task",
        "KeyError",
        "ValueError",
        "task",
        "bool_arg",
        "bool_arg",
        "y",
        "np",
        "ones",
        "y",
        "shape",
        "dtype",
        "np",
        "float64",
        "order",
        "y",
        "y_i",
        "X",
        "y",
        "dictVec",
        "y",
        "np",
        "ndarray",
        "np",
        "array",
        "y",
        "_validate_params",
        "task",
        "_prepare_y",
        "y",
        "max",
        "y",
        "min",
        "y",
        "_bool_to_int",
        "shuffle_training",
        "_bool_to_int",
        "reg_speedup",
        "_get_learning_rate_type",
        "learning_rate_schedule",
        "_get_task",
        "task",
        "validation_size",
        "cross_validation",
        "train_test_split",
        "X",
        "y",
        "test_size",
        "validation_size",
        "X_train",
        "shape",
        "np",
        "unique",
        "st",
        "st",
        "rsplit",
        "dictVec",
        "get_feature_names",
        "return_inverse",
        "len",
        "attribute_list",
        "np",
        "array",
        "x",
        "x",
        "attribute_feature",
        "np",
        "zeros",
        "num_feature",
        "np",
        "random",
        "seed",
        "seed",
        "seed",
        "np",
        "random",
        "normal",
        "scale",
        "init_stdev",
        "size",
        "num_factors",
        "num_feature",
        "_make_dataset",
        "X_train",
        "train_labels",
        "_make_dataset",
        "validation",
        "validation_labels",
        "FM_fast_parallel",
        "w",
        "v",
        "num_factors",
        "num_feature",
        "num_attribute",
        "num_processes",
        "ind_feature_attribute",
        "num_iter",
        "_bool_to_int",
        "k0",
        "_bool_to_int",
        "k1",
        "_bool_to_int",
        "k2",
        "w0",
        "t",
        "t0",
        "power_t",
        "min_target",
        "max_target",
        "eta0",
        "learning_rate_schedule",
        "shuffle_training",
        "task",
        "seed",
        "reg_speedup",
        "grad_threshold",
        "v_threshold",
        "fm_fast",
        "fit",
        "X_train_dataset",
        "validation_dataset",
        "X",
        "_make_dataset",
        "X",
        "np",
        "ones",
        "X",
        "shape",
        "fm_fast",
        "_predict",
        "sparse_X",
        "dictVec",
        "np",
        "array",
        "st",
        "st",
        "rsplit",
        "dictVec",
        "get_feature_names",
        "np",
        "array",
        "st",
        "extract_feature_value",
        "st",
        "dictVec",
        "get_feature_names",
        "attribute_name",
        "pd",
        "DataFrame",
        "attribute_name",
        "attribute_value",
        "w",
        "i_factor",
        "num_factors",
        "i_factor",
        "v",
        "i_factor",
        "model_coef",
        "dictVec",
        "extract_toPandas",
        "dictVec",
        "model_coef",
        "columns",
        "len",
        "model_coef",
        "columns",
        "w0",
        "attr",
        "np",
        "unique",
        "model_coef",
        "model_coef",
        "model_coef",
        "attr",
        "irow",
        "model_coef",
        "shape",
        "output",
        "attr",
        "model_coef",
        "irow",
        "cols",
        "columns_json",
        "model_coef",
        "cols",
        "irow",
        "output",
        "attr",
        "model_coef",
        "irow",
        "append",
        "dict_empty",
        "output",
        "feature_string",
        "feature_string",
        "rsplit",
        "len",
        "feature_string_split",
        "feature_string_split",
        "X",
        "y_i",
        "np",
        "ones",
        "X",
        "shape",
        "dtype",
        "np",
        "float64",
        "order",
        "CSRDataset",
        "X",
        "data",
        "X",
        "indptr",
        "X",
        "indices",
        "y_i",
        "sample_weight",
        "dataset"
    ],
    "literals": [
        "\"optimal\"",
        "\"invscaling\"",
        "\"constant\"",
        "\"regression\"",
        "\"classification\"",
        "\"optimal\"",
        "'classification'",
        "\"shuffle must be either True or False\"",
        "\"n_iter must be > zero\"",
        "\"constant\"",
        "\"invscaling\"",
        "\"eta0 must be > 0\"",
        "\"learning rate %s \"",
        "\"is not supported. \"",
        "\"task %s \"",
        "\"is not supported. \"",
        "\"C\"",
        "\"classification\"",
        "\"Creating validation dataset of %.2f of training for adaptive regularization\"",
        "'='",
        "'='",
        "'Attribute_name'",
        "'Attribute_value'",
        "'w'",
        "'v'",
        "'intercept'",
        "'Attribute_name'",
        "'Attribute_name'",
        "'Attribute_value'",
        "'Attribute_value'",
        "'='",
        "\"NA\"",
        "'C'"
    ],
    "variables": [
        "LEARNING_RATE_TYPES",
        "TASKS",
        "num_factors",
        "num_iter",
        "sum",
        "sum_sqr",
        "k0",
        "k1",
        "k2",
        "init_stdev",
        "validation_size",
        "task",
        "shuffle_training",
        "seed",
        "num_processes",
        "learning_rate_schedule",
        "eta0",
        "power_t",
        "t",
        "learning_rate",
        "t0",
        "reg_0",
        "reg_w",
        "reg_v",
        "lambda_w_grad",
        "lambda_v_grad",
        "sum_f",
        "sum_f_dash_f",
        "reg_speedup",
        "grad_threshold",
        "v_threshold",
        "y_i",
        "y_i",
        "y",
        "y",
        "max_target",
        "min_target",
        "shuffle_training",
        "reg_speedup",
        "learning_rate_schedule",
        "task",
        "X_train",
        "validation",
        "train_labels",
        "validation_labels",
        "num_feature",
        "attribute_list",
        "attribute_feature",
        "num_attribute",
        "ind_feature_attribute",
        "w0",
        "w",
        "v",
        "X_train_dataset",
        "validation_dataset",
        "fm_fast",
        "sparse_X",
        "attribute_name",
        "attribute_value",
        "values",
        "model_coef",
        "v_name",
        "model_coef",
        "v_name",
        "model_coef",
        "columns_json",
        "output",
        "model_coef_sub",
        "output",
        "attr",
        "dict_empty",
        "dict_empty",
        "cols",
        "feature_string_split",
        "sample_weight",
        "dataset"
    ],
    "comments": [
        "Learning rate Parameters",
        "Regularization Parameters (start with no regularization)",
        "local parameters in the lambda_update step",
        "convert member variables to ints for use in cython",
        "use sklearn to create a validation dataset for lambda updates",
        "Set up params",
        "Convert datasets to sklearn sequential datasets for fast traversal",
        "Extract coefficients",
        "ignore sample weight for the moment"
    ],
    "docstrings": [
        "\"\"\"Factorization machine fitted by minimizing a regularized empirical loss with adaptive SGD.\n\n    Parameters\n    ----------\n\n    num_factors : int \n        The dimensionality of the factorized 2-way interactions\n    num_iter : int\n        Number of iterations\n    k0 : bool\n        Use bias. Defaults to true.\n    k1 : bool\n        Use 1-way interactions (learn feature weights).\n        Defaults to true.\n    init_stdev : double, optional\n        Standard deviation for initialization of 2-way factors.\n        Defaults to 0.01.\n    validation_size : double, optional\n        Proportion of the training set to use for validation. \n        Defaults to 0.01.\n    learning_rate_schedule : string, optional\n        The learning rate:\n            constant: eta = eta0\n            optimal: eta = 1.0/(t+t0) [default]\n            invscaling: eta = eta0 / pow(t, power_t)\n    initial_learning_rate : double\n        Defaults to 0.01\n    power_t : double\n        The exponent for inverse scaling learning rate [default 0.5].\n    t0 : double\n        Constant in the denominator for optimal learning rate schedule.\n        Defaults to 0.001.\n    task : string\n        regression: Labels are real values.\n        classification: Labels are either positive or negative.\n    reg_speedup : bool\n        Whether or not to print current iteration, training error\n    shuffle_training: bool\n        Whether or not to shuffle training dataset before learning\n    seed : int\n        The seed of the pseudo random number generator\n    \"\"\"",
        "\"\"\"Validate input params. \"\"\"",
        "\"\"\"Map learning rate string to int for cython\"\"\"",
        "\"\"\"Map task string to int for cython\"\"\"",
        "\"\"\"Map bool to int for cython\"\"\"",
        "\"\"\"Maps labels to [-1, 1] space\"\"\"",
        "\"\"\"Fit factorization machine using Stochastic Gradient Descent with Adaptive Regularization.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix}, shape = [n_samples, n_features]\n            Training data\n\n        y : numpy array of shape [n_samples]\n            Target values\n\n        dictVec : dictionary vectorizer\n\n        Returns\n        -------\n        self : returns an instance of self.\n        \"\"\"",
        "\"\"\"Predict using the factorization machine\n\n        Parameters\n        ----------\n        X : sparse matrix, shape = [n_samples, n_features]\n        or\n        X : single instance [1, n_features]\n\n        Returns\n        -------\n        float if X is one instance\n        array, shape = [n_samples] if X is sparse matrix\n           Predicted target values per element in X.\n        \"\"\"",
        "\"\"\"Extract model coefficients and return a JSON object\n\n        Parameters\n        ----------\n        dictVec : dictionary vectorizer\n\n        Returns\n        -------\n        JSON object containing intercept, linear coefficients and latent factors\n        \"\"\"",
        "\"\"\"Create ``Dataset`` abstraction for sparse and dense inputs.\"\"\""
    ],
    "functions": [
        "_validate_params",
        "_get_learning_rate_type",
        "_get_task",
        "_bool_to_int",
        "_prepare_y",
        "fit",
        "predict",
        "extract_toPandas",
        "extract_toJSON",
        "extract_feature_value",
        "_make_dataset"
    ],
    "classes": [
        "FM"
    ]
}