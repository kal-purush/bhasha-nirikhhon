{
    "identifiers": [
        "absolute_import",
        "contextlib",
        "contextmanager",
        "sys",
        "six",
        "StringIO",
        "behave",
        "log_capture",
        "LoggingCapture",
        "behave",
        "textutil",
        "text",
        "_text",
        "value",
        "more_text",
        "separator",
        "more_text",
        "value",
        "separator",
        "value",
        "endswith",
        "separator",
        "value",
        "separator",
        "value",
        "more_text",
        "more_text",
        "value",
        "stdout",
        "stderr",
        "log_output",
        "stdout",
        "empty",
        "stderr",
        "empty",
        "log_output",
        "empty",
        "empty",
        "empty",
        "empty",
        "stdout",
        "stderr",
        "log_output",
        "__nonzero__",
        "property",
        "stdout",
        "add_text_to",
        "output_text",
        "stderr",
        "add_text_to",
        "output_text",
        "log_output",
        "output_text",
        "captured",
        "isinstance",
        "captured",
        "Captured",
        "add_text_to",
        "stdout",
        "captured",
        "stdout",
        "linesep",
        "add_text_to",
        "stderr",
        "captured",
        "stderr",
        "linesep",
        "add_text_to",
        "log_output",
        "captured",
        "log_output",
        "linesep",
        "stdout",
        "_text",
        "stdout",
        "rstrip",
        "report_parts",
        "extend",
        "parts",
        "stderr",
        "_text",
        "stderr",
        "rstrip",
        "report_parts",
        "extend",
        "parts",
        "log_output",
        "_text",
        "log_output",
        "report_parts",
        "extend",
        "parts",
        "linesep",
        "join",
        "report_parts",
        "strip",
        "other",
        "Captured",
        "stdout",
        "stderr",
        "log_output",
        "new_data",
        "add",
        "other",
        "other",
        "add",
        "other",
        "config",
        "config",
        "property",
        "config",
        "stdout_capture",
        "stdout_capture",
        "_text",
        "stdout_capture",
        "getvalue",
        "config",
        "stderr_capture",
        "stderr_capture",
        "_text",
        "stderr_capture",
        "getvalue",
        "config",
        "log_capture",
        "log_capture",
        "_text",
        "log_capture",
        "getvalue",
        "Captured",
        "stdout",
        "stderr",
        "log_out",
        "context",
        "context",
        "config",
        "stdout_capture",
        "StringIO",
        "stdout_capture",
        "config",
        "stderr_capture",
        "StringIO",
        "stderr_capture",
        "config",
        "log_capture",
        "LoggingCapture",
        "config",
        "log_capture",
        "inveigle",
        "log_capture",
        "config",
        "stdout_capture",
        "old_stdout",
        "sys",
        "stdout",
        "stdout_capture",
        "sys",
        "stdout",
        "stdout_capture",
        "config",
        "stderr_capture",
        "old_stderr",
        "sys",
        "stderr",
        "stderr_capture",
        "sys",
        "stderr",
        "stderr_capture",
        "config",
        "stdout_capture",
        "old_stdout",
        "old_stdout",
        "sys",
        "stdout",
        "stdout_capture",
        "config",
        "stderr_capture",
        "old_stderr",
        "old_stderr",
        "sys",
        "stderr",
        "stderr_capture",
        "config",
        "log_capture",
        "log_capture",
        "abandon",
        "captured",
        "make_report",
        "contextmanager",
        "controller",
        "enabled",
        "enabled",
        "controller",
        "start_capture",
        "controller",
        "stop_capture"
    ],
    "literals": [
        "\"\\n\"",
        "u\"\"",
        "u\"\\n\"",
        "\"Captured stdout:\"",
        "\"\"",
        "\"Captured stderr:\"",
        "\"\"",
        "\"Captured logging:\""
    ],
    "variables": [
        "value",
        "empty",
        "linesep",
        "stdout",
        "stderr",
        "log_output",
        "stdout",
        "stderr",
        "log_output",
        "__bool__",
        "output_text",
        "output_text",
        "output_text",
        "stdout",
        "stderr",
        "log_output",
        "report_parts",
        "parts",
        "parts",
        "parts",
        "new_data",
        "config",
        "stdout_capture",
        "stderr_capture",
        "log_capture",
        "old_stdout",
        "old_stderr",
        "stdout",
        "stderr",
        "log_out",
        "stdout",
        "stderr",
        "log_out",
        "stdout_capture",
        "context",
        "stdout_capture",
        "stderr_capture",
        "context",
        "stderr_capture",
        "log_capture",
        "context",
        "log_capture",
        "old_stdout",
        "sys",
        "stdout",
        "old_stderr",
        "sys",
        "stderr",
        "sys",
        "stdout",
        "old_stdout",
        "sys",
        "stderr",
        "old_stderr"
    ],
    "comments": [
        "-*- coding: UTF-8 -*-",
        "-- PYTHON2:",
        "-- FOR: PYTHON3",
        "-- REPLACE ONLY: In non-capturing mode.",
        "-- REPLACE ONLY: In non-capturing mode.",
        "-- RESTORE ONLY: In capturing mode.",
        "-- RESTORE ONLY: In capturing mode.",
        "report = u\"\"",
        "if self.config.stdout_capture and self.stdout_capture:",
        "output = self.stdout_capture.getvalue()",
        "if output:",
        "output = _text(output)",
        "report += u\"\\nCaptured stdout:\\n\" + output",
        "if self.config.stderr_capture and self.stderr_capture:",
        "output = self.stderr_capture.getvalue()",
        "if output:",
        "output = _text(output)",
        "report += u\"\\nCaptured stderr:\\n\" + output",
        "if self.config.log_capture and self.log_capture:",
        "output = self.log_capture.getvalue()",
        "if output:",
        "output = _text(output)",
        "report += u\"\\nCaptured logging:\\n\" + output",
        "return report",
        "-----------------------------------------------------------------------------",
        "UTILITY FUNCTIONS:",
        "-----------------------------------------------------------------------------",
        "-- CAPTURING OUTPUT is disabled.",
        "Needed to prevent recursive captures with context.execute_steps()"
    ],
    "docstrings": [
        "\"\"\"\nCapture output (stdout, stderr), logs, etc.\n\"\"\"",
        "\"\"\"Stores and aggregates captured output data.\"\"\"",
        "\"\"\"Makes a simple report of the captured data by concatenating\n        all parts.\n        \"\"\"",
        "\"\"\"Adds/appends captured output data to this object.\n\n        :param captured:    Captured object whose data should be added.\n        :return: self, to allow daisy-chaining (if needed).\n        \"\"\"",
        "\"\"\"Makes a detailled report of the captured output data.\n\n        :returns: Report as string.\n        \"\"\"",
        "\"\"\"Supports incremental add::\n\n            captured1 = Captured(\"Hello\")\n            captured2 = Captured(\"World\")\n            captured3 = captured1 + captured2\n            assert captured3.stdout == \"Hello\\nWorld\"\n        \"\"\"",
        "\"\"\"Supports incremental add::\n\n            captured1 = Captured(\"Hello\")\n            captured2 = Captured(\"World\")\n            captured1 += captured2\n            assert captured1.stdout == \"Hello\\nWorld\"\n        \"\"\"",
        "\"\"\"Simplifies the lifecycle to capture output from various sources.\"\"\"",
        "\"\"\"Provides access of the captured output data.\n\n        :return: Object that stores the captured output parts (as Captured).\n        \"\"\"",
        "\"\"\"Combine collected output and return as string.\"\"\"",
        "\"\"\"Provides a context manager that starts capturing output\n\n    .. code-block::\n\n        with capture_output(capture_controller):\n            ... # Do something\n    \"\"\""
    ],
    "functions": [
        "add_text_to",
        "reset",
        "__nonzero__",
        "output",
        "add",
        "make_report",
        "__add__",
        "__iadd__",
        "captured",
        "setup_capture",
        "start_capture",
        "stop_capture",
        "teardown_capture",
        "make_capture_report",
        "capture_output"
    ],
    "classes": [
        "Captured",
        "CaptureController"
    ]
}