{
    "identifiers": [
        "f",
        "exports",
        "f",
        "define",
        "define",
        "define",
        "f",
        "g",
        "g",
        "g",
        "g",
        "g",
        "f",
        "e",
        "t",
        "n",
        "r",
        "o",
        "u",
        "n",
        "o",
        "t",
        "o",
        "require",
        "require",
        "u",
        "a",
        "a",
        "o",
        "i",
        "i",
        "o",
        "o",
        "f",
        "f",
        "n",
        "o",
        "t",
        "o",
        "l",
        "e",
        "t",
        "o",
        "e",
        "s",
        "n",
        "n",
        "e",
        "l",
        "l",
        "e",
        "t",
        "n",
        "r",
        "n",
        "o",
        "require",
        "require",
        "o",
        "r",
        "o",
        "s",
        "r",
        "o",
        "s",
        "require",
        "exports",
        "require",
        "structuredData",
        "delta",
        "delta",
        "count",
        "tableNames",
        "count",
        "structuredData",
        "tableNames",
        "count",
        "structuredData",
        "tableNames",
        "count",
        "delta",
        "tableNames",
        "count",
        "structuredData",
        "tableNames",
        "count",
        "delta",
        "tableNames",
        "count",
        "delta",
        "tableNames",
        "count",
        "delta",
        "tableNames",
        "count",
        "j",
        "ids",
        "j",
        "structuredData",
        "tableNames",
        "count",
        "ids",
        "j",
        "structuredData",
        "tableNames",
        "count",
        "ids",
        "j",
        "delta",
        "tableNames",
        "count",
        "ids",
        "j",
        "delta",
        "tableNames",
        "count",
        "delta",
        "tableNames",
        "count",
        "j",
        "ids",
        "j",
        "structuredData",
        "tableNames",
        "count",
        "ids",
        "j",
        "record",
        "record",
        "delta",
        "tableNames",
        "count",
        "ids",
        "j",
        "delta",
        "tableNames",
        "count",
        "j",
        "delta",
        "tableNames",
        "count",
        "j",
        "structuredData",
        "tableNames",
        "count",
        "delta",
        "tableNames",
        "count",
        "j",
        "structuredData",
        "snapshotData",
        "structuredData",
        "i",
        "structuredData",
        "i",
        "structuredData",
        "tablesNames",
        "i",
        "snapshotData",
        "i",
        "snapshotTablesNames",
        "i",
        "structuredData",
        "snapshotTablesNames",
        "i",
        "snapshotData",
        "snapshotTablesNames",
        "i",
        "remoteDeltas",
        "currentDelta",
        "currentDelta",
        "i",
        "remoteDeltas",
        "i",
        "remoteDeltas",
        "i",
        "delta",
        "j",
        "tableNames",
        "j",
        "delta",
        "tableNames",
        "j",
        "newDelta",
        "tableNames",
        "j",
        "newDelta",
        "tableNames",
        "j",
        "newDelta",
        "tableNames",
        "j",
        "k",
        "delta",
        "tableNames",
        "j",
        "k",
        "newDelta",
        "tableNames",
        "j",
        "newDelta",
        "tableNames",
        "j",
        "delta",
        "tableNames",
        "j",
        "k",
        "newDelta",
        "tableNames",
        "j",
        "delta",
        "tableNames",
        "j",
        "k",
        "index",
        "newDelta",
        "tableNames",
        "j",
        "index",
        "newDelta",
        "tableNames",
        "j",
        "newDelta",
        "tableNames",
        "j",
        "newDelta",
        "tableNames",
        "j",
        "newDelta",
        "tableNames",
        "j",
        "delta",
        "tableNames",
        "j",
        "newDelta",
        "tableNames",
        "j",
        "newDelta",
        "tableNames",
        "j",
        "newDelta",
        "tableNames",
        "j",
        "newDelta",
        "tableNames",
        "j",
        "delta",
        "tableNames",
        "j",
        "newDelta",
        "tableNames",
        "j",
        "k",
        "ids",
        "k",
        "delta",
        "tableNames",
        "j",
        "ids",
        "k",
        "newDelta",
        "tableNames",
        "j",
        "ids",
        "k",
        "delta",
        "tableNames",
        "j",
        "ids",
        "k",
        "newDelta",
        "queue",
        "run",
        "queue",
        "running",
        "queue",
        "next",
        "running",
        "add",
        "func",
        "queue",
        "func",
        "start",
        "running",
        "run",
        "ver",
        "clip",
        "clip",
        "ver",
        "clipStr",
        "clipStr",
        "parseFloat",
        "newVer",
        "ver",
        "parseInt",
        "ver",
        "ver",
        "clip",
        "clip",
        "increaseMinorVersion",
        "ver",
        "clip",
        "minVer",
        "parseInt",
        "ver",
        "clipStr",
        "clip",
        "increaseMajorVersion",
        "ver",
        "minVer",
        "datastorePath",
        "options",
        "options",
        "options",
        "options",
        "options",
        "QueueHandler",
        "currentDelta",
        "callback",
        "store",
        "datastorePath",
        "err",
        "err",
        "callback",
        "err",
        "i",
        "i",
        "parseFloat",
        "i",
        "num",
        "fileList",
        "num",
        "fileList",
        "increaseVersion",
        "latestRevision",
        "clip",
        "parseFloat",
        "fileList",
        "fileList",
        "uploadRevision",
        "serverRevision",
        "callback",
        "currentDelta",
        "fileList",
        "uploadRevision",
        "index",
        "count",
        "index",
        "fileName",
        "store",
        "datastorePath",
        "fileName",
        "err",
        "data",
        "count",
        "err",
        "data",
        "updateStructuedData",
        "structuredData",
        "delta",
        "deltas",
        "delta",
        "count",
        "fileList",
        "getFile",
        "fileList",
        "count",
        "latestRevision",
        "serverRevision",
        "currentDelta",
        "resolveConflict",
        "deltas",
        "currentDelta",
        "callback",
        "currentDelta",
        "deltas",
        "getFile",
        "fileList",
        "count",
        "callback",
        "currentDelta",
        "setTimeout",
        "store",
        "datastorePath",
        "err",
        "fileName",
        "err",
        "poll",
        "latestServerRevision",
        "parseFloat",
        "fileName",
        "latestServerRevision",
        "latestRevision",
        "latestServerRevision",
        "tables",
        "i",
        "tableNames",
        "i",
        "tables",
        "tableNames",
        "i",
        "table",
        "delta",
        "currentDelta",
        "tableNames",
        "i",
        "delta",
        "getAndResolveConflictDelta",
        "currentDelta",
        "err",
        "currentDelta",
        "remoteDeltas",
        "err",
        "cb",
        "cb",
        "err",
        "poll",
        "remoteDeltas",
        "remoteDeltas",
        "eventListeners",
        "j",
        "eventListeners",
        "j",
        "eventListeners",
        "j",
        "remoteDeltas",
        "i",
        "tableNames",
        "i",
        "tables",
        "tableNames",
        "i",
        "currentDelta",
        "tableNames",
        "i",
        "poll",
        "poll",
        "poll",
        "getTable",
        "tableName",
        "tables",
        "tableName",
        "table",
        "table",
        "Table",
        "tableName",
        "structuredData",
        "tables",
        "tableName",
        "table",
        "table",
        "currentDelta",
        "cb",
        "increaseVersion",
        "latestRevision",
        "clip",
        "rev",
        "snapshotDelta",
        "structuredData",
        "newStructuredData",
        "i",
        "tableNames",
        "i",
        "snapshotDelta",
        "tableNames",
        "i",
        "snapshotDelta",
        "tableNames",
        "i",
        "newStructuredData",
        "tableNames",
        "i",
        "snapshotDelta",
        "dataToSave",
        "snapshotDelta",
        "store",
        "datastorePath",
        "rev",
        "dataToSave",
        "err",
        "err",
        "err",
        "getAndResolveConflictDelta",
        "currentDelta",
        "err",
        "currentDelta",
        "err",
        "cb",
        "cb",
        "err",
        "saveData",
        "currentDelta",
        "cb",
        "cb",
        "cb",
        "err",
        "latestRevision",
        "rev",
        "snapshotDelta",
        "updateStructuredDataWithSnapshot",
        "structuredData",
        "newStructuredData",
        "parseInt",
        "latestRevision",
        "deleteRevision",
        "deleteRevision",
        "deleteRevision",
        "deleteList",
        "datastorePath",
        "v",
        "v",
        "increaseVersion",
        "v",
        "clip",
        "parseInt",
        "v",
        "deleteRevision",
        "deleteList",
        "datastorePath",
        "v",
        "store",
        "deleteList",
        "err",
        "saveData",
        "currentDelta",
        "cb",
        "updateStructuedData",
        "structuredData",
        "currentDelta",
        "cb",
        "cb",
        "cb",
        "tables",
        "i",
        "tableNames",
        "i",
        "tables",
        "tableNames",
        "i",
        "table",
        "delta",
        "currentDelta",
        "tableNames",
        "i",
        "delta",
        "currentDelta",
        "cb",
        "cb",
        "i",
        "tableNames",
        "i",
        "tables",
        "tableNames",
        "i",
        "saveData",
        "currentDelta",
        "cb",
        "commit",
        "cb",
        "queue",
        "next",
        "commitData",
        "err",
        "cb",
        "cb",
        "err",
        "next",
        "queue",
        "func",
        "func",
        "eventListeners",
        "func",
        "getCurrentRevisionNo",
        "latestRevision",
        "options",
        "callback",
        "options",
        "options",
        "relativePath",
        "datastoreName",
        "options",
        "store",
        "datastorePath",
        "err",
        "exists",
        "err",
        "callback",
        "err",
        "exists",
        "store",
        "datastorePath",
        "err",
        "err",
        "callback",
        "err",
        "i",
        "i",
        "parseFloat",
        "i",
        "num",
        "fileList",
        "num",
        "fileList",
        "parseInt",
        "fileList",
        "fileList",
        "latestRevision",
        "latestRevision",
        "fileList",
        "latestRevision",
        "index",
        "count",
        "index",
        "fileName",
        "fileName",
        "store",
        "datastorePath",
        "fileName",
        "err",
        "data",
        "err",
        "callback",
        "err",
        "data",
        "data",
        "updateStructuedData",
        "structuredData",
        "data",
        "count",
        "count",
        "fileList",
        "getFile",
        "fileList",
        "count",
        "Datastore",
        "datastorePath",
        "structuredData",
        "store",
        "parseFloat",
        "fileList",
        "fileList",
        "callback",
        "datastore",
        "getFile",
        "fileList",
        "count",
        "Datastore",
        "datastorePath",
        "structuredData",
        "store",
        "callback",
        "datastore",
        "store",
        "datastorePath",
        "err",
        "data",
        "err",
        "callback",
        "err",
        "Datastore",
        "datastorePath",
        "structuredData",
        "store",
        "callback",
        "datastore",
        "require",
        "exports",
        "require",
        "tableName",
        "structuredData",
        "structuredData",
        "tableName",
        "tableData",
        "records",
        "tableData",
        "i",
        "keys",
        "i",
        "keys",
        "i",
        "tableData",
        "keys",
        "i",
        "records",
        "record",
        "records",
        "getRecord",
        "recordId",
        "structuredData",
        "tableName",
        "tableData",
        "tableData",
        "recordId",
        "recordData",
        "recordId",
        "recordData",
        "record",
        "insert",
        "recordData",
        "shortid",
        "currentDelta",
        "currentDelta",
        "currentDelta",
        "i",
        "id",
        "recordData",
        "id",
        "recordData",
        "removeRecord",
        "recordId",
        "currentDelta",
        "currentDelta",
        "currentDelta",
        "recordId",
        "currentDelta",
        "currentDelta",
        "recordId",
        "currentDelta",
        "recordId",
        "query",
        "queryObj",
        "structuredData",
        "tableName",
        "tableData",
        "queryObj",
        "tableData",
        "i",
        "ids",
        "i",
        "tableData",
        "ids",
        "i",
        "j",
        "searchKeys",
        "j",
        "item",
        "searchKeys",
        "j",
        "queryObj",
        "searchKeys",
        "j",
        "found",
        "found",
        "ids",
        "i",
        "item",
        "records",
        "record",
        "records",
        "reset",
        "currentDelta",
        "getDelta",
        "obj",
        "currentDelta",
        "obj",
        "setDelta",
        "delta",
        "delta",
        "currentDelta",
        "delta",
        "id",
        "recordData",
        "getId",
        "id",
        "get",
        "key",
        "structuredData",
        "tableName",
        "tableData",
        "tableData",
        "id",
        "recordData",
        "recordData",
        "key",
        "key",
        "value",
        "currentDelta",
        "currentDelta",
        "currentDelta",
        "u",
        "id",
        "updateData",
        "u",
        "id",
        "updateData",
        "updateData",
        "key",
        "value",
        "deleteRecord",
        "id",
        "Table",
        "require",
        "exports",
        "require",
        "require",
        "openDatastore",
        "datastoreName",
        "options",
        "callback",
        "storageService",
        "options",
        "options",
        "Storage",
        "storageOptions",
        "Datastore",
        "datastoreName",
        "store",
        "options",
        "err",
        "datastore",
        "callback",
        "err",
        "datastore",
        "Contructor",
        "storageService",
        "Contructor",
        "require",
        "exports",
        "require",
        "require",
        "exports",
        "require",
        "shuffled",
        "_alphabet_",
        "_alphabet_",
        "alphabet",
        "ORIGINAL",
        "alphabet",
        "ORIGINAL",
        "reset",
        "_alphabet_",
        "alphabet",
        "_alphabet_",
        "ORIGINAL",
        "ORIGINAL",
        "_alphabet_",
        "_alphabet_",
        "_alphabet_",
        "item",
        "ind",
        "arr",
        "ind",
        "arr",
        "item",
        "unique",
        "ORIGINAL",
        "unique",
        "alphabet",
        "_alphabet_",
        "reset",
        "_alphabet_",
        "setCharacters",
        "_alphabet_",
        "alphabet",
        "seed",
        "randomFromSeed",
        "seed",
        "previousSeed",
        "seed",
        "reset",
        "previousSeed",
        "seed",
        "alphabet",
        "setCharacters",
        "ORIGINAL",
        "alphabet",
        "randomFromSeed",
        "sourceArray",
        "r",
        "randomFromSeed",
        "characterIndex",
        "r",
        "sourceArray",
        "targetArray",
        "sourceArray",
        "characterIndex",
        "targetArray",
        "shuffled",
        "shuffled",
        "shuffled",
        "shuffle",
        "shuffled",
        "index",
        "getShuffled",
        "alphabetShuffled",
        "index",
        "characters",
        "setSeed",
        "lookup",
        "getShuffled",
        "require",
        "exports",
        "require",
        "id",
        "alphabet",
        "characters",
        "id",
        "characters",
        "id",
        "decode",
        "require",
        "exports",
        "require",
        "lookup",
        "number",
        "done",
        "lookup",
        "number",
        "loopCounter",
        "randomByte",
        "done",
        "number",
        "loopCounter",
        "loopCounter",
        "encode",
        "require",
        "exports",
        "require",
        "require",
        "require",
        "require",
        "require",
        "REDUCE_TIME",
        "seconds",
        "previousSeconds",
        "counter",
        "counter",
        "previousSeconds",
        "seconds",
        "encode",
        "alphabet",
        "version",
        "encode",
        "alphabet",
        "clusterWorkerId",
        "counter",
        "encode",
        "alphabet",
        "counter",
        "encode",
        "alphabet",
        "seconds",
        "seedValue",
        "alphabet",
        "seedValue",
        "workerId",
        "clusterWorkerId",
        "workerId",
        "newCharacters",
        "newCharacters",
        "alphabet",
        "newCharacters",
        "alphabet",
        "generate",
        "generate",
        "seed",
        "worker",
        "characters",
        "decode",
        "isValid",
        "require",
        "exports",
        "require",
        "id",
        "id",
        "id",
        "id",
        "alphabet",
        "id",
        "i",
        "len",
        "i",
        "characters",
        "id",
        "i",
        "isShortId",
        "require",
        "exports",
        "crypto",
        "crypto",
        "Uint8Array",
        "crypto",
        "dest",
        "dest",
        "randomByte",
        "require",
        "exports",
        "seed",
        "seed",
        "seed",
        "_seed_",
        "seed",
        "_seed_",
        "getNextValue",
        "setSeed",
        "require",
        "exports",
        "require",
        "exports",
        "require",
        "options",
        "options",
        "additionalHeaders",
        "accessToken",
        "headers",
        "additionalHeaders",
        "additionalHeaders",
        "i",
        "keys",
        "i",
        "headers",
        "keys",
        "i",
        "additionalHeaders",
        "keys",
        "i",
        "headers",
        "res",
        "callback",
        "res",
        "err",
        "callback",
        "err",
        "res",
        "d",
        "resBody",
        "resBody",
        "d",
        "res",
        "callback",
        "resBody",
        "path",
        "callback",
        "path",
        "http",
        "getHeaders",
        "res",
        "processResponse",
        "res",
        "err",
        "resBody",
        "err",
        "callback",
        "err",
        "res",
        "resBody",
        "callback",
        "resObj",
        "callback",
        "res",
        "resBody",
        "req",
        "req",
        "cursor",
        "callback",
        "cursor",
        "http",
        "getHeaders",
        "res",
        "processResponse",
        "res",
        "err",
        "resBody",
        "err",
        "callback",
        "err",
        "res",
        "resBody",
        "callback",
        "resObj",
        "callback",
        "res",
        "resBody",
        "req",
        "req",
        "setOnChangeEventListener",
        "func",
        "onChangeEventListener",
        "func",
        "path",
        "callback",
        "path",
        "http",
        "getHeaders",
        "res",
        "processResponse",
        "res",
        "err",
        "resBody",
        "err",
        "callback",
        "err",
        "res",
        "callback",
        "resBody",
        "resObj",
        "callback",
        "callback",
        "res",
        "resBody",
        "callback",
        "res",
        "resBody",
        "req",
        "req",
        "createDir",
        "path",
        "callback",
        "path",
        "http",
        "getHeaders",
        "res",
        "processResponse",
        "res",
        "err",
        "resBody",
        "err",
        "callback",
        "err",
        "res",
        "resBody",
        "callback",
        "resObj",
        "callback",
        "res",
        "resBody",
        "req",
        "req",
        "getFileList",
        "path",
        "callback",
        "err",
        "data",
        "err",
        "callback",
        "err",
        "i",
        "data",
        "i",
        "fileList",
        "data",
        "i",
        "latestCursor",
        "data",
        "data",
        "lisfFolderContinue",
        "data",
        "listFolderCallback",
        "callback",
        "fileList",
        "listFolder",
        "path",
        "listFolderCallback",
        "getLatestFileName",
        "path",
        "callback",
        "err",
        "data",
        "err",
        "callback",
        "err",
        "latestCursor",
        "data",
        "data",
        "lisfFolderContinue",
        "data",
        "listFolderCallback",
        "data",
        "data",
        "callback",
        "data",
        "data",
        "callback",
        "latestCursor",
        "lisfFolderContinue",
        "latestCursor",
        "listFolderCallback",
        "listFolder",
        "path",
        "listFolderCallback",
        "getFile",
        "filePath",
        "callback",
        "filePath",
        "http",
        "getHeaders",
        "res",
        "processResponse",
        "res",
        "err",
        "resBody",
        "err",
        "callback",
        "err",
        "res",
        "headers",
        "headers",
        "rev",
        "apiResultObj",
        "callback",
        "resBody",
        "callback",
        "res",
        "resBody",
        "req",
        "saveFile",
        "filePath",
        "data",
        "callback",
        "uploading",
        "filePath",
        "http",
        "getHeaders",
        "res",
        "processResponse",
        "res",
        "err",
        "resBody",
        "err",
        "uploading",
        "callback",
        "err",
        "res",
        "resBody",
        "rev",
        "resObj",
        "uploading",
        "callback",
        "resBody",
        "resObj",
        "resBody",
        "resObj",
        "res",
        "resObj",
        "callback",
        "uploading",
        "callback",
        "res",
        "resBody",
        "data",
        "data",
        "data",
        "req",
        "data",
        "req",
        "asynId",
        "callback",
        "setTimeout",
        "asynId",
        "http",
        "getHeaders",
        "res",
        "processResponse",
        "res",
        "err",
        "resBody",
        "err",
        "callback",
        "err",
        "res",
        "resBody",
        "resObj",
        "callback",
        "resObj",
        "checkForDeleteOps",
        "asynId",
        "callback",
        "callback",
        "res",
        "resBody",
        "callback",
        "res",
        "resBody",
        "req",
        "reqParams",
        "req",
        "deleteFiles",
        "fileList",
        "callback",
        "fileList",
        "fileList",
        "i",
        "fileList",
        "i",
        "reqParams",
        "fileList",
        "i",
        "callback",
        "http",
        "getHeaders",
        "res",
        "processResponse",
        "res",
        "err",
        "resBody",
        "err",
        "callback",
        "err",
        "res",
        "resBody",
        "resObj",
        "callback",
        "resObj",
        "checkForDeleteOps",
        "resObj",
        "callback",
        "callback",
        "res",
        "resBody",
        "callback",
        "res",
        "resBody",
        "req",
        "reqParams",
        "req",
        "DropboxStorage",
        "require",
        "exports",
        "require",
        "DropboxStorage",
        "storages",
        "storage",
        "storage",
        "StorageConstructor",
        "storages",
        "StorageConstructor",
        "require",
        "exports",
        "require",
        "exports",
        "require",
        "require",
        "require",
        "exports",
        "Buffer",
        "exports",
        "SlowBuffer",
        "exports",
        "Buffer",
        "typedArraySupport",
        "exports",
        "kMaxLength",
        "Uint8Array",
        "arr",
        "Uint8Array",
        "arr",
        "arr",
        "arr",
        "e",
        "Buffer",
        "that",
        "length",
        "kMaxLength",
        "length",
        "RangeError",
        "Buffer",
        "that",
        "Uint8Array",
        "length",
        "that",
        "Buffer",
        "that",
        "that",
        "Buffer",
        "length",
        "that",
        "length",
        "that",
        "arg",
        "encodingOrOffset",
        "length",
        "Buffer",
        "Buffer",
        "Buffer",
        "arg",
        "encodingOrOffset",
        "length",
        "arg",
        "encodingOrOffset",
        "allocUnsafe",
        "arg",
        "arg",
        "encodingOrOffset",
        "length",
        "Buffer",
        "Buffer",
        "arr",
        "arr",
        "Buffer",
        "arr",
        "that",
        "value",
        "encodingOrOffset",
        "length",
        "value",
        "ArrayBuffer",
        "value",
        "ArrayBuffer",
        "fromArrayBuffer",
        "that",
        "value",
        "encodingOrOffset",
        "length",
        "value",
        "fromString",
        "that",
        "value",
        "encodingOrOffset",
        "fromObject",
        "that",
        "value",
        "Buffer",
        "value",
        "encodingOrOffset",
        "length",
        "value",
        "encodingOrOffset",
        "length",
        "Buffer",
        "Buffer",
        "Uint8Array",
        "Buffer",
        "Uint8Array",
        "Buffer",
        "Buffer",
        "Buffer",
        "size",
        "size",
        "that",
        "size",
        "fill",
        "encoding",
        "assertSize",
        "size",
        "size",
        "createBuffer",
        "that",
        "size",
        "fill",
        "encoding",
        "createBuffer",
        "that",
        "size",
        "fill",
        "encoding",
        "createBuffer",
        "that",
        "size",
        "fill",
        "createBuffer",
        "that",
        "size",
        "Buffer",
        "size",
        "fill",
        "encoding",
        "alloc",
        "size",
        "fill",
        "encoding",
        "that",
        "size",
        "assertSize",
        "size",
        "that",
        "createBuffer",
        "that",
        "size",
        "size",
        "Buffer",
        "i",
        "size",
        "i",
        "that",
        "i",
        "that",
        "Buffer",
        "size",
        "allocUnsafe",
        "size",
        "Buffer",
        "size",
        "allocUnsafe",
        "size",
        "that",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "Buffer",
        "encoding",
        "byteLength",
        "encoding",
        "that",
        "createBuffer",
        "that",
        "length",
        "that",
        "encoding",
        "that",
        "that",
        "array",
        "array",
        "that",
        "createBuffer",
        "that",
        "length",
        "i",
        "length",
        "i",
        "that",
        "i",
        "array",
        "i",
        "that",
        "that",
        "array",
        "byteOffset",
        "length",
        "array",
        "byteOffset",
        "array",
        "byteOffset",
        "RangeError",
        "array",
        "byteOffset",
        "length",
        "RangeError",
        "length",
        "array",
        "Uint8Array",
        "array",
        "byteOffset",
        "array",
        "Uint8Array",
        "array",
        "byteOffset",
        "length",
        "Buffer",
        "that",
        "array",
        "that",
        "Buffer",
        "that",
        "fromArrayLike",
        "that",
        "array",
        "that",
        "that",
        "obj",
        "Buffer",
        "obj",
        "obj",
        "that",
        "createBuffer",
        "that",
        "len",
        "that",
        "that",
        "obj",
        "that",
        "len",
        "that",
        "obj",
        "ArrayBuffer",
        "obj",
        "ArrayBuffer",
        "obj",
        "obj",
        "isnan",
        "obj",
        "createBuffer",
        "that",
        "fromArrayLike",
        "that",
        "obj",
        "obj",
        "isArray",
        "obj",
        "fromArrayLike",
        "that",
        "obj",
        "length",
        "length",
        "kMaxLength",
        "RangeError",
        "kMaxLength",
        "length",
        "length",
        "length",
        "length",
        "length",
        "Buffer",
        "length",
        "Buffer",
        "isBuffer",
        "b",
        "b",
        "b",
        "Buffer",
        "compare",
        "a",
        "b",
        "Buffer",
        "a",
        "Buffer",
        "b",
        "a",
        "b",
        "a",
        "b",
        "x",
        "y",
        "i",
        "len",
        "i",
        "a",
        "i",
        "b",
        "i",
        "x",
        "a",
        "i",
        "y",
        "b",
        "i",
        "x",
        "y",
        "y",
        "x",
        "Buffer",
        "isEncoding",
        "encoding",
        "encoding",
        "Buffer",
        "concat",
        "length",
        "isArray",
        "Buffer",
        "length",
        "length",
        "i",
        "i",
        "i",
        "length",
        "i",
        "Buffer",
        "length",
        "i",
        "i",
        "i",
        "i",
        "Buffer",
        "buf",
        "buf",
        "buffer",
        "pos",
        "pos",
        "buf",
        "buffer",
        "encoding",
        "Buffer",
        "ArrayBuffer",
        "ArrayBuffer",
        "ArrayBuffer",
        "ArrayBuffer",
        "len",
        "encoding",
        "len",
        "utf8ToBytes",
        "len",
        "len",
        "base64ToBytes",
        "loweredCase",
        "utf8ToBytes",
        "encoding",
        "encoding",
        "loweredCase",
        "Buffer",
        "byteLength",
        "encoding",
        "start",
        "end",
        "start",
        "start",
        "start",
        "start",
        "end",
        "end",
        "end",
        "end",
        "end",
        "start",
        "end",
        "start",
        "encoding",
        "encoding",
        "encoding",
        "hexSlice",
        "start",
        "end",
        "utf8Slice",
        "start",
        "end",
        "asciiSlice",
        "start",
        "end",
        "binarySlice",
        "start",
        "end",
        "base64Slice",
        "start",
        "end",
        "utf16leSlice",
        "start",
        "end",
        "loweredCase",
        "encoding",
        "encoding",
        "encoding",
        "loweredCase",
        "Buffer",
        "b",
        "n",
        "m",
        "b",
        "n",
        "b",
        "n",
        "b",
        "m",
        "b",
        "m",
        "i",
        "Buffer",
        "swap16",
        "len",
        "RangeError",
        "i",
        "len",
        "i",
        "swap",
        "i",
        "i",
        "Buffer",
        "swap32",
        "len",
        "RangeError",
        "i",
        "len",
        "i",
        "swap",
        "i",
        "i",
        "swap",
        "i",
        "i",
        "Buffer",
        "toString",
        "length",
        "arguments",
        "utf8Slice",
        "length",
        "slowToString",
        "arguments",
        "Buffer",
        "equals",
        "b",
        "Buffer",
        "b",
        "b",
        "Buffer",
        "b",
        "Buffer",
        "inspect",
        "exports",
        "max",
        "max",
        "Buffer",
        "compare",
        "target",
        "start",
        "end",
        "thisStart",
        "thisEnd",
        "Buffer",
        "target",
        "start",
        "start",
        "end",
        "end",
        "target",
        "target",
        "thisStart",
        "thisStart",
        "thisEnd",
        "thisEnd",
        "start",
        "end",
        "target",
        "thisStart",
        "thisEnd",
        "RangeError",
        "thisStart",
        "thisEnd",
        "start",
        "end",
        "thisStart",
        "thisEnd",
        "start",
        "end",
        "start",
        "end",
        "thisStart",
        "thisEnd",
        "target",
        "thisEnd",
        "thisStart",
        "end",
        "start",
        "x",
        "y",
        "thisStart",
        "thisEnd",
        "target",
        "start",
        "end",
        "i",
        "len",
        "i",
        "thisCopy",
        "i",
        "targetCopy",
        "i",
        "x",
        "thisCopy",
        "i",
        "y",
        "targetCopy",
        "i",
        "x",
        "y",
        "y",
        "x",
        "arr",
        "val",
        "byteOffset",
        "encoding",
        "arr",
        "val",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "arr",
        "val",
        "indexSize",
        "arrLength",
        "valLength",
        "byteOffset",
        "buf",
        "i",
        "indexSize",
        "buf",
        "i",
        "buf",
        "i",
        "indexSize",
        "i",
        "arrLength",
        "i",
        "read",
        "arr",
        "i",
        "read",
        "val",
        "foundIndex",
        "i",
        "foundIndex",
        "foundIndex",
        "foundIndex",
        "i",
        "i",
        "foundIndex",
        "valLength",
        "foundIndex",
        "indexSize",
        "foundIndex",
        "i",
        "i",
        "foundIndex",
        "foundIndex",
        "Buffer",
        "indexOf",
        "val",
        "byteOffset",
        "encoding",
        "byteOffset",
        "encoding",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "val",
        "val",
        "Buffer",
        "val",
        "encoding",
        "Buffer",
        "val",
        "val",
        "arrayIndexOf",
        "val",
        "byteOffset",
        "encoding",
        "val",
        "Buffer",
        "Uint8Array",
        "Uint8Array",
        "val",
        "byteOffset",
        "arrayIndexOf",
        "val",
        "byteOffset",
        "encoding",
        "Buffer",
        "includes",
        "val",
        "byteOffset",
        "encoding",
        "val",
        "byteOffset",
        "encoding",
        "buf",
        "offset",
        "length",
        "offset",
        "offset",
        "buf",
        "offset",
        "length",
        "length",
        "remaining",
        "length",
        "length",
        "length",
        "remaining",
        "length",
        "remaining",
        "strLen",
        "length",
        "strLen",
        "length",
        "strLen",
        "i",
        "length",
        "i",
        "parseInt",
        "i",
        "isNaN",
        "parsed",
        "i",
        "buf",
        "offset",
        "i",
        "parsed",
        "i",
        "buf",
        "offset",
        "length",
        "blitBuffer",
        "utf8ToBytes",
        "buf",
        "offset",
        "buf",
        "offset",
        "length",
        "buf",
        "offset",
        "length",
        "blitBuffer",
        "asciiToBytes",
        "buf",
        "offset",
        "length",
        "buf",
        "offset",
        "length",
        "asciiWrite",
        "buf",
        "offset",
        "length",
        "buf",
        "offset",
        "length",
        "blitBuffer",
        "base64ToBytes",
        "buf",
        "offset",
        "length",
        "buf",
        "offset",
        "length",
        "blitBuffer",
        "utf16leToBytes",
        "buf",
        "offset",
        "buf",
        "offset",
        "length",
        "Buffer",
        "write",
        "offset",
        "length",
        "encoding",
        "offset",
        "encoding",
        "length",
        "offset",
        "length",
        "offset",
        "encoding",
        "offset",
        "length",
        "offset",
        "isFinite",
        "offset",
        "offset",
        "offset",
        "isFinite",
        "length",
        "length",
        "length",
        "encoding",
        "encoding",
        "encoding",
        "length",
        "length",
        "offset",
        "length",
        "length",
        "remaining",
        "length",
        "remaining",
        "length",
        "offset",
        "offset",
        "RangeError",
        "encoding",
        "encoding",
        "encoding",
        "hexWrite",
        "offset",
        "length",
        "utf8Write",
        "offset",
        "length",
        "asciiWrite",
        "offset",
        "length",
        "binaryWrite",
        "offset",
        "length",
        "base64Write",
        "offset",
        "length",
        "ucs2Write",
        "offset",
        "length",
        "loweredCase",
        "encoding",
        "encoding",
        "encoding",
        "loweredCase",
        "Buffer",
        "toJSON",
        "buf",
        "start",
        "end",
        "start",
        "end",
        "buf",
        "base64",
        "buf",
        "base64",
        "buf",
        "start",
        "end",
        "buf",
        "start",
        "end",
        "end",
        "buf",
        "end",
        "i",
        "end",
        "buf",
        "i",
        "firstByte",
        "firstByte",
        "firstByte",
        "i",
        "bytesPerSequence",
        "end",
        "bytesPerSequence",
        "firstByte",
        "codePoint",
        "firstByte",
        "secondByte",
        "buf",
        "i",
        "secondByte",
        "tempCodePoint",
        "firstByte",
        "secondByte",
        "tempCodePoint",
        "codePoint",
        "tempCodePoint",
        "secondByte",
        "buf",
        "i",
        "thirdByte",
        "buf",
        "i",
        "secondByte",
        "thirdByte",
        "tempCodePoint",
        "firstByte",
        "secondByte",
        "thirdByte",
        "tempCodePoint",
        "tempCodePoint",
        "tempCodePoint",
        "codePoint",
        "tempCodePoint",
        "secondByte",
        "buf",
        "i",
        "thirdByte",
        "buf",
        "i",
        "fourthByte",
        "buf",
        "i",
        "secondByte",
        "thirdByte",
        "fourthByte",
        "tempCodePoint",
        "firstByte",
        "secondByte",
        "thirdByte",
        "fourthByte",
        "tempCodePoint",
        "tempCodePoint",
        "codePoint",
        "tempCodePoint",
        "codePoint",
        "codePoint",
        "bytesPerSequence",
        "codePoint",
        "codePoint",
        "res",
        "codePoint",
        "codePoint",
        "codePoint",
        "res",
        "codePoint",
        "i",
        "bytesPerSequence",
        "decodeCodePointsArray",
        "res",
        "codePoints",
        "codePoints",
        "len",
        "MAX_ARGUMENTS_LENGTH",
        "codePoints",
        "i",
        "len",
        "res",
        "codePoints",
        "i",
        "i",
        "MAX_ARGUMENTS_LENGTH",
        "res",
        "buf",
        "start",
        "end",
        "end",
        "buf",
        "end",
        "i",
        "end",
        "i",
        "ret",
        "buf",
        "i",
        "ret",
        "buf",
        "start",
        "end",
        "end",
        "buf",
        "end",
        "i",
        "end",
        "i",
        "ret",
        "buf",
        "i",
        "ret",
        "buf",
        "start",
        "end",
        "buf",
        "start",
        "start",
        "start",
        "end",
        "end",
        "end",
        "len",
        "end",
        "len",
        "i",
        "end",
        "i",
        "toHex",
        "buf",
        "i",
        "buf",
        "start",
        "end",
        "buf",
        "start",
        "end",
        "i",
        "i",
        "res",
        "i",
        "i",
        "res",
        "Buffer",
        "start",
        "end",
        "start",
        "start",
        "end",
        "end",
        "len",
        "end",
        "start",
        "start",
        "len",
        "start",
        "start",
        "start",
        "len",
        "start",
        "len",
        "end",
        "end",
        "len",
        "end",
        "end",
        "end",
        "len",
        "end",
        "len",
        "end",
        "start",
        "end",
        "start",
        "Buffer",
        "newBuf",
        "start",
        "end",
        "newBuf",
        "Buffer",
        "end",
        "start",
        "newBuf",
        "Buffer",
        "sliceLen",
        "i",
        "sliceLen",
        "i",
        "newBuf",
        "i",
        "i",
        "start",
        "newBuf",
        "offset",
        "ext",
        "length",
        "offset",
        "offset",
        "RangeError",
        "offset",
        "ext",
        "length",
        "RangeError",
        "Buffer",
        "readUIntLE",
        "offset",
        "byteLength",
        "noAssert",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkOffset",
        "offset",
        "byteLength",
        "offset",
        "i",
        "byteLength",
        "mul",
        "val",
        "offset",
        "i",
        "mul",
        "val",
        "Buffer",
        "readUIntBE",
        "offset",
        "byteLength",
        "noAssert",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkOffset",
        "offset",
        "byteLength",
        "offset",
        "byteLength",
        "byteLength",
        "mul",
        "val",
        "offset",
        "byteLength",
        "mul",
        "val",
        "Buffer",
        "readUInt8",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "Buffer",
        "readUInt16LE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readUInt16BE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readUInt32LE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readUInt32BE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readIntLE",
        "offset",
        "byteLength",
        "noAssert",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkOffset",
        "offset",
        "byteLength",
        "offset",
        "i",
        "byteLength",
        "mul",
        "val",
        "offset",
        "i",
        "mul",
        "mul",
        "val",
        "mul",
        "val",
        "byteLength",
        "val",
        "Buffer",
        "readIntBE",
        "offset",
        "byteLength",
        "noAssert",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkOffset",
        "offset",
        "byteLength",
        "offset",
        "i",
        "i",
        "mul",
        "val",
        "offset",
        "i",
        "mul",
        "mul",
        "val",
        "mul",
        "val",
        "byteLength",
        "val",
        "Buffer",
        "readInt8",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readInt16LE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "val",
        "val",
        "val",
        "Buffer",
        "readInt16BE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "val",
        "val",
        "val",
        "Buffer",
        "readInt32LE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readInt32BE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readFloatLE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "ieee754",
        "offset",
        "Buffer",
        "readFloatBE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "ieee754",
        "offset",
        "Buffer",
        "readDoubleLE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "ieee754",
        "offset",
        "Buffer",
        "readDoubleBE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "ieee754",
        "offset",
        "buf",
        "value",
        "offset",
        "ext",
        "max",
        "min",
        "Buffer",
        "buf",
        "value",
        "max",
        "value",
        "min",
        "RangeError",
        "offset",
        "ext",
        "buf",
        "RangeError",
        "Buffer",
        "writeUIntLE",
        "value",
        "offset",
        "byteLength",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "byteLength",
        "checkInt",
        "value",
        "offset",
        "byteLength",
        "maxBytes",
        "offset",
        "value",
        "i",
        "byteLength",
        "mul",
        "offset",
        "i",
        "value",
        "mul",
        "offset",
        "byteLength",
        "Buffer",
        "writeUIntBE",
        "value",
        "offset",
        "byteLength",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "byteLength",
        "checkInt",
        "value",
        "offset",
        "byteLength",
        "maxBytes",
        "byteLength",
        "offset",
        "i",
        "value",
        "i",
        "mul",
        "offset",
        "i",
        "value",
        "mul",
        "offset",
        "byteLength",
        "Buffer",
        "writeUInt8",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "value",
        "value",
        "offset",
        "value",
        "offset",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "value",
        "value",
        "value",
        "buf",
        "offset",
        "i",
        "j",
        "i",
        "buf",
        "offset",
        "i",
        "value",
        "littleEndian",
        "i",
        "i",
        "littleEndian",
        "i",
        "i",
        "Buffer",
        "writeUInt16LE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt16",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeUInt16BE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt16",
        "value",
        "offset",
        "offset",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "value",
        "value",
        "value",
        "buf",
        "offset",
        "i",
        "j",
        "i",
        "buf",
        "offset",
        "i",
        "value",
        "littleEndian",
        "i",
        "i",
        "Buffer",
        "writeUInt32LE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt32",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeUInt32BE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt32",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeIntLE",
        "value",
        "offset",
        "byteLength",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "byteLength",
        "checkInt",
        "value",
        "offset",
        "byteLength",
        "limit",
        "limit",
        "offset",
        "value",
        "i",
        "byteLength",
        "mul",
        "value",
        "sub",
        "offset",
        "i",
        "sub",
        "offset",
        "i",
        "value",
        "mul",
        "sub",
        "offset",
        "byteLength",
        "Buffer",
        "writeIntBE",
        "value",
        "offset",
        "byteLength",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "byteLength",
        "checkInt",
        "value",
        "offset",
        "byteLength",
        "limit",
        "limit",
        "byteLength",
        "offset",
        "i",
        "value",
        "i",
        "mul",
        "value",
        "sub",
        "offset",
        "i",
        "sub",
        "offset",
        "i",
        "value",
        "mul",
        "sub",
        "offset",
        "byteLength",
        "Buffer",
        "writeInt8",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "value",
        "value",
        "value",
        "value",
        "value",
        "offset",
        "value",
        "offset",
        "Buffer",
        "writeInt16LE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt16",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeInt16BE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt16",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeInt32LE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt32",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeInt32BE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "value",
        "value",
        "value",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt32",
        "value",
        "offset",
        "offset",
        "buf",
        "value",
        "offset",
        "ext",
        "max",
        "min",
        "offset",
        "ext",
        "buf",
        "RangeError",
        "offset",
        "RangeError",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "noAssert",
        "noAssert",
        "checkIEEE754",
        "buf",
        "value",
        "offset",
        "ieee754",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "offset",
        "Buffer",
        "writeFloatLE",
        "value",
        "offset",
        "noAssert",
        "writeFloat",
        "value",
        "offset",
        "noAssert",
        "Buffer",
        "writeFloatBE",
        "value",
        "offset",
        "noAssert",
        "writeFloat",
        "value",
        "offset",
        "noAssert",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "noAssert",
        "noAssert",
        "checkIEEE754",
        "buf",
        "value",
        "offset",
        "ieee754",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "offset",
        "Buffer",
        "writeDoubleLE",
        "value",
        "offset",
        "noAssert",
        "writeDouble",
        "value",
        "offset",
        "noAssert",
        "Buffer",
        "writeDoubleBE",
        "value",
        "offset",
        "noAssert",
        "writeDouble",
        "value",
        "offset",
        "noAssert",
        "Buffer",
        "copy",
        "target",
        "targetStart",
        "start",
        "end",
        "start",
        "start",
        "end",
        "end",
        "end",
        "targetStart",
        "target",
        "targetStart",
        "target",
        "targetStart",
        "targetStart",
        "end",
        "end",
        "start",
        "end",
        "start",
        "end",
        "start",
        "target",
        "targetStart",
        "RangeError",
        "start",
        "start",
        "RangeError",
        "end",
        "RangeError",
        "end",
        "end",
        "target",
        "targetStart",
        "end",
        "start",
        "end",
        "target",
        "targetStart",
        "start",
        "end",
        "start",
        "target",
        "start",
        "targetStart",
        "targetStart",
        "end",
        "i",
        "len",
        "i",
        "i",
        "target",
        "i",
        "targetStart",
        "i",
        "start",
        "len",
        "Buffer",
        "i",
        "i",
        "len",
        "i",
        "target",
        "i",
        "targetStart",
        "i",
        "start",
        "Uint8Array",
        "target",
        "start",
        "start",
        "len",
        "targetStart",
        "len",
        "Buffer",
        "fill",
        "val",
        "start",
        "end",
        "encoding",
        "val",
        "start",
        "encoding",
        "start",
        "start",
        "end",
        "end",
        "encoding",
        "end",
        "end",
        "val",
        "val",
        "code",
        "val",
        "code",
        "encoding",
        "encoding",
        "encoding",
        "Buffer",
        "encoding",
        "encoding",
        "val",
        "val",
        "val",
        "start",
        "start",
        "end",
        "RangeError",
        "end",
        "start",
        "start",
        "start",
        "end",
        "end",
        "end",
        "val",
        "val",
        "val",
        "i",
        "start",
        "i",
        "end",
        "i",
        "i",
        "val",
        "Buffer",
        "val",
        "val",
        "utf8ToBytes",
        "Buffer",
        "val",
        "encoding",
        "i",
        "i",
        "end",
        "start",
        "i",
        "i",
        "start",
        "i",
        "len",
        "stringtrim",
        "INVALID_BASE64_RE",
        "n",
        "n",
        "n",
        "n",
        "units",
        "units",
        "units",
        "Infinity",
        "i",
        "length",
        "i",
        "codePoint",
        "i",
        "codePoint",
        "codePoint",
        "leadSurrogate",
        "codePoint",
        "units",
        "i",
        "length",
        "units",
        "leadSurrogate",
        "codePoint",
        "codePoint",
        "units",
        "leadSurrogate",
        "codePoint",
        "codePoint",
        "leadSurrogate",
        "codePoint",
        "leadSurrogate",
        "units",
        "leadSurrogate",
        "codePoint",
        "units",
        "codePoint",
        "codePoint",
        "units",
        "codePoint",
        "codePoint",
        "codePoint",
        "units",
        "codePoint",
        "codePoint",
        "codePoint",
        "codePoint",
        "units",
        "codePoint",
        "codePoint",
        "codePoint",
        "codePoint",
        "i",
        "i",
        "byteArray",
        "i",
        "byteArray",
        "units",
        "i",
        "i",
        "units",
        "c",
        "i",
        "hi",
        "c",
        "lo",
        "c",
        "byteArray",
        "lo",
        "byteArray",
        "hi",
        "byteArray",
        "base64",
        "base64clean",
        "src",
        "dst",
        "offset",
        "length",
        "i",
        "length",
        "i",
        "i",
        "offset",
        "dst",
        "i",
        "src",
        "dst",
        "i",
        "offset",
        "src",
        "i",
        "i",
        "val",
        "val",
        "val",
        "require",
        "exports",
        "exports",
        "toByteArray",
        "exports",
        "fromByteArray",
        "Uint8Array",
        "Uint8Array",
        "code",
        "i",
        "len",
        "i",
        "lookup",
        "i",
        "code",
        "i",
        "revLookup",
        "code",
        "i",
        "i",
        "revLookup",
        "revLookup",
        "init",
        "b64",
        "b64",
        "len",
        "placeHolders",
        "b64",
        "len",
        "b64",
        "len",
        "arr",
        "Arr",
        "len",
        "placeHolders",
        "l",
        "placeHolders",
        "len",
        "len",
        "i",
        "j",
        "i",
        "l",
        "i",
        "j",
        "tmp",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "arr",
        "L",
        "tmp",
        "arr",
        "L",
        "tmp",
        "arr",
        "L",
        "tmp",
        "placeHolders",
        "tmp",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "arr",
        "L",
        "tmp",
        "placeHolders",
        "tmp",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "arr",
        "L",
        "tmp",
        "arr",
        "L",
        "tmp",
        "arr",
        "num",
        "lookup",
        "num",
        "lookup",
        "num",
        "lookup",
        "num",
        "lookup",
        "num",
        "uint8",
        "start",
        "end",
        "i",
        "end",
        "i",
        "tmp",
        "uint8",
        "i",
        "uint8",
        "i",
        "uint8",
        "i",
        "output",
        "tripletToBase64",
        "tmp",
        "output",
        "uint8",
        "uint8",
        "len",
        "len",
        "extraBytes",
        "i",
        "len2",
        "i",
        "maxChunkLength",
        "parts",
        "encodeChunk",
        "uint8",
        "i",
        "i",
        "maxChunkLength",
        "len2",
        "len2",
        "i",
        "maxChunkLength",
        "extraBytes",
        "tmp",
        "uint8",
        "len",
        "output",
        "lookup",
        "tmp",
        "output",
        "lookup",
        "tmp",
        "output",
        "extraBytes",
        "tmp",
        "uint8",
        "len",
        "uint8",
        "len",
        "output",
        "lookup",
        "tmp",
        "output",
        "lookup",
        "tmp",
        "output",
        "lookup",
        "tmp",
        "output",
        "parts",
        "output",
        "parts",
        "require",
        "exports",
        "exports",
        "buffer",
        "offset",
        "isLE",
        "mLen",
        "nBytes",
        "nBytes",
        "mLen",
        "eLen",
        "eMax",
        "isLE",
        "nBytes",
        "isLE",
        "buffer",
        "offset",
        "i",
        "i",
        "d",
        "e",
        "s",
        "nBits",
        "s",
        "nBits",
        "nBits",
        "eLen",
        "nBits",
        "e",
        "e",
        "buffer",
        "offset",
        "i",
        "i",
        "d",
        "nBits",
        "m",
        "e",
        "nBits",
        "e",
        "nBits",
        "nBits",
        "mLen",
        "nBits",
        "m",
        "m",
        "buffer",
        "offset",
        "i",
        "i",
        "d",
        "nBits",
        "e",
        "e",
        "eBias",
        "e",
        "eMax",
        "m",
        "NaN",
        "s",
        "Infinity",
        "m",
        "m",
        "mLen",
        "e",
        "e",
        "eBias",
        "s",
        "m",
        "e",
        "mLen",
        "exports",
        "buffer",
        "value",
        "offset",
        "isLE",
        "mLen",
        "nBytes",
        "nBytes",
        "mLen",
        "eLen",
        "eMax",
        "mLen",
        "isLE",
        "nBytes",
        "isLE",
        "value",
        "value",
        "value",
        "value",
        "value",
        "isNaN",
        "value",
        "value",
        "Infinity",
        "m",
        "isNaN",
        "value",
        "e",
        "eMax",
        "e",
        "value",
        "value",
        "c",
        "e",
        "e",
        "c",
        "e",
        "eBias",
        "value",
        "rt",
        "c",
        "value",
        "rt",
        "eBias",
        "value",
        "c",
        "e",
        "c",
        "e",
        "eBias",
        "eMax",
        "m",
        "e",
        "eMax",
        "e",
        "eBias",
        "m",
        "value",
        "c",
        "mLen",
        "e",
        "e",
        "eBias",
        "m",
        "value",
        "eBias",
        "mLen",
        "e",
        "mLen",
        "buffer",
        "offset",
        "i",
        "m",
        "i",
        "d",
        "m",
        "mLen",
        "e",
        "e",
        "mLen",
        "m",
        "eLen",
        "mLen",
        "eLen",
        "buffer",
        "offset",
        "i",
        "e",
        "i",
        "d",
        "e",
        "eLen",
        "buffer",
        "offset",
        "i",
        "d",
        "s",
        "require",
        "exports",
        "arr",
        "toString",
        "arr",
        "require",
        "exports",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "n",
        "isNumber",
        "n",
        "n",
        "isNaN",
        "n",
        "n",
        "EventEmitter",
        "isObject",
        "er",
        "arguments",
        "er",
        "er",
        "er",
        "err",
        "er",
        "err",
        "handler",
        "isUndefined",
        "handler",
        "isFunction",
        "handler",
        "arguments",
        "handler",
        "handler",
        "arguments",
        "handler",
        "arguments",
        "arguments",
        "args",
        "arguments",
        "handler",
        "args",
        "isObject",
        "handler",
        "args",
        "arguments",
        "listeners",
        "handler",
        "len",
        "listeners",
        "i",
        "i",
        "len",
        "i",
        "listeners",
        "i",
        "args",
        "EventEmitter",
        "listener",
        "isFunction",
        "listener",
        "isFunction",
        "listener",
        "listener",
        "listener",
        "listener",
        "isObject",
        "listener",
        "listener",
        "isObject",
        "isUndefined",
        "m",
        "m",
        "EventEmitter",
        "m",
        "m",
        "m",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "listener",
        "isFunction",
        "listener",
        "g",
        "fired",
        "fired",
        "listener",
        "arguments",
        "g",
        "listener",
        "g",
        "EventEmitter",
        "listener",
        "isFunction",
        "listener",
        "length",
        "position",
        "listener",
        "isFunction",
        "listener",
        "listener",
        "isObject",
        "i",
        "length",
        "i",
        "i",
        "listener",
        "i",
        "i",
        "listener",
        "position",
        "i",
        "position",
        "position",
        "listener",
        "EventEmitter",
        "arguments",
        "arguments",
        "key",
        "key",
        "key",
        "listeners",
        "isFunction",
        "listeners",
        "listeners",
        "listeners",
        "listeners",
        "listeners",
        "listeners",
        "EventEmitter",
        "ret",
        "isFunction",
        "ret",
        "ret",
        "ret",
        "EventEmitter",
        "isFunction",
        "evlistener",
        "evlistener",
        "evlistener",
        "EventEmitter",
        "emitter",
        "emitter",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "require",
        "exports",
        "require",
        "key",
        "http",
        "http",
        "key",
        "https",
        "key",
        "http",
        "key",
        "https",
        "cb",
        "http",
        "cb",
        "require",
        "exports",
        "inherits",
        "ctor",
        "superCtor",
        "ctor",
        "superCtor",
        "ctor",
        "superCtor",
        "ctor",
        "inherits",
        "ctor",
        "superCtor",
        "ctor",
        "superCtor",
        "TempCtor",
        "superCtor",
        "ctor",
        "TempCtor",
        "ctor",
        "ctor",
        "require",
        "exports",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "require",
        "exports",
        "cachedSetTimeout",
        "setTimeout",
        "e",
        "cachedSetTimeout",
        "cachedClearTimeout",
        "clearTimeout",
        "e",
        "cachedClearTimeout",
        "draining",
        "currentQueue",
        "draining",
        "currentQueue",
        "queue",
        "currentQueue",
        "queue",
        "queueIndex",
        "queue",
        "drainQueue",
        "draining",
        "cachedSetTimeout",
        "cleanUpNextTick",
        "draining",
        "queue",
        "len",
        "currentQueue",
        "queue",
        "queue",
        "queueIndex",
        "len",
        "currentQueue",
        "currentQueue",
        "queueIndex",
        "queueIndex",
        "len",
        "queue",
        "currentQueue",
        "draining",
        "cachedClearTimeout",
        "timeout",
        "process",
        "fun",
        "arguments",
        "arguments",
        "i",
        "arguments",
        "i",
        "args",
        "i",
        "arguments",
        "i",
        "queue",
        "Item",
        "fun",
        "args",
        "queue",
        "draining",
        "cachedSetTimeout",
        "drainQueue",
        "fun",
        "array",
        "fun",
        "array",
        "Item",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "name",
        "process",
        "process",
        "dir",
        "process",
        "require",
        "exports",
        "root",
        "exports",
        "exports",
        "exports",
        "exports",
        "freeGlobal",
        "freeGlobal",
        "freeGlobal",
        "freeGlobal",
        "freeGlobal",
        "freeGlobal",
        "root",
        "freeGlobal",
        "tMin",
        "RangeError",
        "errors",
        "array",
        "fn",
        "array",
        "length",
        "result",
        "length",
        "fn",
        "array",
        "length",
        "result",
        "fn",
        "parts",
        "result",
        "parts",
        "parts",
        "regexSeparators",
        "labels",
        "fn",
        "result",
        "encoded",
        "counter",
        "length",
        "value",
        "counter",
        "value",
        "value",
        "counter",
        "length",
        "extra",
        "counter",
        "extra",
        "output",
        "value",
        "extra",
        "output",
        "value",
        "counter",
        "output",
        "value",
        "output",
        "array",
        "array",
        "value",
        "value",
        "value",
        "output",
        "stringFromCharCode",
        "value",
        "value",
        "value",
        "output",
        "stringFromCharCode",
        "value",
        "output",
        "codePoint",
        "codePoint",
        "codePoint",
        "codePoint",
        "codePoint",
        "codePoint",
        "codePoint",
        "digit",
        "flag",
        "digit",
        "digit",
        "flag",
        "delta",
        "numPoints",
        "firstTime",
        "delta",
        "firstTime",
        "floor",
        "delta",
        "damp",
        "delta",
        "delta",
        "floor",
        "delta",
        "numPoints",
        "delta",
        "baseMinusTMin",
        "tMax",
        "k",
        "delta",
        "floor",
        "delta",
        "baseMinusTMin",
        "floor",
        "k",
        "baseMinusTMin",
        "delta",
        "delta",
        "skew",
        "input",
        "input",
        "basic",
        "input",
        "delimiter",
        "basic",
        "basic",
        "j",
        "j",
        "basic",
        "j",
        "input",
        "j",
        "error",
        "output",
        "input",
        "j",
        "index",
        "basic",
        "basic",
        "index",
        "inputLength",
        "oldi",
        "i",
        "w",
        "k",
        "k",
        "index",
        "inputLength",
        "error",
        "digit",
        "basicToDigit",
        "input",
        "index",
        "digit",
        "digit",
        "floor",
        "maxInt",
        "i",
        "w",
        "error",
        "i",
        "digit",
        "w",
        "t",
        "k",
        "bias",
        "tMin",
        "k",
        "bias",
        "tMax",
        "tMax",
        "k",
        "bias",
        "digit",
        "t",
        "baseMinusT",
        "t",
        "w",
        "floor",
        "maxInt",
        "baseMinusT",
        "error",
        "w",
        "baseMinusT",
        "output",
        "bias",
        "adapt",
        "i",
        "oldi",
        "oldi",
        "floor",
        "i",
        "maxInt",
        "n",
        "error",
        "n",
        "floor",
        "i",
        "i",
        "output",
        "i",
        "n",
        "ucs2encode",
        "output",
        "input",
        "input",
        "ucs2decode",
        "input",
        "inputLength",
        "input",
        "n",
        "initialN",
        "delta",
        "bias",
        "initialBias",
        "j",
        "j",
        "inputLength",
        "j",
        "currentValue",
        "input",
        "j",
        "currentValue",
        "output",
        "stringFromCharCode",
        "currentValue",
        "handledCPCount",
        "basicLength",
        "output",
        "basicLength",
        "output",
        "delimiter",
        "handledCPCount",
        "inputLength",
        "m",
        "maxInt",
        "j",
        "j",
        "inputLength",
        "j",
        "currentValue",
        "input",
        "j",
        "currentValue",
        "n",
        "currentValue",
        "m",
        "m",
        "currentValue",
        "handledCPCountPlusOne",
        "handledCPCount",
        "m",
        "n",
        "floor",
        "maxInt",
        "delta",
        "handledCPCountPlusOne",
        "error",
        "delta",
        "m",
        "n",
        "handledCPCountPlusOne",
        "n",
        "m",
        "j",
        "j",
        "inputLength",
        "j",
        "currentValue",
        "input",
        "j",
        "currentValue",
        "n",
        "delta",
        "maxInt",
        "error",
        "currentValue",
        "n",
        "q",
        "delta",
        "k",
        "k",
        "t",
        "k",
        "bias",
        "tMin",
        "k",
        "bias",
        "tMax",
        "tMax",
        "k",
        "bias",
        "q",
        "t",
        "qMinusT",
        "q",
        "t",
        "baseMinusT",
        "t",
        "output",
        "stringFromCharCode",
        "digitToBasic",
        "t",
        "qMinusT",
        "baseMinusT",
        "q",
        "floor",
        "qMinusT",
        "baseMinusT",
        "output",
        "stringFromCharCode",
        "digitToBasic",
        "q",
        "bias",
        "adapt",
        "delta",
        "handledCPCountPlusOne",
        "handledCPCount",
        "basicLength",
        "delta",
        "handledCPCount",
        "delta",
        "n",
        "output",
        "input",
        "mapDomain",
        "input",
        "regexPunycode",
        "decode",
        "input",
        "mapDomain",
        "input",
        "regexNonASCII",
        "encode",
        "punycode",
        "ucs2decode",
        "ucs2encode",
        "decode",
        "encode",
        "toASCII",
        "toUnicode",
        "define",
        "define",
        "define",
        "define",
        "punycode",
        "freeExports",
        "freeModule",
        "freeExports",
        "freeModule",
        "punycode",
        "key",
        "punycode",
        "punycode",
        "key",
        "freeExports",
        "key",
        "punycode",
        "key",
        "root",
        "punycode",
        "require",
        "exports",
        "obj",
        "prop",
        "obj",
        "prop",
        "qs",
        "sep",
        "eq",
        "options",
        "sep",
        "sep",
        "eq",
        "eq",
        "qs",
        "qs",
        "obj",
        "qs",
        "qs",
        "sep",
        "options",
        "options",
        "maxKeys",
        "options",
        "qs",
        "maxKeys",
        "len",
        "maxKeys",
        "len",
        "maxKeys",
        "i",
        "len",
        "i",
        "qs",
        "i",
        "regexp",
        "x",
        "eq",
        "idx",
        "kstr",
        "x",
        "idx",
        "vstr",
        "x",
        "idx",
        "kstr",
        "x",
        "vstr",
        "k",
        "decodeURIComponent",
        "kstr",
        "v",
        "decodeURIComponent",
        "vstr",
        "hasOwnProperty",
        "obj",
        "k",
        "obj",
        "k",
        "v",
        "isArray",
        "obj",
        "k",
        "obj",
        "k",
        "v",
        "obj",
        "k",
        "obj",
        "k",
        "v",
        "obj",
        "xs",
        "xs",
        "require",
        "exports",
        "v",
        "v",
        "v",
        "v",
        "isFinite",
        "v",
        "v",
        "obj",
        "sep",
        "eq",
        "name",
        "sep",
        "sep",
        "eq",
        "eq",
        "obj",
        "obj",
        "obj",
        "objectKeys",
        "obj",
        "k",
        "encodeURIComponent",
        "stringifyPrimitive",
        "k",
        "eq",
        "isArray",
        "obj",
        "k",
        "obj",
        "k",
        "v",
        "ks",
        "encodeURIComponent",
        "stringifyPrimitive",
        "v",
        "sep",
        "ks",
        "encodeURIComponent",
        "stringifyPrimitive",
        "obj",
        "k",
        "sep",
        "name",
        "encodeURIComponent",
        "stringifyPrimitive",
        "name",
        "eq",
        "encodeURIComponent",
        "stringifyPrimitive",
        "obj",
        "xs",
        "xs",
        "xs",
        "f",
        "xs",
        "xs",
        "f",
        "i",
        "xs",
        "i",
        "res",
        "f",
        "xs",
        "i",
        "i",
        "res",
        "obj",
        "key",
        "obj",
        "obj",
        "key",
        "res",
        "key",
        "res",
        "require",
        "exports",
        "exports",
        "exports",
        "require",
        "exports",
        "exports",
        "require",
        "require",
        "exports",
        "obj",
        "key",
        "obj",
        "keys",
        "key",
        "keys",
        "Duplex",
        "require",
        "require",
        "util",
        "require",
        "require",
        "require",
        "util",
        "Duplex",
        "Readable",
        "objectKeys",
        "Writable",
        "v",
        "keys",
        "v",
        "keys",
        "v",
        "Duplex",
        "method",
        "Duplex",
        "method",
        "Writable",
        "method",
        "options",
        "Duplex",
        "Duplex",
        "options",
        "Readable",
        "options",
        "Writable",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "onend",
        "processNextTick",
        "onEndNT",
        "xs",
        "f",
        "xs",
        "i",
        "l",
        "i",
        "f",
        "xs",
        "i",
        "i",
        "require",
        "exports",
        "PassThrough",
        "require",
        "require",
        "util",
        "require",
        "util",
        "PassThrough",
        "Transform",
        "options",
        "PassThrough",
        "PassThrough",
        "options",
        "Transform",
        "options",
        "PassThrough",
        "chunk",
        "encoding",
        "cb",
        "cb",
        "chunk",
        "require",
        "exports",
        "process",
        "Readable",
        "require",
        "require",
        "Readable",
        "ReadableState",
        "require",
        "emitter",
        "emitter",
        "Stream",
        "require",
        "_",
        "Stream",
        "Stream",
        "require",
        "require",
        "require",
        "require",
        "util",
        "require",
        "require",
        "debugUtil",
        "debugUtil",
        "debug",
        "debugUtil",
        "debug",
        "util",
        "Readable",
        "Stream",
        "EE",
        "emitter",
        "fn",
        "hasPrependListener",
        "emitter",
        "fn",
        "emitter",
        "emitter",
        "emitter",
        "fn",
        "isArray",
        "emitter",
        "emitter",
        "fn",
        "emitter",
        "fn",
        "emitter",
        "options",
        "stream",
        "Duplex",
        "Duplex",
        "require",
        "options",
        "options",
        "options",
        "stream",
        "Duplex",
        "options",
        "options",
        "hwm",
        "hwm",
        "hwm",
        "defaultHwm",
        "options",
        "options",
        "StringDecoder",
        "StringDecoder",
        "require",
        "StringDecoder",
        "options",
        "options",
        "options",
        "Duplex",
        "Duplex",
        "require",
        "Readable",
        "Readable",
        "options",
        "ReadableState",
        "options",
        "options",
        "options",
        "options",
        "Stream",
        "Readable",
        "chunk",
        "encoding",
        "state",
        "chunk",
        "encoding",
        "encoding",
        "state",
        "encoding",
        "state",
        "chunk",
        "bufferShim",
        "chunk",
        "encoding",
        "encoding",
        "readableAddChunk",
        "state",
        "chunk",
        "encoding",
        "Readable",
        "chunk",
        "readableAddChunk",
        "state",
        "chunk",
        "Readable",
        "stream",
        "state",
        "chunk",
        "encoding",
        "addToFront",
        "chunkInvalid",
        "state",
        "chunk",
        "er",
        "stream",
        "er",
        "chunk",
        "state",
        "onEofChunk",
        "stream",
        "state",
        "state",
        "chunk",
        "chunk",
        "state",
        "addToFront",
        "stream",
        "e",
        "state",
        "addToFront",
        "stream",
        "_e",
        "state",
        "addToFront",
        "encoding",
        "chunk",
        "state",
        "chunk",
        "skipAdd",
        "state",
        "chunk",
        "addToFront",
        "state",
        "skipAdd",
        "state",
        "state",
        "state",
        "stream",
        "chunk",
        "stream",
        "state",
        "state",
        "chunk",
        "addToFront",
        "state",
        "chunk",
        "state",
        "chunk",
        "state",
        "emitReadable",
        "stream",
        "maybeReadMore",
        "stream",
        "state",
        "addToFront",
        "state",
        "needMoreData",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "Readable",
        "enc",
        "StringDecoder",
        "StringDecoder",
        "require",
        "StringDecoder",
        "enc",
        "enc",
        "n",
        "n",
        "MAX_HWM",
        "n",
        "MAX_HWM",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "state",
        "state",
        "state",
        "state",
        "n",
        "n",
        "isNaN",
        "n",
        "state",
        "state",
        "state",
        "state",
        "n",
        "n",
        "state",
        "state",
        "computeNewHighWaterMark",
        "n",
        "n",
        "state",
        "state",
        "state",
        "state",
        "n",
        "Readable",
        "n",
        "debug",
        "n",
        "n",
        "n",
        "state",
        "n",
        "state",
        "state",
        "state",
        "state",
        "debug",
        "state",
        "state",
        "state",
        "state",
        "endReadable",
        "emitReadable",
        "n",
        "howMuchToRead",
        "n",
        "state",
        "n",
        "state",
        "state",
        "endReadable",
        "state",
        "debug",
        "doRead",
        "state",
        "state",
        "n",
        "state",
        "doRead",
        "debug",
        "doRead",
        "state",
        "state",
        "doRead",
        "debug",
        "doRead",
        "doRead",
        "debug",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "doRead",
        "state",
        "n",
        "howMuchToRead",
        "nOrig",
        "state",
        "n",
        "ret",
        "fromList",
        "n",
        "state",
        "ret",
        "ret",
        "state",
        "n",
        "state",
        "n",
        "state",
        "state",
        "state",
        "nOrig",
        "n",
        "state",
        "state",
        "endReadable",
        "ret",
        "ret",
        "ret",
        "state",
        "chunk",
        "Buffer",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "state",
        "er",
        "er",
        "stream",
        "state",
        "state",
        "state",
        "state",
        "chunk",
        "chunk",
        "state",
        "chunk",
        "state",
        "state",
        "chunk",
        "state",
        "emitReadable",
        "stream",
        "stream",
        "stream",
        "state",
        "state",
        "debug",
        "state",
        "state",
        "state",
        "processNextTick",
        "emitReadable_",
        "stream",
        "emitReadable_",
        "stream",
        "stream",
        "debug",
        "stream",
        "flow",
        "stream",
        "stream",
        "state",
        "state",
        "state",
        "processNextTick",
        "maybeReadMore_",
        "stream",
        "state",
        "stream",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "debug",
        "stream",
        "len",
        "state",
        "len",
        "state",
        "state",
        "Readable",
        "n",
        "Readable",
        "dest",
        "pipeOpts",
        "state",
        "state",
        "dest",
        "state",
        "state",
        "dest",
        "state",
        "dest",
        "state",
        "debug",
        "state",
        "pipeOpts",
        "pipeOpts",
        "pipeOpts",
        "dest",
        "process",
        "dest",
        "process",
        "doEnd",
        "onend",
        "cleanup",
        "state",
        "processNextTick",
        "endFn",
        "src",
        "endFn",
        "dest",
        "onunpipe",
        "readable",
        "debug",
        "readable",
        "src",
        "cleanup",
        "debug",
        "dest",
        "pipeOnDrain",
        "src",
        "dest",
        "ondrain",
        "debug",
        "dest",
        "onclose",
        "dest",
        "onfinish",
        "dest",
        "ondrain",
        "dest",
        "onerror",
        "dest",
        "onunpipe",
        "src",
        "onend",
        "src",
        "cleanup",
        "src",
        "ondata",
        "cleanedUp",
        "state",
        "dest",
        "dest",
        "ondrain",
        "src",
        "ondata",
        "chunk",
        "debug",
        "dest",
        "chunk",
        "ret",
        "state",
        "state",
        "dest",
        "state",
        "indexOf",
        "state",
        "dest",
        "cleanedUp",
        "debug",
        "src",
        "src",
        "src",
        "er",
        "debug",
        "er",
        "unpipe",
        "dest",
        "onerror",
        "EElistenerCount",
        "dest",
        "dest",
        "er",
        "prependListener",
        "dest",
        "onerror",
        "dest",
        "onfinish",
        "unpipe",
        "dest",
        "onclose",
        "debug",
        "dest",
        "onclose",
        "unpipe",
        "dest",
        "onfinish",
        "debug",
        "src",
        "dest",
        "dest",
        "src",
        "state",
        "debug",
        "src",
        "dest",
        "src",
        "src",
        "debug",
        "state",
        "state",
        "state",
        "state",
        "EElistenerCount",
        "src",
        "state",
        "flow",
        "src",
        "Readable",
        "dest",
        "state",
        "state",
        "dest",
        "dest",
        "state",
        "dest",
        "dest",
        "state",
        "state",
        "state",
        "state",
        "dest",
        "dest",
        "dest",
        "state",
        "state",
        "state",
        "state",
        "state",
        "_i",
        "len",
        "_i",
        "dests",
        "_i",
        "indexOf",
        "state",
        "dest",
        "i",
        "state",
        "i",
        "state",
        "state",
        "state",
        "state",
        "dest",
        "Readable",
        "ev",
        "fn",
        "Stream",
        "ev",
        "fn",
        "ev",
        "ev",
        "state",
        "state",
        "state",
        "state",
        "state",
        "processNextTick",
        "nReadingNextTick",
        "state",
        "emitReadable",
        "state",
        "res",
        "Readable",
        "Readable",
        "debug",
        "Readable",
        "state",
        "debug",
        "state",
        "resume",
        "state",
        "stream",
        "state",
        "state",
        "state",
        "processNextTick",
        "resume_",
        "stream",
        "state",
        "stream",
        "state",
        "state",
        "debug",
        "stream",
        "state",
        "stream",
        "flow",
        "stream",
        "state",
        "state",
        "stream",
        "Readable",
        "debug",
        "debug",
        "stream",
        "stream",
        "debug",
        "state",
        "state",
        "stream",
        "chunk",
        "state",
        "Readable",
        "stream",
        "stream",
        "debug",
        "state",
        "state",
        "state",
        "chunk",
        "chunk",
        "chunk",
        "stream",
        "chunk",
        "debug",
        "state",
        "chunk",
        "state",
        "chunk",
        "state",
        "chunk",
        "chunk",
        "state",
        "chunk",
        "chunk",
        "chunk",
        "ret",
        "paused",
        "stream",
        "i",
        "stream",
        "i",
        "stream",
        "i",
        "i",
        "method",
        "stream",
        "method",
        "stream",
        "arguments",
        "i",
        "forEach",
        "events",
        "ev",
        "stream",
        "ev",
        "ev",
        "n",
        "debug",
        "n",
        "paused",
        "paused",
        "stream",
        "Readable",
        "fromList",
        "n",
        "state",
        "state",
        "state",
        "state",
        "state",
        "length",
        "ret",
        "objectMode",
        "ret",
        "n",
        "n",
        "length",
        "stringMode",
        "ret",
        "ret",
        "ret",
        "Buffer",
        "length",
        "n",
        "ret",
        "buf",
        "n",
        "buf",
        "n",
        "n",
        "ret",
        "stringMode",
        "ret",
        "ret",
        "bufferShim",
        "n",
        "i",
        "l",
        "c",
        "n",
        "i",
        "n",
        "c",
        "_buf",
        "stringMode",
        "ret",
        "_buf",
        "cpy",
        "_buf",
        "ret",
        "c",
        "cpy",
        "cpy",
        "_buf",
        "_buf",
        "cpy",
        "c",
        "cpy",
        "ret",
        "stream",
        "stream",
        "state",
        "state",
        "state",
        "processNextTick",
        "endReadableNT",
        "state",
        "stream",
        "state",
        "stream",
        "state",
        "state",
        "state",
        "stream",
        "stream",
        "xs",
        "f",
        "xs",
        "i",
        "l",
        "i",
        "f",
        "xs",
        "i",
        "i",
        "xs",
        "x",
        "xs",
        "i",
        "l",
        "i",
        "xs",
        "i",
        "x",
        "i",
        "require",
        "require",
        "exports",
        "Transform",
        "require",
        "require",
        "util",
        "require",
        "util",
        "Transform",
        "Duplex",
        "stream",
        "er",
        "data",
        "afterTransform",
        "stream",
        "er",
        "data",
        "stream",
        "er",
        "data",
        "stream",
        "ts",
        "ts",
        "cb",
        "stream",
        "ts",
        "ts",
        "data",
        "data",
        "stream",
        "data",
        "cb",
        "er",
        "stream",
        "rs",
        "rs",
        "rs",
        "rs",
        "stream",
        "rs",
        "options",
        "Transform",
        "Transform",
        "options",
        "Duplex",
        "options",
        "TransformState",
        "options",
        "options",
        "options",
        "options",
        "options",
        "er",
        "done",
        "stream",
        "er",
        "done",
        "stream",
        "Transform",
        "chunk",
        "encoding",
        "Duplex",
        "chunk",
        "encoding",
        "Transform",
        "chunk",
        "encoding",
        "cb",
        "Transform",
        "chunk",
        "encoding",
        "cb",
        "ts",
        "cb",
        "ts",
        "chunk",
        "ts",
        "encoding",
        "ts",
        "ts",
        "rs",
        "rs",
        "rs",
        "rs",
        "Transform",
        "n",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "stream",
        "er",
        "er",
        "stream",
        "er",
        "stream",
        "stream",
        "ws",
        "ts",
        "stream",
        "require",
        "exports",
        "process",
        "Writable",
        "require",
        "process",
        "process",
        "setImmediate",
        "processNextTick",
        "Writable",
        "WritableState",
        "require",
        "util",
        "require",
        "require",
        "Stream",
        "require",
        "_",
        "Stream",
        "Stream",
        "require",
        "require",
        "require",
        "util",
        "Writable",
        "Stream",
        "chunk",
        "encoding",
        "cb",
        "chunk",
        "encoding",
        "cb",
        "options",
        "stream",
        "Duplex",
        "Duplex",
        "require",
        "options",
        "options",
        "options",
        "stream",
        "Duplex",
        "options",
        "options",
        "hwm",
        "hwm",
        "hwm",
        "defaultHwm",
        "options",
        "noDecode",
        "options",
        "er",
        "onwrite",
        "stream",
        "er",
        "CorkedRequest",
        "WritableState",
        "writableStateGetBuffer",
        "current",
        "current",
        "current",
        "current",
        "WritableState",
        "internalUtil",
        "_",
        "options",
        "Duplex",
        "Duplex",
        "require",
        "Writable",
        "Duplex",
        "Writable",
        "options",
        "WritableState",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "Stream",
        "Writable",
        "stream",
        "cb",
        "stream",
        "er",
        "processNextTick",
        "cb",
        "er",
        "stream",
        "state",
        "chunk",
        "cb",
        "chunk",
        "er",
        "Buffer",
        "chunk",
        "chunk",
        "chunk",
        "state",
        "er",
        "er",
        "stream",
        "er",
        "processNextTick",
        "cb",
        "er",
        "valid",
        "valid",
        "Writable",
        "chunk",
        "encoding",
        "cb",
        "encoding",
        "cb",
        "encoding",
        "encoding",
        "Buffer",
        "chunk",
        "encoding",
        "encoding",
        "encoding",
        "state",
        "cb",
        "cb",
        "nop",
        "state",
        "writeAfterEnd",
        "cb",
        "validChunk",
        "state",
        "chunk",
        "cb",
        "state",
        "ret",
        "writeOrBuffer",
        "state",
        "chunk",
        "encoding",
        "cb",
        "ret",
        "Writable",
        "state",
        "Writable",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "clearBuffer",
        "state",
        "Writable",
        "setDefaultEncoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "state",
        "chunk",
        "encoding",
        "state",
        "state",
        "chunk",
        "chunk",
        "bufferShim",
        "chunk",
        "encoding",
        "chunk",
        "stream",
        "state",
        "chunk",
        "encoding",
        "cb",
        "chunk",
        "decodeChunk",
        "state",
        "chunk",
        "encoding",
        "Buffer",
        "chunk",
        "encoding",
        "state",
        "chunk",
        "state",
        "len",
        "state",
        "state",
        "ret",
        "state",
        "state",
        "state",
        "state",
        "state",
        "WriteReq",
        "chunk",
        "encoding",
        "cb",
        "last",
        "last",
        "state",
        "state",
        "state",
        "state",
        "doWrite",
        "stream",
        "state",
        "len",
        "chunk",
        "encoding",
        "cb",
        "ret",
        "stream",
        "state",
        "writev",
        "len",
        "chunk",
        "encoding",
        "cb",
        "state",
        "len",
        "state",
        "cb",
        "state",
        "state",
        "writev",
        "stream",
        "chunk",
        "state",
        "stream",
        "chunk",
        "encoding",
        "state",
        "state",
        "stream",
        "state",
        "sync",
        "er",
        "cb",
        "state",
        "sync",
        "processNextTick",
        "cb",
        "er",
        "cb",
        "er",
        "stream",
        "stream",
        "er",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "stream",
        "er",
        "stream",
        "state",
        "state",
        "onwriteStateUpdate",
        "state",
        "er",
        "onwriteError",
        "stream",
        "state",
        "sync",
        "er",
        "cb",
        "needFinish",
        "state",
        "finished",
        "state",
        "state",
        "state",
        "clearBuffer",
        "stream",
        "state",
        "sync",
        "asyncWrite",
        "afterWrite",
        "stream",
        "state",
        "finished",
        "cb",
        "afterWrite",
        "stream",
        "state",
        "finished",
        "cb",
        "stream",
        "state",
        "finished",
        "cb",
        "finished",
        "onwriteDrain",
        "stream",
        "state",
        "state",
        "cb",
        "finishMaybe",
        "stream",
        "state",
        "stream",
        "state",
        "state",
        "state",
        "state",
        "stream",
        "stream",
        "state",
        "state",
        "state",
        "stream",
        "entry",
        "entry",
        "state",
        "l",
        "state",
        "holder",
        "entry",
        "entry",
        "buffer",
        "count",
        "entry",
        "entry",
        "entry",
        "count",
        "doWrite",
        "stream",
        "state",
        "state",
        "buffer",
        "holder",
        "state",
        "state",
        "holder",
        "state",
        "holder",
        "holder",
        "state",
        "CorkedRequest",
        "state",
        "entry",
        "entry",
        "entry",
        "entry",
        "state",
        "chunk",
        "doWrite",
        "stream",
        "state",
        "len",
        "chunk",
        "encoding",
        "cb",
        "entry",
        "entry",
        "state",
        "entry",
        "state",
        "state",
        "state",
        "entry",
        "state",
        "Writable",
        "chunk",
        "encoding",
        "cb",
        "cb",
        "Writable",
        "Writable",
        "chunk",
        "encoding",
        "cb",
        "chunk",
        "cb",
        "chunk",
        "chunk",
        "encoding",
        "encoding",
        "cb",
        "encoding",
        "encoding",
        "chunk",
        "chunk",
        "chunk",
        "encoding",
        "state",
        "state",
        "state",
        "state",
        "endWritable",
        "state",
        "cb",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "stream",
        "state",
        "state",
        "state",
        "stream",
        "stream",
        "state",
        "needFinish",
        "state",
        "need",
        "state",
        "prefinish",
        "stream",
        "state",
        "state",
        "stream",
        "prefinish",
        "stream",
        "state",
        "need",
        "stream",
        "state",
        "cb",
        "state",
        "finishMaybe",
        "stream",
        "state",
        "cb",
        "state",
        "processNextTick",
        "cb",
        "stream",
        "cb",
        "state",
        "stream",
        "state",
        "err",
        "_this",
        "_this",
        "entry",
        "entry",
        "state",
        "cb",
        "err",
        "entry",
        "entry",
        "state",
        "state",
        "_this",
        "state",
        "_this",
        "require",
        "require",
        "exports",
        "require",
        "buffer",
        "buffer",
        "buffer",
        "exports",
        "alloc",
        "size",
        "fill",
        "encoding",
        "Buffer",
        "Buffer",
        "size",
        "fill",
        "encoding",
        "encoding",
        "size",
        "size",
        "MAX_LEN",
        "RangeError",
        "_fill",
        "enc",
        "_fill",
        "Buffer",
        "size",
        "_fill",
        "Buffer",
        "_fill",
        "enc",
        "fillBuf",
        "i",
        "size",
        "buf",
        "i",
        "fillBuf",
        "i",
        "flen",
        "buf",
        "_fill",
        "buf",
        "exports",
        "allocUnsafe",
        "size",
        "Buffer",
        "Buffer",
        "size",
        "size",
        "size",
        "MAX_LEN",
        "RangeError",
        "Buffer",
        "size",
        "exports",
        "value",
        "encodingOrOffset",
        "length",
        "Buffer",
        "Uint8Array",
        "Buffer",
        "Buffer",
        "value",
        "encodingOrOffset",
        "length",
        "value",
        "value",
        "Buffer",
        "value",
        "encodingOrOffset",
        "ArrayBuffer",
        "value",
        "ArrayBuffer",
        "arguments",
        "Buffer",
        "value",
        "offset",
        "offset",
        "len",
        "len",
        "value",
        "offset",
        "offset",
        "value",
        "RangeError",
        "len",
        "value",
        "offset",
        "RangeError",
        "Buffer",
        "value",
        "offset",
        "offset",
        "len",
        "Buffer",
        "value",
        "Buffer",
        "value",
        "value",
        "value",
        "value",
        "value",
        "ArrayBuffer",
        "value",
        "ArrayBuffer",
        "value",
        "Buffer",
        "value",
        "value",
        "value",
        "Buffer",
        "value",
        "exports",
        "allocUnsafeSlow",
        "size",
        "Buffer",
        "Buffer",
        "size",
        "size",
        "size",
        "MAX_LEN",
        "RangeError",
        "SlowBuffer",
        "size",
        "require",
        "exports",
        "Buffer",
        "arg",
        "arg",
        "objectToString",
        "arg",
        "exports",
        "isArray",
        "arg",
        "arg",
        "exports",
        "isBoolean",
        "arg",
        "arg",
        "exports",
        "isNull",
        "arg",
        "arg",
        "exports",
        "isNullOrUndefined",
        "arg",
        "arg",
        "exports",
        "isNumber",
        "arg",
        "arg",
        "exports",
        "isString",
        "arg",
        "arg",
        "exports",
        "isSymbol",
        "arg",
        "arg",
        "exports",
        "isUndefined",
        "re",
        "objectToString",
        "re",
        "exports",
        "isRegExp",
        "arg",
        "arg",
        "arg",
        "exports",
        "isObject",
        "d",
        "objectToString",
        "d",
        "exports",
        "isDate",
        "e",
        "objectToString",
        "e",
        "e",
        "exports",
        "isError",
        "arg",
        "arg",
        "exports",
        "isFunction",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "exports",
        "isPrimitive",
        "exports",
        "Buffer",
        "o",
        "o",
        "require",
        "require",
        "exports",
        "arguments",
        "exports",
        "arguments",
        "require",
        "exports",
        "process",
        "process",
        "process",
        "process",
        "process",
        "nextTick",
        "process",
        "fn",
        "arg1",
        "arg2",
        "arg3",
        "fn",
        "arguments",
        "len",
        "process",
        "fn",
        "process",
        "afterTickOne",
        "fn",
        "arg1",
        "process",
        "afterTickTwo",
        "fn",
        "arg1",
        "arg2",
        "process",
        "afterTickThree",
        "fn",
        "arg1",
        "arg2",
        "arg3",
        "args",
        "len",
        "i",
        "i",
        "args",
        "args",
        "i",
        "arguments",
        "i",
        "process",
        "afterTick",
        "fn",
        "args",
        "require",
        "require",
        "exports",
        "deprecate",
        "fn",
        "msg",
        "config",
        "fn",
        "warned",
        "config",
        "msg",
        "config",
        "msg",
        "msg",
        "warned",
        "fn",
        "arguments",
        "deprecated",
        "name",
        "_",
        "name",
        "val",
        "val",
        "require",
        "exports",
        "process",
        "require",
        "_",
        "exports",
        "require",
        "exports",
        "Stream",
        "exports",
        "exports",
        "exports",
        "exports",
        "require",
        "exports",
        "require",
        "exports",
        "require",
        "exports",
        "require",
        "process",
        "process",
        "Stream",
        "Stream",
        "require",
        "require",
        "exports",
        "require",
        "require",
        "require",
        "require",
        "http",
        "opts",
        "cb",
        "opts",
        "opts",
        "url",
        "opts",
        "opts",
        "extend",
        "opts",
        "opts",
        "defaultProtocol",
        "opts",
        "opts",
        "opts",
        "opts",
        "host",
        "host",
        "host",
        "host",
        "opts",
        "host",
        "protocol",
        "host",
        "port",
        "port",
        "path",
        "opts",
        "opts",
        "opts",
        "opts",
        "ClientRequest",
        "opts",
        "cb",
        "req",
        "cb",
        "req",
        "http",
        "get",
        "opts",
        "cb",
        "http",
        "opts",
        "cb",
        "req",
        "req",
        "http",
        "http",
        "http",
        "statusCodes",
        "http",
        "require",
        "exports",
        "exports",
        "isFunction",
        "isFunction",
        "exports",
        "Blob",
        "ArrayBuffer",
        "exports",
        "e",
        "xhr",
        "xhr",
        "xhr",
        "e",
        "haveArrayBuffer",
        "isFunction",
        "exports",
        "haveArrayBuffer",
        "checkTypeSupport",
        "exports",
        "exports",
        "haveSlice",
        "checkTypeSupport",
        "exports",
        "exports",
        "haveArrayBuffer",
        "checkTypeSupport",
        "exports",
        "isFunction",
        "xhr",
        "exports",
        "isFunction",
        "value",
        "value",
        "xhr",
        "require",
        "exports",
        "process",
        "Buffer",
        "require",
        "require",
        "require",
        "require",
        "require",
        "response",
        "response",
        "preferBinary",
        "capability",
        "capability",
        "capability",
        "capability",
        "preferBinary",
        "capability",
        "preferBinary",
        "opts",
        "stream",
        "opts",
        "opts",
        "Buffer",
        "opts",
        "opts",
        "name",
        "name",
        "opts",
        "name",
        "opts",
        "preferBinary",
        "opts",
        "preferBinary",
        "capability",
        "opts",
        "opts",
        "opts",
        "preferBinary",
        "decideMode",
        "preferBinary",
        "inherits",
        "ClientRequest",
        "stream",
        "ClientRequest",
        "name",
        "value",
        "name",
        "unsafeHeaders",
        "lowerName",
        "lowerName",
        "name",
        "value",
        "ClientRequest",
        "name",
        "name",
        "ClientRequest",
        "name",
        "name",
        "ClientRequest",
        "opts",
        "opts",
        "opts",
        "capability",
        "body",
        "buffer",
        "toArrayBuffer",
        "buffer",
        "headersObj",
        "body",
        "Buffer",
        "headersObj",
        "name",
        "headersObj",
        "name",
        "headersObj",
        "name",
        "headers",
        "body",
        "opts",
        "response",
        "response",
        "reason",
        "reason",
        "xhr",
        "err",
        "process",
        "err",
        "xhr",
        "xhr",
        "xhr",
        "xhr",
        "opts",
        "xhr",
        "xhr",
        "headersObj",
        "name",
        "xhr",
        "headersObj",
        "name",
        "headersObj",
        "name",
        "xhr",
        "xhr",
        "rStates",
        "rStates",
        "xhr",
        "xhr",
        "xhr",
        "body",
        "err",
        "process",
        "err",
        "xhr",
        "xhr",
        "status",
        "status",
        "e",
        "ClientRequest",
        "statusValid",
        "ClientRequest",
        "IncomingMessage",
        "ClientRequest",
        "chunk",
        "encoding",
        "cb",
        "chunk",
        "cb",
        "ClientRequest",
        "ClientRequest",
        "ClientRequest",
        "data",
        "encoding",
        "cb",
        "data",
        "cb",
        "data",
        "data",
        "stream",
        "data",
        "encoding",
        "cb",
        "ClientRequest",
        "ClientRequest",
        "ClientRequest",
        "ClientRequest",
        "require",
        "require",
        "require",
        "exports",
        "process",
        "Buffer",
        "require",
        "require",
        "require",
        "exports",
        "exports",
        "xhr",
        "response",
        "mode",
        "stream",
        "mode",
        "process",
        "mode",
        "response",
        "response",
        "response",
        "response",
        "response",
        "header",
        "_i",
        "_it",
        "_i",
        "header",
        "header",
        "header",
        "header",
        "response",
        "reader",
        "result",
        "result",
        "Buffer",
        "result",
        "read",
        "read",
        "xhr",
        "xhr",
        "xhr",
        "xhr",
        "xhr",
        "headers",
        "header",
        "header",
        "matches",
        "matches",
        "key",
        "key",
        "key",
        "key",
        "matches",
        "key",
        "key",
        "matches",
        "key",
        "matches",
        "matches",
        "matches",
        "capability",
        "mimeType",
        "mimeType",
        "charsetMatch",
        "charsetMatch",
        "inherits",
        "IncomingMessage",
        "stream",
        "IncomingMessage",
        "IncomingMessage",
        "xhr",
        "rStates",
        "response",
        "xhr",
        "e",
        "response",
        "Buffer",
        "response",
        "response",
        "xhr",
        "e",
        "response",
        "response",
        "Buffer",
        "newData",
        "i",
        "newData",
        "i",
        "buffer",
        "i",
        "newData",
        "i",
        "buffer",
        "newData",
        "response",
        "xhr",
        "rStates",
        "response",
        "xhr",
        "Buffer",
        "Uint8Array",
        "response",
        "response",
        "xhr",
        "xhr",
        "rStates",
        "response",
        "Buffer",
        "Uint8Array",
        "response",
        "response",
        "xhr",
        "xhr",
        "rStates",
        "reader",
        "reader",
        "Buffer",
        "Uint8Array",
        "reader",
        "reader",
        "reader",
        "reader",
        "response",
        "rStates",
        "require",
        "require",
        "require",
        "exports",
        "require",
        "exports",
        "require",
        "buf",
        "buf",
        "Uint8Array",
        "buf",
        "buf",
        "buf",
        "buf",
        "buf",
        "buf",
        "buf",
        "buf",
        "buf",
        "Buffer",
        "buf",
        "Uint8Array",
        "buf",
        "buf",
        "i",
        "len",
        "i",
        "arrayCopy",
        "i",
        "buf",
        "i",
        "arrayCopy",
        "require",
        "exports",
        "require",
        "Buffer",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "isBufferEncoding",
        "encoding",
        "encoding",
        "exports",
        "encoding",
        "encoding",
        "assertEncoding",
        "encoding",
        "utf16DetectIncompleteChar",
        "base64DetectIncompleteChar",
        "passThroughWrite",
        "Buffer",
        "StringDecoder",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "available",
        "available",
        "buffer",
        "buffer",
        "available",
        "buffer",
        "charStr",
        "charStr",
        "charStr",
        "charCode",
        "charCode",
        "charStr",
        "buffer",
        "charStr",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "end",
        "end",
        "charStr",
        "buffer",
        "end",
        "charStr",
        "charStr",
        "end",
        "charCode",
        "charCode",
        "size",
        "size",
        "size",
        "size",
        "buffer",
        "size",
        "charStr",
        "end",
        "charStr",
        "StringDecoder",
        "buffer",
        "buffer",
        "buffer",
        "i",
        "i",
        "buffer",
        "buffer",
        "i",
        "i",
        "c",
        "i",
        "c",
        "i",
        "c",
        "i",
        "StringDecoder",
        "buffer",
        "buffer",
        "buffer",
        "res",
        "buffer",
        "res",
        "buf",
        "cr",
        "enc",
        "res",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "require",
        "exports",
        "require",
        "require",
        "exports",
        "urlParse",
        "exports",
        "urlResolve",
        "exports",
        "urlResolveObject",
        "exports",
        "urlFormat",
        "exports",
        "Url",
        "delims",
        "unwise",
        "autoEscape",
        "require",
        "url",
        "parseQueryString",
        "slashesDenoteHost",
        "url",
        "util",
        "url",
        "url",
        "Url",
        "url",
        "Url",
        "u",
        "url",
        "parseQueryString",
        "slashesDenoteHost",
        "u",
        "Url",
        "url",
        "parseQueryString",
        "slashesDenoteHost",
        "util",
        "url",
        "url",
        "url",
        "queryIndex",
        "queryIndex",
        "url",
        "url",
        "splitter",
        "uSplit",
        "uSplit",
        "slashRegex",
        "url",
        "uSplit",
        "splitter",
        "rest",
        "rest",
        "slashesDenoteHost",
        "url",
        "simplePathPattern",
        "rest",
        "simplePath",
        "rest",
        "rest",
        "simplePath",
        "simplePath",
        "simplePath",
        "parseQueryString",
        "querystring",
        "parseQueryString",
        "protocolPattern",
        "rest",
        "proto",
        "proto",
        "proto",
        "proto",
        "lowerProto",
        "rest",
        "rest",
        "proto",
        "slashesDenoteHost",
        "proto",
        "rest",
        "rest",
        "slashes",
        "proto",
        "hostlessProtocol",
        "proto",
        "rest",
        "rest",
        "hostlessProtocol",
        "proto",
        "slashes",
        "proto",
        "slashedProtocol",
        "proto",
        "i",
        "hostEndingChars",
        "i",
        "rest",
        "hostEndingChars",
        "i",
        "hec",
        "hostEnd",
        "hec",
        "hostEnd",
        "hostEnd",
        "hec",
        "hostEnd",
        "atSign",
        "rest",
        "atSign",
        "rest",
        "hostEnd",
        "atSign",
        "auth",
        "rest",
        "atSign",
        "rest",
        "rest",
        "atSign",
        "decodeURIComponent",
        "auth",
        "hostEnd",
        "i",
        "nonHostChars",
        "i",
        "rest",
        "nonHostChars",
        "i",
        "hec",
        "hostEnd",
        "hec",
        "hostEnd",
        "hostEnd",
        "hec",
        "hostEnd",
        "hostEnd",
        "rest",
        "rest",
        "hostEnd",
        "rest",
        "rest",
        "hostEnd",
        "ipv6Hostname",
        "hostparts",
        "i",
        "l",
        "i",
        "hostparts",
        "i",
        "part",
        "part",
        "hostnamePartPattern",
        "part",
        "j",
        "k",
        "j",
        "part",
        "j",
        "newpart",
        "newpart",
        "part",
        "j",
        "newpart",
        "hostnamePartPattern",
        "hostparts",
        "i",
        "hostparts",
        "i",
        "part",
        "hostnamePartStart",
        "bit",
        "validParts",
        "bit",
        "notHost",
        "bit",
        "notHost",
        "rest",
        "notHost",
        "rest",
        "validParts",
        "hostnameMaxLen",
        "ipv6Hostname",
        "punycode",
        "h",
        "p",
        "ipv6Hostname",
        "rest",
        "rest",
        "rest",
        "unsafeProtocol",
        "lowerProto",
        "autoEscape",
        "i",
        "l",
        "i",
        "autoEscape",
        "i",
        "rest",
        "ae",
        "encodeURIComponent",
        "ae",
        "esc",
        "ae",
        "esc",
        "escape",
        "ae",
        "rest",
        "rest",
        "ae",
        "esc",
        "rest",
        "hash",
        "rest",
        "hash",
        "rest",
        "rest",
        "hash",
        "rest",
        "qm",
        "rest",
        "qm",
        "rest",
        "qm",
        "parseQueryString",
        "querystring",
        "rest",
        "rest",
        "qm",
        "parseQueryString",
        "rest",
        "rest",
        "slashedProtocol",
        "lowerProto",
        "p",
        "s",
        "obj",
        "util",
        "obj",
        "obj",
        "urlParse",
        "obj",
        "obj",
        "Url",
        "Url",
        "obj",
        "obj",
        "Url",
        "auth",
        "auth",
        "encodeURIComponent",
        "auth",
        "auth",
        "auth",
        "auth",
        "host",
        "auth",
        "host",
        "auth",
        "host",
        "util",
        "query",
        "querystring",
        "query",
        "query",
        "protocol",
        "protocol",
        "protocol",
        "protocol",
        "slashedProtocol",
        "protocol",
        "host",
        "host",
        "host",
        "pathname",
        "pathname",
        "pathname",
        "pathname",
        "host",
        "host",
        "hash",
        "hash",
        "hash",
        "hash",
        "search",
        "search",
        "search",
        "search",
        "pathname",
        "pathname",
        "match",
        "encodeURIComponent",
        "match",
        "search",
        "search",
        "protocol",
        "host",
        "pathname",
        "search",
        "hash",
        "source",
        "relative",
        "urlParse",
        "source",
        "relative",
        "Url",
        "relative",
        "urlParse",
        "relative",
        "source",
        "relative",
        "source",
        "relative",
        "urlParse",
        "source",
        "relative",
        "Url",
        "relative",
        "util",
        "relative",
        "Url",
        "rel",
        "relative",
        "relative",
        "rel",
        "Url",
        "tk",
        "tkeys",
        "tk",
        "tkeys",
        "tk",
        "result",
        "tkey",
        "tkey",
        "result",
        "relative",
        "relative",
        "result",
        "result",
        "result",
        "relative",
        "relative",
        "relative",
        "rk",
        "rkeys",
        "rk",
        "rkeys",
        "rk",
        "rkey",
        "result",
        "rkey",
        "relative",
        "rkey",
        "slashedProtocol",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "relative",
        "relative",
        "result",
        "slashedProtocol",
        "relative",
        "relative",
        "v",
        "keys",
        "v",
        "keys",
        "v",
        "result",
        "k",
        "relative",
        "k",
        "result",
        "result",
        "result",
        "result",
        "relative",
        "relative",
        "hostlessProtocol",
        "relative",
        "relative",
        "relPath",
        "relative",
        "relPath",
        "relative",
        "relative",
        "relative",
        "relative",
        "relPath",
        "relPath",
        "relPath",
        "relPath",
        "result",
        "relPath",
        "result",
        "relative",
        "result",
        "relative",
        "result",
        "relative",
        "result",
        "relative",
        "result",
        "relative",
        "result",
        "relative",
        "relative",
        "result",
        "relative",
        "result",
        "result",
        "result",
        "result",
        "result",
        "p",
        "s",
        "result",
        "result",
        "relative",
        "result",
        "result",
        "result",
        "result",
        "result",
        "relative",
        "relative",
        "relative",
        "isRelAbs",
        "isSourceAbs",
        "result",
        "relative",
        "result",
        "result",
        "relative",
        "relative",
        "result",
        "slashedProtocol",
        "result",
        "psychotic",
        "result",
        "result",
        "result",
        "srcPath",
        "srcPath",
        "result",
        "srcPath",
        "result",
        "result",
        "relative",
        "relative",
        "relative",
        "relative",
        "relPath",
        "relPath",
        "relative",
        "relPath",
        "relative",
        "relative",
        "mustEndAbs",
        "mustEndAbs",
        "relPath",
        "srcPath",
        "isRelAbs",
        "result",
        "relative",
        "relative",
        "relative",
        "result",
        "result",
        "relative",
        "relative",
        "relative",
        "result",
        "result",
        "relative",
        "result",
        "relative",
        "srcPath",
        "relPath",
        "relPath",
        "srcPath",
        "srcPath",
        "srcPath",
        "srcPath",
        "srcPath",
        "relPath",
        "result",
        "relative",
        "result",
        "relative",
        "util",
        "relative",
        "psychotic",
        "result",
        "result",
        "srcPath",
        "result",
        "result",
        "result",
        "authInHost",
        "result",
        "authInHost",
        "result",
        "result",
        "authInHost",
        "result",
        "relative",
        "result",
        "relative",
        "util",
        "result",
        "util",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "srcPath",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "srcPath",
        "result",
        "relative",
        "srcPath",
        "last",
        "last",
        "last",
        "srcPath",
        "i",
        "i",
        "last",
        "srcPath",
        "i",
        "last",
        "srcPath",
        "i",
        "last",
        "srcPath",
        "i",
        "up",
        "up",
        "srcPath",
        "i",
        "up",
        "mustEndAbs",
        "removeAllDots",
        "up",
        "up",
        "srcPath",
        "mustEndAbs",
        "srcPath",
        "srcPath",
        "srcPath",
        "srcPath",
        "hasTrailingSlash",
        "srcPath",
        "srcPath",
        "srcPath",
        "srcPath",
        "srcPath",
        "psychotic",
        "result",
        "result",
        "isAbsolute",
        "srcPath",
        "srcPath",
        "result",
        "result",
        "result",
        "authInHost",
        "result",
        "authInHost",
        "result",
        "result",
        "authInHost",
        "mustEndAbs",
        "mustEndAbs",
        "result",
        "srcPath",
        "mustEndAbs",
        "isAbsolute",
        "srcPath",
        "srcPath",
        "result",
        "result",
        "result",
        "srcPath",
        "util",
        "result",
        "util",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "relative",
        "result",
        "result",
        "result",
        "relative",
        "result",
        "result",
        "result",
        "Url",
        "portPattern",
        "host",
        "port",
        "port",
        "port",
        "port",
        "port",
        "host",
        "host",
        "host",
        "port",
        "host",
        "host",
        "require",
        "exports",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "require",
        "exports",
        "extend",
        "i",
        "arguments",
        "i",
        "arguments",
        "i",
        "key",
        "source",
        "hasOwnProperty",
        "source",
        "key",
        "target",
        "key",
        "source",
        "key",
        "target"
    ],
    "literals": [
        "\"object\"",
        "\"undefined\"",
        "\"function\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"function\"",
        "\"Cannot find module '\"",
        "\"'\"",
        "\"MODULE_NOT_FOUND\"",
        "\"function\"",
        "'./table'",
        "''",
        "''",
        "'/'",
        "'function'",
        "'/'",
        "'function'",
        "'function'",
        "'/'",
        "'/'",
        "'function'",
        "\"nothing to commit\"",
        "'function'",
        "'function'",
        "'function'",
        "'init'",
        "'/'",
        "'latestRevision ==>'",
        "'/'",
        "\"./table\"",
        "'shortid'",
        "\"shortid\"",
        "'./storage/storage.js'",
        "'./datastore/datastore.js'",
        "\"./datastore/datastore.js\"",
        "\"./storage/storage.js\"",
        "'use strict'",
        "'./lib/index'",
        "\"./lib/index\"",
        "'use strict'",
        "'./random/random-from-seed'",
        "'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-'",
        "'Custom alphabet for shortid must be '",
        "' unique characters. You submitted '",
        "' characters: '",
        "''",
        "'Custom alphabet for shortid must be '",
        "' unique characters. These characters were not unique: '",
        "', '",
        "''",
        "''",
        "\"./random/random-from-seed\"",
        "'use strict'",
        "'./alphabet'",
        "\"./alphabet\"",
        "'use strict'",
        "'./random/random-byte'",
        "''",
        "\"./random/random-byte\"",
        "'use strict'",
        "'./alphabet'",
        "'./encode'",
        "'./decode'",
        "'./is-valid'",
        "'./util/cluster-worker-id'",
        "''",
        "\"./alphabet\"",
        "\"./decode\"",
        "\"./encode\"",
        "\"./is-valid\"",
        "\"./util/cluster-worker-id\"",
        "'use strict'",
        "'./alphabet'",
        "'string'",
        "\"./alphabet\"",
        "'use strict'",
        "'object'",
        "'use strict'",
        "'use strict'",
        "'https'",
        "'Authorization'",
        "'Bearer '",
        "'Dropbox-API-Arg'",
        "''",
        "'error'",
        "'data'",
        "'end'",
        "\"recursive\"",
        "\"include_has_explicit_shared_members\"",
        "'POST'",
        "\"Content-Type\"",
        "\"application/json\"",
        "'api.dropboxapi.com'",
        "'/2/files/list_folder'",
        "'POST'",
        "\"Content-Type\"",
        "\"application/json\"",
        "'api.dropboxapi.com'",
        "'/2/files/list_folder/continue'",
        "'POST'",
        "\"Content-Type\"",
        "\"application/json\"",
        "'api.dropboxapi.com'",
        "'/2/files/get_metadata'",
        "\"path\"",
        "\".tag\"",
        "'not_found'",
        "'POST'",
        "\"Content-Type\"",
        "\"application/json\"",
        "'api.dropboxapi.com'",
        "'/2/files/create_folder'",
        "'POST'",
        "'content.dropboxapi.com'",
        "'/2/files/download'",
        "'dropbox-api-result'",
        "'dropbox-api-result'",
        "\"autorename\"",
        "\"mute\"",
        "\"mode\"",
        "\"add\"",
        "'POST'",
        "\"Content-Type\"",
        "\"application/octet-stream\"",
        "'content.dropboxapi.com'",
        "'/2/files/upload'",
        "\"reason\"",
        "\".tag\"",
        "'conflict'",
        "'string'",
        "\"async_job_id\"",
        "'POST'",
        "\"Content-Type\"",
        "\"application/json\"",
        "'api.dropboxapi.com'",
        "'/2/files/delete_batch/check'",
        "'.tag'",
        "'complete'",
        "'.tag'",
        "'in_progress'",
        "\"entries\"",
        "'POST'",
        "\"Content-Type\"",
        "\"application/json\"",
        "'api.dropboxapi.com'",
        "'/2/files/delete_batch'",
        "'.tag'",
        "'complete'",
        "'.tag'",
        "'async_job_id'",
        "'async_job_id'",
        "\"https\"",
        "'./dropbox.js'",
        "'dropbox'",
        "\"storage of type \"",
        "\" is not supported\"",
        "\"./dropbox.js\"",
        "'use strict'",
        "'base64-js'",
        "'ieee754'",
        "'isarray'",
        "'function'",
        "'Invalid typed array length'",
        "'number'",
        "'string'",
        "'If encoding is specified then the first argument must be a string'",
        "'number'",
        "'\"value\" argument must not be a number'",
        "'undefined'",
        "'string'",
        "'undefined'",
        "'number'",
        "'\"size\" argument must be a number'",
        "'string'",
        "'string'",
        "''",
        "'utf8'",
        "'\"encoding\" must be a valid string encoding'",
        "'\\'offset\\' is out of bounds'",
        "'\\'length\\' is out of bounds'",
        "'undefined'",
        "'length'",
        "'number'",
        "'Buffer'",
        "'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.'",
        "'Attempt to allocate Buffer larger than maximum '",
        "'size: 0x'",
        "' bytes'",
        "'Arguments must be Buffers'",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'ascii'",
        "'binary'",
        "'base64'",
        "'raw'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'\"list\" argument must be an Array of Buffers'",
        "'\"list\" argument must be an Array of Buffers'",
        "'undefined'",
        "'function'",
        "'string'",
        "''",
        "'ascii'",
        "'binary'",
        "'raw'",
        "'raws'",
        "'utf8'",
        "'utf-8'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'hex'",
        "'base64'",
        "''",
        "''",
        "''",
        "''",
        "'utf8'",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'ascii'",
        "'binary'",
        "'base64'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'Unknown encoding: '",
        "''",
        "'Buffer size must be a multiple of 16-bits'",
        "'Buffer size must be a multiple of 32-bits'",
        "''",
        "'Argument must be a Buffer'",
        "''",
        "'hex'",
        "' '",
        "' ... '",
        "'<Buffer '",
        "'>'",
        "'Argument must be a Buffer'",
        "'out of range index'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'string'",
        "'string'",
        "'number'",
        "'function'",
        "'val must be string, number or Buffer'",
        "'Invalid hex string'",
        "'utf8'",
        "'string'",
        "'utf8'",
        "'Buffer.write(string, encoding, offset[, length]) is no longer supported'",
        "'Attempt to write outside buffer bounds'",
        "'utf8'",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'ascii'",
        "'binary'",
        "'base64'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'Unknown encoding: '",
        "''",
        "'Buffer'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'offset is not uint'",
        "'Trying to access beyond buffer length'",
        "'\"buffer\" argument must be a Buffer instance'",
        "'\"value\" argument is out of bounds'",
        "'Index out of range'",
        "'Index out of range'",
        "'Index out of range'",
        "'targetStart out of bounds'",
        "'sourceStart out of bounds'",
        "'sourceEnd out of bounds'",
        "'string'",
        "'string'",
        "'string'",
        "'string'",
        "'encoding must be a string'",
        "'string'",
        "'Unknown encoding: '",
        "'number'",
        "'Out of range index'",
        "'number'",
        "''",
        "''",
        "'='",
        "''",
        "'0'",
        "'Invalid code point'",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"base64-js\"",
        "\"ieee754\"",
        "\"isarray\"",
        "'use strict'",
        "'undefined'",
        "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'",
        "'-'",
        "'_'",
        "'Invalid string. Length must be a multiple of 4'",
        "'='",
        "'='",
        "''",
        "''",
        "'=='",
        "'='",
        "''",
        "'[object Array]'",
        "'n must be a positive number'",
        "'error'",
        "'Uncaught, unspecified \"error\" event. ('",
        "')'",
        "'listener must be a function'",
        "'newListener'",
        "'(node) warning: possible EventEmitter memory '",
        "'leak detected. %d listeners added. '",
        "'Use emitter.setMaxListeners() to increase limit.'",
        "'function'",
        "'listener must be a function'",
        "'listener must be a function'",
        "'removeListener'",
        "'removeListener'",
        "'removeListener'",
        "'removeListener'",
        "'function'",
        "'number'",
        "'object'",
        "'http'",
        "'https'",
        "'https:'",
        "\"http\"",
        "'function'",
        "'function'",
        "'setTimeout is not defined'",
        "'clearTimeout is not defined'",
        "'browser'",
        "''",
        "'process.binding is not supported'",
        "'/'",
        "'process.chdir is not supported'",
        "'object'",
        "'object'",
        "'object'",
        "'-'",
        "'overflow'",
        "'Overflow: input needs wider integers to process'",
        "'not-basic'",
        "'Illegal input >= 0x80 (not a basic code point)'",
        "'invalid-input'",
        "'Invalid input'",
        "'@'",
        "''",
        "'@'",
        "'\\x2E'",
        "'.'",
        "'.'",
        "''",
        "''",
        "'not-basic'",
        "'invalid-input'",
        "'overflow'",
        "'overflow'",
        "'overflow'",
        "'overflow'",
        "'overflow'",
        "''",
        "'xn--'",
        "'version'",
        "'1.4.1'",
        "'ucs2'",
        "'decode'",
        "'encode'",
        "'decode'",
        "'encode'",
        "'toASCII'",
        "'toUnicode'",
        "'function'",
        "'object'",
        "'punycode'",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "'use strict'",
        "'&'",
        "'='",
        "'string'",
        "'number'",
        "'%20'",
        "''",
        "'[object Array]'",
        "'use strict'",
        "'string'",
        "'boolean'",
        "'true'",
        "'false'",
        "'number'",
        "''",
        "''",
        "'&'",
        "'='",
        "'object'",
        "''",
        "'[object Array]'",
        "'use strict'",
        "'./decode'",
        "'./encode'",
        "\"./decode\"",
        "\"./encode\"",
        "'use strict'",
        "'process-nextick-args'",
        "'core-util-is'",
        "'inherits'",
        "'./_stream_readable'",
        "'./_stream_writable'",
        "'end'",
        "\"./_stream_readable\"",
        "\"./_stream_writable\"",
        "\"core-util-is\"",
        "\"inherits\"",
        "\"process-nextick-args\"",
        "'use strict'",
        "'./_stream_transform'",
        "'core-util-is'",
        "'inherits'",
        "\"./_stream_transform\"",
        "\"core-util-is\"",
        "\"inherits\"",
        "'use strict'",
        "'process-nextick-args'",
        "'isarray'",
        "'events'",
        "'st'",
        "'ream'",
        "'events'",
        "'buffer'",
        "'buffer-shims'",
        "'core-util-is'",
        "'inherits'",
        "'util'",
        "'stream'",
        "'function'",
        "'./_stream_duplex'",
        "'utf8'",
        "'string_decoder/'",
        "'./_stream_duplex'",
        "'function'",
        "'string'",
        "''",
        "''",
        "'error'",
        "'stream.push() after EOF'",
        "'error'",
        "'stream.unshift() after end event'",
        "'error'",
        "'data'",
        "'string_decoder/'",
        "'read'",
        "'number'",
        "'read: emitReadable'",
        "'need readable'",
        "'length less than watermark'",
        "'reading or ended'",
        "'do read'",
        "'data'",
        "'string'",
        "'Invalid non-string/buffer chunk'",
        "'emitReadable'",
        "'emit readable'",
        "'readable'",
        "'maybeReadMore read 0'",
        "'error'",
        "'not implemented'",
        "'pipe count=%d opts=%j'",
        "'end'",
        "'unpipe'",
        "'onunpipe'",
        "'onend'",
        "'drain'",
        "'cleanup'",
        "'close'",
        "'finish'",
        "'drain'",
        "'error'",
        "'unpipe'",
        "'end'",
        "'end'",
        "'data'",
        "'data'",
        "'ondata'",
        "'false write response, pause'",
        "'onerror'",
        "'error'",
        "'error'",
        "'error'",
        "'error'",
        "'finish'",
        "'close'",
        "'onfinish'",
        "'close'",
        "'finish'",
        "'unpipe'",
        "'pipe'",
        "'pipe resume'",
        "'pipeOnDrain'",
        "'data'",
        "'unpipe'",
        "'unpipe'",
        "'unpipe'",
        "'data'",
        "'readable'",
        "'readable nexttick read 0'",
        "'resume'",
        "'resume read 0'",
        "'resume'",
        "'call pause flowing=%j'",
        "'pause'",
        "'pause'",
        "'flow'",
        "'end'",
        "'wrapped end'",
        "'data'",
        "'wrapped data'",
        "'function'",
        "'error'",
        "'close'",
        "'destroy'",
        "'pause'",
        "'resume'",
        "'wrapped _read'",
        "''",
        "''",
        "'\"endReadable()\" called on non-empty stream'",
        "'end'",
        "'_process'",
        "\"./_stream_duplex\"",
        "\"_process\"",
        "\"buffer\"",
        "\"buffer-shims\"",
        "\"core-util-is\"",
        "\"events\"",
        "\"inherits\"",
        "\"isarray\"",
        "\"process-nextick-args\"",
        "\"string_decoder/\"",
        "\"util\"",
        "'use strict'",
        "'./_stream_duplex'",
        "'core-util-is'",
        "'inherits'",
        "'error'",
        "'no writecb in Transform class'",
        "'function'",
        "'function'",
        "'prefinish'",
        "'function'",
        "'Not implemented'",
        "'error'",
        "'Calling transform done when ws.length != 0'",
        "'Calling transform done when still transforming'",
        "\"./_stream_duplex\"",
        "\"core-util-is\"",
        "\"inherits\"",
        "'use strict'",
        "'process-nextick-args'",
        "'v0.10'",
        "'v0.9.'",
        "'core-util-is'",
        "'inherits'",
        "'util-deprecate'",
        "'st'",
        "'ream'",
        "'events'",
        "'buffer'",
        "'buffer-shims'",
        "'./_stream_duplex'",
        "'utf8'",
        "'buffer'",
        "'_writableState.buffer is deprecated. Use _writableState.getBuffer '",
        "'instead.'",
        "'./_stream_duplex'",
        "'function'",
        "'function'",
        "'error'",
        "'Cannot pipe, not readable'",
        "'write after end'",
        "'error'",
        "'May not write null values to stream'",
        "'string'",
        "'Invalid non-string/buffer chunk'",
        "'error'",
        "'function'",
        "'buffer'",
        "'function'",
        "'string'",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'ascii'",
        "'binary'",
        "'base64'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'raw'",
        "''",
        "'Unknown encoding: '",
        "'string'",
        "'buffer'",
        "'error'",
        "'drain'",
        "''",
        "'not implemented'",
        "'function'",
        "'function'",
        "'prefinish'",
        "'finish'",
        "'finish'",
        "'_process'",
        "\"./_stream_duplex\"",
        "\"_process\"",
        "\"buffer\"",
        "\"buffer-shims\"",
        "\"core-util-is\"",
        "\"events\"",
        "\"inherits\"",
        "\"process-nextick-args\"",
        "\"util-deprecate\"",
        "'use strict'",
        "'buffer'",
        "'function'",
        "'number'",
        "'encoding must not be number'",
        "'number'",
        "'size must be a number'",
        "'size is too large'",
        "'string'",
        "'function'",
        "'number'",
        "'size must be a number'",
        "'size is too large'",
        "'function'",
        "'number'",
        "'\"value\" argument must not be a number'",
        "'string'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'\\'offset\\' is out of bounds'",
        "'\\'length\\' is out of bounds'",
        "'undefined'",
        "'length'",
        "'Buffer'",
        "'First argument must be a string, Buffer, '",
        "'ArrayBuffer, Array, or array-like object.'",
        "'function'",
        "'number'",
        "'size must be a number'",
        "'size is too large'",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"buffer\"",
        "'[object Array]'",
        "'boolean'",
        "'number'",
        "'string'",
        "'symbol'",
        "'[object RegExp]'",
        "'object'",
        "'[object Date]'",
        "'[object Error]'",
        "'function'",
        "'boolean'",
        "'number'",
        "'string'",
        "'symbol'",
        "'undefined'",
        "\"isBuffer\"",
        "\"../../../../insert-module-globals/node_modules/is-buffer/index.js\"",
        "\"../../../../insert-module-globals/node_modules/is-buffer/index.js\"",
        "\"dup\"",
        "'use strict'",
        "'v0.'",
        "'v1.'",
        "'v1.8.'",
        "'function'",
        "'\"callback\" argument must be a function'",
        "'_process'",
        "\"_process\"",
        "'noDeprecation'",
        "'throwDeprecation'",
        "'traceDeprecation'",
        "'true'",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "'st'",
        "'ream'",
        "'./lib/_stream_readable.js'",
        "'./lib/_stream_writable.js'",
        "'./lib/_stream_duplex.js'",
        "'./lib/_stream_transform.js'",
        "'./lib/_stream_passthrough.js'",
        "'disable'",
        "'_process'",
        "\"./lib/_stream_duplex.js\"",
        "\"./lib/_stream_passthrough.js\"",
        "\"./lib/_stream_readable.js\"",
        "\"./lib/_stream_transform.js\"",
        "\"./lib/_stream_writable.js\"",
        "\"_process\"",
        "'./lib/request'",
        "'xtend'",
        "'builtin-status-codes'",
        "'url'",
        "'string'",
        "'http:'",
        "''",
        "'/'",
        "':'",
        "'['",
        "']'",
        "'//'",
        "''",
        "':'",
        "''",
        "'GET'",
        "'response'",
        "'CHECKOUT'",
        "'CONNECT'",
        "'COPY'",
        "'DELETE'",
        "'GET'",
        "'HEAD'",
        "'LOCK'",
        "'M-SEARCH'",
        "'MERGE'",
        "'MKACTIVITY'",
        "'MKCOL'",
        "'MOVE'",
        "'NOTIFY'",
        "'OPTIONS'",
        "'PATCH'",
        "'POST'",
        "'PROPFIND'",
        "'PROPPATCH'",
        "'PURGE'",
        "'PUT'",
        "'REPORT'",
        "'SEARCH'",
        "'SUBSCRIBE'",
        "'TRACE'",
        "'UNLOCK'",
        "'UNSUBSCRIBE'",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"./lib/request\"",
        "\"builtin-status-codes\"",
        "\"url\"",
        "\"xtend\"",
        "'GET'",
        "'/'",
        "'https://example.com'",
        "'undefined'",
        "'arraybuffer'",
        "'ms-stream'",
        "'moz-chunked-arraybuffer'",
        "'function'",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "'./capability'",
        "'inherits'",
        "'./response'",
        "'readable-stream'",
        "'to-arraybuffer'",
        "'fetch'",
        "'moz-chunked-arraybuffer'",
        "'ms-stream'",
        "'arraybuffer'",
        "'text:vbarray'",
        "'text'",
        "'Authorization'",
        "'Basic '",
        "'base64'",
        "'prefer-streaming'",
        "'allow-wrong-content-type'",
        "'default'",
        "'prefer-fast'",
        "'Invalid value for opts.mode'",
        "'finish'",
        "'POST'",
        "'PUT'",
        "'PATCH'",
        "'content-type'",
        "''",
        "'fetch'",
        "'cors'",
        "'include'",
        "'same-origin'",
        "'error'",
        "'error'",
        "'responseType'",
        "':'",
        "'withCredentials'",
        "'text'",
        "'overrideMimeType'",
        "'text/plain; charset=x-user-defined'",
        "'moz-chunked-arraybuffer'",
        "'error'",
        "'XHR error'",
        "'error'",
        "'response'",
        "'function'",
        "'accept-charset'",
        "'accept-encoding'",
        "'access-control-request-headers'",
        "'access-control-request-method'",
        "'connection'",
        "'content-length'",
        "'cookie'",
        "'cookie2'",
        "'date'",
        "'dnt'",
        "'expect'",
        "'host'",
        "'keep-alive'",
        "'origin'",
        "'referer'",
        "'te'",
        "'trailer'",
        "'transfer-encoding'",
        "'upgrade'",
        "'user-agent'",
        "'via'",
        "'_process'",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"buffer\"",
        "\"./capability\"",
        "\"./response\"",
        "\"_process\"",
        "\"buffer\"",
        "\"inherits\"",
        "\"readable-stream\"",
        "\"to-arraybuffer\"",
        "'./capability'",
        "'inherits'",
        "'readable-stream'",
        "'end'",
        "'close'",
        "'fetch'",
        "'set-cookie'",
        "', '",
        "'x-user-defined'",
        "'mime-type'",
        "'utf-8'",
        "'text:vbarray'",
        "'text'",
        "'text:vbarray'",
        "'x-user-defined'",
        "'arraybuffer'",
        "'moz-chunked-arraybuffer'",
        "'ms-stream'",
        "'ms-stream'",
        "'_process'",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"buffer\"",
        "\"./capability\"",
        "\"_process\"",
        "\"buffer\"",
        "\"inherits\"",
        "\"readable-stream\"",
        "\"100\"",
        "\"Continue\"",
        "\"101\"",
        "\"Switching Protocols\"",
        "\"102\"",
        "\"Processing\"",
        "\"200\"",
        "\"OK\"",
        "\"201\"",
        "\"Created\"",
        "\"202\"",
        "\"Accepted\"",
        "\"203\"",
        "\"Non-Authoritative Information\"",
        "\"204\"",
        "\"No Content\"",
        "\"205\"",
        "\"Reset Content\"",
        "\"206\"",
        "\"Partial Content\"",
        "\"207\"",
        "\"Multi-Status\"",
        "\"208\"",
        "\"Already Reported\"",
        "\"226\"",
        "\"IM Used\"",
        "\"300\"",
        "\"Multiple Choices\"",
        "\"301\"",
        "\"Moved Permanently\"",
        "\"302\"",
        "\"Found\"",
        "\"303\"",
        "\"See Other\"",
        "\"304\"",
        "\"Not Modified\"",
        "\"305\"",
        "\"Use Proxy\"",
        "\"307\"",
        "\"Temporary Redirect\"",
        "\"308\"",
        "\"Permanent Redirect\"",
        "\"400\"",
        "\"Bad Request\"",
        "\"401\"",
        "\"Unauthorized\"",
        "\"402\"",
        "\"Payment Required\"",
        "\"403\"",
        "\"Forbidden\"",
        "\"404\"",
        "\"Not Found\"",
        "\"405\"",
        "\"Method Not Allowed\"",
        "\"406\"",
        "\"Not Acceptable\"",
        "\"407\"",
        "\"Proxy Authentication Required\"",
        "\"408\"",
        "\"Request Timeout\"",
        "\"409\"",
        "\"Conflict\"",
        "\"410\"",
        "\"Gone\"",
        "\"411\"",
        "\"Length Required\"",
        "\"412\"",
        "\"Precondition Failed\"",
        "\"413\"",
        "\"Payload Too Large\"",
        "\"414\"",
        "\"URI Too Long\"",
        "\"415\"",
        "\"Unsupported Media Type\"",
        "\"416\"",
        "\"Range Not Satisfiable\"",
        "\"417\"",
        "\"Expectation Failed\"",
        "\"418\"",
        "\"I'm a teapot\"",
        "\"421\"",
        "\"Misdirected Request\"",
        "\"422\"",
        "\"Unprocessable Entity\"",
        "\"423\"",
        "\"Locked\"",
        "\"424\"",
        "\"Failed Dependency\"",
        "\"425\"",
        "\"Unordered Collection\"",
        "\"426\"",
        "\"Upgrade Required\"",
        "\"428\"",
        "\"Precondition Required\"",
        "\"429\"",
        "\"Too Many Requests\"",
        "\"431\"",
        "\"Request Header Fields Too Large\"",
        "\"500\"",
        "\"Internal Server Error\"",
        "\"501\"",
        "\"Not Implemented\"",
        "\"502\"",
        "\"Bad Gateway\"",
        "\"503\"",
        "\"Service Unavailable\"",
        "\"504\"",
        "\"Gateway Timeout\"",
        "\"505\"",
        "\"HTTP Version Not Supported\"",
        "\"506\"",
        "\"Variant Also Negotiates\"",
        "\"507\"",
        "\"Insufficient Storage\"",
        "\"508\"",
        "\"Loop Detected\"",
        "\"509\"",
        "\"Bandwidth Limit Exceeded\"",
        "\"510\"",
        "\"Not Extended\"",
        "\"511\"",
        "\"Network Authentication Required\"",
        "'buffer'",
        "'function'",
        "'Argument must be a Buffer'",
        "\"buffer\"",
        "'buffer'",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'ascii'",
        "'binary'",
        "'base64'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'raw'",
        "'Unknown encoding: '",
        "'utf8'",
        "''",
        "'utf8'",
        "'ucs2'",
        "'utf16le'",
        "'base64'",
        "''",
        "''",
        "''",
        "''",
        "\"buffer\"",
        "'use strict'",
        "'punycode'",
        "'./util'",
        "'<'",
        "'>'",
        "'\"'",
        "'`'",
        "' '",
        "'\\r'",
        "'\\n'",
        "'\\t'",
        "'{'",
        "'}'",
        "'|'",
        "'\\\\'",
        "'^'",
        "'`'",
        "'\\''",
        "'%'",
        "'/'",
        "'?'",
        "';'",
        "'#'",
        "'/'",
        "'?'",
        "'#'",
        "'javascript'",
        "'javascript:'",
        "'javascript'",
        "'javascript:'",
        "'http'",
        "'https'",
        "'ftp'",
        "'gopher'",
        "'file'",
        "'http:'",
        "'https:'",
        "'ftp:'",
        "'gopher:'",
        "'file:'",
        "'querystring'",
        "\"Parameter 'url' must be a string, not \"",
        "'?'",
        "'#'",
        "'?'",
        "'#'",
        "'/'",
        "'#'",
        "''",
        "'//'",
        "'@'",
        "'@'",
        "''",
        "'['",
        "']'",
        "''",
        "'x'",
        "'/'",
        "'.'",
        "'.'",
        "''",
        "':'",
        "''",
        "''",
        "'/'",
        "'/'",
        "'#'",
        "'?'",
        "''",
        "'/'",
        "''",
        "''",
        "''",
        "':'",
        "'@'",
        "''",
        "''",
        "''",
        "''",
        "':'",
        "'['",
        "']'",
        "':'",
        "'?'",
        "''",
        "':'",
        "':'",
        "'//'",
        "''",
        "'/'",
        "'/'",
        "''",
        "'#'",
        "'#'",
        "'?'",
        "'?'",
        "'#'",
        "'%23'",
        "''",
        "'protocol'",
        "'/'",
        "''",
        "'/'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'/'",
        "''",
        "''",
        "''",
        "'/'",
        "'/'",
        "'/'",
        "'/'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'@'",
        "'@'",
        "''",
        "''",
        "'/'",
        "'.'",
        "'..'",
        "''",
        "'.'",
        "'..'",
        "'..'",
        "''",
        "'/'",
        "''",
        "'/'",
        "'/'",
        "''",
        "''",
        "'/'",
        "''",
        "''",
        "'@'",
        "'@'",
        "''",
        "'/'",
        "''",
        "''",
        "':'",
        "\"./util\"",
        "\"punycode\"",
        "\"querystring\"",
        "'use strict'",
        "'string'",
        "'object'"
    ],
    "variables": [
        "g",
        "define",
        "exports",
        "a",
        "f",
        "l",
        "n",
        "i",
        "o",
        "Table",
        "initFileData",
        "tableNames",
        "count",
        "ids",
        "j",
        "ids",
        "j",
        "record",
        "j",
        "tablesNames",
        "i",
        "snapshotTablesNames",
        "i",
        "newDelta",
        "i",
        "delta",
        "tableNames",
        "j",
        "k",
        "index",
        "ids",
        "k",
        "queue",
        "running",
        "clipStr",
        "newVer",
        "clipStr",
        "minVer",
        "store",
        "structuredData",
        "latestRevision",
        "tables",
        "eventListeners",
        "clip",
        "queue",
        "fileList",
        "i",
        "num",
        "uploadRevision",
        "serverRevision",
        "count",
        "deltas",
        "index",
        "delta",
        "currentDelta",
        "tableNames",
        "i",
        "table",
        "delta",
        "j",
        "i",
        "table",
        "rev",
        "snapshotDelta",
        "newStructuredData",
        "newStructuredData",
        "tableNames",
        "i",
        "dataToSave",
        "currentDelta",
        "deleteList",
        "deleteRevision",
        "v",
        "deleteRevision",
        "currentDelta",
        "tableNames",
        "i",
        "table",
        "delta",
        "i",
        "relativePath",
        "datastoreName",
        "datastorePath",
        "store",
        "fileList",
        "structuredData",
        "i",
        "num",
        "count",
        "latestRevision",
        "index",
        "datastore",
        "datastore",
        "structuredData",
        "datastore",
        "shortid",
        "currentDelta",
        "tableData",
        "records",
        "keys",
        "i",
        "record",
        "tableData",
        "recordData",
        "record",
        "id",
        "i",
        "tableData",
        "records",
        "searchKeys",
        "ids",
        "i",
        "found",
        "item",
        "j",
        "record",
        "obj",
        "updateData",
        "tableData",
        "recordData",
        "u",
        "storageService",
        "Datastore",
        "Storage",
        "storageOptions",
        "store",
        "randomFromSeed",
        "ORIGINAL",
        "alphabet",
        "previousSeed",
        "shuffled",
        "unique",
        "sourceArray",
        "targetArray",
        "r",
        "characterIndex",
        "alphabetShuffled",
        "alphabet",
        "characters",
        "randomByte",
        "loopCounter",
        "done",
        "alphabet",
        "encode",
        "decode",
        "isValid",
        "REDUCE_TIME",
        "version",
        "clusterWorkerId",
        "counter",
        "previousSeconds",
        "seconds",
        "alphabet",
        "characters",
        "len",
        "i",
        "crypto",
        "dest",
        "seed",
        "http",
        "accessToken",
        "uploading",
        "onChangeEventListener",
        "rev",
        "fileCount",
        "latestCursor",
        "headers",
        "keys",
        "i",
        "resBody",
        "req",
        "resObj",
        "req",
        "resObj",
        "req",
        "resObj",
        "req",
        "resObj",
        "fileList",
        "i",
        "req",
        "headers",
        "apiResultObj",
        "req",
        "resObj",
        "resObj",
        "reqParams",
        "req",
        "resObj",
        "reqParams",
        "i",
        "req",
        "resObj",
        "DropboxStorage",
        "storages",
        "storage",
        "base64",
        "ieee754",
        "isArray",
        "arr",
        "i",
        "length",
        "length",
        "i",
        "len",
        "x",
        "y",
        "i",
        "len",
        "i",
        "buffer",
        "pos",
        "buf",
        "len",
        "loweredCase",
        "loweredCase",
        "i",
        "len",
        "i",
        "len",
        "i",
        "length",
        "max",
        "x",
        "y",
        "len",
        "thisCopy",
        "targetCopy",
        "i",
        "indexSize",
        "arrLength",
        "valLength",
        "foundIndex",
        "i",
        "byteOffset",
        "remaining",
        "strLen",
        "i",
        "parsed",
        "remaining",
        "loweredCase",
        "res",
        "i",
        "start",
        "firstByte",
        "codePoint",
        "bytesPerSequence",
        "secondByte",
        "thirdByte",
        "fourthByte",
        "tempCodePoint",
        "MAX_ARGUMENTS_LENGTH",
        "len",
        "res",
        "i",
        "ret",
        "i",
        "start",
        "ret",
        "i",
        "start",
        "len",
        "i",
        "start",
        "res",
        "i",
        "len",
        "newBuf",
        "sliceLen",
        "i",
        "val",
        "mul",
        "i",
        "val",
        "mul",
        "val",
        "mul",
        "i",
        "i",
        "byteLength",
        "mul",
        "val",
        "val",
        "val",
        "maxBytes",
        "mul",
        "i",
        "maxBytes",
        "i",
        "mul",
        "i",
        "j",
        "i",
        "j",
        "limit",
        "i",
        "mul",
        "sub",
        "limit",
        "i",
        "mul",
        "sub",
        "len",
        "i",
        "code",
        "i",
        "len",
        "INVALID_BASE64_RE",
        "codePoint",
        "length",
        "leadSurrogate",
        "i",
        "byteArray",
        "i",
        "c",
        "hi",
        "lo",
        "byteArray",
        "i",
        "i",
        "lookup",
        "revLookup",
        "Arr",
        "code",
        "i",
        "len",
        "i",
        "j",
        "l",
        "tmp",
        "placeHolders",
        "arr",
        "len",
        "L",
        "tmp",
        "output",
        "i",
        "start",
        "tmp",
        "len",
        "extraBytes",
        "output",
        "parts",
        "maxChunkLength",
        "i",
        "len2",
        "e",
        "m",
        "eLen",
        "eMax",
        "eBias",
        "nBits",
        "i",
        "d",
        "s",
        "e",
        "m",
        "c",
        "eLen",
        "eMax",
        "eBias",
        "rt",
        "i",
        "d",
        "s",
        "toString",
        "er",
        "handler",
        "len",
        "args",
        "i",
        "listeners",
        "err",
        "m",
        "fired",
        "position",
        "length",
        "i",
        "key",
        "listeners",
        "ret",
        "evlistener",
        "http",
        "https",
        "TempCtor",
        "process",
        "cachedSetTimeout",
        "cachedClearTimeout",
        "queue",
        "draining",
        "currentQueue",
        "queueIndex",
        "timeout",
        "len",
        "args",
        "i",
        "freeExports",
        "freeModule",
        "freeGlobal",
        "punycode",
        "maxInt",
        "tMin",
        "tMax",
        "skew",
        "damp",
        "initialBias",
        "initialN",
        "delimiter",
        "regexPunycode",
        "regexNonASCII",
        "regexSeparators",
        "errors",
        "baseMinusTMin",
        "floor",
        "stringFromCharCode",
        "key",
        "length",
        "result",
        "parts",
        "result",
        "labels",
        "encoded",
        "output",
        "counter",
        "length",
        "value",
        "extra",
        "output",
        "k",
        "output",
        "inputLength",
        "i",
        "n",
        "initialN",
        "bias",
        "initialBias",
        "basic",
        "j",
        "index",
        "oldi",
        "w",
        "k",
        "digit",
        "t",
        "baseMinusT",
        "n",
        "delta",
        "handledCPCount",
        "basicLength",
        "bias",
        "j",
        "m",
        "q",
        "k",
        "t",
        "currentValue",
        "output",
        "inputLength",
        "handledCPCountPlusOne",
        "baseMinusT",
        "qMinusT",
        "obj",
        "regexp",
        "maxKeys",
        "len",
        "i",
        "x",
        "idx",
        "kstr",
        "vstr",
        "k",
        "v",
        "isArray",
        "stringifyPrimitive",
        "ks",
        "isArray",
        "res",
        "i",
        "objectKeys",
        "res",
        "objectKeys",
        "keys",
        "processNextTick",
        "util",
        "Readable",
        "Writable",
        "keys",
        "v",
        "method",
        "i",
        "l",
        "Transform",
        "util",
        "processNextTick",
        "isArray",
        "EE",
        "EElistenerCount",
        "Stream",
        "Buffer",
        "bufferShim",
        "util",
        "debugUtil",
        "debug",
        "StringDecoder",
        "hasPrependListener",
        "Duplex",
        "hwm",
        "defaultHwm",
        "Duplex",
        "state",
        "state",
        "er",
        "e",
        "_e",
        "skipAdd",
        "MAX_HWM",
        "state",
        "nOrig",
        "n",
        "doRead",
        "ret",
        "er",
        "chunk",
        "state",
        "len",
        "src",
        "state",
        "doEnd",
        "endFn",
        "ondrain",
        "cleanedUp",
        "ret",
        "state",
        "state",
        "dests",
        "len",
        "_i",
        "i",
        "res",
        "state",
        "state",
        "state",
        "chunk",
        "state",
        "paused",
        "chunk",
        "ret",
        "events",
        "length",
        "stringMode",
        "objectMode",
        "ret",
        "buf",
        "c",
        "i",
        "l",
        "_buf",
        "cpy",
        "state",
        "i",
        "l",
        "i",
        "l",
        "Duplex",
        "util",
        "ts",
        "cb",
        "rs",
        "stream",
        "ts",
        "rs",
        "ts",
        "ws",
        "ts",
        "processNextTick",
        "asyncWrite",
        "util",
        "internalUtil",
        "Stream",
        "Buffer",
        "bufferShim",
        "Duplex",
        "hwm",
        "defaultHwm",
        "noDecode",
        "current",
        "Duplex",
        "er",
        "valid",
        "er",
        "state",
        "ret",
        "state",
        "state",
        "len",
        "ret",
        "last",
        "state",
        "sync",
        "cb",
        "finished",
        "entry",
        "l",
        "buffer",
        "holder",
        "count",
        "chunk",
        "encoding",
        "cb",
        "len",
        "state",
        "need",
        "_this",
        "entry",
        "cb",
        "buffer",
        "Buffer",
        "SlowBuffer",
        "MAX_LEN",
        "enc",
        "encoding",
        "_fill",
        "fill",
        "buf",
        "fillBuf",
        "flen",
        "i",
        "offset",
        "encodingOrOffset",
        "len",
        "length",
        "len",
        "args",
        "i",
        "warned",
        "val",
        "Stream",
        "ClientRequest",
        "extend",
        "statusCodes",
        "url",
        "http",
        "exports",
        "defaultProtocol",
        "protocol",
        "host",
        "port",
        "path",
        "req",
        "req",
        "xhr",
        "haveArrayBuffer",
        "haveSlice",
        "capability",
        "inherits",
        "response",
        "stream",
        "toArrayBuffer",
        "IncomingMessage",
        "rStates",
        "ClientRequest",
        "preferBinary",
        "lowerName",
        "opts",
        "headersObj",
        "body",
        "headers",
        "xhr",
        "status",
        "unsafeHeaders",
        "capability",
        "inherits",
        "stream",
        "rStates",
        "IncomingMessage",
        "header",
        "_i",
        "_it",
        "reader",
        "headers",
        "matches",
        "key",
        "mimeType",
        "charsetMatch",
        "xhr",
        "response",
        "newData",
        "buffer",
        "i",
        "reader",
        "Buffer",
        "arrayCopy",
        "len",
        "i",
        "Buffer",
        "isBufferEncoding",
        "StringDecoder",
        "charStr",
        "available",
        "charCode",
        "end",
        "end",
        "charCode",
        "size",
        "i",
        "c",
        "res",
        "cr",
        "buf",
        "enc",
        "punycode",
        "util",
        "protocolPattern",
        "portPattern",
        "simplePathPattern",
        "delims",
        "unwise",
        "autoEscape",
        "nonHostChars",
        "hostEndingChars",
        "hostnameMaxLen",
        "hostnamePartPattern",
        "hostnamePartStart",
        "unsafeProtocol",
        "hostlessProtocol",
        "slashedProtocol",
        "querystring",
        "u",
        "queryIndex",
        "splitter",
        "uSplit",
        "slashRegex",
        "rest",
        "url",
        "simplePath",
        "proto",
        "lowerProto",
        "slashes",
        "hostEnd",
        "i",
        "hec",
        "auth",
        "atSign",
        "i",
        "hec",
        "ipv6Hostname",
        "hostparts",
        "i",
        "l",
        "part",
        "newpart",
        "j",
        "k",
        "validParts",
        "notHost",
        "bit",
        "p",
        "h",
        "i",
        "l",
        "ae",
        "esc",
        "hash",
        "qm",
        "p",
        "s",
        "auth",
        "protocol",
        "pathname",
        "hash",
        "host",
        "query",
        "search",
        "rel",
        "result",
        "tkeys",
        "tk",
        "tkey",
        "rkeys",
        "rk",
        "rkey",
        "keys",
        "v",
        "k",
        "relPath",
        "p",
        "s",
        "isSourceAbs",
        "isRelAbs",
        "mustEndAbs",
        "removeAllDots",
        "mustEndAbs",
        "srcPath",
        "relPath",
        "psychotic",
        "authInHost",
        "last",
        "hasTrailingSlash",
        "up",
        "i",
        "isAbsolute",
        "authInHost",
        "host",
        "port",
        "hasOwnProperty",
        "target",
        "i",
        "source"
    ],
    "comments": [
        "for snapshot",
        "for insert",
        "for update",
        "for deletion",
        "precdence",
        "insert > delete > snapshot > update",
        "remote always wins",
        "cloning",
        "var tableNames = Object.keys(currentDelta);\n    for (var count = 0; count < tableNames.length; count++) {\n        if (currentDelta[tableNames[count]].i) {\n            newDelta[tableNames[count]] = {};\n            newDelta[tableNames[count]].i = currentDelta[tableNames[count]].i\n        }\n    }",
        "for deletion and update",
        "removing already deleted entry from newDelta",
        "checking if delete operation is empty",
        "stores structured data",
        "store list of tables",
        "converting all the filenames in number",
        "fetching deltas",
        "is deleted error ?? need to check in",
        "return callback(err);",
        "onchange event",
        "fetching current delta",
        "setting modified delta",
        "resetting table deltas",
        "getAndResolveConflictDelta(currentDelta, function(err, currentDelta) {\n            if (err) {\n                if (typeof cb == 'function') {\n                    cb(err);\n                }\n                return;\n            }",
        "clip size reached",
        "updateStructuedData(newStructuredData, currentDelta); // updating new data with current delta",
        "creating snapshot delta",
        "updating structured data with snapshot",
        "deleting files",
        "creating delete file list",
        "now saving currentDelta",
        "});",
        "resetting table deltas",
        "exist",
        "converting all the filenames in number",
        "does not exist ... creating dir",
        "initializing data store",
        "var Record = require('./record.js');",
        "checking if record is present in update delta",
        "Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.",
        "This number should be updated every year or so to keep the generated id short.",
        "To regenerate `new Date() - 0` and bump the version. Always bump the version!",
        "don't change unless we change the algos or REDUCE_TIME",
        "must be an integer and less than 16",
        "if you are using cluster or multiple servers use this to make each instance",
        "has a unique value for worker",
        "Note: I don't know if this is automatically set when using third",
        "party cluster solutions such as pm2.",
        "Counter is used when shortid is called multiple times in one second.",
        "Remember the last time shortid was called in case counter is needed.",
        "Export all other functions as properties of the generate function",
        "IE 11 uses window.msCrypto",
        "Found this seed-based random generator somewhere",
        "Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)",
        "conflict",
        "conflict occured !!!",
        "!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT",
        "eslint-disable no-proto",
        "typed array instances can be augmented",
        "chrome 9-10 lack `subarray`",
        "ie10 has broken `subarray`",
        "Return an augmented `Uint8Array` instance, for best performance",
        "Fallback: Return an object instance of the Buffer class",
        "Common case.",
        "not used by this implementation",
        "TODO: Legacy, not needed anymore. Remove in next major version.",
        "Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97",
        "Only pay attention to encoding if it's a string. This",
        "prevents accidentally sending in a number that would",
        "be interpretted as a start offset.",
        "this throws if `array` is not a valid ArrayBuffer",
        "Return an augmented `Uint8Array` instance, for best performance",
        "Fallback: Return an object instance of the Buffer class",
        "Note: cannot use `length < kMaxLength` here because that fails when",
        "length is NaN (which is otherwise coerced to zero.)",
        "eslint-disable-line eqeqeq",
        "Use a for loop to avoid recursion",
        "assume utf8",
        "No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only",
        "property of a typed array.",
        "This behaves neither like String nor Uint8Array in that we set start/end",
        "to their upper/lower bounds if the value passed is out of range.",
        "undefined is handled specially as per ECMA-262 6th Edition,",
        "Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.",
        "Return early if start > this.length. Done here to prevent potential uint32",
        "coercion fail below.",
        "Force coersion to uint32. This will also coerce falsey/NaN values to 0.",
        "The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect",
        "Buffer instances.",
        "Negative offsets start from the end of the buffer",
        "special case: looking for empty string/buffer always fails",
        "must be an even number of digits",
        "Buffer#write(string)",
        "Buffer#write(string, encoding)",
        "Buffer#write(string, offset[, length][, encoding])",
        "legacy write(string, encoding, offset, length) - remove in v0.13",
        "Warning: maxLength not taken into account in base64Write",
        "we did not generate a valid codePoint so insert a",
        "replacement char (U+FFFD) and advance only 1 byte",
        "encode to utf16 (surrogate pair dance)",
        "Based on http://stackoverflow.com/a/22747272/680742, the browser with",
        "the lowest limit is Chrome, with 0x10000 args.",
        "We go 1 magnitude less, for safety",
        "avoid extra slice()",
        "Decode in chunks to avoid \"call stack size exceeded\".",
        "copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)",
        "Copy 0 bytes; we're done",
        "Fatal error conditions",
        "Are we oob?",
        "descending copy from end",
        "ascending copy from start",
        "Usage:",
        "buffer.fill(number[, offset[, end]])",
        "buffer.fill(buffer[, offset[, end]])",
        "buffer.fill(string[, offset[, end]][, encoding])",
        "Handle string cases:",
        "Invalid ranges are not set to a default, so can range check early.",
        "HELPER FUNCTIONS",
        "================",
        "Node strips out invalid characters like \\n and \\t from the string, base64-js does not",
        "Node converts strings with length < 2 to ''",
        "Node allows for non-padded base64 strings (missing trailing ===), base64-js does not",
        "is surrogate component",
        "last char was a lead",
        "no lead yet",
        "unexpected trail",
        "unpaired lead",
        "valid lead",
        "2 leads in a row",
        "valid surrogate pair",
        "valid bmp char, but last char was a lead",
        "encode utf8",
        "Node's code seems to be doing this and not & 0x7F..",
        "eslint-disable-line no-self-compare",
        "the number of equal signs (place holders)",
        "if there are two placeholders, than the two characters before it",
        "represent one byte",
        "if there is only one, then the three characters before it represent 2 bytes",
        "this is just a cheap hack to not do indexOf twice",
        "base64 is 4/3 + up to two characters of the original data",
        "if there are placeholders, only get up to the last complete 4 chars",
        "if we have 1 byte left, pad 2 bytes",
        "must be multiple of 3",
        "go through the array every three bytes, we'll deal with trailing stuff later",
        "pad the end with zeros, but make sure to not forget the extra bytes",
        "Copyright Joyent, Inc. and other Node contributors.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a",
        "copy of this software and associated documentation files (the",
        "\"Software\"), to deal in the Software without restriction, including",
        "without limitation the rights to use, copy, modify, merge, publish,",
        "distribute, sublicense, and/or sell copies of the Software, and to permit",
        "persons to whom the Software is furnished to do so, subject to the",
        "following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included",
        "in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
        "OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN",
        "NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,",
        "DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR",
        "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE",
        "USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "Backwards-compat with node 0.10.x",
        "By default EventEmitters will print a warning if more than 10 listeners are",
        "added to it. This is a useful default which helps finding memory leaks.",
        "Obviously not all Emitters should be limited to 10. This function allows",
        "that to be increased. Set to zero for unlimited.",
        "If there is no 'error' event listener then throw.",
        "Unhandled 'error' event",
        "At least give some kind of context to the user",
        "fast cases",
        "slower",
        "To avoid recursion in the case that type === \"newListener\"! Before",
        "adding it to the listeners, first emit \"newListener\".",
        "Optimize the case of one listener. Don't need the extra array object.",
        "If we've already got an array, just append.",
        "Adding the second element, need to change to array.",
        "Check for listener leak",
        "not supported in IE 10",
        "emits a 'removeListener' event iff the listener was removed",
        "not listening for removeListener, no need to emit",
        "emit removeListener for all listeners on all events",
        "LIFO order",
        "implementation from standard node.js 'util' module",
        "old school shim for old browsers",
        "For Safari 5-7 (missing Object.prototype.constructor)",
        "shim for using process in browser",
        "cached from whatever global is present so that test runners that stub it",
        "don't break things.  But we need to wrap it in a try catch in case it is",
        "wrapped in strict mode code which doesn't define any globals.  It's inside a",
        "function because try/catches deoptimize in certain engines.",
        "v8 likes predictible objects",
        "empty string to avoid regexp issues",
        "! https://mths.be/punycode v1.4.1 by @mathias",
        "Detect free variables",
        "Highest positive signed 32-bit float value",
        "aka. 0x7FFFFFFF or 2^31-1",
        "Bootstring parameters",
        "0x80",
        "'\\x2D'",
        "Regular expressions",
        "unprintable ASCII chars + non-ASCII chars",
        "RFC 3490 separators",
        "Error messages",
        "Convenience shortcuts",
        "Temporary variable",
        "--------------------------------------------------------------------------",
        "In email addresses, only the domain name should be punycoded. Leave",
        "the local part (i.e. everything up to `@`) intact.",
        "Avoid `split(regex)` for IE8 compatibility. See #17.",
        "high surrogate, and there is a next character",
        "low surrogate",
        "unmatched surrogate; only append this code unit, in case the next",
        "code unit is the high surrogate of a surrogate pair",
        "0..25 map to ASCII a..z or A..Z",
        "26..35 map to ASCII 0..9",
        "no initialization",
        "Don't use UCS-2",
        "Cached calculation results",
        "Handle the basic code points: let `basic` be the number of input code",
        "points before the last delimiter, or `0` if there is none, then copy",
        "the first basic code points to the output.",
        "if it's not a basic code point",
        "Main decoding loop: start just after the last delimiter if any basic code",
        "points were copied; start at the beginning otherwise.",
        "no final expression",
        "`index` is the index of the next character to be consumed.",
        "Decode a generalized variable-length integer into `delta`,",
        "which gets added to `i`. The overflow checking is easier",
        "if we increase `i` as we go, then subtract off its starting",
        "value at the end to obtain `delta`.",
        "no condition",
        "`i` was supposed to wrap around from `out` to `0`,",
        "incrementing `n` each time, so we'll fix that now:",
        "Insert `n` at position `i` of the output",
        "`inputLength` will hold the number of code points in `input`.",
        "Cached calculation results",
        "Convert the input in UCS-2 to Unicode",
        "Cache the length",
        "Initialize the state",
        "Handle the basic code points",
        "`handledCPCount` is the number of code points that have been handled;",
        "`basicLength` is the number of basic code points.",
        "Finish the basic string - if it is not empty - with a delimiter",
        "Main encoding loop:",
        "All non-basic code points < n have been handled already. Find the next",
        "larger one:",
        "Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,",
        "but guard against overflow",
        "Represent delta as a generalized variable-length integer",
        "no condition",
        "--------------------------------------------------------------------------",
        "Define the public API",
        "Expose `punycode`",
        "Some AMD build optimizers, like r.js, check for specific condition patterns",
        "like the following:",
        "in Node.js, io.js, or RingoJS v0.8.0+",
        "in Narwhal or RingoJS v0.7.0-",
        "in Rhino or a web browser",
        "Copyright Joyent, Inc. and other Node contributors.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a",
        "copy of this software and associated documentation files (the",
        "\"Software\"), to deal in the Software without restriction, including",
        "without limitation the rights to use, copy, modify, merge, publish,",
        "distribute, sublicense, and/or sell copies of the Software, and to permit",
        "persons to whom the Software is furnished to do so, subject to the",
        "following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included",
        "in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
        "OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN",
        "NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,",
        "DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR",
        "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE",
        "USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "If obj.hasOwnProperty has been overridden, then calling",
        "obj.hasOwnProperty(prop) will break.",
        "See: https://github.com/joyent/node/issues/1707",
        "maxKeys <= 0 means that we should not limit keys count",
        "Copyright Joyent, Inc. and other Node contributors.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a",
        "copy of this software and associated documentation files (the",
        "\"Software\"), to deal in the Software without restriction, including",
        "without limitation the rights to use, copy, modify, merge, publish,",
        "distribute, sublicense, and/or sell copies of the Software, and to permit",
        "persons to whom the Software is furnished to do so, subject to the",
        "following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included",
        "in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
        "OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN",
        "NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,",
        "DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR",
        "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE",
        "USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "a duplex stream is just a stream that is both readable and writable.",
        "Since JS doesn't have multiple prototypal inheritance, this class",
        "prototypally inherits from Readable, and then parasitically from",
        "Writable.",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "the no-half-open enforcer",
        "if we allow half-open state, or if the writable side ended,",
        "then we're ok.",
        "no more data can be written.",
        "But allow more writes to happen in this tick.",
        "a passthrough stream.",
        "basically just the most minimal sort of Transform stream.",
        "Every written chunk gets output as-is.",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "This is a brutally ugly hack to make sure that our error handler",
        "is attached before any userland ones.  NEVER DO THIS. This is here",
        "only because this code needs to continue to work with older versions",
        "of Node.js that do not include the prependListener() method. The goal",
        "is to eventually remove this hack.",
        "object stream flag. Used to make read(n) ignore n and to",
        "make all the buffer merging and length checks go away",
        "the point at which it stops calling _read() to fill the buffer",
        "Note: 0 is a valid value, means \"don't call _read preemptively ever\"",
        "cast to ints.",
        "a flag to be able to tell if the onwrite cb is called immediately,",
        "or on a later tick.  We set this to true at first, because any",
        "actions that shouldn't happen until \"later\" should generally also",
        "not happen before the first write call.",
        "whenever we return null, then we set a flag to say",
        "that we're awaiting a 'readable' event emission.",
        "Crypto is kind of old and crusty.  Historically, its default string",
        "encoding is 'binary' so we have to make this configurable.",
        "Everything else in the universe uses 'utf8', though.",
        "when piping, we only care about 'readable' events that happen",
        "after read()ing all the bytes and not getting any pushback.",
        "the number of writers that are awaiting a drain event in .pipe()s",
        "if true, a maybeReadMore has been scheduled",
        "legacy",
        "Manually shove something into the read() buffer.",
        "This returns true if the highWaterMark has not been hit yet,",
        "similar to how Writable.write() returns true if you should",
        "write() some more.",
        "Unshift should *always* be something directly out of read()",
        "Don't add to the buffer if we've decoded to an empty string chunk and",
        "we're not in object mode",
        "if we want the data now, just emit it.",
        "update the buffer info.",
        "if it's past the high water mark, we can push in some more.",
        "Also, if we have no data yet, we can stand some",
        "more bytes.  This is to work around cases where hwm=0,",
        "such as the repl.  Also, if the push() triggered a",
        "readable event, and the user called read(largeNumber) such that",
        "needReadable was set, then we ought to push more, so that another",
        "'readable' event will be triggered.",
        "backwards compatibility.",
        "Don't raise the hwm > 8MB",
        "Get the next highest power of 2",
        "only flow one buffer at a time",
        "If we're asking for more than the target buffer level,",
        "then raise the water mark.  Bump up to the next highest",
        "power of 2, to prevent increasing it excessively in tiny",
        "amounts.",
        "don't have that much.  return null, unless we've ended.",
        "you can override either this method, or the async _read(n) below.",
        "if we're doing read(0) to trigger a readable event, but we",
        "already have a bunch of data in the buffer, then just trigger",
        "the 'readable' event and move on.",
        "if we've ended, and we're now clear, then finish it up.",
        "All the actual chunk generation logic needs to be",
        "synthetic stream cases, such as passthrough streams, _read",
        "may be a completely synchronous operation which may change",
        "the state of the read buffer, providing enough data when",
        "before there was *not* enough.",
        "",
        "So, the steps are:",
        "1. Figure out what the state of things will be after we do",
        "a read from the buffer.",
        "",
        "2. If that resulting state will trigger a _read, then call _read.",
        "Note that this may be asynchronous, or synchronous.  Yes, it is",
        "deeply ugly to write APIs this way, but that still doesn't mean",
        "that the Readable class should behave improperly, as streams are",
        "designed to be sync/async agnostic.",
        "Take note if the _read call is sync or async (ie, if the read call",
        "has returned yet), so that we know whether or not it's safe to emit",
        "'readable' etc.",
        "",
        "3. Actually pull the requested chunks out of the buffer and return.",
        "if we need a readable event, then we need to do some reading.",
        "if we currently have less than the highWaterMark, then also read some",
        "however, if we've ended, then there's no point, and if we're already",
        "reading, then it's unnecessary.",
        "if the length is currently zero, then we *need* a readable event.",
        "call internal read method",
        "If _read pushed data synchronously, then `reading` will be false,",
        "and we need to re-evaluate how much data we can return to the user.",
        "If we have nothing in the buffer, then we want to know",
        "as soon as we *do* get something into the buffer.",
        "If we tried to read() past the EOF, then emit end on the next tick.",
        "emit 'readable' now to make sure it gets picked up.",
        "Don't emit readable right away in sync mode, because this can trigger",
        "another read() call => stack overflow.  This way, it might trigger",
        "a nextTick recursion warning, but that's not so bad.",
        "at this point, the user has presumably seen the 'readable' event,",
        "and called read() to consume some data.  that may have triggered",
        "in turn another _read(n) call, in which case reading = true if",
        "it's in progress.",
        "However, if we're not ended, or reading, and the length < hwm,",
        "then go ahead and try to read some more preemptively.",
        "didn't get any data, stop spinning.",
        "abstract method.  to be overridden in specific implementation classes.",
        "call cb(er, data) where data is <= n in length.",
        "for virtual (non-string, non-buffer) streams, \"length\" is somewhat",
        "arbitrary, and perhaps not very meaningful.",
        "when the dest drains, it reduces the awaitDrain counter",
        "on the source.  This would be more elegant with a .once()",
        "handler in flow(), but adding and removing repeatedly is",
        "too slow.",
        "cleanup event handlers once the pipe is broken",
        "if the reader is waiting for a drain event from this",
        "specific writer, then it would cause it to never start",
        "flowing again.",
        "So, if this is awaiting a drain, then we just call it now.",
        "If we don't know, then assume that we are waiting for one.",
        "If the user unpiped during `dest.write()`, it is possible",
        "to get stuck in a permanently paused state if that write",
        "also returned false.",
        "=> Check whether `dest` is still a piping destination.",
        "if the dest has an error, then stop piping into it.",
        "however, don't suppress the throwing behavior for this.",
        "Make sure our error handler is attached before userland ones.",
        "Both close and finish should trigger unpipe, but only once.",
        "tell the dest that it's being piped to",
        "start the flow if it hasn't been started already.",
        "if we're not piping anywhere, then do nothing.",
        "just one destination.  most common case.",
        "passed in one, but it's not the right one.",
        "got a match.",
        "slow case. multiple pipe destinations.",
        "remove all.",
        "try to find the right one.",
        "set up data events if they are asked for",
        "Ensure readable listeners eventually get something",
        "If listening to data, and it has not explicitly been paused,",
        "then call resume to start the flow of data on the next tick.",
        "pause() and resume() are remnants of the legacy readable stream API",
        "If the user uses them, then switch into old mode.",
        "wrap an old-style stream as the async data source.",
        "This is *not* part of the readable stream interface.",
        "It is an ugly unfortunate mess of history.",
        "don't skip over falsy values in objectMode",
        "proxy all the other methods.",
        "important when wrapping filters and duplexes.",
        "proxy certain important events.",
        "when we try to consume some more bytes, simply unpause the",
        "underlying stream.",
        "exposed for testing purposes only.",
        "Pluck off n bytes from an array of buffers.",
        "Length is the combined lengths of all the buffers in the list.",
        "nothing in the list, definitely empty.",
        "read it all, truncate the array.",
        "read just some of it.",
        "just take a part of the first list item.",
        "slice is the same for buffers and strings.",
        "first list is a perfect match",
        "complex case.",
        "we have enough to cover it, but it spans past the first buffer.",
        "If we get here before consuming all the bytes, then that is a",
        "bug in node.  Should never happen.",
        "Check that we didn't get one last unshift.",
        "a transform stream is a readable/writable stream where you do",
        "something with the data.  Sometimes it's called a \"filter\",",
        "but that's not a great name for it, since that implies a thing where",
        "some bits pass through, and others are simply ignored.  (That would",
        "be a valid example of a transform, of course.)",
        "",
        "While the output is causally related to the input, it's not a",
        "necessarily symmetric or synchronous transformation.  For example,",
        "a zlib stream might take multiple plain-text writes(), and then",
        "emit a single compressed chunk some time in the future.",
        "",
        "Here's how this works:",
        "",
        "The Transform stream has all the aspects of the readable and writable",
        "stream classes.  When you write(chunk), that calls _write(chunk,cb)",
        "internally, and returns false if there's a lot of pending writes",
        "buffered up.  When you call read(), that calls _read(n) until",
        "there's enough pending readable data buffered up.",
        "",
        "In a transform stream, the written data is placed in a buffer.  When",
        "_read(n) is called, it transforms the queued up data, calling the",
        "buffered _write cb's as it consumes chunks.  If consuming a single",
        "written chunk would result in multiple output chunks, then the first",
        "outputted bit calls the readcb, and subsequent chunks just go into",
        "the read buffer, and will cause it to emit 'readable' if necessary.",
        "",
        "This way, back-pressure is actually determined by the reading side,",
        "since _read has to be called to start processing a new chunk.  However,",
        "a pathological inflate type of transform can cause excessive buffering",
        "here.  For example, imagine a stream where every byte of input is",
        "interpreted as an integer from 0-255, and then results in that many",
        "bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in",
        "1kb of data being output.  In this case, you could write a very small",
        "amount of input, and end up with a very large amount of output.  In",
        "such a pathological inflating mechanism, there'd be no way to tell",
        "the system to stop doing the transform.  A single 4MB write could",
        "cause the system to run out of memory.",
        "",
        "However, even in such a pathological case, only a single written chunk",
        "would be consumed, and then the rest would wait (un-transformed) until",
        "the results of the previous transformed chunk were consumed.",
        "<replacement>",
        "</replacement>",
        "when the writable side finishes, then flush out anything remaining.",
        "start out asking for a readable event once data is transformed.",
        "we have implemented the _read method, and done the other things",
        "that Readable wants before the first _read call, so unset the",
        "sync guard flag.",
        "This is the part where you do stuff!",
        "override this function in implementation classes.",
        "'chunk' is an input chunk.",
        "",
        "Call `push(newChunk)` to pass along transformed output",
        "to the readable side.  You may call 'push' zero or more times.",
        "",
        "Call `cb(err)` when you are done with this chunk.  If you pass",
        "an error, then that'll put the hurt on the whole operation.  If you",
        "never call cb(), then you'll never get another chunk.",
        "Doesn't matter what the args are here.",
        "_transform does all the work.",
        "That we got here means that the readable side wants more data.",
        "mark that we need a transform, so that any data that comes in",
        "will get processed, now that we've asked for it.",
        "if there's nothing in the write buffer, then that means",
        "that nothing more will ever be provided",
        "A bit simpler than readable streams.",
        "Implement an async ._write(chunk, encoding, cb), and it'll handle all",
        "the drain event emission and buffering.",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "object stream flag to indicate whether or not this stream",
        "contains buffers or objects.",
        "the point at which write() starts returning false",
        "Note: 0 is a valid value, means that we always return false if",
        "the entire buffer is not flushed immediately on write()",
        "cast to ints.",
        "at the start of calling end()",
        "when end() has been called, and returned",
        "when 'finish' is emitted",
        "should we decode strings into buffers before passing to _write?",
        "this is here so that some node-core streams can optimize string",
        "handling at a lower level.",
        "Crypto is kind of old and crusty.  Historically, its default string",
        "encoding is 'binary' so we have to make this configurable.",
        "Everything else in the universe uses 'utf8', though.",
        "not an actual buffer we keep track of, but a measurement",
        "of how much we're waiting to get pushed to some underlying",
        "socket or file.",
        "a flag to see when we're in the middle of a write.",
        "when true all writes will be buffered until .uncork() call",
        "a flag to be able to tell if the onwrite cb is called immediately,",
        "or on a later tick.  We set this to true at first, because any",
        "actions that shouldn't happen until \"later\" should generally also",
        "not happen before the first write call.",
        "a flag to know if we're processing previously buffered items, which",
        "may call the _write() callback in the same tick, so that we don't",
        "end up in an overlapped onwrite situation.",
        "the callback that's passed to _write(chunk,cb)",
        "the callback that the user supplies to write(chunk,encoding,cb)",
        "the amount that is being written when _write is called.",
        "number of pending user-supplied write callbacks",
        "this must be 0 before 'finish' can be emitted",
        "emit prefinish if the only thing we're waiting for is _write cbs",
        "This is relevant for synchronous Transform streams",
        "True if the error was already emitted and should not be thrown again",
        "count buffered requests",
        "allocate the first CorkedRequest, there is always",
        "one allocated and free to use, and we maintain at most two",
        "Writable ctor is applied to Duplexes, though they're not",
        "instanceof Writable, they're instanceof Readable.",
        "legacy.",
        "Otherwise people can pipe Writable streams, which is just wrong.",
        "TODO: defer error events consistently everywhere, not just the cb",
        "If we get something that is not a buffer, string, null, or undefined,",
        "and we're not in objectMode, then that's an error.",
        "Otherwise stream chunks are all considered to be of length=1, and the",
        "watermarks determine how many objects to keep in the buffer, rather than",
        "how many bytes or characters.",
        "Always throw error if a null is written",
        "if we are not in object mode then throw",
        "if it is not a buffer, string, or undefined.",
        "node::ParseEncoding() requires lower case.",
        "if we're already writing something, then just put this",
        "in the queue, and wait our turn.  Otherwise, call _write",
        "If we return false, then we need a drain event, so set that flag.",
        "we must ensure that previous needDrain will not be reset to false.",
        "Check if we're actually ready to finish, but don't emit yet",
        "<replacement>",
        "</replacement>",
        "Must force callback to be called on nextTick, so that we don't",
        "emit 'drain' before the write() consumer gets the 'false' return",
        "value, and has a chance to attach a 'drain' listener.",
        "if there's something in the buffer waiting, then process it",
        "Fast case, write everything using _writev()",
        "doWrite is almost always async, defer these to save a bit of time",
        "as the hot path ends with doWrite",
        "Slow case, write chunks one-by-one",
        "if we didn't call the onwrite immediately, then",
        "it means that we need to wait until it does.",
        "also, that means that the chunk and cb are currently",
        "being processed, so move the buffer counter past them.",
        ".end() fully uncorks",
        "ignore unnecessary end() calls.",
        "It seems a linked list but it is not",
        "there will be only 2 of these for each stream",
        "Copyright Joyent, Inc. and other Node contributors.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a",
        "copy of this software and associated documentation files (the",
        "\"Software\"), to deal in the Software without restriction, including",
        "without limitation the rights to use, copy, modify, merge, publish,",
        "distribute, sublicense, and/or sell copies of the Software, and to permit",
        "persons to whom the Software is furnished to do so, subject to the",
        "following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included",
        "in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
        "OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN",
        "NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,",
        "DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR",
        "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE",
        "USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "NOTE: These type checking functions intentionally don't use `instanceof`",
        "because it is fragile and can be easily faked with `Object.create()`.",
        "ES6 symbol",
        "accessing global.localStorage can trigger a DOMException in sandboxed iframes",
        "hack to fix a circular dependency issue when used with browserify",
        "Normally, the page is loaded from http or https, so not specifying a protocol",
        "will result in a (valid) protocol-relative url. However, this won't work if",
        "the protocol is something else, like 'file:'",
        "Necessary for IPv6 addresses",
        "This may be a relative url. The browser should always be able to interpret it correctly.",
        "Also valid opts.auth, opts.mode",
        "If location.host is empty, e.g. if this page/worker was loaded",
        "from a Blob, then use example.com to avoid an error",
        "For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.",
        "Safari 7.1 appears to have fixed this bug.",
        "These next two tests unavoidably show warnings in Chrome. Since fetch will always",
        "be used if it's available, just return false for these to avoid the warnings.",
        "Help gc",
        "If streaming is a high priority but binary compatibility and",
        "the accuracy of the 'content-type' header aren't",
        "If streaming is more important than preserving the 'content-type' header",
        "Use binary if text streaming may corrupt data or the content-type header, or for speed",
        "This check is not necessary, but it prevents warnings from browsers about setting unsafe",
        "headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but",
        "http-browserify did it, so I will too.",
        "get utf8 string",
        "Can't set responseType on really old browsers",
        "Necessary for streaming in Firefox, since xhr.response is ONLY defined",
        "in onprogress, not in onreadystatechange with xhr.readyState = 3",
        "Currently, there isn't a way to truly abort a fetch.",
        "If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27",
        "Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method",
        "Fake the 'close' event, but only once 'end' fires",
        "The nextTick is necessary to prevent the 'request' module from causing an infinite loop",
        "backwards compatible version of for (<item> of <iterable>):",
        "for (var <item>,_i,_it = <iterable>[Symbol.iterator](); <item> = (_i = _it.next()).value,!_i.done;)",
        "TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed",
        "best guess",
        "For IE9",
        "This fails in IE8",
        "Falls through in IE8",
        "This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4",
        "take whole",
        "reader.onerror = ??? // TODO: this",
        "The ms-stream case handles end separately in reader.onload()",
        "If the buffer is backed by a Uint8Array, a faster version will work",
        "If the buffer isn't a subarray, return the underlying ArrayBuffer",
        "Otherwise we need to get a proper copy",
        "This is the slow version that will work with any Buffer",
        "implementation (even in old browsers)",
        "Copyright Joyent, Inc. and other Node contributors.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a",
        "copy of this software and associated documentation files (the",
        "\"Software\"), to deal in the Software without restriction, including",
        "without limitation the rights to use, copy, modify, merge, publish,",
        "distribute, sublicense, and/or sell copies of the Software, and to permit",
        "persons to whom the Software is furnished to do so, subject to the",
        "following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included",
        "in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
        "OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN",
        "NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,",
        "DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR",
        "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE",
        "USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "StringDecoder provides an interface for efficiently splitting a series of",
        "buffers into a series of JS strings without breaking apart multi-byte",
        "characters. CESU-8 is handled as part of the UTF-8 encoding.",
        "",
        "@TODO Handling all encodings inside a single object makes it very difficult",
        "to reason about this code, so it should be split up in the future.",
        "@TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code",
        "points as used by CESU-8.",
        "CESU-8 represents each of Surrogate Pair by 3-bytes",
        "UTF-16 represents each of Surrogate Pair by 2-bytes",
        "Base-64 stores 3 bytes in 4 chars, and pads the remainder.",
        "Enough space to store all bytes of a single character. UTF-8 needs 4",
        "bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).",
        "Number of bytes received for the current incomplete multi-byte character.",
        "Number of bytes expected for the current incomplete multi-byte character.",
        "write decodes the given buffer and returns it as JS string that is",
        "guaranteed to not contain any partial multi-byte characters. Any partial",
        "character found at the end of the buffer is buffered up, and will be",
        "returned when calling write again with the remaining bytes.",
        "",
        "Note: Converting a Buffer containing an orphan surrogate to a String",
        "currently works, but converting a String to a Buffer (via `new Buffer`, or",
        "Buffer#write) will replace incomplete surrogates with the unicode",
        "replacement character. See https://codereview.chromium.org/121173009/ .",
        "if our last write ended with an incomplete multibyte character",
        "determine how many remaining bytes this buffer has to offer for this char",
        "add the new bytes to the char buffer",
        "still not enough chars in this buffer? wait for more ...",
        "remove bytes belonging to the current character from the buffer",
        "get the character that was split",
        "CESU-8: lead surrogate (D800-DBFF) is also the incomplete character",
        "if there are no more bytes in this buffer, just emit our char",
        "determine and set charLength / charReceived",
        "buffer the incomplete character bytes we got",
        "CESU-8: lead surrogate (D800-DBFF) is also the incomplete character",
        "or just emit the charStr",
        "detectIncompleteChar determines if there is an incomplete UTF-8 character at",
        "the end of the given buffer. If so, it sets this.charLength to the byte",
        "length that character, and sets this.charReceived to the number of bytes",
        "that are available for this character.",
        "determine how many bytes we have to check at the end of this buffer",
        "Figure out if one of the last i bytes of our buffer announces an",
        "incomplete char.",
        "See http://en.wikipedia.org/wiki/UTF-8#Description",
        "110XXXXX",
        "1110XXXX",
        "11110XXX",
        "Copyright Joyent, Inc. and other Node contributors.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a",
        "copy of this software and associated documentation files (the",
        "\"Software\"), to deal in the Software without restriction, including",
        "without limitation the rights to use, copy, modify, merge, publish,",
        "distribute, sublicense, and/or sell copies of the Software, and to permit",
        "persons to whom the Software is furnished to do so, subject to the",
        "following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included",
        "in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
        "OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN",
        "NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,",
        "DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR",
        "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE",
        "USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "Reference: RFC 3986, RFC 1808, RFC 2396",
        "define these here so at least they only have to be",
        "compiled once on the first module load.",
        "Special case for a simple path URL",
        "RFC 2396: characters reserved for delimiting URLs.",
        "We actually just auto-escape these.",
        "RFC 2396: characters not allowed for various reasons.",
        "Allowed by RFCs, but cause of XSS attacks.  Always escape these.",
        "Characters that are never ever allowed in a hostname.",
        "Note that any invalid chars are also handled, but these",
        "are the ones that are *expected* to be seen, so we fast-path",
        "them.",
        "protocols that can allow \"unsafe\" and \"unwise\" chars.",
        "protocols that never have a hostname.",
        "protocols that always contain a // bit.",
        "Copy chrome, IE, opera backslash-handling behavior.",
        "Back slashes before the query string get converted to forward slashes",
        "See: https://code.google.com/p/chromium/issues/detail?id=25916",
        "trim before proceeding.",
        "This is to support parse stuff like \"  http://foo.com  \\n\"",
        "Try fast path regexp",
        "figure out if it's got a host",
        "user@server is *always* interpreted as a hostname, and url",
        "resolution will treat //foo/bar as host=foo,path=bar because that's",
        "how the browser resolves relative URLs.",
        "there's a hostname.",
        "the first instance of /, ?, ;, or # ends the host.",
        "",
        "If there is an @ in the hostname, then non-host chars *are* allowed",
        "to the left of the last @ sign, unless some host-ending character",
        "comes *before* the @-sign.",
        "URLs are obnoxious.",
        "",
        "ex:",
        "http://a@b@c/ => user:a@b host:c",
        "http://a@b?@c => user:a host:c path:/?@c",
        "v0.12 TODO(isaacs): This is not quite how Chrome does things.",
        "Review our test case against browsers more comprehensively.",
        "find the first instance of any hostEndingChars",
        "at this point, either we have an explicit point where the",
        "auth portion cannot go past, or the last @ char is the decider.",
        "atSign can be anywhere.",
        "atSign must be in auth portion.",
        "http://a@b/c@d => host:b auth:a path:/c@d",
        "Now we have a portion which is definitely the auth.",
        "Pull that off.",
        "the host is the remaining to the left of the first non-host char",
        "if we still have not hit it, then the entire thing is a host.",
        "pull out port.",
        "we've indicated that there is a hostname,",
        "so even if it's empty, it has to be present.",
        "if hostname begins with [ and ends with ]",
        "assume that it's an IPv6 address.",
        "validate a little.",
        "we replace non-ASCII char with a temporary placeholder",
        "we need this to make sure size of hostname is not",
        "broken by replacing non-ASCII by nothing",
        "we test again with ASCII char only",
        "hostnames are always lower case.",
        "IDNA Support: Returns a punycoded representation of \"domain\".",
        "It only converts parts of the domain name that",
        "have non-ASCII characters, i.e. it doesn't matter if",
        "you call it with a domain that already is ASCII-only.",
        "strip [ and ] from the hostname",
        "the host field still retains them, though",
        "now rest is set to the post-host stuff.",
        "chop off any delim chars.",
        "First, make 100% sure that any \"autoEscape\" chars get",
        "escaped, even if encodeURIComponent doesn't think they",
        "need to be.",
        "chop off from the tail first.",
        "got a fragment string.",
        "no query string, but parseQueryString still requested",
        "to support http.request",
        "finally, reconstruct the href based on what has been validated.",
        "format a parsed object into a url string",
        "ensure it's an object, and not a string url.",
        "If it's an obj, this is a no-op.",
        "this way, you can call url_format() on strings",
        "to clean up potentially wonky urls.",
        "only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.",
        "unless they had them to begin with.",
        "hash is always overridden, no matter what.",
        "even href=\"\" will remove it.",
        "if the relative url is empty, then there's nothing left to do here.",
        "hrefs like //foo/bar always cut to the protocol.",
        "take everything except the protocol from relative",
        "urlParse appends trailing / to urls like http://www.example.com",
        "if it's a known url protocol, then changing",
        "the protocol does weird things",
        "first, if it's not file:, then we MUST have a host,",
        "and if there was a path",
        "to begin with, then we MUST have a path.",
        "if it is file:, then the host is dropped,",
        "because that's known to be hostless.",
        "anything else is assumed to be absolute.",
        "to support http.request",
        "if the url is a non-slashed url, then relative",
        "links like ../.. should be able",
        "to crawl up to the hostname, as well.  This is strange.",
        "result.protocol has already been set by now.",
        "Later on, put the first path part into the host field.",
        "it's absolute.",
        "fall through to the dot-handling below.",
        "it's relative",
        "throw away the existing file, and take the new path instead.",
        "just pull out the search.",
        "like href='?foo'.",
        "Put this after the other two cases because it simplifies the booleans",
        "occationaly the auth can get stuck only in host",
        "this especially happens in cases like",
        "url.resolveObject('mailto:local1@domain1', 'local2@domain2')",
        "to support http.request",
        "no path at all.  easy.",
        "we've already handled the other stuff above.",
        "to support http.request",
        "if a url ENDs in . or .., then it must get a trailing slash.",
        "however, if it ends in anything else non-slashy,",
        "then it must NOT get a trailing slash.",
        "strip single dots, resolve double dots to parent dir",
        "if the path tries to go above the root, `up` ends up > 0",
        "if the path is allowed to go above the root, restore leading ..s",
        "put the host back",
        "occationaly the auth can get stuck only in host",
        "this especially happens in cases like",
        "url.resolveObject('mailto:local1@domain1', 'local2@domain2')",
        "to support request.http"
    ],
    "docstrings": [
        "* Inserts will always go",
        "* Delete always wins",
        "* For snapshot (snapshot has higher precedence than update)",
        "* For Update (remote always wins)",
        "* lookup shuffled letter\n * @param index\n * @returns {string}",
        "* Decode the id to get the version and worker\n * Mainly for debugging and testing.\n * @param id - the shortid-generated id.",
        "* Generate unique id\n * Returns string id",
        "* Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.",
        "* Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.",
        "*\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet",
        "* return a random number based on a seed\n * @param seed\n * @returns {number}",
        "* If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.",
        "* Export kMaxLength after typed array support is determined.",
        "* The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.",
        "* Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n *",
        "* Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n *",
        "* Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n *",
        "* Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.",
        "* Need to make sure that buffer isn't trying to write out of bounds.",
        "* Determine if an object is Buffer\n *\n * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * License:  MIT\n *\n * `npm install is-buffer`",
        "* The `punycode` object.\n\t * @name punycode\n\t * @type Object",
        "* A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.",
        "* A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.",
        "* A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.",
        "* Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.",
        "* Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).",
        "* Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.",
        "* Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.",
        "* Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private",
        "* Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.",
        "* Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.",
        "* Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.",
        "* Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.",
        "* A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String",
        "* An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object",
        "*below* the call to _read.  The reason is that in certain",
        "* Module exports.",
        "* Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public",
        "* Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private",
        "* Checks if xhr.status is readable and non-zero, indicating no error.\n * Even though the spec says it should be available in readyState 3,\n * accessing it throws an exception in IE8"
    ],
    "functions": [
        "s",
        "updateStructuedData",
        "updateStructuredDataWithSnapshot",
        "resolveConflict",
        "QueueHandler",
        "next",
        "run",
        "increaseMinorVersion",
        "increaseMajorVersion",
        "increaseVersion",
        "Datastore",
        "getAndResolveConflictDelta",
        "getFile",
        "poll",
        "saveData",
        "commitData",
        "getFile",
        "Table",
        "reset",
        "setCharacters",
        "characters",
        "setSeed",
        "shuffle",
        "getShuffled",
        "lookup",
        "decode",
        "encode",
        "generate",
        "seed",
        "worker",
        "characters",
        "isShortId",
        "randomByte",
        "getNextValue",
        "setSeed",
        "DropboxStorage",
        "getHeaders",
        "processResponse",
        "listFolder",
        "lisfFolderContinue",
        "listFolderCallback",
        "listFolderCallback",
        "checkForDeleteOps",
        "typedArraySupport",
        "kMaxLength",
        "createBuffer",
        "Buffer",
        "assertSize",
        "alloc",
        "allocUnsafe",
        "fromString",
        "fromArrayLike",
        "fromArrayBuffer",
        "fromObject",
        "SlowBuffer",
        "byteLength",
        "slowToString",
        "swap",
        "arrayIndexOf",
        "read",
        "hexWrite",
        "utf8Write",
        "asciiWrite",
        "binaryWrite",
        "base64Write",
        "ucs2Write",
        "base64Slice",
        "utf8Slice",
        "decodeCodePointsArray",
        "asciiSlice",
        "binarySlice",
        "hexSlice",
        "utf16leSlice",
        "checkOffset",
        "checkInt",
        "objectWriteUInt16",
        "objectWriteUInt32",
        "checkIEEE754",
        "writeFloat",
        "writeDouble",
        "base64clean",
        "stringtrim",
        "toHex",
        "utf8ToBytes",
        "asciiToBytes",
        "utf16leToBytes",
        "base64ToBytes",
        "blitBuffer",
        "isnan",
        "init",
        "toByteArray",
        "tripletToBase64",
        "encodeChunk",
        "fromByteArray",
        "EventEmitter",
        "g",
        "isFunction",
        "isNumber",
        "isObject",
        "isUndefined",
        "cleanUpNextTick",
        "drainQueue",
        "Item",
        "noop",
        "error",
        "mapDomain",
        "ucs2decode",
        "ucs2encode",
        "basicToDigit",
        "digitToBasic",
        "adapt",
        "decode",
        "encode",
        "toUnicode",
        "toASCII",
        "hasOwnProperty",
        "Duplex",
        "onend",
        "onEndNT",
        "forEach",
        "PassThrough",
        "prependListener",
        "ReadableState",
        "Readable",
        "readableAddChunk",
        "needMoreData",
        "computeNewHighWaterMark",
        "howMuchToRead",
        "chunkInvalid",
        "onEofChunk",
        "emitReadable",
        "emitReadable_",
        "maybeReadMore",
        "maybeReadMore_",
        "onunpipe",
        "onend",
        "cleanup",
        "ondata",
        "onerror",
        "onclose",
        "onfinish",
        "unpipe",
        "pipeOnDrain",
        "nReadingNextTick",
        "resume",
        "resume_",
        "flow",
        "fromList",
        "endReadable",
        "endReadableNT",
        "forEach",
        "indexOf",
        "TransformState",
        "afterTransform",
        "Transform",
        "done",
        "nop",
        "WriteReq",
        "WritableState",
        "Writable",
        "writeAfterEnd",
        "validChunk",
        "decodeChunk",
        "writeOrBuffer",
        "doWrite",
        "onwriteError",
        "onwriteStateUpdate",
        "onwrite",
        "afterWrite",
        "onwriteDrain",
        "clearBuffer",
        "needFinish",
        "prefinish",
        "finishMaybe",
        "endWritable",
        "CorkedRequest",
        "isArray",
        "isBoolean",
        "isNull",
        "isNullOrUndefined",
        "isNumber",
        "isString",
        "isSymbol",
        "isUndefined",
        "isRegExp",
        "isObject",
        "isDate",
        "isError",
        "isFunction",
        "isPrimitive",
        "objectToString",
        "nextTick",
        "deprecate",
        "deprecated",
        "config",
        "checkTypeSupport",
        "isFunction",
        "decideMode",
        "statusValid",
        "read",
        "assertEncoding",
        "passThroughWrite",
        "utf16DetectIncompleteChar",
        "base64DetectIncompleteChar",
        "Url",
        "urlParse",
        "urlFormat",
        "urlResolve",
        "urlResolveObject",
        "extend"
    ],
    "classes": []
}