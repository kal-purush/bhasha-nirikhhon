{
    "identifiers": [
        "arrays",
        "maxAbsoluteDifference",
        "java",
        "util",
        "A",
        "ans",
        "n",
        "A",
        "size",
        "max1",
        "MIN_VALUE",
        "max2",
        "MIN_VALUE",
        "min1",
        "MAX_VALUE",
        "min2",
        "MAX_VALUE",
        "i",
        "i",
        "n",
        "i",
        "max1",
        "max",
        "max1",
        "A",
        "get",
        "i",
        "i",
        "max2",
        "max",
        "max2",
        "A",
        "get",
        "i",
        "i",
        "min1",
        "min",
        "min1",
        "A",
        "get",
        "i",
        "i",
        "min2",
        "min",
        "min2",
        "A",
        "get",
        "i",
        "i",
        "ans",
        "max",
        "ans",
        "max2",
        "min2",
        "ans",
        "max",
        "ans",
        "max1",
        "min1",
        "ans",
        "i",
        "j",
        "i",
        "j",
        "abs",
        "i",
        "abs",
        "j",
        "i",
        "j",
        "i",
        "j",
        "j",
        "i",
        "args",
        "X",
        "X",
        "add",
        "X",
        "add",
        "X",
        "add",
        "minStepsInInfiniteGrid",
        "minStepsInInfiniteGrid",
        "maxArr",
        "X"
    ],
    "literals": [],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* You are given an array of N integers, A1, A2 ,…, AN. Return maximum value of f(i, j) for all 1 ≤ i, j ≤ N.\n * f(i, j) is defined as |A[i] - A[j]| + |i - j|, where |x| denotes absolute value of x.\n * f(i, j) = |A[i] - A[j]| + |i - j| can be written in 4 ways (Since we are looking at max value,\n * we don’t even care if the value becomes negative as long as we are also covering the max value in some way).\n * \t\t\t(A[i] + i) - (A[j] + j)\n * \t\t\t-(A[i] - i) + (A[j] - j)\n * \t\t\t(A[i] - i) - (A[j] - j)\n * \t\t\t(-A[i] - i) + (A[j] + j) = -(A[i] + i) + (A[j] + j)\n * \t Note that case 1 and 4 are equivalent and so are case 2 and 3.\n * We can construct two arrays with values: A[i] + i and A[i] - i.\n * Then, for above 2 cases, we find the maximum value possible.\n * For that, we just have to store minimum and maximum values of expressions A[i] + i and A[i] - i for all i.\n *\n *\n * Fix it for A : [ -70, -64, -6, -56, 64, 61, -57, 16, 48, -98 ]\n *\n * C++ code\n *int Solution::maxArr(vector<int> &A) {\n int ans = 0, n = A.size();\n\n int max1 = INT_MIN, max2 = INT_MIN;\n int min1 = INT_MAX, min2 = INT_MAX;\n\n for(int i = 0; i < n; i++){\n max1 = max(max1, A[i] + i);\n max2 = max(max2, A[i] - i);\n min1 = min(min1, A[i] + i);\n min2 = min(min2, A[i] - i);\n }\n ans = max(ans, max2 - min2);\n ans = max(ans, max1 - min1);\n return ans;\n }\n *"
    ],
    "functions": [
        "maxArr",
        "max",
        "min",
        "main"
    ],
    "classes": [
        "MaxAbsoluteDifference"
    ]
}