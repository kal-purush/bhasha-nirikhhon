{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "unicode_literals",
        "logging",
        "os",
        "pipes",
        "sys",
        "threading",
        "subprocess",
        "PIPE",
        "STDOUT",
        "Popen",
        "jupyter_contrib_core",
        "testing_utils",
        "get_logger",
        "nose",
        "plugins",
        "skip",
        "SkipTest",
        "tornado",
        "gen",
        "tornado",
        "ioloop",
        "IOLoop",
        "traitlets",
        "traitlets",
        "config",
        "application",
        "LevelFormatter",
        "nbextensions_test_base",
        "get_wrapped_logger",
        "wrap_logger_handlers",
        "test_nbextensions_configurator",
        "ConfiguratorTest",
        "os",
        "name",
        "SkipTest",
        "sys",
        "version_info",
        "SkipTest",
        "jupyterhub",
        "ImportError",
        "SkipTest",
        "jupyterhub",
        "auth",
        "Authenticator",
        "jupyterhub",
        "spawner",
        "LocalProcessSpawner",
        "jupyterhub",
        "tests",
        "mocking",
        "MockHub",
        "public_url",
        "user_url",
        "jupyterhub",
        "utils",
        "random_port",
        "LocalProcessSpawner",
        "wrap_logger_handlers",
        "LocalProcessSpawner",
        "_log_default",
        "a",
        "kw",
        "env",
        "user",
        "name",
        "env",
        "update",
        "k",
        "v",
        "k",
        "v",
        "os",
        "environ",
        "items",
        "k",
        "env",
        "gen",
        "coroutine",
        "ip",
        "user",
        "server",
        "ip",
        "user",
        "server",
        "random_port",
        "get_env",
        "cmd",
        "extend",
        "cmd",
        "cmd",
        "extend",
        "get_args",
        "log",
        "info",
        "join",
        "pipes",
        "quote",
        "s",
        "s",
        "cmd",
        "Popen",
        "cmd",
        "env",
        "env",
        "preexec_fn",
        "make_preexec_fn",
        "user",
        "name",
        "start_new_session",
        "stdout",
        "PIPE",
        "stderr",
        "STDOUT",
        "proc",
        "pid",
        "threading",
        "target",
        "_read_proc_stderr",
        "name",
        "thrd",
        "start",
        "get_logger",
        "user",
        "name",
        "logr",
        "handlers",
        "setFormatter",
        "logging",
        "Formatter",
        "fmt",
        "wrap_logger_handlers",
        "logr",
        "line",
        "iter",
        "proc",
        "stdout",
        "readline",
        "logr",
        "info",
        "line",
        "decode",
        "strip",
        "TestSpawner",
        "debug",
        "Authenticator",
        "wrap_logger_handlers",
        "Authenticator",
        "_log_default",
        "gen",
        "coroutine",
        "handler",
        "data",
        "data",
        "data",
        "username",
        "password",
        "username",
        "_default_whitelist",
        "ConfiguratorTest",
        "classmethod",
        "cls",
        "user_url",
        "cls",
        "user",
        "cls",
        "app",
        "classmethod",
        "cls",
        "get_wrapped_logger",
        "cls",
        "cls",
        "log",
        "handlers",
        "setFormatter",
        "LevelFormatter",
        "fmt",
        "datefmt",
        "cls",
        "_setup_patches",
        "cls",
        "pre_server_setup",
        "cls",
        "log",
        "info",
        "cls",
        "init_webdriver",
        "cls",
        "log",
        "info",
        "MockHub",
        "instance",
        "log_datefmt",
        "authenticator_class",
        "MockAuthenticator",
        "spawner_class",
        "TestSpawner",
        "cls",
        "app",
        "wrap_logger_handlers",
        "cls",
        "app",
        "log",
        "cls",
        "app",
        "start",
        "cls",
        "_server_cleanup",
        "error_msg",
        "cls",
        "log",
        "info",
        "public_url",
        "cls",
        "app",
        "cls",
        "driver",
        "get",
        "login_url",
        "next",
        "iter",
        "MockAuthenticator",
        "_default_whitelist",
        "cls",
        "wait_for_selector",
        "send_keys",
        "name",
        "cls",
        "wait_for_selector",
        "send_keys",
        "name",
        "cls",
        "wait_for_selector",
        "click",
        "cls",
        "wait_for_selector",
        "cls",
        "app",
        "users",
        "name",
        "user",
        "running",
        "IOLoop",
        "io_loop",
        "make_current",
        "io_loop",
        "run_sync",
        "user",
        "spawn",
        "cls",
        "_server_cleanup",
        "error_msg",
        "classmethod",
        "cls",
        "error_msg",
        "error_msg",
        "cls",
        "log",
        "error",
        "error_msg",
        "cls",
        "app",
        "stop",
        "cls",
        "app",
        "cleanup",
        "classmethod",
        "cls",
        "cls",
        "_server_cleanup",
        "cls",
        "app",
        "__class__",
        "clear_instance",
        "ptch",
        "cls",
        "jupyter_patches",
        "ptch",
        "stop",
        "func",
        "cls",
        "removal_funcs",
        "func",
        "cls",
        "_print_logs_on_failure"
    ],
    "literals": [
        "'nt'",
        "'dos'",
        "'jupyterhub is not supported on Windows.'",
        "'jupyterhub requires Python version 3.3 or above.'",
        "'could not import jupyterhub, so skipping jupyterhub tests'",
        "'log'",
        "'USER'",
        "'JUPYTER_CONFIG_DIR'",
        "'JUPYTER_DATA_DIR'",
        "'JUPYTER_RUNTIME_DIR'",
        "'HOME'",
        "'SHELL'",
        "\"Spawning %s\"",
        "' '",
        "'_read_proc_stderr'",
        "'    %(message)s'",
        "b''",
        "'utf-8'",
        "'\\n'",
        "'nandy'",
        "'aela'",
        "'log'",
        "'username'",
        "'password'",
        "'whitelist'",
        "'[%(levelname)1.1s '",
        "'%(asctime)s.%(msecs).03d '",
        "'%(name)s %(module)s:%(lineno)d]'",
        "'%(message)s'",
        "'%H:%M:%S'",
        "'starting webdriver'",
        "'Starting jupyterhub server app thread'",
        "\"%H:%M:%S\"",
        "'failed to start jupyterhub app'",
        "'Logging into hub-spawned single-user notebook server.'",
        "'login'",
        "'#username_input'",
        "'#password_input'",
        "'#login_submit'",
        "'#header'",
        "'failed to start/login to single-user server'"
    ],
    "variables": [
        "env",
        "ip",
        "port",
        "env",
        "cmd",
        "proc",
        "pid",
        "_read_proc_stderr_thread",
        "thrd",
        "thrd",
        "daemon",
        "logr",
        "logr",
        "default_value",
        "_default_whitelist",
        "username",
        "password",
        "uses_jupyterhub",
        "_install_user",
        "cls",
        "_failure_occurred",
        "cls",
        "log",
        "cls",
        "app",
        "log",
        "login_url",
        "cls",
        "uname",
        "name",
        "user",
        "cls",
        "user",
        "io_loop",
        "cls",
        "_failure_occurred"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "run some basic checks to see if jupyterhub is supported on this platform",
        "noqa",
        "skip the setuid stuff",
        "copy select environment variables.",
        "don't forward signals",
        "just use equality for testing",
        "attribute used for filtering nose tests",
        "we can't patch jupyter paths for single-user server running in a",
        "subprocess, but we can patch environment variables passed to the",
        "subprocess, so do a user install, to take advantage of the $HOME variable",
        "flag for logging",
        "need to start jupyterhub app before calling super, as the super will",
        "wait for the page to load",
        "single-user page loaded",
        "do cleanup explicitly as it's only registered using atexit"
    ],
    "docstrings": [
        "\"\"\"Mock spawner, skipping user-switching that'd need root permissions.\"\"\"",
        "\"\"\"wrap loggers for this application.\"\"\"",
        "\"\"\"Start the process. Overridden in order to capture output.\"\"\"",
        "\"\"\"\n    Dummy authentication. Returns the username if login is successful.\n\n    Returns None otherwise.\n    \"\"\"",
        "\"\"\"wrap loggers for this application.\"\"\"",
        "\"\"\"Base class for nbextensions test cases running through jupyterhub.\"\"\""
    ],
    "functions": [
        "_log_default",
        "make_preexec_fn",
        "user_env",
        "start",
        "_read_proc_stderr",
        "_log_default",
        "authenticate",
        "get_default_whitelist",
        "base_url",
        "setup_class",
        "_server_cleanup",
        "teardown_class"
    ],
    "classes": [
        "TestSpawner",
        "MockAuthenticator",
        "JupyterHubConfiguratorTest"
    ]
}