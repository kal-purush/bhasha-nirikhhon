{
    "identifiers": [
        "sys",
        "os",
        "path",
        "listdir",
        "path",
        "dirname",
        "path",
        "realpath",
        "path",
        "abspath",
        "path",
        "join",
        "CURRENT_DIR",
        "run_directory",
        "source_type",
        "source_type",
        "path",
        "join",
        "PARENT_DIR",
        "run_directory",
        "source_type",
        "path",
        "join",
        "PARENT_DIR",
        "run_directory",
        "path",
        "exists",
        "data_dir",
        "some_corpus_file",
        "listdir",
        "data_dir",
        "path",
        "isfile",
        "path",
        "join",
        "data_dir",
        "some_corpus_file",
        "open",
        "path",
        "join",
        "data_dir",
        "some_corpus_file",
        "infile",
        "infile",
        "read",
        "join",
        "input_data",
        "new_file_data",
        "input_data",
        "data_dir",
        "sys",
        "exit"
    ],
    "literals": [
        "'../..'",
        "'corpus'",
        "'data'",
        "'ontology'",
        "'ontologies'",
        "''",
        "'rb'",
        "''",
        "'Could not find the data/ontology directory: '"
    ],
    "variables": [
        "CURRENT_DIR",
        "PARENT_DIR",
        "data_dir",
        "data_dir",
        "input_data",
        "new_file_data",
        "input_data"
    ],
    "comments": [
        "TODO: SUPER FRAGILE for this to be in a utils file especially if we move this",
        "drama",
        "Figure out data directory",
        "Below grabs all of the files in the current model directory and builds a single string corpus out of them.  This",
        "avoids the sub-directories if they exist."
    ],
    "docstrings": [
        "\"\"\"\n    Reads a set of source files in an input_data_dir and generates a single string from those input files.\n    :param run_directory: The subject name of the test. For example 'run1' or 'medical', etc.\n    :type run_directory: str\n    :param source_type: Either 'corpus' or 'ontology'.\n    :type source_type: str\n    :return: concatenated string of all the files in the source directory\n    :rtype: str\n    \"\"\""
    ],
    "functions": [
        "read_source"
    ],
    "classes": []
}