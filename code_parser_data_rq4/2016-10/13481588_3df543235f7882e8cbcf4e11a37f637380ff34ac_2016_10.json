{
    "identifiers": [
        "com",
        "cloudbees",
        "hudson",
        "plugins",
        "folder",
        "views",
        "com",
        "cloudbees",
        "hudson",
        "plugins",
        "folder",
        "AbstractFolder",
        "edu",
        "umd",
        "cs",
        "findbugs",
        "annotations",
        "CheckForNull",
        "edu",
        "umd",
        "cs",
        "findbugs",
        "annotations",
        "NonNull",
        "hudson",
        "ExtensionPoint",
        "hudson",
        "model",
        "View",
        "hudson",
        "views",
        "ViewsTabBar",
        "java",
        "util",
        "NonNull",
        "NonNull",
        "views",
        "CheckForNull",
        "CheckForNull",
        "name",
        "NonNull",
        "NonNull",
        "tabBar"
    ],
    "literals": [],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* The MIT License\n *\n * Copyright 2016 CloudBees, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.",
        "* Responsible for holding the view configuration of an {@link AbstractFolder}. Each {@link AbstractFolder} concrete\n * type should define its view configuration holder by returning the implementaion from\n * {@link AbstractFolder#newFolderViewHolder()}\n *\n * Use-cases:\n * <ul>\n * <li>\n * Where the {@link AbstractFolder} permits the views to be configured by the user, use a\n * {@link DefaultFolderViewHolder}\n * </li>\n * <li>\n * Where the {@link AbstractFolder} has a fixed set of pre-configured views, the plugin can provide\n * a custom implementation that returns the fixed set of views.\n * </li>\n * </ul>\n *\n * @since FIXME",
        "* Returns the list of views. If {@link #isViewsModifiable()} then this list is modifiable.\n     *\n     * @return the list of views.",
        "* Changes the list of {@link View}s. May be a no-op if {@link #isViewsModifiable()} returns {@code false}.\n     *\n     * @param views the new list of {@link View}s.\n     * @see #isViewsModifiable()",
        "* Returns {@code true} if the list of views is modifiable.\n     *\n     * @return {@code true} if the list of views is modifiable.",
        "* Returns the {@link View#getViewName()} of the primary view or {@code null} if the first view should be primary.\n     *\n     * @return the {@link View#getViewName()} of the primary view or {@code null} if the first view should be primary.",
        "* Changes the primary {@link View}. May be a no-op if {@link #isPrimaryModifiable()} returns {@code false}.\n     *\n     * @param name the {@link View#getViewName()} of the primary {@link View} of {@code null} to use the first view.\n     * @see #isPrimaryModifiable()",
        "* Returns {@code true} if the primary {@link View} is modifiable.\n     *\n     * @return {@code true} if the primary {@link View} is modifiable.",
        "* Returns the {@link ViewsTabBar}.\n     *\n     * @return the {@link ViewsTabBar}.",
        "* Changes the {@link ViewsTabBar}. May be a no-op if {@link #isTabBarModifiable()} returns {@code false}.\n     *\n     * @param tabBar the new {@link ViewsTabBar}.\n     * @see #isTabBarModifiable()",
        "* Returns {@code true} if the {@link ViewsTabBar} is modifiable.\n     *\n     * @return {@code true} if the {@link ViewsTabBar} is modifiable."
    ],
    "functions": [
        "getViews",
        "setViews",
        "isViewsModifiable",
        "getPrimaryView",
        "setPrimaryView",
        "isPrimaryModifiable",
        "ViewsTabBar",
        "getTabBar",
        "setTabBar",
        "isTabBarModifiable"
    ],
    "classes": [
        "AbstractFolderViewHolder"
    ]
}