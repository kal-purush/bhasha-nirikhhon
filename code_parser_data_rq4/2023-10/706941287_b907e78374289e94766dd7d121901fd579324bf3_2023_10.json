{
    "identifiers": [
        "de",
        "sage",
        "util",
        "com",
        "google",
        "gson",
        "JsonObject",
        "com",
        "google",
        "gson",
        "JsonParser",
        "okhttp3",
        "org",
        "jetbrains",
        "annotations",
        "Contract",
        "org",
        "jetbrains",
        "annotations",
        "NotNull",
        "org",
        "jetbrains",
        "annotations",
        "java",
        "io",
        "java",
        "net",
        "java",
        "util",
        "logging",
        "Logger",
        "NotNull",
        "repoName",
        "NotNull",
        "version",
        "NotNull",
        "uri",
        "logger",
        "autoNotify",
        "NotNull",
        "client",
        "token",
        "latestVersion",
        "updateAvailable",
        "updateMessage",
        "NotNull",
        "author",
        "NotNull",
        "name",
        "NotNull",
        "version",
        "autoNotify",
        "logger",
        "repoName",
        "name",
        "autoNotify",
        "autoNotify",
        "version",
        "removePrefix",
        "version",
        "logger",
        "logger",
        "autoNotify",
        "logger",
        "client",
        "newBuilder",
        "build",
        "uri",
        "author",
        "repoName",
        "e",
        "e",
        "NotNull",
        "author",
        "NotNull",
        "name",
        "NotNull",
        "version",
        "autoNotify",
        "logger",
        "NotNull",
        "token",
        "repoName",
        "name",
        "version",
        "removePrefix",
        "version",
        "token",
        "token",
        "logger",
        "logger",
        "autoNotify",
        "autoNotify",
        "autoNotify",
        "logger",
        "client",
        "newBuilder",
        "build",
        "uri",
        "author",
        "repoName",
        "e",
        "e",
        "request",
        "url",
        "uri",
        "toURL",
        "build",
        "token",
        "request",
        "headers",
        "newBuilder",
        "add",
        "add",
        "token",
        "add",
        "build",
        "client",
        "newCall",
        "request",
        "enqueue",
        "version",
        "client",
        "newCall",
        "request",
        "enqueue",
        "version",
        "logger",
        "latestVersion",
        "updateAvailable",
        "updateMessage",
        "logger",
        "info",
        "repoName",
        "latestVersion",
        "get",
        "version",
        "get",
        "message",
        "updateMessage",
        "replace",
        "repoName",
        "replace",
        "latestVersion",
        "get",
        "replace",
        "version",
        "get",
        "logger",
        "info",
        "message",
        "NotNull",
        "NotNull",
        "latest",
        "latestVersion",
        "latest",
        "compareTo",
        "latest",
        "updateAvailable",
        "updateAvailable",
        "autoNotify",
        "notifyStatus",
        "Contract",
        "pure",
        "NotNull",
        "NotNull",
        "version",
        "version",
        "replaceFirst",
        "usingVersion",
        "version",
        "usingVersion",
        "version",
        "Override",
        "NotNull",
        "call",
        "NotNull",
        "response",
        "response",
        "code",
        "latestURL",
        "response",
        "headers",
        "get",
        "latestURL",
        "urlParts",
        "latestURL",
        "split",
        "latest",
        "removePrefix",
        "urlParts",
        "urlParts",
        "length",
        "compareVersions",
        "usingVersion",
        "latest",
        "Override",
        "NotNull",
        "call",
        "NotNull",
        "ex",
        "ex",
        "usingVersion",
        "version",
        "usingVersion",
        "version",
        "Override",
        "NotNull",
        "call",
        "NotNull",
        "response",
        "response",
        "code",
        "response",
        "body",
        "responseBody",
        "response",
        "body",
        "bodyJson",
        "JsonParser",
        "parseString",
        "responseBody",
        "tagParts",
        "bodyJson",
        "get",
        "getAsString",
        "split",
        "preRelease",
        "bodyJson",
        "get",
        "getAsBoolean",
        "latest",
        "removePrefix",
        "tagParts",
        "tagParts",
        "length",
        "preRelease",
        "compareVersions",
        "usingVersion",
        "latest",
        "Override",
        "NotNull",
        "call",
        "NotNull",
        "ex",
        "ex",
        "message",
        "updateMessage",
        "message",
        "updateAvailable",
        "latestVersion",
        "latestVersion",
        "get"
    ],
    "literals": [
        "\"No logger provided with autoNotify set to true. Please provide logger!\"",
        "\"https://github.com/\"",
        "\"/\"",
        "\"/releases/latest\"",
        "\"No logger provided with autoNotify set to true. Please provide logger!\"",
        "\"https://api.github.com/repos/\"",
        "\"/\"",
        "\"/releases/latest\"",
        "\"Accept\"",
        "\"application/vnd.github+json\"",
        "\"Authorization\"",
        "\"Bearer \"",
        "\"X-GitHub-Api-Version\"",
        "\"2022-11-28\"",
        "\"There is a newer version of \"",
        "\" (\"",
        "\")! Current version: \"",
        "\"@name\"",
        "\"@latestVersion\"",
        "\"@currentVersion\"",
        "\"There is no version to compare to! Probably do to no check done before.\"",
        "\"There is no logger provided!\"",
        "\"There is an unknown api error!\"",
        "\"^v\"",
        "\"\"",
        "\"Could not connect to this repo. This could be due to the repository being private, if so try using the other version method with the github api, or it does not exists.\"",
        "\"Location\"",
        "\"No version found!\"",
        "\"/\"",
        "\"There was an error during the execution of the request\"",
        "\"Could not get data from this repo. This could be due to the repository not existing or a wrong token with no read permission on the releases.\"",
        "\"tag_name\"",
        "\"/\"",
        "\"prerelease\"",
        "\"There was an error during the execution of the request\""
    ],
    "variables": [
        "repoName",
        "version",
        "uri",
        "logger",
        "autoNotify",
        "client",
        "token",
        "latestVersion",
        "updateMessage",
        "usingVersion",
        "usingVersion"
    ],
    "comments": [],
    "docstrings": [
        "* Update checker for github repositories\n *\n * @author SageSphinx63920",
        "* Creates the update checker object used for checking if there is a release with a newer version on <strong>ONLY public github repositories</strong>. Use the github api checker for private repositories\n     *\n     * @param author     author of the repo\n     * @param name       name of the repo\n     * @param version    currently used version\n     * @param autoNotify <i>recommended</i> automatically sends a message if there is an update available with the logger. <i>manually doing this could create problems with the async http call</i>\n     * @param logger     logger to send the update message",
        "* Creates the update checker object used for checking if there is a release with a newer version on <strong>public or private github repositories using the github api </strong>\n     *\n     * @param author     author of the repo\n     * @param name       name of the repo\n     * @param version    currently used version\n     * @param autoNotify <i>recommended</i> automatically sends a message if there is an update available with the logger. <i>manually doing this could create problems with the async http call</i>\n     * @param logger     logger to send the update message\n     * @param token      github access token with access to the repository's releases",
        "* Checks is there is an update. This runs async http requests, so it could take some time to update the status.\n     * Use #notifyStatus or #getUpdateStatus to do any more actions\n     *\n     * @throws IOException throws if there is a problem with okhttp",
        "* Compares the versions and sets the update status\n     *\n     * @param using  version that is currently used\n     * @param latest latest available version",
        "* Removes the version prefix\n     *\n     * @param version the original version string\n     * @return the version string without prefix",
        "* Callback used for public github repos",
        "* Creates a callback\n         *\n         * @param version the current used version",
        "* Creates a callback\n         *\n         * @param version the current used version",
        "* Sets an own update message that gets send if there is an update available.\n     * Placeholder:\n     * \\@name = repository name\n     * \\@latestVersion = latest version string\n     * \\@currentVersion = current version string\n     *\n     * @param message message that gets send if null uses the default message",
        "* Gets if there is an update available\n     *\n     * @return true if there is an update available",
        "* Returns the latest version string\n     *\n     * @return returns null if there is no latest version probably due to no check done before, else the entire version string"
    ],
    "functions": [
        "UpdateChecker",
        "UpdateChecker",
        "check",
        "notifyStatus",
        "compareVersions",
        "removePrefix",
        "GithubPublicCallback",
        "onResponse",
        "onFailure",
        "GithubAPICallback",
        "onResponse",
        "onFailure",
        "setUpdateMessage",
        "getUpdateStatus",
        "getLatestVersion"
    ],
    "classes": [
        "UpdateChecker",
        "GithubPublicCallback",
        "GithubAPICallback"
    ]
}