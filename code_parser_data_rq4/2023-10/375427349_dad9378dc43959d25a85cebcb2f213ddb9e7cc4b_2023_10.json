{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Text",
        "Threading",
        "Tasks",
        "UnityEngine",
        "Epic",
        "OnlineServices",
        "Epic",
        "OnlineServices",
        "P2P",
        "PlayEveryWare",
        "EpicOnlineServices",
        "Samples",
        "IEOSSubManager",
        "ProductUserId",
        "ChatWithFriendData",
        "UNITY_EDITOR",
        "UnityEditor",
        "PlayModeStateChange",
        "modeChange",
        "modeChange",
        "UnityEditor",
        "PlayModeStateChange",
        "ExitingPlayMode",
        "P2PHandle",
        "UNITY_EDITOR",
        "UnityEditor",
        "EditorApplication",
        "playModeStateChanged",
        "OnPlayModeChanged",
        "UnityEditor",
        "EditorApplication",
        "playModeStateChanged",
        "OnPlayModeChanged",
        "P2PHandle",
        "EOSManager",
        "Instance",
        "GetEOSPlatformInterface",
        "GetP2PInterface",
        "ChatDataCache",
        "ProductUserId",
        "ChatWithFriendData",
        "ChatDataCacheDirty",
        "dataDump",
        "i",
        "i",
        "dataDump",
        "Add",
        "i",
        "UNITY_EDITOR",
        "EOSHighFrequencyPeer2PeerManager",
        "UnityEditor",
        "EditorApplication",
        "playModeStateChanged",
        "OnPlayModeChanged",
        "timer",
        "Time",
        "deltaTime",
        "timer",
        "refreshRate",
        "timer",
        "SendMessageHF",
        "SendMessage",
        "owner",
        "GetCurrentFriendId",
        "dataDump",
        "ToString",
        "ProductUserId",
        "ChatWithFriendData",
        "ChatDataCache",
        "ChatDataCache",
        "ChatDataCache",
        "ChatDataCacheDirty",
        "QueryNATTypeOptions",
        "P2PHandle",
        "QueryNATType",
        "options",
        "OnRefreshNATTypeFinished",
        "GetNATTypeOptions",
        "P2PHandle",
        "GetNATType",
        "options",
        "NATType",
        "natType",
        "result",
        "Result",
        "NotFound",
        "NATType",
        "Unknown",
        "result",
        "Result",
        "Success",
        "Debug",
        "LogErrorFormat",
        "result",
        "NATType",
        "Unknown",
        "natType",
        "RefreshNATType",
        "SubscribeToConnectionRequest",
        "UnsubscribeFromConnectionRequests",
        "OnQueryNATTypeCompleteInfo",
        "data",
        "data",
        "ResultCode",
        "Result",
        "Success",
        "Debug",
        "LogErrorFormat",
        "data",
        "ResultCode",
        "Debug",
        "Log",
        "ProductUserId",
        "friendId",
        "message",
        "friendId",
        "IsValid",
        "Debug",
        "LogError",
        "IsNullOrEmpty",
        "message",
        "Debug",
        "LogError",
        "ChatEntry",
        "isOwnEntry",
        "Message",
        "message",
        "ChatDataCache",
        "TryGetValue",
        "friendId",
        "ChatWithFriendData",
        "chatData",
        "chatData",
        "ChatLines",
        "Enqueue",
        "chatEntry",
        "ChatDataCacheDirty",
        "ChatWithFriendData",
        "friendId",
        "newChatData",
        "ChatLines",
        "Enqueue",
        "chatEntry",
        "ChatDataCache",
        "Add",
        "friendId",
        "newChatData",
        "ChatDataCacheDirty",
        "SocketId",
        "SocketName",
        "SendPacketOptions",
        "LocalUserId",
        "EOSManager",
        "Instance",
        "GetProductUserId",
        "RemoteUserId",
        "friendId",
        "SocketId",
        "socketId",
        "AllowDelayedDelivery",
        "Channel",
        "Reliability",
        "PacketReliability",
        "ReliableOrdered",
        "Data",
        "ArraySegment",
        "Encoding",
        "UTF8",
        "GetBytes",
        "message",
        "P2PHandle",
        "SendPacket",
        "options",
        "result",
        "Result",
        "Success",
        "Debug",
        "LogErrorFormat",
        "result",
        "Debug",
        "Log",
        "P2PHandle",
        "ReceivePacketOptions",
        "LocalUserId",
        "EOSManager",
        "Instance",
        "GetProductUserId",
        "MaxDataSizeBytes",
        "RequestedChannel",
        "GetNextReceivedPacketSizeOptions",
        "LocalUserId",
        "EOSManager",
        "Instance",
        "GetProductUserId",
        "RequestedChannel",
        "P2PHandle",
        "GetNextReceivedPacketSize",
        "getNextReceivedPacketSizeOptions",
        "nextPacketSizeBytes",
        "nextPacketSizeBytes",
        "ArraySegment",
        "data",
        "P2PHandle",
        "ReceivePacket",
        "options",
        "ProductUserId",
        "peerId",
        "SocketId",
        "socketId",
        "outChannel",
        "dataSegment",
        "bytesWritten",
        "result",
        "Result",
        "NotFound",
        "result",
        "Result",
        "Success",
        "Debug",
        "LogFormat",
        "peerId",
        "socketId",
        "Encoding",
        "UTF8",
        "GetString",
        "data",
        "peerId",
        "IsValid",
        "Debug",
        "LogErrorFormat",
        "ConnectionNotificationId",
        "SocketId",
        "SocketName",
        "AddNotifyPeerConnectionRequestOptions",
        "LocalUserId",
        "EOSManager",
        "Instance",
        "GetProductUserId",
        "SocketId",
        "socketId",
        "ConnectionNotificationId",
        "P2PHandle",
        "AddNotifyPeerConnectionRequest",
        "options",
        "OnIncomingConnectionRequest",
        "ConnectionNotificationId",
        "Debug",
        "Log",
        "ConnectionNotificationId",
        "P2PHandle",
        "RemoveNotifyPeerConnectionRequest",
        "ConnectionNotificationId",
        "ConnectionNotificationId",
        "OnIncomingConnectionRequestInfo",
        "data",
        "data",
        "SocketId",
        "SocketName",
        "Equals",
        "Debug",
        "LogError",
        "SocketId",
        "SocketName",
        "AcceptConnectionOptions",
        "LocalUserId",
        "EOSManager",
        "Instance",
        "GetProductUserId",
        "RemoteUserId",
        "data",
        "RemoteUserId",
        "SocketId",
        "socketId",
        "P2PHandle",
        "AcceptConnection",
        "options",
        "result",
        "Result",
        "Success",
        "Debug",
        "LogErrorFormat",
        "result"
    ],
    "literals": [
        "\"EOS P2PNAT GetNatType: error while retrieving NAT Type: {0}\"",
        "\"P2p (OnRefreshNATTypeFinished): RefreshNATType error: {0}\"",
        "\"P2p (OnRefreshNATTypeFinished): RefreshNATType Completed\"",
        "\"EOS P2PNAT SendMessage: bad input data: account id is wrong.\"",
        "\"EOS P2PNAT SendMessage: bad input data message is empty.\"",
        "\"CHAT\"",
        "\"EOS P2PNAT SendMessage: error while sending data, code: {0}\"",
        "\"EOS P2PNAT SendMessage: Message successfully sent to user.\"",
        "\"Message received: peerId={0}, socketId={1}, data={2}\"",
        "\"EOS P2PNAT HandleReceivedMessages: ProductUserId peerId is not valid!\"",
        "\"CHAT\"",
        "\"EOS P2PNAT SubscribeToConnectionRequests: could not subscribe, bad notification id returned.\"",
        "\"CHAT\"",
        "\"P2p (OnIncomingConnectionRequest): bad socket id\"",
        "\"CHAT\"",
        "\"P2p (OnIncomingConnectionRequest): error while accepting connection, code: {0}\""
    ],
    "variables": [
        "P2PInterface",
        "P2PHandle",
        "ConnectionNotificationId",
        "ChatDataCache",
        "ChatDataCacheDirty",
        "UIPeer2PeerParticleController",
        "ParticleController",
        "Transform",
        "parent",
        "UIHighFrequencyPeer2PeerMenu",
        "owner",
        "refreshRate",
        "timer",
        "sendActive",
        "dataDump",
        "i",
        "options",
        "options",
        "Result",
        "result",
        "ChatEntry",
        "chatEntry",
        "ChatWithFriendData",
        "newChatData",
        "SocketId",
        "socketId",
        "SendPacketOptions",
        "options",
        "Result",
        "result",
        "ReceivePacketOptions",
        "options",
        "getNextReceivedPacketSizeOptions",
        "data",
        "dataSegment",
        "Result",
        "result",
        "SocketId",
        "socketId",
        "AddNotifyPeerConnectionRequestOptions",
        "options",
        "SocketId",
        "socketId",
        "AcceptConnectionOptions",
        "options",
        "Result",
        "result"
    ],
    "comments": [
        "Struct <c>ChatEntry</c> is used to store cached chat data in <c>UIPeer2PeerMenu</c>.",
        "</summary>",
        "prevent attempts to call native EOS code while exiting play mode, which crashes the editor",
        "if (data == null)",
        "{",
        "Debug.LogError(\"P2P (OnRefreshNATTypeFinished): data is null\");",
        "return;",
        "}",
        "Update Cache",
        "Send Message",
        "else if (message.type == messageType.coordinatesMessage)\n            {\n\n                string rawData = (\"m\" + message.xPos.ToString() + \",\" + message.yPos.ToString());\n                // Send Message\n                SocketId socketId = new SocketId()\n                {\n                    SocketName = \"CHAT\"\n                };\n\n                SendPacketOptions options = new SendPacketOptions()\n                {\n                    LocalUserId = EOSManager.Instance.GetProductUserId(),\n                    RemoteUserId = friendId,\n                    SocketId = socketId,\n                    AllowDelayedDelivery = true,\n                    Channel = 0,\n                    Reliability = PacketReliability.ReliableOrdered,\n                    Data = new ArraySegment<byte>(Encoding.UTF8.GetBytes(rawData))\n                };\n\n                Result result = P2PHandle.SendPacket(ref options);\n\n                if (result != Result.Success)\n                {\n                    Debug.LogErrorFormat(\"EOS P2PNAT SendMessage: error while sending data, code: {0}\", result);\n                    return;\n                }\n            }\n\n            else\n            {\n                Debug.Log(\"EOS P2PNAT SendMessage: Message content was not valid.\");\n            }",
        "no packets",
        "Log the message",
        "string message = System.Text.Encoding.UTF8.GetString(data);\n\n                    ChatEntry newMessage = new ChatEntry()\n                    {\n                        isOwnEntry = false,\n                        Message = message.Substring(1)\n                    };\n\n                    if (ChatDataCache.TryGetValue(peerId, out ChatWithFriendData chatData))\n                    {\n                        // Update existing chat\n                        chatData.ChatLines.Enqueue(newMessage);\n\n                        ChatDataCacheDirty = true;\n                        return peerId;\n                    }\n                    else\n                    {\n                        ChatWithFriendData newChat = new ChatWithFriendData(peerId);\n                        newChat.ChatLines.Enqueue(newMessage);\n\n                        // New Chat Request\n                        ChatDataCache.Add(peerId, newChat);\n\n                        return peerId;\n                    }\n                }\n            \n                else if (message.StartsWith(\"m\"))\n                {\n                    message = message.Substring(1);\n\n                    string[] coords = message.Split(',');\n                    int xPos = Int32.Parse(coords[0]);\n                    int yPos = Int32.Parse(coords[1]);\n                    Debug.Log(\"EOS P2PNAT HandleReceivedMessages:  Mouse position Recieved at \" + xPos + \", \" + yPos);\n\n                    ParticleController.SpawnParticles(xPos, yPos, parent);\n\n                    return peerId;\n                }\n\n\n\n                else\n                {\n                    Debug.LogErrorFormat(\"EOS P2PNAT HandleReceivedMessages: error while reading data, code: {0}\", result);\n                    return null;\n                }",
        "check to prevent warnings when done unnecessarily during p2p startup",
        "if (data == null)",
        "{",
        "Debug.LogError(\"P2P (OnIncomingConnectionRequest): data is null\");",
        "return;",
        "}"
    ],
    "docstrings": [
        "* Copyright (c) 2021 PlayEveryWare\n* \n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n* \n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n* \n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.",
        "<summary>"
    ],
    "functions": [
        "OnPlayModeChanged",
        "EOSHighFrequencyPeer2PeerManager",
        "P2PUpdate",
        "SendMessageHF",
        "GetChatDataCache",
        "RefreshNATType",
        "NATType",
        "GetNATType",
        "OnLoggedIn",
        "OnLoggedOut",
        "OnRefreshNATTypeFinished",
        "SendMessage",
        "ProductUserId",
        "HandleReceivedMessages",
        "SubscribeToConnectionRequest",
        "UnsubscribeFromConnectionRequests",
        "OnIncomingConnectionRequest"
    ],
    "classes": [
        "EOSHighFrequencyPeer2PeerManager"
    ]
}