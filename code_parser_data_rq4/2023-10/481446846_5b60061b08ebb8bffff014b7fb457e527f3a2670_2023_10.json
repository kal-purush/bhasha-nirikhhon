{
    "identifiers": [
        "NUnit",
        "Framework",
        "Collections",
        "Generic",
        "Linq",
        "Text",
        "Threading",
        "Tasks",
        "Playnite",
        "Tests",
        "Extensions",
        "TestFixture",
        "Test",
        "Assert",
        "AreEqual",
        "GetJaroWinklerSimilarityIgnoreCase",
        "Assert",
        "AreNotEqual",
        "GetJaroWinklerSimilarity",
        "Assert",
        "AreEqual",
        "GetJaroWinklerSimilarityIgnoreCase",
        "Assert",
        "AreEqual",
        "GetJaroWinklerSimilarity",
        "Assert",
        "AreEqual",
        "GetJaroWinklerSimilarity",
        "Assert",
        "AreEqual",
        "GetJaroWinklerSimilarityIgnoreCase",
        "Test",
        "Assert",
        "AreEqual",
        "GetLevenshteinDistance",
        "Assert",
        "AreNotEqual",
        "GetLevenshteinDistance",
        "Assert",
        "AreEqual",
        "GetLevenshteinDistance",
        "Assert",
        "AreEqual",
        "GetLevenshteinDistanceIgnoreCase",
        "Assert",
        "AreEqual",
        "GetLevenshteinDistance",
        "Assert",
        "AreEqual",
        "GetLevenshteinDistance",
        "Assert",
        "AreEqual",
        "GetLevenshteinDistance",
        "Assert",
        "AreEqual",
        "GetLevenshteinDistance",
        "Assert",
        "AreEqual",
        "Length",
        "GetLevenshteinDistance",
        "Assert",
        "AreEqual",
        "GetLevenshteinDistance",
        "Assert",
        "AreEqual",
        "GetLevenshteinDistance",
        "Assert",
        "AreEqual",
        "GetLevenshteinDistance",
        "Assert",
        "AreEqual",
        "GetLevenshteinDistance",
        "i",
        "i",
        "baseString",
        "i",
        "Assert",
        "AreEqual",
        "i",
        "baseString",
        "GetLevenshteinDistance",
        "toMatchString",
        "stringPrefix",
        "stringPrefix",
        "stringPrefix",
        "stringPrefix",
        "stringPrefix",
        "stringPrefix",
        "stringPrefix",
        "stringPrefix",
        "stringPrefix",
        "stringsList",
        "OrderBy",
        "Length",
        "stringsList",
        "OrderBy",
        "GetLevenshteinDistance",
        "stringPrefix",
        "Assert",
        "IsTrue",
        "sortedList",
        "SequenceEqual",
        "sortedLevenshteinList"
    ],
    "literals": [
        "\"hello\"",
        "\"hello\"",
        "\"hello\"",
        "\"Hello\"",
        "\"hello\"",
        "\"Hello\"",
        "\"kiwi\"",
        "\"banana\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"hello\"",
        "\"hello\"",
        "\"hello\"",
        "\"Hello\"",
        "\"hello\"",
        "\"Hello\"",
        "\"hello\"",
        "\"Hello\"",
        "\"car\"",
        "\"cars\"",
        "\"a car\"",
        "\"car\"",
        "\"car\"",
        "\"car a\"",
        "\"\"",
        "\"\"",
        "\"abc\"",
        "\"\"",
        "\"abc\"",
        "\"abc\"",
        "\"def\"",
        "\"hello\"",
        "\"world\"",
        "\"flaw\"",
        "\"lawn\"",
        "\"kitten\"",
        "\"sitting\"",
        "\"my string\"",
        "\"apple\""
    ],
    "variables": [
        "baseString",
        "i",
        "toMatchString",
        "stringPrefix",
        "stringsList",
        "sortedList",
        "sortedLevenshteinList"
    ],
    "comments": [
        "Empty strings means exact match",
        "Empty string and non empty string means distance is length of other string",
        "Each added character increases the distance by one",
        "Since Levenshtein calculates number of different characters, it's possible to use the",
        "length to verify that the ordering is correct if all use the same base string"
    ],
    "docstrings": [],
    "functions": [
        "JeroWrenklinSimilarityTests",
        "LevenshteinDistanceTests"
    ],
    "classes": [
        "StringExtensionsTests"
    ]
}