{
    "identifiers": [
        "bio",
        "terra",
        "workspace",
        "service",
        "workspace",
        "flight",
        "cloud",
        "aws",
        "bio",
        "terra",
        "aws",
        "resource",
        "discovery",
        "Environment",
        "bio",
        "terra",
        "aws",
        "resource",
        "discovery",
        "LandingZone",
        "bio",
        "terra",
        "aws",
        "resource",
        "discovery",
        "Metadata",
        "bio",
        "terra",
        "cloudres",
        "aws",
        "ec2",
        "EC2SecurityGroupCow",
        "bio",
        "terra",
        "common",
        "exception",
        "InternalServerErrorException",
        "bio",
        "terra",
        "stairway",
        "FlightContext",
        "bio",
        "terra",
        "stairway",
        "Step",
        "bio",
        "terra",
        "stairway",
        "StepResult",
        "bio",
        "terra",
        "stairway",
        "exception",
        "RetryException",
        "bio",
        "terra",
        "workspace",
        "common",
        "utils",
        "AwsUtils",
        "bio",
        "terra",
        "workspace",
        "common",
        "utils",
        "FlightUtils",
        "bio",
        "terra",
        "workspace",
        "service",
        "crl",
        "CrlService",
        "bio",
        "terra",
        "workspace",
        "service",
        "iam",
        "SamService",
        "bio",
        "terra",
        "workspace",
        "service",
        "workspace",
        "AwsCloudContextService",
        "bio",
        "terra",
        "workspace",
        "service",
        "workspace",
        "flight",
        "WorkspaceFlightMapKeys",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Optional",
        "java",
        "util",
        "UUID",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "software",
        "amazon",
        "awssdk",
        "auth",
        "credentials",
        "AwsCredentialsProvider",
        "software",
        "amazon",
        "awssdk",
        "regions",
        "Region",
        "software",
        "amazon",
        "awssdk",
        "services",
        "ec2",
        "model",
        "CreateSecurityGroupRequest",
        "software",
        "amazon",
        "awssdk",
        "services",
        "ec2",
        "model",
        "CreateSecurityGroupResponse",
        "software",
        "amazon",
        "awssdk",
        "services",
        "ec2",
        "model",
        "DescribeSecurityGroupsResponse",
        "software",
        "amazon",
        "awssdk",
        "services",
        "ec2",
        "model",
        "ResourceType",
        "software",
        "amazon",
        "awssdk",
        "services",
        "ec2",
        "model",
        "Tag",
        "software",
        "amazon",
        "awssdk",
        "services",
        "ec2",
        "model",
        "TagSpecification",
        "logger",
        "LoggerFactory",
        "getLogger",
        "crlService",
        "samService",
        "awsCloudContextService",
        "workspaceUuid",
        "crlService",
        "awsCloudContextService",
        "samService",
        "workspaceUuid",
        "crlService",
        "crlService",
        "samService",
        "samService",
        "awsCloudContextService",
        "awsCloudContextService",
        "workspaceUuid",
        "workspaceUuid",
        "landingZone",
        "workspaceUuid",
        "metadata",
        "landingZone",
        "getMetadata",
        "TagSpecification",
        "builder",
        "resourceType",
        "ResourceType",
        "SECURITY_GROUP",
        "tags",
        "of",
        "Tag",
        "builder",
        "key",
        "AwsUtils",
        "TAG_KEY_TENANT",
        "value",
        "metadata",
        "getTenantAlias",
        "build",
        "Tag",
        "builder",
        "key",
        "AwsUtils",
        "TAG_KEY_ENVIRONMENT",
        "value",
        "metadata",
        "getEnvironmentAlias",
        "build",
        "Tag",
        "builder",
        "key",
        "AwsUtils",
        "TAG_KEY_WORKSPACE_ID",
        "value",
        "workspaceUuid",
        "toString",
        "build",
        "build",
        "regionCow",
        "workspaceUuid",
        "response",
        "regionCow",
        "getByTag",
        "AwsUtils",
        "TAG_KEY_WORKSPACE_ID",
        "workspaceUuid",
        "toString",
        "response",
        "hasSecurityGroups",
        "response",
        "securityGroups",
        "isEmpty",
        "Optional",
        "empty",
        "response",
        "securityGroups",
        "size",
        "format",
        "response",
        "securityGroups",
        "size",
        "groupId",
        "response",
        "securityGroups",
        "get",
        "groupId",
        "logger",
        "info",
        "groupId",
        "workspaceUuid",
        "toString",
        "Optional",
        "of",
        "response",
        "securityGroups",
        "get",
        "groupId",
        "regionCow",
        "region",
        "workspaceUuid",
        "landingZone",
        "response",
        "regionCow",
        "create",
        "CreateSecurityGroupRequest",
        "builder",
        "vpcId",
        "landingZone",
        "getApplicationVpcId",
        "orElseThrow",
        "description",
        "format",
        "workspaceUuid",
        "toString",
        "groupName",
        "format",
        "workspaceUuid",
        "toString",
        "region",
        "toString",
        "tagSpecifications",
        "generateTagSpecification",
        "landingZone",
        "workspaceUuid",
        "build",
        "groupId",
        "response",
        "groupId",
        "logger",
        "info",
        "groupId",
        "workspaceUuid",
        "toString",
        "groupId",
        "credentialsProvider",
        "workspaceUuid",
        "region",
        "landingZone",
        "regionCow",
        "EC2SecurityGroupCow",
        "instanceOf",
        "crlService",
        "getClientConfig",
        "credentialsProvider",
        "region",
        "findSecurityGroupInRegion",
        "regionCow",
        "workspaceUuid",
        "orElseGet",
        "createSecurityGroupInRegion",
        "regionCow",
        "region",
        "workspaceUuid",
        "landingZone",
        "Override",
        "flightContext",
        "awsEnvironment",
        "awsCloudContextService",
        "discoverEnvironment",
        "FlightUtils",
        "getRequiredUserEmail",
        "flightContext",
        "getInputParameters",
        "samService",
        "credentialsProvider",
        "AwsUtils",
        "createWsmCredentialProvider",
        "awsCloudContextService",
        "getRequiredAuthentication",
        "awsEnvironment",
        "regionSecurityGroups",
        "region",
        "awsEnvironment",
        "getSupportedRegions",
        "landingZone",
        "awsEnvironment",
        "getLandingZone",
        "region",
        "groupId",
        "findOrCreateSecurityGroupInRegion",
        "credentialsProvider",
        "workspaceUuid",
        "region",
        "landingZone",
        "orElseThrow",
        "regionSecurityGroups",
        "put",
        "region",
        "toString",
        "groupId",
        "logger",
        "info",
        "groupId",
        "workspaceUuid",
        "toString",
        "region",
        "toString",
        "flightContext",
        "getWorkingMap",
        "put",
        "WorkspaceFlightMapKeys",
        "AWS_APPLICATION_SECURITY_GROUP_ID",
        "regionSecurityGroups",
        "StepResult",
        "getStepResultSuccess",
        "Override",
        "flightContext",
        "awsEnvironment",
        "awsCloudContextService",
        "discoverEnvironment",
        "FlightUtils",
        "getRequiredUserEmail",
        "flightContext",
        "getInputParameters",
        "samService",
        "credentialsProvider",
        "AwsUtils",
        "createWsmCredentialProvider",
        "awsCloudContextService",
        "getRequiredAuthentication",
        "awsEnvironment",
        "region",
        "awsEnvironment",
        "getSupportedRegions",
        "regionCow",
        "EC2SecurityGroupCow",
        "instanceOf",
        "crlService",
        "getClientConfig",
        "credentialsProvider",
        "region",
        "findSecurityGroupInRegion",
        "regionCow",
        "workspaceUuid",
        "ifPresent",
        "securityGroupId",
        "AwsUtils",
        "deleteWorkspaceSecurityGroup",
        "crlService",
        "getClientConfig",
        "credentialsProvider",
        "workspaceUuid",
        "region",
        "securityGroupId",
        "StepResult",
        "getStepResultSuccess"
    ],
    "literals": [
        "\"Expected 0 or 1 security group for workspace, found %d.\"",
        "\"Found previously created EC2 Security Group ID '{}' for Workspace {}\"",
        "\"Application Security Group for Workspace %s\"",
        "\"ws-app-%s-%s\"",
        "\"Created EC2 Security Group ID '{}' for Workspace {}\"",
        "\"Mapped Security Group ID '{}' to Workspace {} (Landing Zone {})\""
    ],
    "variables": [
        "crlService",
        "samService",
        "awsCloudContextService",
        "workspaceUuid"
    ],
    "comments": [
        "Create a security group in each landing zone.",
        "ID's of security groups are not known until after the security group is created.  Thus, in",
        "order to make this step idempotent and not leak security groups, we need to check whether a",
        "security group has already been created for this workspace in a prior invocation by looking",
        "for a security group tagged for this workspace before we actually create a new one."
    ],
    "docstrings": [
        "* Attempts to find an existing security group in the AWS region that is tagged as belonging to\n   * this workspace.\n   *\n   * @return An {@link Optional<String>} populated with the security group ID of the\n   * @throws {@link InternalServerErrorException} if more than one security is found and tagged for\n   *     this workspace.",
        "* Creates a new security group in the AWS region and tags it as belonging to this workspace.\n   *\n   * @return The ID of the newly created security group.",
        "* Checks whether a security group exists in the AWS region for this workspace. If found, its ID\n   * is returned. If not found, a new security group is created and tagged as belonging to this\n   * workspace.\n   *\n   * @return The ID of the security group that was found or created."
    ],
    "functions": [
        "CreateWorkspaceApplicationSecurityGroupsStep",
        "TagSpecification",
        "generateTagSpecification",
        "findSecurityGroupInRegion",
        "createSecurityGroupInRegion",
        "findOrCreateSecurityGroupInRegion",
        "StepResult",
        "doStep",
        "StepResult",
        "undoStep"
    ],
    "classes": [
        "CreateWorkspaceApplicationSecurityGroupsStep"
    ]
}