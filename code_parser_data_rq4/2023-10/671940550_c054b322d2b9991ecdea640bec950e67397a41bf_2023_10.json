{
    "identifiers": [
        "logging",
        "Enum",
        "typing",
        "Optional",
        "charms",
        "data_platform_libs",
        "v0",
        "data_models",
        "BaseConfigModel",
        "pydantic",
        "validator",
        "logging",
        "getLogger",
        "Enum",
        "value",
        "Enum",
        "Enum",
        "BaseConfigModel",
        "Optional",
        "FunctionType",
        "RegistrationRole",
        "Optional",
        "Optional",
        "Optional",
        "Optional",
        "Optional",
        "Optional",
        "validator",
        "pre",
        "classmethod",
        "cls",
        "value",
        "value",
        "value",
        "validator",
        "classmethod",
        "cls",
        "value",
        "Optional",
        "value",
        "int_value",
        "int_value",
        "ValueError",
        "validator",
        "classmethod",
        "cls",
        "value",
        "Optional",
        "value",
        "int_value",
        "int_value",
        "ValueError",
        "validator",
        "classmethod",
        "cls",
        "value",
        "Optional",
        "value",
        "int_value",
        "int_value",
        "ValueError"
    ],
    "literals": [
        "\"app-gunicorn\"",
        "\"app\"",
        "\"worker\"",
        "\"beat\"",
        "\"Admin\"",
        "\"Alpha\"",
        "\"Gamma\"",
        "\"Public\"",
        "\"sql_lab\"",
        "\"*\"",
        "\"\"",
        "\"sqlalchemy_pool_size\"",
        "\"Value out of range.\"",
        "\"sqlalchemy_pool_timeout\"",
        "\"Value out of range.\"",
        "\"sqlalchemy_max_overflow\"",
        "\"Value out of range.\""
    ],
    "variables": [
        "logger",
        "app_gunicorn",
        "app",
        "worker",
        "beat",
        "admin",
        "alpha",
        "gamma",
        "sql_lab",
        "external_hostname",
        "tls_secret_name",
        "superset_secret_key",
        "admin_password",
        "charm_function",
        "alerts_attach_reports",
        "dashboard_cross_filters",
        "dashboard_rbac",
        "embeddable_charts",
        "scheduled_queries",
        "estimate_query_cost",
        "enable_template_processing",
        "alert_reports",
        "sqlalchemy_pool_size",
        "sqlalchemy_pool_timeout",
        "sqlalchemy_max_overflow",
        "self_registration_role",
        "oauth_admin_email",
        "google_client_id",
        "google_client_secret",
        "oauth_domain",
        "http_proxy",
        "https_proxy",
        "no_proxy",
        "int_value",
        "int_value",
        "int_value"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "Copyright 2023 Canonical Ltd.",
        "See LICENSE file for licensing details."
    ],
    "docstrings": [
        "\"\"\"Structured configuration for the Superset charm.\"\"\"",
        "\"\"\"Base class for string enum.\"\"\"",
        "\"\"\"Return the value as a string.\n\n        Returns:\n            string of config value\n        \"\"\"",
        "\"\"\"Enum for the `charm-function` field.\"\"\"",
        "\"\"\"Enum for the `self-registration-role` field.\"\"\"",
        "\"\"\"Manager for the structured configuration.\"\"\"",
        "\"\"\"Check for empty strings.\n\n        Args:\n            value: configuration value\n\n        Returns:\n            None in place of empty string or value\n        \"\"\"",
        "\"\"\"Check validity of `sqlalchemy_pool_size` field.\n\n        Args:\n            value: sqlalchemy-pool-size value\n\n        Returns:\n            int_value: integer for sqlalchemy-pool-size configuration\n\n        Raises:\n            ValueError: in the case when the value is out of range\n        \"\"\"",
        "\"\"\"Check validity of `sqlalchemy_pool_timeout` field.\n\n        Args:\n            value: sqlalchemy-pool-timeout value\n\n        Returns:\n            int_value: integer for sqlalchemy-pool-timeout configuration\n\n        Raises:\n            ValueError: in the case when the value is out of range\n        \"\"\"",
        "\"\"\"Check validity of `sqlalchemy_max_overflow` field.\n\n        Args:\n            value: sqlalchemy-max-overflow value\n\n        Returns:\n            int_value: integer for sqlalchemy-max-overflow configuration\n\n        Raises:\n            ValueError: in the case when the value is out of range\n        \"\"\""
    ],
    "functions": [
        "__str__",
        "blank_string",
        "sqlalchemy_pool_size_validator",
        "sqlalchemy_pool_timeout_validator",
        "sqlalchemy_max_overflow_validator"
    ],
    "classes": [
        "BaseEnumStr",
        "FunctionType",
        "RegistrationRole",
        "CharmConfig"
    ]
}