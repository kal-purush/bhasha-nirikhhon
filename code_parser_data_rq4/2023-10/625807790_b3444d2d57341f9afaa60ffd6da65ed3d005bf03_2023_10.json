{
    "identifiers": [
        "env",
        "dbWrite",
        "logToAxiom",
        "refundTransaction",
        "withRetries",
        "createJob",
        "logJob",
        "data",
        "logToAxiom",
        "data",
        "_handleJob",
        "jobId",
        "mvId",
        "mfId",
        "transactionId",
        "fetch",
        "env",
        "jobId",
        "env",
        "eventResp",
        "logJob",
        "jobId",
        "mfId",
        "eventData",
        "eventResp",
        "e",
        "logJob",
        "e",
        "e",
        "jobId",
        "mfId",
        "eventData",
        "logJob",
        "jobId",
        "mfId",
        "eventData",
        "jobType",
        "logJob",
        "jobId",
        "mfId",
        "jobType",
        "dbWrite",
        "mvId",
        "transactionId",
        "logJob",
        "jobId",
        "mfId",
        "dbWrite",
        "mvId",
        "withRetries",
        "refundTransaction",
        "transactionId",
        "createJob",
        "dbWrite",
        "oldTraining",
        "logJob",
        "logJob",
        "oldTraining",
        "oldTraining",
        "_handleJob",
        "job_id",
        "mv_id",
        "mf_id",
        "transaction_id",
        "success",
        "successes",
        "e",
        "logJob",
        "e",
        "e",
        "job_id",
        "mf_id",
        "logJob",
        "oldTraining",
        "oldTraining"
    ],
    "literals": [
        "'~/env/server.mjs'",
        "'~/server/db/client'",
        "'~/server/logging/client'",
        "'~/server/services/buzz.service'",
        "'~/server/utils/errorHandling'",
        "'./job'",
        "'handle-long-trainings'",
        "'error'",
        "'webhooks'",
        "string",
        "string",
        "${env.GENERATION_ENDPOINT}/v1/producer/jobs/${jobId}/events?descending=true&take=1",
        "'Content-Type'",
        "'application/json'",
        "Bearer ${env.ORCHESTRATOR_TOKEN}",
        "Couldn't fetch events for job",
        "string",
        "Couldn't parse JSON events for job",
        "No event history for job",
        "Couldn't grab latest type for job",
        "'Succeeded'",
        "'InReview'",
        "ISSUE! No transaction ID - need to manually refund.",
        "'Failed'",
        "'Refund due to a long-running training job.'",
        "'handle-long-trainings'",
        "'15 * * * *'",
        "string",
        "string",
        "SELECT\n      \"ModelFile\".id as mf_id,\n      \"ModelVersion\".id as mv_id,\n      COALESCE(\"ModelFile\".\"metadata\" -> 'trainingResults' ->> 'jobId', \"ModelFile\".\"metadata\" -> 'trainingResults' -> 'history' -> -1 ->> 'jobId') job_id,\n      \"ModelFile\".\"metadata\" -> 'trainingResults' ->> 'transactionId' transaction_id\n    FROM \"ModelVersion\"\n    JOIN \"ModelFile\" ON \"ModelVersion\".id = \"ModelFile\".\"modelVersionId\"\n    JOIN \"Model\" ON \"Model\".id=\"ModelVersion\".\"modelId\"\n    WHERE \"ModelFile\".type = 'Training Data' AND \"Model\".\"uploadType\" = 'Trained'\n    AND \"ModelVersion\".\"trainingStatus\" = 'Processing'\n    AND\n      CASE\n        WHEN (\"ModelFile\".metadata -> 'trainingResults' ->> 'start_time') IS NOT NULL THEN\n          ((\"ModelFile\".metadata -> 'trainingResults' -> 'start_time')::TEXT)::TIMESTAMP >= '10/16/2023'\n          AND ((\"ModelFile\".metadata -> 'trainingResults' -> 'start_time')::TEXT)::TIMESTAMP < (now() - interval '24 hours')\n        ELSE FALSE\n      END\n    ORDER BY mf_id desc;",
        "'info'",
        "No long running jobs to process.",
        "'ok'",
        "'info'",
        "Found long running jobs to process",
        "ISSUE! Error handling job",
        "'info'",
        "Finished",
        "'ok'"
    ],
    "variables": [
        "logJob",
        "_handleJob",
        "eventResp",
        "eventData",
        "jobType",
        "handleLongTrainings",
        "oldTraining",
        "successes",
        "success"
    ],
    "comments": [
        "nb: we should really be updating the history too, but...it's annoying",
        "for each row, query the transactionId in the system, check latest status",
        "succeeded -> mark, failed/processing -> mark and refund"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}