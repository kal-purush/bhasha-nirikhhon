{
    "identifiers": [
        "DAO",
        "java",
        "sql",
        "Connection",
        "java",
        "sql",
        "PreparedStatement",
        "java",
        "sql",
        "ResultSet",
        "java",
        "sql",
        "SQLException",
        "java",
        "util",
        "java",
        "util",
        "models",
        "Livro",
        "persistence",
        "BancoDados",
        "SELECT_ALL_LIVROS",
        "SELECT_LIVRO_BY_GENERO",
        "SELECT_LIVRO_BY_NOME",
        "SELECT_LIVRO_BY_ID",
        "connection",
        "livros",
        "preparedStatement",
        "resultSet",
        "connection",
        "BancoDados",
        "ConexaoDb",
        "preparedStatement",
        "connection",
        "prepareStatement",
        "SELECT_ALL_LIVROS",
        "resultSet",
        "preparedStatement",
        "executeQuery",
        "resultSet",
        "next",
        "livro",
        "livro",
        "setId",
        "resultSet",
        "getInt",
        "livro",
        "setNome",
        "resultSet",
        "getString",
        "livro",
        "setSinopse",
        "resultSet",
        "getString",
        "livro",
        "setGenero",
        "resultSet",
        "getString",
        "livro",
        "setCapa",
        "resultSet",
        "getString",
        "livro",
        "setArquivo_livro",
        "resultSet",
        "getString",
        "livros",
        "add",
        "livro",
        "e",
        "e",
        "printStackTrace",
        "BancoDados",
        "fecharConexao",
        "connection",
        "livros",
        "genero",
        "livrosList",
        "preparedStatement",
        "resultSet",
        "connection",
        "BancoDados",
        "ConexaoDb",
        "preparedStatement",
        "connection",
        "prepareStatement",
        "SELECT_LIVRO_BY_GENERO",
        "preparedStatement",
        "setString",
        "genero",
        "resultSet",
        "preparedStatement",
        "executeQuery",
        "resultSet",
        "next",
        "livro",
        "livro",
        "setId",
        "resultSet",
        "getInt",
        "livro",
        "setNome",
        "resultSet",
        "getString",
        "livro",
        "setSinopse",
        "resultSet",
        "getString",
        "livro",
        "setGenero",
        "resultSet",
        "getString",
        "livro",
        "setCapa",
        "resultSet",
        "getString",
        "livro",
        "setArquivo_livro",
        "resultSet",
        "getString",
        "livrosList",
        "add",
        "livro",
        "e",
        "e",
        "getErrorCode",
        "BancoDados",
        "fecharConexao",
        "connection",
        "livrosList",
        "nomeLivro",
        "livros",
        "preparedStatement",
        "resultSet",
        "connection",
        "BancoDados",
        "ConexaoDb",
        "preparedStatement",
        "connection",
        "prepareStatement",
        "SELECT_LIVRO_BY_NOME",
        "preparedStatement",
        "setString",
        "nomeLivro",
        "resultSet",
        "preparedStatement",
        "executeQuery",
        "resultSet",
        "next",
        "livro",
        "livro",
        "setId",
        "resultSet",
        "getInt",
        "livro",
        "setNome",
        "resultSet",
        "getString",
        "livro",
        "setSinopse",
        "resultSet",
        "getString",
        "livro",
        "setGenero",
        "resultSet",
        "getString",
        "livro",
        "setCapa",
        "resultSet",
        "getString",
        "livro",
        "setArquivo_livro",
        "resultSet",
        "getString",
        "livros",
        "add",
        "livro",
        "e",
        "e",
        "getErrorCode",
        "BancoDados",
        "fecharConexao",
        "connection",
        "livros",
        "id",
        "livros",
        "preparedStatement",
        "resultSet",
        "connection",
        "BancoDados",
        "ConexaoDb",
        "preparedStatement",
        "connection",
        "prepareStatement",
        "SELECT_LIVRO_BY_ID",
        "preparedStatement",
        "setInt",
        "parseInt",
        "id",
        "resultSet",
        "preparedStatement",
        "executeQuery",
        "resultSet",
        "next",
        "livro",
        "livro",
        "setId",
        "resultSet",
        "getInt",
        "livro",
        "setNome",
        "resultSet",
        "getString",
        "livro",
        "setSinopse",
        "resultSet",
        "getString",
        "livro",
        "setGenero",
        "resultSet",
        "getString",
        "livro",
        "setCapa",
        "resultSet",
        "getString",
        "livro",
        "setArquivo_livro",
        "resultSet",
        "getString",
        "livros",
        "add",
        "livro",
        "e",
        "e",
        "getErrorCode",
        "BancoDados",
        "fecharConexao",
        "connection",
        "livros"
    ],
    "literals": [
        "\"SELECT * FROM livros\"",
        "\"SELECT * FROM livros WHERE genero = ?\"",
        "\"SELECT * FROM livros WHERE nome = ?\"",
        "\"SELECT * FROM livros WHERE id = ?\"",
        "\"id\"",
        "\"nome\"",
        "\"sinopse\"",
        "\"genero\"",
        "\"capa\"",
        "\"arquivo_livro\"",
        "\"id\"",
        "\"nome\"",
        "\"sinopse\"",
        "\"genero\"",
        "\"capa\"",
        "\"arquivo_livro\"",
        "\"id\"",
        "\"nome\"",
        "\"sinopse\"",
        "\"genero\"",
        "\"capa\"",
        "\"arquivo_livro\"",
        "\"id\"",
        "\"nome\"",
        "\"sinopse\"",
        "\"genero\"",
        "\"capa\"",
        "\"arquivo_livro\""
    ],
    "variables": [],
    "comments": [
        "Recebe todos os livros do banco de dados, a query passada é através da:",
        "private static final String SELECT_ALL_LIVROS",
        "Convert the list to an array and return it"
    ],
    "docstrings": [],
    "functions": [
        "getAllLivros",
        "getLivroByGenero",
        "getLivroByNome",
        "getLivroByID"
    ],
    "classes": [
        "LivroDAO"
    ]
}