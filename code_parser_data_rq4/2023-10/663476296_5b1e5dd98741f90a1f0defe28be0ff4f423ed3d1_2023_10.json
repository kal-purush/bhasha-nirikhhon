{
    "identifiers": [
        "psycopg2",
        "_psycopg",
        "BINARY",
        "NUMBER",
        "STRING",
        "DATETIME",
        "ROWID",
        "Binary",
        "Time",
        "Timestamp",
        "DateFromTicks",
        "TimeFromTicks",
        "TimestampFromTicks",
        "Warning",
        "DataError",
        "DatabaseError",
        "ProgrammingError",
        "IntegrityError",
        "InterfaceError",
        "InternalError",
        "NotSupportedError",
        "OperationalError",
        "_connect",
        "apilevel",
        "threadsafety",
        "paramstyle",
        "__version__",
        "__libpq_version__",
        "psycopg2",
        "extensions",
        "_ext",
        "_ext",
        "register_adapter",
        "_ext",
        "SQL_IN",
        "_ext",
        "register_adapter",
        "_ext",
        "NoneAdapter",
        "Decimal",
        "psycopg2",
        "_psycopg",
        "Decimal",
        "Adapter",
        "_ext",
        "register_adapter",
        "Decimal",
        "Adapter",
        "Decimal",
        "Adapter",
        "dsn",
        "connection_factory",
        "cursor_factory",
        "kwargs",
        "kwargs",
        "kwargs",
        "pop",
        "kwargs",
        "kwargs",
        "pop",
        "_ext",
        "make_dsn",
        "dsn",
        "kwargs",
        "_connect",
        "dsn",
        "connection_factory",
        "connection_factory",
        "kwasync",
        "cursor_factory",
        "cursor_factory",
        "conn"
    ],
    "literals": [
        "'async'",
        "'async'",
        "'async'",
        "'async_'",
        "'async_'",
        "'async_'"
    ],
    "variables": [
        "kwasync",
        "kwasync",
        "kwasync",
        "dsn",
        "conn",
        "conn",
        "cursor_factory"
    ],
    "comments": [
        "psycopg/__init__.py - initialization of the psycopg module",
        "",
        "Copyright (C) 2003-2019 Federico Di Gregorio  <fog@debian.org>",
        "Copyright (C) 2020-2021 The Psycopg Team",
        "",
        "psycopg2 is free software: you can redistribute it and/or modify it",
        "under the terms of the GNU Lesser General Public License as published",
        "by the Free Software Foundation, either version 3 of the License, or",
        "(at your option) any later version.",
        "",
        "In addition, as a special exception, the copyright holders give",
        "permission to link this program with the OpenSSL library (or with",
        "modified versions of OpenSSL that use the same license as OpenSSL),",
        "and distribute linked combinations including the two.",
        "",
        "You must obey the GNU Lesser General Public License in all respects for",
        "all of the code used other than OpenSSL.",
        "",
        "psycopg2 is distributed in the hope that it will be useful, but WITHOUT",
        "ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or",
        "FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public",
        "License for more details.",
        "Import modules needed by _psycopg to allow tools like py2exe to do",
        "their work without bothering about the module dependencies.",
        "Note: the first internal import should be _psycopg, otherwise the real cause",
        "of a failed loading of the C module may get hidden, see",
        "https://archives.postgresql.org/psycopg/2011-02/msg00044.php",
        "Import the DBAPI-2.0 stuff into top-level module.",
        "noqa",
        "Register default adapters.",
        "Register the Decimal adapter here instead of in the C layer.",
        "This way a new class is registered for each sub-interpreter.",
        "See ticket #52",
        "noqa",
        "noqa"
    ],
    "docstrings": [
        "\"\"\"A Python driver for PostgreSQL\n\npsycopg is a PostgreSQL_ database adapter for the Python_ programming\nlanguage. This is version 2, a complete rewrite of the original code to\nprovide new-style classes for connection and cursor objects and other sweet\ncandies. Like the original, psycopg 2 was written with the aim of being very\nsmall and fast, and stable as a rock.\n\nHomepage: https://psycopg.org/\n\n.. _PostgreSQL: https://www.postgresql.org/\n.. _Python: https://www.python.org/\n\n:Groups:\n  * `Connections creation`: connect\n  * `Value objects constructors`: Binary, Date, DateFromTicks, Time,\n    TimeFromTicks, Timestamp, TimestampFromTicks\n\"\"\"",
        "\"\"\"\n    Create a new database connection.\n\n    The connection parameters can be specified as a string:\n\n        conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n\n    or using a set of keyword arguments:\n\n        conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n\n    Or as a mix of both. The basic connection parameters are:\n\n    - *dbname*: the database name\n    - *database*: the database name (only as keyword argument)\n    - *user*: user name used to authenticate\n    - *password*: password used to authenticate\n    - *host*: database host address (defaults to UNIX socket if not provided)\n    - *port*: connection port number (defaults to 5432 if not provided)\n\n    Using the *connection_factory* parameter a different class or connections\n    factory can be specified. It should be a callable object taking a dsn\n    argument.\n\n    Using the *cursor_factory* parameter, a new default cursor factory will be\n    used by cursor().\n\n    Using *async*=True an asynchronous connection will be created. *async_* is\n    a valid alias (for Python versions where ``async`` is a keyword).\n\n    Any other keyword parameter will be passed to the underlying client\n    library: the list of supported parameters depends on the library version.\n\n    \"\"\""
    ],
    "functions": [
        "connect"
    ],
    "classes": []
}