{
    "identifiers": [
        "typing",
        "Optional",
        "Tuple",
        "Union",
        "uuid",
        "UUID",
        "attrs",
        "azul",
        "require",
        "azul",
        "types",
        "reify",
        "args",
        "kwargs",
        "attrs",
        "field",
        "args",
        "validator",
        "as_annotated",
        "kwargs",
        "_AsAnnotated",
        "Optional",
        "Tuple",
        "attrs",
        "Attribute",
        "Union",
        "Tuple",
        "_instance",
        "field",
        "value",
        "_reify",
        "field",
        "isinstance",
        "value",
        "reified_type",
        "field",
        "name",
        "value",
        "reified_type",
        "field",
        "_cache",
        "reify",
        "field",
        "field",
        "reified_type",
        "_cache",
        "require",
        "cached_field",
        "field",
        "cached_field",
        "field",
        "reified_type",
        "version",
        "_instance",
        "field",
        "value",
        "isinstance",
        "value",
        "UUID",
        "value",
        "version",
        "version",
        "version",
        "field",
        "name",
        "value",
        "validator"
    ],
    "literals": [
        "'Validator cannot be shared among fields'",
        "'as_annotated()'",
        "f'Not a UUID{version}'"
    ],
    "variables": [
        "_cache",
        "reified_type",
        "reified_type",
        "_cache",
        "cached_field",
        "reified_type"
    ],
    "comments": [
        "reify() isn't exactly cheap so we'll cache its result"
    ],
    "docstrings": [
        "\"\"\"\n    A field that uses the annotated type for validation.\n\n    See :func:`as_annotated` for details\n    \"\"\"",
        "\"\"\"\n    Returns a validator that verifies that a field's value is of the annotated\n    type. Has some limited magic for parameterized types such as typing.Union\n    and typing.Optional.\n\n    >>> from azul.types import AnyJSON\n    >>> @attrs.define\n    ... class Foo:\n    ...     x: Optional[bool] = strict_auto()\n    ...     y: AnyJSON = strict_auto()\n\n    >>> Foo(x=None, y={}), Foo(x=True, y=[]), Foo(x=False, y='foo')\n    (Foo(x=None, y={}), Foo(x=True, y=[]), Foo(x=False, y='foo'))\n\n    >>> # noinspection PyTypeChecker\n    >>> Foo(x='foo', y={})\n    Traceback (most recent call last):\n    ...\n    TypeError: ('x', 'foo', (<class 'bool'>, <class 'NoneType'>))\n\n    >>> # noinspection PyTypeChecker\n    >>> Foo(x=None, y=set())\n    ... # doctest: +NORMALIZE_WHITESPACE\n    Traceback (most recent call last):\n    ...\n    TypeError: ('y', set(), (<class 'collections.abc.Sequence'>,\n    <class 'collections.abc.Mapping'>, <class 'str'>, <class 'int'>,\n    <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n\n    Note that you cannot share one return value of this function between more\n    than one field.\n\n    >>> validator = as_annotated()\n    >>> @attrs.define\n    ... class Bar:\n    ...     x: int = attrs.field(validator=validator)\n    ...     y: str = attrs.field(validator=validator)\n    >>> Bar(x=1, y='')\n    ... # doctest: +NORMALIZE_WHITESPACE\n    Traceback (most recent call last):\n        ...\n    azul.RequirementError: ('Validator cannot be shared among fields',\n    Attribute(name='x', default=NOTHING, validator=as_annotated(), repr=True,\n    eq=True, eq_key=None, order=True, order_key=None, hash=None, init=True,\n    metadata=mappingproxy({}), type=<class 'int'>, converter=None,\n    kw_only=False, inherited=False, on_setattr=None, alias='x'),\n    Attribute(name='y', default=NOTHING, validator=as_annotated(), repr=True,\n    eq=True, eq_key=None, order=True, order_key=None, hash=None, init=True,\n    metadata=mappingproxy({}), type=<class 'str'>, converter=None,\n    kw_only=False, inherited=False, on_setattr=None, alias='y'))\n\n    Unfortunately, this sharing violation is currently detected very late,\n    during the first instantiation of a class that reuses a validator.\n\n    >>> validator = as_annotated()\n    >>> @attrs.define\n    ... class Bar:\n    ...     x: int = attrs.field(validator=validator)\n    >>> @attrs.define\n    ... class Foo:\n    ...     y: str = attrs.field(validator=validator)\n    >>> Bar(x=1)\n    Bar(x=1)\n    >>> Foo(y='')\n    ... # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n        ...\n    azul.RequirementError: ('Validator cannot be shared among fields', ...\n\n    \"\"\""
    ],
    "functions": [
        "strict_auto",
        "as_annotated",
        "__call__",
        "_reify",
        "__repr__",
        "is_uuid",
        "validator"
    ],
    "classes": [
        "_AsAnnotated"
    ]
}