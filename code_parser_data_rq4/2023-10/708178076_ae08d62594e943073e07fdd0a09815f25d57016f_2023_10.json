{
    "identifiers": [
        "argparse",
        "line",
        "line",
        "upper",
        "split",
        "len",
        "tokens",
        "tokens",
        "tokens",
        "mode",
        "get_reg_arg",
        "tokens",
        "is_imm",
        "tokens",
        "opcode",
        "get_reg_arg",
        "tokens",
        "is_imm",
        "tokens",
        "opcode",
        "get_reg_arg",
        "tokens",
        "get_reg_arg",
        "tokens",
        "is_imm",
        "tokens",
        "opcode",
        "get_reg_arg",
        "tokens",
        "is_imm",
        "tokens",
        "opcode",
        "tokens",
        "tokens",
        "get_reg_arg",
        "tokens",
        "is_imm",
        "tokens",
        "opcode",
        "get_reg_arg",
        "tokens",
        "get_reg_arg",
        "tokens",
        "is_imm",
        "tokens",
        "opcode",
        "get_reg_arg",
        "tokens",
        "opcode",
        "tokens",
        "exit",
        "opcode",
        "arg0",
        "arg1",
        "arg2",
        "token",
        "token",
        "regs",
        "token",
        "token",
        "regs",
        "regs",
        "token",
        "token",
        "isdigit",
        "token",
        "token",
        "exit",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "vars",
        "parser",
        "parse_args",
        "open",
        "args",
        "infile",
        "open",
        "args",
        "mode",
        "outfile",
        "file",
        "outfile",
        "line",
        "infile",
        "assemble_line",
        "line",
        "code",
        "code",
        "file",
        "outfile",
        "infile",
        "seek",
        "file",
        "outfile",
        "file",
        "outfile",
        "line",
        "infile",
        "line",
        "strip",
        "line",
        "end",
        "file",
        "outfile"
    ],
    "literals": [
        "\"0\"",
        "\"0\"",
        "\"0\"",
        "'invalid'",
        "''",
        "'ADD'",
        "'alu'",
        "'SUB'",
        "'alu'",
        "'AND'",
        "'alu'",
        "'OR'",
        "'alu'",
        "'NOT'",
        "'alu'",
        "'XOR'",
        "'alu'",
        "'MULTH'",
        "'alu'",
        "'MULTL'",
        "'alu'",
        "'BE'",
        "'compare'",
        "'BN'",
        "'compare'",
        "'BL'",
        "'compare'",
        "'BLE'",
        "'compare'",
        "'BG'",
        "'compare'",
        "'BGE'",
        "'compare'",
        "'CALL'",
        "'call'",
        "'JUMP'",
        "'call'",
        "'RET'",
        "'noargs'",
        "'SAVE'",
        "'save'",
        "'LOAD'",
        "'load'",
        "'MOV'",
        "'move'",
        "'#'",
        "\"\"",
        "'LABEL'",
        "\"label \"",
        "'noargs'",
        "'alu'",
        "'compare'",
        "'call'",
        "'save'",
        "'load'",
        "'move'",
        "'Invalid instruction'",
        "' '",
        "' '",
        "' '",
        "'R0'",
        "'R1'",
        "'R2'",
        "'R3'",
        "'R4'",
        "'R5'",
        "'ADDR'",
        "'PC'",
        "'IO'",
        "'Invalid argument'",
        "\"legasm.py\"",
        "'in'",
        "\"LEG ASM file to be assembled\"",
        "'-o'",
        "'--out'",
        "\"filename to be produced, defaults to 'leg.out'\"",
        "'leg.out'",
        "'in'",
        "'out'",
        "'w'",
        "\"# Assembled with legasm.py\"",
        "''",
        "\"# Original:\"",
        "''",
        "'#'",
        "''"
    ],
    "variables": [
        "opcode",
        "arg0",
        "arg1",
        "arg2",
        "mode",
        "tokens",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "opcode",
        "mode",
        "arg0",
        "arg1",
        "arg2",
        "arg0",
        "arg1",
        "arg2",
        "arg2",
        "arg0",
        "arg2",
        "arg0",
        "arg2",
        "regs",
        "parser",
        "args",
        "code"
    ],
    "comments": [
        "opcode = 0",
        "Now that we've matched the token to its basic instruction,",
        "we can read future lines",
        "Finally, output the line of Nearly Byte Code."
    ],
    "docstrings": [
        "'''\nAn assembler for my Turing Complete game's LEG architecture.\nThis was made because the in-game assembler is kinda annoying to work with.\n\nLabels will be one of the few things not modified by the assembler, so it's not really a full 'assembler'\nbut it's not a transpiler (transsembler?) either.\n\nPrograms will be output in line broken decimal for the most part.\n\nSpecification date: 10/21/2023\n'''",
        "'''\n    Assemble the line of decimal code needed to execute this line.\n    '''"
    ],
    "functions": [
        "assemble_line",
        "is_imm",
        "get_reg_arg"
    ],
    "classes": []
}