{
    "identifiers": [
        "capitalize",
        "compact",
        "floor",
        "get",
        "includes",
        "isEmpty",
        "lowerCase",
        "split",
        "upperFirst",
        "ElkNode",
        "ExecutionGraphNode",
        "Operation",
        "paddingTop",
        "paddingLeftRight",
        "paddingBottom",
        "paddingLeftRight",
        "node",
        "node",
        "retry",
        "retry",
        "isLeafNode",
        "subGraph",
        "isEmpty",
        "subGraph",
        "operation",
        "split",
        "operation",
        "name",
        "name",
        "upperFirst",
        "name",
        "constructSubgraphs",
        "operationsList",
        "operationsList",
        "operation",
        "parseOperationName",
        "operation",
        "operation",
        "taskArgs",
        "taskArgs",
        "taskOperation",
        "parseOperationName",
        "taskArgs",
        "taskOperation",
        "capitalize",
        "lowerCase",
        "taskOperation",
        "get",
        "taskArgs",
        "operation",
        "taskName",
        "operation",
        "upperFirst",
        "operation",
        "taskOperation",
        "cloudifyContext",
        "get",
        "cloudifyContext",
        "allSubgraphs",
        "operation",
        "allSubgraphs",
        "operation",
        "subGraph",
        "allSubgraphs",
        "operation",
        "taskName",
        "allSubgraphs",
        "operation",
        "operation",
        "allSubgraphs",
        "operation",
        "taskOperation",
        "subGraph",
        "allSubgraphs",
        "operation",
        "operation",
        "operation",
        "subGraph",
        "containingSubgraph",
        "allSubgraphs",
        "containingSubgraph",
        "containingSubgraph",
        "subGraph",
        "allSubgraphs",
        "containingSubgraph",
        "parentGraph",
        "allSubgraphs",
        "containingSubgraph",
        "subGraph",
        "allSubgraphs",
        "containingSubgraph",
        "allSubgraphs",
        "operation",
        "containingSubgraph",
        "operation",
        "operation",
        "operation",
        "taskId",
        "taskId",
        "operation",
        "allSubgraphs",
        "constructDependencies",
        "operationsList",
        "allSubgraphs",
        "operationsList",
        "operation",
        "operation",
        "allSubgraphs",
        "operation",
        "operation",
        "isLeafNode",
        "allSubgraphs",
        "operation",
        "allSubgraphs",
        "operation",
        "allSubgraphs",
        "operation",
        "operationsList",
        "anotherOperation",
        "anotherOperation",
        "operation",
        "anotherOperation",
        "operation",
        "operation",
        "anotherOperation",
        "operation",
        "anotherOperation",
        "allSubgraphs",
        "operation",
        "containingSubgraph",
        "edges",
        "edge",
        "allSubgraphs",
        "containingSubgraph",
        "edge",
        "edges",
        "shouldHideTask",
        "workflowTask",
        "isRetried",
        "workflowTask",
        "includes",
        "typesToHide",
        "workflowTask",
        "safeDeleteIrrelevantGraphVertices",
        "allSubgraphs",
        "allSubgraphs",
        "subGraph",
        "subGraph",
        "subGraph",
        "compact",
        "subGraph",
        "workflowTask",
        "shouldHideTask",
        "workflowTask",
        "subGraph",
        "compact",
        "subGraph",
        "edge",
        "edge",
        "edge",
        "sourceNode",
        "workflowTask",
        "targetNodes",
        "targetNode",
        "targetNode",
        "workflowTask",
        "sourceNodes",
        "sourceNode",
        "isRetried",
        "workflowTask",
        "allSubgraphs",
        "sourceNode",
        "workflowTask",
        "allSubgraphs",
        "sourceNode",
        "workflowTask",
        "allSubgraphs",
        "sourceNode",
        "workflowTask",
        "edge",
        "sourceNodes",
        "sourceNodeId",
        "targetNodes",
        "targetNodeId",
        "sourceNodeId",
        "targetNodeId",
        "sourceNodeId",
        "targetNodeId",
        "existingEdges",
        "newEdge",
        "subGraph",
        "newEdge",
        "existingEdges",
        "newEdge",
        "workflowTask",
        "allSubgraphs",
        "adjustingNodeSizes",
        "allSubgraphs",
        "textSplitCalculation",
        "nodeWidth",
        "textToCalculate",
        "floor",
        "nodeWidth",
        "paddingLeftRight",
        "textSizingFactor",
        "textToCalculate",
        "maximumLength",
        "indexOfSplitLocation",
        "maximumLength",
        "indexOfSplitLocation",
        "indexOfSplitLocation",
        "textToCalculate",
        "indexOfSplitLocation",
        "textSplitCalculation",
        "nodeWidth",
        "textToCalculate",
        "indexOfSplitLocation",
        "textArr",
        "textToCalculate",
        "indexOfSplitLocation",
        "textArr",
        "textToCalculate",
        "allSubgraphs",
        "subGraph",
        "isLeafNode",
        "subGraph",
        "subGraph",
        "subGraphLayoutOptions",
        "subGraph",
        "labels",
        "capitalize",
        "lowerCase",
        "labels",
        "labels",
        "textSplitCalculation",
        "subGraph",
        "labels",
        "labels",
        "textToCalculate",
        "numberOfSplits",
        "textToCalculate",
        "labels",
        "tempArr",
        "labels",
        "state",
        "labels",
        "tempArr",
        "state",
        "retriesCount",
        "retriesCount",
        "state",
        "textSplitCalculation",
        "subGraph",
        "tempArr",
        "labels",
        "textToCalculate",
        "numberOfSplits",
        "textToCalculate",
        "numberOfSplits",
        "subGraph",
        "textHeight",
        "numberOfSplits",
        "subGraph",
        "allSubgraphs",
        "cleanSubgraphsList",
        "allSubgraphs",
        "edges",
        "safeDeleteIrrelevantGraphVertices",
        "allSubgraphs",
        "allSubgraphs",
        "nodeKey",
        "allSubgraphs",
        "nodeKey",
        "isLeafNode",
        "subGraph",
        "isEmpty",
        "subGraph",
        "subGraph",
        "subgraphTask",
        "subGraph",
        "allSubgraphs",
        "subGraph",
        "i",
        "i",
        "allSubgraphs",
        "subGraph",
        "i",
        "subGraph",
        "allSubgraphs",
        "subGraph",
        "i",
        "subGraph",
        "allSubgraphs",
        "subGraph",
        "i",
        "edges",
        "i",
        "i",
        "edges",
        "i",
        "subGraph",
        "edges",
        "i",
        "subGraph",
        "edges",
        "i",
        "allSubgraphs",
        "nodeKey",
        "allSubgraphs",
        "nodeKey",
        "allSubgraphs",
        "nodeKey",
        "subGraph",
        "containingSubgraph",
        "allSubgraphs",
        "nodeKey",
        "allSubgraphs",
        "createELKTasksGraphs",
        "allSubgraphs",
        "edges",
        "allSubgraphs"
    ],
    "literals": [
        "'lodash'",
        "'elkjs'",
        "'./ExecutionsHandler.types'",
        "'SubgraphTask'",
        "'elk.padding'",
        "[top=${paddingTop},left=${paddingLeftRight},bottom=${paddingBottom},right=${paddingLeftRight}]",
        "'cloudify.interfaces.'",
        "string",
        "''",
        "'__cloudify_context'",
        "'name'",
        "string",
        "${operation.id}_${anotherOperation.id}",
        "'SendNodeEventTask'",
        "'SetNodeInstanceStateTask'",
        "'GetNodeInstanceStateTask'",
        "'SendNodeEventTask'",
        "'SendWorkflowEventTask'",
        "'UpdateExecutionStatusTask'",
        "'LocalWorkflowTask'",
        "'NOPLocalWorkflowTask'",
        "string",
        "string",
        "string",
        "${sourceNodeId}_${targetNodeId}",
        "${sourceNodeId}",
        "${targetNodeId}",
        "string",
        "string",
        "string",
        "' '",
        "'Pending'",
        "Pending retry (${retriesCount})",
        "' - '",
        "string",
        "string",
        "'tasksGraph'",
        "'elk.algorithm'",
        "'layered'",
        "'elk.spacing.nodeNode'",
        "'30f'",
        "'layered.spacing.nodeNodeBetweenLayers'",
        "'50f'",
        "'INCLUDE_CHILDREN'"
    ],
    "variables": [
        "subgraphTask",
        "paddingLeftRight",
        "paddingTop",
        "paddingBottom",
        "subGraphLayoutOptions",
        "textSizingFactor",
        "textHeight",
        "isLeafNode",
        "name",
        "constructSubgraphs",
        "allSubgraphs",
        "taskName",
        "taskOperation",
        "taskArgs",
        "cloudifyContext",
        "subGraph",
        "containingSubgraph",
        "parentGraph",
        "constructDependencies",
        "edges",
        "edge",
        "shouldHideTask",
        "typesToHide",
        "safeDeleteIrrelevantGraphVertices",
        "existingEdges",
        "sourceNodes",
        "targetNodes",
        "sourceNode",
        "targetNode",
        "newEdge",
        "adjustingNodeSizes",
        "textSplitCalculation",
        "maximumLength",
        "indexOfSplitLocation",
        "textArr",
        "labels",
        "numberOfSplits",
        "textToCalculate",
        "tempArr",
        "labels",
        "retriesCount",
        "textToCalculate",
        "cleanSubgraphsList",
        "subGraph",
        "i",
        "i",
        "subGraph",
        "subGraph",
        "createELKTasksGraphs"
    ],
    "comments": [
        "This is a rough estimate of how much space each character in a string takes.",
        "This will be used when a text needs to be displayed inside a node (rectangle)",
        "and exceeds its width, resulting in increasing the rectangle's height and",
        "breaking the string into 2 (and so forth...)",
        "All the subgraphs and leaves are in the same list for better time-complexity performance, meaning -",
        "For every subgraph - instead of traversing its children until we find the desired subgraph/leaf, we simply",
        "keep the child (or grand child) subgraph/leaf in the first-tier list as a pointer to the real child.",
        "When we're done creating the skeleton for ELK, we remove all the pointers and only keep the root subgraphs.",
        "subGraph can be a subGraph or a 'leaf'",
        "Task is inside a Subgraph (could be subgraph in subgraph)",
        "Need to create its parent and update self as its child",
        "Parent does not exist - creating parent skeleton to be filled later",
        "parentGraph already exists - only update its children and its child that its contained in it",
        "Updating task dependencies not to include containing_subgraph",
        "Connecting all the operations into a graph",
        "keep those two for compat with pre-6.2 executions",
        "Remove send-event, set-state, and retrying-tasks from the graph",
        "while keeping it connected",
        "Used to remove duplicate edges",
        "Go through all the subgraphs",
        "For each subgraph, go through all the tasks",
        "For each hidden task, connect the 'target'",
        "edges to it's parents' 'target' edges",
        "Remove the node when done",
        "Need to go through the array twice because the",
        "update of the rest of the edges must be after all the",
        "\"Node to remove\"'s edges have been scanned",
        "If a task is retrying - delete it and combine it with its father",
        "Since some operations' inner text may exceed its Node's width",
        "we need to increase the Node's height accordingly and split the text",
        "This process must be here after all the nodes are in the list",
        "Traversing the splitting location backwards to find the beginning of the word",
        "if leaf and not the 'edges' object",
        "Each element in the resulting array will be rendered in a separate <text> element",
        "Description text",
        "Each element in the resulting array will be rendered in a separate <text> element",
        "Removing irrelevant vertices (when a task is rescheduled due to failure mostly)",
        "Removing subgraphs with 0 children",
        "Verify the subGraph doesn't have connected edges",
        "Return all the nodes that are root-level subgraphs",
        "Vertical spacing between nodes in each layer",
        "Horizontal spacing between layers",
        "To ensure inner nodes can have proper edges to nodes with different parents"
    ],
    "docstrings": [
        "*IMPORTANT NOTE* - Retrying tasks depend on their previous failed task"
    ],
    "functions": [
        "isRetried",
        "parseOperationName"
    ],
    "classes": []
}