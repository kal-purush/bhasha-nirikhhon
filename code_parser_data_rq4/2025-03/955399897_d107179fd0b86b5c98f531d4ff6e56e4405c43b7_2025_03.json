{
    "identifiers": [
        "ast",
        "json",
        "csv",
        "logging",
        "time",
        "concurrent",
        "futures",
        "ProcessPoolExecutor",
        "as_completed",
        "dataclasses",
        "dataclass",
        "asdict",
        "pathlib",
        "Path",
        "typing",
        "Dict",
        "Union",
        "Optional",
        "Any",
        "Tuple",
        "os",
        "re",
        "functools",
        "lru_cache",
        "logging",
        "basicConfig",
        "level",
        "logging",
        "INFO",
        "format",
        "logging",
        "getLogger",
        "dataclass",
        "Optional",
        "dataclass",
        "Optional",
        "dataclass",
        "ClassInfo",
        "FunctionInfo",
        "repo_path",
        "Union",
        "Path",
        "config",
        "Optional",
        "Dict",
        "Any",
        "Path",
        "repo_path",
        "config",
        "_default_config",
        "_setup_exclude_patterns",
        "Dict",
        "Any",
        "os",
        "cpu_count",
        "re",
        "compile",
        "pattern",
        "pattern",
        "config",
        "re",
        "compile",
        "pattern",
        "pattern",
        "config",
        "path",
        "Path",
        "part",
        "path",
        "parts",
        "pattern",
        "exclude_dir_patterns",
        "pattern",
        "search",
        "part",
        "path",
        "is_file",
        "pattern",
        "exclude_file_patterns",
        "pattern",
        "search",
        "path",
        "name",
        "Path",
        "path",
        "repo_path",
        "rglob",
        "should_exclude",
        "path",
        "python_files",
        "append",
        "path",
        "python_files",
        "Dict",
        "FileAnalysis",
        "time",
        "time",
        "get_python_files",
        "len",
        "python_files",
        "logger",
        "info",
        "total_files",
        "python_files",
        "i",
        "i",
        "config",
        "i",
        "len",
        "python_files",
        "config",
        "batch_idx",
        "batch",
        "batches",
        "logger",
        "info",
        "batch_idx",
        "len",
        "batches",
        "len",
        "batch",
        "_process_batch",
        "batch",
        "batch_idx",
        "len",
        "batches",
        "time",
        "time",
        "start_time",
        "logger",
        "info",
        "elapsed",
        "results",
        "files",
        "Path",
        "batch_idx",
        "total_batches",
        "ProcessPoolExecutor",
        "max_workers",
        "config",
        "executor",
        "executor",
        "submit",
        "_analyze_file_wrapper",
        "file",
        "file",
        "file",
        "files",
        "future",
        "as_completed",
        "future_to_file",
        "future_to_file",
        "future",
        "file_path",
        "relative_to",
        "repo_path",
        "future",
        "result",
        "results",
        "result",
        "e",
        "logger",
        "error",
        "file_path",
        "e",
        "file_path",
        "relative_to",
        "repo_path",
        "results",
        "FileAnalysis",
        "classes",
        "functions",
        "imports",
        "code_lines",
        "comment_lines",
        "blank_lines",
        "total_lines",
        "errors",
        "e",
        "completed",
        "completed",
        "completed",
        "len",
        "files",
        "batch_idx",
        "config",
        "completed",
        "total_batches",
        "config",
        "time",
        "time",
        "start_time",
        "elapsed",
        "progress",
        "elapsed",
        "progress",
        "logger",
        "info",
        "progress",
        "eta",
        "file_path",
        "Path",
        "FileAnalysis",
        "analyze_file",
        "file_path",
        "e",
        "logger",
        "error",
        "file_path",
        "e",
        "FileAnalysis",
        "classes",
        "functions",
        "imports",
        "code_lines",
        "comment_lines",
        "blank_lines",
        "total_lines",
        "errors",
        "e",
        "file_path",
        "Path",
        "FileAnalysis",
        "open",
        "file_path",
        "encoding",
        "f",
        "f",
        "read",
        "source",
        "split",
        "sum",
        "line",
        "lines",
        "line",
        "strip",
        "sum",
        "line",
        "lines",
        "line",
        "strip",
        "startswith",
        "ast",
        "parse",
        "source",
        "EnhancedAstVisitor",
        "source",
        "visitor",
        "visit",
        "tree",
        "FileAnalysis",
        "classes",
        "visitor",
        "classes",
        "functions",
        "visitor",
        "functions",
        "imports",
        "visitor",
        "imports",
        "code_lines",
        "len",
        "lines",
        "blank_lines",
        "comment_lines",
        "comment_lines",
        "comment_lines",
        "blank_lines",
        "blank_lines",
        "total_lines",
        "len",
        "lines",
        "errors",
        "e",
        "FileAnalysis",
        "classes",
        "functions",
        "imports",
        "code_lines",
        "comment_lines",
        "blank_lines",
        "total_lines",
        "errors",
        "e",
        "format_type",
        "output_path",
        "Optional",
        "Path",
        "results",
        "logger",
        "warning",
        "output_path",
        "time",
        "strftime",
        "repo_path",
        "timestamp",
        "format_type",
        "Path",
        "output_path",
        "file_path",
        "analysis",
        "results",
        "items",
        "_make_serializable",
        "analysis",
        "format_type",
        "open",
        "output_path",
        "encoding",
        "f",
        "json",
        "dump",
        "serializable_results",
        "f",
        "indent",
        "format_type",
        "_export_to_csv",
        "serializable_results",
        "output_path",
        "ValueError",
        "format_type",
        "logger",
        "info",
        "output_path",
        "obj",
        "Any",
        "Any",
        "hasattr",
        "obj",
        "k",
        "_make_serializable",
        "v",
        "k",
        "v",
        "asdict",
        "obj",
        "items",
        "isinstance",
        "obj",
        "_make_serializable",
        "item",
        "item",
        "obj",
        "isinstance",
        "obj",
        "k",
        "_make_serializable",
        "v",
        "k",
        "v",
        "obj",
        "items",
        "obj",
        "results",
        "Dict",
        "Dict",
        "output_path",
        "Path",
        "file_path",
        "analysis",
        "results",
        "items",
        "file_path",
        "analysis",
        "get",
        "analysis",
        "get",
        "analysis",
        "get",
        "analysis",
        "get",
        "len",
        "analysis",
        "get",
        "len",
        "analysis",
        "get",
        "sum",
        "len",
        "cls",
        "get",
        "cls",
        "analysis",
        "get",
        "len",
        "analysis",
        "get",
        "analysis",
        "get",
        "flat_data",
        "append",
        "row",
        "open",
        "output_path",
        "newline",
        "encoding",
        "f",
        "flat_data",
        "csv",
        "DictWriter",
        "f",
        "fieldnames",
        "flat_data",
        "keys",
        "writer",
        "writeheader",
        "writer",
        "writerows",
        "flat_data",
        "Dict",
        "Any",
        "results",
        "len",
        "results",
        "sum",
        "r",
        "total_lines",
        "r",
        "results",
        "values",
        "sum",
        "r",
        "code_lines",
        "r",
        "results",
        "values",
        "sum",
        "len",
        "r",
        "classes",
        "r",
        "results",
        "values",
        "sum",
        "len",
        "r",
        "functions",
        "r",
        "results",
        "values",
        "file_path",
        "analysis",
        "results",
        "items",
        "func",
        "analysis",
        "functions",
        "func",
        "complexity",
        "config",
        "complex_functions",
        "append",
        "file_path",
        "func",
        "name",
        "func",
        "complexity",
        "complex_functions",
        "sort",
        "key",
        "x",
        "x",
        "reverse",
        "total_files",
        "total_lines",
        "total_code_lines",
        "total_classes",
        "total_functions",
        "sum",
        "len",
        "c",
        "methods",
        "r",
        "results",
        "values",
        "c",
        "r",
        "classes",
        "complex_functions",
        "total_lines",
        "total_files",
        "total_files",
        "total_code_lines",
        "total_lines",
        "total_code_lines",
        "total_lines",
        "total_code_lines",
        "ast",
        "NodeVisitor",
        "source_code",
        "source_code",
        "source_code",
        "split",
        "node",
        "node",
        "bases",
        "isinstance",
        "ast",
        "Name",
        "parent_classes",
        "append",
        "id",
        "isinstance",
        "ast",
        "Attribute",
        "parent_classes",
        "append",
        "_get_attribute_path",
        "isinstance",
        "ast",
        "Call",
        "parent_classes",
        "append",
        "_get_attribute_path",
        "func",
        "e",
        "parent_classes",
        "append",
        "e",
        "decorator",
        "node",
        "decorator_list",
        "_get_decorator_representation",
        "decorator",
        "decorators",
        "append",
        "decorator_str",
        "e",
        "decorators",
        "append",
        "e",
        "ast",
        "get_docstring",
        "node",
        "node",
        "end_lineno",
        "node",
        "lineno",
        "hasattr",
        "node",
        "current_class",
        "node",
        "name",
        "item",
        "node",
        "body",
        "isinstance",
        "item",
        "ast",
        "Assign",
        "ast",
        "AnnAssign",
        "isinstance",
        "item",
        "ast",
        "Assign",
        "target",
        "item",
        "targets",
        "isinstance",
        "target",
        "ast",
        "Name",
        "attributes",
        "append",
        "target",
        "id",
        "isinstance",
        "item",
        "ast",
        "AnnAssign",
        "isinstance",
        "item",
        "target",
        "ast",
        "Name",
        "attributes",
        "append",
        "item",
        "target",
        "id",
        "ClassInfo",
        "name",
        "node",
        "name",
        "methods",
        "attributes",
        "attributes",
        "parent_classes",
        "parent_classes",
        "decorators",
        "decorators",
        "line_count",
        "line_count",
        "docstring",
        "docstring",
        "classes",
        "append",
        "class_info",
        "item",
        "node",
        "body",
        "visit",
        "item",
        "old_class",
        "e",
        "logger",
        "error",
        "node",
        "name",
        "e",
        "node",
        "arg",
        "node",
        "args",
        "args",
        "arg",
        "arg",
        "arg",
        "annotation",
        "_get_attribute_path",
        "arg",
        "annotation",
        "parameters",
        "append",
        "param_name",
        "type_hint",
        "parameters",
        "append",
        "param_name",
        "parameters",
        "append",
        "param_name",
        "node",
        "args",
        "defaults",
        "i",
        "node",
        "args",
        "defaults",
        "_source_segment",
        "parameters",
        "len",
        "node",
        "args",
        "defaults",
        "i",
        "default_value",
        "decorator",
        "node",
        "decorator_list",
        "_get_decorator_representation",
        "decorator",
        "decorators",
        "append",
        "decorator_str",
        "e",
        "decorators",
        "append",
        "e",
        "ast",
        "get_docstring",
        "node",
        "node",
        "end_lineno",
        "node",
        "lineno",
        "hasattr",
        "node",
        "_calculate_complexity",
        "node",
        "FunctionInfo",
        "name",
        "node",
        "name",
        "parameters",
        "parameters",
        "decorators",
        "decorators",
        "line_count",
        "line_count",
        "complexity",
        "complexity",
        "docstring",
        "docstring",
        "current_class",
        "class_info",
        "classes",
        "class_info",
        "name",
        "current_class",
        "class_info",
        "methods",
        "append",
        "node",
        "name",
        "functions",
        "append",
        "func_info",
        "item",
        "node",
        "body",
        "visit",
        "item",
        "e",
        "logger",
        "error",
        "node",
        "name",
        "e",
        "node",
        "alias",
        "node",
        "names",
        "imports",
        "append",
        "alias",
        "name",
        "node",
        "node",
        "alias",
        "node",
        "names",
        "imports",
        "append",
        "node",
        "alias",
        "name",
        "node",
        "ast",
        "NodeVisitor",
        "node",
        "complexity",
        "node",
        "orelse",
        "isinstance",
        "node",
        "orelse",
        "ast",
        "If",
        "complexity",
        "len",
        "n",
        "n",
        "node",
        "orelse",
        "isinstance",
        "n",
        "ast",
        "If",
        "generic_visit",
        "node",
        "node",
        "complexity",
        "generic_visit",
        "node",
        "node",
        "complexity",
        "generic_visit",
        "node",
        "node",
        "complexity",
        "max",
        "len",
        "node",
        "handlers",
        "generic_visit",
        "node",
        "node",
        "isinstance",
        "node",
        "op",
        "ast",
        "And",
        "ast",
        "Or",
        "complexity",
        "len",
        "node",
        "values",
        "generic_visit",
        "node",
        "node",
        "complexity",
        "len",
        "node",
        "generators",
        "generic_visit",
        "node",
        "node",
        "complexity",
        "len",
        "node",
        "generators",
        "generic_visit",
        "node",
        "ComplexityVisitor",
        "visitor",
        "visit",
        "node",
        "complexity",
        "visitor",
        "complexity",
        "complexity",
        "node",
        "isinstance",
        "node",
        "ast",
        "Attribute",
        "_get_attribute_path",
        "node",
        "value",
        "node",
        "attr",
        "isinstance",
        "node",
        "ast",
        "Name",
        "node",
        "id",
        "isinstance",
        "node",
        "ast",
        "Call",
        "_get_attribute_path",
        "node",
        "func",
        "isinstance",
        "node",
        "ast",
        "Subscript",
        "_get_attribute_path",
        "node",
        "value",
        "_get_attribute_path",
        "node",
        "isinstance",
        "node",
        "ast",
        "Index",
        "_get_attribute_path",
        "node",
        "value",
        "node",
        "e",
        "e",
        "decorator",
        "isinstance",
        "decorator",
        "ast",
        "Call",
        "_get_attribute_path",
        "decorator",
        "func",
        "_source_segment",
        "arg",
        "arg",
        "decorator",
        "args",
        "func",
        "join",
        "args",
        "_get_attribute_path",
        "decorator",
        "value",
        "e",
        "e",
        "node",
        "ast",
        "unparse",
        "node",
        "node",
        "repo_path",
        "Union",
        "Path",
        "config",
        "Optional",
        "Dict",
        "Dict",
        "RepoAnalyzer",
        "repo_path",
        "config",
        "analyzer",
        "analyze_repo",
        "analyzer",
        "generate_summary",
        "analyzer",
        "export_results",
        "summary",
        "results",
        "argparse",
        "pathlib",
        "Path",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "choices",
        "help",
        "parser",
        "add_argument",
        "os",
        "cpu_count",
        "help",
        "parser",
        "parse_args",
        "Path",
        "args",
        "repo_path",
        "RepoAnalyzer",
        "repo_path",
        "analyzer",
        "config",
        "args",
        "workers",
        "analyzer",
        "analyze_repo",
        "analyzer",
        "generate_summary",
        "summary",
        "summary",
        "summary",
        "summary",
        "summary",
        "summary",
        "get",
        "func",
        "summary",
        "func",
        "func",
        "func",
        "args",
        "output",
        "analyzer",
        "export_results",
        "args",
        "format",
        "args",
        "output",
        "analyzer",
        "export_results",
        "args",
        "format"
    ],
    "literals": [
        "\"%(asctime)s - %(levelname)s - %(message)s\"",
        "\"repo_analyzer\"",
        "\"exclude_patterns\"",
        "r\"venv\"",
        "r\"\\.venv\"",
        "r\"__pycache__\"",
        "r\"\\.git\"",
        "r\"\\.pytest_cache\"",
        "r\"build\"",
        "r\"dist\"",
        "r\"\\.eggs\"",
        "r\"node_modules\"",
        "r\"\\.idea\"",
        "r\"\\.vs\"",
        "\"exclude_files\"",
        "r\"__init__\\.py$\"",
        "\"max_workers\"",
        "\"batch_size\"",
        "\"complexity_threshold\"",
        "\"exclude_patterns\"",
        "\"exclude_files\"",
        "\"*.py\"",
        "f\"Encontrados {total_files} archivos Python para analizar\"",
        "\"batch_size\"",
        "\"batch_size\"",
        "f\"Procesando lote {batch_idx+1}/{len(batches)} ({len(batch)} archivos)\"",
        "f\"Análisis completado en {elapsed:.2f} segundos\"",
        "\"max_workers\"",
        "f\"Error procesando {file_path}: {str(e)}\"",
        "f\"Error de procesamiento: {str(e)}\"",
        "\"batch_size\"",
        "\"batch_size\"",
        "f\"Progreso: {progress*100:.1f}% - ETA: {eta:.1f}s\"",
        "f\"Error analizando {file_path}: {str(e)}\"",
        "f\"Error: {str(e)}\"",
        "\"r\"",
        "\"utf-8\"",
        "\"\\n\"",
        "\"#\"",
        "f\"Error analizando archivo: {str(e)}\"",
        "\"json\"",
        "\"No hay resultados para exportar.\"",
        "\"%Y%m%d-%H%M%S\"",
        "f\"analysis_report_{timestamp}.{format_type}\"",
        "\"json\"",
        "\"w\"",
        "\"utf-8\"",
        "\"csv\"",
        "f\"Formato de exportación no soportado: {format_type}\"",
        "f\"Resultados exportados a {output_path}\"",
        "\"__dataclass_fields__\"",
        "\"file_path\"",
        "\"total_lines\"",
        "\"total_lines\"",
        "\"code_lines\"",
        "\"code_lines\"",
        "\"comment_lines\"",
        "\"comment_lines\"",
        "\"blank_lines\"",
        "\"blank_lines\"",
        "\"class_count\"",
        "\"classes\"",
        "\"function_count\"",
        "'functions'",
        "'methods'",
        "'classes'",
        "\"import_count\"",
        "\"imports\"",
        "\"has_errors\"",
        "\"errors\"",
        "\"w\"",
        "\"\"",
        "\"utf-8\"",
        "\"error\"",
        "\"No hay resultados para generar resumen\"",
        "\"complexity_threshold\"",
        "\"file\"",
        "\"function\"",
        "\"complexity\"",
        "\"complexity\"",
        "\"total_files\"",
        "\"total_lines\"",
        "\"total_code_lines\"",
        "\"total_classes\"",
        "\"total_functions\"",
        "\"complex_functions\"",
        "\"avg_file_size\"",
        "\"code_to_comment_ratio\"",
        "\"inf\"",
        "'\\n'",
        "'end_lineno'",
        "f\"Error procesando clase {node.name}: {e}\"",
        "f\"{param_name}: {type_hint}\"",
        "f\" = {default_value}\"",
        "'end_lineno'",
        "f\"Error procesando función {node.name}: {e}\"",
        "f\"{node.module}.{alias.name}\"",
        "f\"{self._get_attribute_path(node.value)}.{node.attr}\"",
        "f\"{self._get_attribute_path(node.value)}[{self._get_attribute_path(node.slice)}]\"",
        "f\"Error({str(e)})\"",
        "f\"{func}({', '.join(args)})\"",
        "', '",
        "f\"Error({str(e)})\"",
        "\"json\"",
        "\"summary\"",
        "\"results\"",
        "\"__main__\"",
        "\"Analizador de repositorios Python\"",
        "\"repo_path\"",
        "\"Ruta al repositorio a analizar\"",
        "\"--output\"",
        "\"-o\"",
        "\"Ruta para guardar el reporte\"",
        "\"--format\"",
        "\"-f\"",
        "\"json\"",
        "\"csv\"",
        "\"json\"",
        "\"Formato de exportación\"",
        "\"--workers\"",
        "\"-w\"",
        "\"Número de workers para procesamiento paralelo\"",
        "\"max_workers\"",
        "\"\\n--- RESUMEN DEL ANÁLISIS ---\"",
        "f\"Total de archivos analizados: {summary['total_files']}\"",
        "'total_files'",
        "f\"Total de líneas de código: {summary['total_code_lines']}\"",
        "'total_code_lines'",
        "f\"Total de clases: {summary['total_classes']}\"",
        "'total_classes'",
        "f\"Total de funciones: {summary['total_functions']}\"",
        "'total_functions'",
        "f\"Tamaño promedio de archivo: {summary['avg_file_size']:.1f} líneas\"",
        "'avg_file_size'",
        "'complex_functions'",
        "\"\\nFunciones más complejas:\"",
        "'complex_functions'",
        "f\"  - {func['file']}::{func['function']} (Complejidad: {func['complexity']})\"",
        "'file'",
        "'function'",
        "'complexity'"
    ],
    "variables": [
        "logger",
        "name",
        "parameters",
        "decorators",
        "line_count",
        "complexity",
        "docstring",
        "name",
        "methods",
        "attributes",
        "parent_classes",
        "decorators",
        "line_count",
        "docstring",
        "classes",
        "functions",
        "imports",
        "code_lines",
        "comment_lines",
        "blank_lines",
        "total_lines",
        "errors",
        "repo_path",
        "config",
        "results",
        "start_time",
        "exclude_dir_patterns",
        "exclude_file_patterns",
        "python_files",
        "start_time",
        "python_files",
        "total_files",
        "results",
        "batches",
        "elapsed",
        "future_to_file",
        "completed",
        "file_path",
        "rel_path",
        "result",
        "rel_path",
        "rel_path",
        "rel_path",
        "progress",
        "elapsed",
        "eta",
        "source",
        "lines",
        "blank_lines",
        "comment_lines",
        "tree",
        "visitor",
        "timestamp",
        "output_path",
        "output_path",
        "serializable_results",
        "serializable_results",
        "file_path",
        "flat_data",
        "row",
        "writer",
        "total_files",
        "total_lines",
        "total_code_lines",
        "total_classes",
        "total_functions",
        "complex_functions",
        "source_code",
        "source_lines",
        "classes",
        "functions",
        "imports",
        "current_class",
        "parent_classes",
        "decorators",
        "decorator_str",
        "docstring",
        "line_count",
        "old_class",
        "current_class",
        "attributes",
        "class_info",
        "current_class",
        "parameters",
        "param_name",
        "type_hint",
        "default_value",
        "decorators",
        "decorator_str",
        "docstring",
        "line_count",
        "complexity",
        "func_info",
        "complexity",
        "complexity",
        "visitor",
        "func",
        "args",
        "analyzer",
        "results",
        "summary",
        "parser",
        "args",
        "repo_path",
        "analyzer",
        "summary"
    ],
    "comments": [
        "Configuración de logging",
        "Número de archivos a procesar por lote",
        "Complejidad ciclomática considerada alta",
        "Verificar si alguna parte de la ruta coincide con patrones de exclusión",
        "Verificar si el nombre del archivo coincide con patrones de exclusión de archivos",
        "Analizar archivos en lotes para evitar sobrecarga de memoria",
        "Análisis de líneas",
        "Análisis AST",
        "Convertir resultados a un formato serializable",
        "Es un dataclass",
        "Crear una versión plana de los datos para CSV",
        "Escribir al archivo CSV",
        "Encontrar archivos con mayor complejidad",
        "Ordenar por complejidad descendente",
        "Top 10 funciones más complejas",
        "Obtener clases padre con manejo de herencia más robusto",
        "Manejo de herencia con inicialización compleja",
        "Extraer decoradores",
        "Extraer docstring",
        "Calcular líneas de código",
        "Guardar clase actual para procesar sus métodos",
        "Procesar el cuerpo de la clase para extraer atributos",
        "Manejar asignaciones con anotaciones de tipo",
        "Crear objeto ClassInfo",
        "Se llenará al visitar las definiciones de métodos",
        "Visitar recursivamente el cuerpo de la clase",
        "Extraer nombres de parámetros con manejo de tipos más complejos",
        "Intentar extraer información de anotaciones de tipo",
        "Manejar argumentos con valores por defecto",
        "Extraer decoradores con mayor detalle",
        "Extraer docstring",
        "Calcular líneas de código",
        "Calcular complejidad ciclomática (aproximada)",
        "Crear objeto FunctionInfo",
        "Si es un método de una clase, agregarlo a la clase correspondiente",
        "Visitar recursivamente el cuerpo de la función",
        "Base complexity",
        "Agregar complejidad para cada condición elif",
        "Agregar complejidad para cada handler de excepción",
        "Agregar complejidad por operadores booleanos",
        "Agregar complejidad por comprensiones de lista con múltiples generadores",
        "Agregar complejidad por comprensiones de diccionario",
        "Manejo de anotaciones de tipo con indexación",
        "Para decoradores con argumentos",
        "Para decoradores simples",
        "Exportar resultados automáticamente",
        "Forzar que sea Path"
    ],
    "docstrings": [
        "\"\"\"Información detallada sobre una función.\"\"\"",
        "\"\"\"Información detallada sobre una clase.\"\"\"",
        "\"\"\"Resultado del análisis de un archivo.\"\"\"",
        "\"\"\"\n        Inicializa el analizador de repositorios.\n        \n        Args:\n            repo_path: Ruta al repositorio a analizar\n            config: Configuración opcional para el analizador\n        \"\"\"",
        "\"\"\"Configuración predeterminada del analizador.\"\"\"",
        "\"\"\"Compila los patrones de exclusión para mayor eficiencia.\"\"\"",
        "\"\"\"Determina si un archivo o directorio debe ser excluido del análisis.\"\"\"",
        "\"\"\"Encuentra todos los archivos Python en el repositorio que no deben ser excluidos.\"\"\"",
        "\"\"\"\n        Analiza todos los archivos Python válidos en el repositorio.\n        Utiliza procesamiento paralelo para mejorar el rendimiento.\n        \"\"\"",
        "\"\"\"Procesa un lote de archivos en paralelo.\"\"\"",
        "\"\"\"Wrapper para análisis de archivos para manejo de excepciones en subprocesos.\"\"\"",
        "\"\"\"\n        Analiza un archivo Python en profundidad.\n        Extrae información detallada sobre clases, funciones, métricas de código, etc.\n        \"\"\"",
        "\"\"\"\n        Exporta los resultados del análisis a un archivo.\n        \n        Args:\n            format_type: Formato de exportación ('json' o 'csv')\n            output_path: Ruta del archivo de salida\n        \"\"\"",
        "\"\"\"Convierte objetos complejos a formatos serializables.\"\"\"",
        "\"\"\"Exporta los resultados a formato CSV (simplificado).\"\"\"",
        "\"\"\"Genera un resumen estadístico del análisis.\"\"\"",
        "\"\"\"Enhanced Visitor para recorrer el AST y extraer información detallada.\"\"\"",
        "\"\"\"Visita definiciones de clase y extrae información detallada.\"\"\"",
        "\"\"\"Visita definiciones de funciones con mayor robustez.\"\"\"",
        "\"\"\"Visita declaraciones de importación.\"\"\"",
        "\"\"\"Visita declaraciones de importación del tipo 'from X import Y'.\"\"\"",
        "\"\"\"\n        Calcula una aproximación de la complejidad ciclomática.\n        Cuenta el número de ramas en el flujo de control.\n        \"\"\"",
        "\"\"\"Obtiene la representación en cadena de un nodo de atributo.\"\"\"",
        "\"\"\"Obtiene una representación más detallada de los decoradores.\"\"\"",
        "\"\"\"Extrae el segmento de código fuente para un nodo.\"\"\"",
        "\"\"\"\n    Función principal para analizar un repositorio.\n    \n    Args:\n        repo_path: Ruta al repositorio\n        config: Configuración opcional\n        \n    Returns:\n        Diccionario con resultados y resumen del análisis\n    \"\"\""
    ],
    "functions": [
        "_default_config",
        "_setup_exclude_patterns",
        "should_exclude",
        "get_python_files",
        "analyze_repo",
        "_process_batch",
        "_analyze_file_wrapper",
        "analyze_file",
        "export_results",
        "_make_serializable",
        "_export_to_csv",
        "generate_summary",
        "visit_ClassDef",
        "visit_FunctionDef",
        "visit_Import",
        "visit_ImportFrom",
        "_calculate_complexity",
        "visit_If",
        "visit_For",
        "visit_While",
        "visit_Try",
        "visit_BoolOp",
        "visit_ListComp",
        "visit_DictComp",
        "_get_attribute_path",
        "_get_decorator_representation",
        "_source_segment",
        "analyze_repository"
    ],
    "classes": [
        "FunctionInfo",
        "ClassInfo",
        "FileAnalysis",
        "RepoAnalyzer",
        "EnhancedAstVisitor",
        "ComplexityVisitor"
    ]
}