{
    "identifiers": [
        "torch",
        "torch",
        "nn",
        "torch",
        "utils",
        "data",
        "DataLoader",
        "Dataset",
        "random",
        "numpy",
        "np",
        "os",
        "pandas",
        "pd",
        "sklearn",
        "metrics",
        "confusion_matrix",
        "f1_score",
        "accuracy_score",
        "statistics",
        "stdev",
        "mean",
        "random",
        "seed",
        "SEED",
        "np",
        "random",
        "seed",
        "SEED",
        "torch",
        "manual_seed",
        "SEED",
        "torch",
        "cuda",
        "manual_seed",
        "SEED",
        "os",
        "environ",
        "torch",
        "cuda",
        "is_available",
        "torch",
        "backends",
        "cudnn",
        "torch",
        "cuda",
        "get_device_name",
        "torch",
        "device",
        "torch",
        "cuda",
        "is_available",
        "fold",
        "os",
        "path",
        "join",
        "fold",
        "fold",
        "pd",
        "read_csv",
        "train_path",
        "header",
        "encoding",
        "pd",
        "read_csv",
        "test_path",
        "header",
        "encoding",
        "train_set",
        "iloc",
        "to_numpy",
        "train_set",
        "iloc",
        "to_numpy",
        "test_set",
        "iloc",
        "to_numpy",
        "test_set",
        "iloc",
        "to_numpy",
        "x_train",
        "y_train",
        "x_test",
        "y_test",
        "nn",
        "Module",
        "Centralized_model",
        "nn",
        "Sequential",
        "nn",
        "Linear",
        "nn",
        "ReLU",
        "nn",
        "Linear",
        "nn",
        "ReLU",
        "nn",
        "Linear",
        "nn",
        "ReLU",
        "nn",
        "Linear",
        "nn",
        "ReLU",
        "nn",
        "Linear",
        "nn",
        "ReLU",
        "nn",
        "Dropout",
        "nn",
        "Linear",
        "nn",
        "ReLU",
        "nn",
        "Dropout",
        "nn",
        "Linear",
        "nn",
        "ReLU",
        "nn",
        "Linear",
        "nn",
        "Sigmoid",
        "x",
        "classifier",
        "x",
        "y_hat",
        "nn",
        "BCELoss",
        "i",
        "K",
        "i",
        "K",
        "i",
        "K",
        "i",
        "K",
        "i",
        "K",
        "fold",
        "K",
        "fold",
        "extract_data",
        "fold",
        "Centralized_model",
        "to",
        "device",
        "torch",
        "optim",
        "Adam",
        "model",
        "parameters",
        "lr",
        "lr",
        "epoch",
        "epochs",
        "model",
        "train",
        "i",
        "len",
        "x_train",
        "batch_size",
        "torch",
        "tensor",
        "x_train",
        "i",
        "i",
        "batch_size",
        "to",
        "torch",
        "float32",
        "to",
        "device",
        "torch",
        "tensor",
        "y_train",
        "i",
        "i",
        "batch_size",
        "to",
        "torch",
        "float32",
        "to",
        "device",
        "model",
        "inputs",
        "flatten",
        "optimizer",
        "zero_grad",
        "criterion",
        "outputs",
        "targets",
        "train_loss_collect",
        "append",
        "loss",
        "item",
        "inputs",
        "size",
        "loss",
        "backward",
        "optimizer",
        "step",
        "torch",
        "round",
        "outputs",
        "pred_labels",
        "extend",
        "predictions",
        "detach",
        "cpu",
        "numpy",
        "true_labels",
        "extend",
        "targets",
        "cpu",
        "numpy",
        "accuracy_score",
        "true_labels",
        "pred_labels",
        "train_loss_store",
        "fold",
        "append",
        "mean",
        "train_loss_collect",
        "train_acc_store",
        "fold",
        "append",
        "accuracy",
        "epoch",
        "epochs",
        "accuracy",
        "mean",
        "train_loss_collect",
        "model",
        "eval",
        "torch",
        "no_grad",
        "i",
        "len",
        "x_test",
        "batch_size",
        "torch",
        "tensor",
        "x_test",
        "i",
        "i",
        "batch_size",
        "to",
        "torch",
        "float32",
        "to",
        "device",
        "torch",
        "tensor",
        "y_test",
        "i",
        "i",
        "batch_size",
        "to",
        "torch",
        "float32",
        "to",
        "device",
        "model",
        "inputs",
        "flatten",
        "criterion",
        "outputs",
        "targets",
        "test_loss_collect",
        "append",
        "loss",
        "item",
        "inputs",
        "size",
        "torch",
        "round",
        "outputs",
        "test_pred_labels",
        "extend",
        "predicted_labels",
        "cpu",
        "numpy",
        "test_true_labels",
        "extend",
        "targets",
        "cpu",
        "numpy",
        "accuracy_score",
        "test_true_labels",
        "test_pred_labels",
        "test_acc_store",
        "fold",
        "append",
        "test_acc",
        "test_loss_store",
        "fold",
        "append",
        "mean",
        "test_loss_collect",
        "test_acc",
        "mean",
        "test_loss_collect",
        "confusion_matrix",
        "test_true_labels",
        "test_pred_labels",
        "overall_confusion_matrix_store",
        "fold",
        "append",
        "fold_conf_matrix",
        "models",
        "append",
        "model",
        "overall_confusion_matrix_store"
    ],
    "literals": [
        "'PYTHONHASHSEED'",
        "'0'",
        "\"GPU runtime selected, GPU device name:\"",
        "\"No GPU runtime, running on CPU mode\"",
        "'cuda:0'",
        "'cpu'",
        "f\"folder{fold}\"",
        "\"train.csv\"",
        "f\"folder{fold}/test.csv\"",
        "'CharLength'",
        "'TreeNewFeature'",
        "'nGramReputation_Alexa'",
        "'REBenign'",
        "'MinREBotnets'",
        "'Entropy'",
        "'InformationRadius'",
        "'utf-8'",
        "'utf-8'",
        "\"For Fold:\"",
        "f\"For epoch {epoch + 1}/{epochs}: Train Accuracy = {accuracy}, Train loss = {mean(train_loss_collect)}\"",
        "f\"                      : Test Accuracy = {test_acc}, Test loss = {mean(test_loss_collect)}\""
    ],
    "variables": [
        "SEED",
        "deterministic",
        "device",
        "num_data",
        "lr",
        "epochs",
        "train_path",
        "test_path",
        "features",
        "train_set",
        "test_set",
        "x_train",
        "y_train",
        "x_test",
        "y_test",
        "classifier",
        "y_hat",
        "batch_size",
        "num_folds",
        "criterion",
        "K",
        "models",
        "train_loss_store",
        "train_acc_store",
        "test_loss_store",
        "test_acc_store",
        "overall_confusion_matrix_store",
        "x_train",
        "y_train",
        "x_test",
        "y_test",
        "model",
        "optimizer",
        "fold_conf_matrix",
        "train_loss_collect",
        "true_labels",
        "pred_labels",
        "inputs",
        "targets",
        "outputs",
        "loss",
        "predictions",
        "accuracy",
        "test_loss_collect",
        "test_accuracy_collect",
        "test_pred_labels",
        "test_true_labels",
        "inputs",
        "targets",
        "outputs",
        "loss",
        "predicted_labels",
        "test_acc",
        "fold_conf_matrix"
    ],
    "comments": [
        "Classical library imports",
        "Assigning the seed value for the random function",
        "Checking if GPU is available or not",
        "Assigning learning rate for model and epochs",
        "qlayer,",
        "qlayer,",
        "qlayer,",
        "Define cost function",
        "Testing Loop",
        "Compute loss",
        "Accuracy"
    ],
    "docstrings": [],
    "functions": [
        "extract_data",
        "forward"
    ],
    "classes": [
        "Centralized_model"
    ]
}