{
    "identifiers": [
        "os",
        "logfire",
        "dotenv",
        "load_dotenv",
        "rich",
        "pydantic_ai",
        "Agent",
        "RunContext",
        "pydantic_ai",
        "models",
        "openai",
        "OpenAIModel",
        "pydantic_ai",
        "providers",
        "openai",
        "OpenAIProvider",
        "pydantic_ai",
        "usage",
        "UsageLimits",
        "load_dotenv",
        "os",
        "getenv",
        "logfire",
        "configure",
        "token",
        "logfire_token",
        "send_to_logfire",
        "os",
        "getenv",
        "os",
        "getenv",
        "api_key",
        "base_url",
        "model_name",
        "OpenAIModel",
        "OpenAIProvider",
        "api_key",
        "api_key",
        "base_url",
        "base_url",
        "OpenAIModel",
        "model_name",
        "provider",
        "provider",
        "setup_environment",
        "create_openai_model",
        "api_key",
        "base_url",
        "Agent",
        "model",
        "model",
        "system_prompt",
        "Agent",
        "model",
        "model",
        "result_type",
        "joke_selection_agent",
        "tool",
        "ctx",
        "RunContext",
        "count",
        "joke_generation_agent",
        "run",
        "count",
        "usage",
        "ctx",
        "usage",
        "r",
        "data",
        "joke_selection_agent",
        "run_sync",
        "usage_limits",
        "UsageLimits",
        "request_limit",
        "total_tokens_limit",
        "result",
        "data",
        "result",
        "usage",
        "result",
        "all_messages"
    ],
    "literals": [
        "\"LOGFIRE_TOKEN\"",
        "\"if-token-present\"",
        "\"OPENAI_API_KEY\"",
        "\"OPENAI_API_BASE\"",
        "\"deepseek-v3-250324\"",
        "\"Use the `joke_factory` to generate some jokes, then choose the best. \"",
        "\"You must return just a single joke.\"",
        "f\"Please generate {count} jokes.\"",
        "\"Tell me a joke.\"",
        "\"============================================================\"",
        "\"============================================================\""
    ],
    "variables": [
        "logfire_token",
        "provider",
        "api_key",
        "base_url",
        "model",
        "joke_selection_agent",
        "joke_generation_agent",
        "r",
        "result"
    ],
    "comments": [
        "'if-token-present' 表示如果没有配置 logfire，不会发送日志信息"
    ],
    "docstrings": [
        "\"\"\"加载环境变量并配置日志\"\"\"",
        "\"\"\"创建 OpenAI 模型实例\"\"\""
    ],
    "functions": [
        "setup_environment",
        "create_openai_model",
        "joke_factory"
    ],
    "classes": []
}