{
    "identifiers": [
        "ast",
        "ast",
        "NodeVisitor",
        "context",
        "context",
        "context",
        "node",
        "visit",
        "node",
        "body",
        "node",
        "isinstance",
        "node",
        "op",
        "ast",
        "And",
        "all",
        "visit",
        "c",
        "c",
        "node",
        "values",
        "isinstance",
        "node",
        "op",
        "ast",
        "Or",
        "visit",
        "c",
        "c",
        "node",
        "values",
        "NotImplementedError",
        "node",
        "op",
        "__doc__",
        "node",
        "isinstance",
        "node",
        "op",
        "ast",
        "Not",
        "visit",
        "node",
        "operand",
        "NotImplementedError",
        "node",
        "op",
        "__doc__",
        "node",
        "context",
        "get",
        "node",
        "id",
        "node",
        "isinstance",
        "node",
        "value",
        "node",
        "value",
        "ValueError",
        "node",
        "RuntimeError"
    ],
    "literals": [
        "\" Operator\"",
        "\" Operator\"",
        "\"non-boolean value\"",
        "\"non-boolean expression\""
    ],
    "variables": [
        "context"
    ],
    "comments": [
        "This program is free software; you can redistribute it and/or modify",
        "it under the terms of the GNU Affero General Public License as published by",
        "the Free Software Foundation; either version 3 of the License, or",
        "(at your option) any later version.",
        "",
        "This program is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.",
        "",
        "See LICENSE for more details.",
        "",
        "Copyright (c) 2025 ScyllaDB",
        "NOTE: based example from https://stackoverflow.com/a/70889491/459189",
        "Expression is the top-level AST node if you specify mode='eval'.",
        "That's not made very clear in the documentation. It's different",
        "from an Expr node, which represents an expression statement (and",
        "there are no statements in a tree produced with mode='eval').",
        "'and' and 'or' are BoolOp, and the parser collapses a sequence of",
        "the same operator into a single AST node. The class of the .op",
        "member identifies the operator, and the .values member is a list",
        "of expressions.",
        "This \"shouldn't happen\".",
        "'not' is a UnaryOp. So are a number of other things, like unary '-'.",
        "This error can happen. Try using the `~` operator.",
        "Name is a variable name. Technically, we probably should check the",
        "ctx member, but unless you decide to handle the walrus operator you",
        "should never see anything other than `ast.Load()` as ctx.",
        "I didn't check that the symbol table contains a boolean value,",
        "but you could certainly do that.",
        "The only constants we're really interested in are True and False,",
        "but you could extend this to handle other values like 0 and 1",
        "if you wanted to be more liberal",
        "I avoid calling str on the value in case that executes",
        "a dunder method.",
        "The `generic_visit` method is called for any AST node for",
        "which a specific visitor method hasn't been provided."
    ],
    "docstrings": [
        "\"\"\"\n        Create a new Boolean Evaluator.\n        If you want to allow named variables, give the constructor a\n        dictionary which maps names to values. Any name not in the\n        dictionary will provoke a NameError exception, but you could\n        use a defaultdict to provide a default value (probably False).\n        You can modify the symbol table after the evaluator is\n        constructed, if you want to evaluate an expression with different\n        values.\n        \"\"\""
    ],
    "functions": [
        "visit_Expression",
        "visit_BoolOp",
        "visit_UnaryOp",
        "visit_Name",
        "visit_Constant",
        "generic_visit"
    ],
    "classes": [
        "BooleanEvaluator"
    ]
}