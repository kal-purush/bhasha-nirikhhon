{
    "identifiers": [
        "pyamdgpuinfo",
        "json",
        "frequency_hz",
        "format_size",
        "frequency_hz",
        "binary",
        "replace",
        "replace",
        "size",
        "binary",
        "binary",
        "binary",
        "size",
        "index",
        "len",
        "suffixes",
        "size",
        "index",
        "size",
        "suffixes",
        "index",
        "pyamdgpuinfo",
        "detect_gpus",
        "n_devices",
        "pyamdgpuinfo",
        "get_gpu",
        "first_gpu",
        "query_temperature",
        "temperature",
        "first_gpu",
        "query_sclk",
        "format_frequency",
        "core_clock_hz",
        "first_gpu",
        "query_power",
        "first_gpu",
        "query_load",
        "gpu_load",
        "temperature",
        "formatted_gpu_load",
        "formatted_core_clock",
        "power_usage",
        "json",
        "dumps",
        "gpu_info",
        "ensure_ascii",
        "json_output",
        "json",
        "JSONDecodeError",
        "e",
        "e",
        "AttributeError",
        "e",
        "e",
        "ValueError",
        "e",
        "e",
        "RuntimeError",
        "e",
        "e",
        "OSError",
        "e",
        "e",
        "e",
        "e",
        "main"
    ],
    "literals": [
        "\"B\"",
        "\"Hz\"",
        "\"bytes\"",
        "\"Hz\"",
        "\"B\"",
        "\"KiB\"",
        "\"MiB\"",
        "\"GiB\"",
        "\"TiB\"",
        "\"B\"",
        "\"KB\"",
        "\"MB\"",
        "\"GB\"",
        "\"TB\"",
        "f\"{size:.0f} {suffixes[index]}\"",
        "\"No AMD GPUs detected.\"",
        "f\"{temperature:.0f}°C\"",
        "f\"{gpu_load:.1f}%\"",
        "\"GPU Temperature\"",
        "\"GPU Load\"",
        "\"GPU Core Clock\"",
        "\"GPU Power Usage\"",
        "f\"{power_usage} Watts\"",
        "f\"JSON Error: {str(e)}\"",
        "f\"Attribute Error: {str(e)}\"",
        "f\"Value Error: {str(e)}\"",
        "f\"Runtime Error: {str(e)}\"",
        "f\"OS Error: {str(e)}\"",
        "f\"Unexpected Error: {str(e)}\"",
        "\"__main__\""
    ],
    "variables": [
        "suffixes",
        "index",
        "n_devices",
        "first_gpu",
        "temperature",
        "temperature",
        "core_clock_hz",
        "formatted_core_clock",
        "power_usage",
        "gpu_load",
        "formatted_gpu_load",
        "gpu_info",
        "json_output"
    ],
    "comments": [
        "Detect the number of GPUs available",
        "Get GPU information for the first GPU (index 0)",
        "Query GPU temperature",
        "Format temperature to 2 digits with \"°C\"",
        "Query GPU core clock",
        "In Hz",
        "Query GPU power consumption",
        "Query GPU load",
        "Format GPU load to 1 decimal place",
        "Create a dictionary with the GPU information",
        "Convert the dictionary to a JSON string, ensure_ascii=False to prevent escaping",
        "Print the JSON string",
        "Handle JSON decoding errors (e.g., invalid JSON)",
        "Handle attribute errors (e.g., method not found)",
        "Handle value errors (e.g., invalid value for formatting)",
        "Handle runtime errors (e.g., issues with querying the GPU)",
        "Handle OS-related errors (e.g., hardware issues)",
        "Handle any other unexpected errors"
    ],
    "docstrings": [
        "\"\"\"\n    Takes a frequency (in Hz) and normalizes it: `Hz`, `MHz`, or `GHz`\n\n    Returns:\n        str: frequency string with the appropriate suffix applied\n    \"\"\"",
        "\"\"\"\n    Format size in bytes to a human-readable format.\n\n    Args:\n        size (int): Size in bytes.\n        binary (bool): If True, use binary (base 1024) units.\n\n    Returns:\n        str: Formatted size string.\n    \"\"\""
    ],
    "functions": [
        "format_frequency",
        "format_size",
        "main"
    ],
    "classes": []
}