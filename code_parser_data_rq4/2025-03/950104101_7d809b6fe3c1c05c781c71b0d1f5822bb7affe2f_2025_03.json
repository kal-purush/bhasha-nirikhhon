{
    "identifiers": [
        "AqieHistoricaldataPerfBackend",
        "Atomfeed",
        "Models",
        "AqieHistoricaldataPerfBackend",
        "Atomfeed",
        "Services",
        "AqieHistoricaldataPerfBackend",
        "Example",
        "Services",
        "Microsoft",
        "AspNetCore",
        "Mvc",
        "AqieHistoricaldataPerfBackend",
        "Atomfeed",
        "Models",
        "AtomHistoryModel",
        "AqieHistoricaldataPerfBackend",
        "Atomfeed",
        "Endpoints",
        "IEndpointRouteBuilder",
        "app",
        "app",
        "MapGet",
        "GetHealthcheckdata",
        "app",
        "MapGet",
        "GetHistorydataById",
        "app",
        "MapPost",
        "GetHistorydataById",
        "IResult",
        "IAtomHistoryService",
        "Persistence",
        "Persistence",
        "AtomHealthcheck",
        "Results",
        "Ok",
        "matches",
        "IResult",
        "FromBody",
        "querystringdata",
        "data",
        "IAtomHistoryService",
        "Persistence",
        "ILogger",
        "AtomHistoryService",
        "logger",
        "data",
        "Persistence",
        "GetAtomHourlydata",
        "data",
        "atomhourlyresult",
        "Results",
        "Ok",
        "atomhourlyresult",
        "Results",
        "NotFound",
        "Results",
        "NotFound",
        "ex",
        "logger",
        "LogError",
        "ex",
        "Message",
        "logger",
        "LogError",
        "ex",
        "StackTrace",
        "Results",
        "NotFound"
    ],
    "literals": [
        "\"AtomHistoryHealthchecks\"",
        "\"AtomHistoryHourlydata\"",
        "\"AtomHistoryHourlydata\"",
        "\"Error GetHistorydataById endpoints Info message {Error}\"",
        "\"Error GetHistorydataById endpoints Info stacktrace {Error}\""
    ],
    "variables": [
        "matches",
        "atomhourlyresult"
    ],
    "comments": [
        "app.MapGet(\"AtomHistoryHourlydata/{name}\", GetHistorydataById);",
        "private static async Task<IResult> GetHistorydataById(string name, IAtomHistoryService Persistence)",
        "{",
        "if (name is not null && !string.IsNullOrWhiteSpace(name))",
        "{",
        "var atomhourlyresult = await Persistence.GetAtomHourlydata(name);",
        "//return Results.File(atomhourlyresult,)",
        "return atomhourlyresult is not null ? Results.Ok(atomhourlyresult) : Results.NotFound();",
        "}",
        "else",
        "{",
        "return Results.NotFound();",
        "}",
        "}",
        "return Results.File(atomhourlyresult,)"
    ],
    "docstrings": [],
    "functions": [
        "UseServiceAtomHistoryEndpoints",
        "GetHealthcheckdata",
        "GetHistorydataById"
    ],
    "classes": [
        "AtomHistoryEndpoints"
    ]
}