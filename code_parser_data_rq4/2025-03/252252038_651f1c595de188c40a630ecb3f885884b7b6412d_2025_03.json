{
    "identifiers": [
        "exports",
        "exports",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "base_platform_1",
        "path",
        "e",
        "e",
        "child_process",
        "e",
        "e",
        "process",
        "child_process",
        "e",
        "e",
        "child_process",
        "e",
        "e",
        "all",
        "process",
        "child_process",
        "child_process",
        "parseInt",
        "uid",
        "parseInt",
        "gid",
        "os",
        "os",
        "port",
        "child_process",
        "e",
        "job",
        "job",
        "targetPath",
        "job",
        "child_process",
        "e",
        "child_process",
        "e",
        "process",
        "process",
        "process",
        "child_process",
        "e",
        "fs",
        "sudoers",
        "sudoersEntry",
        "child_process",
        "sudoersEntry",
        "e",
        "fs",
        "path",
        "x",
        "x",
        "fs",
        "permissionScriptPath",
        "permissionScript",
        "fs",
        "permissionScriptPath",
        "exports",
        "LinuxInstaller"
    ],
    "literals": [
        "\"use strict\"",
        "\"__esModule\"",
        "\"child_process\"",
        "\"os\"",
        "\"path\"",
        "\"fs-extra\"",
        "\"semver\"",
        "\"systeminformation\"",
        "\"../base-platform\"",
        "'/etc/hb-service'",
        "'prestart.d'",
        "'ERROR: Failed Operation'",
        "'fail'",
        "Starting ${this.hbService.serviceName} Service...",
        "/etc/init.d/homebridge start",
        "${this.hbService.serviceName} Started",
        "'succeed'",
        "Failed to start ${this.hbService.serviceName} -",
        "'fail'",
        "Stopping ${this.hbService.serviceName} Service...",
        "/etc/init.d/homebridge stop",
        "${this.hbService.serviceName} Stopped",
        "'succeed'",
        "Failed to stop ${this.systemdServiceName} -",
        "'fail'",
        "Restarting ${this.hbService.serviceName} Service...",
        "/etc/init.d/homebridge restart",
        "${this.hbService.serviceName} Restarted",
        "'succeed'",
        "Failed to restart ${this.hbService.serviceName} -",
        "'fail'",
        "'You cannot rebuild in the Openwrt.'",
        "id -u ${this.hbService.asUser}",
        "'utf8'",
        "id -g ${this.hbService.asUser}",
        "'utf8'",
        "'pidof homebridge'",
        "'utf8'",
        "'You cannot update Nodejs in the Openwrt.'",
        "'You cannot update Nodejs in the Openwrt.'",
        "'You cannot update Nodejs in the Openwrt.'",
        "/etc/init.d/homebridge enable 2> /dev/null",
        "'WARNING: failed to run \"enable homebridge\"'",
        "'warn'",
        "/etc/init.d/homebridge disable 2> /dev/null",
        "'WARNING: failed to run \"disable homebridge\"'",
        "'warn'",
        "'ERROR: This command must be executed using sudo on Linux'",
        "'fail'",
        "EXAMPLE: sudo hb-service ${this.hbService.action}",
        "'fail'",
        "'install'",
        "'ERROR: User parameter missing. Pass in the user you want to run Homebridge as using the --user flag eg.'",
        "'fail'",
        "EXAMPLE: sudo hb-service ${this.hbService.action} --user your-user",
        "'fail'",
        "id ${this.hbService.asUser} 2> /dev/null",
        "WARNING: The ${this.hbService.asUser} user does not exist.",
        "${this.hbService.asUser}    ALL=(ALL) NOPASSWD:SETENV: /etc/init.d/homebridge, /sbin/halt, /sbin/reboot, /sbin/poweroff, /sbin/logread, /usr/bin/npm, /usr/bin/hb-service",
        "'/etc/sudoers'",
        "'utf-8'",
        "echo '${sudoersEntry}' | sudo EDITOR='tee -a' visudo",
        "'WARNING: Failed to setup /etc/sudoers, you may not be able to shutdown/restart your server from the Homebridge UI.'",
        "'warn'",
        "'10-fix-permissions'",
        "'#!/bin/sh'",
        "''",
        "'# Ensure the storage path permissions are correct'",
        "'if [ -n \"$UIX_STORAGE_PATH\" ] && [ -n \"$USER\" ]; then'",
        "'  echo \"Ensuring $UIX_STORAGE_PATH is owned by $USER\"'",
        "'  [ -d $UIX_STORAGE_PATH ] || mkdir -p $UIX_STORAGE_PATH'",
        "'  chown -R $USER: $UIX_STORAGE_PATH'",
        "'fi'",
        "'\\n'",
        "'755'"
    ],
    "variables": [
        "child_process",
        "os",
        "path",
        "fs",
        "semver",
        "si",
        "base_platform_1",
        "uid",
        "gid",
        "sudoersEntry",
        "sudoers",
        "permissionScriptPath",
        "permissionScript"
    ],
    "comments": [
        "# sourceMappingURL=linux.js.map"
    ],
    "docstrings": [],
    "functions": [
        "systemdServiceName",
        "runPartsPath",
        "install",
        "uninstall",
        "start",
        "stop",
        "restart",
        "rebuild",
        "getId",
        "getPidOfPort",
        "updateNodejs",
        "updateNodeFromTarball",
        "updateNodeFromNodesource",
        "enableService",
        "disableService",
        "checkForRoot",
        "checkUser",
        "setupSudo",
        "createRunPartsPath"
    ],
    "classes": [
        "LinuxInstaller"
    ]
}