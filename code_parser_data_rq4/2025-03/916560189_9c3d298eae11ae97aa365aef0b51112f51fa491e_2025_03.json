{
    "identifiers": [
        "org",
        "telran",
        "lecture_13_bst",
        "practice",
        "key",
        "value",
        "left",
        "right",
        "key",
        "value",
        "key",
        "key",
        "value",
        "value",
        "left",
        "right",
        "root",
        "length",
        "root",
        "key",
        "value",
        "newNode",
        "key",
        "value",
        "root",
        "root",
        "newNode",
        "insertNode",
        "root",
        "newNode",
        "node",
        "newNode",
        "newNode",
        "key",
        "node",
        "key",
        "node",
        "left",
        "node",
        "left",
        "newNode",
        "length",
        "insertNode",
        "node",
        "left",
        "newNode",
        "newNode",
        "key",
        "node",
        "key",
        "node",
        "right",
        "node",
        "right",
        "newNode",
        "length",
        "insertNode",
        "node",
        "right",
        "newNode",
        "node",
        "value",
        "newNode",
        "value",
        "key",
        "node",
        "searchNode",
        "root",
        "key",
        "node",
        "node",
        "value",
        "node",
        "key",
        "node",
        "key",
        "node",
        "key",
        "searchNode",
        "node",
        "left",
        "key",
        "key",
        "node",
        "key",
        "searchNode",
        "node",
        "right",
        "key",
        "node",
        "length",
        "root",
        "displayNode",
        "root",
        "node",
        "prefix",
        "isLeft",
        "node",
        "displayPrefix",
        "prefix",
        "isLeft",
        "directionIndicator",
        "isLeft",
        "displayPrefix",
        "directionIndicator",
        "node",
        "key",
        "node",
        "value",
        "childPrefix",
        "prefix",
        "isLeft",
        "node",
        "left",
        "node",
        "right",
        "displayNode",
        "node",
        "left",
        "childPrefix",
        "displayNode",
        "node",
        "right",
        "childPrefix",
        "args",
        "tree",
        "tree",
        "insert",
        "tree",
        "displayTree"
    ],
    "literals": [
        "\"zero\"",
        "\"zero\"",
        "\"Дерево пустое.\"",
        "\"\"",
        "\"├── \"",
        "\"└── \"",
        "\"L: \"",
        "\"R: \"",
        "\":\"",
        "\"│   \"",
        "\"    \"",
        "\"Ivan\""
    ],
    "variables": [
        "key",
        "value",
        "left",
        "right",
        "root"
    ],
    "comments": [
        "TODO: добавить отслеживание баланса this.balanceFactor = 0;",
        "Реализовать обновление при вставке",
        "TODO-1[complete]: Доработайте код, чтобы все ключи были уникальные.",
        "Найдена дублирующая Нода",
        "TODO-3[complete]: напишите реализацию метода",
        "TODO-4: напишите реализацию метода",
        "Заглушка",
        "TODO-5: напишите реализацию метода",
        "Заглушка",
        "TODO-2[complete]: реализуйте метод, возвращающий количество узлов в дереве"
    ],
    "docstrings": [
        "* Конструктор для создания нового узла.\n     *\n     * @param key   Ключ узла.\n     * @param value Значение узла.",
        "* Конструктор для создания нового бинарного дерева поиска.",
        "* Вставляет новый узел в дерево.\n     *\n     * @param key   Ключ нового узла.\n     * @param value Значение нового узла.",
        "* Рекурсивно вставляет новый узел в поддерево.\n     *\n     * @param node    Текущий узел.\n     * @param newNode Новый узел.",
        "* Ищет значение узла по заданному ключу.\n     *\n     * @param key Ключ искомого узла.\n     * @return Значение найденного узла или null, если узел не найден.",
        "* Рекурсивно ищет узел с заданным ключом в поддереве.\n     *\n     * @param node Текущий узел.\n     * @param key  Ключ искомого узла.\n     * @return Найденный узел или null, если узел не найден.",
        "* Находит минимальный узел в дереве.\n     *\n     * @return Минимальный узел или null, если дерево пустое.",
        "* Находит максимальный узел в дереве.\n     *\n     * @return Максимальный узел или null, если дерево пустое.",
        "* Отображает дерево в виде древовидной структуры в терминале.",
        "* Рекурсивно отображает узел и его поддеревья.\n     *\n     * @param node   Текущий узел.\n     * @param prefix Префикс для отображения уровня дерева.\n     * @param isLeft Флаг, указывающий, является ли узел левым дочерним."
    ],
    "functions": [
        "Node",
        "AVLTree",
        "insert",
        "insertNode",
        "search",
        "Node",
        "searchNode",
        "Node",
        "min",
        "Node",
        "max",
        "length",
        "displayTree",
        "displayNode",
        "main"
    ],
    "classes": [
        "Node",
        "AVLTree"
    ]
}