{
    "identifiers": [
        "Injectable",
        "HttpEvent",
        "HttpInterceptor",
        "HttpHandler",
        "HttpRequest",
        "HttpErrorResponse",
        "HttpResponse",
        "throwError",
        "Observable",
        "BehaviorSubject",
        "of",
        "catchError",
        "take",
        "switchMap",
        "finalize",
        "AuthService",
        "Injectable",
        "BehaviorSubject",
        "authService",
        "req",
        "next",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "next",
        "req",
        "HttpResponse",
        "catchError",
        "error",
        "error",
        "error",
        "result",
        "result",
        "take",
        "switchMap",
        "next",
        "req",
        "switchMap",
        "success",
        "success",
        "next",
        "req",
        "finalize",
        "throwError",
        "error",
        "of",
        "request",
        "localStorage",
        "authToken",
        "request",
        "request",
        "request",
        "authToken"
    ],
    "literals": [
        "\"@angular/core\"",
        "\"@angular/common/http\"",
        "\"rxjs\"",
        "\"rxjs/operators\"",
        "'./auth.service'",
        "\"Authorization\"",
        "\"secrettoken\"",
        "'Content-Type'",
        "'Content-Type'",
        "'application/json'",
        "'event--->>>'",
        "'token'",
        "\"Bearer \""
    ],
    "variables": [
        "authToken"
    ],
    "comments": [
        "401 errors are most likely going to be because we have an expired token that we need to refresh.",
        "If refreshTokenInProgress is true, we will wait until refreshTokenSubject has a non-null value",
        "which means the new token is ready and we can retry the request again",
        "Set the refreshTokenSubject to null so that subsequent API calls will wait until the new token has been retrieved",
        "When the call to refreshToken completes we reset the refreshTokenInProgress to false",
        "for the next time the token needs to be refreshed",
        "return of(localStorage.getItem('RefreshToken'));",
        "If we do not have a token yet then we should not set the header.",
        "Here we could first retrieve the token from where we store it.",
        "If you are calling an outside domain then do not add the token.",
        "if (!request.url.match(/www.mydomain.com\\//)) {",
        "return request;",
        "}"
    ],
    "docstrings": [
        "*"
    ],
    "functions": [
        "intercept",
        "refreshAccessToken",
        "addAuthenticationToken"
    ],
    "classes": [
        "AuthInterceptor"
    ]
}