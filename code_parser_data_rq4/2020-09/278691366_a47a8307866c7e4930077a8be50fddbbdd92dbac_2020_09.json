{
    "identifiers": [
        "sys",
        "socket",
        "selectors",
        "types",
        "time",
        "connid",
        "actualState",
        "actualName",
        "actualCurrentTime",
        "actualState",
        "connid",
        "actualName",
        "actualCurrentTime",
        "connid",
        "actualState",
        "connid",
        "connid",
        "newName",
        "newName",
        "connid",
        "newName",
        "newName",
        "newName",
        "newName",
        "wifiName",
        "actualName",
        "wifiState",
        "connid",
        "connid",
        "state",
        "state",
        "wifiState",
        "actualState",
        "connid",
        "actualState",
        "actualState",
        "actualState",
        "selector",
        "initialStateList",
        "selector",
        "len",
        "initialStateList",
        "start_connections",
        "initialStateList",
        "initialStateList",
        "host",
        "port",
        "i",
        "num_conns",
        "i",
        "connid",
        "server_addr",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_STREAM",
        "sock",
        "setblocking",
        "sock",
        "connect_ex",
        "server_addr",
        "selectors",
        "EVENT_READ",
        "selectors",
        "EVENT_WRITE",
        "types",
        "SimpleNamespace",
        "connid",
        "connid",
        "messages",
        "outb",
        "sel",
        "register",
        "sock",
        "events",
        "data",
        "data",
        "lightModuleDict",
        "lightModuleClient",
        "connid",
        "initialStateList",
        "i",
        "initialStateList",
        "i",
        "initialStateList",
        "i",
        "lightModuleDict",
        "connid",
        "time",
        "time",
        "connid",
        "host",
        "port",
        "connid",
        "server_addr",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_STREAM",
        "sock",
        "setblocking",
        "sock",
        "connect_ex",
        "server_addr",
        "selectors",
        "EVENT_READ",
        "selectors",
        "EVENT_WRITE",
        "types",
        "SimpleNamespace",
        "connid",
        "connid",
        "messages",
        "outb",
        "sel",
        "register",
        "sock",
        "events",
        "data",
        "data",
        "lightModuleDict",
        "connid",
        "time",
        "time",
        "key",
        "mask",
        "key",
        "fileobj",
        "key",
        "data",
        "lightModuleDict",
        "data",
        "connid",
        "mask",
        "selectors",
        "EVENT_READ",
        "sock",
        "recv",
        "recv_data",
        "repr",
        "recv_data",
        "data",
        "connid",
        "recv_data",
        "lightModule",
        "changeWifiState",
        "recv_data",
        "lightModule",
        "confirmState",
        "stateConfirmation",
        "stateConfirmation",
        "data",
        "messages",
        "data",
        "messages",
        "stateConfirmation",
        "data",
        "messages",
        "data",
        "messages",
        "recv_data",
        "lightModule",
        "connect",
        "recv_data",
        "lightModule",
        "changeWifiName",
        "recv_data",
        "recv_data",
        "lightModule",
        "confirmNameChange",
        "recv_data",
        "data",
        "messages",
        "data",
        "messages",
        "recv_data",
        "data",
        "connid",
        "sel",
        "unregister",
        "sock",
        "sock",
        "close",
        "lightModule",
        "disconnect",
        "attemptReconnection",
        "data",
        "connid",
        "lightModule",
        "connectionStatus",
        "lightModule",
        "connectionStatus",
        "time",
        "time",
        "lightModule",
        "lastConnectionAttemptTime",
        "data",
        "connid",
        "sel",
        "unregister",
        "sock",
        "sock",
        "close",
        "lightModule",
        "disconnect",
        "attemptReconnection",
        "data",
        "connid",
        "mask",
        "selectors",
        "EVENT_WRITE",
        "data",
        "outb",
        "data",
        "messages",
        "data",
        "messages",
        "pop",
        "data",
        "outb",
        "repr",
        "data",
        "outb",
        "data",
        "connid",
        "sock",
        "send",
        "data",
        "outb",
        "data",
        "outb",
        "sent",
        "lightModuleDict",
        "lightModuleDict",
        "lightModule",
        "connectionStatus",
        "lightModule",
        "wifiState",
        "lightModule",
        "wifiName",
        "actualLightState",
        "actualLightState",
        "actualLightState",
        "lightModuleDict",
        "lightModuleDict",
        "stateInput",
        "lightModule",
        "changeActualState",
        "stateInput",
        "lightModule",
        "changeActualState",
        "lightModule",
        "changeActualName",
        "nameInput",
        "sel",
        "select",
        "timeout",
        "events",
        "key",
        "mask",
        "events",
        "service_connection",
        "key",
        "mask",
        "sel",
        "get_map",
        "KeyboardInterrupt"
    ],
    "literals": [
        "\"NOTYETCONNECTED\"",
        "\"    Light \"",
        "\" is NOT YET CONNECTED.\"",
        "\"CONNECTED\"",
        "\"    Light \"",
        "\" is now CONNECTED.\"",
        "\"DISCONNECTED\"",
        "\"    Light \"",
        "\" is currently DISCONNECTED.\"",
        "\"    Light \"",
        "\" is now WIFI NAMED \"",
        "\"OFF\"",
        "\"ON\"",
        "\"    Light \"",
        "\" is now WIFI ON.\"",
        "\"OFF\"",
        "\"    Light \"",
        "\" is now WIFI OFF.\"",
        "\"    Light \"",
        "\" is now CONFIRMED \"",
        "\"192.168.4.1\"",
        "\"50007\"",
        "\"attempting connection\"",
        "\"to\"",
        "b\"\"",
        "\"reattempting connection\"",
        "\"to\"",
        "b\"\"",
        "\"received\"",
        "\"from connection\"",
        "b\"CHANGE STATE\"",
        "b\"CONFIRM STATE\"",
        "\"ON\"",
        "b\"STATENOTCHANGED_ON\"",
        "b\"STATENOTCHANGED_OFF\"",
        "\"ON\"",
        "b\"STATECHANGED_ON\"",
        "b\"STATECHANGED_OFF\"",
        "b\"CONNECTED\"",
        "b\"CHANGEN\"",
        "b'CONFIRMCHANG'",
        "b\"NAMENOTCHANGED\"",
        "b\"NAMECHANGED\"",
        "\"closing socket\"",
        "\"NOTYETCONNECTED\"",
        "\"DISCONNECTED\"",
        "\"closing socket\"",
        "\"sending\"",
        "\"to connection\"",
        "\"ON\"",
        "\"ON\"",
        "\"OFF\"",
        "\"OFF\"",
        "\"caught keyboard interrupt, exiting\""
    ],
    "variables": [
        "wifiState",
        "actualState",
        "connectionStatus",
        "connid",
        "wifiName",
        "actualName",
        "actualCurrentTime",
        "lastConnectionAttemptTime",
        "connectionStatus",
        "wifiState",
        "connectionStatus",
        "wifiState",
        "wifiName",
        "actualName",
        "wifiState",
        "wifiState",
        "actualState",
        "sel",
        "lightModuleDict",
        "num_conns",
        "host",
        "port",
        "server_addr",
        "connid",
        "sock",
        "events",
        "data",
        "connid",
        "lastConnectionAttemptTime",
        "server_addr",
        "sock",
        "events",
        "data",
        "lastConnectionAttemptTime",
        "sock",
        "data",
        "lightModule",
        "recv_data",
        "stateConfirmation",
        "data",
        "outb",
        "sent",
        "data",
        "outb",
        "lightModule",
        "stateInput",
        "nameInput",
        "lightModule",
        "events"
    ],
    "comments": [
        "\"OFF\" is off, \"ON\" is on, None is disconnected from base station",
        "the actual current state of the light, \"OFF\" or \"ON\"",
        "whether connected to base station; can be \"NOTYETCONNECTED\", \"CONNECTED\", or \"DISCONNECTED\"",
        "the ID number of the light",
        "the name of the light module as recommended by the wifi; None if the wifi is disconnected or has not yet tried to change the name",
        "the current actual currently stored name of the light module",
        "the time the light has been on for",
        "The time of the last attempt to connect to the base station",
        "light becoming connected to a base station",
        "start wifiState to be the same as the current actualState",
        "light becoming disconnected from a base station",
        "change of name has been requested",
        "the actual name of the light has been changed",
        "check if the actual name matches the name requested by wifi",
        "change the wifi recommended state of the light",
        "change the actual state of the light",
        "yet to be properly implemented using the self.actualLightState variable in the wifiCommunicator class",
        "returns [True/False for whether it is confirmed, self.actualState]",
        "if the server is making sure that the light is on, ensure the light is on",
        "def closeLight(self):#This is no longer relevant",
        "print(\"    Light \", self.connid, \"is now OFFLINE.\")",
        "initialStateList is in the format [[actualState, actualName, actualCurrentTime], ... repeated for each light]",
        "THIS HAS TO BE COMPLETELY REDONE TO REATTEMPT CONNECTION IF UNSUCCESSFUL THE FIRST TIME!!!!!!!!",
        "msg_total=sum(len(m) for m in messages),",
        "recv_total=0,",
        "list(messages),",
        "record the time this connection attempt was made",
        "reattempt to connect to a light module if it was not able to connect to base station (the old socket must first be unregistered)",
        "msg_total=sum(len(m) for m in messages),",
        "recv_total=0,",
        "list(messages),",
        "record the time this connection attempt was made",
        "in addition to the \"if not recv_data\", might need an try except statement for when the base station disconnects from the piui...",
        "Should be ready to read",
        "data.recv_total += len(recv_data)",
        "turn the light on or off",
        "if the light has not yet changed state",
        "if the light has successfully changed state",
        "full command is CHANGENAME_newName",
        "set the name of the light to the name in the wifi message",
        "full command is CONFIRMCHANGENAME_newName",
        "check whether the light name has been changed",
        "confirm that the name has not been changed",
        "confirm that the name has been changed",
        "or data.recv_total == data.msg_total: #if it gets disconnected from the base station",
        "properly disconnect the light module socket",
        "self.lightModuleDict.pop(data.connid)#we are no elimintating the light module when the base station gets disconnected",
        "attempt to reconnect the light module",
        "if the current light module has passed 2 seconds since attempting to connect to base station without response, reattempt connection",
        "nevermind... the below if statement should not be used",
        "if not data.messages:#must check to make sure that no incoming messages were just received",
        "if the light is currently disconnected and the last attempt to connect was greater than 2 seconds ago...",
        "properly disconnect the light module socket",
        "Should be ready to write",
        "REMAKE THIS FUNCTION BASED ON THE NEW LIGHTMODULE MODIFICATIONS",
        "REMAKE THIS FUNCTION BASED ON THE NEW LIGHTMODULE MODIFICATIONS",
        "something along the lines of self.actualLightState = actualLightState",
        "check if the light modules have been initialized yet",
        "set the light module's actual state to match what the main loop program on the pi0 is saying",
        "set the light module's actual name to match what the main loop program is saying",
        "Check for a socket being monitored to continue."
    ],
    "docstrings": [
        "'''\nASSUMPTIONS\n-DONE: the wifiCommunicator will only be initialized once for each power on of the pi0. Thus, the lightModuleClients should\ncontinue to be stored even if the light gets disconnected from the base station and reconnected, although the corresponding\nport numbers will change. (In the case of being disconnected from the base station, I should consult with the team as to \nwhat happens) \n\n-MAINLY DONE but main loop must also be changed: I am adding a variable to store the current actual state of the light module in each lightModuleClient. \nWhen initializing the wifiCommunicator class, I will add parameters for the main loop program to fill in this \nactual state variable with the actual current state of the light.\nThe wifiRecommendedStateVariable will be initialized to an unknown state until the pi0 connects to a basestation and attempts\nto change the said state.\n\n-DONE: MAINLY DONE but needs to be cleaned up, especially in the wificommunicator functions: It is the job of the multiconnclientclass program to deal with confirming for the basestation that the light has\nactually changed state (ie name, brightness, etc.). Ie process as follows: state change request received; wifiRecommendedStateVariable\nchanges (perhaps we should also change the actual current state variable to unknown); then the confirm state is called by the main program\nand the actual current state variable is updated with that; then whenever the basestation wants to confirm a change it calls with a confirm \ncommand over the wifi, where the pi0 checks if the actual and recommended variables match yet\n\n-DONE: TO BE DONE ie with the try catch: I have to have a plan for what to do when the piui disconnects from the base station. In this case\nI think the base station will continue to hold all the information about all the lights. I should ask the\nrest of the team whether we should inform the light modules that the piui has been disconnected from them.\nIn theory it is possible to go without informing the light modules whne the piui gets disconnected and instead\ndeal with this issue only in the basestation, as there are no commands that the light modules have to perform\nwhich require confirmation from the piui.\nIf the piui gets disconnected, I can assume that the wifiRecommendedStateVariable will remain what it was before the piui\ngot disconnected.\nIf the pi0 is disconnected from the base station, I will set wifiRecommendedStateVariables to None.\n\n-DONE: Start wifiState in the same state as the current actualState\n\n-LATER: I WILL ASLO HAVE TO ADD A TIMER COMPLETE OFF STATE FOR THE LIGHT, ie I need to figure out adding a triggeredOff state. Also I should\ndiscuss with the others exactly what needs to be done in this situation.\n\n-DONE: I NEED TO MAKE BASE STATION CONNECTION AND RECONNECTION ATTEMPTS KEEP TRYING UNTIL A BASE STATION CONNECTS, instead of only once\nand then not continuing to try if the connection is unsuccessful. If will make a queue of light modules that need to be connected but \nhave not yet been connected...\n\n'''",
        "'''THIS IS OLD AND NO LONGER NEEDED, we must now only change wifiState and then only confirm the light is on when it has actually been turned on\n                    #ACTUALLY NEVERMIND SOMETHING LIKE THIS IS GOOD TO HAVE AS SOON AS THE STATE IS CHANGED...\n                    if lightModule.wifiState == \"OFF\":\n                        data.messages += [b\"TURNED OFF\"]\n                    else:\n                        data.messages += [b\"TURNED ON\"]\n                    '''",
        "'''THIS WHOLE SECTION MSUST BE REMADE WITH THE SINGLE NEW CONFIRMSTATE FUNCTION\n                if (recv_data == b\"CONFIRM ON\"):\n                    lightModule.confirmOn()\n                    data.messages += [b\"CONFIRMED ON\"]\n                if (recv_data == b\"CONFIRM OFF\"):\n                    lightModule.confirmOff()\n                    data.messages += [b\"CONFIRMED OFF\"]\n                '''",
        "'''\n    This function returns the state of the light wifi command in the light dict with the highest connID on this pi0\n    (obviously there would be usually only 1 light module for a given pi0... but this format is useful for testing)\n\n    ####################################\n    ACTUALLY SHOULD CHANGE IT TO WORK WITH THE LIGHT OF CONNID=1 FOR SIMPLICITY\n    ####################################\n\n    Outputs:\n        - None if there are no light modules initialized\n        - State if there is a light module, a list with the following elements in order: \n            -\"CONNECTED\"/\"NOTYETCONNECTED\"/\"DISCONNECTED\"\n            -\"ON\"/\"OFF\"\n            -nameOfLight\n        where nameOfLight is the name which the wifi is requesting that the lightModuleBeNamed\n\n    Note that we have not dealt with the edge case of the piui disconnecting... ie [\"DISCONNECTED\", \"ON\"]\n    '''",
        "'''\n        state = None\n        highestConnID = -1\n        for id in self.lightModuleDict:#iterate through each light module on this pi0 \n            if id > highestConnID: #if we have found a light with a new higher connid than previously... update the state with info for this light\n                if lightModule.wifiState is None:\n                    state = [\"DISCONNECTED\", \"OFF\", lightModule.wifiName]\n                elif lightModule.wifiState == 1:\n                    state = [\"CONNECTED\", \"ON\", lightModule.wifiName]\n                elif lightModule.wifiState == 0:\n                    state = [\"CONNECTED\", \"OFF\", lightModule.wifiName]\n\n        '''",
        "'''\n    Tells the wifiCommunicator class about the actual state of the light\n\n    The wifi's response to this has not yet been implemented.\n\n    Input argument: Can be one of [\"ON\", nameOfLight, currentTime, triggeredOFF]\n    where nameOfLight is the name of the light, currentTime is the currentTime the light has been on for, and \n    triggeredOFF is boolean whether the motion sensor has been triggered\n    '''"
    ],
    "functions": [
        "connect",
        "disconnect",
        "changeWifiName",
        "changeActualName",
        "confirmNameChange",
        "changeWifiState",
        "changeActualState",
        "confirmState",
        "start_connections",
        "attemptReconnection",
        "service_connection",
        "getState",
        "confirmState",
        "checkWifi"
    ],
    "classes": [
        "lightModuleClient",
        "wifiCommunicator"
    ]
}