{
    "identifiers": [
        "re",
        "astropy",
        "units",
        "u",
        "numpy",
        "np",
        "pandas",
        "pd",
        "qgrid",
        "plotly",
        "graph_objects",
        "go",
        "plotly",
        "callbacks",
        "BoxSelector",
        "ipywidgets",
        "ipw",
        "tardis",
        "analysis",
        "LastLineInteraction",
        "tardis",
        "util",
        "species_tuple_to_string",
        "species_string_to_tuple",
        "tardis",
        "widgets",
        "util",
        "create_table_widget",
        "TableSummaryLabel",
        "lines_data",
        "line_interaction_analysis",
        "spectrum_wavelength",
        "spectrum_luminosity_density_lambda",
        "virt_spectrum_wavelength",
        "virt_spectrum_luminosity_density_lambda",
        "lines_data",
        "line_interaction_analysis",
        "create_table_widget",
        "data",
        "get_species_interactions",
        "col_widths",
        "table_options",
        "max_rows_option",
        "create_table_widget",
        "data",
        "get_last_line_counts",
        "col_widths",
        "line_counts_col_widths",
        "table_options",
        "max_rows_option",
        "TableSummaryLabel",
        "target_table",
        "last_line_counts_table",
        "table_col_widths",
        "line_counts_col_widths",
        "label_key",
        "label_value",
        "plot_spectrum",
        "spectrum_wavelength",
        "spectrum_luminosity_density_lambda",
        "virt_spectrum_wavelength",
        "virt_spectrum_luminosity_density_lambda",
        "ipw",
        "ToggleButtons",
        "options",
        "FILTER_MODES_DESC",
        "index",
        "ipw",
        "Dropdown",
        "options",
        "GROUP_MODES_DESC",
        "index",
        "classmethod",
        "cls",
        "sim",
        "cls",
        "lines_data",
        "sim",
        "plasma",
        "lines",
        "reset_index",
        "set_index",
        "line_interaction_analysis",
        "filter_mode",
        "LastLineInteraction",
        "from_model",
        "sim",
        "filter_mode",
        "filter_mode",
        "cls",
        "FILTER_MODES",
        "spectrum_wavelength",
        "sim",
        "runner",
        "spectrum",
        "wavelength",
        "spectrum_luminosity_density_lambda",
        "sim",
        "runner",
        "spectrum",
        "luminosity_density_lambda",
        "to",
        "virt_spectrum_wavelength",
        "sim",
        "runner",
        "spectrum_virtual",
        "wavelength",
        "virt_spectrum_luminosity_density_lambda",
        "sim",
        "runner",
        "spectrum_virtual",
        "luminosity_density_lambda",
        "to",
        "wavelength_range",
        "filter_mode",
        "FILTER_MODES",
        "wavelength_range",
        "line_interaction_analysis",
        "filter_mode",
        "wavelength_range",
        "u",
        "AA",
        "line_interaction_analysis",
        "filter_mode",
        "wavelength_range",
        "u",
        "AA",
        "line_interaction_analysis",
        "filter_mode",
        "last_line_in",
        "groupby",
        "selected_species_group",
        "groups",
        "species_tuple_to_string",
        "item",
        "item",
        "selected_species_group",
        "groups",
        "keys",
        "selected_species_group",
        "size",
        "line_interaction_analysis",
        "filter_mode",
        "last_line_in",
        "shape",
        "pd",
        "Series",
        "pd",
        "Series",
        "pd",
        "Index",
        "selected_species_symbols",
        "name",
        "fractional_species_interactions",
        "sort_values",
        "ascending",
        "to_frame",
        "selected_species",
        "filter_mode",
        "FILTER_MODES",
        "group_mode",
        "GROUP_MODES",
        "selected_species",
        "species_string_to_tuple",
        "selected_species",
        "line_interaction_analysis",
        "filter_mode",
        "last_line_in",
        "xs",
        "key",
        "selected_species_tuple",
        "level",
        "drop_level",
        "reset_index",
        "line_interaction_analysis",
        "filter_mode",
        "last_line_out",
        "xs",
        "key",
        "selected_species_tuple",
        "level",
        "drop_level",
        "reset_index",
        "current_last_lines_in",
        "empty",
        "current_last_lines_out",
        "empty",
        "KeyError",
        "AssertionError",
        "species_tuple_to_string",
        "species",
        "species",
        "line_interaction_analysis",
        "filter_mode",
        "last_line_in",
        "groupby",
        "groups",
        "keys",
        "ValueError",
        "allowed_species",
        "group_mode",
        "current_last_lines_out",
        "line_id",
        "current_last_lines_in",
        "groupby",
        "line_id",
        "count",
        "grouped_line_interactions",
        "size",
        "iteritems",
        "lines_data",
        "loc",
        "line_id",
        "lines_data",
        "loc",
        "line_id",
        "last_line_interaction_string",
        "append",
        "current_line_in",
        "level_number_lower",
        "current_line_in",
        "level_number_upper",
        "current_line_in",
        "wavelength",
        "current_line_out",
        "level_number_upper",
        "current_line_out",
        "level_number_lower",
        "current_line_out",
        "wavelength",
        "interacting_packets_count",
        "append",
        "count",
        "group_mode",
        "current_last_lines_in",
        "groupby",
        "line_id",
        "count",
        "grouped_line_interactions",
        "size",
        "iteritems",
        "lines_data",
        "loc",
        "line_id",
        "last_line_interaction_string",
        "append",
        "current_line_in",
        "level_number_lower",
        "current_line_in",
        "level_number_upper",
        "current_line_in",
        "wavelength",
        "interacting_packets_count",
        "append",
        "count",
        "group_mode",
        "current_last_lines_out",
        "groupby",
        "line_id",
        "count",
        "grouped_line_interactions",
        "size",
        "iteritems",
        "lines_data",
        "loc",
        "line_id",
        "last_line_interaction_string",
        "append",
        "current_line_out",
        "level_number_upper",
        "current_line_out",
        "level_number_lower",
        "current_line_out",
        "wavelength",
        "interacting_packets_count",
        "append",
        "count",
        "ValueError",
        "GROUP_MODES",
        "pd",
        "Series",
        "interacting_packets_count",
        "pd",
        "Index",
        "last_line_interaction_string",
        "name",
        "last_line_counts",
        "sort_values",
        "ascending",
        "to_frame",
        "staticmethod",
        "label_text",
        "unit",
        "unit",
        "to_string",
        "strip",
        "unit_in_latex",
        "unit_in_latex",
        "re",
        "compile",
        "findall",
        "unit_in_latex",
        "split",
        "constituent_units",
        "remove",
        "constituent_units",
        "insert",
        "constituent_units",
        "index",
        "join",
        "constituent_units",
        "constituent_units_string",
        "label_text",
        "unit_in_latex",
        "staticmethod",
        "arr",
        "np",
        "sort",
        "arr",
        "arr",
        "arr",
        "arr",
        "arr",
        "arr",
        "arr",
        "staticmethod",
        "arr",
        "arr",
        "arr",
        "np",
        "abs",
        "arr",
        "mid_value",
        "argmin",
        "wavelength",
        "luminosity_density_lambda",
        "virt_wavelength",
        "virt_luminosity_density_lambda",
        "get_middle_half_edges",
        "wavelength",
        "value",
        "get_mid_point_idx",
        "wavelength",
        "value",
        "go",
        "FigureWidget",
        "go",
        "Scatter",
        "x",
        "wavelength",
        "y",
        "luminosity_density_lambda",
        "name",
        "go",
        "Scatter",
        "x",
        "virt_wavelength",
        "y",
        "virt_luminosity_density_lambda",
        "name",
        "go",
        "Scatter",
        "x",
        "wavelength",
        "scatter_point_idx",
        "y",
        "luminosity_density_lambda",
        "scatter_point_idx",
        "mode",
        "marker",
        "opacity",
        "showlegend",
        "layout",
        "go",
        "Layout",
        "title",
        "xaxis",
        "title",
        "axis_label_in_latex",
        "wavelength",
        "unit",
        "exponentformat",
        "rangeslider",
        "visible",
        "initial_zoomed_range",
        "yaxis",
        "title",
        "axis_label_in_latex",
        "luminosity_density_lambda",
        "unit",
        "exponentformat",
        "fixedrange",
        "dragmode",
        "selectdirection",
        "height",
        "margin",
        "t",
        "b",
        "wavelength_range",
        "filter_mode",
        "species_interactions_table",
        "get_species_interactions",
        "wavelength_range",
        "filter_mode",
        "species_interactions_table",
        "df",
        "index",
        "species_interactions_table",
        "get_selected_rows",
        "species_interactions_table",
        "change_selection",
        "species_interactions_table",
        "change_selection",
        "species0",
        "selector",
        "figure_widget",
        "layout",
        "xref",
        "yref",
        "x0",
        "selector",
        "xrange",
        "y0",
        "selector",
        "yrange",
        "x1",
        "selector",
        "xrange",
        "y1",
        "selector",
        "yrange",
        "line",
        "color",
        "COLORS",
        "width",
        "fillcolor",
        "COLORS",
        "opacity",
        "species",
        "filter_mode",
        "group_mode",
        "last_line_counts_table",
        "get_last_line_counts",
        "species",
        "filter_mode",
        "group_mode",
        "species",
        "total_packets_label",
        "update_and_resize",
        "last_line_counts_table",
        "df",
        "iloc",
        "sum",
        "total_packets_label",
        "update_and_resize",
        "trace",
        "points",
        "selector",
        "isinstance",
        "selector",
        "BoxSelector",
        "_add_selection_box",
        "selector",
        "_update_species_interactions",
        "selector",
        "xrange",
        "FILTER_MODES",
        "filter_mode_buttons",
        "index",
        "change",
        "figure_widget",
        "layout",
        "shapes",
        "x",
        "x",
        "IndexError",
        "_update_species_interactions",
        "wavelength_range",
        "FILTER_MODES",
        "filter_mode_buttons",
        "index",
        "qgrid_widget",
        "species_interactions_table",
        "df",
        "index",
        "species_selected",
        "_update_last_line_counts",
        "species_selected",
        "FILTER_MODES",
        "filter_mode_buttons",
        "index",
        "GROUP_MODES",
        "group_mode_dropdown",
        "index",
        "change",
        "species_interactions_table",
        "get_selected_rows",
        "species_interactions_table",
        "df",
        "index",
        "selected_row_idx",
        "IndexError",
        "_update_last_line_counts",
        "species_selected",
        "FILTER_MODES",
        "filter_mode_buttons",
        "index",
        "GROUP_MODES",
        "group_mode_dropdown",
        "index",
        "staticmethod",
        "text",
        "ipw",
        "HTML",
        "text",
        "species_interactions_table",
        "layout",
        "last_line_counts_table",
        "layout",
        "total_packets_label",
        "update_and_resize",
        "group_mode_dropdown",
        "layout",
        "figure_widget",
        "data",
        "spectrum_trace",
        "on_selection",
        "_spectrum_selection_handler",
        "filter_mode_buttons",
        "observe",
        "_filter_mode_toggle_handler",
        "names",
        "species_interactions_table",
        "on",
        "_species_intrctn_selection_handler",
        "group_mode_dropdown",
        "observe",
        "_group_mode_dropdown_handler",
        "names",
        "COLORS",
        "COLORS",
        "ipw",
        "VBox",
        "ui_control_description",
        "selection_box_symbol",
        "filter_mode_buttons",
        "species_interactions_table",
        "layout",
        "margin",
        "ipw",
        "VBox",
        "ui_control_description",
        "group_mode_dropdown",
        "last_line_counts_table",
        "total_packets_label",
        "widget",
        "layout",
        "margin",
        "ipw",
        "VBox",
        "figure_widget",
        "ipw",
        "Box",
        "table_container_left",
        "table_container_right",
        "layout",
        "display",
        "align_items",
        "justify_content",
        "height"
    ],
    "literals": [
        "\"packet_out_nu\"",
        "\"packet_in_nu\"",
        "\"Emitted Wavelength\"",
        "\"Absorbed Wavelength\"",
        "\"both\"",
        "\"exc\"",
        "\"de-exc\"",
        "\"Both excitation line (absorption) and de-excitation line (emission)\"",
        "\"Only excitation line (absorption)\"",
        "\"Only de-excitation line (emission)\"",
        "\"selection_area\"",
        "\"lightpink\"",
        "\"selection_border\"",
        "\"salmon\"",
        "\"maxVisibleRows\"",
        "\"Total Packets\"",
        "\"line_id\"",
        "\"erg/(s AA)\"",
        "\"erg/(s AA)\"",
        "\"atomic_number\"",
        "\"ion_number\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"Species\"",
        "\"Fraction of packets interacting\"",
        "\"atomic_number\"",
        "\"ion_number\"",
        "\"atomic_number\"",
        "\"ion_number\"",
        "\"atomic_number\"",
        "\"ion_number\"",
        "\"Invalid value of selected_species, it must be one present \"",
        "\"within the currently selected wavelength range in your \"",
        "f\"LineInfoWidget instance, which are {allowed_species}\"",
        "\"both\"",
        "\"line_id_out\"",
        "\"line_id\"",
        "\"line_id_out\"",
        "f\"exc. {int(current_line_in.level_number_lower):02d}-\"",
        "f\"{int(current_line_in.level_number_upper):02d} \"",
        "f\"({current_line_in.wavelength:.2f} A) \"",
        "f\"de-exc. {int(current_line_out.level_number_upper):02d}-\"",
        "f\"{int(current_line_out.level_number_lower):02d} \"",
        "f\"({current_line_out.wavelength:.2f} A)\"",
        "\"exc\"",
        "\"line_id\"",
        "f\"exc. {int(current_line_in.level_number_lower):02d}-\"",
        "f\"{int(current_line_in.level_number_upper):02d} \"",
        "f\"({current_line_in.wavelength:.2f} A)\"",
        "\"de-exc\"",
        "\"line_id\"",
        "f\"de-exc. {int(current_line_out.level_number_upper):02d}-\"",
        "f\"{int(current_line_out.level_number_lower):02d} \"",
        "f\"({current_line_out.wavelength:.2f} A)\"",
        "\"Invalid value passed to group_mode argument. \"",
        "f\"Allowed values are {self.GROUP_MODES}\"",
        "\"\"",
        "\"\"",
        "\"No. of packets\"",
        "\"Last Line Interaction\"",
        "\"latex_inline\"",
        "\"$\"",
        "\"erg\"",
        "\"s^{-1}\"",
        "\"\\\\\\mathrm\\{(.*)\\}\"",
        "\"\\\\,\"",
        "\"s^{-1}\"",
        "\"erg\"",
        "\"s^{-1}\"",
        "\"\\\\,\"",
        "f\"\\\\mathrm{{{constituent_units_string}}}\"",
        "f\"$\\\\text{{{label_text}}}\\\\,[{unit_in_latex}]$\"",
        "\"Real packets\"",
        "\"Virtual packets\"",
        "\"markers\"",
        "\"Spectrum\"",
        "\"Wavelength\"",
        "\"none\"",
        "\"Luminosity\"",
        "\"e\"",
        "\"select\"",
        "\"h\"",
        "\"rect\"",
        "\"x\"",
        "\"y\"",
        "\"selection_border\"",
        "\"selection_area\"",
        "\"x0\"",
        "\"x1\"",
        "\"new\"",
        "\"source\"",
        "\"api\"",
        "\"new\"",
        "\"\"",
        "f\"<span style='font-size: 1.15em;'>{text}:</span>\"",
        "\"350px\"",
        "\"450px\"",
        "\"auto\"",
        "\"index\"",
        "\"selection_changed\"",
        "\"index\"",
        "\"<span style='display: inline-block; \"",
        "f\"background-color: {self.COLORS['selection_area']}; \"",
        "'selection_area'",
        "f\"border: 1px solid {self.COLORS['selection_border']}; \"",
        "'selection_border'",
        "\"width: 0.8em; height: 1.2em; vertical-align: middle;'></span>\"",
        "\"Filter selected wavelength range \"",
        "f\"( {selection_box_symbol} ) by\"",
        "\"0px 15px\"",
        "\"Group packet counts by\"",
        "\"0px 15px\"",
        "\"flex\"",
        "\"flex-start\"",
        "\"center\"",
        "\"420px\""
    ],
    "variables": [
        "FILTER_MODES",
        "FILTER_MODES_DESC",
        "GROUP_MODES",
        "GROUP_MODES_DESC",
        "COLORS",
        "lines_data",
        "line_interaction_analysis",
        "max_rows_option",
        "species_interactions_table",
        "line_counts_col_widths",
        "last_line_counts_table",
        "total_packets_label",
        "figure_widget",
        "filter_mode_buttons",
        "group_mode_dropdown",
        "wavelength_start",
        "wavelength_end",
        "selected_species_group",
        "selected_species_symbols",
        "fractional_species_interactions",
        "selected_species_symbols",
        "fractional_species_interactions",
        "selected_species_symbols",
        "fractional_species_interactions",
        "fractional_species_interactions",
        "index",
        "fractional_species_interactions",
        "name",
        "selected_species_tuple",
        "current_last_lines_in",
        "current_last_lines_out",
        "allowed_species",
        "last_line_interaction_string",
        "interacting_packets_count",
        "current_last_lines_in",
        "grouped_line_interactions",
        "current_line_in",
        "current_line_out",
        "grouped_line_interactions",
        "current_line_in",
        "grouped_line_interactions",
        "current_line_out",
        "interacting_packets_count",
        "last_line_interaction_string",
        "last_line_counts",
        "last_line_counts",
        "name",
        "last_line_counts",
        "index",
        "unit_in_latex",
        "constituent_units",
        "constituent_units_string",
        "unit_in_latex",
        "arr",
        "mid_value",
        "initial_zoomed_range",
        "scatter_point_idx",
        "df",
        "species0",
        "shapes",
        "df",
        "wavelength_range",
        "species_selected",
        "species_selected",
        "selected_row_idx",
        "species_selected",
        "width",
        "width",
        "width",
        "spectrum_trace",
        "selection_box_symbol",
        "table_container_left",
        "table_container_right"
    ],
    "comments": [
        "Widgets ------------------------------------------------",
        "Obtain species group from last_line_in dataframe",
        "Normalize each group's count to find fractions of interactions",
        "No species could be selected in specified wavelength_range",
        "qgrid cannot show empty dataframe properly,",
        "so create one row with empty strings",
        "wavelength_range is None",
        "Get selected species' rows from last_line_in dataframe",
        "Get selected species' rows from last_line_out dataframe",
        "selected_species is invalid",
        "Group by both exc. line ids and de-exc. line ids",
        "Iterate over each group's key and size and append them to list",
        "Iterate over each group's key and size and append them to list",
        "Iterate over each group's key and size and append them to list",
        "species_selected is None",
        "qgrid cannot show empty dataframe properly,",
        "so create one row with empty strings",
        "If present, place s^{-1} just after erg",
        "Initially zoomed range in rangeslider should be middle half of spectrum",
        "The scatter point should be a middle point in spectrum otherwise",
        "the extra padding around it will be oddly visible when near the edge",
        "Hide a one point scatter trace, to bring boxselect in modebar",
        "Update data in species_interactions_table",
        "Get index of 0th row in species_interactions_table",
        "Also update last_line_counts_table by triggering its event listener",
        "Listener won't trigger if last row selected in",
        "species_interactions_table was also 0th, so unselect the rows",
        "Select 0th row in this table to trigger _update_last_line_counts",
        "Update data in line counts table",
        "Update its corresponding total_packets_label",
        "Line counts table will be empty",
        "No selection is made on figure widget",
        "Don't execute function if no row was selected implicitly (by api)",
        "Get species from the selected row in species_interactions_table",
        "when species_interactions_table is empty",
        "No row is selected in species_interactions_table",
        "Set widths of widgets",
        "Attach event listeners to widgets"
    ],
    "docstrings": [
        "\"\"\"Class to create and display Line Info Widget.\"\"\"",
        "\"\"\"\n    Widget to explore atomic lines that produced features in the simulated spectrum.\n\n    It allows selection of a wavelength range in the spectrum to display a\n    table giving the fraction of packets that experienced their last\n    interaction with each species. Using toggle buttons, users can specify\n    whether to filter the selected range by emitted or absorbed wavelengths\n    of packets. Clicking on a row in the fractional species interactions table\n    shows packet counts for each last line interaction of the selected species,\n    which can be grouped in several ways using the dropdown menu.\n    \"\"\"",
        "\"\"\"\n        Initialize the LineInfoWidget with line interaction and spectrum data.\n\n        Parameters\n        ----------\n        lines_data : pd.DataFrame\n            Data about the atomic lines present in simulation model's plasma\n        line_interaction_analysis : dict of tardis.analysis.LastLineInteraction\n            Dictionary in which keys are the FILTER_MODES and values are the\n            LastLineInteraction objects initialized with corresponding modes\n        spectrum_wavelength : astropy.Quantity\n            Wavelength values of a real spectrum, having unit of Angstrom\n        spectrum_luminosity_density_lambda : astropy.Quantity\n            Luminosity density lambda values of a real spectrum, having unit\n            of (erg/s)/Angstrom\n        virt_spectrum_wavelength : astropy.Quantity\n            Wavelength values of a virtual spectrum, having unit of Angstrom\n        virt_spectrum_luminosity_density_lambda : astropy.Quantity\n            Luminosity density lambda values of a virtual spectrum, having unit\n            of (erg/s)/Angstrom\n        \"\"\"",
        "\"\"\"\n        Create an instance of LineInfoWidget from a TARDIS simulation object.\n\n        Parameters\n        ----------\n        sim : tardis.simulation.Simulation\n            TARDIS Simulation object produced by running a simulation\n\n        Returns\n        -------\n        LineInfoWidget object\n        \"\"\"",
        "\"\"\"\n        Get fractional species interactions in specified wavelength range.\n\n        Fractional species interactions means fraction of packets present in\n        the specified wavelength range which experienced their last interaction\n        with a species. The packets to consider are filtered by the specified\n        filter mode.\n\n        Parameters\n        ----------\n        wavelength_range : list-like or None\n            A list of two float values to specify the wavelength range - first\n            for the range start and second for the range end. None specifies\n            that no wavelength range is selected and will return empty dataframe\n        filter_mode : str, optional\n            Filter mode of the LastLineInteraction object to use for filtering\n            the selected wavelength range (more details in Notes section).\n            Allowed values are given by the class variable :code:`FILTER_MODES`\n            (default value is :code:`FILTER_MODES[0]`)\n\n        Returns\n        -------\n        pandas.DataFrame\n            Dataframe containing species symbols and corresponding fractions\n            of packets interacting with them\n\n        Notes\n        -----\n        This method depends on tardis.analysis.LastLineInteraction object for\n        doing computations. So there is a member variable in this class -\n        :code:`line_interaction_analysis` which is a dictionary of such objects\n        (each of them differ in how they filter the selected wavelength range).\n        Thus we have to specify which object to use by specifying the\n        filter_mode parameter.\n        \"\"\"",
        "\"\"\"\n        Get packet counts of each last line interaction of a species.\n\n        Parameters\n        ----------\n        selected_species : str\n            Valid symbol of a species (e.g Si II) selected from the species\n            data returned by :code:`get_species_interactions` (see Notes section)\n        filter_mode : str, optional\n            Filter mode of the LastLineInteraction object to use for fetching\n            the data of last lines interacted (more details in Notes section).\n            Allowed values are given by the class variable :code:`FILTER_MODES`\n            (default value is :code:`FILTER_MODES[0]`)\n        group_mode : str, optional\n            Group mode to use for grouping last line interactions by excitation\n            lines, de-excitation lines or both. Allowed values are given by the\n            class variable :code:`GROUP_MODES` (default value is\n            :code:`GROUP_MODES[0]` i.e. both)\n\n        Returns\n        -------\n        pd.DataFrame\n            DataFrame containing last line interactions and corresponding\n            packet counts.\n\n        Notes\n        -----\n        This method depends on tardis.analysis.LastLineInteraction object for\n        doing computations. So there is a member variable in this class -\n        :code:`line_interaction_analysis` which is a dictionary of such objects\n        (each of them differ in how they filter the selected wavelength range).\n        Thus we have to specify which object to use by specifying the\n        filter_mode parameter.\n\n        This method should always be called after calling\n        :code:`get_species_interactions` method which sets a wavelength\n        range on LastLineInteraction object. So selected_species should\n        be one present within that range, otherwise it will result an error.\n        \"\"\"",
        "\"\"\"\n        Get axis label for plotly plots that can show units in latex.\n\n        Parameters\n        ----------\n        label_text : str\n            Text to show on label\n        unit : astropy.units\n            Unit of the label\n\n        Returns\n        -------\n        str\n            Latex string for label renderable by plotly\n        \"\"\"",
        "\"\"\"\n        Get edges of the middle half range of an array.\n\n        Parameters\n        ----------\n        arr : np.array\n\n        Returns\n        -------\n        list\n        \"\"\"",
        "\"\"\"\n        Get index of the middle point of a sorted array (ascending or descending).\n\n        The values in array may not be evenly distributed so it picks the middle\n        point not by index but by their values.\n\n        Parameters\n        ----------\n        arr : np.array\n\n        Returns\n        -------\n        int\n        \"\"\"",
        "\"\"\"\n        Produce a plotly figure widget by plotting the spectrum of model.\n\n        Parameters\n        ----------\n        wavelength : astropy.Quantity\n            Wavelength values of a real spectrum, having unit of Angstrom\n        luminosity_density_lambda : astropy.Quantity\n            Luminosity density lambda values of a real spectrum, having unit\n            of (erg/s)/Angstrom\n        virt_wavelength : astropy.Quantity\n            Wavelength values of a virtual spectrum, having unit of Angstrom\n        virt_luminosity_density_lambda : astropy.Quantity\n            Luminosity density lambda values of a virtual spectrum, having unit\n            of (erg/s)/Angstrom\n\n        Returns\n        -------\n        plotly.graph_objects.FigureWidget\n        \"\"\"",
        "\"\"\"\n        Update data in species_interactions_table.\n\n        The parameters are exact same as that of :code:`get_species_interactions`.\n        Besides, it also does selection of 1st row in this table to trigger\n        update in last_line_counts_table.\n        \"\"\"",
        "\"\"\"\n        Draw a shape on plotly figure widget to represent the selection.\n\n        Parameters\n        ----------\n        selector : plotly.callbacks.BoxSelector\n            The object containing data about current selection made on plot\n            (x-axis and y-axis range of selection box)\n        \"\"\"",
        "\"\"\"\n        Update data in last_line_counts_table and associated total_packets_label.\n\n        The parameters are exact same as that of :code:`get_last_line_counts`.\n        \"\"\"",
        "\"\"\"\n        Event handler for selection of spectrum in plotly figure widget.\n\n        This method has the expected signature of the callback function passed\n        to :code:`on_selection` method of a plotly trace as explained in\n        `their docs <https://plotly.com/python-api-reference/generated/plotly.html#plotly.basedatatypes.BaseTraceType.on_selection>`_.\n        \"\"\"",
        "\"\"\"\n        Event handler for toggle in filter_mode_buttons.\n\n        This method has the expected signature of the callback function\n        passed to :code:`observe` method of ipywidgets as explained in\n        `their docs <https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Events.html#Signatures>`_.\n        \"\"\"",
        "\"\"\"\n        Event handler for selection in species_interactions_table.\n\n        This method has the expected signature of the function passed to\n        :code:`handler` argument of :code:`on_selection` method of qgrid.QgridWidget\n        as explained in `their docs <https://qgrid.readthedocs.io/en/latest/#qgrid.QgridWidget.on>`_.\n        \"\"\"",
        "\"\"\"\n        Event handler for selection in group_mode_dropdown.\n\n        This method has the expected signature of the callback function\n        passed to :code:`observe` method of ipywidgets as explained in\n        `their docs <https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Events.html#Signatures>`_.\n        \"\"\"",
        "\"\"\"Get description label of a UI control with increased font size.\"\"\"",
        "\"\"\"\n        Display the fully-functional line info widget.\n\n        It puts together all component widgets nicely together and enables\n        interaction between all the components.\n\n        Returns\n        -------\n        ipywidgets.Box\n            Line info widget containing all component widgets\n        \"\"\""
    ],
    "functions": [
        "from_simulation",
        "get_species_interactions",
        "get_last_line_counts",
        "axis_label_in_latex",
        "get_middle_half_edges",
        "get_mid_point_idx",
        "plot_spectrum",
        "_update_species_interactions",
        "_add_selection_box",
        "_update_last_line_counts",
        "_spectrum_selection_handler",
        "_filter_mode_toggle_handler",
        "_species_intrctn_selection_handler",
        "_group_mode_dropdown_handler",
        "ui_control_description",
        "display"
    ],
    "classes": [
        "LineInfoWidget"
    ]
}