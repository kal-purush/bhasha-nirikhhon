{
    "identifiers": [
        "org",
        "apache",
        "nifi",
        "registry",
        "web",
        "security",
        "authentication",
        "oidc",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "AuthorizationGrant",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "Scope",
        "com",
        "nimbusds",
        "oauth2",
        "sdk",
        "id",
        "ClientID",
        "java",
        "io",
        "java",
        "net",
        "URI",
        "OidcIdentityProvider",
        "OPEN_ID_CONNECT_SUPPORT_IS_NOT_CONFIGURED",
        "authorizationGrant"
    ],
    "literals": [
        "\"OpenId Connect support is not configured\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Initializes the provider.",
        "* Returns whether OIDC support is enabled.\n     *\n     * @return whether OIDC support is enabled",
        "* Returns the configured client id.\n     *\n     * @return the client id",
        "* Returns the URI for the authorization endpoint.\n     *\n     * @return uri for the authorization endpoint",
        "* Returns the URI for the end session endpoint.\n     *\n     * @return uri for the end session endpoint",
        "* Returns the scopes supported by the OIDC provider.\n     *\n     * @return support scopes",
        "* Exchanges the supplied authorization grant for an ID token. Extracts the identity from the ID\n     * token and converts it into NiFi JWT.\n     *\n     * @param authorizationGrant authorization grant for invoking the Token Endpoint\n     * @return a NiFi JWT\n     * @throws IOException if there was an exceptional error while communicating with the OIDC provider"
    ],
    "functions": [
        "initializeProvider",
        "isOidcEnabled",
        "ClientID",
        "getClientId",
        "URI",
        "getAuthorizationEndpoint",
        "URI",
        "getEndSessionEndpoint",
        "Scope",
        "getScope",
        "exchangeAuthorizationCode"
    ],
    "classes": []
}