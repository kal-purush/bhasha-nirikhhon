{
    "identifiers": [
        "request",
        "ProtocolUtility",
        "ConfigModule",
        "DockerService",
        "AgentConfig",
        "Logger",
        "describe",
        "process",
        "shutdownAgent",
        "agentId",
        "agentId",
        "request",
        "hostUrl",
        "data",
        "e",
        "beforeAll",
        "jest",
        "it",
        "agentDid",
        "request",
        "hostUrl",
        "data",
        "res",
        "firstAgentId",
        "res",
        "firstAgentUrl",
        "firstAgentId",
        "agentAdminPort",
        "it",
        "agentDid",
        "request",
        "hostUrl",
        "data",
        "res",
        "firstAgentId",
        "res",
        "firstAgentUrl",
        "firstAgentId",
        "agentAdminPort",
        "it",
        "agentDid",
        "request",
        "hostUrl",
        "data",
        "res",
        "secondAgentId",
        "res",
        "DockerService",
        "manager",
        "secondAgentId",
        "request",
        "hostUrl",
        "data",
        "it",
        "ConfigModule",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "thirdAgentId",
        "process",
        "thirdAgentId",
        "process",
        "thirdAgentId",
        "AgentConfig",
        "adminApiKey",
        "thirdAgentId",
        "agentEndpoint",
        "webhookUrl",
        "DockerService",
        "manager",
        "agentConfig",
        "ProtocolUtility",
        "thirdAgentId",
        "agentDid",
        "request",
        "hostUrl",
        "data",
        "it",
        "shutdownAgent",
        "thirdAgentId",
        "ProtocolUtility",
        "ConfigModule",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "thirdAgentId",
        "process",
        "thirdAgentId",
        "process",
        "thirdAgentId",
        "AgentConfig",
        "adminApiKey",
        "thirdAgentId",
        "agentEndpoint",
        "webhookUrl",
        "DockerService",
        "manager",
        "agentConfig",
        "ProtocolUtility",
        "thirdAgentId",
        "agentDid",
        "request",
        "hostUrl",
        "data",
        "afterAll",
        "shutdownAgent",
        "firstAgentId",
        "shutdownAgent",
        "secondAgentId",
        "shutdownAgent",
        "thirdAgentId"
    ],
    "literals": [
        "'supertest'",
        "'protocol-common/protocol.utility'",
        "'protocol-common/config.module'",
        "'../src/manager/docker.service'",
        "'../src/manager/agent.config'",
        "'protocol-common/logger'",
        "'Cache behaviors (e2e)'",
        "'adminApiKey'",
        "'http://localhost:3010'",
        "'Th7MpTaRZVRYnPiabds81Y'",
        "'/v1/manager'",
        "'Start agent not already started successfully'",
        "'issuer'",
        "'walletId11'",
        "'walletId11'",
        "'000000000000000000000000Steward1'",
        "'/v1/manager'",
        "http://${firstAgentId}:${agentAdminPort}",
        "'Request agent previously started'",
        "'issuer'",
        "'walletId11'",
        "'walletId11'",
        "'000000000000000000000000Steward1'",
        "'/v1/manager'",
        "http://${firstAgentId}:${agentAdminPort}",
        "'Successfully request Agent not running but is in cache'",
        "'runningAgent'",
        "'walletId11'",
        "'walletId11'",
        "'000000000000000000000000Steward1'",
        "'/v1/manager'",
        "'/v1/manager'",
        "'Successfully request agent running not in cache'",
        "'../src/config/env.json'",
        "'bcgovimages/aries-cloudagent:py36-1.15-0_0.5.4'",
        "'0'",
        "'./resources/pool_transactions_genesis_local_dev'",
        "'http://aries-guardianship-agency:3010'",
        "'pool1'",
        "'agency-network'",
        "'thirdAgent'",
        "${process.env.PUBLIC_URL}/v1/router/${thirdAgentId}",
        "${process.env.INTERNAL_URL}/v1/controller/${thirdAgentId}",
        "'walletId11'",
        "'walletId11'",
        "'5001'",
        "'5000'",
        "'000000000000000000000000Steward1'",
        "'walletId11'",
        "'walletId11'",
        "'000000000000000000000000Steward1'",
        "'/v1/manager'",
        "'Cannot start agent already running using invalid adminApiKey'",
        "'../src/config/env.json'",
        "'bcgovimages/aries-cloudagent:py36-1.15-0_0.5.4'",
        "'0'",
        "'./resources/pool_transactions_genesis_local_dev'",
        "'http://aries-guardianship-agency:3010'",
        "'pool1'",
        "'agency-network'",
        "'thirdAgent'",
        "${process.env.PUBLIC_URL}/v1/router/${thirdAgentId}",
        "${process.env.INTERNAL_URL}/v1/controller/${thirdAgentId}",
        "'walletId11'",
        "'walletId11'",
        "'5001'",
        "'5000'",
        "'000000000000000000000000Steward1'",
        "'walletId11'",
        "'walletId11'",
        "'BillyBobLikesCars'",
        "'000000000000000000000000Steward1'",
        "'/v1/manager'"
    ],
    "variables": [
        "firstAgentId",
        "adminApiKey",
        "firstAgentUrl",
        "secondAgentId",
        "thirdAgentId",
        "agentAdminPort",
        "hostUrl",
        "agentDid",
        "shutdownAgent",
        "data",
        "data",
        "data",
        "data",
        "manager",
        "agentEndpoint",
        "webhookUrl",
        "agentConfig",
        "manager",
        "data",
        "agentEndpoint",
        "webhookUrl",
        "agentConfig",
        "manager",
        "data"
    ],
    "comments": [
        "Integration test to show the gammit of the exchange of messages between\n    agents for connection, credential and proof protocols\n\n    Required: manually start aries agency prior to running tests\n    run `docker-compose up` in the aries-guardianship-agency directory",
        "make sure this test ends as clean as it started",
        "Test condition: Cache shouldn't contain the agent, nor should the agent already be running",
        "Cache: down; Reality: down",
        "Test condition: Cache contain the agent, and the agent is running",
        "Cache: up; Reality: up",
        "Test condition: Agent is not running. but agent manager cache thinks it is",
        "Cache: up; Reality: down",
        "Agent is not running but cache does not reflect this state, so we can",
        "now test that state",
        "// TODO: at some point we would like to be able to test actual agent status,\n        // but it seems to causing problems in CI\n        await ProtocolUtility.delay(15000);\n        const agentUrl = `http://${secondAgentId}:${agentAdminPort}`;\n        Logger.warn(`agentURL ${agentUrl}`);\n        return request(agentUrl)\n            .get('/status')\n            .set('x-api-key', adminApiKey)\n            .expect((res) => {\n                expect(res.status).toBe(200);\n            });",
        "Test condition: Agent is running but the cache doesn't contain a reference to Agent",
        "Cache down: Reality: up",
        "setup environment so we can create an agent without using agent manager",
        "spin up the agent not using AgentMananger so that is cache is out of sync",
        "attempt request for starting the same agent",
        "// TODO: at some point we would like to be able to test actual agent status,\n        // but it seems to causing problems in CI\n        const agentUrl = `http://${thirdAgentId}:${agentAdminPort}`;\n        return request(agentUrl)\n            .get('/status')\n            .set('x-api-key', adminApiKey)\n            .expect((res) => {\n                expect(res.status).toBe(200);\n            });",
        "Test condition: Agent is running but the cache doesn't contain a reference to Agent",
        "Cache down: Reality: up",
        "setup environment so we can create an agent without using agent manager",
        "spin up the agent not using AgentMananger so that is cache is out of sync",
        "attempt request for starting the same agent",
        "// TODO: at some point we would like to be able to test actual agent status,\n        // but it seems to causing problems in CI\n        const agentUrl = `http://${thirdAgentId}:${agentAdminPort}`;\n        return request(agentUrl)\n            .get('/status')\n            .set('x-api-key', 'BillyBobLikesCars')\n            .expect((res) => {\n                expect(res.status).toBe(401);\n            });"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}