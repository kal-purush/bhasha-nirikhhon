{
    "identifiers": [
        "org",
        "corfudb",
        "infrastructure",
        "logreplication",
        "infrastructure",
        "lombok",
        "slf4j",
        "Slf4j",
        "org",
        "corfudb",
        "infrastructure",
        "logreplication",
        "proto",
        "LogReplicationMetadata",
        "ReplicationEvent",
        "org",
        "corfudb",
        "runtime",
        "collections",
        "CorfuStreamEntries",
        "org",
        "corfudb",
        "runtime",
        "collections",
        "CorfuStreamEntry",
        "org",
        "corfudb",
        "runtime",
        "collections",
        "StreamListener",
        "java",
        "util",
        "Slf4j",
        "discoveryService",
        "discoveryService",
        "discoveryService",
        "discoveryService",
        "discoveryService",
        "getLogReplicationMetadataManager",
        "subscribeReplicationEventTable",
        "discoveryService",
        "getLogReplicationMetadataManager",
        "unsubscribeReplicationEventTable",
        "Override",
        "results",
        "discoveryService",
        "discoveryService",
        "getIsLeader",
        "get",
        "log",
        "info",
        "results",
        "log",
        "info",
        "results",
        "discoveryService",
        "getLocalNodeDescriptor",
        "discoveryService",
        "getLocalClusterDescriptor",
        "entryList",
        "results",
        "getEntries",
        "values",
        "entry",
        "entryList",
        "entry",
        "getPayload",
        "log",
        "info",
        "discoveryService",
        "input",
        "DiscoveryServiceEvent",
        "DiscoveryServiceEventType",
        "ENFORCE_SNAPSHOT_SYNC",
        "getClusterId",
        "Override",
        "throwable",
        "log",
        "error",
        "throwable"
    ],
    "literals": [
        "\"The onNext call  with {} will be skipped as the current node as it is not the leader.\"",
        "\"LogReplicationEventListener onNext {} will be processed at node {} in the cluster {}\"",
        "\"ReplicationEventListener put an event {} to its local discoveryServiceQueue\"",
        "\"onError with a throwable {}\""
    ],
    "variables": [
        "discoveryService"
    ],
    "comments": [],
    "docstrings": [
        "* If the current node is not a leader, ignore the notifications.",
        "* If the current node is the leader, it generates a discovery event and put it into the discovery service event queue."
    ],
    "functions": [
        "LogReplicationEventListener",
        "start",
        "stop",
        "onNext",
        "onError"
    ],
    "classes": [
        "LogReplicationEventListener"
    ]
}