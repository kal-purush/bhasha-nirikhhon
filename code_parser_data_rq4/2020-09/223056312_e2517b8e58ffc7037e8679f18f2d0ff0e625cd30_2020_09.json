{
    "identifiers": [
        "StorageUtility",
        "mockStorageUtility",
        "describe",
        "mockStorageUtility",
        "mocks",
        "defaultMocks",
        "defaultMocks",
        "StorageUtility",
        "mocks",
        "defaultMocks",
        "mocks",
        "defaultMocks",
        "describe",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "storageUtility",
        "key",
        "value",
        "storageUtility",
        "key",
        "expect",
        "result",
        "value",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "storageUtility",
        "expect",
        "value",
        "it",
        "defaultMocks",
        "getStorageUtility",
        "storageMock",
        "expect",
        "storageUtility",
        "describe",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "storageUtility",
        "key",
        "value",
        "expect",
        "storageUtility",
        "key",
        "value",
        "describe",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "expect",
        "storageUtility",
        "key",
        "storageUtility",
        "key",
        "value",
        "expect",
        "storageUtility",
        "key",
        "value",
        "storageUtility",
        "key",
        "expect",
        "storageUtility",
        "key",
        "describe",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "storageUtility",
        "userId",
        "userData",
        "storageUtility",
        "userId",
        "expect",
        "value",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "storageUtility",
        "userId",
        "expect",
        "value",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "storageUtility",
        "userId",
        "storageUtility",
        "userId",
        "expect",
        "value",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "expect",
        "storageUtility",
        "userId",
        "userId",
        "describe",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "storageUtility",
        "userId",
        "storageUtility",
        "userId",
        "expect",
        "value",
        "it",
        "defaultMocks",
        "storageMock",
        "userId",
        "getStorageUtility",
        "storageMock",
        "storageUtility",
        "userId",
        "storageUtility",
        "userId",
        "expect",
        "value",
        "describe",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "storageUtility",
        "userId",
        "userData",
        "storageUtility",
        "userId",
        "expect",
        "storageUtility",
        "userId",
        "expect",
        "storageUtility",
        "userId",
        "describe",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "storageUtility",
        "userId",
        "userData",
        "expect",
        "storageUtility",
        "userId",
        "storageUtility",
        "userId",
        "expect",
        "storageUtility",
        "userId",
        "describe",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "storageUtility",
        "key",
        "jsonData",
        "storageUtility",
        "key",
        "expect",
        "result",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "storageUtility",
        "expect",
        "retrieved",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "storageUtility",
        "key",
        "jsonData",
        "storageUtility",
        "key",
        "expect",
        "result",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "storageUtility",
        "key",
        "jsonData",
        "storageUtility",
        "key",
        "expect",
        "result",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "storageUtility",
        "userId",
        "key",
        "storageUtility",
        "key",
        "userId",
        "expect",
        "result",
        "it",
        "getStorageUtility",
        "mockStorageUtility",
        "storageUtility",
        "userId",
        "key",
        "storageUtility",
        "key",
        "userId",
        "expect",
        "result"
    ],
    "literals": [
        "\"reflect-metadata\"",
        "\"../../src/storage/StorageUtility\"",
        "\"../../src\"",
        "\"StorageUtility\"",
        "\"the key\"",
        "\"the value\"",
        "\"animals\"",
        "\"get\"",
        "\"gets an item from storage\"",
        "\"returns undefined if the item is not in storage\"",
        "\"key\"",
        "\"throws an error if the item is not in storage and errorOnNull is true\"",
        "\"key\"",
        "\"[key] is not stored\"",
        "\"set\"",
        "\"sets an item in storage\"",
        "\"delete\"",
        "\"deletes an item\"",
        "\"getForUser\"",
        "\"gets an item from storage for a user\"",
        "\"The Cat\"",
        "\"The Dog\"",
        "\"jackie\"",
        "\"The Cat\"",
        "\"returns undefined if no item is in storage\"",
        "\"jackie\"",
        "\"returns null if the item in storage is corrupted\"",
        "\"bleep bloop not parsable\"",
        "\"jackie\"",
        "\"throws an error if the item is not in storage and errorOnNull is true\"",
        "\"jackie\"",
        "Field [jackie] for user [${userId}] is not stored",
        "\"setForUser\"",
        "\"sets a value for a user\"",
        "\"The Pretty Kitty\"",
        "\"jackie\"",
        "\"The Pretty Kitty\"",
        "\"sets a value for a user if the original data was corrupted\"",
        "\"bleep bloop not parsable\"",
        "\"The Pretty Kitty\"",
        "\"jackie\"",
        "\"The Pretty Kitty\"",
        "\"deleteForUser\"",
        "\"deletes a value for a user\"",
        "\"The Cat\"",
        "\"The Dog\"",
        "\"jackie\"",
        "\"jackie\"",
        "\"sledge\"",
        "\"The Dog\"",
        "\"deleteAllUserData\"",
        "\"deletes all data for a particular user\"",
        "\"The Cat\"",
        "\"The Dog\"",
        "\"jackie\"",
        "\"The Cat\"",
        "\"jackie\"",
        "\"safeGet\"",
        "\"should correctly retrieve valid data from the given storage\"",
        "'   {   \"jsonKey\":   \"some json value\"   }'",
        "\"some json value\"",
        "\"should return null if data could not be found in the given storage\"",
        "\"arbitrary key\"",
        "\"should validate the data from the storage if passed a schema\"",
        "'   {   \"jsonKey\":   \"some json value\"   }'",
        "\"object\"",
        "\"string\"",
        "\"some json value\"",
        "\"should invalidate bad data from the storage if passed a schema and remove it from stroage\"",
        "'   {   \"jsonKey\":   \"some json value\"   }'",
        "\"object\"",
        "\"boolean\"",
        "\"gets an item for a user if a user id is passed in\"",
        "'   {   \"jsonKey\":   \"some json value\"   }'",
        "\"some json value\"",
        "\"should reject and delete for corrupted user specific values\"",
        "'{ \"some\": \"notice this does not have a closing quote }'"
    ],
    "variables": [
        "defaultMocks",
        "key",
        "value",
        "userId",
        "storageUtility",
        "result",
        "storageUtility",
        "value",
        "storageMock",
        "storageUtility",
        "storageUtility",
        "storageUtility",
        "storageUtility",
        "userData",
        "value",
        "storageUtility",
        "value",
        "storageUtility",
        "value",
        "storageUtility",
        "storageUtility",
        "value",
        "storageMock",
        "storageUtility",
        "value",
        "userData",
        "storageUtility",
        "storageUtility",
        "userData",
        "storageUtility",
        "jsonData",
        "result",
        "storageUtility",
        "retrieved",
        "storageUtility",
        "jsonData",
        "schema",
        "result",
        "storageUtility",
        "jsonData",
        "schema",
        "result",
        "storageUtility",
        "result",
        "storageUtility",
        "result"
    ],
    "comments": [
        "Required by TSyringe:",
        "storage: StorageMock,",
        "Write some user data, and make sure it's there.",
        "Delete that user data, and make sure it's gone."
    ],
    "docstrings": [
        "* Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    ],
    "functions": [
        "getStorageUtility"
    ],
    "classes": []
}