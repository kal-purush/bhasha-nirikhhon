{
    "identifiers": [
        "sys",
        "argv",
        "arg",
        "time",
        "len",
        "arg",
        "arg",
        "arg",
        "lower",
        "check_type_of_ip",
        "type_of_ip",
        "taking_kit_of_addresses",
        "file_name",
        "addresses",
        "get_addr_by_octets",
        "addresses",
        "type_of_ip",
        "check_correct_of_addr",
        "addresses",
        "type_of_ip",
        "search_octet_with_host",
        "addresses",
        "octet_with_host",
        "search_max_num_in_octets",
        "addresses",
        "octet_with_host",
        "get_mask",
        "max_num_of_host",
        "type_of_ip",
        "octet_with_host",
        "get_net_octet",
        "bin_num",
        "bit_for_host",
        "type_of_ip",
        "get_result",
        "addresses",
        "net_octet",
        "octet_with_host",
        "mask",
        "type_of_ip",
        "type_of_ip",
        "type_of_ip",
        "type_of_ip",
        "file_name",
        "open",
        "file_name",
        "f",
        "line",
        "f",
        "line",
        "replace",
        "arr",
        "append",
        "line",
        "FileNotFoundError",
        "file_name",
        "arr",
        "arr_with_addr",
        "type_of_ip",
        "type_of_ip",
        "addr",
        "arr_with_addr",
        "addr_by_octets",
        "append",
        "addr",
        "split",
        "addr",
        "arr_with_addr",
        "addr",
        "split",
        "len",
        "arr",
        "i",
        "count_zero_for_addr",
        "zero_arr",
        "i",
        "len",
        "arr",
        "arr",
        "i",
        "i",
        "i",
        "zero_arr",
        "arr",
        "remove",
        "addr_by_octets",
        "append",
        "arr",
        "addr_by_octets",
        "addr",
        "type_of_ip",
        "type_of_ip",
        "i",
        "len",
        "addr",
        "len",
        "addr",
        "i",
        "count_of_octets",
        "j",
        "count_of_octets",
        "addr",
        "i",
        "j",
        "addr",
        "i",
        "j",
        "i",
        "len",
        "addr",
        "len",
        "addr",
        "i",
        "j",
        "len",
        "addr",
        "i",
        "addr",
        "i",
        "j",
        "isdigit",
        "addr",
        "i",
        "j",
        "addr",
        "i",
        "j",
        "num_from_hex",
        "num_from_hex",
        "addr",
        "j",
        "len",
        "addr",
        "i",
        "len",
        "addr",
        "addr",
        "i",
        "j",
        "addr",
        "i",
        "j",
        "j",
        "addr",
        "octet_with_host",
        "addr",
        "octet_with_host",
        "i",
        "len",
        "addr",
        "max_num",
        "addr",
        "i",
        "octet_with_host",
        "addr",
        "i",
        "octet_with_host",
        "max_num",
        "num",
        "type_of_ip",
        "octet_with_host",
        "bin",
        "num",
        "type_of_ip",
        "bin_num",
        "i",
        "len",
        "arr_bin_num",
        "arr_bin_num",
        "i",
        "bit_in_section",
        "len",
        "arr_bin_num",
        "zer",
        "zero",
        "zero_line",
        "append",
        "i",
        "i",
        "zero_line",
        "arr_bin_num",
        "remove",
        "bit_for_host",
        "bit_for_host",
        "bit_in_addr",
        "bit_in_section",
        "octet_with_host",
        "bit_in_section",
        "type_of_ip",
        "bit_in_addr",
        "bit_for_host",
        "bit_in_addr",
        "bit_for_host",
        "bit_in_addr",
        "bit_for_host",
        "bit_for_net",
        "bit_in_addr",
        "bit_for_net",
        "mask",
        "arr_bin_num",
        "bit_for_host",
        "num",
        "bit_for_host",
        "type_of_ip",
        "type_of_ip",
        "i",
        "bit_for_host",
        "len",
        "num",
        "bit_for_host",
        "i",
        "bit_for_host_in_octet",
        "len",
        "num",
        "join",
        "num",
        "addr",
        "net_octet",
        "octet_with_host",
        "mask",
        "type_of_ip",
        "i",
        "octet_with_host",
        "buf",
        "append",
        "addr",
        "i",
        "buf",
        "append",
        "net_octet",
        "type_of_ip",
        "join",
        "buf",
        "res",
        "mask",
        "i",
        "len",
        "buf",
        "buf",
        "i",
        "flag",
        "res",
        "append",
        "buf",
        "i",
        "res",
        "append",
        "buf",
        "i",
        "join",
        "res",
        "res",
        "mask",
        "res",
        "time",
        "perf_counter",
        "search_subnet",
        "round",
        "time",
        "perf_counter",
        "start"
    ],
    "literals": [
        "\"The number of parameters does not correspond to the required for this function!\"",
        "'These addresses are incorrect!'",
        "\"All addresses are equal. I can't find the min subnet!\"",
        "'ipv4'",
        "'ipv6'",
        "\"Incorrect type of IP-addresses!\"",
        "'r'",
        "'\\n'",
        "''",
        "f'No such file or directory: \"{file_name}\"'",
        "'ipv4'",
        "'.'",
        "':'",
        "'0'",
        "''",
        "''",
        "'ipv4'",
        "'ipv4'",
        "'b'",
        "'0'",
        "'b'",
        "'ipv4'",
        "'/'",
        "'/'",
        "'ipv4'",
        "'0'",
        "'0'",
        "''",
        "'ipv4'",
        "'.'",
        "'0'",
        "'::'",
        "'0'",
        "''",
        "'__main__'",
        "f'The search_subnet() takes {round(time.perf_counter() - start, 9)} sec.'"
    ],
    "variables": [
        "addresses",
        "file_name",
        "type_of_ip",
        "addresses",
        "addresses",
        "octet_with_host",
        "max_num_of_host",
        "mask",
        "bin_num",
        "bit_for_host",
        "net_octet",
        "arr",
        "line",
        "addr_by_octets",
        "arr",
        "count_zero_for_addr",
        "zero_arr",
        "arr",
        "count_of_octets",
        "num_from_hex",
        "num_from_hex",
        "max_num",
        "max_num",
        "bin_num",
        "bit_for_host",
        "bit_in_addr",
        "bit_in_section",
        "bit_in_addr",
        "bit_in_section",
        "arr_bin_num",
        "zero",
        "zero_line",
        "arr_bin_num",
        "mask",
        "bit_for_net",
        "mask",
        "bit_for_host",
        "num",
        "i",
        "bit_for_host_in_octet",
        "num",
        "i",
        "buf",
        "res",
        "res",
        "flag",
        "flag",
        "res",
        "start"
    ],
    "comments": [
        "for working with args of CLI",
        "for IP-addresses from file",
        "1 - check sys.argv of CLI:",
        "check count of sys.argv, can to be 3",
        "for register insensitive",
        "2 - checking type of IP-addresses",
        "3 - reading file and taking a kit of addresses",
        "4 - getting addresses by octets for next step",
        "5 - checking correct of addresses from file",
        "6 - searching an octet/hextet number with different meanings",
        "if all addresses are equal",
        "7 - search max number in octets/hextets with different meanings",
        "8 - count of bit!=0 for this max number -> mask for these addresses",
        "type mask: str, bin_num: list[str], bit_for_host: int",
        "9 - searching a network part of the addresses",
        "10 - result = address_network + mask",
        "type: str",
        "for step 2 - check type of IP-addresses",
        "type: bool",
        "type: bool",
        "for step 3",
        "for taking only address",
        "return None",
        "type: list",
        "for step 4   type of arr_with_addr: list[str]",
        "[['192', '168', '1', '2' ], ['192', '168', '1', '3' ],...]",
        "if type_of_ip == 'ipv6'",
        "['ffe0', '', '80', '0', '0', '0']",
        "count zero for '::' or ''",
        "['0', '0', '0']",
        "replacing '' with zero_arr",
        "[['ffe0', '0', '0', '0', '1', '0', '0', '0' ], ...]",
        "type: list[list[str]]",
        "for step 5, type of addr: list[list[str]]",
        "count of octets for IPv4 can to be only = 4",
        "value of octet can to be only '0 - 255'",
        "if type_of_ip == 'ipv6'",
        "count of hextets for IPv6 can to be only = 8",
        "if the element is hex form",
        "value of hextet can to be only '0 - 65535'",
        "for step 6, type of addr: list[list[str]]",
        "len(addresses[0]) == count of octets/hextets in IP-addresses",
        "type: int",
        "for step 7, type of addr: list[list[str]]",
        "type: int",
        "for step 8",
        "for search max count bit for host",
        "it is counter of bit for host",
        "for 'ipv6'",
        "because we have 'b' -> zero",
        "if bit != 'b'",
        "for 'ipv4' = 32 bits",
        "if 'ipv6'",
        "type mask: str, bin_num: list[str], bit_for_host: int",
        "for step 9, type of num: list[str]",
        "if 'ipv6'",
        "type: str",
        "for step 10",
        "if 'ipv6'",
        "type: str"
    ],
    "docstrings": [
        "''' The function defines the min subnet for received IP-addresses (IPv4 or IPv6).\n\n    Tre function is called with two arguments of CLI.\n    Arguments of CLI:\n    sys.argv[1] is file name with IP-addresses\n    sys.argv[2] is type of IP-addresses (IPv4 or IPv6)\n    The received data is checked for correctness.\n    If the check fails, the function exists and returns the None.\n    Else, data processing is performed using auxiliary functions:\n    - check_type_of_ip(type_of_ip);\n    - taking_kit_of_addresses(file_name);\n    - get_addr_by_octets(arr_with_addr: list, type_of_ip: str);\n    - check_correct_of_addr(addr: list, type_of_ip: str);\n    - search_octet_with_host(addr: list);\n    - search_max_num_in_octets(addr: list, octet_with_host: int);\n    - get_mask(num: int, type_of_ip: str, octet_with_host: int);\n    - get_net_octet(num: list, bit_for_host: int, type_of_ip: str);\n    - get_result(addr: list, net_octet: str, octet_with_host: int, mask: str, type_of_ip: str).\n    The maximum number of bits for hosts from the received set is determined.\n    The mask is calculated.\n    Tre network  is calculated.\n    Result of this function is min subnet for received addresses.\n    The algorithm takes into account the type of received addresses.\n    :return: a str with min subnet for received addresses.\n\n    '''"
    ],
    "functions": [
        "search_subnet",
        "check_type_of_ip",
        "taking_kit_of_addresses",
        "get_addr_by_octets",
        "check_correct_of_addr",
        "search_octet_with_host",
        "search_max_num_in_octets",
        "get_mask",
        "get_net_octet",
        "get_result"
    ],
    "classes": []
}