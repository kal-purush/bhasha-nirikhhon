{
    "identifiers": [
        "callback",
        "value",
        "key",
        "parent",
        "thisArg",
        "reason",
        "controller",
        "reason",
        "controller",
        "chunk",
        "error",
        "chunk",
        "error",
        "chunk",
        "options",
        "chunk",
        "options",
        "chunk",
        "reason",
        "options",
        "options",
        "dest",
        "options",
        "options",
        "underlyingSource",
        "strategy",
        "underlyingSource",
        "strategy",
        "controller",
        "chunk",
        "controller",
        "reason",
        "underlyingSink",
        "strategy",
        "reason",
        "error",
        "reason",
        "chunk",
        "transformer",
        "writableStrategy",
        "readableStrategy",
        "chunk",
        "reason",
        "controller",
        "chunk",
        "controller",
        "start",
        "end",
        "contentType",
        "blobParts",
        "options",
        "fileBits",
        "fileName",
        "options",
        "name",
        "value",
        "fileName",
        "name",
        "name",
        "name",
        "name",
        "name",
        "value",
        "fileName",
        "name",
        "value",
        "name",
        "name",
        "name",
        "name",
        "value",
        "callbackfn",
        "value",
        "key",
        "parent",
        "thisArg",
        "name",
        "value",
        "name",
        "name",
        "name",
        "name",
        "value",
        "callbackfn",
        "value",
        "key",
        "parent",
        "thisArg",
        "init",
        "input",
        "init",
        "body",
        "init",
        "url",
        "status",
        "fetch",
        "input",
        "init"
    ],
    "literals": [
        "\"bytes\"",
        "string",
        "string",
        "\"transparent\"",
        "\"native\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"default\"",
        "\"force-cache\"",
        "\"no-cache\"",
        "\"no-store\"",
        "\"only-if-cached\"",
        "\"reload\"",
        "\"include\"",
        "\"omit\"",
        "\"same-origin\"",
        "\"cors\"",
        "\"navigate\"",
        "\"no-cors\"",
        "\"same-origin\"",
        "\"error\"",
        "\"follow\"",
        "\"manual\"",
        "\"\"",
        "\"no-referrer\"",
        "\"no-referrer-when-downgrade\"",
        "\"origin\"",
        "\"origin-when-cross-origin\"",
        "\"same-origin\"",
        "\"strict-origin\"",
        "\"strict-origin-when-cross-origin\"",
        "\"unsafe-url\"",
        "string",
        "\"\"",
        "\"audio\"",
        "\"audioworklet\"",
        "\"document\"",
        "\"embed\"",
        "\"font\"",
        "\"image\"",
        "\"manifest\"",
        "\"object\"",
        "\"paintworklet\"",
        "\"report\"",
        "\"script\"",
        "\"sharedworker\"",
        "\"style\"",
        "\"track\"",
        "\"video\"",
        "\"worker\"",
        "\"xslt\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "ReadableStream",
        "Blob",
        "File",
        "FormData",
        "Headers",
        "Request",
        "Response"
    ],
    "comments": [
        "Copyright 2018-2020 the Deno authors. All rights reserved. MIT license.",
        "eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, no-var",
        "<reference no-default-lib=\"true\" />",
        "<reference lib=\"esnext\" />",
        "This Streams API interface provides a built-in byte length queuing strategy\n   * that can be used when constructing streams.",
        "This Streams API interface represents a readable stream of byte data. The\n   * Fetch API offers a concrete instance of a ReadableStream through the body\n   * property of a Response object.",
        "getReader(options: { mode: \"byob\" }): ReadableStreamBYOBReader;",
        "This Streams API interface provides a standard abstraction for writing\n   * streaming data to a destination, known as a sink. This object comes with\n   * built-in backpressure and queuing.",
        "This Streams API interface represents a controller allowing control of a\n   * WritableStream's state. When constructing a WritableStream, the underlying\n   * sink is given a corresponding WritableStreamDefaultController instance to\n   * manipulate.",
        "This Streams API interface is the object returned by\n   * WritableStream.getWriter() and once created locks the < writer to the\n   * WritableStream ensuring that no other streams can write to the underlying\n   * sink.",
        "A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.",
        "Provides information about files and allows JavaScript in a web page to\n   * access their content.",
        "Provides a way to easily construct a set of key/value pairs representing\n * form fields and their values, which can then be easily sent using the\n * XMLHttpRequest.send() method. It uses the same format a form would use if the\n * encoding type were set to \"multipart/form-data\".",
        "TODO(ry) FormData constructor is non-standard.",
        "new(form?: HTMLFormElement): FormData;",
        "A simple getter used to expose a `ReadableStream` of the body contents.",
        "Stores a `Boolean` that declares whether the body has been used in a\n   * response yet.",
        "Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with an `ArrayBuffer`.",
        "Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with a `Blob`.",
        "Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with a `FormData` object.",
        "Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with the result of parsing the body text as JSON.",
        "Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with a `USVString` (text).",
        "This Fetch API interface allows you to perform various actions on HTTP\n * request and response headers. These actions include retrieving, setting,\n * adding to, and removing. A Headers object has an associated header list,\n * which is initially empty and consists of zero or more name and value pairs.\n *  You can add to this using methods like append() (see Examples.) In all\n * methods of this interface, header names are matched by case-insensitive byte\n * sequence.",
        "Appends a new value onto an existing header inside a `Headers` object, or\n   * adds the header if it does not already exist.",
        "Deletes a header from a `Headers` object.",
        "Returns an iterator allowing to go through all key/value pairs\n   * contained in this Headers object. The both the key and value of each pairs\n   * are ByteString objects.",
        "Returns a `ByteString` sequence of all the values of a header within a\n   * `Headers` object with a given name.",
        "Returns a boolean stating whether a `Headers` object contains a certain\n   * header.",
        "Returns an iterator allowing to go through all keys contained in\n   * this Headers object. The keys are ByteString objects.",
        "Sets a new value for an existing header inside a Headers object, or adds\n   * the header if it does not already exist.",
        "Returns an iterator allowing to go through all values contained in\n   * this Headers object. The values are ByteString objects.",
        "The Symbol.iterator well-known symbol specifies the default\n   * iterator for this Headers object",
        "This Fetch API interface represents a resource request.",
        "Fetch a resource from the network. It returns a Promise that resolves to the\n   * Response to that request, whether it is successful or not.\n   *\n   *     const response = await fetch(\"http://my.json.host/data.json\");\n   *     console.log(response.status);  // e.g. 200\n   *     console.log(response.statusText); // e.g. \"OK\"\n   *     const jsonData = await response.json();"
    ],
    "docstrings": [
        "* A BodyInit object or null to set request's body.",
        "* A string indicating how the request will interact with the browser's cache\n   * to set request's cache.",
        "* A string indicating whether credentials will be sent with the request\n   * always, never, or only when sent to a same-origin URL. Sets request's\n   * credentials.",
        "* A Headers object, an object literal, or an array of two-item arrays to set\n   * request's headers.",
        "* A cryptographic hash of the resource to be fetched by request. Sets\n   * request's integrity.",
        "* A boolean to set request's keepalive.",
        "* A string to set request's method.",
        "* A string to indicate whether the request will use CORS, or will be\n   * restricted to same-origin URLs. Sets request's mode.",
        "* A string indicating whether request follows redirects, results in an error\n   * upon encountering a redirect, or returns the redirect (in an opaque\n   * fashion). Sets request's redirect.",
        "* A string whose value is a same-origin URL, \"about:client\", or the empty\n   * string, to set request's referrer.",
        "* A referrer policy to set request's referrerPolicy.",
        "* An AbortSignal to set request's signal.",
        "* Can only be null. Used to disassociate request from any Window.",
        "* Returns the cache mode associated with request, which is a string\n   * indicating how the request will interact with the browser's cache when\n   * fetching.",
        "* Returns the credentials mode associated with request, which is a string\n   * indicating whether credentials will be sent with the request always, never,\n   * or only when sent to a same-origin URL.",
        "* Returns the kind of resource requested by request, e.g., \"document\" or \"script\".",
        "* Returns a Headers object consisting of the headers associated with request.\n   * Note that headers added in the network layer by the user agent will not be\n   * accounted for in this object, e.g., the \"Host\" header.",
        "* Returns request's subresource integrity metadata, which is a cryptographic\n   * hash of the resource being fetched. Its value consists of multiple hashes\n   * separated by whitespace. [SRI]",
        "* Returns a boolean indicating whether or not request is for a history\n   * navigation (a.k.a. back-forward navigation).",
        "* Returns a boolean indicating whether or not request is for a reload\n   * navigation.",
        "* Returns a boolean indicating whether or not request can outlive the global\n   * in which it was created.",
        "* Returns request's HTTP method, which is \"GET\" by default.",
        "* Returns the mode associated with request, which is a string indicating\n   * whether the request will use CORS, or will be restricted to same-origin\n   * URLs.",
        "* Returns the redirect mode associated with request, which is a string\n   * indicating how redirects for the request will be handled during fetching. A\n   * request will follow redirects by default.",
        "* Returns the referrer of request. Its value can be a same-origin URL if\n   * explicitly set in init, the empty string to indicate no referrer, and\n   * \"about:client\" when defaulting to the global's default. This is used during\n   * fetching to determine the value of the `Referer` header of the request\n   * being made.",
        "* Returns the referrer policy associated with request. This is used during\n   * fetching to compute the value of the request's referrer.",
        "* Returns the signal associated with request, which is an AbortSignal object\n   * indicating whether or not request has been aborted, and its abort event\n   * handler.",
        "* Returns the URL of request as a string."
    ],
    "functions": [],
    "classes": [
        "CountQueuingStrategy",
        "ByteLengthQueuingStrategy",
        "WritableStream",
        "TransformStream"
    ]
}