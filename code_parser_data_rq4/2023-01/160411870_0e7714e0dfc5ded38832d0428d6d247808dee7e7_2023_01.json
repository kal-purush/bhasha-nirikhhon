{
    "identifiers": [
        "com",
        "example",
        "org",
        "junit",
        "Test",
        "reactor",
        "blockhound",
        "BlockHound",
        "reactor",
        "blockhound",
        "integration",
        "BlockHoundIntegration",
        "java",
        "util",
        "java",
        "util",
        "org",
        "assertj",
        "core",
        "api",
        "Assertions",
        "assertThat",
        "applied",
        "Override",
        "Override",
        "builder",
        "applied",
        "add",
        "Override",
        "builder",
        "applied",
        "add",
        "Override",
        "Override",
        "builder",
        "applied",
        "add",
        "Override",
        "Override",
        "builder",
        "applied",
        "add",
        "Override",
        "builder",
        "applied",
        "add",
        "Override",
        "builder",
        "applied",
        "add",
        "Test",
        "BlockHound",
        "install",
        "expectedApplies",
        "assertThat",
        "applied",
        "containsExactly",
        "expectedApplies"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "Do not install BlockHound in our static initialized, because other tests",
        "will load our inner integrations classes ..."
    ],
    "docstrings": [
        "* Copyright (c) 2023-Present Pivotal Software Inc, All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* BlockHoundIntegration plugins ordering tests.",
        "* Plugin with priority=-1, loaded from\n     * META-INF/services/reactor.blockhound.integration.BlockHoundIntegration (2nd position in file)",
        "* Plugin with default priority=0, loaded from\n     * META-INF/services/reactor.blockhound.integration.BlockHoundIntegration (1st position in file)",
        "* Plugin with priority=1, installed using {@link BlockHound#install(BlockHoundIntegration...)}}",
        "* Plugin with priority=2, installed using {@link BlockHound#install(BlockHoundIntegration...)}}",
        "* Plugin with default priority=0, installed using {@link BlockHound#install(BlockHoundIntegration...)}}",
        "* Plugin with default priority=0, installed using {@link BlockHound#install(BlockHoundIntegration...)}}",
        "* In this test, we install 6 blockhound integrations plugins.\n     * <ul>\n     *     <li> First: priority=-1, defined in META-INF/services/reactor.blockhound.integration.BlockHoundIntegration at 2nd position</li>\n     *     <li> Second: no priority (default=0), defined in META-INF/services/reactor.blockhound.integration.BlockHoundIntegration at 1st position</li>\n     *     <li> Third: priority=1, added using {link {@link BlockHound#install(BlockHoundIntegration...)}}, passed in 2nd parameter</li>\n     *     <li> Fourth: priority=2, added using {link {@link BlockHound#install(BlockHoundIntegration...)}}, passed in 1st parameter</li>\n     *     <li> Fifth: no priority (default=0), added using {link {@link BlockHound#install(BlockHoundIntegration...)}}, passed in 3rd parameter</li>\n     *     <li> Sixth: no priority, by default: 0, added using {link {@link BlockHound#install(BlockHoundIntegration...)}}, passed in 4th parameter</li>\n     * </ul>\n     *\n     * We expect to see the 6 plugins applied in this order: First, Second, Fifth, Sixth, Third, Four.\n     * And plugins without any priority should be loaded in natural order, as before."
    ],
    "functions": [
        "First",
        "getPriority",
        "applyTo",
        "applyTo",
        "getPriority",
        "applyTo",
        "getPriority",
        "applyTo",
        "applyTo",
        "applyTo",
        "checkIntegrationsOrdering"
    ],
    "classes": [
        "IntegrationOrderingTest",
        "First",
        "Second",
        "Third",
        "Fourth",
        "Fifth",
        "Sixth"
    ]
}