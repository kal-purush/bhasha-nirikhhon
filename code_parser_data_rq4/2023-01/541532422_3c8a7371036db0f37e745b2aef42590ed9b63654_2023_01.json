{
    "identifiers": [
        "itertools",
        "sys",
        "numpy",
        "np",
        "pandas",
        "pd",
        "sys",
        "path",
        "insert",
        "typing",
        "data",
        "dataset",
        "Dataset",
        "model_selection",
        "cross_validate",
        "cross_validate",
        "model",
        "dataset",
        "Dataset",
        "parameter_distribution",
        "Dict",
        "Tuple",
        "scoring",
        "Callable",
        "cv",
        "n_iter",
        "test_size",
        "Dict",
        "Any",
        "parameter",
        "parameter_distribution",
        "hasattr",
        "model",
        "parameter",
        "AttributeError",
        "model",
        "parameter",
        "i",
        "n_iter",
        "parameter",
        "parameter_distribution",
        "np",
        "random",
        "choice",
        "parameter_distribution",
        "parameter",
        "setattr",
        "model",
        "parameter",
        "value",
        "value",
        "cross_validate",
        "model",
        "model",
        "dataset",
        "dataset",
        "scoring",
        "scoring",
        "cv",
        "cv",
        "test_size",
        "test_size",
        "parameters",
        "scores",
        "append",
        "score",
        "scores",
        "linear_model",
        "logistic_regression",
        "LogisticRegression",
        "Dataset",
        "from_random",
        "LogisticRegression",
        "use_adaptive_alpha",
        "np",
        "linspace",
        "np",
        "linspace",
        "np",
        "linspace",
        "dtype",
        "randomized_search_cv",
        "knn",
        "dataset_",
        "parameter_distribution",
        "parameter_distribution_",
        "cv",
        "scores_",
        "sys",
        "path",
        "insert",
        "si",
        "io",
        "csv_file",
        "read_csv",
        "read_csv",
        "path",
        "sep",
        "features",
        "label",
        "sklearn",
        "preprocessing",
        "StandardScaler",
        "StandardScaler",
        "fit_transform",
        "breast",
        "X",
        "LogisticRegression",
        "use_adaptive_alpha",
        "np",
        "linspace",
        "np",
        "linspace",
        "np",
        "linspace",
        "dtype",
        "randomized_search_cv",
        "log_reg",
        "breast",
        "parameter_distribution",
        "cv",
        "pd",
        "DataFrame",
        "scores"
    ],
    "literals": [
        "'src/si'",
        "f\"Model {model} does not haver parameter {parameter}\"",
        "'parameters'",
        "'__main__'",
        "\"--------Example 1--------\"",
        "'l2_penalty'",
        "'alpha'",
        "'max_iter'",
        "f\"Scores: {scores_}\\n\"",
        "\"--------Example 2--------\"",
        "'src'",
        "'C:/Users/ASUS/Desktop/Bioinfo/2ano/Sistemas Inteligentes/si/datasets/breast-bin.csv'",
        "\",\"",
        "\"l2_penalty\"",
        "\"alpha\"",
        "\"max_iter\"",
        "f\"Scores: \\n{pd.DataFrame(scores)}\""
    ],
    "variables": [
        "scores",
        "parameters",
        "value",
        "parameters",
        "parameter",
        "score",
        "score",
        "dataset_",
        "knn",
        "parameter_distribution_",
        "scores_",
        "path",
        "breast",
        "breast",
        "X",
        "log_reg",
        "parameter_distribution",
        "scores"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "modules",
        "Checks if the given parameters in parameter_distribution exists in the model",
        "for each combination",
        "parameter configuration",
        "set the parameters",
        "take a random value from the value distribution of each parameter",
        "add the parameter configuration",
        "add the score",
        "pd.DataFrame(scores)",
        "initialize the Logistic Regression model"
    ],
    "docstrings": [
        "\"\"\"\n    Performs a randomized search cross validation on a model.\n\n    Parameters\n    ----------\n    model\n        The model to cross validate.\n    dataset: Dataset\n        The dataset to cross validate on.\n    parameter_distribution: Dict[str, Tuple]\n        The parameter distribution to use.\n    scoring: Callable\n        The scoring function to use.\n    cv: int\n        The cross validation folds.\n    n_iter: int\n        The number of random combinations of hyperparameters.\n    test_size: float\n        The test size.\n    \"\"\""
    ],
    "functions": [
        "randomized_search_cv"
    ],
    "classes": []
}