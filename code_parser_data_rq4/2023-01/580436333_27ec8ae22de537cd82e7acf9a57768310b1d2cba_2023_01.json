{
    "identifiers": [
        "input",
        "output",
        "len",
        "input",
        "output",
        "insert",
        "input",
        "subset",
        "smallString",
        "output",
        "i",
        "size",
        "output",
        "insert",
        "i",
        "size",
        "input",
        "output",
        "i",
        "size",
        "num",
        "switcher",
        "get",
        "num",
        "size",
        "i",
        "size",
        "output",
        "i",
        "keypad",
        "output2",
        "printSubsets",
        "size"
    ],
    "literals": [
        "\"abc\"",
        "\" \"",
        "\"abc\"",
        "\"def\"",
        "\"ghi\"",
        "\"jkl\"",
        "\"mno\"",
        "\"pqrs\"",
        "\"tuv\"",
        "\"wxyz\"",
        "\"__main__\""
    ],
    "variables": [
        "input",
        "output",
        "smallString",
        "size",
        "switcher",
        "output2",
        "size"
    ],
    "comments": [
        "Base Condition",
        "recursive call",
        "output[i+size] = input[0] + output[i]",
        "def keypad(num,output):",
        "# Base Condition",
        "if(num==0):",
        "output.insert(0,\" \")",
        "return 1",
        "string = getKeypadText(num%10)",
        "print(len(string))",
        "smallOutputSize = keypad(num/10,output)",
        "ans_size = smallOutputSize * len(string)",
        "print(len(string))",
        "k=0",
        "temp = []",
        "for i in range(0,smallOutputSize):",
        "for j in range (0,len(string)):",
        "# temp[k] = output[i] + string[j]",
        "temp.insert(k,output[i] + string[j])",
        "k +=1",
        "for i in range (0,ans_size):",
        "output[i] = temp[i]",
        "return ans_size",
        "size = subset(input,output)"
    ],
    "docstrings": [],
    "functions": [
        "subset",
        "getKeypadText",
        "printSubsets"
    ],
    "classes": []
}