{
    "identifiers": [
        "itertools",
        "scipy",
        "stats",
        "qmc",
        "numba",
        "numpy",
        "np",
        "cogwheel",
        "likelihood",
        "cogwheel",
        "utils",
        "utils",
        "JSONMixin",
        "sky_dict",
        "m_arr",
        "lookup_table",
        "log2n_qmc",
        "nphi",
        "seed",
        "beta_temperature",
        "seed",
        "np",
        "random",
        "default_rng",
        "seed",
        "lookup_table",
        "likelihood",
        "LookupTable",
        "lookup_table",
        "log2n_qmc",
        "sky_dict",
        "np",
        "asarray",
        "m_arr",
        "m_inds",
        "mprime_inds",
        "itertools",
        "combinations_with_replacement",
        "len",
        "m_arr",
        "nphi",
        "beta_temperature",
        "_create_qmc_sequence",
        "utils",
        "handle_scalars",
        "np",
        "vectorize",
        "lookup_table",
        "sample_distance",
        "otypes",
        "property",
        "_nphi",
        "nphi",
        "setter",
        "nphi",
        "np",
        "linspace",
        "np",
        "pi",
        "nphi",
        "endpoint",
        "retstep",
        "nphi",
        "np",
        "exp",
        "np",
        "outer",
        "m_arr",
        "phi_ref",
        "np",
        "exp",
        "np",
        "outer",
        "m_arr",
        "m_inds",
        "m_arr",
        "mprime_inds",
        "phi_ref",
        "phi_ref",
        "dphi",
        "qmc",
        "scale",
        "qmc",
        "Sobol",
        "len",
        "_qmc_range_dic",
        "seed",
        "_rng",
        "random_base2",
        "log2n_qmc",
        "_qmc_range_dic",
        "values",
        "T",
        "len",
        "sky_dict",
        "detector_names",
        "_qmc_range_dic",
        "n_det",
        "sequence_values",
        "n_det",
        "u_tdet",
        "sequence_values",
        "n_det",
        "np",
        "sin",
        "qmc_sequence",
        "np",
        "cos",
        "qmc_sequence",
        "np",
        "moveaxis",
        "costwopsi",
        "sintwopsi",
        "sintwopsi",
        "costwopsi",
        "qmc_sequence",
        "property",
        "sky_dict",
        "f_sampling",
        "fromkeys",
        "sky_dict",
        "detector_names",
        "dt",
        "dt",
        "np",
        "pi",
        "dh_qo",
        "hh_qo",
        "prior_weights_q",
        "dh_qo",
        "np",
        "abs",
        "dh_qo",
        "hh_qo",
        "np",
        "where",
        "max_over_distance_lnl",
        "np",
        "max",
        "max_over_distance_lnl",
        "DLNL_THRESHOLD",
        "_lnlike_marginalized_over_distance",
        "dh_qo",
        "important",
        "hh_qo",
        "important",
        "lnl_marg_dist",
        "max",
        "np",
        "exp",
        "lnl_marg_dist",
        "lnl_max",
        "like_marg_dist",
        "prior_weights_q",
        "important",
        "lnl_max",
        "np",
        "log",
        "full_weights_i",
        "sum",
        "_dphi",
        "log2n_qmc",
        "lnl_marginalized",
        "full_weights_i",
        "important",
        "sky_inds",
        "physical_mask",
        "sky_dict",
        "fplus_fcross_0",
        "sky_inds",
        "_qmc_sequence",
        "physical_mask",
        "np",
        "einsum",
        "rot_psi",
        "fplus_fcross_0",
        "fplus_fcross",
        "t_arrival_lnprob",
        "times",
        "_draw_indices",
        "t_arrival_lnprob",
        "T",
        "_qmc_sequence",
        "tdet_inds",
        "tdet_inds",
        "np",
        "array",
        "delays_key",
        "sky_dict",
        "delays2genind_map",
        "delays_key",
        "delays",
        "delays",
        "physical_mask",
        "np",
        "prod",
        "tdet_weights",
        "physical_mask",
        "sky_dict",
        "f_sampling",
        "axis",
        "times",
        "tdet_inds",
        "physical_mask",
        "_qmc_sequence",
        "physical_mask",
        "t_first_det",
        "delays",
        "physical_mask",
        "importance_sampling_weight",
        "d_h",
        "h_h",
        "lookup_table",
        "d_h",
        "h_h",
        "d_h",
        "h_h",
        "numba",
        "guvectorize",
        "numba",
        "float64",
        "numba",
        "float64",
        "numba",
        "int64",
        "numba",
        "float64",
        "unnormalized_lnprob",
        "quantiles",
        "indices",
        "weights",
        "np",
        "exp",
        "unnormalized_lnprob",
        "unnormalized_lnprob",
        "max",
        "np",
        "cumsum",
        "prob",
        "prob",
        "cumprob",
        "cumprob",
        "cumprob",
        "np",
        "searchsorted",
        "cumprob",
        "quantiles",
        "prob",
        "indices"
    ],
    "literals": [
        "'psi'",
        "'psi'",
        "'rot_psi'",
        "'t_fine'",
        "'psi'",
        "'rot_psi'",
        "'qpP,qdP->qdp'",
        "'u_tdet'",
        "'t_fine'",
        "'(n),(m)->(m),(m)'"
    ],
    "variables": [
        "DLNL_THRESHOLD",
        "seed",
        "_rng",
        "lookup_table",
        "lookup_table",
        "log2n_qmc",
        "sky_dict",
        "m_arr",
        "_dh_phasor",
        "_hh_phasor",
        "_dphi",
        "nphi",
        "beta_temperature",
        "_qmc_sequence",
        "_sample_distance",
        "phi_ref",
        "dphi",
        "_nphi",
        "_dh_phasor",
        "_hh_phasor",
        "_phi_ref",
        "_dphi",
        "sequence_values",
        "n_det",
        "qmc_sequence",
        "sintwopsi",
        "costwopsi",
        "qmc_sequence",
        "dt",
        "max_over_distance_lnl",
        "important",
        "lnl_marg_dist",
        "lnl_max",
        "like_marg_dist",
        "full_weights_i",
        "lnl_marginalized",
        "fplus_fcross_0",
        "rot_psi",
        "fplus_fcross",
        "tdet_inds",
        "tdet_weights",
        "delays",
        "physical_mask",
        "delays",
        "importance_sampling_weight",
        "t_first_det",
        "prob",
        "cumprob",
        "indices",
        "weights"
    ],
    "comments": [
        "Remove from the orbital phase integral any sample with a drop in",
        "log-likelihood from the peak bigger than ``DLNL_THRESHOLD``:",
        "Set by nphi.setter",
        "Set by nphi.setter",
        "Set by nphi.setter",
        "mo",
        "mo",
        "qpp'",
        "qo",
        "i",
        "i",
        "i",
        "qdp",
        "qpp'",
        "qdp",
        "dq, dq",
        "dq  # In units of dt",
        "q",
        "q",
        "Unit sum"
    ],
    "docstrings": [
        "\"\"\"\nDefine class ``BaseCoherentScore`` to marginalize the likelihood over\nextrinsic parameters from matched-filtering timeseries.\n\n``BaseCoherentScore`` is meant for subclassing differently depending on\nthe waveform physics included (precession and/or higher modes).\n\"\"\"",
        "\"\"\"\n    Base class for computing coherent scores (i.e., marginalized\n    likelihoods over extrinsic parameters) from matched-filtering\n    timeseries.\n    Meant to be subclassed differently depending on the waveform physics\n    (precession and/or higher modes) that may require different\n    algorithms.\n    This class provides methods to initialize and perform some of the\n    generic steps that the coherent score computation normally requires.\n    \"\"\"",
        "\"\"\"\n        Parameters\n        ----------\n        sky_dict:\n            Instance of cogwheel.coherent_score_hm.skydict.SkyDictionary\n\n        m_arr: int array\n            m number of the harmonic modes considered.\n\n        lookup_table:\n            Instance of cogwheel.likelihood.marginalized_distance.LookupTable\n\n        log2n_qmc: int\n            Base-2 logarithm of the number of requested extrinsic\n            parameter samples.\n\n        nphi: int\n            Number of orbital phases over which to perform\n            marginalization with trapezoid quadrature rule.\n\n        seed: {int, None, np.random.RandomState}\n            For reproducibility of the extrinsic parameter samples.\n\n        beta_temperature: float\n            Inverse temperature, tempers the arrival time probability at\n            each detector.\n        \"\"\"",
        "\"\"\"\n        Number of orbital phases to integrate over with the trapezoid\n        rule.\n        \"\"\"",
        "\"\"\"\n        Return a dictionary whose values are arrays corresponding to a\n        Quasi Monte Carlo sequence that explores parameters per\n        ``._qmc_range_dic``.\n        The arrival time cumulatives are packed in a single entry\n        'u_tdet'. An entry 'rot_psi' has the rotation matrices to\n        transform the antenna factors between psi=0 and psi=psi_qmc.\n        \"\"\"",
        "\"\"\"\n        Parameter ranges for the QMC sequence.\n        The sequence explores the cumulatives of the single-detector\n        (incoherent) likelihood of arrival times, the polarization, and\n        the fine (subpixel) time of arrival.\n        \"\"\"",
        "\"\"\"\n        Parameters\n        ----------\n        sky_inds: tuple of ints, of length n_physical\n            Indices to sky_dict.sky_samples corresponding to the\n            (physical) QMC samples.\n\n        physical_mask: boolean array of length n_qmc\n            Some choices of time of arrival at detectors may not\n            correspond to any physical sky location, these are flagged\n            ``False`` in this array.\n\n        Return\n        ------\n        fplus_fcross: float array of shape (n_physical, n_detectors, 2)\n            Antenna factors.\n        \"\"\"",
        "\"\"\"\n        Choose time of arrivals independently at each detector according\n        to the QMC sequence, according to a proposal distribution based\n        on the matched-filtering timeseries.\n\n        Parameters\n        ----------\n        t_arrival_lnprob: (n_times, n_det) float array\n            Incoherent proposal for log probability of arrival times at\n            each detector.\n\n        times: (n_t,) float array\n            Timestamps of the timeseries (s).\n\n        Return\n        ------\n        t_first_det: float array of length n_physical\n            Time of arrival at the first detector.\n\n        delays: int array of shape (n_det-1, n_physical)\n            Time delay between the first detector and the other\n            detectors, in units of 1/.skydict.f_sampling\n\n        physical_mask: boolean array of length n_qmc\n            Some choices of time of arrival at detectors may not\n            correspond to any physical sky location, these are flagged\n            ``False`` in this array. Unphysical samples are discarded.\n\n        importance_sampling_weight: array\n            Density ratio between the astrophysical prior and the\n            proposal distribution of arrival times.\n        \"\"\"",
        "\"\"\"\n        Return log of the distance-marginalized likelihood.\n        Note, d_h and h_h are real numbers (already summed over modes,\n        polarizations, detectors). The strain must correspond to the\n        reference distance ``self.lookup_table.REFERENCE_DISTANCE``.\n\n        Parameters\n        ----------\n        d_h: float\n            Inner product of data and model strain.\n\n        h_h: float\n            Inner product of strain with itself.\n        \"\"\"",
        "\"\"\"\n    Sample desired quantiles from a distribution using the inverse of\n    its cumulative.\n\n    Parameters\n    ----------\n    unnormalized_lnprob, quantiles\n\n    Return\n    ------\n    indices, weights\n    \"\"\""
    ],
    "functions": [
        "nphi",
        "nphi",
        "_create_qmc_sequence",
        "_qmc_range_dic",
        "_get_lnl_marginalized_and_weights",
        "_get_fplus_fcross",
        "_draw_single_det_times",
        "_lnlike_marginalized_over_distance",
        "_draw_indices"
    ],
    "classes": [
        "BaseCoherentScore"
    ]
}