{
    "identifiers": [
        "collections",
        "contextlib",
        "logging",
        "os",
        "sys",
        "typing",
        "Iterator",
        "Optional",
        "click",
        "datahub",
        "utilities",
        "tee_io",
        "TeeIO",
        "os",
        "environ",
        "get",
        "logging",
        "Formatter",
        "BASE_LOGGING_FORMAT",
        "record",
        "logging",
        "LogRecord",
        "NO_COLOR",
        "sys",
        "stderr",
        "isatty",
        "_formatMessageColor",
        "record",
        "formatMessage",
        "record",
        "record",
        "logging",
        "LogRecord",
        "MESSAGE_COLORS",
        "get",
        "record",
        "levelname",
        "click",
        "style",
        "formatTime",
        "record",
        "datefmt",
        "fg",
        "dim",
        "click",
        "style",
        "record",
        "levelname",
        "fg",
        "message_fg",
        "click",
        "style",
        "record",
        "name",
        "record",
        "lineno",
        "fg",
        "dim",
        "click",
        "style",
        "record",
        "getMessage",
        "fg",
        "message_fg",
        "logging",
        "Filter",
        "debug",
        "debug",
        "record",
        "logging",
        "LogRecord",
        "record",
        "name",
        "split",
        "top_module",
        "DATAHUB_PACKAGES",
        "debug",
        "record",
        "levelno",
        "logging",
        "DEBUG",
        "record",
        "levelno",
        "logging",
        "INFO",
        "debug",
        "record",
        "levelno",
        "logging",
        "WARNING",
        "record",
        "levelno",
        "logging",
        "INFO",
        "maxlen",
        "Optional",
        "collections",
        "deque",
        "maxlen",
        "maxlen",
        "line",
        "_buffer",
        "append",
        "line",
        "_buffer",
        "clear",
        "join",
        "_buffer",
        "len",
        "_buffer",
        "len",
        "_buffer",
        "_buffer",
        "maxlen",
        "text",
        "text",
        "logging",
        "Handler",
        "storage",
        "_LogBuffer",
        "storage",
        "record",
        "logging",
        "LogRecord",
        "_storage",
        "write",
        "format",
        "record",
        "logger",
        "logging",
        "Logger",
        "handler",
        "logger",
        "handlers",
        "logger",
        "removeHandler",
        "handler",
        "handler",
        "close",
        "_LogBuffer",
        "maxlen",
        "IN_MEMORY_LOG_BUFFER_SIZE",
        "_LogBuffer",
        "_log_buffer",
        "_ColorLogFormatter",
        "logging",
        "Formatter",
        "BASE_LOGGING_FORMAT",
        "contextlib",
        "contextmanager",
        "debug",
        "log_file",
        "Optional",
        "Iterator",
        "_log_buffer",
        "clear",
        "contextlib",
        "ExitStack",
        "stack",
        "logging",
        "StreamHandler",
        "stream_handler",
        "addFilter",
        "_DatahubLogFilter",
        "debug",
        "debug",
        "stream_handler",
        "setFormatter",
        "_stream_formatter",
        "logging",
        "Handler",
        "log_file",
        "stack",
        "enter_context",
        "open",
        "log_file",
        "TeeIO",
        "sys",
        "stdout",
        "file",
        "stack",
        "enter_context",
        "contextlib",
        "redirect_stdout",
        "tee",
        "logging",
        "StreamHandler",
        "file",
        "file_handler",
        "addFilter",
        "_DatahubLogFilter",
        "debug",
        "file_handler",
        "setFormatter",
        "_default_formatter",
        "logging",
        "NullHandler",
        "_BufferLogHandler",
        "_log_buffer",
        "buffer_handler",
        "addFilter",
        "_DatahubLogFilter",
        "debug",
        "debug",
        "buffer_handler",
        "setFormatter",
        "_default_formatter",
        "stream_handler",
        "file_handler",
        "buffer_handler",
        "logging",
        "getLogger",
        "_remove_all_handlers",
        "root_logger",
        "root_logger",
        "setLevel",
        "logging",
        "INFO",
        "handler",
        "handlers",
        "root_logger",
        "addHandler",
        "handler",
        "lib",
        "DATAHUB_PACKAGES",
        "logging",
        "getLogger",
        "lib",
        "_remove_all_handlers",
        "lib_logger",
        "lib_logger",
        "setLevel",
        "logging",
        "DEBUG",
        "handler",
        "handlers",
        "lib_logger",
        "addHandler",
        "handler",
        "logging",
        "getLogger",
        "setLevel",
        "logging",
        "ERROR",
        "logging",
        "getLogger",
        "setLevel",
        "level",
        "logging",
        "WARNING"
    ],
    "literals": [
        "\"[%(asctime)s] %(levelname)-8s {%(name)s:%(lineno)d} - %(message)s\"",
        "\"datahub\"",
        "\"datahub_provider\"",
        "\"datahub_classify\"",
        "\"datahub_actions\"",
        "\"NO_COLOR\"",
        "\"DEBUG\"",
        "\"blue\"",
        "\"INFO\"",
        "\"WARNING\"",
        "\"yellow\"",
        "\"ERROR\"",
        "\"red\"",
        "\"CRITICAL\"",
        "\"red\"",
        "f'{click.style(f\"[{self.formatTime(record, self.datefmt)}]\", fg=\"green\", dim=True)} '",
        "f\"[{self.formatTime(record, self.datefmt)}]\"",
        "\"green\"",
        "f\"{click.style(f'{record.levelname:8}', fg=message_fg)} \"",
        "f'{record.levelname:8}'",
        "f'{click.style(f\"{{{record.name}:{record.lineno}}}\", fg=\"blue\", dim=True)} - '",
        "f\"{{{record.name}:{record.lineno}}}\"",
        "\"blue\"",
        "f\"{click.style(record.getMessage(), fg=message_fg)}\"",
        "\".\"",
        "\"\\n\"",
        "\"[no logs]\"",
        "f\"[earlier logs truncated...]\\n{text}\"",
        "\"w\"",
        "\"urllib3\"",
        "\"snowflake\""
    ],
    "variables": [
        "BASE_LOGGING_FORMAT",
        "DATAHUB_PACKAGES",
        "IN_MEMORY_LOG_BUFFER_SIZE",
        "NO_COLOR",
        "MESSAGE_COLORS",
        "message_fg",
        "debug",
        "top_module",
        "_buffer",
        "text",
        "text",
        "text",
        "_storage",
        "_log_buffer",
        "_stream_formatter",
        "_default_formatter",
        "stream_handler",
        "file_handler",
        "file",
        "tee",
        "file_handler",
        "file_handler",
        "buffer_handler",
        "handlers",
        "root_logger",
        "lib_logger",
        "lib_logger",
        "propagate"
    ],
    "comments": [
        "lines",
        "Adapted from https://stackoverflow.com/a/56944256/3638629.",
        "print with default color",
        "Mimic our default format, but with color.",
        "Create stdout handler.",
        "Create file handler.",
        "type: ignore",
        "Create the in-memory buffer handler.",
        "Configure the loggers.",
        "Using a separate handler from the root logger allows us to control the log level",
        "of the datahub libs independently of the root logger.",
        "It also insulates us from rogue libraries that might call `logging.basicConfig`",
        "or otherwise mess with the logging configuration.",
        "Reduce logging from some particularly chatty libraries.",
        "logging.getLogger(\"botocore\").setLevel(logging.INFO)",
        "logging.getLogger(\"google\").setLevel(logging.INFO)"
    ],
    "docstrings": [
        "\"\"\"\nConfigure logging and stdout for the CLI. Our goal is to have the following behavior:\n\n1. By default, show INFO level logs from datahub and WARNINGs from everything else.\n2. If the user passes --debug, show DEBUG level logs from datahub and INFOs from everything else.\n3. If the user passes --log-file, write all logs and stdout to the specified file.\n   This should contain debug logs regardless of the user's CLI args.\n4. Maintain an in-memory buffer of the latest logs for reporting purposes.\n5. When outputting to a TTY, colorize the logs.\n\nThis code path should not be executed if we're being used as a library.\n\"\"\""
    ],
    "functions": [
        "formatMessage",
        "_formatMessageColor",
        "write",
        "clear",
        "format_lines",
        "emit",
        "_remove_all_handlers",
        "get_log_buffer",
        "configure_logging"
    ],
    "classes": [
        "_ColorLogFormatter",
        "_DatahubLogFilter",
        "_LogBuffer",
        "_BufferLogHandler"
    ]
}