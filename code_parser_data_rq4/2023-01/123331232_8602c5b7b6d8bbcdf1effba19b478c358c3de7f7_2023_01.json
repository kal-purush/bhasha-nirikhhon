{
    "identifiers": [
        "gql",
        "Project",
        "ProjectSource",
        "graphql",
        "GraphQLSchema",
        "ArangoDBAdapter",
        "isArangoDBDisabled",
        "createTempDatabase",
        "expect",
        "TimeToLiveConfig",
        "data",
        "Project",
        "ProjectSource",
        "gql",
        "ProjectSource",
        "ttlConfig",
        "project",
        "createTempDatabase",
        "ArangoDBAdapter",
        "dbConfig",
        "adapter",
        "model",
        "project",
        "adapter",
        "graphql",
        "gql",
        "expect",
        "initResult",
        "graphql",
        "gql",
        "expect",
        "result",
        "result",
        "t",
        "t",
        "graphql",
        "gql",
        "expect",
        "result",
        "result",
        "t",
        "t",
        "graphql",
        "gql",
        "expect",
        "result",
        "result",
        "t",
        "t",
        "describe",
        "isArangoDBDisabled",
        "it",
        "setUp",
        "getAllKeys",
        "expect",
        "beforeKeys",
        "project",
        "adapter",
        "getAllKeys",
        "expect",
        "afterKeys",
        "it",
        "setUp",
        "project",
        "adapter",
        "expect",
        "info",
        "it",
        "setUp",
        "getAllKeys",
        "expect",
        "beforeKeys",
        "getN1Keys",
        "expect",
        "beforeN1s",
        "project",
        "adapter",
        "getAllKeys",
        "expect",
        "afterKeys",
        "getN1Keys",
        "expect",
        "afterN1s",
        "it",
        "setUp",
        "getAllKeys",
        "expect",
        "beforeKeys",
        "getN2Keys",
        "expect",
        "beforeN2s",
        "project",
        "adapter",
        "expect",
        "ttlPromise"
    ],
    "literals": [
        "'graphql-tag'",
        "'../../../src/project/project'",
        "'../../../src/project/source'",
        "'graphql'",
        "'../../../src/database/arangodb'",
        "'./arangodb-test-utils'",
        "'../../regression/initialization'",
        "'chai'",
        "'../../../src/model'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'Test'",
        "'finishedAt'",
        "'source.graphqls'",
        "type Test @rootEntity {\n                        key: String\n                        finishedAt: DateTime\n                        nested: [N1] @relation(onDelete: CASCADE)\n                    }\n\n                    type N1 @rootEntity {\n                        key: String\n                        nested: [N2] @relation(onDelete: RESTRICT)\n                        parent: Test @relation(inverseOf: \"nested\")\n                    }\n\n                    type N2 @rootEntity {\n                        key: String\n                        parent: N1 @relation(inverseOf: \"nested\")\n                    }",
        "'ttl.json'",
        "mutation init($data: [CreateTestInput!]!) {\n                createTests(input: $data) {\n                    key\n                }\n            }",
        "{\n                        allTests(orderBy: key_ASC) {\n                            key\n                        }\n                    }",
        "{\n                        allN1s(orderBy: key_ASC) {\n                            key\n                        }\n                    }",
        "{\n                        allN2s(orderBy: key_ASC) {\n                            key\n                        }\n                    }",
        "'ArangoDB TTL'",
        "'deletes expired objects'",
        "'1'",
        "'2023-01-01T00:00:00Z'",
        "'7'",
        "'2023-01-07T00:00:00Z'",
        "'8'",
        "'2023-01-08T00:00:00Z'",
        "'9'",
        "'2023-01-09T00:00:00Z'",
        "'N'",
        "'1'",
        "'7'",
        "'8'",
        "'9'",
        "'N'",
        "'2023-01-10T01:00:00Z'",
        "'8'",
        "'9'",
        "'N'",
        "'informs about expired and overdue objects'",
        "'1'",
        "'2023-01-01T00:00:00Z'",
        "'7'",
        "'2023-01-07T00:00:00Z'",
        "'8'",
        "'2023-01-08T00:00:00Z'",
        "'9'",
        "'2023-01-09T00:00:00Z'",
        "'N'",
        "'2023-01-10T01:00:00Z'",
        "'finishedAt'",
        "'Test'",
        "'respects CASCADE'",
        "'K'",
        "'2023-01-10T00:00:00Z'",
        "'K1'",
        "'K2'",
        "'D'",
        "'2023-01-01T00:00:00Z'",
        "'D1'",
        "'D2'",
        "'D'",
        "'K'",
        "'D1'",
        "'D2'",
        "'K1'",
        "'K2'",
        "'2023-01-10T01:00:00Z'",
        "'K'",
        "'K1'",
        "'K2'",
        "'respects RESTRICT'",
        "'K'",
        "'2023-01-10T00:00:00Z'",
        "'K1'",
        "'K11'",
        "'K2'",
        "'D'",
        "'2023-01-01T00:00:00Z'",
        "'D1'",
        "'D11'",
        "'D2'",
        "'R'",
        "'2023-01-01T00:00:00Z'",
        "'R1'",
        "'R11'",
        "'R2'",
        "'D'",
        "'K'",
        "'R'",
        "'D11'",
        "'K11'",
        "'R11'",
        "'2023-01-10T01:00:00Z'"
    ],
    "variables": [
        "ttlConfig",
        "project",
        "model",
        "dbConfig",
        "adapter",
        "schema",
        "initResult",
        "result",
        "result",
        "result",
        "beforeKeys",
        "afterKeys",
        "info",
        "beforeKeys",
        "beforeN1s",
        "afterKeys",
        "afterN1s",
        "beforeKeys",
        "beforeN2s",
        "ttlPromise"
    ],
    "comments": [
        "can't use arrow function because we need the \"this\"",
        "ideally, this should delete D but keep R",
        "this is not supported currently; instead, the whole TTL batch fails",
        "this test exists to document the status quo and can be converted to test the correct",
        "behavior by uncommenting the expects below.",
        "const afterKeys = await getAllKeys();\n        expect(afterKeys).to.deep.equal(['K', 'R']);\n        const afterN2s = await getN2Keys();\n        expect(afterN2s).to.deep.equal(['K11', 'R11']);"
    ],
    "docstrings": [],
    "functions": [
        "setUp"
    ],
    "classes": []
}