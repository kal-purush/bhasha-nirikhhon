{
    "identifiers": [
        "flask",
        "Flask",
        "request",
        "jsonify",
        "flask_sqlalchemy",
        "SQLAlchemy",
        "flask_marshmallow",
        "Marshmallow",
        "os",
        "Flask",
        "os",
        "path",
        "abspath",
        "os",
        "path",
        "dirname",
        "app",
        "config",
        "os",
        "path",
        "join",
        "basedir",
        "app",
        "config",
        "SQLAlchemy",
        "app",
        "Marshmallow",
        "app",
        "db",
        "Model",
        "db",
        "Column",
        "db",
        "primary_key",
        "db",
        "Column",
        "db",
        "unique",
        "db",
        "Column",
        "db",
        "db",
        "Column",
        "db",
        "db",
        "Column",
        "db",
        "title",
        "author",
        "year",
        "isbn",
        "title",
        "author",
        "year",
        "isbn",
        "ma",
        "Schema",
        "TaskSchema",
        "TaskSchema",
        "many",
        "app",
        "route",
        "methods",
        "request",
        "json",
        "request",
        "json",
        "request",
        "json",
        "request",
        "json",
        "title",
        "author",
        "year",
        "isbn",
        "db",
        "session",
        "add",
        "new_task",
        "db",
        "session",
        "commit",
        "task_schema",
        "jsonify",
        "new_task",
        "app",
        "route",
        "methods",
        "query",
        "all",
        "tasks_schema",
        "dump",
        "all_tasks",
        "jsonify",
        "result",
        "app",
        "route",
        "methods",
        "id",
        "query",
        "get",
        "id",
        "task_schema",
        "jsonify",
        "task",
        "app",
        "route",
        "methods",
        "id",
        "query",
        "get",
        "id",
        "request",
        "json",
        "request",
        "json",
        "request",
        "json",
        "request",
        "json",
        "title",
        "author",
        "year",
        "isbn",
        "db",
        "session",
        "commit",
        "task_schema",
        "jsonify",
        "task",
        "app",
        "route",
        "methods",
        "id",
        "query",
        "get",
        "id",
        "db",
        "session",
        "task",
        "db",
        "session",
        "commit",
        "task_schema",
        "jsonify",
        "task",
        "app",
        "run",
        "debug"
    ],
    "literals": [
        "'SQLALCHEMY_DATABASE_URI'",
        "'sqlite:///'",
        "'db.sqlite'",
        "'SQLALCHEMY_TRACK_MODIFICATIONS'",
        "'id'",
        "'title'",
        "'author'",
        "'year'",
        "'isbn'",
        "'/task'",
        "'POST'",
        "'title'",
        "'author'",
        "'year'",
        "'isbn'",
        "'/task'",
        "'GET'",
        "'/task/<id>'",
        "'GET'",
        "'/task/<id>'",
        "'PUT'",
        "'title'",
        "'author'",
        "'year'",
        "'isbn'",
        "'/task/<id>'",
        "'DELETE'",
        "'__main__'"
    ],
    "variables": [
        "app",
        "basedir",
        "db",
        "ma",
        "id",
        "title",
        "author",
        "year",
        "isbn",
        "title",
        "author",
        "year",
        "isbn",
        "fields",
        "task_schema",
        "tasks_schema",
        "title",
        "author",
        "year",
        "isbn",
        "new_task",
        "all_tasks",
        "result",
        "task",
        "task",
        "title",
        "author",
        "year",
        "isbn",
        "task",
        "title",
        "task",
        "author",
        "task",
        "year",
        "task",
        "isbn",
        "task"
    ],
    "comments": [
        "Create a REST API using Python and a SQLAlchemy database that allows users to manage a list of tasks. The API should have the following endpoints:",
        "GET /tasks: Retrieve a list of all tasks in the database",
        "POST /tasks: Add a new task to the database",
        "PUT /tasks/<id>: Update an existing task in the database",
        "DELETE /tasks/<id>: Delete a task from the database",
        "The task model should have the following fields:",
        "id: Unique identifier for the task (integer)",
        "title: Title of the task (string)",
        "author: Author of the task (string)",
        "year: Year the task was published (integer)",
        "isbn: ISBN number of the task (string)",
        "The API should be able to handle validation errors, such as a missing required field or an invalid data type for a field.",
        "Init app",
        "Database",
        "Init db",
        "Init ma",
        "Task Class/Model",
        "Task Schema",
        "Init schema",
        "Create a Task",
        "Get All Tasks",
        "Get Single Task",
        "Update a Task",
        "Delete Task",
        "Run Server"
    ],
    "docstrings": [],
    "functions": [
        "add_task",
        "get_tasks",
        "get_task",
        "update_task",
        "delete_task"
    ],
    "classes": [
        "TaskSchema",
        "Meta"
    ]
}