{
    "identifiers": [
        "JsonSchemaObjectType",
        "JsonSchemaType",
        "TopLevelSchema",
        "jsonSchema",
        "detectSubSchemaFeatures",
        "jsonSchema",
        "features",
        "jsonSchema",
        "key",
        "jsonSchema",
        "detectSubSchemaFeatures",
        "jsonSchema",
        "key",
        "features",
        "jsonSchema",
        "key",
        "jsonSchema",
        "detectSubSchemaFeatures",
        "jsonSchema",
        "key",
        "features",
        "features",
        "subSchema",
        "features",
        "subSchema",
        "subSchema",
        "key",
        "subSchema",
        "detectSubSchemaFeatures",
        "subSchema",
        "key",
        "features",
        "subSchema",
        "subSchema",
        "features",
        "subSchema",
        "features",
        "subSchema",
        "subSchema",
        "features",
        "detectSubObjectSchemaFeatures",
        "subSchema",
        "features",
        "subSchema",
        "features",
        "subSchema",
        "subSchema",
        "subSchema",
        "features",
        "subSchema",
        "detectSchemaFeatures",
        "subSchema",
        "subSchema",
        "detectSchemaFeatures",
        "subSchema",
        "subSchema",
        "detectSchemaFeatures",
        "subSchema",
        "subSchema",
        "subSchema",
        "subSchema",
        "features",
        "subSchema",
        "detectSubSchemaFeatures",
        "subSchema",
        "features",
        "subSchema",
        "detectSubSchemaFeatures",
        "subSchema",
        "features",
        "subSchema",
        "detectSubSchemaFeatures",
        "subSchema",
        "features",
        "subSchema",
        "features",
        "subSchema",
        "features",
        "subSchema",
        "features",
        "subSchema",
        "features",
        "subSchema",
        "features",
        "subSchema",
        "features",
        "subSchema",
        "features",
        "subSchema",
        "features",
        "subSchema",
        "features",
        "subSchema",
        "features",
        "subSchema",
        "detectSubSchemaPropertiesFeatures",
        "subSchema",
        "features",
        "subSchema",
        "detectSubSchemaPropertiesFeatures",
        "subSchema",
        "features",
        "subSchema",
        "detectSubSchemaFeatures",
        "subSchema",
        "features",
        "subSchema",
        "subSchema",
        "item",
        "detectSubSchemaFeatures",
        "item",
        "features",
        "subSchema",
        "detectSubSchemaFeatures",
        "subSchema",
        "features"
    ],
    "literals": [
        "'@/schema/jsonSchemaType'",
        "'object'",
        "'oneOf'",
        "'anyOf'",
        "'allOf'",
        "'oneOf'",
        "'anyOf'",
        "'allOf'",
        "'if'",
        "'then'",
        "'else'",
        "'if'",
        "'then'",
        "'else'",
        "'properties'",
        "'patternProperties'",
        "'additionalProperties'"
    ],
    "variables": [
        "features"
    ],
    "comments": [
        "on purpose, we currently do not track whether it uses constraints (e.g., maxLength, minLength, etc.) because there are so many of them and for our use case we do not need to know about them",
        "oneOf, anyOf, allOf",
        "if, then, else",
        "when a sub-schema is simply true or false instead of an object",
        "detect features for root level schema",
        "detect features for all $defs and definitions",
        "the sub schema will be either true, false or a dictionary of keys that map to a sub schema",
        "this function will be called for properties, patternProperties each",
        "Check for composition",
        "Check for conditionals",
        "Check for default values",
        "Check for example values",
        "Check for enums",
        "Check for constants",
        "Check for multiple types",
        "Check for references",
        "Check for required properties",
        "Check for negation",
        "Check for descriptions",
        "Check for titles",
        "recursively check for features in properties and patternProperties and additionalProperties",
        "recursively check for items in case of arrays"
    ],
    "docstrings": [],
    "functions": [
        "detectSchemaFeatures",
        "detectSubSchemaPropertiesFeatures",
        "detectSubSchemaFeatures",
        "detectSubObjectSchemaFeatures"
    ],
    "classes": []
}