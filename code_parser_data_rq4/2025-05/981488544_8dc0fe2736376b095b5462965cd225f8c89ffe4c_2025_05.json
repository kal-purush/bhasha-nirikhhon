{
    "identifiers": [
        "pandas",
        "pd",
        "os",
        "flask",
        "Flask",
        "render_template",
        "request",
        "jsonify",
        "url_for",
        "werkzeug",
        "utils",
        "secure_filename",
        "tensorflow",
        "keras",
        "preprocessing",
        "image",
        "numpy",
        "np",
        "tensorflow",
        "keras",
        "models",
        "load_model",
        "google",
        "generativeai",
        "genai",
        "datetime",
        "datetime",
        "Flask",
        "app",
        "config",
        "UPLOAD_FOLDER",
        "v",
        "k",
        "k",
        "v",
        "diagnosis_map",
        "items",
        "diagnosis_map",
        "values",
        "weights_path",
        "tensorflow",
        "keras",
        "applications",
        "DenseNet121",
        "tensorflow",
        "keras",
        "layers",
        "Dense",
        "GlobalAveragePooling2D",
        "Dropout",
        "tensorflow",
        "keras",
        "models",
        "Model",
        "DenseNet121",
        "weights",
        "include_top",
        "input_shape",
        "IMG_WIDTH",
        "IMG_HEIGHT",
        "base_model",
        "output",
        "GlobalAveragePooling2D",
        "x",
        "Dense",
        "activation",
        "x",
        "Dropout",
        "x",
        "len",
        "diagnosis_map",
        "Dense",
        "num_classes",
        "activation",
        "x",
        "Model",
        "inputs",
        "base_model",
        "input",
        "outputs",
        "predictions",
        "os",
        "path",
        "join",
        "app",
        "root_path",
        "weights_path",
        "os",
        "path",
        "exists",
        "absolute_weights_path",
        "model",
        "load_weights",
        "absolute_weights_path",
        "absolute_weights_path",
        "absolute_weights_path",
        "model",
        "compile",
        "optimizer",
        "loss",
        "metrics",
        "model",
        "e",
        "e",
        "load_trained_model",
        "MODEL_WEIGHTS_PATH",
        "GEMINI_API_KEY",
        "GEMINI_API_KEY",
        "genai",
        "configure",
        "api_key",
        "GEMINI_API_KEY",
        "genai",
        "GenerativeModel",
        "e",
        "e",
        "filename",
        "filename",
        "filename",
        "rsplit",
        "lower",
        "ALLOWED_EXTENSIONS",
        "image_path",
        "loaded_model",
        "image",
        "load_img",
        "image_path",
        "target_size",
        "IMG_WIDTH",
        "IMG_HEIGHT",
        "image",
        "img_to_array",
        "img",
        "np",
        "expand_dims",
        "img_array",
        "axis",
        "img_array",
        "loaded_model",
        "predict",
        "img_array",
        "np",
        "argmax",
        "predictions",
        "axis",
        "class_names",
        "predicted_class_index",
        "dr_to_text_map",
        "get",
        "predicted_class_name",
        "predicted_class_name",
        "os",
        "path",
        "splitext",
        "os",
        "path",
        "basename",
        "image_path",
        "comprehensive_prediction",
        "image_id",
        "predicted_class_name",
        "e",
        "e",
        "e",
        "image_id",
        "image_id",
        "os",
        "path",
        "join",
        "app",
        "root_path",
        "MODIFIED_FOLDER",
        "target_filename",
        "os",
        "path",
        "exists",
        "absolute_modified_image_path",
        "os",
        "path",
        "join",
        "target_filename",
        "replace",
        "os",
        "sep",
        "path_relative_to_static",
        "predicted_class_name",
        "gemini_model",
        "predicted_class_name",
        "prompt",
        "gemini_model",
        "generate_content",
        "prompt",
        "response",
        "text",
        "strip",
        "response_text",
        "response_text",
        "response_text",
        "response_text",
        "split",
        "parts",
        "replace",
        "strip",
        "parts",
        "strip",
        "explanation_part",
        "explanation_part",
        "explanation",
        "precautions_part",
        "precautions_part",
        "precautions",
        "parse_error",
        "parse_error",
        "response_text",
        "response_text",
        "response_text",
        "response_text",
        "explanation",
        "precautions",
        "e",
        "e",
        "e",
        "app",
        "route",
        "methods",
        "render_template",
        "now",
        "datetime",
        "now",
        "app",
        "route",
        "render_template",
        "now",
        "datetime",
        "now",
        "app",
        "route",
        "methods",
        "request",
        "files",
        "jsonify",
        "request",
        "files",
        "file",
        "filename",
        "jsonify",
        "file",
        "allowed_file",
        "file",
        "filename",
        "secure_filename",
        "file",
        "filename",
        "os",
        "path",
        "join",
        "UPLOAD_FOLDER",
        "filename",
        "os",
        "path",
        "join",
        "app",
        "root_path",
        "uploaded_image_path_relative_for_save",
        "os",
        "path",
        "join",
        "app",
        "root_path",
        "UPLOAD_FOLDER",
        "os",
        "path",
        "exists",
        "uploads_folder_absolute",
        "os",
        "makedirs",
        "uploads_folder_absolute",
        "file",
        "save",
        "uploaded_image_path_absolute",
        "e",
        "e",
        "jsonify",
        "e",
        "predict_image",
        "uploaded_image_path_absolute",
        "image_id",
        "os",
        "path",
        "exists",
        "uploaded_image_path_absolute",
        "os",
        "remove",
        "uploaded_image_path_absolute",
        "uploaded_image_path_absolute",
        "e",
        "uploaded_image_path_absolute",
        "e",
        "jsonify",
        "prediction_text",
        "find_matching_modified_image",
        "image_id",
        "generate_result_summary",
        "predicted_class_name",
        "prediction_text",
        "image_id",
        "predicted_class_name",
        "url_for",
        "filename",
        "filename",
        "summary_data",
        "get",
        "summary_data",
        "summary_data",
        "get",
        "summary_data",
        "matching_modified_image_path_relative",
        "url_for",
        "filename",
        "matching_modified_image_path_relative",
        "jsonify",
        "response_data",
        "jsonify",
        "app",
        "route",
        "methods",
        "chat_session",
        "gemini_model",
        "jsonify",
        "request",
        "json",
        "get",
        "user_message",
        "jsonify",
        "chat_session",
        "gemini_model",
        "start_chat",
        "history",
        "initial_context",
        "chat_session",
        "send_message",
        "user_message",
        "chat_session",
        "send_message",
        "user_message",
        "response",
        "text",
        "jsonify",
        "bot_response",
        "e",
        "e",
        "jsonify",
        "os",
        "path",
        "join",
        "app",
        "root_path",
        "os",
        "path",
        "join",
        "app",
        "root_path",
        "UPLOAD_FOLDER",
        "os",
        "path",
        "join",
        "app",
        "root_path",
        "MODIFIED_FOLDER",
        "os",
        "path",
        "exists",
        "static_folder_absolute",
        "os",
        "makedirs",
        "static_folder_absolute",
        "static_folder_absolute",
        "os",
        "path",
        "exists",
        "uploads_folder_absolute",
        "os",
        "makedirs",
        "uploads_folder_absolute",
        "uploads_folder_absolute",
        "os",
        "path",
        "exists",
        "modified_folder_absolute",
        "modified_folder_absolute",
        "app",
        "run",
        "debug"
    ],
    "literals": [
        "'static/uploads'",
        "'static/modified'",
        "'png'",
        "'jpg'",
        "'jpeg'",
        "'UPLOAD_FOLDER'",
        "'No_DR'",
        "'Mild'",
        "'Moderate'",
        "'Severe'",
        "'Proliferate_DR'",
        "'No_DR'",
        "'No Diabetics<br>Cardiac Risk Absent<br>Glaucoma Risk Absent<br>Healthy Retina Observed'",
        "'Mild'",
        "'Mild Diabetics<br>Low Cardiac Risk<br>Low Glaucoma Risk<br>Few Microaneurysms Seen.'",
        "'Moderate'",
        "'Moderate Diabetics<br>Cardiac Risk Seen.<br>Glaucoma Risk Seen.<br>More lesions present.'",
        "'Severe'",
        "'Severe Diabetics.<br>High Cardiac Risk.<br>Presence of Glaucoma.<br>Extensive Damage Noted.'",
        "'Proliferate_DR'",
        "'Proliferate Diabetics<br>High Cardiac Risk.<br>High Glaucoma Risk.<br>Neovascualrization Present.'",
        "'diabetic_retinopathy_classification_weights.weights.h5'",
        "'imagenet'",
        "'relu'",
        "'softmax'",
        "f\"Successfully loaded model weights from {absolute_weights_path}\"",
        "f\"Warning: Model weights file not found at '{absolute_weights_path}'.\"",
        "\"Prediction will not work correctly until weights are trained and saved.\"",
        "'adam'",
        "'categorical_crossentropy'",
        "'accuracy'",
        "f\"Error loading model or weights: {e}\"",
        "\"Please ensure TensorFlow and other libraries are installed correctly.\"",
        "\"AIzaSyCOR-Y14uiPPNWapMyelZ9oO4xmP55YWdU\"",
        "\"YOUR_GEMINI_API_KEY\"",
        "'gemini-2.0-flash'",
        "\"Gemini API configured.\"",
        "f\"Error configuring Gemini API. Chatbot and summary generation will be unavailable: {e}\"",
        "\"Warning: GEMINI_API_KEY not set or is placeholder. Chatbot and summary generation will be unavailable.\"",
        "'.'",
        "'.'",
        "\"Model weights not loaded. Cannot make prediction.\"",
        "f\"Prediction: {predicted_class_name}\"",
        "f\"Error during prediction: {e}\"",
        "f\"Error during prediction: {e}\"",
        "\".png\"",
        "'modified'",
        "'/'",
        "\"Gemini model not available for summary generation.\"",
        "f\"\"\"\n    As an AI medical assistant for a Diabetic Retinopathy analysis tool, please provide:\n    1. A brief explanation of the predicted diagnosis \"{predicted_class_name}\".\n    2. Relevant general information or precautions related to this diagnosis and its potential links to cardiac and glaucoma risks, based on common medical understanding (but not medical advice).\n\n    Format your response strictly as follows:\n    EXPLANATION: [Your concise explanation here]\n    PRECAUTIONS: [Your relevant information/precautions here]\n\n    Keep both the explanation and precautions concise (1-3 sentences each).\n    Reiterate that this tool is for informational purposes and not medical advice.\n    \"\"\"",
        "f\"Sending prompt to Gemini for summary: {prompt}\"",
        "f\"Received raw response from Gemini for summary:\\n{response_text}\"",
        "\"Could not generate explanation.\"",
        "\"Could not generate precautions.\"",
        "\"EXPLANATION:\"",
        "\"PRECAUTIONS:\"",
        "\"PRECAUTIONS:\"",
        "\"EXPLANATION:\"",
        "\"\"",
        "f\"Error parsing Gemini summary response: {parse_error}\"",
        "f\"Raw response that failed parsing:\\n{response_text}\"",
        "f\"Summary parsing error. Raw response snippet: {response_text[:100]}...\"",
        "\"Please consult a healthcare professional.\"",
        "f\"Warning: Gemini response for summary did not contain expected markers (EXPLANATION:, PRECAUTIONS:):\\n{response_text}\"",
        "f\"Summary format error. Raw response: {response_text[:100]}...\"",
        "\"Please consult a healthcare professional.\"",
        "\"explanation\"",
        "\"precautions\"",
        "f\"Error generating result summary with Gemini: {e}\"",
        "\"explanation\"",
        "f\"Summary generation failed: {e}\"",
        "\"precautions\"",
        "\"Please consult a healthcare professional.\"",
        "'/'",
        "'GET'",
        "'index.html'",
        "'/about'",
        "'about.html'",
        "'/predict'",
        "'POST'",
        "'image'",
        "\"error\"",
        "\"No image file uploaded\"",
        "'image'",
        "''",
        "\"error\"",
        "\"No selected file\"",
        "f\"Error saving uploaded file: {e}\"",
        "\"error\"",
        "f\"Error saving uploaded file: {e}\"",
        "f\"Cleaned up failed upload: {uploaded_image_path_absolute}\"",
        "f\"Error cleaning up file {uploaded_image_path_absolute}: {e}\"",
        "\"error\"",
        "\"prediction\"",
        "\"image_id\"",
        "\"predicted_class\"",
        "\"uploaded_image_url\"",
        "'static'",
        "f'uploads/{filename}'",
        "\"modified_image_url\"",
        "\"gemini_explanation\"",
        "\"explanation\"",
        "\"Could not generate explanation.\"",
        "\"Could not generate explanation.\"",
        "\"gemini_precautions\"",
        "\"precautions\"",
        "\"Could not generate precautions.\"",
        "\"Could not generate precautions.\"",
        "\"modified_image_url\"",
        "'static'",
        "\"modified_image_not_found\"",
        "\"error\"",
        "\"File type not allowed\"",
        "'/chatbot'",
        "'POST'",
        "\"response\"",
        "\"Chatbot is not available due to API configuration issues.\"",
        "'message'",
        "\"response\"",
        "\"No message received.\"",
        "\"role\"",
        "\"user\"",
        "\"parts\"",
        "\"role\"",
        "\"model\"",
        "\"parts\"",
        "\"Understood. I am ready to assist with questions related to Diabetic Retinopathy analysis and its associated cardiac and glaucoma risks, as identified by this tool. Please remember I am not a substitute for a doctor.\"",
        "\"response\"",
        "f\"Error interacting with Gemini API: {e}\"",
        "\"response\"",
        "f\"Sorry, I couldn't process that. An error occurred.\"",
        "'__main__'",
        "'static'",
        "f\"Created static folder at {static_folder_absolute}\"",
        "f\"Created uploads folder at {uploads_folder_absolute}\"",
        "f\"Warning: Modified images folder not found at {modified_folder_absolute}. Modified images will not be displayed.\""
    ],
    "variables": [
        "app",
        "UPLOAD_FOLDER",
        "MODIFIED_FOLDER",
        "ALLOWED_EXTENSIONS",
        "IMG_WIDTH",
        "IMG_HEIGHT",
        "diagnosis_map",
        "reverse_diagnosis_map",
        "class_names",
        "dr_to_text_map",
        "MODEL_WEIGHTS_PATH",
        "loaded_model",
        "base_model",
        "x",
        "x",
        "x",
        "x",
        "num_classes",
        "predictions",
        "model",
        "absolute_weights_path",
        "loaded_model",
        "GEMINI_API_KEY",
        "gemini_model",
        "chat_session",
        "gemini_model",
        "gemini_model",
        "img",
        "img_array",
        "img_array",
        "predictions",
        "predicted_class_index",
        "predicted_class_name",
        "comprehensive_prediction",
        "image_id",
        "target_filename",
        "absolute_modified_image_path",
        "path_relative_to_static",
        "prompt",
        "response",
        "response_text",
        "explanation",
        "precautions",
        "parts",
        "explanation_part",
        "precautions_part",
        "explanation",
        "precautions",
        "explanation",
        "precautions",
        "explanation",
        "precautions",
        "file",
        "filename",
        "uploaded_image_path_relative_for_save",
        "uploaded_image_path_absolute",
        "uploads_folder_absolute",
        "prediction_text",
        "image_id",
        "predicted_class_name",
        "matching_modified_image_path_relative",
        "summary_data",
        "response_data",
        "response_data",
        "response_data",
        "user_message",
        "initial_context",
        "chat_session",
        "response",
        "response",
        "bot_response",
        "static_folder_absolute",
        "uploads_folder_absolute",
        "modified_folder_absolute"
    ],
    "comments": [
        "Import jsonify and url_for",
        "type: ignore",
        "type: ignore",
        "Import genai",
        "Import datetime for current year in footer",
        "--- CONFIGURATION ---",
        "This folder should contain your pre-processed images",
        "Standard Flask way to store config",
        "Define image dimensions (should match what you used for training)",
        "Mapping from numerical diagnosis to category name",
        "List of class names for prediction output",
        "Mapping from DR class to comprehensive text output for display (kept for model prediction display)",
        "--- END CONFIGURATION ---",
        "--- Model Loading ---",
        "Load the trained model weights on startup",
        "Ensure this file is in the same directory as app.py",
        "Initialize model as None",
        "type: ignore",
        "type: ignore",
        "type: ignore",
        "Ensure the weights file path is absolute relative to the app file's location",
        "Do NOT load weights if the file doesn't exist, the model will use random init",
        "Return None if model loading fails",
        "Attempt to load the model when the app starts",
        "--- End Model Loading ---",
        "--- Gemini Chatbot Configuration ---",
        "Replace with your actual API key obtained from Google AI Studio or Google Cloud",
        "WARNING: Storing API keys directly in code is NOT recommended for production environments.",
        "Use environment variables (e.g., os.environ.get('GEMINI_API_KEY')) or a secrets management system.",
        "<-- Your specific key found to be working",
        "Initialize chat_session as None globally",
        "Configure Gemini API only if a valid key is provided",
        "Initialize the model here, but start the session on the first message or for summary",
        "Using the model name that you found works",
        "Ensure model is None if configuration fails",
        "--- End Gemini Chatbot Configuration ---",
        "--- Helper Functions ---",
        "Check if model was successfully loaded before attempting prediction",
        "Load and preprocess the image",
        "Add batch dimension",
        "Normalize pixel values to [0, 1]",
        "Make prediction",
        "Get comprehensive text (using the map for display, not for Gemini input)",
        "Extract image ID from filename (without extension)",
        "Return text, id, and class name",
        "Return error message, None for id and class name if prediction fails",
        "Construct the absolute path to check existence",
        "Return the path relative *to the static folder*, using forward slashes.",
        "MODIFIED_FOLDER is 'static/modified', we need 'modified/filename.png'",
        "Define the prompt for Gemini - requesting specific format",
        "Debugging: Log the prompt",
        "Use generate_content for a single turn interaction for the summary",
        "Debugging: Log the raw response",
        "Parse the response based on the strict format",
        "Split only on the first occurrence",
        "Replace only the first occurrence",
        "Fallback: Indicate parsing failure and provide raw response snippet",
        "Fallback: Use the raw response if markers are missing",
        "Truncate raw response",
        "More specific error message if API call fails",
        "--- End Helper Functions ---",
        "--- Flask Routes ---",
        "Pass the 'now' function to the template so it can display the current year",
        "Pass the 'now' function to the template for the footer",
        "Construct the full path relative to the static folder for saving",
        "Construct the absolute path for saving the file",
        "Ensure the uploads folder exists within the static directory",
        "Save the uploaded file to the static uploads folder",
        "Perform prediction using the saved file's absolute path",
        "Check if prediction was successful (image_id will be None on error)",
        "Clean up the potentially saved file if prediction failed",
        "Find the corresponding modified image path (relative to static for url_for)",
        "Generate summary and precautions using Gemini",
        "Prepare response data as a dictionary to send back as JSON",
        "This is the original comprehensive text",
        "Include the class name in the response",
        "Initialize to None",
        "Provide default error messages if summary_data is None or keys are missing",
        "If modified image was found, get its URL using url_for.",
        "Add a flag if the modified image was not found",
        "Return the response data as JSON",
        "Return JSON error for disallowed file type",
        "Declare chat_session as global to modify it",
        "Check if the chatbot was successfully configured",
        "Check gemini_model instead of chat_session",
        "Return JSON response indicating chatbot is unavailable",
        "Get the user message from the JSON request body sent by the frontend",
        "Return JSON response if no message content is received",
        "If chat_session is None, it's the first message, so start a new session with context",
        "Provide context about the project and the chatbot's role",
        "Enhanced context to enforce medical assistant role and domain restriction",
        "Send the user's actual first message after the context is set",
        "If a session already exists, just send the user's message",
        "Get the text response from the bot",
        "Return the bot's response as JSON",
        "Log the error on the server side",
        "Return a user-friendly error message as JSON",
        "Avoid exposing internal error details to the user",
        "--- End Flask Routes ---",
        "--- App Startup ---",
        "Ensure necessary static subdirectories exist when the app starts",
        "Create static folder if it doesn't exist",
        "Create static/uploads folder if it doesn't exist",
        "Note: We don't automatically create the static/modified folder or its subdirectories",
        "because this folder is intended to contain your pre-processed images.",
        "We just check for its existence and print a message if it's not found.",
        "Run the Flask development server",
        "debug=True enables auto-reloading and debugger (turn off for production)"
    ],
    "docstrings": [
        "\"\"\"Loads the pre-trained DenseNet121 model and its weights.\"\"\"",
        "\"\"\"Checks if the uploaded filename has an allowed extension.\"\"\"",
        "\"\"\"\n    Loads and preprocesses the image, makes a prediction using the loaded model,\n    and returns the comprehensive text prediction and the original image ID.\n    \"\"\"",
        "\"\"\"Searches for a matching image (with .png extension) in the static/modified folder.\"\"\"",
        "\"\"\"\n    Uses Gemini to generate a short explanation and relevant information based on the predicted DR class.\n    Returns a dictionary with 'explanation' and 'precautions' or None on error.\n    \"\"\"",
        "\"\"\"Renders the main index page.\"\"\"",
        "\"\"\"Renders the About page.\"\"\"",
        "\"\"\"Handles image upload, prediction, and returns results as JSON.\"\"\"",
        "\"\"\"Handles chat messages and interacts with the Gemini API.\"\"\"",
        "\"\"\"\n            You are an AI medical assistant specialized in Diabetic Retinopathy (DR) and its associated risks (cardiac, glaucoma) based on retinal image analysis.\n            Your purpose is to help users understand the analysis results (like DR severity: No_DR, Mild, Moderate, Severe, Proliferate_DR) and provide general, relevant information about these specific conditions.\n            You are NOT a substitute for a doctor. You cannot provide medical diagnosis, treatment plans, or advice for any health issue beyond explaining the analysis results in the context of DR and its mentioned associated risks.\n            If the user asks about any topic outside of Diabetic Retinopathy, cardiac risk, or glaucoma risk as they relate to retinal image analysis, politely inform them that you can only discuss topics relevant to the retinal analysis and associated risks and cannot provide general medical advice.\n            Keep your responses informative, relevant, and always remind the user to consult a qualified healthcare professional for any medical concerns.\n            \"\"\""
    ],
    "functions": [
        "load_trained_model",
        "allowed_file",
        "predict_image",
        "find_matching_modified_image",
        "generate_result_summary",
        "index",
        "about",
        "predict",
        "chatbot_response"
    ],
    "classes": []
}