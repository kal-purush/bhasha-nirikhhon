{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "crypto",
        "require",
        "err",
        "logger",
        "err",
        "value",
        "value",
        "pemRegex",
        "value",
        "logger",
        "value",
        "value",
        "value",
        "logger",
        "value",
        "path",
        "path",
        "value",
        "value",
        "path",
        "paths",
        "value",
        "fs",
        "certPath",
        "fs",
        "certPath",
        "logger",
        "certPath",
        "fs",
        "certPath",
        "error",
        "error",
        "profile",
        "envVar",
        "defaultKey",
        "process",
        "envVar",
        "claimKey",
        "profile",
        "claimKey",
        "profile",
        "defaultKey",
        "profile",
        "defaultKey",
        "profile",
        "getSamlClaim",
        "profile",
        "profile",
        "getSamlClaim",
        "profile",
        "profile",
        "getSamlClaim",
        "profile",
        "profile",
        "getSamlClaim",
        "profile",
        "profile",
        "getSamlClaim",
        "profile",
        "downloadImage",
        "url",
        "fetch",
        "url",
        "response",
        "response",
        "response",
        "response",
        "error",
        "logger",
        "url",
        "error",
        "profile",
        "process",
        "logger",
        "process",
        "profile",
        "process",
        "profile",
        "process",
        "getGivenName",
        "profile",
        "getFamilyName",
        "profile",
        "givenName",
        "familyName",
        "givenName",
        "familyName",
        "givenName",
        "givenName",
        "familyName",
        "familyName",
        "getUserName",
        "profile",
        "getEmail",
        "profile",
        "input",
        "defaultValue",
        "input",
        "input",
        "input",
        "input",
        "defaultValue",
        "process",
        "process",
        "process",
        "getCertificateContent",
        "process",
        "process",
        "process",
        "passport",
        "SamlStrategy",
        "samlConfig",
        "profile",
        "done",
        "logger",
        "profile",
        "logger",
        "profile",
        "findUser",
        "profile",
        "logger",
        "user",
        "profile",
        "user",
        "getEmail",
        "profile",
        "user",
        "findUser",
        "logger",
        "user",
        "profile",
        "getFullName",
        "profile",
        "convertToUsername",
        "getUserName",
        "profile",
        "getGivenName",
        "profile",
        "getEmail",
        "profile",
        "user",
        "user",
        "profile",
        "getEmail",
        "profile",
        "fullName",
        "user",
        "createUser",
        "user",
        "user",
        "user",
        "profile",
        "user",
        "username",
        "user",
        "fullName",
        "getPicture",
        "profile",
        "picture",
        "user",
        "downloadImage",
        "profile",
        "imageBuffer",
        "crypto",
        "fileName",
        "hashToken",
        "profile",
        "fileName",
        "profile",
        "getStrategyFunctions",
        "process",
        "saveBuffer",
        "user",
        "imageBuffer",
        "user",
        "imagePath",
        "user",
        "updateUser",
        "user",
        "user",
        "logger",
        "user",
        "user",
        "user",
        "user",
        "user",
        "user",
        "user",
        "done",
        "user",
        "err",
        "logger",
        "err",
        "done",
        "err",
        "err",
        "logger",
        "err"
    ],
    "literals": [
        "'fs'",
        "'path'",
        "'node-fetch'",
        "'passport'",
        "'@node-saml/passport-saml'",
        "'~/models/userMethods'",
        "'~/server/services/Files/strategies'",
        "'~/server/utils/crypto'",
        "'~/config'",
        "'~/config/paths'",
        "'node:crypto'",
        "'[samlStrategy] crypto support is disabled!'",
        "'string'",
        "'Invalid input: SAML_CERT must be a string.'",
        "'-----BEGIN (CERTIFICATE|PUBLIC KEY)-----\\n'",
        "'([A-Za-z0-9+/=]{64}\\n)+'",
        "'[A-Za-z0-9+/=]{1,64}\\n'",
        "'-----END (CERTIFICATE|PUBLIC KEY)-----'",
        "'[samlStrategy] Detected RFC7468-formatted certificate string.'",
        "'[samlStrategy] Detected base64-encoded certificate string (no header).'",
        "[samlStrategy] Loading certificate from file: ${certPath}",
        "'utf8'",
        "Error reading certificate file: ${error.message}",
        "'Invalid cert: SAML_CERT must be a valid file path or certificate string.'",
        "'SAML_EMAIL_CLAIM'",
        "'email'",
        "'SAML_USERNAME_CLAIM'",
        "'username'",
        "'SAML_GIVEN_NAME_CLAIM'",
        "'given_name'",
        "'SAML_FAMILY_NAME_CLAIM'",
        "'family_name'",
        "'SAML_PICTURE_CLAIM'",
        "'picture'",
        "${response.statusText} (HTTP ${response.status})",
        "[samlStrategy] Error downloading image at URL \"${url}\": ${error}",
        "[samlStrategy] Using SAML_NAME_CLAIM: ${process.env.SAML_NAME_CLAIM}, profile: ${profile[process.env.SAML_NAME_CLAIM]}",
        "${givenName} ${familyName}",
        "''",
        "'string'",
        "'_'",
        "'true'",
        "'true'",
        "'saml'",
        "[samlStrategy] SAML authentication received for NameID: ${profile.nameID}",
        "'[samlStrategy] SAML profile:'",
        "[samlStrategy] User ${user ? 'found' : 'not found'} with SAML ID: ${profile.nameID}",
        "'found'",
        "'not found'",
        "''",
        "[samlStrategy] User ${user ? 'found' : 'not found'} with email: ${profile.email}",
        "'found'",
        "'not found'",
        "'saml'",
        "''",
        "'saml'",
        "'manual=true'",
        "'.png'",
        "'.png'",
        "''",
        "[samlStrategy] Login success SAML ID: ${user.samlId} | email: ${user.email} | username: ${user.username}",
        "'[samlStrategy] Login failed'",
        "'[samlStrategy]'"
    ],
    "variables": [
        "fs",
        "path",
        "fetch",
        "passport",
        "SamlStrategy",
        "paths",
        "crypto",
        "pemRegex",
        "certPath",
        "claimKey",
        "downloadImage",
        "response",
        "givenName",
        "familyName",
        "samlConfig",
        "user",
        "email",
        "fullName",
        "username",
        "picture",
        "imageBuffer",
        "fileName",
        "imagePath"
    ],
    "comments": [
        "Check if it's an RFC7468 formatted PEM certificate",
        "header",
        "base64 content (64 characters per line)",
        "base64 content (last line)",
        "footer",
        "Check if it's a Base64-encoded certificate (no header)",
        "Check if file exists and is readable",
        "Avoids accessing `profile[\"\"]` when the environment variable is empty string."
    ],
    "docstrings": [
        "* Retrieves the certificate content from the given value.\n *\n * This function determines whether the provided value is a certificate string (RFC7468 format or\n * base64-encoded without a header) or a valid file path. If the value matches one of these formats,\n * the certificate content is returned. Otherwise, an error is thrown.\n *\n * @see https://github.com/node-saml/node-saml/tree/master?tab=readme-ov-file#configuration-option-idpcert\n * @param {string} value - The certificate string or file path.\n * @returns {string} The certificate content if valid.\n * @throws {Error} If the value is not a valid certificate string or file path.",
        "* Retrieves a SAML claim from a profile object based on environment configuration.\n * @param {object} profile - Saml profile\n * @param {string} envVar - Environment variable name (SAML_*)\n * @param {string} defaultKey -  Default key to use if the environment variable is not set\n * @returns {string}",
        "* Downloads an image from a URL using an access token.\n * @param {string} url\n * @returns {Promise<Buffer>}",
        "* Determines the full name of a user based on SAML profile and environment configuration.\n *\n * @param {Object} profile - The user profile object from SAML Connect\n * @returns {string} The determined full name of the user",
        "* Converts an input into a string suitable for a username.\n * If the input is a string, it will be returned as is.\n * If the input is an array, elements will be joined with underscores.\n * In case of undefined or other falsy values, a default value will be returned.\n *\n * @param {string | string[] | undefined} input - The input value to be converted into a username.\n * @param {string} [defaultValue=''] - The default value to return if the input is falsy.\n * @returns {string} The processed input as a string suitable for a username."
    ],
    "functions": [
        "getCertificateContent",
        "getSamlClaim",
        "getEmail",
        "getUserName",
        "getGivenName",
        "getFamilyName",
        "getPicture",
        "getFullName",
        "convertToUsername",
        "setupSaml"
    ],
    "classes": []
}