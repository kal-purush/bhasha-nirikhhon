{
    "identifiers": [
        "numpy",
        "np",
        "pandas",
        "pd",
        "sklearn",
        "model_selection",
        "train_test_split",
        "sklearn",
        "linear_model",
        "LogisticRegression",
        "sklearn",
        "metrics",
        "accuracy_score",
        "classification_report",
        "confusion_matrix",
        "sklearn",
        "preprocessing",
        "StandardScaler",
        "pd",
        "read_csv",
        "delimiter",
        "i",
        "i",
        "len",
        "heart_data",
        "columns",
        "heart_data",
        "head",
        "heart_data",
        "value_counts",
        "heart_data",
        "drop",
        "columns",
        "axis",
        "heart_data",
        "train_test_split",
        "X",
        "y",
        "test_size",
        "stratify",
        "y",
        "random_state",
        "StandardScaler",
        "scaler",
        "fit_transform",
        "X_train",
        "scaler",
        "transform",
        "X_test",
        "LogisticRegression",
        "max_iter",
        "model",
        "fit",
        "X_train",
        "y_train",
        "model",
        "predict",
        "X_train",
        "accuracy_score",
        "y_train",
        "y_train_pred",
        "model",
        "predict",
        "X_test",
        "accuracy_score",
        "y_test",
        "y_test_pred",
        "classification_report",
        "y_test",
        "y_test_pred",
        "confusion_matrix",
        "y_test",
        "y_test_pred",
        "input_data",
        "isinstance",
        "input_data",
        "np",
        "ndarray",
        "pd",
        "DataFrame",
        "input_data",
        "columns",
        "X",
        "columns",
        "scaler",
        "transform",
        "input_data",
        "model",
        "predict",
        "scaled_input",
        "model",
        "predict_proba",
        "scaled_input",
        "prediction",
        "format",
        "probability",
        "format",
        "probability",
        "X",
        "iloc",
        "predict_heart_disease",
        "sample_input",
        "scaler",
        "transform",
        "X",
        "model",
        "predict",
        "X_scaled",
        "model",
        "predict_proba",
        "X_scaled",
        "heart_data",
        "copy",
        "predictions",
        "probabilities",
        "probabilities",
        "results",
        "head"
    ],
    "literals": [
        "'data.csv'",
        "','",
        "f'feature_{i}'",
        "'target'",
        "\"\\nTarget distribution:\"",
        "'target'",
        "'target'",
        "'target'",
        "'R'",
        "'M'",
        "\"\\nTraining Accuracy:\"",
        "\"Test Accuracy:\"",
        "\"\\nClassification Report:\"",
        "\"\\nConfusion Matrix:\"",
        "'The person does not have heart disease (Probability: {:.2f}%)'",
        "'The person has heart disease (Probability: {:.2f}%)'",
        "\"\\nSample Prediction:\"",
        "'predicted'",
        "'prob_0'",
        "'prob_1'"
    ],
    "variables": [
        "heart_data",
        "heart_data",
        "columns",
        "X",
        "y",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "scaler",
        "X_train",
        "X_test",
        "model",
        "y_train_pred",
        "y_test_pred",
        "input_data",
        "scaled_input",
        "prediction",
        "probability",
        "sample_input",
        "X_scaled",
        "predictions",
        "probabilities",
        "results",
        "results",
        "results",
        "results"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "Data Collection and Processing",
        "Check the data",
        "Splitting the Features and Target",
        "Convert to binary (0=Healthy, 1=Defective)",
        "Splitting the Data into Training & Test Data",
        "Feature Scaling",
        "Model Training - Logistic Regression",
        "Model Evaluation",
        "Training data evaluation",
        "Test data evaluation",
        "Detailed classification report",
        "Confusion matrix",
        "Building a Predictive System",
        "Example prediction using first row from dataset",
        "Predict for the entire dataset",
        "Scale the whole dataset",
        "Get predictions",
        "Get probabilities",
        "Add predictions to original dataframe",
        "Probability of class 0",
        "Probability of class 1",
        "View first few results"
    ],
    "docstrings": [
        "\"\"\"Improved Heart Disease Prediction\"\"\""
    ],
    "functions": [
        "predict_heart_disease"
    ],
    "classes": []
}