{
    "identifiers": [
        "os",
        "time",
        "requests",
        "dataclasses",
        "dataclass",
        "typing",
        "Dict",
        "Optional",
        "pathlib",
        "Path",
        "src",
        "config",
        "settings",
        "src",
        "types",
        "docker",
        "ComposeFileType",
        "src",
        "utils",
        "docker",
        "utilities",
        "_adjust_composes_file_names",
        "src",
        "utils",
        "logging",
        "logger",
        "setup_logging",
        "Path",
        "parent",
        "parent",
        "parent",
        "dataclass",
        "Optional",
        "Optional",
        "Optional",
        "Optional",
        "Dict",
        "Optional",
        "Optional",
        "classmethod",
        "cls",
        "kwargs",
        "cls",
        "status",
        "kwargs",
        "classmethod",
        "cls",
        "exception",
        "log_file",
        "Optional",
        "cls",
        "status",
        "error",
        "exception",
        "error_type",
        "exception",
        "log_file",
        "log_file",
        "ComposeFileType",
        "ComposeFileType",
        "METRICS",
        "settings",
        "minio",
        "server_url",
        "compose_types",
        "append",
        "ComposeFileType",
        "AWS",
        "ct",
        "value",
        "ct",
        "compose_types",
        "_adjust_composes_file_names",
        "compose_file_names",
        "os",
        "environ",
        "get",
        "separator",
        "join",
        "f",
        "f",
        "compose_file_paths",
        "f",
        "Dict",
        "Path",
        "p",
        "p",
        "CONFIG_PATHS",
        "settings",
        "docker",
        "drfc_base_path",
        "config_paths",
        "append",
        "Path",
        "settings",
        "docker",
        "drfc_base_path",
        "config_path",
        "config_paths",
        "config_path",
        "exists",
        "open",
        "config_path",
        "f",
        "line",
        "f",
        "line",
        "strip",
        "line",
        "startswith",
        "line",
        "strip",
        "split",
        "value",
        "config",
        "FileNotFoundError",
        "join",
        "p",
        "p",
        "config_paths",
        "cmd",
        "quiet",
        "quiet",
        "logger",
        "info",
        "cmd",
        "os",
        "system",
        "cmd",
        "result",
        "MetricsResult",
        "quiet",
        "quiet",
        "result",
        "grafana_url",
        "result",
        "credentials",
        "logger",
        "info",
        "logger",
        "info",
        "result",
        "grafana_url",
        "logger",
        "info",
        "logger",
        "info",
        "result",
        "credentials",
        "logger",
        "info",
        "result",
        "credentials",
        "logger",
        "info",
        "logger",
        "info",
        "logger",
        "info",
        "quiet",
        "MetricsResult",
        "setup_logging",
        "quiet",
        "quiet",
        "get_metrics_compose_files",
        "compose_files",
        "ValueError",
        "_get_grafana_config",
        "compose_files",
        "METRICS_STACK_NAME",
        "_execute_docker_compose",
        "cmd",
        "quiet",
        "_wait_for_grafana",
        "GRAFANA_DEFAULT_URL",
        "GRAFANA_DEFAULT_TIMEOUT",
        "TimeoutError",
        "MetricsResult",
        "success",
        "grafana_url",
        "GRAFANA_DEFAULT_URL",
        "credentials",
        "grafana_config",
        "get",
        "GRAFANA_DEFAULT_USERNAME",
        "grafana_config",
        "get",
        "GRAFANA_DEFAULT_PASSWORD",
        "log_file",
        "log_path",
        "_log_grafana_info",
        "result",
        "quiet",
        "result",
        "e",
        "logger",
        "error",
        "e",
        "e",
        "MetricsResult",
        "from_exception",
        "e",
        "log_path",
        "MetricsResult",
        "get_metrics_compose_files",
        "compose_files",
        "ValueError",
        "compose_files",
        "METRICS_STACK_NAME",
        "_execute_docker_compose",
        "cmd",
        "MetricsResult",
        "success",
        "message",
        "logger",
        "info",
        "result",
        "message",
        "result",
        "e",
        "logger",
        "error",
        "e",
        "e",
        "MetricsResult",
        "from_exception",
        "e",
        "url",
        "GRAFANA_DEFAULT_URL",
        "timeout",
        "GRAFANA_DEFAULT_TIMEOUT",
        "time",
        "time",
        "url",
        "time",
        "time",
        "start_time",
        "timeout",
        "requests",
        "get",
        "health_url",
        "response",
        "status_code",
        "requests",
        "RequestException",
        "time",
        "sleep"
    ],
    "literals": [
        "\"http://localhost:3000\"",
        "\"admin\"",
        "\"admin\"",
        "\"deepracer-metrics\"",
        "\"config/drfc-images/metrics/configuration.env\"",
        "\"config\"",
        "\"drfc-images\"",
        "\"metrics\"",
        "\"configuration.env\"",
        "'MetricsResult'",
        "\"success\"",
        "'MetricsResult'",
        "\"error\"",
        "'DR_DOCKER_FILE_SEP'",
        "' -f '",
        "\"config\"",
        "\"drfc-images\"",
        "\"metrics\"",
        "\"configuration.env\"",
        "'#'",
        "'='",
        "\"Grafana configuration file not found. Tried paths:\\n\"",
        "\"\\n\"",
        "f\"  - {p}\"",
        "f\"Executing command: {cmd}\"",
        "\"Metrics stack started successfully\"",
        "f\"Grafana available at: {result.grafana_url}\"",
        "\"Credentials:\"",
        "f\"  Username: {result.credentials['username']}\"",
        "'username'",
        "f\"  Password: {result.credentials['password']}\"",
        "'password'",
        "\"\\nThe following dashboards are available:\"",
        "\"  - DeepRacer Training template (default)\"",
        "\"    Shows training rewards, progress, lap times, and entropy\"",
        "\"No compose files found for metrics stack\"",
        "f\"docker compose -f {compose_files} -p {METRICS_STACK_NAME} up -d\"",
        "\"Grafana failed to start within timeout period\"",
        "\"username\"",
        "\"GF_SECURITY_ADMIN_USER\"",
        "\"password\"",
        "\"GF_SECURITY_ADMIN_PASSWORD\"",
        "f\"Error starting metrics stack: {type(e).__name__}: {e}\"",
        "\"No compose files found for metrics stack\"",
        "f\"docker compose -f {compose_files} -p {METRICS_STACK_NAME} down\"",
        "\"Metrics stack stopped successfully\"",
        "f\"Error stopping metrics stack: {type(e).__name__}: {e}\"",
        "f\"{url}/api/health\""
    ],
    "variables": [
        "GRAFANA_DEFAULT_URL",
        "GRAFANA_DEFAULT_TIMEOUT",
        "GRAFANA_DEFAULT_USERNAME",
        "GRAFANA_DEFAULT_PASSWORD",
        "METRICS_STACK_NAME",
        "CONFIG_PATHS",
        "status",
        "error",
        "error_type",
        "grafana_url",
        "credentials",
        "log_file",
        "message",
        "compose_types",
        "compose_file_names",
        "compose_file_paths",
        "separator",
        "config_paths",
        "config",
        "key",
        "value",
        "config",
        "key",
        "log_path",
        "compose_files",
        "grafana_config",
        "cmd",
        "result",
        "compose_files",
        "cmd",
        "result",
        "start_time",
        "health_url",
        "response"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"Class to represent the result of metrics operations.\"\"\"",
        "\"\"\"Create a success result.\"\"\"",
        "\"\"\"Create an error result from an exception.\"\"\"",
        "\"\"\"\n    Determines the Docker Compose file paths to use for metrics stack.\n    \n    Returns:\n        str: Space-separated list of compose file paths\n    \"\"\"",
        "\"\"\"\n    Get Grafana configuration from environment file.\n    \n    Returns:\n        Dict[str, str]: Grafana configuration including credentials\n    \"\"\"",
        "\"\"\"\n    Execute a docker compose command.\n    \n    Args:\n        cmd (str): The docker compose command to execute\n        quiet (bool): If True, suppress verbose output\n    \"\"\"",
        "\"\"\"\n    Log Grafana information if not in quiet mode.\n    \n    Args:\n        result (MetricsResult): The metrics result containing Grafana info\n        quiet (bool): If True, suppress verbose output\n    \"\"\"",
        "\"\"\"\n    Start the metrics stack (Telegraf, InfluxDB, Grafana) and return the access URL.\n    \n    Args:\n        quiet (bool): If True, suppress verbose output. Defaults to True.\n        \n    Returns:\n        MetricsResult: Results of the metrics pipeline execution.\n    \"\"\"",
        "\"\"\"\n    Stop the metrics stack.\n    \n    Returns:\n        MetricsResult: Results of the stop operation.\n    \"\"\"",
        "\"\"\"\n    Wait for Grafana to be ready by checking its health endpoint.\n    \n    Args:\n        url (str): Base URL for Grafana\n        timeout (int): Maximum time to wait in seconds\n        \n    Returns:\n        bool: True if Grafana is ready, False if timeout\n    \"\"\""
    ],
    "functions": [
        "success",
        "from_exception",
        "get_metrics_compose_files",
        "_get_grafana_config",
        "_execute_docker_compose",
        "_log_grafana_info",
        "start_metrics_pipeline",
        "stop_metrics_pipeline",
        "_wait_for_grafana"
    ],
    "classes": [
        "MetricsResult"
    ]
}