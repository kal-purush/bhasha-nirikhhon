{
    "identifiers": [
        "json",
        "boto3",
        "os",
        "base64",
        "time",
        "datetime",
        "datetime",
        "timezone",
        "boto3",
        "dynamodb",
        "conditions",
        "Key",
        "cryptography",
        "hazmat",
        "primitives",
        "ciphers",
        "Cipher",
        "algorithms",
        "modes",
        "cryptography",
        "hazmat",
        "backends",
        "default_backend",
        "cryptography",
        "fernet",
        "Fernet",
        "boto3",
        "client",
        "boto3",
        "resource",
        "boto3",
        "client",
        "os",
        "environ",
        "get",
        "os",
        "environ",
        "get",
        "os",
        "environ",
        "get",
        "os",
        "environ",
        "get",
        "secrets_client",
        "get_secret_value",
        "SecretId",
        "SECRET_NAME",
        "json",
        "loads",
        "secret_response",
        "secret",
        "get_encryption_key",
        "Fernet",
        "ENCRYPTION_KEY",
        "dynamodb",
        "Table",
        "SHARING_TABLE",
        "dynamodb",
        "Table",
        "VERIFY_TABLE",
        "context",
        "get",
        "query_params",
        "get",
        "query_params",
        "get",
        "token",
        "otp_input",
        "token",
        "otp_input",
        "CORS_HEADERS",
        "json",
        "dumps",
        "fernet",
        "decrypt",
        "token",
        "encode",
        "json",
        "loads",
        "decrypted_payload",
        "decode",
        "payload",
        "get",
        "payload",
        "get",
        "payload",
        "get",
        "payload",
        "get",
        "payload",
        "get",
        "all",
        "email",
        "share_id",
        "key_b64",
        "iv_b64",
        "filename",
        "CORS_HEADERS",
        "json",
        "dumps",
        "email",
        "share_id",
        "verify_table",
        "get_item",
        "Key",
        "share_id",
        "verify_resp",
        "get",
        "verify_item",
        "verify_item",
        "CORS_HEADERS",
        "json",
        "dumps",
        "time",
        "time",
        "verify_item",
        "get",
        "current_time",
        "ttl",
        "CORS_HEADERS",
        "json",
        "dumps",
        "verify_item",
        "get",
        "otp_input",
        "stored_otp",
        "otp_input",
        "stored_otp",
        "CORS_HEADERS",
        "json",
        "dumps",
        "otp_input",
        "stored_otp",
        "base64",
        "b64decode",
        "key_b64",
        "base64",
        "b64decode",
        "iv_b64",
        "sharing_table",
        "get_item",
        "Key",
        "share_id",
        "email",
        "response",
        "get",
        "item",
        "CORS_HEADERS",
        "json",
        "dumps",
        "item",
        "get",
        "expiration_date",
        "datetime",
        "now",
        "timezone",
        "utc",
        "datetime",
        "fromisoformat",
        "expiration_date",
        "replace",
        "now",
        "expiration_dt",
        "CORS_HEADERS",
        "json",
        "dumps",
        "item",
        "get",
        "item",
        "get",
        "download_limit",
        "download_attempt",
        "download_limit",
        "CORS_HEADERS",
        "json",
        "dumps",
        "item",
        "get",
        "s3_path",
        "CORS_HEADERS",
        "json",
        "dumps",
        "s3_client",
        "get_object",
        "Bucket",
        "BUCKET_NAME",
        "Key",
        "s3_path",
        "s3_obj",
        "read",
        "encrypted_blob",
        "encrypted_blob",
        "Cipher",
        "algorithms",
        "AES",
        "dek",
        "modes",
        "GCM",
        "iv",
        "tag",
        "backend",
        "default_backend",
        "cipher",
        "decryptor",
        "decryptor",
        "update",
        "ciphertext",
        "decryptor",
        "finalize",
        "sharing_table",
        "update_item",
        "Key",
        "share_id",
        "email",
        "UpdateExpression",
        "ExpressionAttributeValues",
        "share_id",
        "base64",
        "b64encode",
        "plaintext",
        "decode",
        "CORS_HEADERS",
        "filename",
        "base64",
        "b64encode",
        "plaintext",
        "decode",
        "e",
        "e",
        "CORS_HEADERS",
        "json",
        "dumps",
        "e"
    ],
    "literals": [
        "'secretsmanager'",
        "'dynamodb'",
        "'s3'",
        "'SECRET_NAME'",
        "'doclockbox/encryption-key'",
        "'SHARING_TABLE'",
        "'sharing'",
        "'VERIFY_TABLE'",
        "'verify_token'",
        "'BUCKET_NAME'",
        "'doclockbox-secure-uploads'",
        "'Access-Control-Allow-Origin'",
        "'https://doclockbox.app'",
        "'Access-Control-Allow-Methods'",
        "'POST, OPTIONS'",
        "'Access-Control-Allow-Headers'",
        "'Content-Type'",
        "'SecretString'",
        "'ENCRYPTION_KEY'",
        "'queryStringParameters'",
        "'token'",
        "'otp'",
        "f\"Received token: {token} and otp: {otp_input}\"",
        "'statusCode'",
        "'headers'",
        "'Content-Type'",
        "'application/json'",
        "'body'",
        "'error'",
        "'Missing token or otp parameter'",
        "'utf-8'",
        "'utf-8'",
        "'email'",
        "'share_id'",
        "'key'",
        "'iv'",
        "'filename'",
        "'statusCode'",
        "'headers'",
        "'Content-Type'",
        "'application/json'",
        "'body'",
        "'error'",
        "'Missing required values in token'",
        "f\"Received email: {email} and share_id: {share_id}\"",
        "'share_id'",
        "'Item'",
        "f\"Received verify_item: {verify_item}\"",
        "'statusCode'",
        "'headers'",
        "'Content-Type'",
        "'application/json'",
        "'body'",
        "'error'",
        "'OTP verification record not found'",
        "'ttl'",
        "'statusCode'",
        "'headers'",
        "'Content-Type'",
        "'application/json'",
        "'body'",
        "'error'",
        "'OTP has expired'",
        "'otp'",
        "f\"OTP mismatch: {otp_input} != {stored_otp}\"",
        "'statusCode'",
        "'headers'",
        "'Content-Type'",
        "'application/json'",
        "'body'",
        "'error'",
        "'Invalid OTP'",
        "f\"OTP matched, in db: {otp_input} and got: {stored_otp}\"",
        "'share_id'",
        "'email'",
        "'Item'",
        "'statusCode'",
        "'headers'",
        "'Content-Type'",
        "'application/json'",
        "'body'",
        "'error'",
        "'No sharing record found for token'",
        "'expiration_date'",
        "'Z'",
        "'+00:00'",
        "'statusCode'",
        "'headers'",
        "'Content-Type'",
        "'application/json'",
        "'body'",
        "'error'",
        "'Download link has expired'",
        "'download_limit'",
        "'download_attempt'",
        "'statusCode'",
        "'headers'",
        "'Content-Type'",
        "'application/json'",
        "'body'",
        "'error'",
        "'Download limit reached'",
        "'s3_path'",
        "'statusCode'",
        "'headers'",
        "'Content-Type'",
        "'application/json'",
        "'body'",
        "'error'",
        "'s3_path not found in record'",
        "'Body'",
        "'share_id'",
        "'email'",
        "':inc'",
        "':zero'",
        "':status'",
        "'DOWNLOADED'",
        "f\"Download attempt updated for share_id: {share_id} and returnning the result: {base64.b64encode(plaintext).decode('utf-8')}\"",
        "'utf-8'",
        "'statusCode'",
        "'headers'",
        "'Content-Type'",
        "'application/octet-stream'",
        "'Content-Disposition'",
        "f'attachment; filename=\"{filename}\"'",
        "'isBase64Encoded'",
        "'body'",
        "'utf-8'",
        "f\"Error: {str(e)}\"",
        "'statusCode'",
        "'headers'",
        "'Content-Type'",
        "'application/json'",
        "'body'",
        "'error'",
        "'Internal server error'",
        "'details'"
    ],
    "variables": [
        "secrets_client",
        "dynamodb",
        "s3_client",
        "SECRET_NAME",
        "SHARING_TABLE",
        "VERIFY_TABLE",
        "BUCKET_NAME",
        "CORS_HEADERS",
        "secret_response",
        "secret",
        "ENCRYPTION_KEY",
        "fernet",
        "sharing_table",
        "verify_table",
        "query_params",
        "token",
        "otp_input",
        "decrypted_payload",
        "payload",
        "email",
        "share_id",
        "key_b64",
        "iv_b64",
        "filename",
        "verify_resp",
        "verify_item",
        "current_time",
        "ttl",
        "stored_otp",
        "dek",
        "iv",
        "response",
        "item",
        "expiration_date",
        "now",
        "expiration_dt",
        "download_limit",
        "download_attempt",
        "s3_path",
        "s3_obj",
        "encrypted_blob",
        "ciphertext",
        "tag",
        "cipher",
        "decryptor",
        "plaintext"
    ],
    "comments": [
        "AWS Clients",
        "Config",
        "Standard CORS headers",
        "Fetch encryption key once at cold start",
        "Get query parameters",
        "body = json.loads(event.get('body', '{}'))",
        "print(f\"Received body: {body}\")",
        "token = body.get('token')",
        "otp_input = body.get('otp')",
        "Decrypt token",
        "Step 1: Check OTP + expiration in verify_token table",
        "Step 2: Decode key and iv",
        "Step 3: Fetch sharing record",
        "Check expiration date (if present)",
        "Check download limit",
        "Step 4: Fetch encrypted file from S3",
        "Assume last 16 bytes are GCM tag",
        "Decrypt file content",
        "Update download attempt count"
    ],
    "docstrings": [
        "\"\"\"\n                SET \n                    download_attempt = if_not_exists(download_attempt, :zero) + :inc,\n                    download_status = :status\n            \"\"\""
    ],
    "functions": [
        "get_encryption_key",
        "lambda_handler"
    ],
    "classes": []
}