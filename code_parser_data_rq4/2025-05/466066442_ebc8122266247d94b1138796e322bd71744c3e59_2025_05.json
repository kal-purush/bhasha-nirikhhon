{
    "identifiers": [
        "Account",
        "Address",
        "Hex",
        "Transport",
        "TransactionRequest",
        "SignTypedDataParameters",
        "serializeTypedData",
        "consola",
        "options",
        "options",
        "options",
        "options",
        "options",
        "derivationPath",
        "accountIndex",
        "derivationPath",
        "options",
        "consola",
        "consola",
        "derivationPath",
        "TransportNodeHid",
        "Eth",
        "transport",
        "eth",
        "derivationPath",
        "consola",
        "address",
        "createLedgerAccount",
        "address",
        "error",
        "consola",
        "error",
        "error",
        "Eth",
        "transport",
        "message",
        "messageHex",
        "Buffer",
        "message",
        "message",
        "messageHex",
        "message",
        "eth",
        "derivationPath",
        "messageHex",
        "result",
        "result",
        "result",
        "transactionRequest",
        "Eth",
        "transport",
        "transactionRequest",
        "transactionRequest",
        "getChainId",
        "transactionRequest",
        "transactionRequest",
        "serializeTransaction",
        "txWithChainId",
        "serializedTx",
        "consola",
        "resolution",
        "ledgerService",
        "rawTxHex",
        "consola",
        "resolveError",
        "consola",
        "resolveError",
        "consola",
        "consola",
        "consola",
        "derivationPath",
        "eth",
        "derivationPath",
        "rawTxHex",
        "resolution",
        "parseTransaction",
        "serializedTx",
        "txWithChainId",
        "signature",
        "signature",
        "signature",
        "serializeSignedTransaction",
        "signedTx",
        "serializedSignedTx",
        "error",
        "consola",
        "error",
        "error",
        "Eth",
        "transport",
        "eth",
        "derivationPath",
        "result",
        "result",
        "result",
        "count",
        "startIndex",
        "ledgerLive",
        "consola",
        "count",
        "startIndex",
        "i",
        "count",
        "i",
        "startIndex",
        "i",
        "getLedgerAccount",
        "index",
        "accounts",
        "account",
        "consola",
        "i",
        "count",
        "account",
        "error",
        "consola",
        "index",
        "error",
        "accounts"
    ],
    "literals": [
        "'viem'",
        "'viem'",
        "'consola'",
        "string",
        "\"Cannot use both 'derivationPath' and 'ledgerLive' options together\"",
        "'@ledgerhq/hw-transport-node-hid'",
        "'@ledgerhq/hw-app-eth'",
        "string",
        "m/44'/60'/${accountIndex}'/0/0",
        "\"m/44'/60'/0'/0/0\"",
        "Connecting to Ledger device...",
        "Using derivation path: ${derivationPath}",
        "Connected to Ledger with address: ${address}",
        "Failed to connect to Ledger device:",
        "Ledger connection failed: ${error.message}",
        "string",
        "'local'",
        "'@ledgerhq/hw-app-eth'",
        "string",
        "'string'",
        "'hex'",
        "'raw'",
        "''",
        "'Unsupported message format for Ledger signing'",
        "0x${result.r}${result.s}${result.v.toString(16)}",
        "'@ledgerhq/hw-app-eth'",
        "'viem'",
        "'viem/actions'",
        "'@ledgerhq/hw-app-eth'",
        "'Resolving transaction with Ledger service...'",
        "'Transaction resolved successfully with Ledger service'",
        "'Failed to resolve transaction with Ledger service:'",
        "'Continuing with null resolution (blind signing)'",
        "'Requesting signature from Ledger device...'",
        "Using derivation path: ${derivationPath}",
        "'viem'",
        "0x${signature.r}",
        "0x${signature.s}",
        "0x${signature.v}",
        "'Error in Ledger signTransaction:'",
        "Ledger transaction signing failed: ${error.message}",
        "'@ledgerhq/hw-app-eth'",
        "0x${result.r}${result.s}${result.v.toString(16)}",
        "Getting ${count} Ledger accounts starting from index ${startIndex}...",
        "Got account ${i + 1}/${count}: ${account.address}",
        "Failed to get account at index ${index}:"
    ],
    "variables": [
        "TransportNodeHid",
        "Eth",
        "derivationPath",
        "accountIndex",
        "transport",
        "eth",
        "Eth",
        "eth",
        "messageHex",
        "result",
        "Eth",
        "eth",
        "chainId",
        "txWithChainId",
        "serializedTx",
        "rawTxHex",
        "resolution",
        "signature",
        "serializeSignedTransaction",
        "parsedTx",
        "signedTx",
        "serializedSignedTx",
        "Eth",
        "eth",
        "result",
        "accounts",
        "i",
        "index",
        "account"
    ],
    "comments": [
        "Validate that incompatible options aren't provided together",
        "Dynamically import Ledger packages to avoid issues if they're not installed",
        "Determine the derivation path",
        "Ledger Live uses a different derivation path format",
        "Use provided path or default",
        "Open connection to Ledger device",
        "Get address from device",
        "Create and return a viem-compatible account",
        "Convert string message to hex",
        "Use raw hex data directly",
        "Sign the message with Ledger device",
        "Format the signature for Ethereum",
        "Load all needed imports first",
        "Create Eth instance",
        "Get the chain ID from the request or client",
        "Create a transaction object with chainId explicitly included",
        "Serialize the transaction to hex format as required by Ledger",
        "Use the raw hex without '0x' prefix as required by Ledger",
        "Import Ledger transaction resolution service",
        "First, resolve the transaction to provide metadata to the Ledger",
        "This provides context for the transaction to be displayed on the Ledger device",
        "Enable external plugins for better transaction information",
        "Enable ERC20 token resolution",
        "Proceed with null resolution which will lead to \"blind signing\" on the device",
        "Sign the transaction with the Ledger device",
        "According to Ledger docs:",
        "- path: BIP32 path",
        "- rawTxHex: Raw transaction hex (without 0x prefix)",
        "- resolution: Optional transaction metadata",
        "We can use viem's serializeTransaction to create the final signed transaction",
        "Create a signed transaction object with the signature from Ledger",
        "Original transaction data",
        "Add signature components from Ledger",
        "Serialize the signed transaction",
        "Implement signTypedData method for EIP-712 support",
        "Encode the typed data according to EIP-712",
        "Sign the typed data with Ledger",
        "Note: Some Ledger firmware versions might not support all EIP-712 features",
        "Format the signature"
    ],
    "docstrings": [
        "* Ledger HID Device Utilities\n *\n * This module provides utilities for connecting to a Ledger hardware device\n * and creating a viem-compatible account for signing transactions.\n * Requires @ledgerhq/hw-app-eth and @ledgerhq/hw-transport-node-hid packages.",
        "* Creates a viem-compatible account using a Ledger hardware wallet\n *\n * @param options Configuration options for the Ledger connection\n * @param options.derivationPath HD wallet derivation path (default: \"m/44'/60'/0'/0/0\")\n * @param options.ledgerLive Use Ledger Live derivation path if true\n * @param options.accountIndex Account index to use (default: 0, only used with ledgerLive: true)\n * @returns A viem-compatible account for transaction signing",
        "* Creates a viem-compatible account from a Ledger transport\n *\n * @param params Configuration for the account\n * @param params.address The Ethereum address from the Ledger\n * @param params.transport The Ledger transport instance\n * @param params.derivationPath The derivation path used\n * @returns A viem-compatible account",
        "* Utility function to get multiple Ledger accounts\n *\n * @param count Number of accounts to get (default: 3)\n * @param startIndex Starting index (default: 0)\n * @param ledgerLive Use Ledger Live derivation path if true\n * @returns Array of viem accounts"
    ],
    "functions": [
        "getLedgerAccount",
        "createLedgerAccount",
        "signMessage",
        "signTransaction",
        "signTypedData",
        "getLedgerAccounts"
    ],
    "classes": []
}