{
    "identifiers": [
        "chapter_four",
        "java",
        "util",
        "ArrayDeque",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "m_data",
        "m_left",
        "m_right",
        "m_data",
        "m_left",
        "m_right",
        "data",
        "left",
        "right",
        "m_data",
        "data",
        "m_left",
        "left",
        "m_right",
        "right",
        "data",
        "data",
        "left",
        "m_left",
        "left",
        "right",
        "m_right",
        "right",
        "Override",
        "m_data",
        "m_left",
        "m_left",
        "m_data",
        "m_right",
        "m_right",
        "m_data",
        "start",
        "goal",
        "dfs",
        "start",
        "goal",
        "start",
        "goal",
        "fringe",
        "visited",
        "fringe",
        "add",
        "start",
        "fringe",
        "isEmpty",
        "node",
        "fringe",
        "poll",
        "visited",
        "add",
        "node",
        "node",
        "getData",
        "compareTo",
        "goal",
        "getData",
        "node",
        "getLeft",
        "visited",
        "contains",
        "node",
        "getLeft",
        "fringe",
        "add",
        "node",
        "getLeft",
        "node",
        "getRight",
        "visited",
        "contains",
        "node",
        "getRight",
        "fringe",
        "add",
        "node",
        "getRight"
    ],
    "literals": [
        "\"\"",
        "\": [\"",
        "\"\"",
        "\", \"",
        "\"\"",
        "\"]\""
    ],
    "variables": [
        "m_data",
        "m_left",
        "m_right"
    ],
    "comments": [],
    "docstrings": [
        "****************************** DEPTH FIRST SEARCH ***************************************",
        "* Depth first search - iterative implementation.\n     * This implementation only confirms the existence of the path, and doesn't\n     * calculate what the path is.\n     *\n     * @param start - where to start searching from\n     * @param goal - node to be found\n     * @param visited - a set of nodes already visited by the search\n     * @return True if path between start and goal exists, False otherwise",
        "*****************************************************************************************"
    ],
    "functions": [
        "T",
        "getData",
        "getLeft",
        "getRight",
        "GraphNode",
        "GraphNode",
        "setLeft",
        "setRight",
        "toString",
        "pathExists",
        "dfs"
    ],
    "classes": [
        "DFS",
        "GraphNode"
    ]
}