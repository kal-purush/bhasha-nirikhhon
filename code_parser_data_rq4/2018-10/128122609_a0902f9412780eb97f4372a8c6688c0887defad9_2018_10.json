{
    "identifiers": [
        "os",
        "json",
        "numpy",
        "np",
        "csv",
        "sys",
        "argv",
        "rwisimulation",
        "tfrecord",
        "SceneNotInEpisodeSequenceError",
        "rwiparsing",
        "P2mPaths",
        "rwiparsing",
        "P2mCir",
        "len",
        "argv",
        "argv",
        "exit",
        "i",
        "format",
        "i",
        "argv",
        "should_stop",
        "np",
        "zeros",
        "numScenesPerEpisode",
        "numTxRxPairsPerScene",
        "numRaysPerTxRxPair",
        "numParametersPerRay",
        "np",
        "float32",
        "allEpisodeData",
        "fill",
        "np",
        "nan",
        "s",
        "numScenesPerEpisode",
        "os",
        "path",
        "join",
        "results_dir",
        "base_run_dir_fn",
        "run_i",
        "os",
        "path",
        "join",
        "run_dir",
        "project_output_dirBaseName",
        "paths_file_name",
        "os",
        "path",
        "exists",
        "abs_paths_file_name",
        "abs_paths_file_name",
        "abs_paths_file_name",
        "replace",
        "os",
        "path",
        "exists",
        "abs_cir_file_name",
        "abs_cir_file_name",
        "exit",
        "os",
        "path",
        "join",
        "run_dir",
        "simulation_info_file_name",
        "open",
        "abs_simulation_info_file_name",
        "infile",
        "json",
        "load",
        "infile",
        "simulation_info",
        "ep_i",
        "os",
        "path",
        "join",
        "run_dir",
        "open",
        "sumoOutputInfoFileName",
        "f",
        "csv",
        "reader",
        "f",
        "row",
        "sumoReader",
        "row",
        "split",
        "headerItems",
        "TsString",
        "split",
        "headerItems",
        "timeString",
        "split",
        "IndexError",
        "row",
        "sumoReader",
        "row",
        "thisEpisodeNumber",
        "ep_i",
        "thisEpisodeNumber",
        "ep_i",
        "sumoOutputInfoFileName",
        "row",
        "exit",
        "simulation_info",
        "this_scene_i",
        "SceneNotInEpisodeSequenceError",
        "format",
        "this_scene_i",
        "simulation_info",
        "abs_paths_file_name",
        "P2mPaths",
        "abs_paths_file_name",
        "P2mCir",
        "abs_cir_file_name",
        "paths",
        "get_total_received_power",
        "rec_i",
        "paths",
        "get_total_received_power",
        "rec_i",
        "paths",
        "get_mean_time_of_arrival",
        "rec_i",
        "paths",
        "get_6_parameters_for_all_rays",
        "rec_i",
        "sixParameters",
        "shape",
        "paths",
        "is_los",
        "rec_i",
        "cir",
        "get_phase_ndarray",
        "rec_i",
        "numRays",
        "sixParameters",
        "numRays",
        "areLOSChannels",
        "numRays",
        "phases",
        "rec_i",
        "format",
        "ep_i",
        "this_scene_i",
        "sc_i",
        "end",
        "sc_i",
        "this_scene_i",
        "run_i",
        "run_i"
    ],
    "literals": [
        "'You need to specify the folder that has the output files written by the simulator!'",
        "'Usage: python'",
        "'input_folder'",
        "\"run{:05d}\"",
        "'study'",
        "'model.paths.t001_01.r002.p2m'",
        "'wri-simulation.info'",
        "'\\nWarning: could not find file '",
        "' Stopping...'",
        "\"paths\"",
        "\"cir\"",
        "'ERROR: could not find file '",
        "'Did you ask InSite to generate the impulse response (cir) file?'",
        "'scene_i'",
        "'sumoOutputInfoFileName.txt'",
        "'r'",
        "','",
        "'='",
        "'='",
        "'ERROR: thisEpisodeNumber != ep_i. They are:'",
        "'and'",
        "'file: '",
        "'read:'",
        "'scene_i'",
        "'Expecting {} found {}'",
        "'scene_i'",
        "'\\rProcessed episode: {} scene: {}, total {} '",
        "''",
        "'Processed '",
        "' scenes (RT simulations)'"
    ],
    "variables": [
        "numScenesPerEpisode",
        "numTxRxPairsPerScene",
        "numRaysPerTxRxPair",
        "numParametersPerRay",
        "last_simulation_info",
        "simulation_info",
        "results_dir",
        "project_output_dirBaseName",
        "paths_file_name",
        "simulation_info_file_name",
        "sc_i",
        "ep_i",
        "run_i",
        "should_stop",
        "allEpisodeData",
        "run_dir",
        "abs_paths_file_name",
        "should_stop",
        "abs_cir_file_name",
        "abs_simulation_info_file_name",
        "simulation_info",
        "this_scene_i",
        "sumoOutputInfoFileName",
        "sumoReader",
        "headerItems",
        "TsString",
        "Ts",
        "timeString",
        "time",
        "Ts",
        "time",
        "thisEpisodeNumber",
        "paths",
        "cir",
        "rec_i",
        "total_received_power",
        "mean_time_of_arrival",
        "sixParameters",
        "numRays",
        "areLOSChannels",
        "phases",
        "allEpisodeData",
        "this_scene_i",
        "rec_i",
        "allEpisodeData",
        "this_scene_i",
        "rec_i",
        "allEpisodeData",
        "this_scene_i",
        "rec_i"
    ],
    "comments": [
        "now we don't need to recall config.py. We can simply specify folders below",
        "import config as c",
        "from rwisimulation.tfrecord import UnexpectedCarsWithAntennaChangeError, EpisodeNotStartingFromZeroError",
        "from rwimodeling import objects",
        "50",
        "has the ray angle now",
        "from rwisimulation.datamodel import save5gmdata as fgdb",
        "the folders will be run00001, run00002, etc.",
        "session = fgdb.Session()",
        "Object which will be modified in the RWI project",
        "base_insite_project_path = 'D:/insitedata/insite_new_simuls/'",
        "Folder to store each InSite project and its results (will create subfolders for each \"run\", run0000, run0001, etc.)",
        "'D:/owncloud-lasse/5GM_DATA/flat_simulation/results_new_lidar/'",
        "The info below typically does not change",
        "dst_object_file_nameBaseName = \"random-line.object\"",
        "Ray-tracing output folder (where InSite will store the results (Study Area name)).",
        "They will be later copied to the corresponding output folder specified by results_dir",
        "Name (basename) of the paths file generated in the simulation",
        "Output files, which are written by the Python scripts",
        "Name (basename) of the JSON output simulation info file",
        "it's summed to 1 and we need to start by 0",
        "episode = None",
        "n_run = 100000",
        "for run_i in range(100): # use the number of examples in config.py",
        "object_file_name = os.path.join(run_dir, dst_object_file_nameBaseName)",
        "rays information but phase",
        "now we get the phase info from CIR file",
        "name for the impulse response (cir) file",
        "start of episode",
        "reset counter",
        "if episode is not None:",
        "session.add(episode)",
        "session.commit()",
        "read SUMO information for this scene from text CSV file",
        "AK-TODO ended up not using the CSV because the string is protected by \" \" I guess",
        "old format",
        "initialize values",
        "process only first 2 rows / line AK-TODO should eliminate the loop",
        "secondRow = row[1].split(',')",
        "process only first 2 rows / line AK-TODO should eliminate the loop",
        "episode = fgdb.Episode(",
        "insite_pah=run_dir,",
        "sumo_path=sumoOutputInfoFileName,",
        "simulation_time_begin=time, #in milliseconds",
        "sampling_time=Ts, #in seconds",
        ")",
        "if episode is None:",
        "raise EpisodeNotStartingFromZeroError(\"From file {}\".format(object_file_name))",
        "with open(object_file_name) as infile:",
        "obj_file = objects.ObjectFile.from_file(infile)",
        "AK TODO take out this comment and use logging",
        "scene = fgdb.Scene()",
        "scene.study_area = ((0, 0, 0), (0, 0, 0))",
        "receiver.position = object.position",
        "get phases for all rays in degrees",
        "go from 0:numRays to support a number of valid rays smaller than the maximum",
        "allEpisodeData[this_scene_i][rec_i] = sixParameters",
        "episode.scenes.append(scene)",
        "increment loop counter"
    ],
    "docstrings": [
        "'''\nThis code gets the p2m files generated by InSite via simulation.py and writes the ray information in files.\nDifferent from todb.py, it does not use a database (no episode.db).\nOne does not need to specify the number of scenes per episode because this information is obtained from\nthe JSON file and confirmed (redundancy) with the file 'sumoOutputInfoFileName.txt' at \"run_dir\".\n'''",
        "\"\"\"returns the `run_dir` for run `i`\"\"\""
    ],
    "functions": [
        "base_run_dir_fn"
    ],
    "classes": []
}