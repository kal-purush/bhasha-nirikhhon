{
    "identifiers": [
        "root",
        "inStr",
        "argIndex",
        "arguments",
        "argIndex",
        "argIndex",
        "replaceIndex",
        "formattedStr",
        "formattedStr",
        "replaceRegex",
        "arguments",
        "argIndex",
        "formattedStr",
        "inStr",
        "inStr",
        "inStr",
        "inStr",
        "core",
        "obj",
        "obj",
        "core",
        "obj",
        "obj",
        "obj",
        "core",
        "obj",
        "obj",
        "obj",
        "core",
        "obj",
        "obj",
        "obj",
        "obj",
        "isWindow",
        "obj",
        "obj",
        "hasOwnProperty",
        "obj",
        "hasOwnProperty",
        "obj",
        "key",
        "obj",
        "lastKey",
        "key",
        "lastKey",
        "hasOwnProperty",
        "obj",
        "lastKey",
        "core",
        "arguments",
        "arguments",
        "target",
        "deep",
        "target",
        "target",
        "arguments",
        "i",
        "target",
        "isFunction",
        "target",
        "target",
        "length",
        "i",
        "target",
        "i",
        "i",
        "length",
        "i",
        "options",
        "arguments",
        "i",
        "name",
        "options",
        "src",
        "target",
        "name",
        "copy",
        "options",
        "name",
        "target",
        "copy",
        "deep",
        "copy",
        "isPlainObject",
        "copy",
        "copyIsArray",
        "isArray",
        "copy",
        "copyIsArray",
        "copyIsArray",
        "clone",
        "src",
        "isArray",
        "src",
        "src",
        "clone",
        "src",
        "isPlainObject",
        "src",
        "src",
        "target",
        "name",
        "core",
        "deep",
        "clone",
        "copy",
        "copy",
        "target",
        "name",
        "copy",
        "target",
        "root",
        "root",
        "root",
        "root",
        "root",
        "root",
        "types",
        "types",
        "types",
        "types",
        "types",
        "types",
        "types",
        "types",
        "types",
        "types",
        "types",
        "types",
        "types",
        "types",
        "types",
        "types",
        "types",
        "types",
        "types",
        "types",
        "types",
        "root",
        "root",
        "root",
        "value",
        "subtype",
        "value",
        "subtype",
        "value",
        "subtype",
        "subtype",
        "subtype",
        "F_token",
        "value",
        "subtype",
        "token",
        "token",
        "token",
        "token",
        "token",
        "token",
        "name",
        "F_token",
        "name",
        "token",
        "TOK_SUBTYPE_STOP",
        "formula",
        "F_tokens",
        "F_tokenStack",
        "formula",
        "offset",
        "formula",
        "offset",
        "formula",
        "offset",
        "offset",
        "formula",
        "formula",
        "formula",
        "formula",
        "formula",
        "formula",
        "formula",
        "formula",
        "EOF",
        "inString",
        "currentChar",
        "nextChar",
        "token",
        "offset",
        "inString",
        "tokens",
        "token",
        "TOK_TYPE_OPERAND",
        "TOK_SUBTYPE_TEXT",
        "token",
        "token",
        "currentChar",
        "offset",
        "inPath",
        "currentChar",
        "nextChar",
        "token",
        "offset",
        "inPath",
        "token",
        "token",
        "currentChar",
        "offset",
        "inRange",
        "currentChar",
        "inRange",
        "token",
        "currentChar",
        "offset",
        "inError",
        "token",
        "currentChar",
        "offset",
        "token",
        "inError",
        "tokens",
        "token",
        "TOK_TYPE_OPERAND",
        "TOK_SUBTYPE_ERROR",
        "token",
        "currentChar",
        "token",
        "token",
        "regexSN",
        "token",
        "currentChar",
        "offset",
        "currentChar",
        "token",
        "tokens",
        "token",
        "TOK_TYPE_UNKNOWN",
        "token",
        "inString",
        "offset",
        "currentChar",
        "token",
        "tokens",
        "token",
        "TOK_TYPE_UNKNOWN",
        "token",
        "token",
        "inPath",
        "offset",
        "currentChar",
        "inRange",
        "token",
        "currentChar",
        "offset",
        "currentChar",
        "token",
        "tokens",
        "token",
        "TOK_TYPE_UNKNOWN",
        "token",
        "inError",
        "token",
        "currentChar",
        "offset",
        "currentChar",
        "token",
        "tokens",
        "token",
        "TOK_TYPE_UNKNOWN",
        "token",
        "tokenStack",
        "tokens",
        "TOK_TYPE_FUNCTION",
        "TOK_SUBTYPE_START",
        "tokenStack",
        "tokens",
        "TOK_TYPE_FUNCTION",
        "TOK_SUBTYPE_START",
        "offset",
        "currentChar",
        "root",
        "token",
        "tokens",
        "token",
        "TOK_TYPE_OPERAND",
        "token",
        "tokenStack",
        "TOK_TYPE_FUNCTION",
        "tokens",
        "currentChar",
        "TOK_TYPE_OP_IN",
        "TOK_SUBTYPE_UNION",
        "tokens",
        "currentChar",
        "TOK_TYPE_ARGUMENT",
        "offset",
        "token",
        "tokens",
        "token",
        "TOK_TYPE_OPERAND",
        "token",
        "tokens",
        "tokenStack",
        "tokens",
        "TOK_TYPE_ARGUMENT",
        "tokenStack",
        "tokens",
        "TOK_TYPE_FUNCTION",
        "TOK_SUBTYPE_START",
        "offset",
        "currentChar",
        "token",
        "tokens",
        "token",
        "TOK_TYPE_OPERAND",
        "token",
        "tokens",
        "tokenStack",
        "tokens",
        "tokenStack",
        "offset",
        "currentChar",
        "token",
        "tokens",
        "token",
        "TOK_TYPE_OPERAND",
        "token",
        "tokens",
        "TOK_TYPE_WSPACE",
        "offset",
        "currentChar",
        "EOF",
        "offset",
        "doubleChar",
        "token",
        "tokens",
        "token",
        "TOK_TYPE_OPERAND",
        "token",
        "tokens",
        "doubleChar",
        "TOK_TYPE_OP_IN",
        "TOK_SUBTYPE_LOGICAL",
        "offset",
        "currentChar",
        "token",
        "tokens",
        "token",
        "TOK_TYPE_OPERAND",
        "token",
        "tokens",
        "currentChar",
        "TOK_TYPE_OP_IN",
        "offset",
        "currentChar",
        "token",
        "tokens",
        "token",
        "TOK_TYPE_OPERAND",
        "token",
        "tokens",
        "currentChar",
        "TOK_TYPE_OP_POST",
        "offset",
        "currentChar",
        "token",
        "tokenStack",
        "tokens",
        "token",
        "TOK_TYPE_FUNCTION",
        "TOK_SUBTYPE_START",
        "token",
        "tokenStack",
        "tokens",
        "TOK_TYPE_SUBEXPR",
        "TOK_SUBTYPE_START",
        "offset",
        "currentChar",
        "root",
        "token",
        "tokens",
        "token",
        "TOK_TYPE_OPERAND",
        "token",
        "tokenStack",
        "TOK_TYPE_FUNCTION",
        "tokens",
        "currentChar",
        "TOK_TYPE_OP_IN",
        "TOK_SUBTYPE_UNION",
        "tokens",
        "currentChar",
        "TOK_TYPE_ARGUMENT",
        "offset",
        "currentChar",
        "token",
        "tokens",
        "token",
        "TOK_TYPE_OPERAND",
        "token",
        "tokens",
        "tokenStack",
        "offset",
        "token",
        "currentChar",
        "offset",
        "token",
        "inString",
        "inPath",
        "inRange",
        "inError",
        "inString",
        "inPath",
        "inRange",
        "inError",
        "inString",
        "token",
        "token",
        "inPath",
        "token",
        "token",
        "inRange",
        "token",
        "token",
        "inError",
        "token",
        "token",
        "tokens",
        "token",
        "TOK_TYPE_UNKNOWN",
        "tokens",
        "token",
        "TOK_TYPE_OPERAND",
        "F_tokens",
        "tokens",
        "token",
        "tokens",
        "token",
        "TOK_TYPE_WSPACE",
        "tokens",
        "tokens",
        "doAddToken",
        "doAddToken",
        "tokens",
        "TOK_TYPE_FUNCTION",
        "tokens",
        "TOK_SUBTYPE_STOP",
        "tokens",
        "TOK_TYPE_SUBEXPR",
        "tokens",
        "TOK_SUBTYPE_STOP",
        "tokens",
        "TOK_TYPE_OPERAND",
        "doAddToken",
        "doAddToken",
        "tokens",
        "TOK_TYPE_FUNCTION",
        "tokens",
        "TOK_SUBTYPE_START",
        "tokens",
        "TOK_TYPE_SUBEXPR",
        "tokens",
        "TOK_SUBTYPE_START",
        "tokens",
        "TOK_TYPE_OPERAND",
        "doAddToken",
        "tokens2",
        "token",
        "TOK_TYPE_OP_IN",
        "TOK_SUBTYPE_INTERSECT",
        "tokens2",
        "token",
        "tokens2",
        "token",
        "tokens2",
        "token",
        "TOK_TYPE_OP_IN",
        "token",
        "tokens2",
        "token",
        "TOK_TYPE_OP_PRE",
        "tokens2",
        "TOK_TYPE_FUNCTION",
        "tokens2",
        "TOK_SUBTYPE_STOP",
        "tokens2",
        "TOK_TYPE_SUBEXPR",
        "tokens2",
        "TOK_SUBTYPE_STOP",
        "tokens2",
        "TOK_TYPE_OP_POST",
        "tokens2",
        "TOK_TYPE_OPERAND",
        "token",
        "TOK_SUBTYPE_MATH",
        "token",
        "TOK_TYPE_OP_PRE",
        "token",
        "TOK_TYPE_OP_IN",
        "token",
        "tokens2",
        "token",
        "TOK_TYPE_NOOP",
        "tokens2",
        "TOK_TYPE_FUNCTION",
        "tokens2",
        "TOK_SUBTYPE_STOP",
        "tokens2",
        "TOK_TYPE_SUBEXPR",
        "tokens2",
        "TOK_SUBTYPE_STOP",
        "tokens2",
        "TOK_TYPE_OP_POST",
        "tokens2",
        "TOK_TYPE_OPERAND",
        "token",
        "TOK_SUBTYPE_MATH",
        "token",
        "TOK_TYPE_NOOP",
        "token",
        "TOK_TYPE_OP_IN",
        "token",
        "token",
        "token",
        "TOK_SUBTYPE_LOGICAL",
        "token",
        "token",
        "TOK_SUBTYPE_CONCAT",
        "token",
        "TOK_SUBTYPE_MATH",
        "token",
        "TOK_TYPE_OPERAND",
        "token",
        "isNaN",
        "parseFloat",
        "token",
        "token",
        "token",
        "token",
        "TOK_SUBTYPE_LOGICAL",
        "token",
        "TOK_SUBTYPE_RANGE",
        "token",
        "TOK_SUBTYPE_NUMBER",
        "token",
        "TOK_TYPE_FUNCTION",
        "token",
        "token",
        "token",
        "tokens2",
        "tokens",
        "F_tokens",
        "tokens2",
        "tokens2",
        "TOK_TYPE_NOOP",
        "tokens",
        "tokens2",
        "tokens",
        "tokens",
        "excelFormulaUtilities",
        "inputID",
        "outputID",
        "i",
        "indentCount",
        "i",
        "s",
        "s",
        "inputID",
        "formulaControl",
        "getTokens",
        "formula",
        "tokensHtml",
        "tokensHtml",
        "tokensHtml",
        "tokensHtml",
        "tokensHtml",
        "tokensHtml",
        "tokensHtml",
        "tokens",
        "tokens",
        "token",
        "TOK_SUBTYPE_STOP",
        "indentCount",
        "indentCount",
        "tokensHtml",
        "tokensHtml",
        "tokens",
        "tokensHtml",
        "token",
        "tokensHtml",
        "token",
        "token",
        "tokensHtml",
        "token",
        "token",
        "tokensHtml",
        "indent",
        "token",
        "token",
        "tokensHtml",
        "token",
        "TOK_SUBTYPE_START",
        "indentCount",
        "tokensHtml",
        "outputID",
        "tokensHtml",
        "formulaControl",
        "formulaControl",
        "rangeStr",
        "delimStr",
        "rangeStr",
        "rangeStr",
        "rangeStr",
        "parseInt",
        "fromBase26",
        "startCol",
        "endRow",
        "parseInt",
        "endCol",
        "endColDec",
        "fromBase26",
        "endCol",
        "totalRows",
        "endRow",
        "startRow",
        "totalCols",
        "fromBase26",
        "endCol",
        "fromBase26",
        "startCol",
        "curCol",
        "curRow",
        "curCell",
        "retStr",
        "curRow",
        "totalRows",
        "curRow",
        "curCol",
        "totalCols",
        "curCol",
        "curCell",
        "toBase26",
        "startColDec",
        "curCol",
        "startRow",
        "curRow",
        "retStr",
        "curCell",
        "curRow",
        "totalRows",
        "curCol",
        "totalCols",
        "delimStr",
        "curCol",
        "retStr",
        "excelFormulaUtilities",
        "value",
        "value",
        "value",
        "remainder",
        "value",
        "iteration",
        "value",
        "remainder",
        "converted",
        "remainder",
        "converted",
        "value",
        "value",
        "remainder",
        "iteration",
        "value",
        "converted",
        "excelFormulaUtilities",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "i",
        "number",
        "i",
        "s",
        "number",
        "number",
        "i",
        "dec",
        "i",
        "s",
        "dec",
        "token",
        "options",
        "indent",
        "lineBreak",
        "arguments",
        "arguments",
        "arguments",
        "inStr",
        "inStr",
        "token",
        "token",
        "tokenString",
        "token",
        "token",
        "token",
        "tokenString",
        "token",
        "tokenString",
        "token",
        "token",
        "tokenString",
        "token",
        "indent",
        "lineBreak",
        "tokenString",
        "returnVal",
        "returnVal",
        "tokenString",
        "token",
        "token",
        "tokenString",
        "formatStr",
        "replaceTokenTmpl",
        "options",
        "tokenString",
        "indt",
        "lineBreak",
        "tokenString",
        "formatStr",
        "replaceTokenTmpl",
        "options",
        "tokenString",
        "indt",
        "lineBreak",
        "token",
        "tokenString",
        "formatStr",
        "replaceTokenTmpl",
        "options",
        "tokenString",
        "indt",
        "lineBreak",
        "tokenString",
        "formatStr",
        "replaceTokenTmpl",
        "options",
        "tokenString",
        "indt",
        "lineBreak",
        "token",
        "tokenString",
        "formatStr",
        "replaceTokenTmpl",
        "options",
        "tokenString",
        "indt",
        "lineBreak",
        "tokenString",
        "formatStr",
        "replaceTokenTmpl",
        "options",
        "tokenString",
        "indt",
        "lineBreak",
        "tokenString",
        "formatStr",
        "replaceTokenTmpl",
        "options",
        "tokenString",
        "indt",
        "lineBreak",
        "tokenString",
        "formatStr",
        "replaceTokenTmpl",
        "options",
        "tokenString",
        "indt",
        "lineBreak",
        "tokenString",
        "formatStr",
        "replaceTokenTmpl",
        "options",
        "tokenString",
        "indt",
        "lineBreak",
        "tokenString",
        "formatStr",
        "replaceTokenTmpl",
        "options",
        "tokenString",
        "indt",
        "lineBreak",
        "tokenString",
        "formatStr",
        "replaceTokenTmpl",
        "options",
        "tokenString",
        "indt",
        "lineBreak",
        "tokenString",
        "formatStr",
        "replaceTokenTmpl",
        "options",
        "tokenString",
        "indt",
        "lineBreak",
        "lastToken",
        "tokenString",
        "formatStr",
        "replaceTokenTmpl",
        "options",
        "tokenString",
        "indt",
        "lineBreak",
        "tokenString",
        "formatStr",
        "replaceTokenTmpl",
        "options",
        "tokenString",
        "indt",
        "lineBreak",
        "token",
        "tokenString",
        "formatStr",
        "replaceTokenTmpl",
        "options",
        "tokenString",
        "indt",
        "lineBreak",
        "tokenString",
        "formatStr",
        "replaceTokenTmpl",
        "options",
        "tokenString",
        "indt",
        "lineBreak",
        "tokenString",
        "excelFormulaUtilities",
        "formula",
        "options",
        "formula",
        "formula",
        "options",
        "options",
        "core",
        "defaultOptions",
        "options",
        "options",
        "defaultOptions",
        "i",
        "indentCount",
        "i",
        "s",
        "options",
        "s",
        "getTokens",
        "formula",
        "options",
        "nextToken",
        "i",
        "autoBreakArray",
        "i",
        "nextToken",
        "nextToken",
        "types",
        "autoBreakArray",
        "i",
        "nextToken",
        "types",
        "autoBreakArray",
        "i",
        "nextToken",
        "tokens",
        "tokens",
        "tokens",
        "token",
        "TOK_SUBTYPE_STOP",
        "indentCount",
        "indentCount",
        "options",
        "options",
        "testAutoBreak",
        "nextToken",
        "autoIndent",
        "indent",
        "options",
        "autoBreak",
        "options",
        "outputFormula",
        "applyTokenTemplate",
        "token",
        "options",
        "indt",
        "lineBreak",
        "options",
        "lastToken",
        "token",
        "TOK_SUBTYPE_START",
        "indentCount",
        "isNewLine",
        "autoBreak",
        "matchEndNewLine",
        "outputFormula",
        "isFirstToken",
        "lastToken",
        "token",
        "outputFormula",
        "options",
        "trim",
        "outputFormula",
        "options",
        "outputFormula",
        "excelFormulaUtilities",
        "formula",
        "options",
        "tokenStr",
        "token",
        "indent",
        "linbreak",
        "token",
        "TOK_TYPE_OPERAND",
        "token",
        "TOK_SUBTYPE_TEXT",
        "outstr",
        "tokenStr",
        "outstr",
        "tokRender",
        "options",
        "options",
        "core",
        "defaultOptions",
        "options",
        "options",
        "defaultOptions",
        "formatFormula",
        "formula",
        "options",
        "excelFormulaUtilities",
        "formula",
        "options",
        "tokenStr",
        "token",
        "indent",
        "linbreak",
        "functionStack",
        "functionStack",
        "token",
        "TOK_TYPE_FUNCTION",
        "token",
        "TOK_SUBTYPE_START",
        "functionStack",
        "tokenString",
        "outstr",
        "directConversionMap",
        "tokenString",
        "directConversionMap",
        "tokenString",
        "tokenString",
        "useTemplate",
        "TOK_SUBTYPE_STOP",
        "useTemplate",
        "currentFunctionOnStack",
        "outstr",
        "currentFunctionOnStack",
        "useTemplate",
        "outstr",
        "directConversionMap",
        "tokenString",
        "directConversionMap",
        "tokenString",
        "tokenString",
        "functionStack",
        "TOK_TYPE_ARGUMENT",
        "currentFunctionOnStack",
        "currentFunctionOnStack",
        "outstr",
        "outstr",
        "outstr",
        "outstr",
        "outstr",
        "outstr",
        "directConversionMap",
        "tokenString",
        "directConversionMap",
        "tokenString",
        "tokenString",
        "useTemplate",
        "currentFunctionOnStack",
        "TOK_TYPE_OPERAND",
        "token",
        "TOK_SUBTYPE_RANGE",
        "currentFunctionOnStack",
        "currentFunctionOnStack",
        "tokenString",
        "outstr",
        "breakOutRanges",
        "tokenString",
        "outStr",
        "tokenString",
        "tokenString",
        "outstr",
        "breakOutRanges",
        "tokenString",
        "outStr",
        "tokenString",
        "tokenString",
        "outstr",
        "breakOutRanges",
        "tokenString",
        "outStr",
        "tokenString",
        "tokenString",
        "outstr",
        "breakOutRanges",
        "tokenString",
        "outstr",
        "tokenString",
        "outstr",
        "outstr",
        "directConversionMap",
        "tokenString",
        "directConversionMap",
        "tokenString",
        "tokenString",
        "useTemplate",
        "outstr",
        "useTemplate",
        "tokRender",
        "options",
        "options",
        "core",
        "defaultOptions",
        "options",
        "options",
        "defaultOptions",
        "formatFormula",
        "formula",
        "options",
        "cSharpOutput",
        "excelFormulaUtilities",
        "formula",
        "options",
        "formula2CSharp",
        "formula",
        "options",
        "excelFormulaUtilities",
        "formula",
        "options",
        "tokenStr",
        "token",
        "indent",
        "linbreak",
        "functionStack",
        "functionStack",
        "token",
        "TOK_TYPE_FUNCTION",
        "token",
        "TOK_SUBTYPE_START",
        "functionStack",
        "tokenString",
        "outstr",
        "directConversionMap",
        "tokenString",
        "directConversionMap",
        "tokenString",
        "tokenString",
        "useTemplate",
        "TOK_SUBTYPE_STOP",
        "useTemplate",
        "currentFunctionOnStack",
        "outstr",
        "currentFunctionOnStack",
        "outstr",
        "outstr",
        "useTemplate",
        "outstr",
        "directConversionMap",
        "tokenString",
        "directConversionMap",
        "tokenString",
        "tokenString",
        "functionStack",
        "TOK_TYPE_ARGUMENT",
        "currentFunctionOnStack",
        "currentFunctionOnStack",
        "outstr",
        "outstr",
        "outstr",
        "outstr",
        "outstr",
        "outstr",
        "directConversionMap",
        "tokenString",
        "directConversionMap",
        "tokenString",
        "tokenString",
        "useTemplate",
        "currentFunctionOnStack",
        "TOK_TYPE_OPERAND",
        "token",
        "TOK_SUBTYPE_RANGE",
        "currentFunctionOnStack",
        "tokenString",
        "outstr",
        "directConversionMap",
        "tokenString",
        "directConversionMap",
        "tokenString",
        "tokenString",
        "currentFunctionOnStack",
        "tokenString",
        "outstr",
        "breakOutRanges",
        "tokenString",
        "outStr",
        "tokenString",
        "tokenString",
        "outstr",
        "breakOutRanges",
        "tokenString",
        "outStr",
        "tokenString",
        "tokenString",
        "outstr",
        "breakOutRanges",
        "tokenString",
        "outStr",
        "tokenString",
        "tokenString",
        "outstr",
        "breakOutRanges",
        "tokenString",
        "outstr",
        "tokenString",
        "outstr",
        "outstr",
        "directConversionMap",
        "tokenString",
        "directConversionMap",
        "tokenString",
        "tokenString",
        "useTemplate",
        "outstr",
        "useTemplate",
        "tokRender",
        "options",
        "options",
        "core",
        "defaultOptions",
        "options",
        "options",
        "defaultOptions",
        "formatFormula",
        "formula",
        "options",
        "pythonOutput",
        "excelFormulaUtilities",
        "getTokens"
    ],
    "literals": [
        "\"undefined\"",
        "\"\\\\{{1}\"",
        "\"{1}\\\\}{1}\"",
        "\"g\"",
        "\"\"",
        "\"\"",
        "\"function\"",
        "\"object\"",
        "\"object\"",
        "\"setInterval\"",
        "\"object\"",
        "\"constructor\"",
        "\"isPrototypeOf\"",
        "\"boolean\"",
        "\"object\"",
        "\"noop\"",
        "\"operand\"",
        "\"function\"",
        "\"subexpression\"",
        "\"argument\"",
        "\"operator-prefix\"",
        "\"operator-infix\"",
        "\"operator-postfix\"",
        "\"white-space\"",
        "\"unknown\"",
        "\"start\"",
        "\"stop\"",
        "\"text\"",
        "\"number\"",
        "\"logical\"",
        "\"error\"",
        "\"range\"",
        "\"math\"",
        "\"concatenate\"",
        "\"intersect\"",
        "\"union\"",
        "\"boolean\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\" \"",
        "\"=\"",
        "'\"'",
        "'\"'",
        "'\"'",
        "\"\"",
        "\"'\"",
        "\"'\"",
        "\"'\"",
        "\"'\"",
        "\"]\"",
        "\",#NULL!,#DIV/0!,#VALUE!,#REF!,#NAME?,#NUM!,#N/A,\"",
        "\",\"",
        "\",\"",
        "\"\"",
        "\"+-\"",
        "'\"'",
        "\"\"",
        "\"'\"",
        "\"\"",
        "\"'\"",
        "\"[\"",
        "\"#\"",
        "\"\"",
        "\"{\"",
        "\"\"",
        "\"ARRAY\"",
        "\"ARRAYROW\"",
        "\";\"",
        "\"\"",
        "\"\"",
        "\",\"",
        "\"ARRAYROW\"",
        "\"}\"",
        "\"\"",
        "\"ARRAYROWSTOP\"",
        "\"ARRAYSTOP\"",
        "\" \"",
        "\"\"",
        "\"\"",
        "\" \"",
        "\",>=,<=,<>,\"",
        "\",\"",
        "\",\"",
        "\"\"",
        "\"+-*/^&=><\"",
        "\"\"",
        "\"%\"",
        "\"\"",
        "\"(\"",
        "\"\"",
        "\"\"",
        "\",\"",
        "\"\"",
        "\")\"",
        "\"\"",
        "'\"'",
        "\"'\"",
        "\"[\"",
        "\"#\"",
        "\"-\"",
        "\"+\"",
        "\"<>=\"",
        "\"&\"",
        "\"TRUE\"",
        "\"FALSE\"",
        "\"@\"",
        "\"|\"",
        "\"&nbsp;&nbsp;&nbsp;|\"",
        "\"\"",
        "\"<table cellspacing='0' style='border-top: 1px #cecece solid; margin-top: 5px; margin-bottom: 5px'>\"",
        "\"<tr>\"",
        "\"<td class='token' style='font-weight: bold; width: 50px'>index</td>\"",
        "\"<td class='token' style='font-weight: bold; width: 125px'>type</td>\"",
        "\"<td class='token' style='font-weight: bold; width: 125px'>subtype</td>\"",
        "\"<td class='token' style='font-weight: bold; width: 150px'>token</td>\"",
        "\"<td class='token' style='font-weight: bold; width: 300px'>token tree</td></tr>\"",
        "\"<tr>\"",
        "\"<td class='token'>\"",
        "\"</td>\"",
        "\"<td class='token'>\"",
        "\"</td>\"",
        "\"<td class='token'>\"",
        "\"&nbsp;\"",
        "\"</td>\"",
        "\"<td class='token'>\"",
        "\"&nbsp;\"",
        "\" \"",
        "\"&nbsp;\"",
        "\"</td>\"",
        "\"<td class='token'>\"",
        "\"&nbsp;\"",
        "\" \"",
        "\"&nbsp;\"",
        "\"</td>\"",
        "\"</tr>\"",
        "\"</table>\"",
        "\"[a-z]+[0-9]+:[a-z]+[0-9]+\"",
        "\"gi\"",
        "\"This is not a valid range: \"",
        "\":\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"A\"",
        "\"undefined\"",
        "\"A\"",
        "\"{0}\"",
        "\"{1}\"",
        "\"{2}\"",
        "\"\"",
        "\"text\"",
        "\"text\"",
        "\"operand\"",
        "\"range\"",
        "\" \"",
        "\" \"",
        "\"\"",
        "\"function\"",
        "\"function\"",
        "\"ARRAY\"",
        "\"ARRAYROW\"",
        "\"start\"",
        "\"operand\"",
        "\"error\"",
        "\"range\"",
        "\"logical\"",
        "\"number\"",
        "\"text\"",
        "\"argument\"",
        "\"operator-infix\"",
        "\"logical\"",
        "\"argument\"",
        "\"argument\"",
        "\"{{autoindent}}\"",
        "\"subexpression\"",
        "\"start\"",
        "\"=\"",
        "\"{{autoindent}}{{token}}(\\n\"",
        "\"\\n{{autoindent}}{{token}})\"",
        "\" {{token}}\"",
        "\"{{autoindent}}{{token}}\"",
        "\"{{token}}{{autolinebreak}}\"",
        "\"{{autoindent}}{{token}}\"",
        "\"{{autoindent}}{{token}}\"",
        "'{{autoindent}}\"{{token}}\"'",
        "\"{{token}}\\n\"",
        "\" {{token}}{{autolinebreak}}\"",
        "\"\"",
        "\"{\"",
        "\"}\"",
        "\"\"",
        "\"{{autoindent}}(\\n\"",
        "\"\\n)\"",
        "\"\\t\"",
        "\" \"",
        "\"TOK_TYPE_FUNCTION | TOK_TYPE_ARGUMENT | TOK_SUBTYPE_LOGICAL | TOK_TYPE_OP_IN \"",
        "\"\\n\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"|\"",
        "\"undefined\"",
        "\"^\"",
        "\"\"",
        "\"$\"",
        "\"\"",
        "\"\"",
        "\"&lt;\"",
        "\"&gt;\"",
        "'{{autoindent}}<span class=\"function\">{{token}}</span><span class=\"function_start\">(</span><br />'",
        "'<br />{{autoindent}}{{token}}<span class=\"function_stop\">)</span>'",
        "'{{autoindent}}<span class=\"quote_mark\">\"</span><span class=\"text\">{{token}}</span><span class=\"quote_mark\">\"</span>'",
        "\"{{token}}<br />\"",
        "\"{{autoindent}}(\"",
        "\" )\"",
        "'<span class=\"tabbed\">&nbsp;&nbsp;&nbsp;&nbsp;</span>'",
        "\"&nbsp;\"",
        "\"<br />\"",
        "\"TOK_TYPE_FUNCTION | TOK_TYPE_ARGUMENT | TOK_SUBTYPE_LOGICAL | TOK_TYPE_OP_IN \"",
        "\"=\"",
        "\"\"",
        "\"=\"",
        "\"==\"",
        "\"<>\"",
        "\"!=\"",
        "\"Math.min\"",
        "\"Math.max\"",
        "\"Math.abs\"",
        "\"\"",
        "\"\"",
        "\"&\"",
        "\"+\"",
        "\"\"",
        "\"\"",
        "\"string\"",
        "\"if\"",
        "\":0)\"",
        "\")\"",
        "\"string\"",
        "\"if\"",
        "\"?\"",
        "\":\"",
        "\"sum\"",
        "\"+\"",
        "\"and\"",
        "\"&&\"",
        "\"or\"",
        "\"||\"",
        "\"string\"",
        "\"sum\"",
        "\":\"",
        "\"gi\"",
        "\"+\"",
        "\"and\"",
        "\":\"",
        "\"gi\"",
        "\"&&\"",
        "\"or\"",
        "\":\"",
        "\"gi\"",
        "\"||\"",
        "\":\"",
        "\"gi\"",
        "\"[\"",
        "\",\"",
        "\"]\"",
        "\"\"",
        "\"string\"",
        "\"{{token}}(\"",
        "\"{{token}})\"",
        "\"{{token}}\"",
        "\"{{token}}\"",
        "\"{{token}}\"",
        "\"{{token}}\"",
        "'\"{{token}}\"'",
        "\"{{token}}\"",
        "\"{{token}}\"",
        "\"\"",
        "\"{\"",
        "\"}\"",
        "\"\"",
        "\"(\"",
        "\")\"",
        "\"\\t\"",
        "\" \"",
        "\"TOK_SUBTYPE_STOP | TOK_SUBTYPE_START | TOK_TYPE_ARGUMENT\"",
        "\"==\"",
        "\"===\"",
        "\"\"",
        "\"=\"",
        "\"==\"",
        "\"<>\"",
        "\"!=\"",
        "\"min\"",
        "\"max\"",
        "\"math.fabs\"",
        "\"\"",
        "\"\"",
        "\"&\"",
        "\"+\"",
        "\"\"",
        "\"\"",
        "\"!\"",
        "\"True\"",
        "\"False\"",
        "\"string\"",
        "\"if\"",
        "\",))[0]\"",
        "\" or (0\"",
        "\"string\"",
        "\"if\"",
        "\" and (\"",
        "\",) or (\"",
        "\"sum\"",
        "\"+\"",
        "\"and\"",
        "\" and \"",
        "\"or\"",
        "\" or \"",
        "\"string\"",
        "\"true|false\"",
        "\"gi\"",
        "\"string\"",
        "\"sum\"",
        "\":\"",
        "\"gi\"",
        "\"+\"",
        "\"and\"",
        "\":\"",
        "\"gi\"",
        "\" and \"",
        "\"or\"",
        "\":\"",
        "\"gi\"",
        "\" or \"",
        "\":\"",
        "\"gi\"",
        "\"[\"",
        "\",\"",
        "\"]\"",
        "\"\"",
        "\"string\"",
        "\"{{token}}(\"",
        "\"{{token}})\"",
        "\"{{token}}\"",
        "\"{{token}}\"",
        "\"{{token}}\"",
        "\"{{token}}\"",
        "'\"{{token}}\"'",
        "\"{{token}}\"",
        "\"{{token}}\"",
        "\"\"",
        "\"{\"",
        "\"}\"",
        "\"\"",
        "\"(\"",
        "\")\"",
        "\"\\t\"",
        "\" \"",
        "\"TOK_SUBTYPE_STOP | TOK_SUBTYPE_START | TOK_TYPE_ARGUMENT\""
    ],
    "variables": [
        "excelFormulaUtilities",
        "core",
        "formatStr",
        "formattedStr",
        "inStr",
        "argIndex",
        "replaceIndex",
        "replaceRegex",
        "trim",
        "trimHTML",
        "isFunction",
        "isArray",
        "isWindow",
        "isPlainObject",
        "lastKey",
        "extend",
        "options",
        "name",
        "src",
        "copy",
        "copyIsArray",
        "clone",
        "target",
        "i",
        "length",
        "deep",
        "excelFormulaUtilities",
        "core",
        "formatStr",
        "trim",
        "types",
        "TOK_TYPE_NOOP",
        "TOK_TYPE_OPERAND",
        "TOK_TYPE_FUNCTION",
        "TOK_TYPE_SUBEXPR",
        "TOK_TYPE_ARGUMENT",
        "TOK_TYPE_OP_PRE",
        "TOK_TYPE_OP_IN",
        "TOK_TYPE_OP_POST",
        "TOK_TYPE_WSPACE",
        "TOK_TYPE_UNKNOWN",
        "TOK_SUBTYPE_START",
        "TOK_SUBTYPE_STOP",
        "TOK_SUBTYPE_TEXT",
        "TOK_SUBTYPE_NUMBER",
        "TOK_SUBTYPE_LOGICAL",
        "TOK_SUBTYPE_ERROR",
        "TOK_SUBTYPE_RANGE",
        "TOK_SUBTYPE_MATH",
        "TOK_SUBTYPE_CONCAT",
        "TOK_SUBTYPE_INTERSECT",
        "TOK_SUBTYPE_UNION",
        "token",
        "token",
        "tokens",
        "tokenStack",
        "offset",
        "currentChar",
        "doubleChar",
        "nextChar",
        "EOF",
        "token",
        "inString",
        "inPath",
        "inRange",
        "inError",
        "regexSN",
        "tokens2",
        "doAddToken",
        "parseFormula",
        "indentCount",
        "indent",
        "s",
        "i",
        "formulaControl",
        "formula",
        "tokens",
        "tokensHtml",
        "token",
        "startRow",
        "startCol",
        "startColDec",
        "toBase26",
        "converted",
        "iteration",
        "remainder",
        "fromBase26",
        "s",
        "i",
        "dec",
        "indt",
        "indent",
        "lastToken",
        "replaceTokenTmpl",
        "tokenString",
        "returnVal",
        "formatFormula",
        "isFirstToken",
        "defaultOptions",
        "indentCount",
        "indent",
        "s",
        "i",
        "tokens",
        "outputFormula",
        "autoBreakArray",
        "isNewLine",
        "testAutoBreak",
        "i",
        "lastToken",
        "token",
        "nextToken",
        "matchBeginNewline",
        "matchEndNewLine",
        "autoBreak",
        "autoIndent",
        "isNewLine",
        "indt",
        "lineBreak",
        "formatFormulaHTML",
        "tokRender",
        "outstr",
        "tokenStr",
        "defaultOptions",
        "formula2CSharp",
        "functionStack",
        "tokRender",
        "outstr",
        "tokenString",
        "tokenStr",
        "directConversionMap",
        "currentFunctionOnStack",
        "useTemplate",
        "defaultOptions",
        "cSharpOutput",
        "formula2JavaScript",
        "formula2Python",
        "functionStack",
        "tokRender",
        "outstr",
        "tokenString",
        "tokenStr",
        "directConversionMap",
        "currentFunctionOnStack",
        "useTemplate",
        "defaultOptions",
        "pythonOutput"
    ],
    "comments": [
        "Quick and dirty type checks",
        "----The functionality below has based off of the jQuery core library----",
        "Must be an Object.",
        "Because of IE, we also have to check the presence of the constructor property.",
        "Make sure that DOM nodes and window objects don't pass through, as well",
        "Not own constructor property must be Object",
        "Own properties are enumerated firstly, so to speed up,",
        "if last one is own, then all properties are own.",
        "Handle a deep copy situation",
        "skip the boolean and the target",
        "Handle case when target is a string or something (possible in deep copy)",
        "extend jQuery itself if only one argument is passed",
        "Only deal with non-null/undefined values",
        "Extend the base object",
        "Prevent never-ending loop",
        "Recurse if we're merging plain objects or arrays",
        "Never move original objects, clone them",
        "Don't bring in undefined values",
        "Return the modified object",
        "----end of jquery functionality----",
        "state-dependent character evaluation (order is important)",
        "double-quoted strings",
        "embeds are doubled",
        "end marks token",
        "single-quoted strings (links)",
        "embeds are double",
        "end does not mark a token",
        "bracked strings (range offset or linked workbook name)",
        "no embeds (changed to \"()\" by Excel)",
        "end does not mark a token",
        "error values",
        "end marks a token, determined from absolute list of values",
        "scientific notation check",
        "independent character evaulation (order not important)",
        "establish state-dependent character evaluations",
        "not expected",
        "not expected",
        "not expected",
        "mark start and end of arrays and array rows",
        "not expected",
        "If is EU then handle ; as list seperators",
        "Else if not Eu handle ; as array row seperator",
        "trim white-space",
        "multi-character comparators",
        "standard infix operators",
        "standard postfix operators",
        "start subexpression or function",
        "function, subexpression, array parameters",
        "stop subexpression",
        "token accumulation",
        "dump remaining accumulation",
        "move all tokens to a new collection, excluding all unnecessary white-space tokens",
        "if ((tokens.BOF()) || (tokens.EOF())) {}",
        "else if (!(",
        "((tokens.previous().type === TOK_TYPE_FUNCTION) && (tokens.previous().subtype == TOK_SUBTYPE_STOP))",
        "|| ((tokens.previous().type == TOK_TYPE_SUBEXPR) && (tokens.previous().subtype == TOK_SUBTYPE_STOP))",
        "|| (tokens.previous().type == TOK_TYPE_OPERAND)))",
        "{}",
        "else if (!(",
        "((tokens.next().type == TOK_TYPE_FUNCTION) && (tokens.next().subtype == TOK_SUBTYPE_START))",
        "|| ((tokens.next().type == TOK_TYPE_SUBEXPR) && (tokens.next().subtype == TOK_SUBTYPE_START))",
        "|| (tokens.next().type == TOK_TYPE_OPERAND)))",
        "{}",
        "else { tokens2.add(token.value, TOK_TYPE_OP_IN, TOK_SUBTYPE_INTERSECT)};",
        "switch infix \"-\" operator to prefix when appropriate, switch infix \"+\" operator to noop when appropriate, identify operand",
        "and infix-operator subtypes, pull \"@\" from in front of function names",
        "move all tokens to a new collection, excluding all noops",
        "Pass a range such as A1:B2 along with a",
        "delimiter to get back a full list of ranges.",
        "",
        "Example:",
        "breakOutRanges(\"A1:B2\", \"+\"); //Returns A1+A2+B1+B2",
        "Quick Check to see if if rangeStr is a valid range",
        "Make the rangeStr lowercase to deal with looping.",
        "Total rows and cols",
        "Loop vars",
        "Return String",
        "Get the current cell id",
        "Modified from function at http://en.wikipedia.org/wiki/Hexavigesimal",
        "Repeatedly divide the numerb by 26 and convert the",
        "remainder into the appropriate letter.",
        "Compensate for the last letter of the series being corrected on 2 or more iterations.",
        "This was Modified from a function at http://en.wikipedia.org/wiki/Hexavigesimal",
        "Pass in the base 26 string, get back integer",
        "-----------------FUNCTION------------------",
        "-----------------OPERAND------------------",
        "Quick fix for trailing space after = sign",
        "trim: true,",
        "Tokens",
        "TODO this strips out spaces which breaks part of issue 28.  'Data Sheet' gets changed to DataSheet",
        "Custom callback to format as c#",
        "tokenString = (token.value.length === 0) ? \"\" : token.value.toString(),",
        "Assume '=' sign",
        "If in the sum function break aout cell names and add",
        "TODO make sure this is working",
        "TODO make sure this is working",
        "TODO make sure this is working",
        "By Default return an array containing all cell names in array",
        "Create array for ranges",
        "debugger;",
        "Custom callback to format as c#",
        "tokenString = (token.value.length === 0) ? \"\" : token.value.toString(),",
        "Assume '=' sign",
        "If in the sum function break aout cell names and add",
        "TODO make sure this is working",
        "TODO make sure this is working",
        "TODO make sure this is working",
        "By Default return an array containing all cell names in array",
        "Create array for ranges",
        "debugger;"
    ],
    "docstrings": [
        "* excelFormulaUtilitiesJS\n * https://github.com/joshatjben/excelFormulaUtilitiesJS/\n *\n * Copyright 2011, Josh Bennett\n * licensed under the MIT license.\n * https://github.com/joshatjben/excelFormulaUtilitiesJS/blob/master/LICENSE.txt\n *\n * Some functionality based off of the jquery core lib\n * Copyright 2011, John Resig\n * Dual licensed under the MIT or GPL Version 2 licenses.\n * http://jquery.org/license\n *\n * Based on Ewbi's Go Calc Prototype Excel Formula Parser. [http://ewbi.blogs.com/develops/2004/12/excel_formula_p.html]",
        "* Simple/quick string formater. This will take an input string and apply n number of arguments to it.\n   *\n   * <b>example:</b><br />\n   * <code>\n   * <pre>\n   *\tvar foo = excelFormulaUtilities.core.formatStr(\"{0}\", \"foo\"); // foo will be set to \"foo\"\n   *\tvar fooBar = excelFormulaUtilities.core.formatStr(\"{0} {1}\", \"foo\", \"bar\"); // fooBar will be set to \"fooBar\"\n   *\tvar error = excelFormulaUtilities.core.formatStr(\"{1}\", \"error\"); // will throw an index out of range error since only 1 extra argument was passed, which would be index 0.\n   * </pre>\n   * </code>\n   *\n   * @memberOf window.excelFormulaUtilities.core\n   * @function\n   * @param {String} inStr\n   *",
        "* @param {object} obj\n   * @returns {boolean}\n   * @memberOf window.excelFormulaUtilities.core",
        "* @param {object} obj\n   * @returns {boolean}\n   * @memberOf window.excelFormulaUtilities.core",
        "* @param {object} obj\n   * @returns {boolean}\n   * @memberOf window.excelFormulaUtilities.core",
        "* Check if the object is a plain object or not. This has been pulled from the jQuery core and modified slightly.\n   * @param {object} obj\n   * @returns {boolean} returns weather the object is a plain object or not.\n   * @memberOf window.excelFormulaUtilities.core",
        "* This has been pulled from the jQuery core and modified slightly. see http://api.jquery.com/jQuery.extend/\n   * @param {object} target\n   * @param {object} object add one or more object to extend the target.\n   * @returns {object} returns the extended object.\n   * @memberOf window.excelFormulaUtilities.core",
        "* excelFormulaUtilitiesJS\n * https://github.com/joshatjben/excelFormulaUtilitiesJS/\n *\n * Copyright 2011, Josh Bennett\n * licensed under the MIT license.\n * https://github.com/joshatjben/excelFormulaUtilitiesJS/blob/master/LICENSE.txt\n *\n * Some functionality based off of the jquery core lib\n * Copyright 2011, John Resig\n * Dual licensed under the MIT or GPL Version 2 licenses.\n * http://jquery.org/license\n *\n * Based on Ewbi's Go Calc Prototype Excel Formula Parser. [http://ewbi.blogs.com/develops/2004/12/excel_formula_p.html]",
        "* @class",
        "* @class",
        "*\n   * @memberof excelFormulaUtilities.parser\n   * @function\n   * @param {string} formula\n   * @param {object} options optional param\n   *<pre>\n   *   TEMPLATE VALUES\n   *  {{autoindent}} - apply auto indent based on current tree level\n   *  {{token}} - the named token such as FUNCTION_NAME or \"string\"\n   *  {{autolinebreak}} - apply linbreak automaticly. tests for next element only at this point\n   *\n   * Options include:\n   *  tmplFunctionStart           - template for the start of a function, the {{token}} will contain the name of the function.\n   *  tmplFunctionStop            - template for when the end of a function has been reached.\n   *  tmplOperandError            - template for errors.\n   *  tmplOperandRange            - template for ranges and variable names.\n   *  tmplOperandLogical          - template for logical operators such as + - = ...\n   *  tmplOperandNumber           - template for numbers.\n   *  tmplOperandText             - template for text/strings.\n   *  tmplArgument\t\t\t\t- template for argument seperators such as ,.\n   *  tmplFunctionStartArray      - template for the start of an array.\n   *  tmplFunctionStartArrayRow   - template for the start of an array row.\n   *  tmplFunctionStopArrayRow    - template for the end of an array row.\n   *  tmplFunctionStopArray       - template for the end of an array.\n   *  tmplSubexpressionStart      - template for the sub expresson start\n   *  tmplSubexpressionStop       - template for the sub expresson stop\n   *  tmplIndentTab               - template for the tab char.\n   *  tmplIndentSpace             - template for space char.\n   *  autoLineBreak               - when rendering line breaks automaticly which types should it break on. \"TOK_SUBTYPE_STOP | TOK_SUBTYPE_START | TOK_TYPE_ARGUMENT\"\n   *  newLine                     - used for the {{autolinebreak}} replacement as well as some string parsing. if this is not set correctly you may get undesired results. usually \\n for text or <br /> for html\n   *  trim: true                  - trim the output.\n   *\tcustomTokenRender: null     - this is a call back to a custom token function. your call back should look like\n   *                                EXAMPLE:\n   *\n   *                                    customTokenRender: function(tokenString, token, indent, linbreak){\n   *                                        var outstr = token,\n   *                                            useTemplate = true;\n   *                                        // In the return object \"useTemplate\" tells formatFormula()\n   *                                        // weather or not to apply the template to what your return from the \"tokenString\".\n   *                                        return {tokenString: outstr, useTemplate: useTemplate};\n   *                                    }\n   *\n   *</pre>\n   * @returns {string}",
        "* This function calls {@link excelFormulaUtilities.parser.formatFormula}\n   *\n   * @memberof excelFormulaUtilities.parser\n   * @function\n   * @param {string} formula\n   * @param {object} options optional param",
        "*\n   * @memberof excelFormulaUtilities.convert\n   * @function\n   * @param {string} formula\n   * @returns {string}",
        "* Both the csharp and javascript are the same when converted, this is just an alias for convert2CSharp. there are some subtle differences such as == vrs ===, this will be addressed in a later version.\n   * @memberof excelFormulaUtilities.convert\n   * @function\n   * @param {string} formula\n   * @returns {string}",
        "*\n   * @memberof excelFormulaUtilities.convert\n   * @function\n   * @param {string} formula\n   * @returns {string}"
    ],
    "functions": [
        "F_token",
        "F_tokens",
        "F_tokenStack",
        "getTokens",
        "breakOutRanges",
        "applyTokenTemplate"
    ],
    "classes": []
}