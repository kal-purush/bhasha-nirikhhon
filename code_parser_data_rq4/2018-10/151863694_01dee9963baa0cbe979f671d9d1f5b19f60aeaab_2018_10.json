{
    "identifiers": [
        "rooms",
        "player",
        "items",
        "gameparser",
        "items",
        "value",
        "items",
        "value",
        "items",
        "store_string",
        "value",
        "store_string",
        "value",
        "store_string",
        "room",
        "list_of_items",
        "room",
        "items_to_print",
        "items_to_print",
        "items",
        "value",
        "items",
        "value",
        "items",
        "store_string",
        "value",
        "store_string",
        "value",
        "store_string",
        "room",
        "room",
        "upper",
        "room",
        "print_room_items",
        "room",
        "exits",
        "direction",
        "rooms",
        "exits",
        "direction",
        "direction",
        "leads_to",
        "direction",
        "upper",
        "leads_to",
        "exits",
        "room_items",
        "inv_items",
        "direction",
        "exits",
        "print_exit",
        "direction",
        "exit_leads_to",
        "exits",
        "direction",
        "item",
        "room_items",
        "item",
        "upper",
        "item",
        "item",
        "inv_items",
        "item",
        "upper",
        "item",
        "round",
        "mass",
        "exits",
        "chosen_exit",
        "chosen_exit",
        "exits",
        "direction",
        "current_room",
        "is_valid_exit",
        "current_room",
        "direction",
        "exit",
        "move",
        "current_room",
        "direction",
        "item_id",
        "current_room",
        "inventory",
        "items",
        "mass",
        "items",
        "item_id",
        "mass",
        "item_in_room",
        "max_weight",
        "current_room",
        "current_room",
        "item_in_room",
        "items_lst",
        "item",
        "items_lst",
        "item",
        "item_in_room",
        "inventory",
        "append",
        "item",
        "current_room",
        "remove",
        "item",
        "mass",
        "item_in_room",
        "KeyError",
        "item_id",
        "current_room",
        "inventory",
        "mass",
        "items",
        "item_id",
        "mass",
        "inventory",
        "inventory",
        "item_to_drop",
        "inventory",
        "item",
        "inv_lst",
        "item",
        "item_to_drop",
        "current_room",
        "append",
        "item",
        "inventory",
        "remove",
        "item",
        "mass",
        "item_to_drop",
        "KeyError",
        "command",
        "len",
        "command",
        "command",
        "len",
        "command",
        "execute_go",
        "command",
        "command",
        "len",
        "command",
        "execute_take",
        "command",
        "command",
        "len",
        "command",
        "execute_drop",
        "command",
        "exits",
        "room_items",
        "inv_items",
        "print_menu",
        "exits",
        "room_items",
        "inv_items",
        "input",
        "normalise_input",
        "user_input",
        "normalised_user_input",
        "exits",
        "direction",
        "rooms",
        "exits",
        "direction",
        "items",
        "rooms",
        "print_room",
        "current_room",
        "print_inventory_items",
        "inventory",
        "menu",
        "current_room",
        "current_room",
        "inventory",
        "execute_command",
        "command",
        "main"
    ],
    "literals": [
        "''",
        "'name'",
        "'name'",
        "', '",
        "'items'",
        "'There is '",
        "' here.\\n'",
        "''",
        "'name'",
        "'.\\n'",
        "'name'",
        "', '",
        "'You have '",
        "\"name\"",
        "\"description\"",
        "\"name\"",
        "\"GO \"",
        "\" to \"",
        "\".\"",
        "\"You can:\"",
        "'TAKE '",
        "'id'",
        "' to take '",
        "'name'",
        "'.'",
        "'DROP '",
        "'id'",
        "' to drop your '",
        "'name'",
        "'. '",
        "'\\nYou are carrying this much: '",
        "'kg'",
        "\"What do you want to do?\"",
        "'exits'",
        "'exits'",
        "\"You cannot go there.\"",
        "'mass'",
        "'\\nYou cannot carry that much'",
        "'items'",
        "'items'",
        "'You cannot take this'",
        "'items'",
        "'mass'",
        "'I don\\'t understand'",
        "'\\nYou cannot drop that much'",
        "'You cannot drop this'",
        "'items'",
        "'mass'",
        "\"You cannot drop that.\"",
        "'I dont\\'t quite understand'",
        "\"go\"",
        "\"Go where?\"",
        "\"take\"",
        "\"Take what?\"",
        "\"drop\"",
        "\"Drop what?\"",
        "\"This makes no sense.\"",
        "\"> \"",
        "'pen'",
        "\"Reception\"",
        "\"items\"",
        "'You have completed the game'",
        "\"exits\"",
        "\"items\"",
        "\"__main__\""
    ],
    "variables": [
        "store_string",
        "store_string",
        "store_string",
        "items_to_print",
        "store_string",
        "store_string",
        "store_string",
        "exit",
        "current_room",
        "item_in_room",
        "items_lst",
        "item_to_drop",
        "inv_lst",
        "user_input",
        "normalised_user_input",
        "command"
    ],
    "comments": [
        "!/usr/bin/python3",
        "Display room name",
        "Display room description",
        "Display the room items",
        "Iterate over available exits",
        "Print the exit name and where it leads to",
        "Display menu",
        "Read player's input",
        "Normalise the input",
        "Next room to go to",
        "This is the entry point of our program",
        "Main game loop",
        "Display game status (room description, inventory etc.)",
        "Show the menu with possible actions and ask the player",
        "Execute the player's command",
        "Are we being run as a script? If so, run main().",
        "'__main__' is the name of the scope in which top-level code executes.",
        "See https://docs.python.org/3.4/library/__main__.html for explanation"
    ],
    "docstrings": [
        "\"\"\"This function takes a list of items (see items.py for the definition) and\n    returns a comma-separated list of item names (as a string). For example:\n\n    >>> list_of_items([item_pen, item_handbook])\n    'a pen, a student handbook'\n\n    >>> list_of_items([item_id])\n    'id card'\n\n    >>> list_of_items([])\n    ''\n\n    >>> list_of_items([item_money, item_handbook, item_laptop])\n    'money, a student handbook, laptop'\n\n    \"\"\"",
        "\"\"\"This function takes a room as an input and nicely displays a list of items\n    found in this room (followed by a blank line). If there are no items in\n    the room, nothing is printed. See map.py for the definition of a room, and\n    items.py for the definition of an item. This function uses list_of_items()\n    to produce a comma-separated list of item names. For example:\n\n    >>> print_room_items(rooms[\"Reception\"])\n    There is a pack of biscuits, a student handbook here.\n    <BLANKLINE>\n\n    >>> print_room_items(rooms[\"Office\"])\n    There is a pen here.\n    <BLANKLINE>\n\n    >>> print_room_items(rooms[\"Admins\"])\n\n    (no output)\n\n    Note: <BLANKLINE> here means that doctest should expect a blank line.\n\n    \"\"\"",
        "\"\"\"This function takes a list of inventory items and displays it nicely, in a\n    manner similar to print_room_items(). The only difference is in formatting:\n    print \"You have ...\" instead of \"There is ... here.\". For example:\n\n    >>> print_inventory_items(inventory)\n    You have id card, laptop, money.\n    <BLANKLINE>\n\n    \"\"\"",
        "\"\"\"This function takes a room as an input and nicely displays its name\n    and description. The room argument is a dictionary with entries \"name\",\n    \"description\" etc. (see map.py for the definition). The name of the room\n    is printed in all capitals and framed by blank lines. Then follows the\n    description of the room and a blank line again. If there are any items\n    in the room, the list of items is printed next followed by a blank line\n    (use print_room_items() for this). For example:\n\n    >>> print_room(rooms[\"Office\"])\n    <BLANKLINE>\n    THE GENERAL OFFICE\n    <BLANKLINE>\n    You are standing next to the cashier's till at\n    30-36 Newport Road. The cashier looks at you with hope\n    in their eyes. If you go west you can return to the\n    Queen's Buildings.\n    <BLANKLINE>\n    There is a pen here.\n    <BLANKLINE>\n\n    >>> print_room(rooms[\"Reception\"])\n    <BLANKLINE>\n    RECEPTION\n    <BLANKLINE>\n    You are in a maze of twisty little passages, all alike.\n    Next to you is the School of Computer Science and\n    Informatics reception. The receptionist, Matt Strangis,\n    seems to be playing an old school text-based adventure\n    game on his computer. There are corridors leading to the\n    south and east. The exit is to the west.\n    <BLANKLINE>\n    There is a pack of biscuits, a student handbook here.\n    <BLANKLINE>\n\n    >>> print_room(rooms[\"Admins\"])\n    <BLANKLINE>\n    MJ AND SIMON'S ROOM\n    <BLANKLINE>\n    You are leaning agains the door of the systems managers'\n    room. Inside you notice Matt \"MJ\" John and Simon Jones. They\n    ignore you. To the north is the reception.\n    <BLANKLINE>\n\n    Note: <BLANKLINE> here means that doctest should expect a blank line.\n    \"\"\"",
        "\"\"\"This function takes a dictionary of exits and a direction (a particular\n    exit taken from this dictionary). It returns the name of the room into which\n    this exit leads. For example:\n\n    >>> exit_leads_to(rooms[\"Reception\"][\"exits\"], \"south\")\n    \"MJ and Simon's room\"\n    >>> exit_leads_to(rooms[\"Reception\"][\"exits\"], \"east\")\n    \"your personal tutor's office\"\n    >>> exit_leads_to(rooms[\"Tutor\"][\"exits\"], \"west\")\n    'Reception'\n    \"\"\"",
        "\"\"\"This function prints a line of a menu of exits. It takes a direction (the\n    name of an exit) and the name of the room into which it leads (leads_to),\n    and should print a menu line in the following format:\n\n    GO <EXIT NAME UPPERCASE> to <where it leads>.\n\n    For example:\n    >>> print_exit(\"east\", \"you personal tutor's office\")\n    GO EAST to you personal tutor's office.\n    >>> print_exit(\"south\", \"MJ and Simon's room\")\n    GO SOUTH to MJ and Simon's room.\n    \"\"\"",
        "\"\"\"This function displays the menu of available actions to the player. The\n    argument exits is a dictionary of exits as exemplified in map.py. The\n    arguments room_items and inv_items are the items lying around in the room\n    and carried by the player respectively. The menu should, for each exit,\n    call the function print_exit() to print the information about each exit in\n    the appropriate format. The room into which an exit leads is obtained\n    using the function exit_leads_to(). Then, it should print a list of commands\n    related to items: for each item in the room print\n\n    \"TAKE <ITEM ID> to take <item name>.\"\n\n    and for each item in the inventory print\n\n    \"DROP <ITEM ID> to drop <item name>.\"\n\n    For example, the menu of actions available at the Reception may look like this:\n\n    You can:\n    GO EAST to your personal tutor's office.\n    GO WEST to the parking lot.\n    GO SOUTH to MJ and Simon's room.\n    TAKE BISCUITS to take a pack of biscuits.\n    TAKE HANDBOOK to take a student handbook.\n    DROP ID to drop your id card.\n    DROP LAPTOP to drop your laptop.\n    DROP MONEY to drop your money.\n    What do you want to do?\n\n    \"\"\"",
        "\"\"\"This function checks, given a dictionary \"exits\" (see map.py) and\n    a players's choice \"chosen_exit\" whether the player has chosen a valid exit.\n    It returns True if the exit is valid, and False otherwise. Assume that\n    the name of the exit has been normalised by the function normalise_input().\n    For example:\n\n    >>> is_valid_exit(rooms[\"Reception\"][\"exits\"], \"south\")\n    True\n    >>> is_valid_exit(rooms[\"Reception\"][\"exits\"], \"up\")\n    False\n    >>> is_valid_exit(rooms[\"Parking\"][\"exits\"], \"west\")\n    False\n    >>> is_valid_exit(rooms[\"Parking\"][\"exits\"], \"east\")\n    True\n    \"\"\"",
        "\"\"\"This function, given the direction (e.g. \"south\") updates the current room\n    to reflect the movement of the player if the direction is a valid exit\n    (and prints the name of the room into which the player is\n    moving). Otherwise, it prints \"You cannot go there.\"\n    \"\"\"",
        "\"\"\"This function takes an item_id as an argument and moves this item from the\n    list of items in the current room to the player's inventory. However, if\n    there is no such item in the room, this function prints\n    \"You cannot take that.\"\n    \"\"\"",
        "\"\"\"This function takes an item_id as an argument and moves this item from the\n    player's inventory to list of items in the current room. However, if there is\n    no such item in the inventory, this function prints \"You cannot drop that.\"\n    \"\"\"",
        "\"\"\"This function takes a command (a list of words as returned by\n    normalise_input) and, depending on the type of action (the first word of\n    the command: \"go\", \"take\", or \"drop\"), executes either execute_go,\n    execute_take, or execute_drop, supplying the second word as the argument.\n\n    \"\"\"",
        "\"\"\"This function, given a dictionary of possible exits from a room, and a list\n    of items found in the room and carried by the player, prints the menu of\n    actions using print_menu() function. It then prompts the player to type an\n    action. The players's input is normalised using the normalise_input()\n    function before being returned.\n\n    \"\"\"",
        "\"\"\"This function returns the room into which the player will move if, from a\n    dictionary \"exits\" of avaiable exits, they choose to move towards the exit\n    with the name given by \"direction\". For example:\n\n    >>> move(rooms[\"Reception\"][\"exits\"], \"south\") == rooms[\"Admins\"]\n    True\n    >>> move(rooms[\"Reception\"][\"exits\"], \"east\") == rooms[\"Tutor\"]\n    True\n    >>> move(rooms[\"Reception\"][\"exits\"], \"west\") == rooms[\"Office\"]\n    False\n    \"\"\""
    ],
    "functions": [
        "list_of_items",
        "print_room_items",
        "print_inventory_items",
        "print_room",
        "exit_leads_to",
        "print_exit",
        "print_menu",
        "is_valid_exit",
        "execute_go",
        "execute_take",
        "execute_drop",
        "execute_command",
        "menu",
        "move",
        "main"
    ],
    "classes": []
}