{
    "identifiers": [
        "x",
        "values",
        "doubled_values",
        "append",
        "x",
        "x",
        "x",
        "values",
        "x",
        "x",
        "values",
        "x",
        "values",
        "x",
        "filtered_values",
        "append",
        "x",
        "x",
        "x",
        "values",
        "x",
        "x",
        "values",
        "x",
        "i",
        "len",
        "my_favorite_numbers",
        "my_favorite_numbers",
        "i",
        "number",
        "my_favorite_numbers",
        "number",
        "i",
        "l",
        "i",
        "l",
        "i",
        "i",
        "i",
        "len",
        "l",
        "i",
        "l",
        "i",
        "i",
        "x",
        "l",
        "i",
        "x",
        "key",
        "d",
        "key",
        "d",
        "key",
        "key",
        "value",
        "d",
        "items",
        "key",
        "value",
        "min",
        "len",
        "l1",
        "len",
        "l2",
        "i",
        "n",
        "l1",
        "i",
        "l2",
        "i",
        "l1v",
        "l2v",
        "l1",
        "l2",
        "l1v",
        "l2v",
        "columns",
        "rows",
        "keys",
        "values",
        "x",
        "x",
        "l",
        "l",
        "i",
        "l",
        "i",
        "found",
        "i",
        "l",
        "i",
        "d",
        "d",
        "setdefault",
        "d",
        "d",
        "d",
        "get",
        "d",
        "d",
        "d",
        "key",
        "d",
        "setdefault",
        "key",
        "collections",
        "defaultdict",
        "defaultdict",
        "d",
        "defaults",
        "copy",
        "d",
        "update",
        "overrides",
        "d",
        "update",
        "higher_overrides",
        "d",
        "update",
        "highest_overrides",
        "d",
        "update",
        "most_override_much_wow",
        "collections",
        "ChainMap",
        "ChainMap",
        "most_override_much_wow",
        "highest_overrides",
        "higher_overrides",
        "overrides",
        "defaults",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "x",
        "y",
        "x",
        "y",
        "x",
        "open",
        "f",
        "read",
        "f",
        "close",
        "open",
        "input_file",
        "f",
        "read",
        "os",
        "os",
        "path",
        "exists",
        "os",
        "unlink",
        "os",
        "os",
        "unlink",
        "OSError",
        "contextlib",
        "suppress",
        "suppress",
        "OSError",
        "os",
        "remove",
        "n",
        "n",
        "n",
        "l",
        "n",
        "n",
        "n",
        "l",
        "n_errors",
        "n_errors",
        "format",
        "n_errors",
        "n_errors",
        "a",
        "a",
        "_a",
        "value",
        "value",
        "a",
        "a",
        "property",
        "_a",
        "a",
        "setter",
        "value",
        "value",
        "a",
        "a",
        "staticmethod",
        "weekday",
        "nameds_weekdays",
        "weekday",
        "weekday",
        "nameds_weekdays",
        "weekday"
    ],
    "literals": [
        "\"bar\"",
        "\"bar\"",
        "'foo'",
        "'bar'",
        "\"%s = %d\"",
        "f\"{key} = {value}\"",
        "'raymond'",
        "'rachel'",
        "'matthew'",
        "'red'",
        "'green'",
        "'blue'",
        "'foo'",
        "'foo'",
        "'foo'",
        "'foo'",
        "'bar'",
        "'default'",
        "'foo'",
        "'foo'",
        "'foo'",
        "'bar'",
        "'foo'",
        "'default'",
        "'x'",
        "'x'",
        "'y'",
        "'y'",
        "'z'",
        "'z'",
        "'x'",
        "'y'",
        "'z'",
        "'x'",
        "'color'",
        "'red'",
        "'user'",
        "'guest'",
        "'log_level'",
        "'info'",
        "'color'",
        "'blue'",
        "'log_level'",
        "'debug'",
        "'color'",
        "'pink'",
        "'user'",
        "'admin'",
        "'user'",
        "'superadmin'",
        "\"file.txt\"",
        "\"r\"",
        "\"file.txt\"",
        "\"r\"",
        "\"file.txt\"",
        "\"file.txt\"",
        "\"file.txt\"",
        "'somefile.tmp'",
        "\"there were \"",
        "\" errors.\"",
        "\"there were %d errors.\"",
        "\"there were {0} errors.\"",
        "f\"there were {n_errors} errors.\"",
        "'Monday'",
        "'Friday'",
        "'Monday'",
        "'Friday'"
    ],
    "variables": [
        "intNumberOfDogs",
        "strNameOfMyFavortieDog",
        "dogs_count",
        "favorite_dog_name",
        "values",
        "doubled_values",
        "doubled_values",
        "doubled_values",
        "filtered_values",
        "filtered_values",
        "filtered_values",
        "my_favorite_numbers",
        "l",
        "i",
        "d",
        "l1",
        "l2",
        "n",
        "rows",
        "columns",
        "keys",
        "values",
        "peoples_favorites_colors",
        "l",
        "found",
        "l",
        "found",
        "d",
        "d",
        "d",
        "d",
        "foo",
        "foo",
        "d",
        "foo",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "defaults",
        "overrides",
        "higher_overrides",
        "highest_overrides",
        "most_override_much_wow",
        "d",
        "d",
        "l",
        "x",
        "y",
        "z",
        "x",
        "y",
        "z",
        "x",
        "y",
        "z",
        "x",
        "y",
        "_t",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "f",
        "content",
        "content",
        "l",
        "d",
        "d",
        "n_errors",
        "s",
        "s",
        "s",
        "s",
        "_a",
        "_a",
        "_a",
        "_a",
        "a",
        "nameds_weekdays",
        "nameds_weekdays"
    ],
    "comments": [
        "timeit is a Python built in that can test small snippets very quickly",
        "by default it'll run the code snippet 1 million times",
        "I'll show a few code snippets here with timeitrunning them",
        "Bad",
        "Good",
        "Bad",
        "Still Bad:",
        "Good",
        "timeit.timeit(\"list(map(lambda x: x * 2, l))\", setup=\"l = range(100)\")",
        "timeit.timeit(\"[x * 2 for x in range(100)]\", setup=\"l = range(100)\")",
        "Bad",
        "Bad again",
        "Good",
        "Bad",
        "Good",
        "Just no",
        "Bad",
        "Good",
        "Bad",
        "Good",
        "More readable and a little faster for larger dictionaries",
        "timeit.timeit(\"for key in d: (key, d[key])\", setup=\"d = {n: n * 2 for n in range(100)}\")",
        "timeit.timeit(\"for key, value in d.items(): (key, value)\", setup=\"d = {n: n * 2 for n in range(100)}\")",
        "Bad",
        "Good",
        "Magical",
        "From https://stackoverflow.com/a/2429737",
        "basically helps you pivot rows to columns and vice versa",
        "More Magic",
        "Construct a dictionary",
        "https://gist.github.com/JeffPaine/6213790#construct-a-dictionary-from-pairs",
        "Bad:",
        "timeit.timeit('1000 in x', setup='x = [x for x in range(1000)]')",
        "Good",
        "timeit.timeit('1000 in x', setup='x = set([x for x in range(1000)])')",
        "Bad",
        "not found...",
        "Good",
        "not found...",
        "Bad",
        "Good",
        "Bad",
        "Good",
        "Bad",
        "setting up a bunch of default values in a dictionary",
        "Clever, but still not good",
        "Good",
        "raises no key error",
        "Bad",
        "lots of duplicate data",
        "Good",
        "one simple call, no duplicate data",
        "Bad",
        "Wat",
        "Good",
        "Bad",
        "Good",
        "Bad",
        "Good",
        "Bad",
        "Good",
        "Best",
        "Python 3.4 or newer",
        "Bad",
        "Good",
        "Faster and more readable",
        "timeit.timeit(\"dict([(n, n * 2) for n in l])\", setup=\"l = range(100)\")",
        "timeit.timeit(\"{n: n * 2 for n in l}\", setup=\"l = range(100)\")",
        "Bad",
        "Good",
        "Better IMO",
        "Python 3.6 Only",
        "Bad",
        "Good",
        "Best",
        "Don't over think this; we can add the getters and setters later if need be",
        "Bad",
        "Good"
    ],
    "docstrings": [
        "\"\"\"\nThe world is a horrible place.\nLet's make it more pythonic\nmany ideas borrowed from Raymond Hettinger and Python Anti-Patterns\n\"\"\"",
        "\"\"\"\nPutting type information in the variable name (Hungarian notation)\n\"\"\"",
        "\"\"\"\nNot using a list comprehension when appropriate\n\"\"\"",
        "\"\"\"\nLooping over a list\n\"\"\"",
        "\"\"\"\nGetting an indexes in a loop\n\"\"\"",
        "\"\"\"\nNot using .iteritems() to iterate over a list of key/value pairs of a dictionary.\n\"\"\"",
        "\"\"\"\nNot using zip() to iterate over a pair of lists\n\"\"\"",
        "\"\"\"\nUsing \"key in list\" to check if a key is contained in a list.\n\"\"\"",
        "\"\"\"\nNot using 'else' where appropriate in a loop\n\"\"\"",
        "\"\"\"\nNot using .setdefault() where appropriate\n\"\"\"",
        "\"\"\"\nNot using .get() to return a default value from a dict\n\"\"\"",
        "\"\"\"\nNot using defaultdict where appropriate\n\"\"\"",
        "\"\"\"\nNot using explicit unpacking of sequencing\nPython supports unpacking of lists, tuples and dicts.\nhttps://gist.github.com/JeffPaine/6213790#linking-dictionaries\n\"\"\"",
        "\"\"\"\nNot using explicit unpacking of sequencing\nPython supports unpacking of lists, tuples and dicts.\n\"\"\"",
        "\"\"\"\nNot using unpacking for updating multiple values at once\n\"\"\"",
        "\"\"\"\nNot using 'with' to open files\n\"\"\"",
        "\"\"\"\nAsking for permission instead of forgiveness\n\"\"\"",
        "\"\"\"\nNot using a dict comprehension where appropriate\n\"\"\"",
        "\"\"\"\nUsing string concatenation instead of formatting\n\"\"\"",
        "\"\"\"\nImplementing Java-style getters and setters instead of using properties.\nhttp://stackoverflow.com/questions/6618002/python-property-versus-getters-and-setters\n\"\"\"",
        "\"\"\"\nImplementing a class that has only one function\n\"\"\""
    ],
    "functions": [
        "get_a",
        "set_a",
        "a",
        "a",
        "from_weekday_to_string",
        "from_weekday_to_string"
    ],
    "classes": [
        "Foo",
        "Foo",
        "Foo",
        "DateUtil"
    ]
}