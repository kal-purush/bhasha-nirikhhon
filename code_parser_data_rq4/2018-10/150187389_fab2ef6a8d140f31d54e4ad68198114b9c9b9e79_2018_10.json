{
    "identifiers": [
        "time",
        "sleep",
        "micropython",
        "adafruit_bus_device",
        "spi_device",
        "SPIDevice",
        "unpack",
        "ImportError",
        "ustruct",
        "unpack",
        "spi",
        "cs",
        "thermocouple_type",
        "ThermocoupleType",
        "K",
        "SPIDevice",
        "spi",
        "cs",
        "baudrate",
        "polarity",
        "phase",
        "_write_u8",
        "_MAX31856_MASK_REG",
        "_write_u8",
        "_MAX31856_CR0_REG",
        "_MAX31856_CR0_OCFAULT0",
        "_read_register",
        "_MAX31856_CR1_REG",
        "conf_reg_1",
        "conf_reg_1",
        "thermocouple_type",
        "_write_u8",
        "_MAX31856_CR1_REG",
        "conf_reg_1",
        "property",
        "_perform_one_shot_measurement",
        "unpack",
        "_read_register",
        "_MAX31856_LTCBH_REG",
        "raw_temp",
        "raw_temp",
        "temp_float",
        "property",
        "_perform_one_shot_measurement",
        "unpack",
        "_read_register",
        "_MAX31856_CJTH_REG",
        "raw_read",
        "cold_junction_temp",
        "property",
        "unpack",
        "_read_register",
        "_MAX31856_LTLFTH_REG",
        "unpack",
        "_read_register",
        "_MAX31856_LTHFTH_REG",
        "round",
        "raw_low",
        "round",
        "raw_high",
        "temperature_thresholds",
        "setter",
        "val",
        "val",
        "val",
        "_write_u8",
        "_MAX31856_LTHFTH_REG",
        "int_high",
        "_write_u8",
        "_MAX31856_LTHFTL_REG",
        "int_high",
        "_write_u8",
        "_MAX31856_LTLFTH_REG",
        "int_low",
        "_write_u8",
        "_MAX31856_LTLFTL_REG",
        "int_low",
        "property",
        "unpack",
        "_read_register",
        "_MAX31856_CJLF_REG",
        "unpack",
        "_read_register",
        "_MAX31856_CJHF_REG",
        "reference_temperature_thresholds",
        "setter",
        "val",
        "_write_u8",
        "_MAX31856_CJLF_REG",
        "val",
        "_write_u8",
        "_MAX31856_CJHF_REG",
        "val",
        "property",
        "_read_register",
        "_MAX31856_SR_REG",
        "faults",
        "_MAX31856_FAULT_CJRANGE",
        "faults",
        "_MAX31856_FAULT_TCRANGE",
        "faults",
        "_MAX31856_FAULT_CJHIGH",
        "faults",
        "_MAX31856_FAULT_CJLOW",
        "faults",
        "_MAX31856_FAULT_TCHIGH",
        "faults",
        "_MAX31856_FAULT_TCLOW",
        "faults",
        "_MAX31856_FAULT_OVUV",
        "faults",
        "_MAX31856_FAULT_OPEN",
        "_write_u8",
        "_MAX31856_CJTO_REG",
        "_read_register",
        "_MAX31856_CR0_REG",
        "conf_reg_0",
        "_MAX31856_CR0_AUTOCONVERT",
        "conf_reg_0",
        "_MAX31856_CR0_1SHOT",
        "_write_u8",
        "_MAX31856_CR0_REG",
        "conf_reg_0",
        "sleep",
        "address",
        "length",
        "_device",
        "device",
        "_BUFFER",
        "address",
        "device",
        "write",
        "_BUFFER",
        "end",
        "device",
        "readinto",
        "_BUFFER",
        "end",
        "length",
        "_BUFFER",
        "address",
        "val",
        "_device",
        "device",
        "_BUFFER",
        "address",
        "_BUFFER",
        "val",
        "device",
        "write",
        "_BUFFER",
        "end"
    ],
    "literals": [
        "\"0.0.0-auto.0\"",
        "\"https://github.com/adafruit/Adafruit_CircuitPython_MAX31856.git\"",
        "\">i\"",
        "\">h\"",
        "\">h\"",
        "\">h\"",
        "\"b\"",
        "\"b\"",
        "\"cj_range\"",
        "\"tc_range\"",
        "\"cj_high\"",
        "\"cj_low\"",
        "\"tc_high\"",
        "\"tc_low\"",
        "\"voltage\"",
        "\"open_tc\""
    ],
    "variables": [
        "__version__",
        "__repo__",
        "_MAX31856_CR0_REG",
        "_MAX31856_CR0_AUTOCONVERT",
        "_MAX31856_CR0_1SHOT",
        "_MAX31856_CR0_OCFAULT1",
        "_MAX31856_CR0_OCFAULT0",
        "_MAX31856_CR0_CJ",
        "_MAX31856_CR0_FAULT",
        "_MAX31856_CR0_FAULTCLR",
        "_MAX31856_CR1_REG",
        "_MAX31856_MASK_REG",
        "_MAX31856_CJHF_REG",
        "_MAX31856_CJLF_REG",
        "_MAX31856_LTHFTH_REG",
        "_MAX31856_LTHFTL_REG",
        "_MAX31856_LTLFTH_REG",
        "_MAX31856_LTLFTL_REG",
        "_MAX31856_CJTO_REG",
        "_MAX31856_CJTH_REG",
        "_MAX31856_CJTL_REG",
        "_MAX31856_LTCBH_REG",
        "_MAX31856_LTCBM_REG",
        "_MAX31856_LTCBL_REG",
        "_MAX31856_SR_REG",
        "_MAX31856_FAULT_CJRANGE",
        "_MAX31856_FAULT_TCRANGE",
        "_MAX31856_FAULT_CJHIGH",
        "_MAX31856_FAULT_CJLOW",
        "_MAX31856_FAULT_TCHIGH",
        "_MAX31856_FAULT_TCLOW",
        "_MAX31856_FAULT_OVUV",
        "_MAX31856_FAULT_OPEN",
        "B",
        "E",
        "J",
        "K",
        "N",
        "R",
        "S",
        "T",
        "G8",
        "G32",
        "_BUFFER",
        "_device",
        "conf_reg_1",
        "raw_temp",
        "temp_float",
        "raw_read",
        "cold_junction_temp",
        "raw_low",
        "raw_high",
        "int_low",
        "int_high",
        "faults",
        "conf_reg_0"
    ],
    "comments": [
        "The MIT License (MIT)",
        "",
        "Copyright (c) 2018 Bryan Siepert for Adafruit Industries",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a copy",
        "of this software and associated documentation files (the \"Software\"), to deal",
        "in the Software without restriction, including without limitation the rights",
        "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
        "copies of the Software, and to permit persons to whom the Software is",
        "furnished to do so, subject to the following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included in",
        "all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
        "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
        "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
        "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
        "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
        "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
        "THE SOFTWARE.",
        "Register constants",
        "fault types",
        "pylint: disable=too-few-public-methods",
        "pylint: disable=invalid-name",
        "A class level buffer to reduce allocations for reading and writing.",
        "Tony says this isn't re-entrant or thread safe!",
        "assert on any fault",
        "configure open circuit faults",
        "set thermocouple type",
        "get current value of CR1 Reg",
        "mask off bottom 4 bits",
        "add the new value for the TC type",
        "unpack the 3-byte temperature as 4 bytes",
        "shift to remove extra byte from unpack needing 4 bytes",
        "effectively shift raw_read >> 12 to convert pseudo-float",
        "effectively shift raw_read >> 8 to convert pseudo-float",
        "pylint: disable=invalid-name",
        "pylint: disable=invalid-name",
        "read the current value of the first config register",
        "and the complement to guarantee the autoconvert bit is unset",
        "or the oneshot bit to ensure it is set",
        "write it back with the new values, prompting the sensor to perform a measurement",
        "pylint: disable=no-member",
        "Read a 16-bit BE unsigned value from the specified 8-bit address.",
        "Write an 8-bit unsigned value to the specified 8-bit address.",
        "pylint: disable=no-member"
    ],
    "docstrings": [
        "\"\"\"\n`MAX31856`\n====================================================\n\nCircuitPython module for the MAX31856 Universal Thermocouple Amplifier. See\nexamples/simpletest.py for an example of the usage.\n\n* Author(s): Bryan Siepert\n\nImplementation Notes\n--------------------\n\n**Hardware:**\n\n* Adafruit `Universal Thermocouple Amplifier MAX31856 Breakout\n  <https://www.adafruit.com/product/3263>`_ (Product ID: 3263)\n\n**Software and Dependencies:**\n\n* Adafruit CircuitPython firmware for the supported boards:\n  https://github.com/adafruit/circuitpython/releases\n\n* Adafruit's Bus Device library: https://github.com/adafruit/Adafruit_CircuitPython_BusDevice\n\"\"\"",
        "\"\"\"An enum-like class representing the different types of thermocouples that the MAX31856 can\n    use. The values can be referenced like ``ThermocoupleType.K`` or ``ThermocoupleType.S``\n    Possible values are\n\n    - ``ThermocoupleType.B``\n    - ``ThermocoupleType.E``\n    - ``ThermocoupleType.J``\n    - ``ThermocoupleType.K``\n    - ``ThermocoupleType.N``\n    - ``ThermocoupleType.R``\n    - ``ThermocoupleType.S``\n    - ``ThermocoupleType.T``\n\n    \"\"\"",
        "\"\"\"Driver for the MAX31856 Universal Thermocouple Amplifier\n\n      :param ~busio.SPI spi_bus: The SPI bus the MAX31856 is connected to.\n      :param ~microcontroller.Pin cs: The pin used for the CS signal.\n      :param ~adafruit_max31856.ThermocoupleType thermocouple_type: The type of thermocouple.\\\n      Default is Type K.\n\n    \"\"\"",
        "\"\"\"The temperature of the sensor and return its value in degrees celsius. (read-only)\"\"\"",
        "\"\"\"The temperature of the cold junction in degrees celsius. (read-only)\"\"\"",
        "\"\"\"The thermocouple's low and high temperature thresholds\n        as a ``(low_temp, high_temp)`` tuple\n        \"\"\"",
        "\"\"\"The cold junction's low and high temperature thresholds\n        as a ``(low_temp, high_temp)`` tuple\n        \"\"\"",
        "\"\"\"A dictionary with the status of each fault type where the key is the fault type and the\n        value is a bool if the fault is currently active\n\n        ===================   =================================\n        Key                   Fault type\n        ===================   =================================\n        \"cj_range\"            Cold junction range fault\n        \"tc_range\"            Thermocouple range fault\n        \"cj_high\"             Cold junction high threshold fault\n        \"cj_low\"              Cold junction low threshold fault\n        \"tc_high\"             Thermocouple high threshold fault\n        \"tc_low\"              Thermocouple low threshold fault\n        \"voltage\"             Over/under voltage fault\n        \"open_tc\"             Thermocouple open circuit fault\n        ===================   =================================\n\n        \"\"\""
    ],
    "functions": [
        "temperature",
        "reference_temperature",
        "temperature_thresholds",
        "temperature_thresholds",
        "reference_temperature_thresholds",
        "reference_temperature_thresholds",
        "fault",
        "_perform_one_shot_measurement",
        "_read_register",
        "_write_u8"
    ],
    "classes": [
        "ThermocoupleType",
        "MAX31856"
    ]
}