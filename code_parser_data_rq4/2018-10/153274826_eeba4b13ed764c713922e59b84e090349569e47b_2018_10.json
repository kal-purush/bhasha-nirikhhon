{
    "identifiers": [
        "at",
        "htl",
        "library",
        "org",
        "apache",
        "derby",
        "client",
        "am",
        "org",
        "junit",
        "AfterClass",
        "org",
        "junit",
        "BeforeClass",
        "org",
        "junit",
        "Test",
        "java",
        "sql",
        "org",
        "hamcrest",
        "CoreMatchers",
        "org",
        "hamcrest",
        "MatcherAssert",
        "assertThat",
        "DRIVER_STRING",
        "CONNECTION_STRING",
        "USER",
        "PASSWORD",
        "conn",
        "BeforeClass",
        "Class",
        "forName",
        "DRIVER_STRING",
        "conn",
        "DriverManager",
        "getConnection",
        "CONNECTION_STRING",
        "USER",
        "PASSWORD",
        "e",
        "e",
        "printStackTrace",
        "e",
        "e",
        "getMessage",
        "exit",
        "stmt",
        "conn",
        "createStatement",
        "sql",
        "stmt",
        "execute",
        "sql",
        "sql",
        "stmt",
        "execute",
        "sql",
        "e",
        "e",
        "printStackTrace",
        "Test",
        "countInserts",
        "stmt",
        "conn",
        "createStatement",
        "sql",
        "countInserts",
        "stmt",
        "executeUpdate",
        "sql",
        "sql",
        "countInserts",
        "stmt",
        "executeUpdate",
        "sql",
        "sql",
        "countInserts",
        "stmt",
        "executeUpdate",
        "sql",
        "sql",
        "countInserts",
        "stmt",
        "executeUpdate",
        "sql",
        "sql",
        "countInserts",
        "stmt",
        "executeUpdate",
        "sql",
        "e",
        "e",
        "printStackTrace",
        "assertThat",
        "countInserts",
        "pstmt",
        "conn",
        "prepareStatement",
        "rs",
        "pstmt",
        "executeQuery",
        "rs",
        "next",
        "assertThat",
        "rs",
        "getString",
        "assertThat",
        "rs",
        "getString",
        "assertThat",
        "rs",
        "getDouble",
        "rs",
        "next",
        "assertThat",
        "rs",
        "getString",
        "assertThat",
        "rs",
        "getString",
        "assertThat",
        "rs",
        "getDouble",
        "e",
        "e",
        "printStackTrace",
        "pstmt",
        "conn",
        "prepareStatement",
        "rs",
        "pstmt",
        "executeQuery",
        "rs",
        "next",
        "assertThat",
        "rs",
        "getInt",
        "assertThat",
        "rs",
        "getString",
        "rs",
        "next",
        "assertThat",
        "rs",
        "getInt",
        "assertThat",
        "rs",
        "getString",
        "rs",
        "next",
        "assertThat",
        "rs",
        "getInt",
        "assertThat",
        "rs",
        "getString",
        "rs",
        "next",
        "e",
        "e",
        "printStackTrace",
        "Test",
        "stmt",
        "stmt",
        "conn",
        "createStatement",
        "rs",
        "stmt",
        "executeQuery",
        "rsmd",
        "rs",
        "getMetaData",
        "assertThat",
        "rsmd",
        "getColumnCount",
        "assertThat",
        "rsmd",
        "getColumnName",
        "assertThat",
        "rsmd",
        "getColumnName",
        "assertThat",
        "rsmd",
        "getColumnName",
        "assertThat",
        "rsmd",
        "getColumnName",
        "assertThat",
        "rsmd",
        "getColumnTypeName",
        "assertThat",
        "rsmd",
        "getColumnTypeName",
        "assertThat",
        "rsmd",
        "getColumnTypeName",
        "assertThat",
        "rsmd",
        "getColumnTypeName",
        "e",
        "e",
        "printStackTrace",
        "stmt",
        "conn",
        "createStatement",
        "rs",
        "stmt",
        "executeQuery",
        "rsmd",
        "rs",
        "getMetaData",
        "assertThat",
        "rsmd",
        "getColumnCount",
        "assertThat",
        "rsmd",
        "getColumnName",
        "assertThat",
        "rsmd",
        "getColumnName",
        "assertThat",
        "rsmd",
        "getColumnName",
        "assertThat",
        "rsmd",
        "getColumnTypeName",
        "assertThat",
        "rsmd",
        "getColumnTypeName",
        "assertThat",
        "rsmd",
        "getColumnTypeName",
        "dbmd",
        "conn",
        "getMetaData",
        "e",
        "e",
        "printStackTrace",
        "stmt",
        "conn",
        "createStatement",
        "rs",
        "stmt",
        "executeQuery",
        "rs",
        "next",
        "assertThat",
        "rs",
        "getString",
        "e",
        "e",
        "printStackTrace",
        "stmt",
        "conn",
        "createStatement",
        "rs",
        "stmt",
        "executeQuery",
        "rs",
        "next",
        "assertThat",
        "rs",
        "getString",
        "rs",
        "next",
        "assertThat",
        "rs",
        "getString",
        "e",
        "e",
        "printStackTrace",
        "AfterClass",
        "conn",
        "createStatement",
        "execute",
        "e",
        "e",
        "getMessage",
        "conn",
        "createStatement",
        "execute",
        "e",
        "e",
        "getMessage",
        "conn",
        "conn",
        "isClosed",
        "conn",
        "close",
        "e",
        "e",
        "printStackTrace"
    ],
    "literals": [
        "\"org.apache.derby.jdbc.ClientDriver\"",
        "\"jdbc:derby://localhost:1527/db;create=true\"",
        "\"app\"",
        "\"app\"",
        "\"Verbindung zur Datenbank nicht möglich:\\n\"",
        "\"\\n\"",
        "\"CREATE TABLE BOOK (\"",
        "\"id int constraint book_pk primary key generated always as identity (start with 1, increment by 1),\"",
        "\"title varchar(255) not null,\"",
        "\"author varchar(255) not null,\"",
        "\"price double not null)\"",
        "\"CREATE TABLE Exemplar (\"",
        "\"id int constraint exemplar_pk primary key generated always as identity (start with 1, increment by 1),\"",
        "\"book_id int constraint book_fk references book ,\"",
        "\"condition varchar(255) not null)\"",
        "\"INSERT INTO book (title,author,price) values ('Lord of the Rings','J.R.R. Tolkien',25.00)\"",
        "\"INSERT INTO book (title,author,price) values ('The Hobbit','J.R.R. Tolkien',10.00)\"",
        "\"INSERT INTO exemplar (book_id,condition) values (1,'damaged')\"",
        "\"INSERT INTO exemplar (book_id,condition) values (1,'new')\"",
        "\"INSERT INTO exemplar (book_id,condition) values (2,'damaged')\"",
        "\"Select id,title,author,price from book\"",
        "\"title\"",
        "\"Lord of the Rings\"",
        "\"author\"",
        "\"J.R.R. Tolkien\"",
        "\"price\"",
        "\"title\"",
        "\"The Hobbit\"",
        "\"author\"",
        "\"J.R.R. Tolkien\"",
        "\"price\"",
        "\"Select id,book_id,condition from exemplar\"",
        "\"book_id\"",
        "\"condition\"",
        "\"damaged\"",
        "\"book_id\"",
        "\"condition\"",
        "\"new\"",
        "\"book_id\"",
        "\"condition\"",
        "\"damaged\"",
        "\"Select * from book\"",
        "\"ID\"",
        "\"TITLE\"",
        "\"AUTHOR\"",
        "\"PRICE\"",
        "\"INTEGER\"",
        "\"VARCHAR\"",
        "\"VARCHAR\"",
        "\"DOUBLE\"",
        "\"Select * from Exemplar\"",
        "\"ID\"",
        "\"BOOK_ID\"",
        "\"CONDITION\"",
        "\"INTEGER\"",
        "\"INTEGER\"",
        "\"VARCHAR\"",
        "\"select c.constraintname, c.constraintid \"",
        "\"from sys.sysconstraints c, sys.systables t \"",
        "\"where t.tableid=c.tableid \"",
        "\"and t.tablename='BOOK'\"",
        "\"BOOK_PK\"",
        "\"select c.constraintname, c.constraintid \"",
        "\"from sys.sysconstraints c, sys.systables t \"",
        "\"where t.tableid=c.tableid \"",
        "\"and t.tablename='EXEMPLAR'\"",
        "\"EXEMPLAR_PK\"",
        "\"BOOK_FK\"",
        "\"DROP TABLE Exemplar\"",
        "\"Tabelle exemplar gelöscht\"",
        "\"Tabelle exemplar konnte nicht gelöscht werden:\\n\"",
        "\"\\n\"",
        "\"DROP TABLE book\"",
        "\"Tabelle book gelöscht\"",
        "\"Tabelle book konnte nicht gelöscht werden:\\n\"",
        "\"\\n\"",
        "\"Goodbye\""
    ],
    "variables": [
        "conn"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [
        "initJdbc",
        "dml",
        "metadata",
        "teardownJdbc"
    ],
    "classes": [
        "LibraryTest"
    ]
}