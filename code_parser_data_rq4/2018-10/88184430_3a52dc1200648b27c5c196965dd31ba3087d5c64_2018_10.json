{
    "identifiers": [
        "inject",
        "ComponentFixture",
        "TestBed",
        "NgModule",
        "Component",
        "ViewChild",
        "ViewChildren",
        "QueryList",
        "ViewContainerRef",
        "ComponentFactoryResolver",
        "Optional",
        "Injector",
        "ApplicationRef",
        "TemplateRef",
        "ComponentRef",
        "CommonModule",
        "DomPortalOutlet",
        "Portal",
        "ComponentPortal",
        "TemplatePortal",
        "CdkPortal",
        "CdkPortalOutlet",
        "PortalModule",
        "describe",
        "beforeEach",
        "TestBed",
        "PortalModule",
        "PortalTestModule",
        "describe",
        "beforeEach",
        "fixture",
        "TestBed",
        "PortalTestApp",
        "it",
        "fixture",
        "ComponentPortal",
        "PizzaMsg",
        "fixture",
        "testAppComponent",
        "componentPortal",
        "fixture",
        "expect",
        "hostContainer",
        "expect",
        "testAppComponent",
        "componentPortal",
        "expect",
        "testAppComponent",
        "ComponentRef",
        "expect",
        "testAppComponent",
        "testAppComponent",
        "it",
        "fixture",
        "fixture",
        "TemplatePortal",
        "testAppComponent",
        "testAppComponent",
        "templatePortal",
        "fixture",
        "expect",
        "hostContainer",
        "expect",
        "testAppComponent",
        "templatePortal",
        "expect",
        "testAppComponent",
        "ComponentRef",
        "expect",
        "testAppComponent",
        "expect",
        "testAppComponent",
        "testAppComponent",
        "it",
        "fixture",
        "fixture",
        "TemplatePortal",
        "testAppComponent",
        "testAppComponent",
        "templatePortal",
        "fixture",
        "expect",
        "hostContainer",
        "testAppComponent",
        "fixture",
        "templatePortal",
        "testAppComponent",
        "fixture",
        "expect",
        "hostContainer",
        "templatePortal",
        "TemplatePortal",
        "testAppComponent",
        "testAppComponent",
        "templatePortal",
        "fixture",
        "expect",
        "hostContainer",
        "testAppComponent",
        "fixture",
        "templatePortal",
        "testAppComponent",
        "fixture",
        "expect",
        "hostContainer",
        "it",
        "fixture",
        "testAppComponent",
        "ComponentPortal",
        "PizzaMsg",
        "fixture",
        "expect",
        "testAppComponent",
        "fixture",
        "expect",
        "testAppComponent",
        "it",
        "ChocolateInjector",
        "fixture",
        "fixture",
        "testAppComponent",
        "ComponentPortal",
        "PizzaMsg",
        "chocolateInjector",
        "fixture",
        "fixture",
        "expect",
        "hostContainer",
        "expect",
        "hostContainer",
        "it",
        "fixture",
        "fixture",
        "testAppComponent",
        "testAppComponent",
        "fixture",
        "fixture",
        "expect",
        "hostContainer",
        "it",
        "fixture",
        "fixture",
        "testAppComponent",
        "testAppComponent",
        "fixture",
        "fixture",
        "expect",
        "hostContainer",
        "it",
        "fixture",
        "fixture",
        "testAppComponent",
        "testAppComponent",
        "fixture",
        "fixture",
        "expect",
        "hostContainer",
        "testAppComponent",
        "fixture",
        "expect",
        "hostContainer",
        "it",
        "fixture",
        "fixture",
        "testAppComponent",
        "testAppComponent",
        "fixture",
        "fixture",
        "expect",
        "hostContainer",
        "testAppComponent",
        "fixture",
        "expect",
        "hostContainer",
        "it",
        "fixture",
        "fixture",
        "testAppComponent",
        "testAppComponent",
        "fixture",
        "fixture",
        "expect",
        "hostContainer",
        "testAppComponent",
        "ComponentPortal",
        "PizzaMsg",
        "fixture",
        "expect",
        "hostContainer",
        "it",
        "fixture",
        "testAppComponent",
        "ComponentPortal",
        "PizzaMsg",
        "fixture",
        "expect",
        "testAppComponent",
        "expect",
        "testAppComponent",
        "testAppComponent",
        "testAppComponent",
        "fixture",
        "expect",
        "testAppComponent",
        "expect",
        "testAppComponent",
        "it",
        "fixture",
        "ComponentPortal",
        "PizzaMsg",
        "testAppComponent",
        "portal",
        "expect",
        "testAppComponent",
        "portal",
        "it",
        "fixture",
        "fixture",
        "testAppComponent",
        "testAppComponent",
        "expect",
        "testAppComponent",
        "testAppComponent",
        "it",
        "fixture",
        "testAppComponent",
        "ComponentPortal",
        "PizzaMsg",
        "fixture",
        "expect",
        "testAppComponent",
        "fixture",
        "expect",
        "testAppComponent",
        "it",
        "fixture",
        "TestBed",
        "UnboundPortalTestApp",
        "unboundFixture",
        "ComponentPortal",
        "PizzaMsg",
        "unboundFixture",
        "expect",
        "unboundFixture",
        "it",
        "expect",
        "fixture",
        "fixture",
        "ComponentPortal",
        "PizzaMsg",
        "expect",
        "fixture",
        "it",
        "expect",
        "fixture",
        "fixture",
        "ComponentPortal",
        "PizzaMsg",
        "expect",
        "fixture",
        "it",
        "fixture",
        "expect",
        "instance",
        "instance",
        "TemplatePortal",
        "instance",
        "expect",
        "instance",
        "describe",
        "ComponentFactoryResolver",
        "Injector",
        "ApplicationRef",
        "beforeEach",
        "inject",
        "deps",
        "dcl",
        "i",
        "ar",
        "componentFactoryResolver",
        "dcl",
        "injector",
        "i",
        "appRef",
        "ar",
        "beforeEach",
        "someDomElement",
        "host",
        "DomPortalOutlet",
        "someDomElement",
        "componentFactoryResolver",
        "appRef",
        "injector",
        "someFixture",
        "TestBed",
        "ArbitraryViewContainerRefComponent",
        "someViewContainerRef",
        "someFixture",
        "someInjector",
        "someFixture",
        "it",
        "ComponentPortal",
        "PizzaMsg",
        "someViewContainerRef",
        "portal",
        "host",
        "expect",
        "componentInstance",
        "PizzaMsg",
        "expect",
        "someDomElement",
        "host",
        "expect",
        "someDomElement",
        "it",
        "TestBed",
        "ArbitraryViewContainerRefComponent",
        "someViewContainerRef",
        "fixture",
        "someInjector",
        "fixture",
        "ChocolateInjector",
        "someInjector",
        "ComponentPortal",
        "PizzaMsg",
        "someViewContainerRef",
        "chocolateInjector",
        "portal",
        "host",
        "fixture",
        "expect",
        "componentInstance",
        "PizzaMsg",
        "expect",
        "someDomElement",
        "expect",
        "someDomElement",
        "host",
        "expect",
        "someDomElement",
        "it",
        "TestBed",
        "PortalTestApp",
        "fixture",
        "fixture",
        "host",
        "expect",
        "someDomElement",
        "it",
        "TestBed",
        "PortalTestApp",
        "fixture",
        "fixture",
        "host",
        "expect",
        "someDomElement",
        "it",
        "TestBed",
        "PortalTestApp",
        "fixture",
        "fixture",
        "testAppComponent",
        "host",
        "fixture",
        "fixture",
        "expect",
        "someDomElement",
        "testAppComponent",
        "fixture",
        "expect",
        "someDomElement",
        "host",
        "expect",
        "someDomElement",
        "it",
        "TestBed",
        "ArbitraryViewContainerRefComponent",
        "someViewContainerRef",
        "fixture",
        "TestBed",
        "PortalTestApp",
        "appFixture",
        "appFixture",
        "host",
        "expect",
        "someDomElement",
        "host",
        "host",
        "ComponentPortal",
        "PizzaMsg",
        "someViewContainerRef",
        "expect",
        "someDomElement",
        "it",
        "ComponentPortal",
        "PizzaMsg",
        "portal",
        "host",
        "expect",
        "componentInstance",
        "PizzaMsg",
        "expect",
        "someDomElement",
        "componentInstance",
        "Chocolate",
        "someFixture",
        "expect",
        "someDomElement",
        "host",
        "expect",
        "someDomElement",
        "it",
        "jasmine",
        "expect",
        "host",
        "host",
        "spy",
        "host",
        "expect",
        "spy",
        "it",
        "jasmine",
        "ComponentPortal",
        "PizzaMsg",
        "args",
        "spy",
        "componentFactoryResolver",
        "componentFactoryResolver",
        "args",
        "host",
        "portal",
        "expect",
        "spy",
        "parentInjector",
        "token",
        "token",
        "Chocolate",
        "Chocolate",
        "token",
        "Component",
        "Optional",
        "snack",
        "Component",
        "viewContainerRef",
        "injector",
        "Component",
        "ViewChildren",
        "CdkPortal",
        "ViewChild",
        "CdkPortalOutlet",
        "ViewChild",
        "TemplateRef",
        "jasmine",
        "injector",
        "Component",
        "ViewChild",
        "CdkPortalOutlet",
        "PortalTestApp",
        "UnboundPortalTestApp",
        "ArbitraryViewContainerRefComponent",
        "PizzaMsg",
        "NgModule",
        "CommonModule",
        "PortalModule",
        "TEST_COMPONENTS",
        "TEST_COMPONENTS",
        "TEST_COMPONENTS"
    ],
    "literals": [
        "'@angular/core/testing'",
        "'@angular/core'",
        "'@angular/common'",
        "'@angular-mdc/web'",
        "'Portals'",
        "'CdkPortalOutlet'",
        "'should load a component into the portal'",
        "'.portal-container'",
        "'Pizza'",
        "'should load a template into the portal'",
        "'.portal-container'",
        "'Banana'",
        "'should project template context bindings in the portal'",
        "'.portal-container'",
        "'Banana - !'",
        "'rotten'",
        "'Banana - rotten!'",
        "'fresh'",
        "'Banana - fresh!'",
        "'rotten'",
        "'Banana - rotten!'",
        "'should dispose the host when destroyed'",
        "'should load a component into the portal with a given injector'",
        "'.portal-container'",
        "'Pizza'",
        "'Chocolate'",
        "'should load a <ng-template> portal'",
        "'.portal-container'",
        "'Cake'",
        "'should load a <ng-template> portal with the `*` sugar'",
        "'.portal-container'",
        "'Pie'",
        "'should load a <ng-template> portal with a binding'",
        "'.portal-container'",
        "'Banana'",
        "'Mango'",
        "'Mango'",
        "'should load a <ng-template> portal with an inner template'",
        "'.portal-container'",
        "'Pineapple'",
        "'Mangosteen'",
        "'Mangosteen'",
        "'should change the attached portal'",
        "'.portal-container'",
        "'Pie'",
        "'Pizza'",
        "'should detach the portal when it is set to null'",
        "'should set the `portal` when attaching a component portal programmatically'",
        "'should set the `portal` when attaching a template portal programmatically'",
        "'should clear the portal reference on destroy'",
        "'should not clear programmatically-attached portals on init'",
        "'.portal-container'",
        "'Pizza'",
        "'should be considered attached when attaching using `attach`'",
        "'should be considered attached when attaching using `attachComponentPortal`'",
        "'should be considered attached when attaching using `attachTemplatePortal`'",
        "'DomPortalOutlet'",
        "'div'",
        "'should attach and detach a component portal'",
        "'Pizza'",
        "''",
        "'should attach and detach a component portal with a given injector'",
        "'Pizza'",
        "'Chocolate'",
        "''",
        "'should attach and detach a template portal'",
        "'Cake'",
        "'should render a template portal with an inner template'",
        "'Durian'",
        "'should attach and detach a template portal with a binding'",
        "'fresh'",
        "'Banana - fresh'",
        "'Mango'",
        "'Mango'",
        "''",
        "'should change the attached portal'",
        "'Pie'",
        "'Pizza'",
        "'should attach and detach a component portal without a ViewContainerRef'",
        "'Expected a PizzaMsg component to be created'",
        "'Pizza'",
        "'Expected the static string \"Pizza\" in the DomPortalOutlet.'",
        "'Chocolate'",
        "'Expected the bound string \"Chocolate\" in the DomPortalOutlet'",
        "''",
        "'Expected the DomPortalOutlet to be empty after detach'",
        "'should call the dispose function even if the host has no attached content'",
        "'host dispose spy'",
        "'Expected host not to have attached content.'",
        "'should use the `ComponentFactoryResolver` from the portal, if available'",
        "'resolveComponentFactorySpy'",
        "'Chocolate'",
        "'pizza-msg'",
        "'<p>Pizza</p><p>{{snack}}</p>'",
        "'some-placeholder'",
        "'<p>Hello</p>'",
        "'portal-test'",
        "<div class=\"portal-container\">\n    <ng-template [cdkPortalOutlet]=\"selectedPortal\" (attached)=\"attachedSpy($event)\"></ng-template>\n  </div>\n\n  <ng-template cdk-portal>Cake</ng-template>\n\n  <div *cdk-portal>Pie</div>\n  <ng-template cdk-portal let-data> {{fruit}} - {{ data?.status }} </ng-template>\n\n  <ng-template cdk-portal>\n    <ul>\n      <li *ngFor=\"let fruitName of fruits\"> {{fruitName}} </li>\n    </ul>\n  </ng-template>\n\n  <ng-template #templateRef let-data> {{fruit}} - {{ data?.status }}!</ng-template>",
        "'templateRef'",
        "string",
        "'Banana'",
        "'Apple'",
        "'Pineapple'",
        "'Durian'",
        "'attached spy'",
        "<div class=\"portal-container\">\n      <ng-template cdkPortalOutlet></ng-template>\n    </div>"
    ],
    "variables": [
        "fixture",
        "testAppComponent",
        "componentPortal",
        "hostContainer",
        "testAppComponent",
        "hostContainer",
        "templatePortal",
        "testAppComponent",
        "hostContainer",
        "templatePortal",
        "testAppComponent",
        "chocolateInjector",
        "testAppComponent",
        "hostContainer",
        "testAppComponent",
        "hostContainer",
        "testAppComponent",
        "hostContainer",
        "testAppComponent",
        "hostContainer",
        "testAppComponent",
        "hostContainer",
        "testAppComponent",
        "hostContainer",
        "testAppComponent",
        "testAppComponent",
        "portal",
        "testAppComponent",
        "testAppComponent",
        "unboundFixture",
        "instance",
        "componentFactoryResolver",
        "someViewContainerRef",
        "someInjector",
        "someFixture",
        "someDomElement",
        "host",
        "injector",
        "appRef",
        "deps",
        "portal",
        "componentInstance",
        "fixture",
        "chocolateInjector",
        "portal",
        "componentInstance",
        "fixture",
        "fixture",
        "fixture",
        "testAppComponent",
        "fixture",
        "appFixture",
        "portal",
        "componentInstance",
        "spy",
        "spy",
        "portal",
        "TEST_COMPONENTS"
    ],
    "comments": [
        "Set the selectedHost to be a ComponentPortal.",
        "Expect that the content of the attached portal is present.",
        "Expect that the content of the attached portal is present and no context is projected",
        "We can't test whether it's an instance of an `EmbeddedViewRef` so",
        "we verify that it's defined and that it's not a ComponentRef.",
        "TemplatePortal without context:",
        "Expect that the content of the attached portal is present and NO context is projected",
        "using TemplatePortal.attach method to set context",
        "Expect that the content of the attached portal is present and context given via the",
        "attach method is projected",
        "using TemplatePortal constructor to set the context",
        "Expect that the content of the attached portal is present and context given via the",
        "constructor is projected",
        "using TemplatePortal constructor to set the context but also calling attach method with",
        "context, the latter should take precedence:",
        "Expect that the content of the attached portal is present and and context given via the",
        "attach method is projected and get precedence over constructor context",
        "Set the selectedHost to be a ComponentPortal.",
        "Create a custom injector for the component.",
        "Set the selectedHost to be a ComponentPortal.",
        "Expect that the content of the attached portal is present.",
        "Detect changes initially so that the component's ViewChildren are resolved.",
        "Set the selectedHost to be a TemplatePortal.",
        "Expect that the content of the attached portal is present.",
        "Detect changes initially so that the component's ViewChildren are resolved.",
        "Set the selectedHost to be a TemplatePortal (with the `*` syntax).",
        "Expect that the content of the attached portal is present.",
        "Detect changes initially so that the component's ViewChildren are resolved.",
        "Set the selectedHost to be a TemplatePortal.",
        "Expect that the content of the attached portal is present.",
        "When updating the binding value.",
        "Expect the new value to be reflected in the rendered output.",
        "Detect changes initially so that the component's ViewChildren are resolved.",
        "Set the selectedHost to be a TemplatePortal.",
        "Expect that the content of the attached portal is present.",
        "When updating the binding value.",
        "Expect the new value to be reflected in the rendered output.",
        "Detect changes initially so that the component's ViewChildren are resolved.",
        "Set the selectedHost to be a ComponentPortal.",
        "Expect that the content of the attached portal is present.",
        "Note: calling `detectChanges` here will cause a false positive.",
        "What we're testing is attaching before the first CD cycle.",
        "Detect changes initially so that the component's ViewChildren are resolved.",
        "Attach the TemplatePortal.",
        "Now that the portal is attached, change detection has to happen again in order",
        "for the bindings to update.",
        "Expect that the content of the attached portal is present.",
        "When updating the binding value.",
        "Expect the new value to be reflected in the rendered output.",
        "Simple component for testing ComponentPortal.",
        "Simple component to grab an arbitrary ViewContainerRef",
        "Test-bed component that contains a portal outlet and a couple of template portals.",
        "Test-bed component that contains a portal outlet and a couple of template portals.",
        "Create a real (non-test) NgModule as a workaround for",
        "https://github.com/angular/angular/issues/10760"
    ],
    "docstrings": [],
    "functions": [
        "toString",
        "get",
        "cakePortal",
        "piePortal",
        "portalWithBinding",
        "portalWithTemplate"
    ],
    "classes": [
        "Chocolate",
        "ChocolateInjector",
        "PizzaMsg",
        "ArbitraryViewContainerRefComponent",
        "PortalTestApp",
        "UnboundPortalTestApp",
        "PortalTestModule"
    ]
}