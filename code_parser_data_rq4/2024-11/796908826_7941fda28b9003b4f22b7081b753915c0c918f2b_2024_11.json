{
    "identifiers": [
        "mesa",
        "mesa",
        "space",
        "MultiGrid",
        "numpy",
        "np",
        "seaborn",
        "sns",
        "mesa",
        "Model",
        "n",
        "width",
        "height",
        "dataStructure",
        "seed",
        "seed",
        "seed",
        "n",
        "mesa",
        "space",
        "PropertyLayer",
        "width",
        "height",
        "default_value",
        "np",
        "float64",
        "mesa",
        "space",
        "PropertyLayer",
        "width",
        "height",
        "default_value",
        "np",
        "float64",
        "mesa",
        "space",
        "PropertyLayer",
        "width",
        "height",
        "default_value",
        "np",
        "float64",
        "mesa",
        "space",
        "PropertyLayer",
        "width",
        "height",
        "default_value",
        "np",
        "float64",
        "mesa",
        "space",
        "PropertyLayer",
        "width",
        "height",
        "default_value",
        "np",
        "float64",
        "mesa",
        "space",
        "PropertyLayer",
        "width",
        "height",
        "default_value",
        "np",
        "float64",
        "mesa",
        "space",
        "MultiGrid",
        "width",
        "height",
        "buildingLayer",
        "trafficLightLayer",
        "parkingLayer",
        "roundAboutLayer",
        "RightLayer",
        "LeftLayer",
        "UpLayer",
        "DownLayer",
        "coordinateStructurePositions",
        "set_buildingsLayer",
        "coordinateStructurePositions",
        "set_traffic_lightsLayer",
        "coordinateStructurePositions",
        "set_parking_lotsLayer",
        "coordinateStructurePositions",
        "set_round_aboutsLayer",
        "coordinateStructurePositions",
        "set_right_Layer",
        "coordinateStructurePositions",
        "set_left_Layer",
        "coordinateStructurePositions",
        "buildingsArray",
        "x",
        "y",
        "buildingsArray",
        "grid",
        "properties",
        "set_cell",
        "x",
        "y",
        "coordinateStructurePositions",
        "x",
        "y",
        "value",
        "coordinateStructurePositions",
        "grid",
        "properties",
        "set_cell",
        "x",
        "y",
        "value",
        "coordinateStructurePositions",
        "x",
        "y",
        "value",
        "coordinateStructurePositions",
        "grid",
        "properties",
        "set_cell",
        "x",
        "y",
        "value",
        "coordinateStructurePositions",
        "x",
        "y",
        "coordinateStructurePositions",
        "grid",
        "properties",
        "set_cell",
        "x",
        "y",
        "coordinateStructurePositions",
        "x",
        "y",
        "coordinateStructurePositions",
        "grid",
        "properties",
        "set_cell",
        "x",
        "y",
        "coordinateStructurePositions",
        "x",
        "y",
        "coordinateStructurePositions",
        "grid",
        "properties",
        "set_cell",
        "x",
        "y",
        "set_Data_Structures",
        "dataStructure",
        "grid",
        "properties",
        "data",
        "grid",
        "properties",
        "data",
        "grid",
        "properties",
        "data",
        "grid",
        "properties",
        "data",
        "grid",
        "properties",
        "data",
        "grid",
        "properties",
        "data",
        "mesa",
        "Agent",
        "model",
        "startPosition",
        "isParked",
        "destinationPosition",
        "model",
        "model",
        "startPosition",
        "isParked",
        "model",
        "grid",
        "get_neighbors",
        "pos",
        "moore",
        "include_center",
        "radius",
        "neighbor_pos",
        "neighbors",
        "isinstance",
        "agent",
        "CarAgent",
        "agent",
        "model",
        "grid",
        "get_cell_list_contents",
        "neighbor_pos",
        "model",
        "grid",
        "move_agent",
        "neighbor_pos",
        "found_parking_spot",
        "found_parking_spot",
        "radius",
        "model",
        "grid",
        "get_neighbors",
        "pos",
        "moore",
        "include_center",
        "radius",
        "radius",
        "neighbor_pos",
        "extended_neighbors",
        "isinstance",
        "agent",
        "CarAgent",
        "agent",
        "model",
        "grid",
        "get_cell_list_contents",
        "neighbor_pos",
        "model",
        "grid",
        "move_agent",
        "neighbor_pos",
        "radius",
        "move",
        "mesa",
        "Agent",
        "model",
        "status",
        "model",
        "status",
        "state",
        "clock",
        "clock",
        "change_light",
        "CityModel",
        "coordinateStructures"
    ],
    "literals": [
        "\"Buildings\"",
        "\"Parking_Lots\"",
        "\"Semaphores\"",
        "\"Round_Abouts\"",
        "\"Right\"",
        "\"Left\"",
        "\"buildingLayer\"",
        "\"trafficLightLayer\"",
        "\"parkingLayer\"",
        "\"roundAboutLayer\"",
        "\"RightLayer\"",
        "\"LeftLayer\"",
        "\"Buildings\"",
        "\"Semaphores\"",
        "\"Parking_Lots\"",
        "\"Round_Abouts\"",
        "\"Right\"",
        "\"Left\"",
        "\"buildingLayer\"",
        "\"trafficLightLayer\"",
        "\"parkingLayer\"",
        "\"roundAboutLayer\"",
        "\"RightLayer\"",
        "\"LeftLayer\"",
        "\"Building Layer Data:\"",
        "\"buildingLayer\"",
        "\"Traffic Layer Data:\"",
        "\"trafficLightLayer\"",
        "\"Parking Layer Data:\"",
        "\"parkingLayer\"",
        "\"Roundabout Layer Data:\"",
        "\"roundAboutLayer\"",
        "\"Right Layer Data:\"",
        "\"RightLayer\"",
        "\"Left Layer Data:\"",
        "\"LeftLayer\""
    ],
    "variables": [
        "coordinateStructures",
        "num_Cars",
        "buildingLayer",
        "trafficLightLayer",
        "parkingLayer",
        "roundAboutLayer",
        "RightLayer",
        "LeftLayer",
        "grid",
        "startPosition",
        "isParked",
        "destination",
        "neighbors",
        "found_parking_spot",
        "isParked",
        "found_parking_spot",
        "radius",
        "extended_neighbors",
        "isParked",
        "found_parking_spot",
        "state",
        "clock",
        "state",
        "state",
        "clock",
        "model"
    ],
    "comments": [
        "Hola Mundo COmo estan",
        "might be deleted",
        "movement layers",
        "movement layers",
        "movement layers",
        "si va este valor?",
        "movement layers",
        "Decide which position the car starts, will be done in the model.",
        "self.pos = start_pos",
        "Park implementar",
        "moore property",
        "The decision to move will always happen, just how it's going to work, will be",
        "Diff for the",
        "Modify the property grid"
    ],
    "docstrings": [
        "'''\n      Possible PSEUDOCODE:\n\n      1. Check if car is parked:\n        If the car is parked and doesn't need to move we don't advance the movement.\n\n      2. Check for Semaphore near you.\n        IF there is and it's green we can continue.\n        If not we don't advance.\n\n      3. Check for any car that is in front or right,left...:\n        If there is no car in front or right,left:\n      '''",
        "'''\n      Would only change the variables property.\n      '''",
        "'''\nDepending on how me want to work with the information and the sempahore:\nAKA Use just bool or have red,green,yellow\nEach approach would be different.\nThe following approach will be with bool:\n'''"
    ],
    "functions": [
        "set_Data_Structures",
        "set_buildingsLayer",
        "set_traffic_lightsLayer",
        "set_parking_lotsLayer",
        "set_round_aboutsLayer",
        "set_right_Layer",
        "set_left_Layer",
        "move",
        "park",
        "step",
        "change_light",
        "step"
    ],
    "classes": [
        "CityModel",
        "CarAgent",
        "TrafficLightAgent"
    ]
}