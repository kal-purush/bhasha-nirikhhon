{
    "identifiers": [
        "Clave",
        "Expressionify",
        "Generator",
        "Internals",
        "Microsoft",
        "CodeAnalysis",
        "Microsoft",
        "CodeAnalysis",
        "CSharp",
        "Microsoft",
        "CodeAnalysis",
        "CSharp",
        "Syntax",
        "Microsoft",
        "CodeAnalysis",
        "Text",
        "CSharpSyntaxRewriter",
        "Compilation",
        "compilation",
        "SyntaxNode",
        "root",
        "_compilation",
        "compilation",
        "_root",
        "root",
        "ExpressionSyntax",
        "expression",
        "ExpressionSyntax",
        "Visit",
        "expression",
        "SyntaxNode",
        "node",
        "Visit",
        "node",
        "SyntaxFactory",
        "AreEquivalent",
        "node",
        "res",
        "res",
        "_root",
        "ReplaceNode",
        "node",
        "res",
        "FindNode",
        "TextSpan",
        "node",
        "FullSpan",
        "Start",
        "res",
        "FullSpan",
        "Length",
        "SyntaxNode",
        "ConditionalAccessExpressionSyntax",
        "node",
        "Visit",
        "node",
        "Expression",
        "_compilation",
        "ReplaceSyntaxTree",
        "_root",
        "SyntaxTree",
        "expression",
        "SyntaxTree",
        "GetSemanticModel",
        "expression",
        "SyntaxTree",
        "GetTypeInfo",
        "expression",
        "Type",
        "expressionType",
        "INamedTypeSymbol",
        "IsValueType",
        "OriginalDefinition",
        "SpecialType",
        "SpecialType",
        "System_Nullable_T",
        "SyntaxFactory",
        "ParseExpression",
        "expression",
        "forgiver",
        "Visit",
        "node",
        "WhenNotNull"
    ],
    "literals": [
        "\"!.Value\"",
        "\"!\""
    ],
    "variables": [
        "Compilation",
        "_compilation",
        "SyntaxNode",
        "_root",
        "res",
        "expression",
        "expressionType",
        "forgiver"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [
        "ExpressionRewriter",
        "ExpressionSyntax",
        "VisitExpression",
        "SyntaxNode",
        "Visit",
        "VisitConditionalAccessExpression"
    ],
    "classes": [
        "ExpressionRewriter"
    ]
}