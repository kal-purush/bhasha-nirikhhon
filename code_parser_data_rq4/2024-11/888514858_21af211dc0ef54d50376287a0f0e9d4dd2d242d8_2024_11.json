{
    "identifiers": [
        "http",
        "server",
        "socketserver",
        "socket",
        "os",
        "time",
        "threading",
        "requests",
        "art",
        "text2art",
        "concurrent",
        "futures",
        "ThreadPoolExecutor",
        "os",
        "name",
        "os",
        "system",
        "os",
        "system",
        "text2art",
        "text",
        "font",
        "RED",
        "ascii_art",
        "RESET",
        "target_host",
        "target_port",
        "packet_count",
        "packet_size",
        "num_threads",
        "sleep_time",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_DGRAM",
        "packet_size",
        "_",
        "packet_count",
        "num_threads",
        "sock",
        "sendto",
        "message",
        "target_host",
        "target_port",
        "time",
        "sleep",
        "sleep_time",
        "socket",
        "error",
        "e",
        "e",
        "sock",
        "close",
        "e",
        "e",
        "target_host",
        "target_port",
        "packet_count",
        "packet_size",
        "num_threads",
        "sleep_time",
        "_",
        "num_threads",
        "threading",
        "target",
        "send_packets",
        "threads",
        "append",
        "thread",
        "thread",
        "start",
        "thread",
        "threads",
        "thread",
        "join",
        "packet_count",
        "target_host",
        "target_port",
        "KeyboardInterrupt",
        "socket",
        "error",
        "e",
        "e",
        "e",
        "e",
        "port",
        "port_services",
        "get",
        "port",
        "host",
        "port",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_STREAM",
        "sock",
        "sock",
        "settimeout",
        "sock",
        "connect_ex",
        "host",
        "port",
        "result",
        "get_port_info",
        "port",
        "port",
        "service",
        "port",
        "socket",
        "error",
        "e",
        "host",
        "port",
        "e",
        "port",
        "e",
        "host",
        "port",
        "e",
        "port",
        "host",
        "port_range",
        "ThreadPoolExecutor",
        "max_workers",
        "executor",
        "executor",
        "submit",
        "scan_port",
        "host",
        "port",
        "port",
        "port",
        "port_range",
        "future",
        "futures",
        "future",
        "result",
        "service",
        "open_ports",
        "append",
        "port",
        "service",
        "open_ports",
        "host",
        "port",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_STREAM",
        "sock",
        "sock",
        "settimeout",
        "sock",
        "connect",
        "host",
        "port",
        "sock",
        "recv",
        "decode",
        "strip",
        "banner",
        "port",
        "banner",
        "port",
        "socket",
        "timeout",
        "host",
        "port",
        "port",
        "socket",
        "error",
        "e",
        "host",
        "port",
        "e",
        "port",
        "e",
        "host",
        "port",
        "e",
        "port",
        "host",
        "port_range",
        "ThreadPoolExecutor",
        "max_workers",
        "executor",
        "executor",
        "submit",
        "grab_banner",
        "host",
        "port",
        "port",
        "port",
        "port_range",
        "future",
        "futures",
        "future",
        "result",
        "banner",
        "open_ports_with_banners",
        "append",
        "port",
        "banner",
        "open_ports_with_banners",
        "url",
        "requests",
        "get",
        "url",
        "timeout",
        "response",
        "raise_for_status",
        "response",
        "text",
        "response",
        "text",
        "response",
        "text",
        "lower",
        "response",
        "text",
        "lower",
        "response",
        "text",
        "lower",
        "response",
        "text",
        "lower",
        "response",
        "text",
        "lower",
        "response",
        "text",
        "lower",
        "requests",
        "RequestException",
        "e",
        "e",
        "http",
        "server",
        "SimpleHTTPRequestHandler",
        "socketserver",
        "TCPServer",
        "port",
        "handler",
        "httpd",
        "YELLOW",
        "port",
        "RED",
        "httpd",
        "serve_forever",
        "KeyboardInterrupt",
        "clear_screen",
        "ip_address",
        "ip_address",
        "requests",
        "get",
        "api_url",
        "response",
        "raise_for_status",
        "response",
        "json",
        "data",
        "data",
        "get",
        "data",
        "get",
        "data",
        "get",
        "data",
        "get",
        "data",
        "get",
        "data",
        "get",
        "requests",
        "RequestException",
        "e",
        "e",
        "clear_screen",
        "red_ascii_art",
        "CYAN",
        "GREEN",
        "RESET",
        "BLUE",
        "GREEN",
        "RESET",
        "BLUE",
        "GREEN",
        "RESET",
        "BLUE",
        "GREEN",
        "RESET",
        "BLUE",
        "GREEN",
        "RESET",
        "BLUE",
        "GREEN",
        "RESET",
        "BLUE",
        "GREEN",
        "RESET",
        "RED",
        "input",
        "CYAN",
        "choice",
        "input",
        "CYAN",
        "input",
        "CYAN",
        "split",
        "scan_ports",
        "target_host",
        "port_range",
        "port_range",
        "port",
        "service",
        "open_ports",
        "GREEN",
        "port",
        "service",
        "input",
        "CYAN",
        "choice",
        "input",
        "CYAN",
        "input",
        "CYAN",
        "split",
        "banner_grabbing",
        "target_host",
        "port_range",
        "port_range",
        "port",
        "banner",
        "open_ports_with_banners",
        "GREEN",
        "port",
        "banner",
        "input",
        "CYAN",
        "choice",
        "input",
        "CYAN",
        "input",
        "CYAN",
        "input",
        "CYAN",
        "input",
        "CYAN",
        "input",
        "CYAN",
        "input",
        "CYAN",
        "udp_stress_test",
        "target_host",
        "target_port",
        "packet_count",
        "packet_size",
        "num_threads",
        "sleep_time",
        "choice",
        "input",
        "CYAN",
        "cms_scanner",
        "url",
        "CYAN",
        "cms",
        "input",
        "CYAN",
        "choice",
        "start_python_server",
        "choice",
        "input",
        "CYAN",
        "ip_geolocation_lookup",
        "ip_address",
        "choice",
        "lower",
        "RED",
        "main"
    ],
    "literals": [
        "\"\\033[0m\"",
        "\"\\033[32m\"",
        "\"\\033[33m\"",
        "\"\\033[36m\"",
        "\"\\033[33m\"",
        "\"\\033[31m\"",
        "'nt'",
        "'cls'",
        "'clear'",
        "\"      N3T MAPP3R       \"",
        "\"Standard\"",
        "b\"A\"",
        "f\"Error sending packet: {e}\"",
        "f\"Error in UDP packet sender: {e}\"",
        "f\"\\n{'-'*40}\"",
        "'-'",
        "f\"  UDP Packet Sent to: {target_host}:{target_port}\"",
        "f\"  Total Packets: {packet_count}\"",
        "f\"  Packet Size: {packet_size} bytes\"",
        "f\"  Number of Threads: {num_threads}\"",
        "f\"  Sleep Time Between Packets: {sleep_time} seconds\"",
        "f\"{'-'*40}\\n\"",
        "'-'",
        "f\"\\n{packet_count} UDP packets sent to {target_host}:{target_port}\"",
        "\"\\n\\nUDP stress test interrupted (Ctrl+C).\"",
        "f\"Socket error during UDP stress test: {e}\"",
        "f\"Error during UDP stress test: {e}\"",
        "\"FTP Data Transfer\"",
        "\"FTP Control\"",
        "\"SSH\"",
        "\"Telnet\"",
        "\"SMTP\"",
        "\"DNS\"",
        "\"DHCP\"",
        "\"DHCP\"",
        "\"TFTP\"",
        "\"HTTP\"",
        "\"POP3\"",
        "\"RPC\"",
        "\"MS RPC\"",
        "\"NetBIOS\"",
        "\"HTTPS\"",
        "\"Microsoft-DS\"",
        "\"IMAPS\"",
        "\"POP3S\"",
        "\"RDP\"",
        "\"HTTP Proxy\"",
        "\"HTTPS Proxy\"",
        "\"MySQL\"",
        "\"PostgreSQL\"",
        "\"VNC\"",
        "\"Redis\"",
        "\"Unknown Service\"",
        "f\"Error connecting to {host}:{port} - {e}\"",
        "f\"Error during port scan for {host}:{port} - {e}\"",
        "f\"Timeout while grabbing banner from {host}:{port}\"",
        "f\"Error while grabbing banner from {host}:{port} - {e}\"",
        "f\"Error during banner grabbing for {host}:{port} - {e}\"",
        "'wp-content'",
        "\"WordPress\"",
        "'Umbraco'",
        "\"Umbraco\"",
        "'joomla'",
        "\"Joomla\"",
        "'phpcms'",
        "\"PhpCMS\"",
        "'drupal'",
        "\"Drupal\"",
        "'october'",
        "\"October\"",
        "'Apache Tomcat'",
        "\"OpenCms\"",
        "'mage'",
        "\"Magento\"",
        "\"No CMS detected\"",
        "f\"Error during CMS detection: {e}\"",
        "\"Error: Unable to reach the host\"",
        "\"\"",
        "f\"{YELLOW}Serving HTTP on port {port}...\"",
        "\"\\n\"",
        "f\"{RED}Press Ctrl + C to stop the server.\"",
        "\"\\nHTTP server stopped by user (Ctrl + C).\"",
        "f\"http://ipinfo.io/{ip_address}/json\"",
        "\"error\"",
        "\"Error: Unable to get geolocation information for this IP.\"",
        "f\"IP: {data.get('ip')}\"",
        "'ip'",
        "f\"Location: {data.get('city')}, {data.get('region')}, {data.get('country')}\"",
        "'city'",
        "'region'",
        "'country'",
        "f\"Org: {data.get('org')}\"",
        "'org'",
        "f\"Coordinates: {data.get('loc')}\"",
        "'loc'",
        "f\"Error during IP geolocation lookup: {e}\"",
        "f\"{CYAN}Choose from the options below :\"",
        "\"\\n\"",
        "f\"{GREEN}[1]{RESET} {BLUE}Port Mapper (Scanner)\"",
        "f\"{GREEN}[2]{RESET} {BLUE}Banner Grabber\"",
        "f\"{GREEN}[3]{RESET} {BLUE}UDP Stress Test\"",
        "f\"{GREEN}[4]{RESET} {BLUE}CMS Scanner\"",
        "f\"{GREEN}[5]{RESET} {BLUE}HTTP Server\"",
        "f\"{GREEN}[6]{RESET} {BLUE}IP Geolocation Lookup\"",
        "f\"{GREEN}[q]{RESET} {RED}Quit\"",
        "f\"{CYAN}Enter your choice: \"",
        "'1'",
        "f\"{CYAN}Enter the target IP address: \"",
        "f\"{CYAN}Enter port range (e.g., 20-100): \"",
        "'-'",
        "f\"{GREEN}Port {port} is open, Service: {service}\"",
        "f\"{CYAN}Press Enter to continue...\"",
        "'2'",
        "f\"{CYAN}Enter the target IP address: \"",
        "f\"{CYAN}Enter port range (e.g., 20-100): \"",
        "'-'",
        "f\"{GREEN}Port {port} banner: {banner}\"",
        "f\"{CYAN}Press Enter to continue...\"",
        "'3'",
        "f\"{CYAN}Enter the target IP address: \"",
        "f\"{CYAN}Enter the target port: \"",
        "f\"{CYAN}Enter the number of packets: \"",
        "f\"{CYAN}Enter the packet size in bytes: \"",
        "f\"{CYAN}Enter number of threads: \"",
        "f\"{CYAN}Enter the sleep time between packets (in seconds): \"",
        "'4'",
        "f\"{CYAN}Enter the URL for CMS detection: \"",
        "f\"{CYAN}CMS Detected: {cms}\"",
        "f\"{CYAN}Press Enter to continue...\"",
        "'5'",
        "'6'",
        "f\"{CYAN}Enter the IP address for geolocation lookup: \"",
        "'q'",
        "f\"{RED}Goodbye!\"",
        "\"__main__\""
    ],
    "variables": [
        "RESET",
        "GREEN",
        "BLUE",
        "CYAN",
        "YELLOW",
        "RED",
        "text",
        "ascii_art",
        "red_ascii_art",
        "sock",
        "message",
        "threads",
        "thread",
        "port_services",
        "result",
        "service",
        "open_ports",
        "futures",
        "port",
        "service",
        "banner",
        "open_ports_with_banners",
        "futures",
        "port",
        "banner",
        "response",
        "handler",
        "port",
        "api_url",
        "response",
        "data",
        "choice",
        "target_host",
        "port_range",
        "open_ports",
        "target_host",
        "port_range",
        "open_ports_with_banners",
        "target_host",
        "target_port",
        "packet_count",
        "packet_size",
        "num_threads",
        "sleep_time",
        "url",
        "cms",
        "ip_address"
    ],
    "comments": [
        "ANSI color codes",
        "Red color code",
        "ASCII",
        "Apply red color to ASCII art",
        "UDP Test",
        "Port Mapper",
        "Banner Grabber",
        "CMS Identifier",
        "Ensure we get a successful response",
        "IP Geolocation",
        "Using the ipinfo.io API to get geolocation info",
        "Ensure we get a successful response",
        "Program",
        "Print ASCII art in red"
    ],
    "docstrings": [
        "\"\"\" Returns service information based on the port number \"\"\""
    ],
    "functions": [
        "clear_screen",
        "udp_stress_test",
        "send_packets",
        "get_port_info",
        "scan_port",
        "scan_ports",
        "grab_banner",
        "banner_grabbing",
        "get_default_ports",
        "cms_scanner",
        "start_python_server",
        "ip_geolocation_lookup",
        "main"
    ],
    "classes": []
}