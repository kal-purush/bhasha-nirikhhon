{
    "identifiers": [
        "ca",
        "uhn",
        "fhir",
        "jpa",
        "starter",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "Callable",
        "java",
        "util",
        "concurrent",
        "ExecutionException",
        "java",
        "util",
        "concurrent",
        "ExecutorService",
        "java",
        "util",
        "concurrent",
        "Executors",
        "java",
        "util",
        "concurrent",
        "Future",
        "ca",
        "uhn",
        "fhir",
        "rest",
        "server",
        "exceptions",
        "ResourceVersionConflictException",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "Bundle",
        "BundleEntryComponent",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "Patient",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "Bundle",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "Bundle",
        "BundleType",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "Bundle",
        "HTTPVerb",
        "org",
        "junit",
        "jupiter",
        "api",
        "Assertions",
        "org",
        "junit",
        "jupiter",
        "api",
        "BeforeEach",
        "org",
        "junit",
        "jupiter",
        "api",
        "Test",
        "org",
        "springframework",
        "beans",
        "factory",
        "annotation",
        "Autowired",
        "org",
        "springframework",
        "boot",
        "test",
        "context",
        "SpringBootTest",
        "org",
        "springframework",
        "boot",
        "test",
        "web",
        "server",
        "LocalServerPort",
        "ca",
        "uhn",
        "fhir",
        "context",
        "FhirContext",
        "ca",
        "uhn",
        "fhir",
        "jpa",
        "api",
        "dao",
        "IFhirResourceDao",
        "ca",
        "uhn",
        "fhir",
        "rest",
        "api",
        "MethodOutcome",
        "ca",
        "uhn",
        "fhir",
        "rest",
        "client",
        "api",
        "IGenericClient",
        "ca",
        "uhn",
        "fhir",
        "rest",
        "client",
        "api",
        "ServerValidationModeEnum",
        "org",
        "junit",
        "jupiter",
        "api",
        "Assertions",
        "assertThrows",
        "SpringBootTest",
        "webEnvironment",
        "SpringBootTest",
        "WebEnvironment",
        "RANDOM_PORT",
        "classes",
        "properties",
        "ourLog",
        "org",
        "slf4j",
        "LoggerFactory",
        "getLogger",
        "LocalServerPort",
        "port",
        "client",
        "ctx",
        "BeforeEach",
        "ctx",
        "FhirContext",
        "forR4",
        "ctx",
        "getRestfulClientFactory",
        "setServerValidationMode",
        "ServerValidationModeEnum",
        "NEVER",
        "ctx",
        "getRestfulClientFactory",
        "setSocketTimeout",
        "ourServerBase",
        "port",
        "client",
        "ctx",
        "newRestfulGenericClient",
        "ourServerBase",
        "Test",
        "pat",
        "patId",
        "client",
        "create",
        "resource",
        "pat",
        "execute",
        "getId",
        "getIdPart",
        "launchThreads",
        "patId",
        "Test",
        "pat",
        "patId",
        "client",
        "create",
        "resource",
        "pat",
        "execute",
        "getId",
        "getIdPart",
        "launchThreads",
        "patId",
        "Test",
        "pat",
        "patId",
        "client",
        "create",
        "resource",
        "pat",
        "execute",
        "getId",
        "getIdPart",
        "exception",
        "assertThrows",
        "launchThreads",
        "patId",
        "Test",
        "pat",
        "patId",
        "client",
        "create",
        "resource",
        "pat",
        "execute",
        "getId",
        "getIdPart",
        "exception",
        "assertThrows",
        "launchThreads",
        "patId",
        "patientId",
        "useBundles",
        "headerName",
        "threadCnt",
        "execSvc",
        "Executors",
        "newFixedThreadPool",
        "threadCnt",
        "callables",
        "i",
        "i",
        "threadCnt",
        "i",
        "cnt",
        "i",
        "callable",
        "Override",
        "pat",
        "pat",
        "addName",
        "setFamily",
        "cnt",
        "pat",
        "setId",
        "patientId",
        "useBundles",
        "b",
        "b",
        "setType",
        "BundleType",
        "TRANSACTION",
        "bec",
        "b",
        "addEntry",
        "bec",
        "setResource",
        "pat",
        "req",
        "bec",
        "getRequest",
        "req",
        "setUrl",
        "patientId",
        "req",
        "setMethod",
        "HTTPVerb",
        "PUT",
        "bec",
        "setRequest",
        "req",
        "returnBundle",
        "client",
        "transaction",
        "withBundle",
        "b",
        "withAdditionalHeader",
        "headerName",
        "execute",
        "statusString",
        "returnBundle",
        "getEntryFirstRep",
        "getResponse",
        "getStatus",
        "ourLog",
        "trace",
        "statusString",
        "parseInt",
        "statusString",
        "substring",
        "nfe",
        "outcome",
        "client",
        "update",
        "resource",
        "pat",
        "withId",
        "patientId",
        "withAdditionalHeader",
        "headerName",
        "execute",
        "ourLog",
        "trace",
        "outcome",
        "getResponseStatusCode",
        "outcome",
        "getResponseStatusCode",
        "callables",
        "add",
        "callable",
        "futures",
        "callable",
        "callables",
        "futures",
        "add",
        "execSvc",
        "submit",
        "callable",
        "future",
        "futures",
        "httpResponseCode",
        "future",
        "get",
        "Assertions",
        "assertEquals",
        "httpResponseCode",
        "e",
        "e",
        "getCause"
    ],
    "literals": [
        "\"spring.datasource.url=jdbc:h2:mem:dbr4\"",
        "\"hapi.fhir.fhir_version=r4\"",
        "\"hapi.fhir.userRequestRetryVersionConflictsInterceptorEnabled=true\"",
        "\"http://localhost:\"",
        "\"/fhir/\"",
        "\"X-Retry-On-Version-Conflict\"",
        "\"X-Retry-On-Version-Conflict\"",
        "\"someotherheader\"",
        "\"someotherheader\"",
        "\"fam-\"",
        "\"Patient/\"",
        "\"retry; max-retries=10\"",
        "\"statusString->{}\"",
        "\"retry; max-retries=10\"",
        "\"updated patient: \""
    ],
    "variables": [
        "port",
        "client",
        "ctx"
    ],
    "comments": [
        "send 10 bundles with updates to the patient in parallel, except the header to deconflict them",
        "send 10 resource puts  to the patient in parallel, except the header to deconflict them",
        "send 10 bundles with updates to the patient in parallel, expect a ResourceVersionConflictException since we are not setting the retry header",
        "send 10 resource puts  to the patient in parallel, expect a ResourceVersionConflictException since we are not setting the retry header",
        "launch a bunch of threads at the same time that update the same patient",
        "make sure to change something so the server doesnt short circuit on a no-op",
        "bec.setFullUrl(\"Patient/\" + patId);",
        "launch them all at once",
        "wait for calls to complete",
        "throw the ResourceVersionConflictException back up so we can test it"
    ],
    "docstrings": [
        "* This class tests running parallel updates to a single resource with and without setting the 'X-Retry-On-Version-Conflict' header\n * to ensure we get the expected behavior of detecting conflicts"
    ],
    "functions": [
        "setUp",
        "testParallelResourceUpdateBundle",
        "testParallelResourceUpdateNoBundle",
        "testParallelResourceUpdateBundleExpectConflict",
        "testParallelResourceUpdateNoBundleExpectConflict",
        "launchThreads",
        "call"
    ],
    "classes": [
        "ParallelUpdatesVersionConflictTest"
    ]
}