{
    "identifiers": [
        "PIL",
        "Image",
        "ImageFilter",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "matplotlib",
        "cm",
        "numpy",
        "np",
        "PIL",
        "Image",
        "random",
        "json",
        "height",
        "height",
        "COLORS",
        "height",
        "height",
        "COLORS",
        "height",
        "height",
        "COLORS",
        "height",
        "height",
        "COLORS",
        "height",
        "height",
        "COLORS",
        "height",
        "COLORS",
        "Image",
        "open",
        "convert",
        "np",
        "array",
        "image",
        "compute_normals",
        "data",
        "np",
        "sqrt",
        "normal_x",
        "normal_y",
        "np",
        "zeros",
        "data",
        "shape",
        "data",
        "shape",
        "dtype",
        "np",
        "uint8",
        "i",
        "data",
        "shape",
        "j",
        "data",
        "shape",
        "data",
        "i",
        "j",
        "slope",
        "i",
        "j",
        "get_color",
        "height",
        "slope_value",
        "color",
        "Image",
        "fromarray",
        "colored_image",
        "output_image",
        "save",
        "data",
        "data",
        "astype",
        "np",
        "float32",
        "np",
        "roll",
        "data",
        "shift",
        "axis",
        "np",
        "roll",
        "data",
        "shift",
        "axis",
        "R",
        "L",
        "np",
        "roll",
        "data",
        "shift",
        "axis",
        "np",
        "roll",
        "data",
        "shift",
        "axis",
        "B",
        "T",
        "R",
        "L",
        "B",
        "T",
        "np",
        "ones_like",
        "data",
        "normal_x",
        "normal_y",
        "normal_z",
        "pixel",
        "target_color",
        "tolerance",
        "all",
        "abs",
        "pixel",
        "i",
        "target_color",
        "i",
        "tolerance",
        "i",
        "Image",
        "open",
        "convert",
        "image",
        "load",
        "image",
        "size",
        "x",
        "width",
        "y",
        "height",
        "color",
        "target_colors",
        "is_color_close",
        "pixels",
        "x",
        "y",
        "color",
        "tolerance",
        "target_coords",
        "append",
        "x",
        "y",
        "_",
        "min",
        "num_dots",
        "len",
        "target_coords",
        "random",
        "choice",
        "target_coords",
        "positions",
        "append",
        "x",
        "z",
        "image",
        "save",
        "image",
        "show",
        "i",
        "pos",
        "positions",
        "start",
        "base_json",
        "copy",
        "obj",
        "pos",
        "obj",
        "pos",
        "random",
        "choice",
        "randomArbre",
        "random_tree",
        "random_tree",
        "i",
        "json_objects",
        "append",
        "obj",
        "json",
        "dumps",
        "json_objects",
        "indent",
        "json_output",
        "Image",
        "open",
        "im",
        "size",
        "width",
        "height",
        "row",
        "col",
        "col",
        "part_width",
        "row",
        "part_height",
        "left",
        "part_width",
        "upper",
        "part_height",
        "im",
        "crop",
        "left",
        "upper",
        "right",
        "lower",
        "piece",
        "ImageFilter",
        "MedianFilter",
        "size",
        "pieces",
        "append",
        "denoised_piece",
        "i",
        "piece",
        "pieces",
        "start",
        "piece",
        "resize",
        "i",
        "resized_piece",
        "save",
        "filename",
        "filename",
        "resized_piece",
        "size",
        "extract_split_and_denoise"
    ],
    "literals": [
        "\"water\"",
        "\"sand\"",
        "\"grass\"",
        "\"forest\"",
        "\"rock\"",
        "\"snow\"",
        "\"water\"",
        "\"sand\"",
        "\"grass\"",
        "\"forest\"",
        "\"rock\"",
        "\"snow\"",
        "'image.png'",
        "\"L\"",
        "\"colored_heightmap.png\"",
        "\"depth_factor\"",
        "\"depth_path\"",
        "\"media\\\\image\\\\decoration\\\\arbre\\\\tree_mid_leaves_1depth.png\"",
        "\"emission_path\"",
        "\"\"",
        "\"flip_x\"",
        "\"flip_y\"",
        "\"key_color\"",
        "\"a\"",
        "\"b\"",
        "\"g\"",
        "\"r\"",
        "\"name\"",
        "\"tree_mid_leaves_1_1\"",
        "\"path\"",
        "\"media\\\\image\\\\decoration\\\\arbre\\\\tree_mid_leaves_1.png\"",
        "\"position\"",
        "\"x\"",
        "\"y\"",
        "\"z\"",
        "\"rotation\"",
        "\"scale\"",
        "'colored_heightmapwith_farm.png'",
        "\"RGB\"",
        "\"image_with_black_dots.png\"",
        "'tree_mid_leaves_1'",
        "'tree_mid_leaves_2'",
        "'tree_mid_leaves_3'",
        "'tree_mid_leaves_4'",
        "'tree_mid_leaves_5'",
        "\"position\"",
        "\"x\"",
        "\"position\"",
        "\"z\"",
        "\"path\"",
        "f\"media\\\\image\\\\decoration\\\\arbre\\\\{random_tree}.png\"",
        "\"depth_path\"",
        "f\"media\\\\image\\\\decoration\\\\arbre\\\\{random_tree}depth.png\"",
        "\"name\"",
        "f\"tree_mid_leaves_{i}\"",
        "'C:\\\\Users\\\\Yulia\\\\PycharmProjects\\\\creerImage\\\\image_with_black_dots.png'",
        "f\"image_piece_{i}_4096x4096.png\"",
        "f\"Saved {filename} with size: {resized_piece.size}\"",
        "'__main__'"
    ],
    "variables": [
        "COLORS",
        "image",
        "data",
        "normal_x",
        "normal_y",
        "normal_z",
        "slope",
        "colored_image",
        "height",
        "slope_value",
        "color",
        "colored_image",
        "i",
        "j",
        "output_image",
        "data",
        "R",
        "L",
        "R",
        "L",
        "B",
        "T",
        "B",
        "T",
        "normal_x",
        "normal_y",
        "normal_z",
        "base_json",
        "image",
        "pixels",
        "target_colors",
        "tolerance",
        "num_dots",
        "width",
        "height",
        "target_coords",
        "positions",
        "x",
        "z",
        "pixels",
        "x",
        "z",
        "json_objects",
        "randomArbre",
        "obj",
        "random_tree",
        "obj",
        "obj",
        "obj",
        "json_output",
        "im",
        "width",
        "height",
        "part_width",
        "part_height",
        "pieces",
        "left",
        "upper",
        "right",
        "lower",
        "piece",
        "denoised_piece",
        "resized_piece",
        "filename"
    ],
    "comments": [
        "if height > 0.2 and height < 0.9 and slope > 0.45:",
        "return COLORS[\"rock\"]",
        "Load the heightmap image",
        "Convert to grayscale",
        "Normalize height data to [0, 1]",
        "Compute normals",
        "Compute the slope magnitude",
        "Map height and slope to colors",
        "Save the colored heightmap as an image",
        "colored_image2 = np.zeros((data.shape[0], data.shape[1], 3), dtype=np.uint8)",
        "for i in range(data.shape[0]):",
        "for j in range(data.shape[1]):",
        "colored_image2[i, j] = (normal_x[i, j], normal_y[i, j], normal_z[i, j])",
        "output_image2 = Image.fromarray(colored_image2)",
        "output_image2.save(\"colored_heightmap_normals.png\")",
        "Convert data to float32 to ensure calculations are done in float",
        "count = 0",
        "for i in range(data.shape[0]):",
        "for j in range(data.shape[1]):",
        "R = data[min(i + 1, data.shape[0] - 1), j]  # Right neighbor",
        "L = data[max(i - 1, 0), j]  # Left neighbor",
        "B = data[i, min(j + 1, data.shape[1] - 1)]  # Bottom neighbor",
        "T = data[i, max(j - 1, 0)]  # Top neighbor",
        "normal_x[i, j] = (R - L) * 0.5",
        "normal_y[i, j] = (B - T) * 0.5",
        "normal_z[i, j] = -1",
        "",
        "count += 1",
        "if count % 10_000 == 0:",
        "print(f\"{count}/{data.size}\")",
        "Right (R) and Left (L) neighbors",
        "Handle boundary condition for the last row",
        "Handle boundary condition for the first row",
        "Bottom (B) and Top (T) neighbors",
        "Handle boundary condition for the last column",
        "Handle boundary condition for the first column",
        "Calculate normal_x, normal_y, and normal_z",
        "Compute right, left, bottom, and top neighbors using slicing",
        "R = data[1:-1, 2:]  # Right neighbor",
        "L = data[1:-1, :-2]  # Left neighbor",
        "B = data[2:, 1:-1]  # Bottom neighbor",
        "T = data[:-2, 1:-1]  # Top neighbor",
        "",
        "# Fill in normal_x and normal_y only in the central region to avoid edges",
        "normal_x[1:-1, 1:-1] = (R - L) * 0.5",
        "normal_y[1:-1, 1:-1] = (B - T) * 0.5",
        "",
        "# Calculate the magnitude for normalization",
        "norm = np.sqrt(normal_x ** 2 + normal_y ** 2 + normal_z ** 2)",
        "",
        "# Avoid division by zero by adding a small epsilon",
        "norm = np.where(norm == 0, 1, norm)",
        "",
        "# Normalize each component by dividing by the magnitude",
        "normal_x /= norm",
        "normal_y /= norm",
        "normal_z /= norm",
        "Load the image",
        "Define colors where black dots will be inserted with a tolerance",
        "Adjust this tolerance as needed",
        "Define the number of black dots you want to insert",
        "Adjust this to your preference",
        "Get the dimensions of the image",
        "Collect all pixel coordinates that match the target colors within the tolerance",
        "No need to check other colors if a match is found",
        "Insert black dots only on matching pixels and save their positions",
        "List to store (x, 0.0, z) positions",
        "Ensure we don't exceed available coordinates",
        "Black color in RGB",
        "Save position with y = 0.0",
        "Save or display the image",
        "Copy the base JSON to modify",
        "Use index 0 for x",
        "Choose a random tree from randomArbre",
        "Also set the depth_path based on the random tree chosen",
        "Set the name based on the random tree",
        "Remove the \".png\" for name",
        "Convert to JSON and print",
        "Calculate the dimensions for each of the 16 parts",
        "Loop over the 4x4 grid to crop each piece",
        "Apply noise reduction filter",
        "Median filter for noise reduction",
        "Resize each piece to 4096x4096 and save it",
        "Resize to 4096x4096",
        "plot_heightmap_3d()",
        "putOrangeDots()"
    ],
    "docstrings": [
        "\"\"\"Check if a pixel is close to a target color within a tolerance.\"\"\""
    ],
    "functions": [
        "get_color",
        "plot_heightmap_3d",
        "compute_normals",
        "is_color_close",
        "putOrangeDots",
        "extract_split_and_denoise"
    ],
    "classes": []
}