{
    "identifiers": [
        "com",
        "webforj",
        "exceptions",
        "message",
        "message",
        "message",
        "cause",
        "message",
        "cause",
        "cause",
        "cause",
        "e",
        "e"
    ],
    "literals": [],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* This class is used for reporting errors that occur when trying to access the web manager API\n * without being available.\n *\n * @author Hyyan Abo Fakher\n * @since 24.20",
        "* Constructs a new exception with the specified detail message. The cause is not initialized, and\n   * may subsequently be initialized by a call to {@link #initCause}.\n   *\n   * @param message the detail message. The detail message is saved for later retrieval by the\n   *        {@link #getMessage()} method.",
        "* Constructs a new exception with the specified detail message and cause.\n   *\n   * <p>\n   * Note that the detail message associated with {@code cause} is <i>not</i> automatically\n   * incorporated in this exception's detail message.\n   * </p>\n   *\n   * @param message the detail message (which is saved for later retrieval by the\n   *        {@link #getMessage()} method).\n   * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n   *        (A {@code null} value is permitted, and indicates that the cause is nonexistent or\n   *        unknown.)",
        "* Constructs a new exception with the specified cause and a detail message of\n   * {@code (cause==null ? null : cause.toString())} (which typically contains the class and detail\n   * message of {@code cause}). This constructor is useful for exceptions that are little more than\n   * wrappers for other throwables.\n   *\n   * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n   *        (A {@code null} value is permitted, and indicates that the cause is nonexistent or\n   *        unknown.)",
        "* Constructs a new DWC exception based on the passed exception.\n   *\n   * @param e the exception to be wrapped",
        "* Constructs a new exception with {@code null} as its detail message. The cause is not\n   * initialized, and may subsequently be initialized by a call to {@link #initCause}."
    ],
    "functions": [
        "WebforjWebManagerException",
        "WebforjWebManagerException",
        "WebforjWebManagerException",
        "WebforjWebManagerException",
        "WebforjWebManagerException"
    ],
    "classes": [
        "WebforjWebManagerException"
    ]
}