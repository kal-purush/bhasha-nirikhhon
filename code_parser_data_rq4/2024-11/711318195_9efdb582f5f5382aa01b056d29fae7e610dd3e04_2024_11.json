{
    "identifiers": [
        "torch",
        "time",
        "triton",
        "triton",
        "language",
        "tl",
        "matplotlib",
        "pandas",
        "pd",
        "numpy",
        "np",
        "triton",
        "jit",
        "x",
        "tl",
        "where",
        "x",
        "x",
        "x",
        "triton",
        "jit",
        "x",
        "tl",
        "where",
        "x",
        "triton",
        "jit",
        "pid_h",
        "pid_b",
        "x_ptr",
        "w1_ptr",
        "w2_ptr",
        "o_ptr",
        "dx_ptr",
        "dw1_ptr",
        "dw2_ptr",
        "do_ptr",
        "H",
        "B",
        "D",
        "tl",
        "constexpr",
        "E",
        "stride_xb",
        "stride_xd",
        "stride_w1d",
        "stride_w1e",
        "stride_w2e",
        "stride_w2d",
        "stride_ob",
        "stride_od",
        "stride_dxb",
        "stride_dxd",
        "stride_dw1d",
        "stride_dw1e",
        "stride_dw2e",
        "stride_dw2d",
        "stride_dob",
        "stride_dod",
        "BLOCK_SIZE_B",
        "tl",
        "constexpr",
        "BLOCK_SIZE_E",
        "tl",
        "constexpr",
        "ACTIVATION",
        "tl",
        "constexpr",
        "x_ptr",
        "element_ty",
        "tl",
        "arange",
        "BLOCK_SIZE_B",
        "tl",
        "arange",
        "D",
        "tl",
        "arange",
        "BLOCK_SIZE_E",
        "x_ptr",
        "pid_h",
        "B",
        "pid_b",
        "BLOCK_SIZE_B",
        "offs_b",
        "stride_xb",
        "offs_d",
        "stride_xd",
        "offs_b",
        "B",
        "pid_b",
        "BLOCK_SIZE_B",
        "offs_d",
        "D",
        "do_ptr",
        "pid_h",
        "B",
        "pid_b",
        "BLOCK_SIZE_B",
        "offs_b",
        "stride_dob",
        "offs_d",
        "stride_dod",
        "offs_b",
        "B",
        "pid_b",
        "BLOCK_SIZE_B",
        "offs_d",
        "D",
        "w1_ptr",
        "pid_h",
        "D",
        "offs_d",
        "stride_w1d",
        "offs_e",
        "stride_w1e",
        "w2_ptr",
        "pid_h",
        "E",
        "offs_e",
        "stride_w2e",
        "offs_d",
        "stride_w2d",
        "dw1_ptr",
        "pid_h",
        "D",
        "offs_d",
        "stride_dw1d",
        "offs_e",
        "stride_dw1e",
        "dw2_ptr",
        "pid_h",
        "E",
        "offs_e",
        "stride_dw2e",
        "offs_d",
        "stride_dw2d",
        "tl",
        "load",
        "x_ptrs",
        "mask",
        "x_mask",
        "other",
        "tl",
        "load",
        "do_ptrs",
        "mask",
        "do_mask",
        "other",
        "tl",
        "zeros",
        "BLOCK_SIZE_B",
        "D",
        "dtype",
        "tl",
        "float32",
        "e",
        "tl",
        "cdiv",
        "E",
        "BLOCK_SIZE_E",
        "offs_d",
        "D",
        "offs_e",
        "E",
        "e",
        "BLOCK_SIZE_E",
        "offs_e",
        "E",
        "e",
        "BLOCK_SIZE_E",
        "offs_d",
        "D",
        "tl",
        "load",
        "w1_ptrs",
        "mask",
        "w1_mask",
        "other",
        "tl",
        "load",
        "w2_ptrs",
        "mask",
        "w2_mask",
        "other",
        "tl",
        "dot",
        "x",
        "w1",
        "out_dtype",
        "tl",
        "float32",
        "ACTIVATION",
        "leaky_relu",
        "z",
        "to",
        "TARGET_TYPE",
        "z",
        "to",
        "TARGET_TYPE",
        "tl",
        "dot",
        "tl",
        "trans",
        "w2",
        "out_dtype",
        "tl",
        "float32",
        "ACTIVATION",
        "dh",
        "d_leacky_relu_inv_backward",
        "z",
        "to",
        "TARGET_TYPE",
        "dh",
        "to",
        "TARGET_TYPE",
        "dx",
        "tl",
        "dot",
        "dz",
        "tl",
        "trans",
        "w1",
        "out_dtype",
        "tl",
        "float32",
        "w1_ptrs",
        "BLOCK_SIZE_E",
        "stride_w1e",
        "w2_ptrs",
        "BLOCK_SIZE_E",
        "stride_w2e",
        "dw1_ptrs",
        "BLOCK_SIZE_E",
        "stride_dw1e",
        "dw2_ptrs",
        "BLOCK_SIZE_E",
        "stride_dw2e",
        "dx",
        "triton",
        "jit",
        "pid_h",
        "pid_e",
        "x_ptr",
        "w1_ptr",
        "w2_ptr",
        "o_ptr",
        "dx_ptr",
        "dw1_ptr",
        "dw2_ptr",
        "do_ptr",
        "H",
        "B",
        "D",
        "tl",
        "constexpr",
        "E",
        "stride_xb",
        "stride_xd",
        "stride_w1d",
        "stride_w1e",
        "stride_w2e",
        "stride_w2d",
        "stride_ob",
        "stride_od",
        "stride_dxb",
        "stride_dxd",
        "stride_dw1d",
        "stride_dw1e",
        "stride_dw2e",
        "stride_dw2d",
        "stride_dob",
        "stride_dod",
        "BLOCK_SIZE_B",
        "tl",
        "constexpr",
        "BLOCK_SIZE_E",
        "tl",
        "constexpr",
        "ACTIVATION",
        "tl",
        "constexpr",
        "x_ptr",
        "element_ty",
        "tl",
        "arange",
        "BLOCK_SIZE_B",
        "tl",
        "arange",
        "D",
        "tl",
        "arange",
        "BLOCK_SIZE_E",
        "x_ptr",
        "pid_h",
        "B",
        "offs_b",
        "stride_xb",
        "offs_d",
        "stride_xd",
        "do_ptr",
        "pid_h",
        "B",
        "offs_b",
        "stride_dob",
        "offs_d",
        "stride_dod",
        "offs_b",
        "B",
        "offs_d",
        "D",
        "w1_ptr",
        "pid_h",
        "D",
        "offs_d",
        "stride_w1d",
        "pid_e",
        "BLOCK_SIZE_E",
        "offs_e",
        "stride_w1e",
        "offs_d",
        "D",
        "offs_e",
        "E",
        "pid_e",
        "BLOCK_SIZE_E",
        "w2_ptr",
        "pid_h",
        "E",
        "pid_e",
        "BLOCK_SIZE_E",
        "offs_e",
        "stride_w2e",
        "offs_d",
        "stride_w2d",
        "offs_e",
        "E",
        "pid_e",
        "BLOCK_SIZE_E",
        "offs_d",
        "D",
        "tl",
        "load",
        "w1_ptrs",
        "mask",
        "w1_mask",
        "other",
        "tl",
        "load",
        "w2_ptrs",
        "mask",
        "w2_mask",
        "other",
        "tl",
        "load",
        "do_ptrs",
        "mask",
        "do_mask",
        "other",
        "tl",
        "zeros",
        "D",
        "BLOCK_SIZE_E",
        "dtype",
        "tl",
        "float32",
        "tl",
        "zeros",
        "BLOCK_SIZE_E",
        "D",
        "dtype",
        "tl",
        "float32",
        "b",
        "tl",
        "cdiv",
        "B",
        "BLOCK_SIZE_B",
        "offs_b",
        "B",
        "b",
        "BLOCK_SIZE_B",
        "offs_d",
        "D",
        "offs_b",
        "B",
        "b",
        "BLOCK_SIZE_B",
        "offs_d",
        "D",
        "tl",
        "load",
        "x_ptrs",
        "mask",
        "x_mask",
        "other",
        "tl",
        "load",
        "do_ptrs",
        "mask",
        "do_mask",
        "other",
        "tl",
        "dot",
        "x",
        "w1",
        "out_dtype",
        "tl",
        "float32",
        "ACTIVATION",
        "leaky_relu",
        "z",
        "to",
        "TARGET_TYPE",
        "z",
        "to",
        "TARGET_TYPE",
        "tl",
        "dot",
        "tl",
        "trans",
        "w2",
        "out_dtype",
        "tl",
        "float32",
        "dw2",
        "tl",
        "dot",
        "tl",
        "trans",
        "h",
        "out_dtype",
        "tl",
        "float32",
        "ACTIVATION",
        "dh",
        "d_leacky_relu_inv_backward",
        "z",
        "to",
        "TARGET_TYPE",
        "dh",
        "to",
        "TARGET_TYPE",
        "dw1",
        "tl",
        "dot",
        "tl",
        "trans",
        "x",
        "dz",
        "out_dtype",
        "tl",
        "float32",
        "x_ptrs",
        "BLOCK_SIZE_B",
        "stride_xb",
        "do_ptrs",
        "BLOCK_SIZE_B",
        "stride_dob",
        "dw1",
        "dw2",
        "triton",
        "autotune",
        "configs",
        "triton",
        "Config",
        "num_stages",
        "num_warps",
        "triton",
        "Config",
        "num_stages",
        "num_warps",
        "triton",
        "Config",
        "num_stages",
        "num_warps",
        "triton",
        "Config",
        "num_stages",
        "num_warps",
        "key",
        "triton",
        "jit",
        "x_ptr",
        "w1_ptr",
        "w2_ptr",
        "o_ptr",
        "dx_ptr",
        "dw1_ptr",
        "dw2_ptr",
        "do_ptr",
        "H",
        "B",
        "D",
        "tl",
        "constexpr",
        "E",
        "stride_xb",
        "stride_xd",
        "stride_w1d",
        "stride_w1e",
        "stride_w2e",
        "stride_w2d",
        "stride_ob",
        "stride_od",
        "stride_dxb",
        "stride_dxd",
        "stride_dw1d",
        "stride_dw1e",
        "stride_dw2e",
        "stride_dw2d",
        "stride_dob",
        "stride_dod",
        "BLOCK_SIZE_B",
        "tl",
        "constexpr",
        "BLOCK_SIZE_E",
        "tl",
        "constexpr",
        "ACTIVATION",
        "tl",
        "constexpr",
        "tl",
        "program_id",
        "axis",
        "tl",
        "cdiv",
        "E",
        "BLOCK_SIZE_E",
        "tl",
        "cdiv",
        "B",
        "BLOCK_SIZE_B",
        "pid",
        "batch_groups_e",
        "batch_groups_b",
        "pid",
        "batch_groups_e",
        "batch_groups_b",
        "x_ptr",
        "element_ty",
        "tl",
        "arange",
        "BLOCK_SIZE_B",
        "tl",
        "arange",
        "D",
        "tl",
        "arange",
        "BLOCK_SIZE_E",
        "idx",
        "batch_groups_e",
        "idx",
        "batch_groups_e",
        "dx_ptr",
        "pid_h",
        "B",
        "pid_b",
        "BLOCK_SIZE_B",
        "offs_b",
        "stride_dxb",
        "offs_d",
        "stride_dxd",
        "offs_b",
        "B",
        "pid_b",
        "BLOCK_SIZE_B",
        "offs_d",
        "D",
        "tl",
        "zeros",
        "BLOCK_SIZE_B",
        "D",
        "dtype",
        "tl",
        "float32",
        "_mlp_wide_kernel_bwd_dx",
        "pid_h",
        "pid_b",
        "x_ptr",
        "w1_ptr",
        "w2_ptr",
        "o_ptr",
        "dx_ptr",
        "dw1_ptr",
        "dw2_ptr",
        "do_ptr",
        "H",
        "B",
        "D",
        "E",
        "stride_xb",
        "stride_xd",
        "stride_w1d",
        "stride_w1e",
        "stride_w2e",
        "stride_w2d",
        "stride_ob",
        "stride_od",
        "stride_dxb",
        "stride_dxd",
        "stride_dw1d",
        "stride_dw1e",
        "stride_dw2e",
        "stride_dw2d",
        "stride_dob",
        "stride_dod",
        "BLOCK_SIZE_B",
        "BLOCK_SIZE_E",
        "ACTIVATION",
        "tl",
        "store",
        "dx_ptrs",
        "dx",
        "to",
        "TARGET_TYPE",
        "mask",
        "dx_mask",
        "idx",
        "dw1_ptr",
        "pid_h",
        "D",
        "offs_d",
        "stride_dw1d",
        "pid_e",
        "BLOCK_SIZE_E",
        "offs_e",
        "stride_dw1e",
        "offs_d",
        "D",
        "offs_e",
        "E",
        "pid_e",
        "BLOCK_SIZE_E",
        "dw2_ptr",
        "pid_h",
        "E",
        "pid_e",
        "BLOCK_SIZE_E",
        "offs_e",
        "stride_dw2e",
        "offs_d",
        "stride_dw2d",
        "offs_e",
        "E",
        "pid_e",
        "BLOCK_SIZE_E",
        "offs_d",
        "D",
        "_mlp_wide_kernel_bwd_dw1w2",
        "pid_h",
        "pid_e",
        "x_ptr",
        "w1_ptr",
        "w2_ptr",
        "o_ptr",
        "dx_ptr",
        "dw1_ptr",
        "dw2_ptr",
        "do_ptr",
        "H",
        "B",
        "D",
        "E",
        "stride_xb",
        "stride_xd",
        "stride_w1d",
        "stride_w1e",
        "stride_w2e",
        "stride_w2d",
        "stride_ob",
        "stride_od",
        "stride_dxb",
        "stride_dxd",
        "stride_dw1d",
        "stride_dw1e",
        "stride_dw2e",
        "stride_dw2d",
        "stride_dob",
        "stride_dod",
        "BLOCK_SIZE_B",
        "BLOCK_SIZE_E",
        "ACTIVATION",
        "tl",
        "store",
        "dw1_ptrs",
        "dw1",
        "to",
        "TARGET_TYPE",
        "mask",
        "dw1_mask",
        "tl",
        "store",
        "dw2_ptrs",
        "dw2",
        "to",
        "TARGET_TYPE",
        "mask",
        "dw2_mask",
        "x",
        "w1",
        "w2",
        "o",
        "activation",
        "x",
        "shape",
        "w1",
        "shape",
        "w1",
        "shape",
        "w2",
        "shape",
        "x",
        "shape",
        "w2",
        "shape",
        "x",
        "shape",
        "o",
        "shape",
        "x",
        "shape",
        "shape",
        "x",
        "shape",
        "w1",
        "shape",
        "x",
        "view",
        "H",
        "B",
        "D",
        "w1",
        "view",
        "D",
        "H",
        "E",
        "w2",
        "view",
        "E",
        "H",
        "D",
        "o",
        "view",
        "H",
        "B",
        "D",
        "view",
        "H",
        "B",
        "D",
        "x",
        "is_contiguous",
        "w1",
        "is_contiguous",
        "w2",
        "is_contiguous",
        "o",
        "is_contiguous",
        "is_contiguous",
        "torch",
        "zeros_like",
        "x",
        "torch",
        "zeros_like",
        "w1",
        "torch",
        "zeros_like",
        "w2",
        "META",
        "triton",
        "cdiv",
        "B",
        "META",
        "triton",
        "cdiv",
        "E",
        "META",
        "H",
        "mlp_wide_kernel_bwd2",
        "grid",
        "x",
        "w1",
        "w2",
        "o",
        "dx",
        "dw1",
        "dw2",
        "H",
        "B",
        "D",
        "E",
        "x",
        "stride",
        "x",
        "stride",
        "w1",
        "stride",
        "w1",
        "stride",
        "w2",
        "stride",
        "w2",
        "stride",
        "o",
        "stride",
        "o",
        "stride",
        "dx",
        "stride",
        "dx",
        "stride",
        "dw1",
        "stride",
        "dw1",
        "stride",
        "dw2",
        "stride",
        "dw2",
        "stride",
        "stride",
        "stride",
        "ACTIVATION",
        "activation",
        "dx",
        "view",
        "H",
        "B",
        "D",
        "dw1",
        "view",
        "H",
        "D",
        "E",
        "dw2",
        "view",
        "H",
        "E",
        "D",
        "x",
        "w1",
        "w2",
        "o",
        "activation",
        "torch",
        "bmm",
        "x",
        "w1",
        "activation",
        "torch",
        "nn",
        "functional",
        "leaky_relu",
        "z",
        "negative_slope",
        "z",
        "torch",
        "bmm",
        "torch",
        "transpose",
        "w2",
        "torch",
        "bmm",
        "torch",
        "transpose",
        "h",
        "activation",
        "dh",
        "torch",
        "where",
        "z",
        "to",
        "dh",
        "dtype",
        "dh",
        "torch",
        "bmm",
        "dz",
        "torch",
        "transpose",
        "w1",
        "torch",
        "bmm",
        "torch",
        "transpose",
        "x",
        "dz",
        "dx",
        "dw1",
        "dw2",
        "torch",
        "manual_seed",
        "time",
        "time",
        "torch",
        "bfloat16",
        "E",
        "D",
        "torch",
        "randn",
        "H",
        "B",
        "D",
        "device",
        "dtype",
        "DTYPE",
        "np",
        "sqrt",
        "D",
        "torch",
        "randn",
        "H",
        "D",
        "E",
        "device",
        "dtype",
        "DTYPE",
        "np",
        "sqrt",
        "E",
        "torch",
        "randn",
        "H",
        "E",
        "D",
        "device",
        "dtype",
        "DTYPE",
        "np",
        "sqrt",
        "D",
        "torch",
        "randn",
        "H",
        "B",
        "D",
        "device",
        "dtype",
        "DTYPE",
        "np",
        "sqrt",
        "D",
        "torch",
        "randn",
        "H",
        "B",
        "D",
        "device",
        "dtype",
        "DTYPE",
        "np",
        "sqrt",
        "D",
        "mlp_wide_triton_bwd2",
        "x",
        "w1",
        "w2",
        "o",
        "activation",
        "mlp_torch_bwd",
        "x",
        "w1",
        "w2",
        "o",
        "activation",
        "triton_output",
        "shape",
        "triton_output",
        "torch_output",
        "shape",
        "torch_output",
        "torch",
        "allclose",
        "triton_output",
        "torch_output",
        "atol",
        "eplison",
        "rtol",
        "eplison",
        "np",
        "abs",
        "triton_output",
        "to",
        "torch",
        "float32",
        "cpu",
        "numpy",
        "torch_output",
        "to",
        "torch",
        "float32",
        "cpu",
        "numpy",
        "dx_diff",
        "np",
        "abs",
        "triton_output",
        "to",
        "torch",
        "float32",
        "cpu",
        "numpy",
        "torch_output",
        "to",
        "torch",
        "float32",
        "cpu",
        "numpy",
        "eplison",
        "triton_output",
        "shape",
        "torch_output",
        "shape",
        "np",
        "max",
        "dx_diff",
        "np",
        "mean",
        "dx_diff",
        "np",
        "max",
        "dx_rel_diff",
        "np",
        "mean",
        "dx_rel_diff",
        "np",
        "abs",
        "triton_output",
        "to",
        "torch",
        "float32",
        "cpu",
        "numpy",
        "torch_output",
        "to",
        "torch",
        "float32",
        "cpu",
        "numpy",
        "dw1_diff",
        "np",
        "abs",
        "triton_output",
        "to",
        "torch",
        "float32",
        "cpu",
        "numpy",
        "torch_output",
        "to",
        "torch",
        "float32",
        "cpu",
        "numpy",
        "eplison",
        "triton_output",
        "shape",
        "torch_output",
        "shape",
        "np",
        "max",
        "dw1_diff",
        "np",
        "mean",
        "dw1_diff",
        "np",
        "max",
        "dw1_rel_diff",
        "np",
        "mean",
        "dw1_rel_diff",
        "np",
        "abs",
        "triton_output",
        "to",
        "torch",
        "float32",
        "cpu",
        "numpy",
        "torch_output",
        "to",
        "torch",
        "float32",
        "cpu",
        "numpy",
        "dw2_diff",
        "np",
        "abs",
        "triton_output",
        "to",
        "torch",
        "float32",
        "cpu",
        "numpy",
        "torch_output",
        "to",
        "torch",
        "float32",
        "cpu",
        "numpy",
        "eplison",
        "triton_output",
        "shape",
        "torch_output",
        "shape",
        "np",
        "max",
        "dw2_diff",
        "np",
        "mean",
        "dw2_diff",
        "np",
        "max",
        "dw2_rel_diff",
        "np",
        "mean",
        "dw2_rel_diff",
        "unit_test_bwd2"
    ],
    "literals": [
        "\"leaky_relu\"",
        "\"leaky_relu\"",
        "\"leaky_relu\"",
        "\"leaky_relu\"",
        "'BLOCK_SIZE_B'",
        "'BLOCK_SIZE_E'",
        "'BLOCK_SIZE_B'",
        "'BLOCK_SIZE_E'",
        "'BLOCK_SIZE_B'",
        "'BLOCK_SIZE_E'",
        "'BLOCK_SIZE_B'",
        "'BLOCK_SIZE_E'",
        "'H'",
        "'B'",
        "'D'",
        "'E'",
        "\"\"",
        "\"Incompatible dimensions\"",
        "\"Incompatible dimensions\"",
        "\"Incompatible dimensions\"",
        "\"Incompatible dimensions\"",
        "\"Incompatible dimensions\"",
        "\"Matrix X must be contiguous\"",
        "\"Matrix W1 must be contiguous\"",
        "\"Matrix W2 must be contiguous\"",
        "\"Matrix O must be contiguous\"",
        "\"Matrix dO must be contiguous\"",
        "'BLOCK_SIZE_B'",
        "'BLOCK_SIZE_E'",
        "\"\"",
        "\"leaky_relu\"",
        "\"leaky_relu\"",
        "'cuda'",
        "'cuda'",
        "'cuda'",
        "'cuda'",
        "'cuda'",
        "\"leaky_relu\"",
        "\"leaky_relu\"",
        "f\"triton_output={triton_output[1].shape, triton_output[1]}\"",
        "f\"torch_output={torch_output[1].shape, torch_output[1]}\"",
        "\"✅ Triton and Torch match\"",
        "\"❌ Triton and Torch differ\"",
        "f\"[dx: {triton_output[0].shape}, {torch_output[0].shape}] max diff: {np.max(dx_diff):.2e}, mean diff: {np.mean(dx_diff):.2e}, rel max diff: {np.max(dx_rel_diff)*100:.2f}%, rel mean diff: {np.mean(dx_rel_diff)*100:.2f}%\"",
        "f\"[dw1: {triton_output[1].shape}, {torch_output[1].shape}] max diff: {np.max(dw1_diff):.2e}, mean diff: {np.mean(dw1_diff):.2e}, rel max diff: {np.max(dw1_rel_diff)*100:.2f}%, rel mean diff: {np.mean(dw1_rel_diff)*100:.2f}%\"",
        "f\"[dw2: {triton_output[2].shape}, {torch_output[2].shape}] max diff: {np.max(dw2_diff):.2e}, mean diff: {np.mean(dw2_diff):.2e}, rel max diff: {np.max(dw2_rel_diff)*100:.2f}%, rel mean diff: {np.mean(dw2_rel_diff)*100:.2f}%\"",
        "'__main__'"
    ],
    "variables": [
        "TARGET_TYPE",
        "offs_b",
        "offs_d",
        "offs_e",
        "x_ptrs",
        "x_mask",
        "do_ptrs",
        "do_mask",
        "w1_ptrs",
        "w2_ptrs",
        "dw1_ptrs",
        "dw2_ptrs",
        "x",
        "dx",
        "w1_mask",
        "w2_mask",
        "w1",
        "w2",
        "z",
        "h",
        "h",
        "dh",
        "dz",
        "dz",
        "TARGET_TYPE",
        "offs_b",
        "offs_d",
        "offs_e",
        "x_ptrs",
        "do_ptrs",
        "do_mask",
        "w1_ptrs",
        "w1_mask",
        "w2_ptrs",
        "w2_mask",
        "w1",
        "w2",
        "dw1",
        "dw2",
        "x_mask",
        "do_mask",
        "x",
        "z",
        "h",
        "h",
        "dh",
        "dz",
        "dz",
        "pid",
        "pid_x_w",
        "batch_groups_e",
        "batch_groups_b",
        "idx",
        "pid_h",
        "TARGET_TYPE",
        "offs_b",
        "offs_d",
        "offs_e",
        "pid_b",
        "dx_ptrs",
        "dx_mask",
        "dx",
        "dx",
        "pid_e",
        "dw1_ptrs",
        "dw1_mask",
        "dw2_ptrs",
        "dw2_mask",
        "dw1",
        "dw2",
        "H",
        "B",
        "D",
        "E",
        "x",
        "w1",
        "w2",
        "o",
        "dx",
        "dw1",
        "dw2",
        "grid",
        "z",
        "h",
        "h",
        "dh",
        "dw2",
        "dz",
        "dz",
        "dx",
        "dw1",
        "DTYPE",
        "B",
        "D",
        "E",
        "H",
        "x",
        "w1",
        "w2",
        "o",
        "triton_output",
        "torch_output",
        "eplison",
        "dx_diff",
        "dx_rel_diff",
        "dw1_diff",
        "dw1_rel_diff",
        "dw2_diff",
        "dw2_rel_diff"
    ],
    "comments": [
        "We can fuse `leaky_relu` by providing it as an `ACTIVATION` meta-parameter in `_matmul`.",
        "-----------------------------------------------------------",
        "Map program ids `pid` to the block of C it should compute.",
        "pid_b = pid // H",
        "pid_h = pid % H",
        "BLOCK_SIZE_B, D",
        "BLOCK_SIZE_B, D",
        "BLOCK_SIZE_B, D",
        "D, BLOCK_SIZE_E",
        "BLOCK_SIZE_E, D",
        "BLOCK_SIZE_B, BLOCK_SIZE_E",
        "activation",
        "BLOCK_SIZE_B, BLOCK_SIZE_E",
        "BLOCK_SIZE_B, BLOCK_SIZE_E",
        "BLOCK_SIZE_B, BLOCK_SIZE_E",
        "BLOCK_SIZE_B, BLOCK_SIZE_E",
        "BLOCK_SIZE_B, D",
        "-----------------------------------------------------------",
        "Map program ids `pid` to the block of C it should compute.",
        "pid_b = pid // H",
        "pid_h = pid % H",
        "D, BLOCK_SIZE_E",
        "BLOCK_SIZE_E, D",
        "BLOCK_SIZE_B, D",
        "D, BLOCK_SIZE_E",
        "BLOCK_SIZE_E, D",
        "BLOCK_SIZE_B, D",
        "BLOCK_SIZE_B, D",
        "BLOCK_SIZE_B, BLOCK_SIZE_E",
        "activation",
        "BLOCK_SIZE_B, BLOCK_SIZE_E",
        "BLOCK_SIZE_B, BLOCK_SIZE_E",
        "BLOCK_SIZE_B, BLOCK_SIZE_E",
        "BLOCK_SIZE_E, D",
        "tl.store(dw2_ptrs, dw2, mask=dw2_mask, eviction_policy=\"evict_last\")",
        "BLOCK_SIZE_B, BLOCK_SIZE_E",
        "D, BLOCK_SIZE_E",
        "triton.Config({'BLOCK_SIZE_B': 16, 'BLOCK_SIZE_E': 16}, num_stages=4, num_warps=4),",
        "triton.Config({'BLOCK_SIZE_B': 16, 'BLOCK_SIZE_E': 32}, num_stages=4, num_warps=4),",
        "triton.Config({'BLOCK_SIZE_B': 32, 'BLOCK_SIZE_E': 16}, num_stages=4, num_warps=4),",
        "triton.Config({'BLOCK_SIZE_B': 16, 'BLOCK_SIZE_E': 64}, num_stages=2, num_warps=4),",
        "triton.Config({'BLOCK_SIZE_B': 128, 'BLOCK_SIZE_E': 64, 'GROUP_SIZE_B': 1}, num_stages=2, num_warps=4),",
        "triton.Config({'BLOCK_SIZE_B': 64, 'BLOCK_SIZE_E': 128, 'GROUP_SIZE_B': 1}, num_stages=2, num_warps=4),",
        "triton.Config({'BLOCK_SIZE_B': 128, 'BLOCK_SIZE_E': 128}, num_stages=2, num_warps=4),",
        "-----------------------------------------------------------",
        "Map program ids `pid` to the block of C it should compute.",
        "batch_groups = tl.cdiv(B, BLOCK_SIZE_B)",
        "pid_b = pid // H",
        "pid_h = pid % H",
        "BLOCK_SIZE_B, D",
        "Check constraints.",
        "Allocates output.",
        "print(dx.shape, dw1.shape, dw2.shape, do.shape)",
        "1D launch kernel where each block gets its own program.",
        "triton.cdiv(B, META['BLOCK_SIZE_B']) * H,",
        "print(dx.shape, dw1.shape, dw2.shape)",
        "x: H, B, D",
        "w1: H, D, E",
        "w2: H, E, D",
        "o: H, B, D",
        "do: H, B, D",
        "H, B, E",
        "H, B, E",
        "H, E, D",
        "H, B, E",
        "H, B, D",
        "H, D, E"
    ],
    "docstrings": [
        "\"\"\"Kernel for computing the mlp_bwd_dx\n    Z = X @ W1, H = f(Z), O = H @ W2\n    - X has shape (B, D)\n    - W1 has shape (D, E)\n    - W2 has shape (E, D)\n    - O has shape (B, D)\n    - dX has shape (B, D)\n    - dW1 has shape (D, E)\n    - dW2 has shape (E, D)\n    - dO has shape (B, D)\n    \"\"\"",
        "\"\"\"Kernel for computing the mlp_bwd_dw1w2\n    Z = X @ W1, H = f(Z), O = H @ W2\n    - X has shape (B, D)\n    - W1 has shape (D, E)\n    - W2 has shape (E, D)\n    - O has shape (B, D)\n    - dX has shape (B, D)\n    - dW1 has shape (D, E)\n    - dW2 has shape (E, D)\n    - dO has shape (B, D)\n    \"\"\"",
        "\"\"\"Kernel for computing the mlp\n    Z = X @ W1, H = f(Z), O = H @ W2\n    - X has shape (B, D)\n    - W1 has shape (D, E)\n    - W2 has shape (E, D)\n    - O has shape (B, D)\n    - dX has shape (B, D)\n    - dW1 has shape (D, E)\n    - dW2 has shape (E, D)\n    - dO has shape (B, D)\n    \"\"\""
    ],
    "functions": [
        "leaky_relu",
        "d_leacky_relu_inv_backward",
        "_mlp_wide_kernel_bwd_dx",
        "_mlp_wide_kernel_bwd_dw1w2",
        "mlp_wide_kernel_bwd2",
        "mlp_wide_triton_bwd2",
        "mlp_torch_bwd",
        "unit_test_bwd2"
    ],
    "classes": []
}