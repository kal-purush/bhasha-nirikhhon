{
    "identifiers": [
        "pars",
        "len",
        "_context_stack",
        "len",
        "pars",
        "len",
        "_context_stack",
        "len",
        "pars",
        "x",
        "pars",
        "is_context",
        "x",
        "_context_stack",
        "pos",
        "is_context",
        "pos",
        "is_context",
        "key",
        "debug",
        "_context_stack",
        "append",
        "key",
        "debug",
        "_context_stack",
        "debug",
        "key",
        "pars",
        "debug",
        "pars",
        "len",
        "_context_stack",
        "len",
        "pars",
        "is_parsing_context",
        "pars",
        "AssertionError",
        "_context_stack",
        "len",
        "pars",
        "pars",
        "_context_stack",
        "len",
        "_context_stack",
        "len",
        "pars",
        "AssertionError",
        "_context_stack",
        "pars",
        "pars",
        "debug",
        "_context_stack",
        "debug",
        "pars",
        "_context_stack"
    ],
    "literals": [
        "\"push \"",
        "\"Got context \"",
        "\", expected \"",
        "\"Got context \"",
        "\", expected \"",
        "\"Got context \"",
        "\", expected \"",
        "\"pop \""
    ],
    "variables": [
        "_context_stack",
        "_context_stack",
        "is_context",
        "pos",
        "is_context",
        "_context_stack"
    ],
    "comments": [
        "used to distinguish different contexts while parsing and interpreting the same lexemes",
        "assume the context is there"
    ],
    "docstrings": [
        "\"\"\"\n        Constructor of Context\n        \"\"\"",
        "\"\"\"\n        Check if the current parsing context ends with some given flags\n        :param pars: list of keys\n        :return: True, iif the context's tail corresponds to the keys in their order\n        \"\"\"",
        "\"\"\"\n        Pushes the parsing context on a stack\n        :param key: key of the context\n        :param debug: if not none, the current stack will be printed with this debug information\n        :return: None\n        \"\"\"",
        "\"\"\"\n        Pops the last context from the stack.\n        :param pars: a context (list) assumed to be at the tail of the stack. Raises an AssertionError if not\n        :param debug: if not none, the current stack will be printed with this debug information\n        :return: None\n        \"\"\""
    ],
    "functions": [
        "is_parsing_context",
        "push_context",
        "pop_context",
        "get_context"
    ],
    "classes": [
        "AuxContext"
    ]
}