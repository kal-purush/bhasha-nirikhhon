{
    "identifiers": [
        "Collections",
        "Generic",
        "FuncSharp",
        "Examples",
        "number",
        "divisor",
        "ITry",
        "Try",
        "Create",
        "number",
        "divisor",
        "ITry",
        "Try",
        "Create",
        "DivideByZeroException",
        "number",
        "divisor",
        "ITry",
        "number",
        "divisor",
        "ITry",
        "Try",
        "Catch",
        "number",
        "divisor",
        "ITry",
        "DivideByZeroException",
        "Try",
        "Catch",
        "DivideByZeroException",
        "number",
        "divisor",
        "Try",
        "Catch",
        "DivideByZeroException",
        "number",
        "divisor",
        "number",
        "divisor",
        "ITry",
        "NetworkOperationError",
        "Try",
        "Success",
        "NetworkOperationError",
        "ITry",
        "NetworkOperationError",
        "Try",
        "NetworkOperationError",
        "NetworkOperationError",
        "NetworkIssues",
        "ITry",
        "DivideByZeroException",
        "Try",
        "Catch",
        "DivideByZeroException",
        "number",
        "divisor",
        "ITry",
        "Try",
        "Create",
        "DivideByZeroException",
        "number",
        "divisor",
        "ITry",
        "Option",
        "Empty",
        "ITry",
        "ToTry",
        "ITry",
        "exception",
        "ToTry",
        "ITry",
        "option",
        "ToTry",
        "ITry",
        "option",
        "ToTry",
        "ITry",
        "option",
        "ToTry"
    ],
    "literals": [
        "\"No value was provided in the option.\"",
        "\"No value was provided in the option.\"",
        "\"No valid value was provided in the option.\""
    ],
    "variables": [
        "divisionHandlingAllExceptions",
        "divisionHandlingDividingByZero",
        "fullTypeOfVariable",
        "divisionHandlingDividingByZero",
        "divisionHandlingAllExceptions1",
        "divisionHandlingDividingByZero",
        "divisionResult",
        "success",
        "error",
        "divisionHandlingDividingByZero1",
        "divisionHandlingDividingByZero2",
        "fullTypeOfTryCreate",
        "divisionHandlingDividingByZero2",
        "exception",
        "option",
        "successTry",
        "errorTry",
        "tryFromOption",
        "tryFromOptionWithErrorType",
        "validationRepresentation"
    ],
    "comments": [
        "Catches any exception.",
        "Only catches a specific exception.",
        "ITry that doesn't specify the error type has a collection of exceptions by default.",
        "It is a collection because then you can aggregate multiple tries and still have the same type.",
        "Catches any exception and stores the single exception into the try.",
        "This is useful for handling individual errors, but cannot be aggregated.",
        "Only catches a specific exception. Notice that the error type is the specific type of exception, not a collection of exceptions.",
        "Catch also has an overload which allows recovering in case of exception.",
        "Generally collections are recommended for validations.",
        "It is easy to aggregate validations of multiple values into one ITry of the whole object. And then you either successfully parsed the object or you have the list of errors."
    ],
    "docstrings": [],
    "functions": [
        "HandlingExceptionsWithCreate",
        "HandlingExceptionsWithCatch",
        "ITryCreatingExamples"
    ],
    "classes": [
        "ITryCreationExamples"
    ]
}