{
    "identifiers": [
        "time",
        "numpy",
        "np",
        "imutils",
        "cv2",
        "tflite_runtime",
        "interpreter",
        "Interpreter",
        "Maskdetector",
        "webcamCapture",
        "tensorflow",
        "keras",
        "applications",
        "mobilenet_v2",
        "preprocess_input",
        "tensorflow",
        "keras",
        "preprocessing",
        "image",
        "img_to_array",
        "cv2",
        "dnn",
        "readNet",
        "prototxtPath",
        "weightsPath",
        "path",
        "open",
        "path",
        "f",
        "i",
        "line",
        "strip",
        "i",
        "line",
        "f",
        "readlines",
        "interpreter",
        "image",
        "interpreter",
        "get_input_details",
        "interpreter",
        "tensor",
        "tensor_index",
        "image",
        "interpreter",
        "image",
        "top_k",
        "set_input_tensor",
        "interpreter",
        "image",
        "interpreter",
        "invoke",
        "interpreter",
        "get_output_details",
        "np",
        "squeeze",
        "interpreter",
        "get_tensor",
        "output_details",
        "output_details",
        "np",
        "uint8",
        "output_details",
        "scale",
        "output",
        "zero_point",
        "np",
        "argpartition",
        "output",
        "top_k",
        "i",
        "output",
        "i",
        "i",
        "ordered",
        "top_k",
        "frame",
        "faceNet",
        "frame",
        "shape",
        "cv2",
        "dnn",
        "blobFromImage",
        "frame",
        "faceNet",
        "setInput",
        "blob",
        "faceNet",
        "forward",
        "detections",
        "shape",
        "i",
        "detections",
        "shape",
        "detections",
        "i",
        "confidence",
        "detections",
        "i",
        "np",
        "array",
        "w",
        "h",
        "w",
        "h",
        "box",
        "astype",
        "max",
        "startX",
        "max",
        "startY",
        "min",
        "w",
        "endX",
        "min",
        "h",
        "endY",
        "frame",
        "startY",
        "endY",
        "startX",
        "endX",
        "cv2",
        "cvtColor",
        "face",
        "cv2",
        "COLOR_BGR2RGB",
        "cv2",
        "resize",
        "face",
        "img_to_array",
        "face",
        "preprocess_input",
        "face",
        "faces",
        "append",
        "face",
        "locs",
        "append",
        "startX",
        "startY",
        "endX",
        "endY",
        "len",
        "faces",
        "np",
        "array",
        "faces",
        "dtype",
        "faces",
        "locs",
        "Interpreter",
        "model",
        "interpreter",
        "allocate_tensors",
        "interpreter",
        "get_input_details",
        "webcamCapture",
        "stream",
        "start",
        "stream",
        "read",
        "imutils",
        "resize",
        "frame",
        "width",
        "detect_face",
        "frame",
        "faceNet",
        "classify_image",
        "interpreter",
        "image",
        "val",
        "pred",
        "results",
        "val",
        "pred",
        "cv2",
        "putText",
        "frame",
        "label",
        "cv2",
        "FONT_HERSHEY_SIMPLEX",
        "color",
        "cv2",
        "imshow",
        "frame",
        "cv2",
        "waitKey",
        "key",
        "ord",
        "stream",
        "stop",
        "cv2",
        "destroyAllWindows",
        "main"
    ],
    "literals": [
        "r\"deploy.prototxt\"",
        "r\"res10_300x300_ssd_iter_140000.caffemodel\"",
        "'/home/pi/Downloads/STeM_CV/model.tflite'",
        "'r'",
        "'index'",
        "'index'",
        "'dtype'",
        "'quantization'",
        "\"int\"",
        "\"float32\"",
        "'shape'",
        "\"[INFO] starting video stream...\"",
        "'No mask'",
        "'mask detected'",
        "'Frame'",
        "'q'",
        "'__main__'"
    ],
    "variables": [
        "prototxtPath",
        "weightsPath",
        "faceNet",
        "model",
        "color",
        "tensor_index",
        "input_tensor",
        "input_tensor",
        "output_details",
        "output",
        "scale",
        "zero_point",
        "output",
        "ordered",
        "h",
        "w",
        "blob",
        "detections",
        "faces",
        "locs",
        "preds",
        "confidence",
        "box",
        "startX",
        "startY",
        "endX",
        "endY",
        "startX",
        "startY",
        "endX",
        "endY",
        "face",
        "face",
        "face",
        "face",
        "face",
        "faces",
        "interpreter",
        "_",
        "height",
        "width",
        "_",
        "stream",
        "frame",
        "frame",
        "image",
        "locs",
        "results",
        "label",
        "label",
        "key"
    ],
    "comments": [
        "required variables and uploads",
        "If the model is quantized (uint8 data), then dequantize the results",
        "grab the dimensions of the frame and then construct a blob",
        "from it",
        "pass the blob through the network and obtain the face detections",
        "initialize our list of faces, their corresponding locations,",
        "and the list of predictions from our face mask network",
        "loop over the detections",
        "extract the confidence (i.e., probability) associated with",
        "the detection",
        "filter out weak detections by ensuring the confidence is",
        "greater than the minimum confidence",
        "compute the (x, y)-coordinates of the bounding box for",
        "the object",
        "ensure the bounding boxes fall within the dimensions of",
        "the frame",
        "extract the face ROI, convert it from BGR to RGB channel",
        "ordering, resize it to 224x224, and preprocess it",
        "add the face and bounding boxes to their respective",
        "lists",
        "only make a predictions if at least one face was detected",
        "return a 2-tuple of the faces and their corresponding",
        "locations",
        "load our serialized face detector model from disk",
        "print(results)",
        "print(label)",
        "press q to exit()"
    ],
    "docstrings": [
        "\"\"\"Returns a sorted array of classification results.\"\"\"",
        "''' isolate faces from the given frame'''"
    ],
    "functions": [
        "load_labels",
        "set_input_tensor",
        "classify_image",
        "detect_face",
        "main"
    ],
    "classes": []
}