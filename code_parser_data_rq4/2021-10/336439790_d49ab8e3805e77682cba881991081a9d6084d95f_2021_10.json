{
    "identifiers": [
        "faker",
        "EncryptStorageOptions",
        "AsyncEncryptStorage",
        "InvalidSecretKeyError",
        "makeSut",
        "faker",
        "noOptions",
        "AsyncEncryptStorage",
        "secretKey",
        "options",
        "describe",
        "beforeEach",
        "localStorage",
        "it",
        "makeSut",
        "faker",
        "safeStorage",
        "key",
        "faker",
        "expect",
        "localStorage",
        "it",
        "makeSut",
        "faker",
        "safeStorage",
        "key",
        "faker",
        "expect",
        "sessionStorage",
        "it",
        "makeSut",
        "faker",
        "safeStorage",
        "key",
        "expect",
        "localStorage",
        "key",
        "it",
        "makeSut",
        "faker",
        "faker",
        "safeStorage",
        "key",
        "value",
        "safeStorage",
        "key",
        "expect",
        "storagedDecrypetdValue",
        "value",
        "it",
        "makeSut",
        "faker",
        "faker",
        "safeStorage",
        "key",
        "value",
        "safeStorage",
        "key",
        "expect",
        "storagedDecrypetdValue",
        "value",
        "it",
        "makeSut",
        "faker",
        "safeStorage",
        "key",
        "expect",
        "localStorage",
        "key",
        "it",
        "faker",
        "makeSut",
        "faker",
        "prefix",
        "key",
        "safeStorage",
        "key",
        "expect",
        "localStorage",
        "composedKey",
        "it",
        "makeSut",
        "faker",
        "pattern",
        "pattern",
        "userKey",
        "faker",
        "itemKey",
        "faker",
        "safeStorage",
        "userKey",
        "mockedValue",
        "userKey",
        "safeStorage",
        "itemKey",
        "mockedValue",
        "itemKey",
        "safeStorage",
        "pattern",
        "expect",
        "localStorage",
        "userKey",
        "expect",
        "localStorage",
        "itemKey",
        "expect",
        "storagedValue",
        "mockedValue",
        "it",
        "makeSut",
        "faker",
        "safeStorage",
        "pattern",
        "expect",
        "storagedValue",
        "it",
        "makeSut",
        "faker",
        "pattern",
        "pattern",
        "safeStorage",
        "userKey",
        "safeStorage",
        "itemKey",
        "safeStorage",
        "pattern",
        "expect",
        "localStorage",
        "userKey",
        "expect",
        "localStorage",
        "itemKey",
        "it",
        "makeSut",
        "faker",
        "faker",
        "faker",
        "safeStorage",
        "key1",
        "anyValue",
        "safeStorage",
        "key2",
        "anyValue",
        "safeStorage",
        "expect",
        "localStorage",
        "expect",
        "safeStorageLength",
        "safeStorage",
        "safeStorageLength",
        "safeStorage",
        "expect",
        "localStorage",
        "expect",
        "safeStorageLength",
        "it",
        "makeSut",
        "faker",
        "faker",
        "safeStorage",
        "key1",
        "safeStorage",
        "key2",
        "safeStorage",
        "safeStorage",
        "safeStorage",
        "expect",
        "safeKey1",
        "key1",
        "expect",
        "safeKey2",
        "key2",
        "expect",
        "safeKey3",
        "it",
        "makeSut",
        "faker",
        "safeStorage",
        "key",
        "faker",
        "safeStorage",
        "key",
        "expect",
        "value",
        "it",
        "makeSut",
        "safeStorage",
        "expect",
        "value",
        "it",
        "faker",
        "makeSut",
        "safeStorage",
        "key",
        "faker",
        "safeStorage",
        "key",
        "expect",
        "localStorage",
        "prefix",
        "key",
        "it",
        "makeSut",
        "faker",
        "error",
        "expect",
        "error",
        "InvalidSecretKeyError",
        "it",
        "makeSut",
        "faker",
        "safeStorage",
        "value",
        "expect",
        "result",
        "value",
        "it",
        "makeSut",
        "faker",
        "safeStorage",
        "value",
        "safeStorage",
        "encryptedValue",
        "expect",
        "decryptedValue",
        "value",
        "it",
        "makeSut",
        "faker",
        "safeStorage",
        "key",
        "expect",
        "localStorage",
        "key",
        "it",
        "makeSut",
        "faker",
        "faker",
        "safeStorage",
        "key",
        "value",
        "safeStorage",
        "key",
        "expect",
        "localStorage",
        "expect",
        "localStorage",
        "key",
        "it",
        "makeSut",
        "faker",
        "faker",
        "safeStorage",
        "key",
        "value",
        "safeStorage",
        "key",
        "expect",
        "localStorage",
        "expect",
        "localStorage",
        "key",
        "it",
        "makeSut",
        "faker",
        "faker",
        "safeStorage",
        "key",
        "value",
        "safeStorage",
        "key",
        "expect",
        "localStorage",
        "expect",
        "localStorage",
        "key"
    ],
    "literals": [
        "'jest-localstorage-mock'",
        "'faker'",
        "'../src'",
        "'../src/errors'",
        "string",
        "'AsyncEncryptStorage'",
        "'should enshure localStorage been called'",
        "'should enshure sessionStorage been called'",
        "'sessionStorage'",
        "'should calls localStorage.getItem with correct key'",
        "'should localStorage.getItem returns correct decrypted value'",
        "'should localStorage.getItem returns correct decrypted value when is a string'",
        "'should calls localStorage.removeItem with correct key'",
        "'should calls localStorage.removeItem with correct prefix and key'",
        "${prefix}:${key}",
        "'should calls localStorage.getItem for all items with this pattern'",
        "${pattern}:user",
        "${pattern}:item",
        "'should calls localStorage.getItem with getItemFromPattern returns undefined'",
        "'should calls localStorage.removeItem for all items with this pattern'",
        "${pattern}:user",
        "${pattern}:item",
        "'should calls localStorage.clear'",
        "'should get correct key insted of index'",
        "'any_value'",
        "'any_value'",
        "'should return string if stateManagementUse is true'",
        "'string'",
        "'should return undefined when key not exists'",
        "'unknow_key'",
        "'should use prefix with key'",
        "'@test'",
        "${prefix}:${key}",
        "'should throws InvalidSecretKeyError if secret key is invalid'",
        "'should encrypt string and return encrypted value'",
        "'should dencrypt string and return decrypted value'",
        "'should test encryptStorage without options'",
        "'should test Rabbit algorithm'",
        "'Rabbit'",
        "'should test RC4 algorithm'",
        "'RC4'",
        "'should test RC4Drop algorithm'",
        "'RC4Drop'"
    ],
    "variables": [
        "makeSut",
        "options",
        "safeStorage",
        "key",
        "safeStorage",
        "key",
        "safeStorage",
        "key",
        "safeStorage",
        "key",
        "value",
        "storagedDecrypetdValue",
        "safeStorage",
        "key",
        "value",
        "storagedDecrypetdValue",
        "safeStorage",
        "key",
        "prefix",
        "safeStorage",
        "key",
        "composedKey",
        "safeStorage",
        "pattern",
        "userKey",
        "itemKey",
        "mockedValue",
        "storagedValue",
        "safeStorage",
        "pattern",
        "storagedValue",
        "safeStorage",
        "pattern",
        "userKey",
        "itemKey",
        "safeStorage",
        "key1",
        "key2",
        "anyValue",
        "safeStorageLength",
        "safeStorage",
        "key1",
        "key2",
        "safeKey1",
        "safeKey2",
        "safeKey3",
        "safeStorage",
        "key",
        "value",
        "safeStorage",
        "value",
        "prefix",
        "key",
        "safeStorage",
        "safeStorage",
        "value",
        "result",
        "safeStorage",
        "value",
        "encryptedValue",
        "decryptedValue",
        "safeStorage",
        "key",
        "safeStorage",
        "key",
        "value",
        "safeStorage",
        "key",
        "value",
        "safeStorage",
        "key",
        "value"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [],
    "classes": []
}