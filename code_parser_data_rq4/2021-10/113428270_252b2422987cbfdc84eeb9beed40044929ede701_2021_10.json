{
    "identifiers": [
        "org",
        "hibernate",
        "search",
        "mapper",
        "orm",
        "coordination",
        "databasepolling",
        "impl",
        "java",
        "lang",
        "invoke",
        "MethodHandles",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "java",
        "util",
        "javax",
        "persistence",
        "OptimisticLockException",
        "org",
        "hibernate",
        "LockMode",
        "org",
        "hibernate",
        "LockOptions",
        "org",
        "hibernate",
        "Session",
        "org",
        "hibernate",
        "query",
        "Query",
        "org",
        "hibernate",
        "search",
        "mapper",
        "orm",
        "coordination",
        "databasepolling",
        "logging",
        "impl",
        "Log",
        "org",
        "hibernate",
        "search",
        "util",
        "common",
        "logging",
        "impl",
        "LoggerFactory",
        "LOAD_QUERY",
        "log",
        "LoggerFactory",
        "make",
        "MethodHandles",
        "lookup",
        "session",
        "ids",
        "processorName",
        "tryLoadLocking",
        "session",
        "ids",
        "lockException",
        "log",
        "outboxEventProcessorUnableToLock",
        "processorName",
        "lockException",
        "Collections",
        "emptyList",
        "session",
        "ids",
        "query",
        "session",
        "createQuery",
        "LOAD_QUERY",
        "query",
        "setParameter",
        "ids",
        "query",
        "setLockOptions",
        "LockMode",
        "PESSIMISTIC_WRITE",
        "setTimeOut",
        "LockOptions",
        "SKIP_LOCKED",
        "query",
        "getResultList"
    ],
    "literals": [
        "\"select e from OutboxEvent e where e.id in (:ids)\"",
        "\"ids\""
    ],
    "variables": [],
    "comments": [
        "Don't be fooled by the exception type, this is actually a *pessimistic* lock failure.",
        "It can happen with some databases (Mariadb before 10.6, perhaps others) that do not support",
        "skipping locked rows (see LockOptions.SKIP).",
        "If that happens, we will just log something and try again later.",
        "See also https://jira.mariadb.org/browse/MDEV-13115",
        "HSEARCH-4289: some databases encounter deadlocks when multiple processors query or delete events",
        "in concurrent transactions.",
        "The deadlocks are mostly caused by lock escalation,",
        "e.g. MS SQL deciding it does not have enough resources to perform row-level locks",
        "and thus locking whole pages instead. This means that even though processors deal",
        "with strictly distinct subsets of the outbox events (thanks to sharding),",
        "they will actually end up locking more than their subset,",
        "and then conflicts *can* occur.",
        "Disabling locks is not an option: we cannot disable locking during deletes.",
        "Thus, our last option is to actually enforce locks ahead of time (LockModeType.PESSIMISTIC_WRITE),",
        "and to avoid conflicts by simply never working on events that are already locked (LockOptions.SKIP_LOCKED).",
        "That's possible because event processing is not sensitive to processing order,",
        "so we can afford to just skip events that are already locked,",
        "and process them later when they are no longer locked."
    ],
    "docstrings": [
        "* Hibernate Search, full-text search for your domain model\n *\n * License: GNU Lesser General Public License (LGPL), version 2.1 or later\n * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>."
    ],
    "functions": [
        "OutboxEventLoader",
        "loadLocking",
        "tryLoadLocking"
    ],
    "classes": [
        "OutboxEventLoader"
    ]
}