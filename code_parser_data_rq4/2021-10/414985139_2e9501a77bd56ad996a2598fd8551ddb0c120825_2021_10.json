{
    "identifiers": [
        "hasLocalStorage",
        "localStorage",
        "error",
        "process",
        "hasLocalStorage",
        "localStorage",
        "hasProcess",
        "process",
        "shouldDebug",
        "_message",
        "_optionalParams",
        "fileName",
        "fileName",
        "content",
        "fileName",
        "content",
        "replaceTextSpan",
        "sys",
        "rootFiles",
        "ts",
        "compilerOptions",
        "customTransformers",
        "defaultCompilerOptions",
        "ts",
        "compilerOptions",
        "createVirtualLanguageServiceHost",
        "sys",
        "rootFiles",
        "mergedCompilerOpts",
        "ts",
        "customTransformers",
        "ts",
        "languageServiceHost",
        "languageService",
        "diagnostics",
        "createVirtualCompilerHost",
        "sys",
        "compilerOptions",
        "ts",
        "ts",
        "diagnostics",
        "compilerHost",
        "fileName",
        "languageService",
        "fileName",
        "fileName",
        "content",
        "updateFile",
        "ts",
        "fileName",
        "content",
        "mergedCompilerOpts",
        "fileName",
        "content",
        "optPrevTextSpan",
        "languageService",
        "fileName",
        "prevSourceFile",
        "fileName",
        "prevSourceFile",
        "optPrevTextSpan",
        "ts",
        "prevFullContents",
        "prevFullContents",
        "prevTextSpan",
        "content",
        "prevFullContents",
        "prevTextSpan",
        "prevTextSpan",
        "ts",
        "prevSourceFile",
        "newText",
        "prevTextSpan",
        "content",
        "updateFile",
        "newSourceFile",
        "knownLibFilesForCompilerOptions",
        "compilerOptions",
        "ts",
        "compilerOptions",
        "ts",
        "compilerOptions",
        "ts",
        "target",
        "files",
        "f",
        "f",
        "targetToCut",
        "files",
        "matches",
        "getMax",
        "array",
        "array",
        "array",
        "array",
        "max",
        "current",
        "current",
        "max",
        "current",
        "max",
        "lib",
        "lib",
        "files",
        "f",
        "f",
        "lib",
        "matches",
        "files",
        "matches",
        "cutIndex",
        "getMax",
        "indexesForCutting",
        "targetCutIndex",
        "libCutIndex",
        "files",
        "finalCutIndex",
        "createDefaultMapFromNodeModules",
        "compilerOptions",
        "ts",
        "ts",
        "require",
        "requirePath",
        "requireFS",
        "getLib",
        "name",
        "path",
        "require",
        "fs",
        "path",
        "lib",
        "name",
        "knownLibFilesForCompilerOptions",
        "compilerOptions",
        "tsModule",
        "libs",
        "lib",
        "fsMap",
        "lib",
        "getLib",
        "lib",
        "fsMap",
        "addAllFilesFromFolder",
        "workingDir",
        "requirePath",
        "requireFS",
        "dir",
        "fs",
        "dir",
        "file",
        "file",
        "path",
        "dir",
        "file",
        "fs",
        "file",
        "stat",
        "stat",
        "results",
        "results",
        "walk",
        "file",
        "results",
        "file",
        "results",
        "walk",
        "workingDir",
        "allFiles",
        "lib",
        "lib",
        "workingDir",
        "fs",
        "lib",
        "validExtensions",
        "path",
        "fsPath",
        "fsPath",
        "content",
        "addFilesForTypesIntoFolder",
        "addAllFilesFromFolder",
        "createDefaultMapFromCDN",
        "options",
        "version",
        "cache",
        "ts",
        "lzstring",
        "fetcher",
        "fetch",
        "storer",
        "localStorage",
        "fetcher",
        "fetch",
        "knownLibFilesForCompilerOptions",
        "options",
        "ts",
        "version",
        "lzstring",
        "lzstring",
        "lzstring",
        "lzstring",
        "files",
        "lib",
        "fetchlike",
        "prefix",
        "lib",
        "resp",
        "resp",
        "contents",
        "contents",
        "text",
        "index",
        "fsMap",
        "files",
        "index",
        "text",
        "storer",
        "localStorage",
        "localStorage",
        "keys",
        "key",
        "key",
        "key",
        "version",
        "storelike",
        "key",
        "files",
        "lib",
        "version",
        "lib",
        "storelike",
        "cacheKey",
        "content",
        "fetchlike",
        "prefix",
        "lib",
        "resp",
        "resp",
        "t",
        "storelike",
        "cacheKey",
        "t",
        "t",
        "unzip",
        "content",
        "contents",
        "contents",
        "text",
        "index",
        "files",
        "index",
        "fsMap",
        "name",
        "text",
        "cache",
        "cached",
        "uncached",
        "func",
        "fsMap",
        "methodName",
        "methodName",
        "name",
        "fn",
        "args",
        "args",
        "args",
        "fn",
        "args",
        "res",
        "res",
        "res",
        "debugLog",
        "name",
        "args",
        "debugLog",
        "smallres",
        "res",
        "defaultCompilerOptions",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "libize",
        "path",
        "path",
        "files",
        "notImplemented",
        "audit",
        "directory",
        "files",
        "path",
        "path",
        "directory",
        "notImplemented",
        "audit",
        "fileName",
        "files",
        "fileName",
        "files",
        "libize",
        "fileName",
        "notImplemented",
        "audit",
        "directory",
        "files",
        "x",
        "x",
        "directory",
        "audit",
        "fileName",
        "files",
        "fileName",
        "files",
        "libize",
        "fileName",
        "path",
        "path",
        "notImplemented",
        "fileName",
        "contents",
        "files",
        "fileName",
        "contents",
        "files",
        "_projectRoot",
        "ts",
        "_projectRoot",
        "requirePath",
        "ts",
        "path",
        "require",
        "notImplemented",
        "audit",
        "directory",
        "files",
        "path",
        "path",
        "directory",
        "nodeSys",
        "directory",
        "nodeSys",
        "audit",
        "fileName",
        "files",
        "fileName",
        "fileName",
        "fileName",
        "fileName",
        "tsLib",
        "fileName",
        "nodeSys",
        "tsLibName",
        "nodeSys",
        "fileName",
        "root",
        "nodeSys",
        "notImplemented",
        "audit",
        "args",
        "args",
        "files",
        "nodeSys",
        "args",
        "audit",
        "fileName",
        "files",
        "fileName",
        "files",
        "fileName",
        "fileName",
        "tsLib",
        "fileName",
        "nodeSys",
        "tsLibName",
        "result",
        "nodeSys",
        "tsLib",
        "tsLibName",
        "libs",
        "result",
        "nodeSys",
        "fileName",
        "path",
        "files",
        "path",
        "path",
        "nodeSys",
        "path",
        "notImplemented",
        "fileName",
        "contents",
        "files",
        "fileName",
        "contents",
        "sys",
        "compilerOptions",
        "ts",
        "save",
        "sourceFile",
        "sourceFiles",
        "sourceFile",
        "sourceFile",
        "sourceFile",
        "sourceFile",
        "sys",
        "fileName",
        "fileName",
        "ts",
        "compilerOptions",
        "sys",
        "fileName",
        "sourceFiles",
        "fileName",
        "save",
        "ts",
        "fileName",
        "sys",
        "fileName",
        "compilerOptions",
        "defaultCompilerOptions",
        "ts",
        "sys",
        "sourceFile",
        "sourceFiles",
        "sourceFile",
        "sys",
        "sourceFile",
        "sourceFile",
        "sourceFiles",
        "sourceFile",
        "sourceFile",
        "alreadyExists",
        "vHost",
        "sys",
        "rootFiles",
        "compilerOptions",
        "ts",
        "customTransformers",
        "rootFiles",
        "createVirtualCompilerHost",
        "sys",
        "compilerOptions",
        "ts",
        "compilerHost",
        "projectVersion",
        "compilerOptions",
        "customTransformers",
        "fileNames",
        "fileName",
        "sys",
        "fileName",
        "contents",
        "ts",
        "contents",
        "fileName",
        "fileVersions",
        "fileName",
        "sys",
        "sourceFile",
        "sourceFile",
        "projectVersion",
        "fileVersions",
        "sourceFile",
        "projectVersion",
        "fileNames",
        "sourceFile",
        "fileNames",
        "sourceFile",
        "updateFile",
        "sourceFile",
        "lsHost",
        "requirePath",
        "require",
        "requireFS",
        "require"
    ],
    "literals": [
        "\"typescript\"",
        "\"typescript\"",
        "\"typescript\"",
        "\"typescript\"",
        "\"typescript\"",
        "\"typescript\"",
        "\"typescript\"",
        "undefined",
        "undefined",
        "\"DEBUG\"",
        "\"\"",
        "\"typescript\"",
        "string",
        "\"typescript\"",
        "string",
        "string",
        "string",
        "string",
        "\"typescript\"",
        "string",
        "\"vfs\"",
        "\"Did not find a source file for \"",
        "\"lib.d.ts\"",
        "\"lib.dom.d.ts\"",
        "\"lib.dom.iterable.d.ts\"",
        "\"lib.webworker.d.ts\"",
        "\"lib.webworker.importscripts.d.ts\"",
        "\"lib.scripthost.d.ts\"",
        "\"lib.es5.d.ts\"",
        "\"lib.es6.d.ts\"",
        "\"lib.es2015.collection.d.ts\"",
        "\"lib.es2015.core.d.ts\"",
        "\"lib.es2015.d.ts\"",
        "\"lib.es2015.generator.d.ts\"",
        "\"lib.es2015.iterable.d.ts\"",
        "\"lib.es2015.promise.d.ts\"",
        "\"lib.es2015.proxy.d.ts\"",
        "\"lib.es2015.reflect.d.ts\"",
        "\"lib.es2015.symbol.d.ts\"",
        "\"lib.es2015.symbol.wellknown.d.ts\"",
        "\"lib.es2016.array.include.d.ts\"",
        "\"lib.es2016.d.ts\"",
        "\"lib.es2016.full.d.ts\"",
        "\"lib.es2017.d.ts\"",
        "\"lib.es2017.full.d.ts\"",
        "\"lib.es2017.intl.d.ts\"",
        "\"lib.es2017.object.d.ts\"",
        "\"lib.es2017.sharedmemory.d.ts\"",
        "\"lib.es2017.string.d.ts\"",
        "\"lib.es2017.typedarrays.d.ts\"",
        "\"lib.es2018.asyncgenerator.d.ts\"",
        "\"lib.es2018.asynciterable.d.ts\"",
        "\"lib.es2018.d.ts\"",
        "\"lib.es2018.full.d.ts\"",
        "\"lib.es2018.intl.d.ts\"",
        "\"lib.es2018.promise.d.ts\"",
        "\"lib.es2018.regexp.d.ts\"",
        "\"lib.es2019.array.d.ts\"",
        "\"lib.es2019.d.ts\"",
        "\"lib.es2019.full.d.ts\"",
        "\"lib.es2019.object.d.ts\"",
        "\"lib.es2019.string.d.ts\"",
        "\"lib.es2019.symbol.d.ts\"",
        "\"lib.es2020.d.ts\"",
        "\"lib.es2020.full.d.ts\"",
        "\"lib.es2020.string.d.ts\"",
        "\"lib.es2020.symbol.wellknown.d.ts\"",
        "\"lib.es2020.bigint.d.ts\"",
        "\"lib.es2020.promise.d.ts\"",
        "\"lib.es2020.sharedmemory.d.ts\"",
        "\"lib.es2020.intl.d.ts\"",
        "\"lib.es2021.d.ts\"",
        "\"lib.es2021.full.d.ts\"",
        "\"lib.es2021.promise.d.ts\"",
        "\"lib.es2021.string.d.ts\"",
        "\"lib.es2021.weakref.d.ts\"",
        "\"lib.esnext.d.ts\"",
        "\"lib.esnext.full.d.ts\"",
        "\"lib.esnext.intl.d.ts\"",
        "\"lib.esnext.promise.d.ts\"",
        "\"lib.esnext.string.d.ts\"",
        "\"lib.esnext.weakref.d.ts\"",
        "lib.${targetToCut.toLowerCase()}",
        "lib.${lib.toLowerCase()}",
        "\"typescript\"",
        "\"typescript\"",
        "string",
        "\"typescript\"",
        "\"utf8\"",
        "string",
        "string",
        "\"/\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"/node_modules/@types\"",
        "\"\"",
        "\"utf8\"",
        "\".ts\"",
        "\".tsx\"",
        "string",
        "string",
        "\"node_modules/@types\"",
        "string",
        "\"lz-string\"",
        "string",
        "string",
        "https://typescript.azureedge.net/cdn/${version}/typescript/lib/",
        "string",
        "string",
        "\"/\"",
        "\"ts-lib-\"",
        "\"ts-lib-\"",
        "ts-lib-${version}-${lib}",
        "\"/\"",
        "''",
        "string",
        "Method '${methodName}' is not implemented.",
        "string",
        "\"string\"",
        "\"...\"",
        "\"> \"",
        "\"< \"",
        "\"typescript\"",
        "string",
        "\"/\"",
        "\"/lib.\"",
        "string",
        "string",
        "\"createDirectory\"",
        "\"directoryExists\"",
        "\"exit\"",
        "\"fileExists\"",
        "\"/\"",
        "\"getExecutingFilePath\"",
        "\"readDirectory\"",
        "\"readFile\"",
        "\"\\n\"",
        "\"write\"",
        "string",
        "string",
        "string",
        "\"/vfs\"",
        "\"typescript\"",
        "\"fs-vfs\"",
        "\"createDirectory\"",
        "\"directoryExists\"",
        "\"fileExists\"",
        "\"tsconfig.json\"",
        "\"tsconfig.json\"",
        "\"/lib\"",
        "${tsLib}/${fileName.replace(\"/\", \"\")}",
        "\"/\"",
        "\"\"",
        "\"getExecutingFilePath\"",
        "\"readDirectory\"",
        "\"/\"",
        "\"readFile\"",
        "\"/lib\"",
        "${tsLib}/${fileName.replace(\"/\", \"\")}",
        "\"/\"",
        "\"\"",
        "TSVFS: A request was made for ${tsLibName} but there wasn't a file found in the file map. You likely have a mismatch in the compiler options for the CDN download vs the compiler program. Existing Libs: ${libs}.",
        "\"\\n\"",
        "\"write\"",
        "string",
        "\"/\"",
        "string",
        "string",
        "string",
        "\"0\"",
        "\"typescript\"",
        "\"path\"",
        "\"fs\""
    ],
    "variables": [
        "hasLocalStorage",
        "hasProcess",
        "shouldDebug",
        "debugLog",
        "mergedCompilerOpts",
        "languageService",
        "diagnostics",
        "compilerHost",
        "prevSourceFile",
        "prevFullContents",
        "prevTextSpan",
        "newText",
        "newSourceFile",
        "knownLibFilesForCompilerOptions",
        "target",
        "lib",
        "files",
        "targetToCut",
        "matches",
        "targetCutIndex",
        "getMax",
        "indexesForCutting",
        "matches",
        "cutIndex",
        "libCutIndex",
        "finalCutIndex",
        "createDefaultMapFromNodeModules",
        "tsModule",
        "path",
        "fs",
        "getLib",
        "lib",
        "libs",
        "fsMap",
        "addAllFilesFromFolder",
        "path",
        "fs",
        "walk",
        "results",
        "stat",
        "allFiles",
        "fsPath",
        "content",
        "validExtensions",
        "addFilesForTypesIntoFolder",
        "createDefaultMapFromCDN",
        "fetchlike",
        "fsMap",
        "files",
        "prefix",
        "storelike",
        "keys",
        "cacheKey",
        "content",
        "name",
        "func",
        "res",
        "smallres",
        "defaultCompilerOptions",
        "libize",
        "root",
        "path",
        "nodeSys",
        "tsLib",
        "tsLibName",
        "tsLibName",
        "result",
        "libs",
        "sourceFiles",
        "save",
        "vHost",
        "alreadyExists",
        "fileNames",
        "fileVersions",
        "projectVersion",
        "languageServiceHost",
        "contents",
        "lsHost",
        "requirePath",
        "requireFS"
    ],
    "comments": [
        "https://github.com/microsoft/TypeScript-Website/tree/v2/packages/typescript-vfs\nThe MIT License (MIT)\nCopyright (c) Microsoft Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and \nassociated documentation files (the \"Software\"), to deal in the Software without restriction, \nincluding without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, \nand/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, \nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial \nportions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT \nNOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, \nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE \nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "@ts-ignore",
        "TODO: Validate if the default text span has a fencepost error?",
        "Find the index for everything in",
        "Recurse into a subdirectory",
        "Is a file",
        "Adds all files from node_modules/@types into the FS Map",
        "Map the known libs to a node fetch promise, then return the contents",
        "A localstorage and lzzip aware version of the lib files",
        "Remove anything which isn't from this version",
        "Make the API call and store the text concent in the cache",
        "The default compiler options if TypeScript could ever change the compiler options",
        "\"/DOM.d.ts\" => \"/lib.dom.d.ts\"",
        "TODO: could make a real file tree",
        "We need to make an isolated folder for the tsconfig, but also need to be able to resolve the",
        "existing node_modules structures going back through the history",
        "The default System in TypeScript",
        "@ts-ignore",
        "TODO: could make a real file tree",
        "Don't let other tsconfigs end up touching the vfs",
        "'/lib.d.ts',",
        "getDefaultLibLocation: () => '/',"
    ],
    "docstrings": [
        "* Makes a virtual copy of the TypeScript environment. This is the main API you want to be using with\n * @typescript/vfs. A lot of the other exposed functions are used by this function to get set up.\n *\n * @param sys an object which conforms to the TS Sys (a shim over read/write access to the fs)\n * @param rootFiles a list of files which are considered inside the project\n * @param ts a copy pf the TypeScript module\n * @param compilerOptions the options for this compiler run\n * @param customTransformers custom transformers for this compiler run",
        "* Grab the list of lib files for a particular target, will return a bit more than necessary (by including\n * the dom) but that's OK\n *\n * @param target The compiler settings target baseline\n * @param ts A copy of the TypeScript module",
        "* Sets up a Map with lib contents by grabbing the necessary files from\n * the local copy of typescript via the file system.",
        "* Adds recursively files from the FS into the map based on the folder",
        "* Create a virtual FS Map with the lib files from a particular TypeScript\n * version based on the target, Always includes dom ATM.\n *\n * @param options The compiler target, which dictates the libs to set up\n * @param version the versions of TypeScript which are supported\n * @param cache should the values be stored in local storage\n * @param ts a copy of the typescript import\n * @param lzstring an optional copy of the lz-string import\n * @param fetcher an optional replacement for the global fetch function (tests mainly)\n * @param storer an optional replacement for the localStorage global (tests mainly)",
        "* Creates an in-memory System object which can be used in a TypeScript program, this\n * is what provides read/write aspects of the virtual fs",
        "* Creates a file-system backed System object which can be used in a TypeScript program, you provide\n * a set of virtual files which are prioritised over the FS versions, then a path to the root of your\n * project (basically the folder your node_modules lives)",
        "* Creates an in-memory CompilerHost -which is essentially an extra wrapper to System\n * which works with TypeScript objects - returns both a compiler host, and a way to add new SourceFile\n * instances to the in-memory file system.",
        "* Creates an object which can host a language service against the virtual file-system"
    ],
    "functions": [
        "createVirtualTypeScriptEnvironment",
        "unzip",
        "uncached",
        "cached",
        "notImplemented",
        "audit",
        "createSystem",
        "createFSBackedSystem",
        "createVirtualCompilerHost",
        "createVirtualLanguageServiceHost"
    ],
    "classes": []
}