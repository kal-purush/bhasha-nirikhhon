{
    "identifiers": [
        "Enum",
        "typing",
        "cast",
        "Tuple",
        "TYPE_CHECKING",
        "types",
        "TealType",
        "require_type",
        "errors",
        "TealCompileError",
        "verifyTealVersion",
        "ir",
        "TealOp",
        "Op",
        "TealBlock",
        "TealSimpleBlock",
        "expr",
        "Expr",
        "Int",
        "ternaryexpr",
        "TernaryExpr",
        "TYPE_CHECKING",
        "compiler",
        "CompileOptions",
        "Expr",
        "stringArg",
        "Expr",
        "startArg",
        "Expr",
        "endArg",
        "Expr",
        "require_type",
        "stringArg",
        "type_of",
        "TealType",
        "require_type",
        "startArg",
        "type_of",
        "TealType",
        "uint64",
        "require_type",
        "endArg",
        "type_of",
        "TealType",
        "uint64",
        "stringArg",
        "startArg",
        "endArg",
        "options",
        "cast",
        "Int",
        "startArg",
        "value",
        "cast",
        "Int",
        "endArg",
        "value",
        "e",
        "s",
        "l",
        "TealCompileError",
        "l",
        "options",
        "version",
        "Op",
        "extract",
        "min_version",
        "s",
        "l",
        "Op",
        "extract",
        "Op",
        "extract3",
        "s",
        "e",
        "Op",
        "substring",
        "Op",
        "substring3",
        "options",
        "isinstance",
        "startArg",
        "Int",
        "isinstance",
        "endArg",
        "Int",
        "TernaryExpr",
        "Op",
        "substring3",
        "TealType",
        "TealType",
        "uint64",
        "TealType",
        "uint64",
        "TealType",
        "stringArg",
        "startArg",
        "endArg",
        "__teal__",
        "options",
        "__getOp",
        "options",
        "verifyTealVersion",
        "op",
        "min_version",
        "options",
        "version",
        "format",
        "op",
        "cast",
        "Int",
        "startArg",
        "value",
        "cast",
        "Int",
        "endArg",
        "value",
        "op",
        "Op",
        "extract",
        "end",
        "start",
        "TealBlock",
        "FromOp",
        "options",
        "TealOp",
        "op",
        "startArg",
        "value",
        "length",
        "stringArg",
        "op",
        "Op",
        "extract3",
        "end",
        "start",
        "TealBlock",
        "FromOp",
        "options",
        "TealOp",
        "op",
        "stringArg",
        "startArg",
        "Int",
        "length",
        "op",
        "Op",
        "substring",
        "TealBlock",
        "FromOp",
        "options",
        "TealOp",
        "op",
        "start",
        "end",
        "stringArg",
        "op",
        "Op",
        "substring3",
        "TealBlock",
        "FromOp",
        "options",
        "TealOp",
        "op",
        "stringArg",
        "startArg",
        "endArg",
        "format",
        "stringArg",
        "startArg",
        "endArg",
        "TealType",
        "Expr",
        "stringArg",
        "Expr",
        "startArg",
        "Expr",
        "lenArg",
        "Expr",
        "require_type",
        "stringArg",
        "type_of",
        "TealType",
        "require_type",
        "startArg",
        "type_of",
        "TealType",
        "uint64",
        "require_type",
        "lenArg",
        "type_of",
        "TealType",
        "uint64",
        "stringArg",
        "startArg",
        "lenArg",
        "options",
        "cast",
        "Int",
        "startArg",
        "value",
        "cast",
        "Int",
        "lenArg",
        "value",
        "s",
        "l",
        "l",
        "Op",
        "extract",
        "Op",
        "extract3",
        "options",
        "isinstance",
        "startArg",
        "Int",
        "isinstance",
        "lenArg",
        "Int",
        "TernaryExpr",
        "Op",
        "extract3",
        "TealType",
        "TealType",
        "uint64",
        "TealType",
        "uint64",
        "TealType",
        "stringArg",
        "startArg",
        "lenArg",
        "__teal__",
        "options",
        "__getOp",
        "options",
        "verifyTealVersion",
        "op",
        "min_version",
        "options",
        "version",
        "format",
        "op",
        "cast",
        "Int",
        "startArg",
        "value",
        "cast",
        "Int",
        "lenArg",
        "value",
        "op",
        "Op",
        "extract",
        "TealBlock",
        "FromOp",
        "options",
        "TealOp",
        "op",
        "s",
        "l",
        "stringArg",
        "op",
        "Op",
        "extract3",
        "TealBlock",
        "FromOp",
        "options",
        "TealOp",
        "op",
        "stringArg",
        "startArg",
        "lenArg",
        "format",
        "stringArg",
        "startArg",
        "lenArg",
        "TealType",
        "Expr",
        "stringArg",
        "Expr",
        "startArg",
        "Expr",
        "require_type",
        "stringArg",
        "type_of",
        "TealType",
        "require_type",
        "startArg",
        "type_of",
        "TealType",
        "uint64",
        "stringArg",
        "startArg",
        "options",
        "isinstance",
        "startArg",
        "Int",
        "Op",
        "substring3",
        "cast",
        "Int",
        "startArg",
        "value",
        "s",
        "Op",
        "extract",
        "Op",
        "substring3",
        "options",
        "__getOp",
        "options",
        "verifyTealVersion",
        "op",
        "min_version",
        "options",
        "version",
        "format",
        "op",
        "op",
        "Op",
        "extract",
        "TealBlock",
        "FromOp",
        "options",
        "TealOp",
        "op",
        "cast",
        "Int",
        "startArg",
        "value",
        "stringArg",
        "op",
        "Op",
        "substring3",
        "stringArg",
        "__teal__",
        "options",
        "startArg",
        "__teal__",
        "options",
        "strBlockEnd",
        "setNextBlock",
        "nextBlockStart",
        "TealSimpleBlock",
        "TealOp",
        "Op",
        "dig",
        "TealOp",
        "Op",
        "len",
        "TealOp",
        "Op",
        "substring3",
        "nextBlockEnd",
        "setNextBlock",
        "finalBlock",
        "strBlockStart",
        "finalBlock",
        "format",
        "stringArg",
        "startArg",
        "TealType",
        "Expr",
        "start",
        "Expr",
        "end",
        "Expr",
        "Expr",
        "SubstringExpr",
        "start",
        "end",
        "Expr",
        "start",
        "Expr",
        "length",
        "Expr",
        "Expr",
        "ExtractExpr",
        "start",
        "length",
        "Expr",
        "start",
        "Expr",
        "Expr",
        "SuffixExpr",
        "start"
    ],
    "literals": [
        "\"CompileOptions\"",
        "\"The end index must be greater than or equal to the start index\"",
        "\"CompileOptions\"",
        "\"TEAL version too low to use op {}\"",
        "\"(Substring {} {} {})\"",
        "\"CompileOptions\"",
        "\"CompileOptions\"",
        "\"TEAL version too low to use op {}\"",
        "\"(Extract {} {} {})\"",
        "\"CompileOptions\"",
        "\"CompileOptions\"",
        "\"TEAL version too low to use op {}\"",
        "\"(Suffix {} {})\""
    ],
    "variables": [
        "stringArg",
        "startArg",
        "endArg",
        "s",
        "e",
        "l",
        "op",
        "start",
        "end",
        "length",
        "length",
        "stringArg",
        "startArg",
        "lenArg",
        "s",
        "l",
        "op",
        "s",
        "l",
        "stringArg",
        "startArg",
        "s",
        "op",
        "strBlockStart",
        "strBlockEnd",
        "nextBlockStart",
        "nextBlockEnd",
        "finalBlock"
    ],
    "comments": [
        "helper method for correctly populating op",
        "helper method for correctly populating op",
        "helper method for correctly populating op",
        "if possible, exploit optimization in the extract opcode that takes the suffix",
        "when the length argument is 0"
    ],
    "docstrings": [
        "\"\"\"An expression for taking the substring of a byte string given start and end indices\"\"\"",
        "\"\"\"An expression for extracting a section of a byte string given a start index and length\"\"\"",
        "\"\"\"An expression for taking the suffix of a byte string given start index\"\"\"",
        "\"\"\"Take a substring of a byte string.\n\n    Produces a new byte string consisting of the bytes starting at :code:`start` up to but not\n    including :code:`end`.\n\n    This expression is similar to :any:`Extract`, except this expression uses start and end indexes,\n    while :code:`Extract` uses a start index and length.\n\n    Requires TEAL version 2 or higher.\n\n    Args:\n        string: The byte string.\n        start: The starting index for the substring. Must be an integer less than or equal to\n            :code:`Len(string)`.\n        end: The ending index for the substring. Must be an integer greater or equal to start, but\n            less than or equal to Len(string).\n    \"\"\"",
        "\"\"\"Extract a section of a byte string.\n\n    Produces a new byte string consisting of the bytes starting at :code:`start` up to but not\n    including :code:`start + length`.\n\n    This expression is similar to :any:`Substring`, except this expression uses a start index and\n    length, while :code:`Substring` uses start and end indexes.\n\n    Requires TEAL version 5 or higher.\n\n    Args:\n        string: The byte string.\n        start: The starting index for the extraction. Must be an integer less than or equal to\n            :code:`Len(string)`.\n        length: The number of bytes to extract. Must be an integer such that :code:`start + length <= Len(string)`.\n    \"\"\"",
        "\"\"\"Take a suffix of a byte string.\n\n    Produces a new byte string consisting of the suffix of the byte string starting at :code:`start`\n\n    This expression is similar to :any:`Substring` and :any:`Extract`, except this expression only uses a\n    start index.\n\n    Requires TEAL version 5 or higher.\n\n    Args:\n        string: The byte string.\n        start: The starting index for the suffix. Must be an integer less than or equal to :code:`Len(string)`.\n    \"\"\""
    ],
    "functions": [
        "__getOp",
        "__teal__",
        "__str__",
        "type_of",
        "has_return",
        "__getOp",
        "__teal__",
        "__str__",
        "type_of",
        "has_return",
        "__getOp",
        "__teal__",
        "__str__",
        "type_of",
        "has_return",
        "Substring",
        "Extract",
        "Suffix"
    ],
    "classes": [
        "SubstringExpr",
        "ExtractExpr",
        "SuffixExpr"
    ]
}