{
    "identifiers": [
        "com",
        "pilers",
        "ast",
        "com",
        "pilers",
        "emitter",
        "Emitter",
        "com",
        "pilers",
        "environment",
        "com",
        "pilers",
        "errors",
        "ErrorString",
        "com",
        "pilers",
        "errors",
        "InterpretException",
        "com",
        "pilers",
        "errors",
        "CompileException",
        "exp",
        "exp",
        "exp",
        "exp",
        "env",
        "env",
        "setVariable",
        "exp",
        "eval",
        "env",
        "env",
        "exp",
        "analyze",
        "env",
        "expectedType",
        "env",
        "getVariableType",
        "expectedType",
        "ErrorString",
        "unknownIdentifier",
        "expectedType",
        "equals",
        "exp",
        "ErrorString",
        "typeAssignment",
        "expectedType",
        "exp",
        "e",
        "exp",
        "compile",
        "e",
        "e",
        "isGlobalVariable",
        "e",
        "emit",
        "index",
        "e",
        "getLocalVarIndex",
        "e",
        "emit",
        "index"
    ],
    "literals": [
        "\"sw $v0 \"",
        "\"_data_\"",
        "\"sw $v0 \"",
        "\"($sp)\""
    ],
    "variables": [
        "var",
        "exp"
    ],
    "comments": [
        "most recent value is in v0"
    ],
    "docstrings": [
        "* AST Assignment class\n * Represents the assignment of a value to a variable\n * \n * @author Gloria Zhu",
        "* Constructs an Assignment object\n     * \n     * @param var the name of the variable\n     * @param exp an expression for the value\n     * @throws TypeErrorException",
        "* Executes the assignment\n     * \n     * @param env the execution environment (InterpreterEnvironment)\n     * @throws BreakException    if a break statement is executed\n     * @throws ContinueException if a continue statement is executed\n     * @throws InterpretException if there is a runtime error in assignment\n     *                          Happens if the varaible does not exist,\n     *                          or there is a type discrepancy between the\n     *                          variable and value",
        "* Semantic analysis for assignment\n     * Checks if the variable exists and the types are compatible\n     * \n     * @throws CompileException if the conditions above are broken\n     * @param env the current environment",
        "* Compiles the assignment\n     * The specific depends on the type of the varaible\n     * \n     * @param e the emitter"
    ],
    "functions": [
        "Assignment",
        "exec",
        "analyze",
        "compile"
    ],
    "classes": [
        "Assignment"
    ]
}