{
    "identifiers": [
        "Text",
        "Microsoft",
        "IdentityModel",
        "Logging",
        "Microsoft",
        "Azure",
        "SignalR",
        "NET45",
        "base64UrlCharacter62",
        "base64UrlCharacter63",
        "arg",
        "_",
        "arg",
        "LogHelper",
        "LogArgumentNullException",
        "nameof",
        "arg",
        "Encode",
        "Encoding",
        "UTF8",
        "GetBytes",
        "arg",
        "inArray",
        "offset",
        "length",
        "_",
        "inArray",
        "LogHelper",
        "LogArgumentNullException",
        "nameof",
        "inArray",
        "length",
        "Empty",
        "length",
        "LogHelper",
        "LogExceptionMessage",
        "ArgumentOutOfRangeException",
        "LogHelper",
        "FormatInvariant",
        "nameof",
        "length",
        "length",
        "offset",
        "inArray",
        "Length",
        "offset",
        "LogHelper",
        "LogExceptionMessage",
        "ArgumentOutOfRangeException",
        "LogHelper",
        "FormatInvariant",
        "nameof",
        "offset",
        "offset",
        "inArray",
        "Length",
        "offset",
        "length",
        "LogHelper",
        "LogExceptionMessage",
        "ArgumentOutOfRangeException",
        "LogHelper",
        "FormatInvariant",
        "nameof",
        "length",
        "length",
        "length",
        "offset",
        "length",
        "lengthmod3",
        "length",
        "i",
        "offset",
        "i",
        "limit",
        "i",
        "inArray",
        "i",
        "inArray",
        "i",
        "inArray",
        "i",
        "output",
        "j",
        "table",
        "d0",
        "output",
        "j",
        "table",
        "d0",
        "d1",
        "output",
        "j",
        "table",
        "d1",
        "d2",
        "output",
        "j",
        "table",
        "d2",
        "j",
        "i",
        "limit",
        "lengthmod3",
        "inArray",
        "i",
        "inArray",
        "i",
        "output",
        "j",
        "table",
        "d0",
        "output",
        "j",
        "table",
        "d0",
        "d1",
        "output",
        "j",
        "table",
        "d1",
        "j",
        "inArray",
        "i",
        "output",
        "j",
        "table",
        "d0",
        "output",
        "j",
        "table",
        "d0",
        "j",
        "output",
        "j",
        "inArray",
        "_",
        "inArray",
        "LogHelper",
        "LogArgumentNullException",
        "nameof",
        "inArray",
        "Encode",
        "inArray",
        "inArray",
        "Length",
        "_",
        "LogHelper",
        "LogArgumentNullException",
        "nameof",
        "Encode",
        "Encoding",
        "UTF8",
        "GetBytes",
        "_",
        "LogHelper",
        "LogExceptionMessage",
        "ArgumentNullException",
        "nameof",
        "NET45",
        "Replace",
        "base64UrlCharacter62",
        "base64Character62",
        "Replace",
        "base64UrlCharacter63",
        "base64Character63",
        "Length",
        "doubleBase64PadCharacter",
        "base64PadCharacter",
        "LogHelper",
        "LogExceptionMessage",
        "FormatException",
        "LogHelper",
        "FormatInvariant",
        "LogMessages",
        "IDX10400",
        "Convert",
        "FromBase64String",
        "UnsafeDecode",
        "arg",
        "Encoding",
        "UTF8",
        "GetString",
        "DecodeBytes",
        "arg",
        "NET45",
        "Length",
        "mod",
        "LogHelper",
        "LogExceptionMessage",
        "FormatException",
        "LogHelper",
        "FormatInvariant",
        "Length",
        "mod",
        "i",
        "Length",
        "i",
        "i",
        "base64UrlCharacter62",
        "i",
        "base64UrlCharacter63",
        "needReplace",
        "needReplace",
        "MinValue",
        "decodedLength",
        "i",
        "Length",
        "i",
        "i",
        "base64UrlCharacter62",
        "dest",
        "i",
        "base64Character62",
        "i",
        "base64UrlCharacter63",
        "dest",
        "i",
        "base64Character63",
        "dest",
        "i",
        "i",
        "i",
        "decodedLength",
        "i",
        "dest",
        "i",
        "base64PadCharacter",
        "Convert",
        "FromBase64String",
        "decodedString",
        "decodedLength",
        "Length",
        "Convert",
        "FromBase64String",
        "MinValue",
        "decodedLength",
        "Buffer",
        "MemoryCopy",
        "src",
        "dest",
        "Length",
        "Length",
        "dest",
        "Length",
        "base64PadCharacter",
        "Length",
        "decodedLength",
        "dest",
        "Length",
        "base64PadCharacter",
        "Convert",
        "FromBase64String",
        "decodedString"
    ],
    "literals": [
        "\"==\"",
        "\"IDX10106: The parameter {0} had an invalid value: '{1}'.\"",
        "\"IDX10106: The parameter {0} had an invalid value: '{1}'.\"",
        "\"IDX10106: The parameter {0} had an invalid value: '{1}'.\"",
        "\"IDX10400: Unable to decode: '{0}' as Base64url encoded string.\""
    ],
    "variables": [
        "base64PadCharacter",
        "doubleBase64PadCharacter",
        "base64Character62",
        "base64Character63",
        "base64UrlCharacter62",
        "base64UrlCharacter63",
        "s_base64Table",
        "lengthmod3",
        "limit",
        "output",
        "table",
        "s_base64Table",
        "i",
        "j",
        "d0",
        "d1",
        "d2",
        "d0",
        "d1",
        "d0",
        "mod",
        "needReplace",
        "decodedLength",
        "i",
        "decodedString",
        "dest",
        "decodedString",
        "i",
        "decodedString",
        "src",
        "dest",
        "decodedString"
    ],
    "comments": [
        "------------------------------------------------------------------------------\n * Modified from https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/6.22.0/src/Microsoft.IdentityModel.Tokens/Base64UrlEncoder.cs\n * Compared with original code\n *  1. Change class `Base64UrlEncoder` from `public` to `internal`\n *  2. Modify L68 ~ L75 in `internal static string Encode(byte[] inArray, int offset, int length)`\n *     Because we cannot access `LogMessages` and the old version of Package `Microsoft.IdentityModel.Logging` does not have method `MarkAsNonPII` for class `LogHelper`\n *  3. Modify L194 in `private unsafe static byte[] UnsafeDecode(string str)`\n *     The same reason as the first modification\n------------------------------------------------------------------------------",
        "Encodes and Decodes strings as Base64Url encoding.",
        "</summary>",
        "Encoding table",
        "</summary>",
        "The following functions perform base64url encoding which differs from regular base64 encoding as follows",
        "The changes make the encoding alphabet file and URL safe.",
        "</summary>",
        "<param name=\"arg\">string to encode.</param>",
        "<returns>Base64Url encoding of the UTF8 bytes.</returns>",
        "Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation which is encoded with base-64-url digits. Parameters specify",
        "the subset as an offset in the input array, and the number of elements in the array to convert.",
        "</summary>",
        "<param name=\"inArray\">An array of 8-bit unsigned integers.</param>",
        "<param name=\"length\">An offset in inArray.</param>",
        "<param name=\"offset\">The number of elements of inArray to convert.</param>",
        "<returns>The string representation in base 64 url encoding of length elements of inArray, starting at position offset.</returns>",
        "<exception cref=\"ArgumentNullException\">'inArray' is null.</exception>",
        "<exception cref=\"ArgumentOutOfRangeException\">offset or length is negative OR offset plus length is greater than the length of inArray.</exception>",
        "Modifications 1 starts from here",
        "Modifications 1 ends here",
        "takes 3 bytes from inArray and insert 4 bytes into output",
        "Where we left off before",
        "default or case 0: no further operations are needed.",
        "Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation which is encoded with base-64-url digits.",
        "</summary>",
        "<param name=\"inArray\">An array of 8-bit unsigned integers.</param>",
        "<returns>The string representation in base 64 url encoding of length elements of inArray, starting at position offset.</returns>",
        "<exception cref=\"ArgumentNullException\">'inArray' is null.</exception>",
        "<exception cref=\"ArgumentOutOfRangeException\">offset or length is negative OR offset plus length is greater than the length of inArray.</exception>",
        "Converts the specified string, which encodes binary data as base-64-url digits, to an equivalent 8-bit unsigned integer array.</summary>",
        "<param name=\"str\">base64Url encoded string.</param>",
        "<returns>UTF8 bytes.</returns>",
        "62nd char of encoding",
        "63rd char of encoding",
        "check for padding",
        "No pad chars in this case",
        "Two pad chars",
        "One pad char",
        "Decodes the string from Base64UrlEncoded to UTF8.",
        "</summary>",
        "<param name=\"arg\">string to decode.</param>",
        "<returns>UTF8 string.</returns>",
        "Modification 2 starts here",
        "Modification 2 ends here"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "* padding is skipped so the pad character '=' doesn't have to be percent encoded",
        "* the 62nd and 63rd regular base64 encoding characters ('+' and '/') are replace with ('-' and '_')",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "Encode",
        "Encode",
        "Encode",
        "EncodeString",
        "DecodeBytes",
        "Decode",
        "UnsafeDecode"
    ],
    "classes": [
        "Base64UrlEncoder"
    ]
}