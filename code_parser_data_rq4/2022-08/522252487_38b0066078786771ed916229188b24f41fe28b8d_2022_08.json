{
    "identifiers": [
        "f",
        "g",
        "g",
        "g",
        "f",
        "e",
        "t",
        "n",
        "r",
        "o",
        "u",
        "n",
        "o",
        "t",
        "o",
        "require",
        "require",
        "u",
        "a",
        "a",
        "o",
        "i",
        "i",
        "o",
        "o",
        "f",
        "f",
        "n",
        "o",
        "t",
        "o",
        "l",
        "e",
        "t",
        "o",
        "e",
        "s",
        "n",
        "n",
        "e",
        "l",
        "l",
        "e",
        "t",
        "n",
        "r",
        "n",
        "o",
        "require",
        "require",
        "o",
        "r",
        "o",
        "s",
        "r",
        "o",
        "s",
        "require",
        "exports",
        "load",
        "src",
        "opts",
        "cb",
        "opts",
        "cb",
        "opts",
        "opts",
        "opts",
        "opts",
        "cb",
        "cb",
        "script",
        "opts",
        "script",
        "opts",
        "script",
        "opts",
        "opts",
        "script",
        "src",
        "opts",
        "setAttributes",
        "script",
        "opts",
        "opts",
        "script",
        "opts",
        "script",
        "stdOnEnd",
        "ieOnEnd",
        "onend",
        "script",
        "cb",
        "script",
        "stdOnEnd",
        "script",
        "cb",
        "head",
        "script",
        "script",
        "attrs",
        "attr",
        "attrs",
        "script",
        "attr",
        "attrs",
        "attr",
        "script",
        "cb",
        "script",
        "cb",
        "script",
        "script",
        "cb",
        "script",
        "script",
        "cb",
        "script",
        "cb",
        "script",
        "require",
        "exports",
        "isUsingLatest",
        "buildName",
        "buildName",
        "scripts",
        "currentScript",
        "nbScripts",
        "currentScript",
        "scripts",
        "currentScript",
        "toFind",
        "scripts",
        "currentScript",
        "found",
        "found",
        "require",
        "exports",
        "loadV2",
        "buildName",
        "require",
        "buildName",
        "message",
        "message",
        "v2ScriptUrl",
        "scriptLoaded",
        "loadScript",
        "v2ScriptUrl",
        "scriptLoaded",
        "e",
        "loadScript",
        "v2ScriptUrl",
        "scriptLoaded",
        "method",
        "log",
        "method",
        "message",
        "require",
        "exports",
        "oldGlobals",
        "message",
        "message",
        "message",
        "require",
        "exports",
        "migrationLayer",
        "buildName",
        "require",
        "require",
        "require",
        "isUsingLatest",
        "buildName",
        "loadV2",
        "buildName",
        "oldGlobals",
        "f",
        "exports",
        "f",
        "define",
        "define",
        "define",
        "f",
        "g",
        "g",
        "g",
        "g",
        "g",
        "f",
        "e",
        "t",
        "n",
        "r",
        "o",
        "u",
        "n",
        "o",
        "t",
        "o",
        "require",
        "require",
        "u",
        "a",
        "a",
        "o",
        "i",
        "i",
        "o",
        "o",
        "f",
        "f",
        "n",
        "o",
        "t",
        "o",
        "l",
        "e",
        "t",
        "o",
        "e",
        "s",
        "n",
        "n",
        "e",
        "l",
        "l",
        "e",
        "t",
        "n",
        "r",
        "n",
        "o",
        "require",
        "require",
        "o",
        "r",
        "o",
        "s",
        "r",
        "o",
        "s",
        "require",
        "exports",
        "process",
        "exports",
        "require",
        "exports",
        "log",
        "exports",
        "formatArgs",
        "exports",
        "save",
        "exports",
        "load",
        "exports",
        "useColors",
        "exports",
        "chrome",
        "chrome",
        "chrome",
        "localstorage",
        "exports",
        "navigator",
        "navigator",
        "navigator",
        "parseInt",
        "navigator",
        "navigator",
        "navigator",
        "exports",
        "v",
        "v",
        "err",
        "err",
        "args",
        "args",
        "useColors",
        "useColors",
        "args",
        "useColors",
        "exports",
        "useColors",
        "args",
        "c",
        "args",
        "match",
        "match",
        "index",
        "match",
        "lastC",
        "index",
        "args",
        "lastC",
        "c",
        "arguments",
        "namespaces",
        "namespaces",
        "exports",
        "exports",
        "namespaces",
        "e",
        "r",
        "exports",
        "e",
        "r",
        "process",
        "process",
        "r",
        "process",
        "r",
        "exports",
        "load",
        "e",
        "require",
        "require",
        "exports",
        "exports",
        "createDebug",
        "createDebug",
        "createDebug",
        "exports",
        "coerce",
        "exports",
        "disable",
        "exports",
        "enable",
        "exports",
        "enabled",
        "exports",
        "require",
        "exports",
        "exports",
        "exports",
        "i",
        "hash",
        "hash",
        "hash",
        "i",
        "hash",
        "exports",
        "hash",
        "exports",
        "debug",
        "curr",
        "prevTime",
        "curr",
        "ms",
        "prevTime",
        "curr",
        "prevTime",
        "curr",
        "arguments",
        "i",
        "args",
        "i",
        "args",
        "i",
        "arguments",
        "i",
        "args",
        "exports",
        "args",
        "args",
        "args",
        "args",
        "args",
        "match",
        "format",
        "match",
        "match",
        "index",
        "exports",
        "format",
        "formatter",
        "args",
        "index",
        "match",
        "formatter",
        "val",
        "args",
        "index",
        "index",
        "match",
        "exports",
        "args",
        "debug",
        "exports",
        "logFn",
        "args",
        "debug",
        "debug",
        "exports",
        "debug",
        "exports",
        "debug",
        "selectColor",
        "exports",
        "exports",
        "debug",
        "debug",
        "namespaces",
        "exports",
        "namespaces",
        "exports",
        "exports",
        "namespaces",
        "namespaces",
        "split",
        "i",
        "len",
        "i",
        "split",
        "i",
        "namespaces",
        "split",
        "i",
        "namespaces",
        "exports",
        "namespaces",
        "exports",
        "namespaces",
        "exports",
        "name",
        "i",
        "len",
        "exports",
        "i",
        "len",
        "i",
        "exports",
        "i",
        "name",
        "i",
        "len",
        "exports",
        "i",
        "len",
        "i",
        "exports",
        "i",
        "name",
        "val",
        "val",
        "val",
        "val",
        "val",
        "require",
        "exports",
        "process",
        "factory",
        "exports",
        "factory",
        "define",
        "define",
        "define",
        "factory",
        "factory",
        "x",
        "x",
        "x",
        "x",
        "x",
        "_isArray",
        "_isArray",
        "x",
        "x",
        "asap",
        "callback",
        "arg",
        "queue",
        "len",
        "callback",
        "queue",
        "len",
        "arg",
        "len",
        "len",
        "customSchedulerFn",
        "customSchedulerFn",
        "flush",
        "scheduleFlush",
        "scheduleFn",
        "customSchedulerFn",
        "scheduleFn",
        "asapFn",
        "asap",
        "asapFn",
        "browserWindow",
        "browserGlobal",
        "browserGlobal",
        "process",
        "process",
        "Uint8ClampedArray",
        "importScripts",
        "MessageChannel",
        "process",
        "flush",
        "vertxNext",
        "vertxNext",
        "flush",
        "useSetTimeout",
        "BrowserMutationObserver",
        "flush",
        "observer",
        "node",
        "node",
        "iterations",
        "iterations",
        "MessageChannel",
        "channel",
        "flush",
        "channel",
        "globalSetTimeout",
        "flush",
        "i",
        "len",
        "i",
        "queue",
        "i",
        "queue",
        "i",
        "callback",
        "arg",
        "queue",
        "i",
        "queue",
        "i",
        "len",
        "r",
        "vertxNext",
        "vertx",
        "vertx",
        "useVertxTimer",
        "e",
        "useSetTimeout",
        "isNode",
        "scheduleFlush",
        "useNextTick",
        "BrowserMutationObserver",
        "scheduleFlush",
        "useMutationObserver",
        "isWorker",
        "scheduleFlush",
        "useMessageChannel",
        "browserWindow",
        "require",
        "scheduleFlush",
        "attemptVertx",
        "scheduleFlush",
        "useSetTimeout",
        "onFulfillment",
        "onRejection",
        "noop",
        "child",
        "PROMISE_ID",
        "makePromise",
        "child",
        "parent",
        "_state",
        "_arguments",
        "_state",
        "asap",
        "invokeCallback",
        "_state",
        "child",
        "callback",
        "parent",
        "subscribe",
        "parent",
        "child",
        "onFulfillment",
        "onRejection",
        "child",
        "Constructor",
        "Constructor",
        "noop",
        "resolve",
        "promise",
        "promise",
        "ErrorObject",
        "promise",
        "promise",
        "error",
        "GET_THEN_ERROR",
        "error",
        "GET_THEN_ERROR",
        "then$$1",
        "value",
        "fulfillmentHandler",
        "rejectionHandler",
        "then$$1",
        "value",
        "fulfillmentHandler",
        "rejectionHandler",
        "e",
        "e",
        "promise",
        "thenable",
        "then$$1",
        "asap",
        "promise",
        "tryThen",
        "then$$1",
        "thenable",
        "value",
        "thenable",
        "value",
        "resolve",
        "promise",
        "value",
        "fulfill",
        "promise",
        "value",
        "reason",
        "reject",
        "promise",
        "reason",
        "promise",
        "error",
        "reject",
        "promise",
        "error",
        "promise",
        "promise",
        "thenable",
        "thenable",
        "FULFILLED",
        "fulfill",
        "promise",
        "thenable",
        "thenable",
        "REJECTED",
        "reject",
        "promise",
        "thenable",
        "subscribe",
        "thenable",
        "value",
        "resolve",
        "promise",
        "value",
        "reason",
        "reject",
        "promise",
        "reason",
        "promise",
        "maybeThenable",
        "then$$1",
        "maybeThenable",
        "promise",
        "then$$1",
        "then",
        "maybeThenable",
        "resolve$1",
        "handleOwnThenable",
        "promise",
        "maybeThenable",
        "then$$1",
        "GET_THEN_ERROR",
        "reject",
        "promise",
        "GET_THEN_ERROR",
        "GET_THEN_ERROR",
        "then$$1",
        "fulfill",
        "promise",
        "maybeThenable",
        "isFunction",
        "then$$1",
        "handleForeignThenable",
        "promise",
        "maybeThenable",
        "then$$1",
        "fulfill",
        "promise",
        "maybeThenable",
        "promise",
        "value",
        "promise",
        "value",
        "reject",
        "promise",
        "selfFulfillment",
        "objectOrFunction",
        "value",
        "handleMaybeThenable",
        "promise",
        "value",
        "getThen",
        "value",
        "fulfill",
        "promise",
        "value",
        "promise",
        "promise",
        "promise",
        "promise",
        "publish",
        "promise",
        "promise",
        "value",
        "promise",
        "PENDING",
        "promise",
        "value",
        "promise",
        "FULFILLED",
        "promise",
        "asap",
        "publish",
        "promise",
        "promise",
        "reason",
        "promise",
        "PENDING",
        "promise",
        "REJECTED",
        "promise",
        "reason",
        "asap",
        "publishRejection",
        "promise",
        "parent",
        "child",
        "onFulfillment",
        "onRejection",
        "parent",
        "_subscribers",
        "parent",
        "_subscribers",
        "length",
        "child",
        "_subscribers",
        "length",
        "FULFILLED",
        "onFulfillment",
        "_subscribers",
        "length",
        "REJECTED",
        "onRejection",
        "length",
        "parent",
        "asap",
        "publish",
        "parent",
        "promise",
        "promise",
        "promise",
        "subscribers",
        "promise",
        "i",
        "subscribers",
        "i",
        "child",
        "subscribers",
        "i",
        "callback",
        "subscribers",
        "i",
        "settled",
        "child",
        "invokeCallback",
        "settled",
        "child",
        "callback",
        "detail",
        "callback",
        "detail",
        "promise",
        "ErrorObject",
        "callback",
        "detail",
        "callback",
        "detail",
        "e",
        "TRY_CATCH_ERROR",
        "e",
        "TRY_CATCH_ERROR",
        "settled",
        "promise",
        "callback",
        "detail",
        "isFunction",
        "callback",
        "hasCallback",
        "value",
        "tryCatch",
        "callback",
        "detail",
        "value",
        "TRY_CATCH_ERROR",
        "failed",
        "error",
        "value",
        "value",
        "succeeded",
        "promise",
        "value",
        "reject",
        "promise",
        "cannotReturnOwn",
        "value",
        "detail",
        "succeeded",
        "promise",
        "PENDING",
        "hasCallback",
        "succeeded",
        "resolve",
        "promise",
        "value",
        "failed",
        "reject",
        "promise",
        "error",
        "settled",
        "FULFILLED",
        "fulfill",
        "promise",
        "value",
        "settled",
        "REJECTED",
        "reject",
        "promise",
        "value",
        "promise",
        "resolver",
        "resolver",
        "resolvePromise",
        "value",
        "resolve",
        "promise",
        "value",
        "rejectPromise",
        "reason",
        "reject",
        "promise",
        "reason",
        "e",
        "reject",
        "promise",
        "e",
        "id",
        "promise",
        "promise",
        "PROMISE_ID",
        "id",
        "promise",
        "promise",
        "promise",
        "Constructor",
        "input",
        "Constructor",
        "Constructor",
        "noop",
        "PROMISE_ID",
        "makePromise",
        "isArray",
        "input",
        "input",
        "input",
        "fulfill",
        "input",
        "fulfill",
        "reject",
        "validationError",
        "Enumerator$1",
        "input",
        "PENDING",
        "i",
        "input",
        "i",
        "input",
        "i",
        "i",
        "Enumerator$1",
        "entry",
        "i",
        "c",
        "resolve$$1",
        "resolve$1",
        "getThen",
        "entry",
        "_then",
        "then",
        "entry",
        "PENDING",
        "entry",
        "i",
        "entry",
        "_then",
        "i",
        "entry",
        "c",
        "Promise$2",
        "c",
        "noop",
        "handleMaybeThenable",
        "promise",
        "entry",
        "_then",
        "promise",
        "i",
        "c",
        "resolve$$1",
        "resolve$$1",
        "entry",
        "i",
        "resolve$$1",
        "entry",
        "i",
        "Enumerator$1",
        "state",
        "i",
        "value",
        "promise",
        "PENDING",
        "state",
        "REJECTED",
        "reject",
        "promise",
        "value",
        "i",
        "value",
        "fulfill",
        "promise",
        "Enumerator$1",
        "promise",
        "i",
        "subscribe",
        "promise",
        "value",
        "enumerator",
        "FULFILLED",
        "i",
        "value",
        "reason",
        "enumerator",
        "REJECTED",
        "i",
        "reason",
        "entries",
        "Enumerator$1",
        "entries",
        "entries",
        "isArray",
        "entries",
        "Constructor",
        "_",
        "reject",
        "reject",
        "Constructor",
        "resolve",
        "reject",
        "entries",
        "i",
        "length",
        "i",
        "Constructor",
        "entries",
        "i",
        "resolve",
        "reject",
        "reason",
        "Constructor",
        "noop",
        "reject",
        "promise",
        "reason",
        "promise",
        "resolver",
        "PROMISE_ID",
        "nextId",
        "noop",
        "resolver",
        "resolver",
        "needsResolver",
        "Promise$2",
        "initializePromise",
        "resolver",
        "needsNew",
        "Promise$2",
        "all$1",
        "Promise$2",
        "race$1",
        "Promise$2",
        "resolve$1",
        "Promise$2",
        "reject$1",
        "Promise$2",
        "setScheduler",
        "Promise$2",
        "setAsap",
        "Promise$2",
        "asap",
        "Promise$2",
        "Promise$2",
        "then",
        "_catch",
        "onRejection",
        "onRejection",
        "local",
        "local",
        "local",
        "e",
        "local",
        "P",
        "promiseToString",
        "P",
        "e",
        "promiseToString",
        "P",
        "local",
        "Promise$2",
        "Promise$2",
        "polyfill$1",
        "Promise$2",
        "Promise$2",
        "Promise$2",
        "require",
        "require",
        "exports",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "n",
        "isNumber",
        "n",
        "n",
        "isNaN",
        "n",
        "n",
        "EventEmitter",
        "isObject",
        "er",
        "arguments",
        "er",
        "er",
        "er",
        "err",
        "er",
        "err",
        "handler",
        "isUndefined",
        "handler",
        "isFunction",
        "handler",
        "arguments",
        "handler",
        "handler",
        "arguments",
        "handler",
        "arguments",
        "arguments",
        "args",
        "arguments",
        "handler",
        "args",
        "isObject",
        "handler",
        "args",
        "arguments",
        "listeners",
        "handler",
        "len",
        "listeners",
        "i",
        "i",
        "len",
        "i",
        "listeners",
        "i",
        "args",
        "EventEmitter",
        "listener",
        "isFunction",
        "listener",
        "isFunction",
        "listener",
        "listener",
        "listener",
        "listener",
        "isObject",
        "listener",
        "listener",
        "isObject",
        "isUndefined",
        "m",
        "m",
        "EventEmitter",
        "m",
        "m",
        "m",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "listener",
        "isFunction",
        "listener",
        "g",
        "fired",
        "fired",
        "listener",
        "arguments",
        "g",
        "listener",
        "g",
        "EventEmitter",
        "listener",
        "isFunction",
        "listener",
        "length",
        "position",
        "listener",
        "isFunction",
        "listener",
        "listener",
        "isObject",
        "i",
        "length",
        "i",
        "i",
        "listener",
        "i",
        "i",
        "listener",
        "position",
        "i",
        "position",
        "position",
        "listener",
        "EventEmitter",
        "arguments",
        "arguments",
        "key",
        "key",
        "key",
        "listeners",
        "isFunction",
        "listeners",
        "listeners",
        "listeners",
        "listeners",
        "listeners",
        "listeners",
        "EventEmitter",
        "ret",
        "isFunction",
        "ret",
        "ret",
        "ret",
        "EventEmitter",
        "isFunction",
        "evlistener",
        "evlistener",
        "evlistener",
        "EventEmitter",
        "emitter",
        "emitter",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "require",
        "exports",
        "forEach",
        "obj",
        "fn",
        "ctx",
        "toString",
        "fn",
        "obj",
        "l",
        "l",
        "i",
        "l",
        "i",
        "fn",
        "ctx",
        "obj",
        "i",
        "i",
        "obj",
        "k",
        "obj",
        "hasOwn",
        "obj",
        "k",
        "fn",
        "ctx",
        "obj",
        "k",
        "k",
        "obj",
        "require",
        "exports",
        "win",
        "win",
        "win",
        "win",
        "win",
        "require",
        "exports",
        "inherits",
        "ctor",
        "superCtor",
        "ctor",
        "superCtor",
        "ctor",
        "superCtor",
        "ctor",
        "inherits",
        "ctor",
        "superCtor",
        "ctor",
        "superCtor",
        "TempCtor",
        "superCtor",
        "ctor",
        "TempCtor",
        "ctor",
        "ctor",
        "require",
        "exports",
        "arr",
        "toString",
        "arr",
        "require",
        "exports",
        "s",
        "m",
        "h",
        "d",
        "val",
        "options",
        "options",
        "options",
        "val",
        "val",
        "parse",
        "val",
        "isNaN",
        "val",
        "options",
        "fmtLong",
        "val",
        "fmtShort",
        "val",
        "val",
        "match",
        "parseFloat",
        "match",
        "match",
        "n",
        "y",
        "n",
        "d",
        "n",
        "h",
        "n",
        "m",
        "n",
        "s",
        "n",
        "ms",
        "ms",
        "d",
        "ms",
        "d",
        "ms",
        "h",
        "ms",
        "h",
        "ms",
        "m",
        "ms",
        "m",
        "ms",
        "s",
        "ms",
        "s",
        "ms",
        "ms",
        "plural",
        "ms",
        "d",
        "plural",
        "ms",
        "h",
        "plural",
        "ms",
        "m",
        "plural",
        "ms",
        "s",
        "ms",
        "ms",
        "n",
        "name",
        "ms",
        "n",
        "ms",
        "n",
        "ms",
        "n",
        "name",
        "ms",
        "n",
        "name",
        "require",
        "exports",
        "require",
        "isEnumerable",
        "isEnumerable",
        "o",
        "o",
        "ctor",
        "ctor",
        "o",
        "k",
        "excludedKeys",
        "k",
        "has",
        "k",
        "k",
        "k",
        "equalsConstructorPrototype",
        "k",
        "e",
        "e",
        "o",
        "hasAutomationEqualityBug",
        "equalsConstructorPrototype",
        "o",
        "equalsConstructorPrototype",
        "o",
        "e",
        "keys",
        "toStr",
        "isArgs",
        "isObject",
        "toStr",
        "isObject",
        "isFunction",
        "isArguments",
        "hasProtoEnumBug",
        "isFunction",
        "isString",
        "has",
        "i",
        "i",
        "theKeys",
        "i",
        "isArguments",
        "j",
        "j",
        "theKeys",
        "j",
        "name",
        "skipProto",
        "name",
        "has",
        "name",
        "theKeys",
        "name",
        "hasDontEnumBug",
        "equalsConstructorPrototypeIfNotBuggy",
        "k",
        "dontEnums",
        "k",
        "skipConstructor",
        "dontEnums",
        "k",
        "has",
        "dontEnums",
        "k",
        "theKeys",
        "dontEnums",
        "k",
        "theKeys",
        "keysShim",
        "shimObjectKeys",
        "arguments",
        "keysWorksWithArguments",
        "keys",
        "isArgs",
        "originalKeys",
        "originalKeys",
        "keysShim",
        "keysShim",
        "keysShim",
        "require",
        "exports",
        "isArguments",
        "value",
        "toStr",
        "value",
        "isArgs",
        "isArgs",
        "value",
        "value",
        "value",
        "value",
        "toStr",
        "value",
        "isArgs",
        "require",
        "exports",
        "setTimeout",
        "cachedSetTimeout",
        "setTimeout",
        "cachedSetTimeout",
        "defaultSetTimout",
        "e",
        "cachedSetTimeout",
        "defaultSetTimout",
        "clearTimeout",
        "cachedClearTimeout",
        "clearTimeout",
        "cachedClearTimeout",
        "defaultClearTimeout",
        "e",
        "cachedClearTimeout",
        "defaultClearTimeout",
        "fun",
        "cachedSetTimeout",
        "setTimeout",
        "setTimeout",
        "fun",
        "cachedSetTimeout",
        "defaultSetTimout",
        "cachedSetTimeout",
        "setTimeout",
        "cachedSetTimeout",
        "setTimeout",
        "setTimeout",
        "fun",
        "cachedSetTimeout",
        "fun",
        "e",
        "cachedSetTimeout",
        "fun",
        "e",
        "cachedSetTimeout",
        "fun",
        "marker",
        "cachedClearTimeout",
        "clearTimeout",
        "clearTimeout",
        "marker",
        "cachedClearTimeout",
        "defaultClearTimeout",
        "cachedClearTimeout",
        "clearTimeout",
        "cachedClearTimeout",
        "clearTimeout",
        "clearTimeout",
        "marker",
        "cachedClearTimeout",
        "marker",
        "e",
        "cachedClearTimeout",
        "marker",
        "e",
        "cachedClearTimeout",
        "marker",
        "draining",
        "currentQueue",
        "draining",
        "currentQueue",
        "queue",
        "currentQueue",
        "queue",
        "queueIndex",
        "queue",
        "drainQueue",
        "draining",
        "runTimeout",
        "cleanUpNextTick",
        "draining",
        "queue",
        "len",
        "currentQueue",
        "queue",
        "queue",
        "queueIndex",
        "len",
        "currentQueue",
        "currentQueue",
        "queueIndex",
        "queueIndex",
        "len",
        "queue",
        "currentQueue",
        "draining",
        "runClearTimeout",
        "timeout",
        "process",
        "fun",
        "arguments",
        "arguments",
        "i",
        "arguments",
        "i",
        "args",
        "i",
        "arguments",
        "i",
        "queue",
        "Item",
        "fun",
        "args",
        "queue",
        "draining",
        "runTimeout",
        "drainQueue",
        "fun",
        "array",
        "fun",
        "array",
        "Item",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "name",
        "process",
        "process",
        "dir",
        "process",
        "require",
        "exports",
        "obj",
        "prop",
        "obj",
        "prop",
        "qs",
        "sep",
        "eq",
        "options",
        "sep",
        "sep",
        "eq",
        "eq",
        "qs",
        "qs",
        "obj",
        "qs",
        "qs",
        "sep",
        "options",
        "options",
        "maxKeys",
        "options",
        "qs",
        "maxKeys",
        "len",
        "maxKeys",
        "len",
        "maxKeys",
        "i",
        "len",
        "i",
        "qs",
        "i",
        "regexp",
        "x",
        "eq",
        "idx",
        "kstr",
        "x",
        "idx",
        "vstr",
        "x",
        "idx",
        "kstr",
        "x",
        "vstr",
        "k",
        "decodeURIComponent",
        "kstr",
        "v",
        "decodeURIComponent",
        "vstr",
        "hasOwnProperty",
        "obj",
        "k",
        "obj",
        "k",
        "v",
        "isArray",
        "obj",
        "k",
        "obj",
        "k",
        "v",
        "obj",
        "k",
        "obj",
        "k",
        "v",
        "obj",
        "xs",
        "xs",
        "require",
        "exports",
        "v",
        "v",
        "v",
        "v",
        "isFinite",
        "v",
        "v",
        "obj",
        "sep",
        "eq",
        "name",
        "sep",
        "sep",
        "eq",
        "eq",
        "obj",
        "obj",
        "obj",
        "objectKeys",
        "obj",
        "k",
        "encodeURIComponent",
        "stringifyPrimitive",
        "k",
        "eq",
        "isArray",
        "obj",
        "k",
        "obj",
        "k",
        "v",
        "ks",
        "encodeURIComponent",
        "stringifyPrimitive",
        "v",
        "sep",
        "ks",
        "encodeURIComponent",
        "stringifyPrimitive",
        "obj",
        "k",
        "sep",
        "name",
        "encodeURIComponent",
        "stringifyPrimitive",
        "name",
        "eq",
        "encodeURIComponent",
        "stringifyPrimitive",
        "obj",
        "xs",
        "xs",
        "xs",
        "f",
        "xs",
        "xs",
        "f",
        "i",
        "xs",
        "i",
        "res",
        "f",
        "xs",
        "i",
        "i",
        "res",
        "obj",
        "key",
        "obj",
        "obj",
        "key",
        "res",
        "key",
        "res",
        "require",
        "exports",
        "exports",
        "exports",
        "require",
        "exports",
        "exports",
        "require",
        "require",
        "exports",
        "AlgoliaSearch",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "AlgoliaSearchCore",
        "arguments",
        "inherits",
        "AlgoliaSearch",
        "AlgoliaSearchCore",
        "AlgoliaSearch",
        "indexName",
        "callback",
        "encodeURIComponent",
        "indexName",
        "callback",
        "AlgoliaSearch",
        "srcIndexName",
        "dstIndexName",
        "callback",
        "dstIndexName",
        "encodeURIComponent",
        "srcIndexName",
        "postObj",
        "callback",
        "AlgoliaSearch",
        "srcIndexName",
        "dstIndexName",
        "scopeOrCallback",
        "_callback",
        "dstIndexName",
        "scopeOrCallback",
        "callback",
        "scopeOrCallback",
        "scopeOrCallback",
        "scopeOrCallback",
        "postObj",
        "scopeOrCallback",
        "scopeOrCallback",
        "encodeURIComponent",
        "srcIndexName",
        "postObj",
        "callback",
        "AlgoliaSearch",
        "offset",
        "length",
        "callback",
        "require",
        "offset",
        "clone",
        "offset",
        "callback",
        "length",
        "arguments",
        "offset",
        "callback",
        "offset",
        "arguments",
        "length",
        "callback",
        "length",
        "offset",
        "offset",
        "length",
        "callback",
        "AlgoliaSearch",
        "page",
        "callback",
        "page",
        "page",
        "callback",
        "page",
        "page",
        "callback",
        "AlgoliaSearch",
        "indexName",
        "Index",
        "indexName",
        "AlgoliaSearch",
        "opts",
        "require",
        "createAnalyticsClient",
        "opts",
        "AlgoliaSearch",
        "deprecate",
        "callback",
        "callback",
        "deprecatedMessage",
        "AlgoliaSearch",
        "callback",
        "callback",
        "AlgoliaSearch",
        "deprecate",
        "key",
        "callback",
        "key",
        "callback",
        "deprecatedMessage",
        "AlgoliaSearch",
        "key",
        "callback",
        "key",
        "callback",
        "AlgoliaSearch",
        "deprecate",
        "key",
        "callback",
        "key",
        "callback",
        "deprecatedMessage",
        "AlgoliaSearch",
        "key",
        "callback",
        "key",
        "callback",
        "AlgoliaSearch",
        "key",
        "callback",
        "key",
        "callback",
        "AlgoliaSearch",
        "deprecate",
        "acls",
        "callback",
        "acls",
        "callback",
        "deprecatedMessage",
        "AlgoliaSearch",
        "acls",
        "callback",
        "require",
        "isArray",
        "acls",
        "usage",
        "arguments",
        "callback",
        "acls",
        "postObj",
        "postObj",
        "postObj",
        "postObj",
        "postObj",
        "postObj",
        "postObj",
        "postObj",
        "callback",
        "AlgoliaSearch",
        "deprecate",
        "acls",
        "callback",
        "acls",
        "callback",
        "deprecatedMessage",
        "AlgoliaSearch",
        "deprecate",
        "key",
        "acls",
        "callback",
        "key",
        "acls",
        "callback",
        "deprecatedMessage",
        "AlgoliaSearch",
        "key",
        "acls",
        "callback",
        "require",
        "isArray",
        "acls",
        "usage",
        "arguments",
        "callback",
        "acls",
        "putObj",
        "putObj",
        "putObj",
        "putObj",
        "putObj",
        "putObj",
        "putObj",
        "key",
        "putObj",
        "callback",
        "AlgoliaSearch",
        "deprecate",
        "startQueriesBatchDeprecated",
        "deprecatedMessage",
        "AlgoliaSearch",
        "deprecate",
        "addQueryInBatchDeprecated",
        "indexName",
        "query",
        "args",
        "indexName",
        "query",
        "args",
        "deprecatedMessage",
        "AlgoliaSearch",
        "deprecate",
        "sendQueriesBatchDeprecated",
        "callback",
        "callback",
        "deprecatedMessage",
        "AlgoliaSearch",
        "operations",
        "callback",
        "require",
        "isArray",
        "operations",
        "usage",
        "operations",
        "callback",
        "AlgoliaSearch",
        "data",
        "callback",
        "data",
        "data",
        "errors",
        "data",
        "data",
        "callback",
        "data",
        "AlgoliaSearch",
        "data",
        "callback",
        "data",
        "data",
        "errors",
        "data",
        "data",
        "data",
        "callback",
        "AlgoliaSearch",
        "callback",
        "callback",
        "AlgoliaSearch",
        "data",
        "callback",
        "data",
        "errors",
        "data",
        "data",
        "callback",
        "AlgoliaSearch",
        "callback",
        "callback",
        "AlgoliaSearch",
        "data",
        "callback",
        "data",
        "callback",
        "AlgoliaSearch",
        "data",
        "callback",
        "data",
        "errors",
        "data",
        "callback",
        "data",
        "AlgoliaSearch",
        "data",
        "callback",
        "data",
        "callback",
        "AlgoliaSearch",
        "data",
        "callback",
        "data",
        "callback",
        "AlgoliaSearch",
        "callback",
        "callback",
        "AlgoliaSearch",
        "notImplemented",
        "AlgoliaSearch",
        "notImplemented",
        "AlgoliaSearch",
        "notImplemented",
        "AlgoliaSearch",
        "notImplemented",
        "AlgoliaSearch",
        "notImplemented",
        "AlgoliaSearch",
        "notImplemented",
        "AlgoliaSearch",
        "notImplemented",
        "errors",
        "message",
        "require",
        "exports",
        "process",
        "AlgoliaSearchCore",
        "require",
        "require",
        "require",
        "require",
        "process",
        "parseInt",
        "process",
        "applicationID",
        "apiKey",
        "opts",
        "require",
        "require",
        "require",
        "require",
        "opts",
        "applicationID",
        "errors",
        "usage",
        "opts",
        "apiKey",
        "errors",
        "usage",
        "applicationID",
        "apiKey",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "protocol",
        "protocol",
        "protocol",
        "protocol",
        "protocol",
        "errors",
        "opts",
        "opts",
        "hostNumber",
        "applicationID",
        "hostNumber",
        "opts",
        "mainSuffix",
        "defaultHosts",
        "defaultHosts",
        "isArray",
        "opts",
        "clone",
        "opts",
        "clone",
        "opts",
        "clone",
        "opts",
        "clone",
        "opts",
        "prepareHost",
        "protocol",
        "prepareHost",
        "protocol",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "debug",
        "AlgoliaSearchCore",
        "indexName",
        "IndexCore",
        "indexName",
        "AlgoliaSearchCore",
        "name",
        "value",
        "name",
        "value",
        "AlgoliaSearchCore",
        "name",
        "name",
        "AlgoliaSearchCore",
        "name",
        "name",
        "AlgoliaSearchCore",
        "algoliaAgent",
        "algoliaAgent",
        "algoliaAgentWithDelimiter",
        "algoliaAgentWithDelimiter",
        "AlgoliaSearchCore",
        "initialOpts",
        "require",
        "initialOpts",
        "initialOpts",
        "initialOpts",
        "client",
        "client",
        "initialOpts",
        "MAX_API_KEY_LENGTH",
        "initialOpts",
        "initialOpts",
        "initialOpts",
        "initialOpts",
        "headers",
        "additionalUA",
        "initialOpts",
        "headers",
        "additionalUA",
        "initialOpts",
        "initialOpts",
        "body",
        "safeJSONStringify",
        "initialOpts",
        "requestDebug",
        "requester",
        "reqOpts",
        "client",
        "client",
        "client",
        "cacheID",
        "initialOpts",
        "client",
        "client",
        "body",
        "cacheID",
        "reqOpts",
        "isCacheValidWithCurrentID",
        "client",
        "cache",
        "cacheID",
        "requestDebug",
        "cache",
        "cacheID",
        "client",
        "responseText",
        "responseText",
        "tries",
        "client",
        "initialOpts",
        "hasFallback",
        "usingFallback",
        "requestDebug",
        "client",
        "errors",
        "client",
        "debugData",
        "requestDebug",
        "tries",
        "reqOpts",
        "initialOpts",
        "reqOpts",
        "initialOpts",
        "reqOpts",
        "initialOpts",
        "reqOpts",
        "reqOpts",
        "safeJSONStringify",
        "reqOpts",
        "headers",
        "client",
        "additionalUA",
        "initialOpts",
        "reqOpts",
        "client",
        "initialOpts",
        "client",
        "initialOpts",
        "usingFallback",
        "doRequest",
        "client",
        "reqOpts",
        "client",
        "initialOpts",
        "currentHost",
        "reqOpts",
        "reqOpts",
        "reqOpts",
        "reqOpts",
        "headers",
        "reqOpts",
        "requestDebug",
        "reqOpts",
        "requestDebug",
        "options",
        "url",
        "options",
        "options",
        "requester",
        "client",
        "requestDebug",
        "requester",
        "client",
        "url",
        "options",
        "success",
        "tryFallback",
        "httpResponse",
        "httpResponse",
        "httpResponse",
        "httpResponse",
        "httpResponse",
        "httpResponse",
        "httpResponse",
        "httpResponse",
        "requestDebug",
        "httpResponse",
        "status",
        "httpResponse",
        "status",
        "debugData",
        "currentHost",
        "removeCredentials",
        "headers",
        "body",
        "body",
        "body",
        "reqOpts",
        "reqOpts",
        "reqOpts",
        "startTime",
        "endTime",
        "endTime",
        "startTime",
        "status",
        "httpResponseOk",
        "client",
        "client",
        "cache",
        "cache",
        "cacheID",
        "httpResponse",
        "httpResponse",
        "httpResponse",
        "status",
        "shouldRetry",
        "tries",
        "retryRequest",
        "requestDebug",
        "errors",
        "httpResponse",
        "httpResponse",
        "debugData",
        "status",
        "client",
        "unrecoverableError",
        "err",
        "requestDebug",
        "err",
        "err",
        "debugData",
        "currentHost",
        "removeCredentials",
        "headers",
        "body",
        "body",
        "body",
        "reqOpts",
        "reqOpts",
        "reqOpts",
        "startTime",
        "endTime",
        "endTime",
        "startTime",
        "err",
        "errors",
        "err",
        "errors",
        "err",
        "err",
        "err",
        "tries",
        "err",
        "errors",
        "err",
        "errors",
        "tries",
        "client",
        "initialOpts",
        "usingFallback",
        "hasFallback",
        "err",
        "debugData",
        "client",
        "err",
        "err",
        "errors",
        "retryRequestWithHigherTimeout",
        "retryRequest",
        "requestDebug",
        "client",
        "initialOpts",
        "doRequest",
        "requester",
        "reqOpts",
        "requestDebug",
        "client",
        "initialOpts",
        "client",
        "reqOpts",
        "client",
        "initialOpts",
        "doRequest",
        "requester",
        "reqOpts",
        "useRequestCache",
        "currentCache",
        "currentCacheID",
        "client",
        "useRequestCache",
        "currentCache",
        "currentCache",
        "currentCacheID",
        "request",
        "callback",
        "isCacheValidWithCurrentID",
        "client",
        "cache",
        "cacheID",
        "request",
        "cache",
        "cacheID",
        "initialOpts",
        "request",
        "okCb",
        "content",
        "exitPromise",
        "initialOpts",
        "callback",
        "content",
        "client",
        "setTimeout",
        "nookCb",
        "err",
        "exitPromise",
        "initialOpts",
        "err",
        "client",
        "setTimeout",
        "request",
        "callback",
        "client",
        "client",
        "cacheID",
        "initialOpts",
        "client",
        "client",
        "body",
        "cacheID",
        "body",
        "isCacheValidWithCurrentID",
        "client",
        "cache",
        "cacheID",
        "requestDebug",
        "cache",
        "cacheID",
        "maybePromiseForCache",
        "client",
        "maybePromiseForCache",
        "maybePromiseForCache",
        "interopCallbackReturn",
        "promiseForCache",
        "content",
        "content",
        "doRequest",
        "client",
        "initialOpts",
        "initialOpts",
        "body",
        "initialOpts",
        "client",
        "initialOpts",
        "initialOpts",
        "client",
        "client",
        "cache",
        "cache",
        "cacheID",
        "request",
        "interopCallbackReturn",
        "request",
        "content",
        "content",
        "AlgoliaSearchCore",
        "args",
        "args",
        "args",
        "key",
        "args",
        "key",
        "args",
        "key",
        "args",
        "key",
        "key",
        "encodeURIComponent",
        "args",
        "key",
        "safeJSONStringify",
        "args",
        "key",
        "args",
        "key",
        "AlgoliaSearchCore",
        "options",
        "require",
        "options",
        "options",
        "ua",
        "options",
        "requestHeaders",
        "requestHeaders",
        "requestHeaders",
        "forEach",
        "addToRequestHeaders",
        "value",
        "key",
        "requestHeaders",
        "key",
        "value",
        "options",
        "forEach",
        "options",
        "addToRequestHeaders",
        "value",
        "key",
        "requestHeaders",
        "key",
        "value",
        "requestHeaders",
        "AlgoliaSearchCore",
        "queries",
        "opts",
        "callback",
        "require",
        "require",
        "isArray",
        "queries",
        "usage",
        "opts",
        "callback",
        "opts",
        "opts",
        "opts",
        "opts",
        "queries",
        "prepareRequest",
        "query",
        "query",
        "encodeURIComponent",
        "query",
        "query",
        "client",
        "query",
        "postObj",
        "prepareJSONPParams",
        "request",
        "requestId",
        "requestId",
        "encodeURIComponent",
        "encodeURIComponent",
        "request",
        "request",
        "opts",
        "postObj",
        "opts",
        "url",
        "postObj",
        "JSONPParams",
        "callback",
        "AlgoliaSearchCore",
        "queries",
        "require",
        "require",
        "isArray",
        "queries",
        "usage",
        "client",
        "queries",
        "performQuery",
        "query",
        "query",
        "query",
        "query",
        "query",
        "usage",
        "require",
        "require",
        "query",
        "query",
        "omit",
        "clone",
        "keyName",
        "keyName",
        "client",
        "filteredParams",
        "client",
        "client",
        "encodeURIComponent",
        "indexName",
        "encodeURIComponent",
        "facetName",
        "searchParameters",
        "AlgoliaSearchCore",
        "tags",
        "tags",
        "i",
        "tags",
        "i",
        "tags",
        "i",
        "j",
        "tags",
        "i",
        "j",
        "oredTags",
        "tags",
        "i",
        "j",
        "strTags",
        "oredTags",
        "strTags",
        "tags",
        "i",
        "tags",
        "strTags",
        "tags",
        "AlgoliaSearchCore",
        "userToken",
        "userToken",
        "AlgoliaSearchCore",
        "AlgoliaSearchCore",
        "milliseconds",
        "milliseconds",
        "milliseconds",
        "AlgoliaSearchCore",
        "timeouts",
        "timeouts",
        "AlgoliaSearchCore",
        "AlgoliaSearchCore",
        "store",
        "data",
        "data",
        "data",
        "AlgoliaSearchCore",
        "data",
        "data",
        "data",
        "store",
        "data",
        "AlgoliaSearchCore",
        "data",
        "now",
        "data",
        "RESET_APP_DATA_TIMER",
        "data",
        "data",
        "AlgoliaSearchCore",
        "data",
        "data",
        "newData",
        "newData",
        "newData",
        "newData",
        "shuffle",
        "newData",
        "AlgoliaSearchCore",
        "data",
        "data",
        "data",
        "data",
        "AlgoliaSearchCore",
        "newData",
        "require",
        "newData",
        "value",
        "key",
        "currentData",
        "key",
        "value",
        "currentData",
        "AlgoliaSearchCore",
        "hostType",
        "hostType",
        "hostType",
        "AlgoliaSearchCore",
        "AlgoliaSearchCore",
        "hostType",
        "hostType",
        "AlgoliaSearchCore",
        "hostIndex",
        "hostType",
        "require",
        "clone",
        "newHostIndexes",
        "hostType",
        "hostIndex",
        "newHostIndexes",
        "hostIndex",
        "AlgoliaSearchCore",
        "hostType",
        "hostType",
        "hostType",
        "hostType",
        "AlgoliaSearchCore",
        "timeoutMultiplier",
        "AlgoliaSearchCore",
        "hostType",
        "hostType",
        "protocol",
        "prepare",
        "host",
        "protocol",
        "host",
        "obj",
        "obj",
        "obj",
        "toJSON",
        "array",
        "array",
        "currentIndex",
        "randomIndex",
        "currentIndex",
        "currentIndex",
        "temporaryValue",
        "array",
        "currentIndex",
        "array",
        "currentIndex",
        "array",
        "randomIndex",
        "array",
        "randomIndex",
        "temporaryValue",
        "array",
        "headers",
        "headerName",
        "headers",
        "headers",
        "headerName",
        "headerName",
        "headerName",
        "value",
        "value",
        "headers",
        "headerName",
        "newHeaders",
        "headerName",
        "value",
        "newHeaders",
        "require",
        "require",
        "exports",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "deprecate",
        "deprecatedMessage",
        "Index",
        "IndexCore",
        "arguments",
        "inherits",
        "Index",
        "IndexCore",
        "Index",
        "content",
        "objectID",
        "callback",
        "arguments",
        "objectID",
        "callback",
        "objectID",
        "objectID",
        "objectID",
        "encodeURIComponent",
        "indexObj",
        "objectID",
        "encodeURIComponent",
        "objectID",
        "content",
        "callback",
        "Index",
        "objects",
        "callback",
        "require",
        "isArray",
        "objects",
        "usage",
        "i",
        "objects",
        "i",
        "objects",
        "i",
        "postObj",
        "request",
        "encodeURIComponent",
        "indexObj",
        "postObj",
        "callback",
        "Index",
        "partialObject",
        "createIfNotExists",
        "callback",
        "arguments",
        "createIfNotExists",
        "callback",
        "createIfNotExists",
        "createIfNotExists",
        "encodeURIComponent",
        "indexObj",
        "encodeURIComponent",
        "partialObject",
        "createIfNotExists",
        "url",
        "url",
        "partialObject",
        "callback",
        "Index",
        "objects",
        "createIfNotExists",
        "callback",
        "arguments",
        "createIfNotExists",
        "callback",
        "createIfNotExists",
        "createIfNotExists",
        "require",
        "isArray",
        "objects",
        "usage",
        "i",
        "objects",
        "i",
        "createIfNotExists",
        "objects",
        "i",
        "objects",
        "i",
        "postObj",
        "request",
        "encodeURIComponent",
        "indexObj",
        "postObj",
        "callback",
        "Index",
        "callback",
        "encodeURIComponent",
        "indexObj",
        "encodeURIComponent",
        "callback",
        "Index",
        "objects",
        "callback",
        "require",
        "isArray",
        "objects",
        "usage",
        "i",
        "objects",
        "i",
        "objects",
        "i",
        "objects",
        "i",
        "postObj",
        "request",
        "encodeURIComponent",
        "indexObj",
        "postObj",
        "callback",
        "Index",
        "objectID",
        "callback",
        "objectID",
        "objectID",
        "objectID",
        "errors",
        "objectID",
        "objectID",
        "callback",
        "objectID",
        "callback",
        "callback",
        "err",
        "err",
        "encodeURIComponent",
        "indexObj",
        "encodeURIComponent",
        "objectID",
        "callback",
        "Index",
        "objectIDs",
        "callback",
        "require",
        "require",
        "isArray",
        "objectIDs",
        "usage",
        "objectIDs",
        "prepareRequest",
        "objectID",
        "objectID",
        "objectID",
        "encodeURIComponent",
        "indexObj",
        "postObj",
        "callback",
        "Index",
        "deprecate",
        "query",
        "callback",
        "require",
        "require",
        "indexObj",
        "arguments",
        "callback",
        "clone",
        "query",
        "stopOrDelete",
        "searchContent",
        "searchContent",
        "searchContent",
        "searchContent",
        "getObjectID",
        "indexObj",
        "objectIDs",
        "waitTask",
        "doDeleteByQuery",
        "deleteObjectsContent",
        "indexObj",
        "deleteObjectsContent",
        "indexObj",
        "query",
        "callback",
        "promise",
        "promise",
        "success",
        "failure",
        "exitPromise",
        "exit",
        "callback",
        "client",
        "setTimeout",
        "err",
        "exitPromise",
        "exit",
        "callback",
        "err",
        "client",
        "setTimeout",
        "deprecatedMessage",
        "Index",
        "callback",
        "encodeURIComponent",
        "indexObj",
        "indexObj",
        "callback",
        "Index",
        "query",
        "queryParameters",
        "query",
        "queryParameters",
        "query",
        "query",
        "require",
        "require",
        "IndexBrowser",
        "client",
        "merge",
        "queryParameters",
        "query",
        "browseLoop",
        "cursor",
        "browser",
        "cursor",
        "body",
        "cursor",
        "body",
        "client",
        "encodeURIComponent",
        "index",
        "body",
        "browseCallback",
        "err",
        "content",
        "browser",
        "err",
        "browser",
        "err",
        "browser",
        "content",
        "content",
        "browser",
        "browseLoop",
        "content",
        "browser",
        "Index",
        "deprecate",
        "ttAdapter",
        "query",
        "syncCb",
        "asyncCb",
        "asyncCb",
        "cb",
        "asyncCb",
        "cb",
        "syncCb",
        "query",
        "searchDone",
        "err",
        "content",
        "err",
        "cb",
        "err",
        "cb",
        "content",
        "Index",
        "taskID",
        "callback",
        "indexObj",
        "retryLoop",
        "client",
        "encodeURIComponent",
        "indexObj",
        "taskID",
        "success",
        "content",
        "loop",
        "baseDelay",
        "loop",
        "loop",
        "delay",
        "maxDelay",
        "delay",
        "maxDelay",
        "content",
        "client",
        "delay",
        "retryLoop",
        "content",
        "callback",
        "promise",
        "promise",
        "successCb",
        "failureCb",
        "content",
        "exitPromise",
        "exit",
        "callback",
        "content",
        "client",
        "setTimeout",
        "err",
        "exitPromise",
        "exit",
        "callback",
        "err",
        "client",
        "setTimeout",
        "Index",
        "callback",
        "encodeURIComponent",
        "indexObj",
        "callback",
        "Index",
        "opts",
        "callback",
        "arguments",
        "opts",
        "callback",
        "opts",
        "opts",
        "opts",
        "opts",
        "encodeURIComponent",
        "indexName",
        "opts",
        "opts",
        "callback",
        "Index",
        "callback",
        "callback",
        "encodeURIComponent",
        "callback",
        "method",
        "_hitsPerPage",
        "callback",
        "page",
        "_previous",
        "page",
        "_hitsPerPage",
        "_previous",
        "method",
        "options",
        "result",
        "result",
        "result",
        "hits",
        "s",
        "s",
        "s",
        "previous",
        "current",
        "synonyms",
        "nbHits",
        "search",
        "options",
        "synonyms",
        "synonyms",
        "search",
        "data",
        "callback",
        "callback",
        "data",
        "data",
        "Index",
        "hitsPerPage",
        "callback",
        "exportData",
        "hitsPerPage",
        "callback",
        "Index",
        "synonym",
        "opts",
        "callback",
        "opts",
        "callback",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "deprecateForwardToSlaves",
        "opts",
        "opts",
        "encodeURIComponent",
        "encodeURIComponent",
        "synonym",
        "forwardToReplicas",
        "synonym",
        "callback",
        "Index",
        "objectID",
        "callback",
        "encodeURIComponent",
        "encodeURIComponent",
        "objectID",
        "callback",
        "Index",
        "objectID",
        "opts",
        "callback",
        "opts",
        "callback",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "deprecateForwardToSlaves",
        "opts",
        "opts",
        "encodeURIComponent",
        "encodeURIComponent",
        "objectID",
        "forwardToReplicas",
        "callback",
        "Index",
        "opts",
        "callback",
        "opts",
        "callback",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "deprecateForwardToSlaves",
        "opts",
        "opts",
        "encodeURIComponent",
        "forwardToReplicas",
        "callback",
        "Index",
        "synonyms",
        "opts",
        "callback",
        "opts",
        "callback",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "deprecateForwardToSlaves",
        "opts",
        "opts",
        "encodeURIComponent",
        "forwardToReplicas",
        "opts",
        "synonyms",
        "callback",
        "Index",
        "callback",
        "callback",
        "encodeURIComponent",
        "callback",
        "Index",
        "hitsPerPage",
        "callback",
        "exportData",
        "hitsPerPage",
        "callback",
        "Index",
        "rule",
        "opts",
        "callback",
        "opts",
        "callback",
        "opts",
        "opts",
        "opts",
        "opts",
        "rule",
        "errors",
        "opts",
        "encodeURIComponent",
        "encodeURIComponent",
        "rule",
        "forwardToReplicas",
        "rule",
        "callback",
        "Index",
        "objectID",
        "callback",
        "encodeURIComponent",
        "encodeURIComponent",
        "objectID",
        "callback",
        "Index",
        "objectID",
        "opts",
        "callback",
        "opts",
        "callback",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "encodeURIComponent",
        "encodeURIComponent",
        "objectID",
        "forwardToReplicas",
        "callback",
        "Index",
        "opts",
        "callback",
        "opts",
        "callback",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "encodeURIComponent",
        "forwardToReplicas",
        "callback",
        "Index",
        "rules",
        "opts",
        "callback",
        "opts",
        "callback",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "encodeURIComponent",
        "forwardToReplicas",
        "opts",
        "rules",
        "callback",
        "Index",
        "callback",
        "err",
        "err",
        "errors",
        "err",
        "err",
        "callback",
        "result",
        "result",
        "res",
        "callback",
        "res",
        "err",
        "callback",
        "err",
        "Index",
        "findCallback",
        "requestOptions",
        "callback",
        "requestOptions",
        "requestOptions",
        "requestOptions",
        "requestOptions",
        "requestOptions",
        "requestOptions",
        "requestOptions",
        "requestOptions",
        "page",
        "that",
        "query",
        "requestOptions",
        "result",
        "result",
        "position",
        "hits",
        "position",
        "hits",
        "position",
        "findCallback",
        "hit",
        "hit",
        "position",
        "page",
        "page",
        "paginate",
        "page",
        "result",
        "errors",
        "paginateLoop",
        "paginateLoop",
        "page",
        "callback",
        "promise",
        "promise",
        "res",
        "callback",
        "res",
        "err",
        "callback",
        "err",
        "Index",
        "result",
        "objectID",
        "result",
        "position",
        "hits",
        "position",
        "hits",
        "position",
        "objectID",
        "position",
        "Index",
        "settings",
        "opts",
        "callback",
        "arguments",
        "opts",
        "callback",
        "opts",
        "opts",
        "opts",
        "deprecateForwardToSlaves",
        "opts",
        "opts",
        "encodeURIComponent",
        "indexObj",
        "forwardToReplicas",
        "settings",
        "callback",
        "Index",
        "deprecate",
        "callback",
        "callback",
        "deprecatedMessage",
        "Index",
        "deprecate",
        "callback",
        "encodeURIComponent",
        "indexObj",
        "callback",
        "deprecatedMessage",
        "Index",
        "deprecate",
        "key",
        "callback",
        "key",
        "callback",
        "deprecatedMessage",
        "Index",
        "deprecate",
        "key",
        "callback",
        "encodeURIComponent",
        "indexObj",
        "key",
        "callback",
        "deprecatedMessage",
        "Index",
        "deprecate",
        "key",
        "callback",
        "key",
        "callback",
        "deprecatedMessage",
        "Index",
        "deprecate",
        "key",
        "callback",
        "encodeURIComponent",
        "indexObj",
        "key",
        "callback",
        "deprecatedMessage",
        "Index",
        "deprecate",
        "acls",
        "callback",
        "acls",
        "callback",
        "deprecatedMessage",
        "Index",
        "deprecate",
        "acls",
        "callback",
        "require",
        "isArray",
        "acls",
        "usage",
        "arguments",
        "callback",
        "acls",
        "postObj",
        "postObj",
        "postObj",
        "postObj",
        "postObj",
        "postObj",
        "encodeURIComponent",
        "postObj",
        "callback",
        "deprecatedMessage",
        "Index",
        "deprecate",
        "deprecatedAddUserKeyWithValidity",
        "acls",
        "callback",
        "acls",
        "callback",
        "deprecatedMessage",
        "Index",
        "deprecate",
        "key",
        "acls",
        "callback",
        "key",
        "acls",
        "callback",
        "deprecatedMessage",
        "Index",
        "deprecate",
        "key",
        "acls",
        "callback",
        "require",
        "isArray",
        "acls",
        "usage",
        "arguments",
        "callback",
        "acls",
        "putObj",
        "putObj",
        "putObj",
        "putObj",
        "putObj",
        "putObj",
        "encodeURIComponent",
        "key",
        "putObj",
        "callback",
        "deprecatedMessage",
        "require",
        "exports",
        "IndexBrowser",
        "require",
        "require",
        "inherits",
        "IndexBrowser",
        "EventEmitter",
        "IndexBrowser",
        "IndexBrowser",
        "IndexBrowser",
        "err",
        "err",
        "IndexBrowser",
        "content",
        "content",
        "IndexBrowser",
        "require",
        "exports",
        "require",
        "require",
        "require",
        "IndexCore",
        "algoliasearch",
        "indexName",
        "indexName",
        "algoliasearch",
        "IndexCore",
        "IndexCore",
        "buildSearchMethod",
        "IndexCore",
        "deprecate",
        "buildSearchMethod",
        "deprecatedMessage",
        "IndexCore",
        "query",
        "queryParameters",
        "callback",
        "require",
        "arguments",
        "arguments",
        "arguments",
        "page",
        "callback",
        "arguments",
        "query",
        "arguments",
        "page",
        "arguments",
        "arguments",
        "hitsPerPage",
        "arguments",
        "arguments",
        "callback",
        "arguments",
        "hitsPerPage",
        "query",
        "queryParameters",
        "arguments",
        "arguments",
        "callback",
        "arguments",
        "queryParameters",
        "arguments",
        "query",
        "arguments",
        "arguments",
        "callback",
        "arguments",
        "queryParameters",
        "queryParameters",
        "merge",
        "queryParameters",
        "page",
        "hitsPerPage",
        "query",
        "queryParameters",
        "encodeURIComponent",
        "indexObj",
        "callback",
        "IndexCore",
        "cursor",
        "callback",
        "encodeURIComponent",
        "cursor",
        "callback",
        "IndexCore",
        "callback",
        "require",
        "require",
        "usage",
        "omit",
        "clone",
        "keyName",
        "keyName",
        "filteredParams",
        "encodeURIComponent",
        "encodeURIComponent",
        "facetName",
        "searchParameters",
        "callback",
        "IndexCore",
        "deprecate",
        "callback",
        "callback",
        "deprecatedMessage",
        "IndexCore",
        "url",
        "callback",
        "additionalUA",
        "url",
        "encodeURIComponent",
        "encodeURIComponent",
        "callback",
        "additionalUA",
        "IndexCore",
        "objectID",
        "attrs",
        "callback",
        "arguments",
        "attrs",
        "callback",
        "attrs",
        "attrs",
        "attrs",
        "i",
        "attrs",
        "i",
        "i",
        "attrs",
        "i",
        "encodeURIComponent",
        "indexObj",
        "encodeURIComponent",
        "objectID",
        "callback",
        "IndexCore",
        "objectIDs",
        "attributesToRetrieve",
        "callback",
        "require",
        "require",
        "isArray",
        "objectIDs",
        "usage",
        "arguments",
        "attributesToRetrieve",
        "callback",
        "attributesToRetrieve",
        "attributesToRetrieve",
        "objectIDs",
        "prepareRequest",
        "objectID",
        "indexObj",
        "objectID",
        "attributesToRetrieve",
        "request",
        "attributesToRetrieve",
        "request",
        "body",
        "callback",
        "IndexCore",
        "IndexCore",
        "IndexCore",
        "IndexCore",
        "require",
        "exports",
        "require",
        "require",
        "createAlgoliasearch",
        "AlgoliaSearch",
        "require",
        "exports",
        "process",
        "require",
        "require",
        "createAlgoliasearch",
        "AlgoliaSearch",
        "uaSuffix",
        "require",
        "require",
        "require",
        "require",
        "require",
        "uaSuffix",
        "uaSuffix",
        "process",
        "require",
        "applicationID",
        "apiKey",
        "opts",
        "require",
        "opts",
        "cloneDeep",
        "opts",
        "opts",
        "opts",
        "algoliasearch",
        "AlgoliaSearchBrowser",
        "applicationID",
        "apiKey",
        "opts",
        "algoliasearch",
        "require",
        "algoliasearch",
        "algoliasearch",
        "uaSuffix",
        "algoliasearch",
        "places",
        "algoliasearch",
        "require",
        "algoliasearch",
        "support",
        "support",
        "XMLHttpRequest",
        "AlgoliaSearch",
        "arguments",
        "inherits",
        "AlgoliaSearchBrowser",
        "AlgoliaSearch",
        "AlgoliaSearchBrowser",
        "request",
        "url",
        "opts",
        "wrapRequest",
        "resolve",
        "reject",
        "support",
        "support",
        "reject",
        "errors",
        "url",
        "inlineHeaders",
        "url",
        "opts",
        "opts",
        "support",
        "XMLHttpRequest",
        "XDomainRequest",
        "reqTimeout",
        "setTimeout",
        "onTimeout",
        "opts",
        "req",
        "onProgress",
        "req",
        "req",
        "onReadyStateChange",
        "req",
        "onLoad",
        "req",
        "onError",
        "req",
        "XMLHttpRequest",
        "req",
        "opts",
        "url",
        "opts",
        "req",
        "opts",
        "req",
        "opts",
        "req",
        "opts",
        "url",
        "support",
        "body",
        "opts",
        "req",
        "req",
        "req",
        "body",
        "req",
        "body",
        "req",
        "timedOut",
        "clearTimeout",
        "reqTimeout",
        "req",
        "req",
        "req",
        "req",
        "req",
        "e",
        "errors",
        "req",
        "errors",
        "reject",
        "resolve",
        "timedOut",
        "clearTimeout",
        "reqTimeout",
        "reject",
        "errors",
        "timedOut",
        "req",
        "reject",
        "errors",
        "connected",
        "clearTimeout",
        "reqTimeout",
        "reqTimeout",
        "setTimeout",
        "onTimeout",
        "opts",
        "connected",
        "onConnect",
        "connected",
        "req",
        "onConnect",
        "AlgoliaSearchBrowser",
        "requestFallback",
        "url",
        "opts",
        "url",
        "inlineHeaders",
        "url",
        "opts",
        "wrapJsonpRequest",
        "resolve",
        "reject",
        "jsonpRequest",
        "url",
        "opts",
        "jsonpRequestDone",
        "err",
        "content",
        "err",
        "reject",
        "err",
        "resolve",
        "content",
        "AlgoliaSearchBrowser",
        "rejectPromise",
        "val",
        "val",
        "resolvePromise",
        "val",
        "val",
        "delayPromise",
        "ms",
        "resolveOnTimeout",
        "resolve",
        "setTimeout",
        "resolve",
        "ms",
        "all",
        "promises",
        "promises",
        "algoliasearch",
        "require",
        "require",
        "exports",
        "inlineHeaders",
        "require",
        "url",
        "headers",
        "url",
        "url",
        "url",
        "url",
        "encode",
        "headers",
        "require",
        "exports",
        "jsonpRequest",
        "require",
        "url",
        "opts",
        "cb",
        "opts",
        "cb",
        "opts",
        "url",
        "opts",
        "JSONPCounter",
        "JSONPCounter",
        "cbName",
        "data",
        "removeGlobals",
        "timedOut",
        "opts",
        "cbCalled",
        "clean",
        "cb",
        "data",
        "data",
        "url",
        "cbName",
        "opts",
        "opts",
        "url",
        "opts",
        "setTimeout",
        "timeout",
        "opts",
        "script",
        "readystatechange",
        "script",
        "success",
        "script",
        "error",
        "script",
        "script",
        "script",
        "url",
        "head",
        "script",
        "opts",
        "done",
        "timedOut",
        "done",
        "cbCalled",
        "opts",
        "clean",
        "cb",
        "errors",
        "success",
        "clearTimeout",
        "ontimeout",
        "script",
        "script",
        "script",
        "head",
        "script",
        "cbName",
        "cbName",
        "e",
        "cbName",
        "cbName",
        "opts",
        "timedOut",
        "clean",
        "cb",
        "errors",
        "opts",
        "done",
        "timedOut",
        "clean",
        "cb",
        "errors",
        "require",
        "exports",
        "buildSearchMethod",
        "require",
        "queryParam",
        "url",
        "search",
        "query",
        "args",
        "callback",
        "query",
        "args",
        "callback",
        "errors",
        "arguments",
        "query",
        "callback",
        "query",
        "query",
        "arguments",
        "args",
        "callback",
        "args",
        "args",
        "query",
        "query",
        "args",
        "query",
        "query",
        "query",
        "query",
        "query",
        "query",
        "queryParam",
        "encodeURIComponent",
        "query",
        "args",
        "args",
        "additionalUA",
        "args",
        "args",
        "args",
        "url",
        "callback",
        "additionalUA",
        "require",
        "exports",
        "clone",
        "obj",
        "obj",
        "require",
        "exports",
        "createAnalyticsClient",
        "require",
        "appId",
        "apiKey",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "analytics",
        "algoliasearch",
        "appId",
        "apiKey",
        "opts",
        "analytics",
        "_params",
        "callback",
        "encodeURIComponent",
        "offset",
        "encodeURIComponent",
        "limit",
        "callback",
        "analytics",
        "abTestID",
        "callback",
        "encodeURIComponent",
        "abTestID",
        "callback",
        "analytics",
        "abTest",
        "callback",
        "abTest",
        "callback",
        "analytics",
        "abTestID",
        "callback",
        "encodeURIComponent",
        "abTestID",
        "callback",
        "analytics",
        "abTestID",
        "callback",
        "encodeURIComponent",
        "abTestID",
        "callback",
        "analytics",
        "indexName",
        "taskID",
        "callback",
        "indexName",
        "taskID",
        "callback",
        "analytics",
        "require",
        "exports",
        "deprecate",
        "fn",
        "message",
        "warned",
        "message",
        "warned",
        "fn",
        "arguments",
        "deprecated",
        "require",
        "exports",
        "deprecatedMessage",
        "previousUsage",
        "newUsage",
        "previousUsage",
        "previousUsage",
        "newUsage",
        "githubAnchorLink",
        "require",
        "exports",
        "require",
        "message",
        "extraProperties",
        "require",
        "error",
        "message",
        "extraProperties",
        "forEach",
        "extraProperties",
        "addToErrorObject",
        "value",
        "key",
        "error",
        "key",
        "value",
        "inherits",
        "AlgoliaSearchError",
        "name",
        "message",
        "arguments",
        "args",
        "args",
        "message",
        "AlgoliaSearchError",
        "args",
        "name",
        "inherits",
        "AlgoliaSearchCustomError",
        "AlgoliaSearchError",
        "AlgoliaSearchCustomError",
        "AlgoliaSearchError",
        "createCustomError",
        "createCustomError",
        "createCustomError",
        "createCustomError",
        "createCustomError",
        "createCustomError",
        "createCustomError",
        "createCustomError",
        "require",
        "exports",
        "exitPromise",
        "fn",
        "_setTimeout",
        "_setTimeout",
        "fn",
        "require",
        "exports",
        "require",
        "arr",
        "fn",
        "arr",
        "item",
        "itemIndex",
        "newArr",
        "fn",
        "item",
        "itemIndex",
        "arr",
        "newArr",
        "require",
        "exports",
        "require",
        "merge",
        "destination",
        "arguments",
        "sources",
        "source",
        "keyName",
        "source",
        "source",
        "keyName",
        "destination",
        "keyName",
        "source",
        "keyName",
        "destination",
        "keyName",
        "merge",
        "destination",
        "keyName",
        "source",
        "keyName",
        "source",
        "keyName",
        "destination",
        "keyName",
        "source",
        "keyName",
        "destination",
        "require",
        "exports",
        "omit",
        "obj",
        "test",
        "require",
        "require",
        "keys",
        "obj",
        "doFilter",
        "keyName",
        "test",
        "keyName",
        "filtered",
        "keyName",
        "obj",
        "keyName",
        "filtered",
        "require",
        "exports",
        "createPlacesClient",
        "require",
        "require",
        "algoliasearch",
        "places",
        "appID",
        "apiKey",
        "opts",
        "require",
        "opts",
        "opts",
        "cloneDeep",
        "opts",
        "opts",
        "opts",
        "arguments",
        "appID",
        "appID",
        "appID",
        "apiKey",
        "opts",
        "algoliasearch",
        "appID",
        "apiKey",
        "opts",
        "client",
        "index",
        "buildSearchMethod",
        "index",
        "options",
        "callback",
        "qs3",
        "options",
        "encoded",
        "callback",
        "index",
        "objectID",
        "callback",
        "encodeURIComponent",
        "objectID",
        "callback",
        "index",
        "require",
        "exports",
        "require",
        "key",
        "data",
        "key",
        "data",
        "key",
        "key",
        "key",
        "key",
        "data",
        "moduleStore",
        "key",
        "data",
        "localStorageNamespace",
        "key",
        "data",
        "localStorageNamespace",
        "key",
        "e",
        "localStorageFailure",
        "key",
        "e",
        "key",
        "localStorageNamespace",
        "key",
        "e",
        "localStorageFailure",
        "key",
        "e",
        "key",
        "e",
        "debug",
        "e",
        "cleanup",
        "store",
        "moduleStore",
        "store",
        "key",
        "store",
        "supportsLocalStorage",
        "localStorageStore",
        "moduleStore",
        "getOrSet",
        "getOrSet",
        "supportsLocalStorage",
        "key",
        "data",
        "arguments",
        "store",
        "key",
        "store",
        "key",
        "data",
        "localStorageNamespace",
        "localStorageNamespace",
        "_",
        "localStorageNamespace",
        "_",
        "require",
        "exports"
    ],
    "literals": [
        "'undefined'",
        "'undefined'",
        "\"function\"",
        "\"Cannot find module '\"",
        "\"'\"",
        "\"MODULE_NOT_FOUND\"",
        "\"function\"",
        "'head'",
        "'script'",
        "'function'",
        "'text/javascript'",
        "'utf8'",
        "'async'",
        "''",
        "'onload'",
        "'Failed to load '",
        "'complete'",
        "'loaded'",
        "'use strict'",
        "'cdn\\\\.jsdelivr\\\\.net/algoliasearch/latest/'",
        "'.'",
        "'\\\\.'",
        "'(?:\\\\.min)?\\\\.js$'",
        "'script'",
        "'use strict'",
        "'//cdn.jsdelivr.net/algoliasearch/2/'",
        "'.min.js'",
        "'-- AlgoliaSearch `latest` warning --\\n'",
        "'Warning, you are using the `latest` version string from jsDelivr to load the AlgoliaSearch library.\\n'",
        "'Using `latest` is no more recommended, you should load //cdn.jsdelivr.net/algoliasearch/2/algoliasearch.min.js\\n\\n'",
        "'Also, we updated the AlgoliaSearch JavaScript client to V3. If you want to upgrade,\\n'",
        "'please read our migration guide at https://github.com/algolia/algoliasearch-client-js/wiki/Migration-guide-from-2.x.x-to-3.x.x\\n'",
        "'-- /AlgoliaSearch  `latest` warning --'",
        "'\\x3Cscript>window.ALGOLIA_SUPPORTS_DOCWRITE = true\\x3C/script>'",
        "'\\x3Cscript src=\"'",
        "'\">\\x3C/script>'",
        "'document.write'",
        "'DOMElement'",
        "'DOMElement'",
        "'AlgoliaSearch: loaded V2 script using '",
        "\"1\"",
        "'use strict'",
        "'-- AlgoliaSearch V2 => V3 error --\\n'",
        "'You are trying to use a new version of the AlgoliaSearch JavaScript client with an old notation.\\n'",
        "'Please read our migration guide at https://github.com/algolia/algoliasearch-client-js/wiki/Migration-guide-from-2.x.x-to-3.x.x\\n'",
        "'-- /AlgoliaSearch V2 => V3 error --'",
        "'use strict'",
        "\"algoliasearch\"",
        "\"2\"",
        "\"3\"",
        "\"4\"",
        "\"object\"",
        "\"undefined\"",
        "\"function\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"function\"",
        "\"Cannot find module '\"",
        "\"'\"",
        "\"MODULE_NOT_FOUND\"",
        "\"function\"",
        "'undefined'",
        "'undefined'",
        "'lightseagreen'",
        "'forestgreen'",
        "'goldenrod'",
        "'dodgerblue'",
        "'darkorchid'",
        "'crimson'",
        "'undefined'",
        "'renderer'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'[UnexpectedJSONParseError]: '",
        "'%c'",
        "''",
        "' %c'",
        "' '",
        "'%c '",
        "' '",
        "'+'",
        "'color: '",
        "'color: inherit'",
        "'%%'",
        "'%c'",
        "'object'",
        "'debug'",
        "'undefined'",
        "'env'",
        "\"12\"",
        "\"2\"",
        "'default'",
        "'string'",
        "'%O'",
        "'%%'",
        "'function'",
        "'function'",
        "'string'",
        "''",
        "'.*?'",
        "'-'",
        "'^'",
        "'$'",
        "'^'",
        "'$'",
        "''",
        "\"9\"",
        "'object'",
        "'undefined'",
        "'function'",
        "'use strict'",
        "'object'",
        "'function'",
        "'function'",
        "'[object Array]'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'[object process]'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "''",
        "'vertx'",
        "'function'",
        "'object'",
        "\"You cannot resolve a promise with itself\"",
        "'A promises callback cannot return that same promise.'",
        "'Settle: '",
        "' unknown promise'",
        "'Array Methods must be provided an Array'",
        "'function'",
        "'You must pass an array to race.'",
        "'You must pass a resolver function as the first argument to the promise constructor'",
        "\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\"",
        "'function'",
        "'catch'",
        "'undefined'",
        "'undefined'",
        "'return this'",
        "'polyfill failed because global object is unavailable in this environment'",
        "'[object Promise]'",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"12\"",
        "'n must be a positive number'",
        "'error'",
        "'Uncaught, unspecified \"error\" event. ('",
        "')'",
        "'listener must be a function'",
        "'newListener'",
        "'(node) warning: possible EventEmitter memory '",
        "'leak detected. %d listeners added. '",
        "'Use emitter.setMaxListeners() to increase limit.'",
        "'function'",
        "'listener must be a function'",
        "'listener must be a function'",
        "'removeListener'",
        "'removeListener'",
        "'removeListener'",
        "'removeListener'",
        "'function'",
        "'number'",
        "'object'",
        "'[object Function]'",
        "'iterator must be a function'",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "'function'",
        "'[object Array]'",
        "'string'",
        "'number'",
        "'val is not a non-empty string or a valid number. val='",
        "'ms'",
        "'years'",
        "'year'",
        "'yrs'",
        "'yr'",
        "'y'",
        "'days'",
        "'day'",
        "'d'",
        "'hours'",
        "'hour'",
        "'hrs'",
        "'hr'",
        "'h'",
        "'minutes'",
        "'minute'",
        "'mins'",
        "'min'",
        "'m'",
        "'seconds'",
        "'second'",
        "'secs'",
        "'sec'",
        "'s'",
        "'milliseconds'",
        "'millisecond'",
        "'msecs'",
        "'msec'",
        "'ms'",
        "'d'",
        "'h'",
        "'m'",
        "'s'",
        "'ms'",
        "'day'",
        "'hour'",
        "'minute'",
        "'second'",
        "' ms'",
        "' '",
        "' '",
        "'s'",
        "'use strict'",
        "'toString'",
        "'prototype'",
        "'toString'",
        "'toLocaleString'",
        "'valueOf'",
        "'hasOwnProperty'",
        "'isPrototypeOf'",
        "'propertyIsEnumerable'",
        "'constructor'",
        "'undefined'",
        "'$'",
        "'object'",
        "'undefined'",
        "'object'",
        "'[object Function]'",
        "'[object String]'",
        "'Object.keys called on a non-object'",
        "'prototype'",
        "'constructor'",
        "''",
        "\"11\"",
        "'use strict'",
        "'[object Arguments]'",
        "'[object Array]'",
        "'object'",
        "'number'",
        "'[object Function]'",
        "'setTimeout has not been defined'",
        "'clearTimeout has not been defined'",
        "'function'",
        "'function'",
        "'browser'",
        "''",
        "'process.binding is not supported'",
        "'/'",
        "'process.chdir is not supported'",
        "'use strict'",
        "'&'",
        "'='",
        "'string'",
        "'number'",
        "'%20'",
        "''",
        "'[object Array]'",
        "'use strict'",
        "'string'",
        "'boolean'",
        "'true'",
        "'false'",
        "'number'",
        "''",
        "''",
        "'&'",
        "'='",
        "'object'",
        "''",
        "'[object Array]'",
        "'use strict'",
        "\"13\"",
        "\"14\"",
        "'DELETE'",
        "'/1/indexes/'",
        "'write'",
        "'move'",
        "'POST'",
        "'/1/indexes/'",
        "'/operation'",
        "'write'",
        "'copy'",
        "'function'",
        "'undefined'",
        "'the scope given to `copyIndex` was not an array with settings, synonyms or rules'",
        "'POST'",
        "'/1/indexes/'",
        "'/operation'",
        "'write'",
        "'object'",
        "'function'",
        "'function'",
        "'GET'",
        "'/1/logs?'",
        "''",
        "'read'",
        "''",
        "'function'",
        "'?page='",
        "'GET'",
        "'/1/indexes'",
        "'read'",
        "'client.listUserKeys()'",
        "'client.listApiKeys()'",
        "'GET'",
        "'/1/keys'",
        "'read'",
        "'client.getUserKeyACL()'",
        "'client.getApiKey()'",
        "'GET'",
        "'/1/keys/'",
        "'read'",
        "'client.deleteUserKey()'",
        "'client.deleteApiKey()'",
        "'DELETE'",
        "'/1/keys/'",
        "'write'",
        "'POST'",
        "'/1/keys/'",
        "'/restore'",
        "'write'",
        "'client.addUserKey()'",
        "'client.addApiKey()'",
        "'Usage: client.addApiKey(arrayOfAcls[, params, callback])'",
        "'function'",
        "''",
        "'POST'",
        "'/1/keys'",
        "'write'",
        "'client.addUserKeyWithValidity()'",
        "'client.addApiKey()'",
        "'client.updateUserKey()'",
        "'client.updateApiKey()'",
        "'Usage: client.updateApiKey(key, arrayOfAcls[, params, callback])'",
        "'function'",
        "''",
        "'PUT'",
        "'/1/keys/'",
        "'write'",
        "'client.startQueriesBatch()'",
        "'client.search()'",
        "'client.addQueryInBatch()'",
        "'client.search()'",
        "'client.sendQueriesBatch()'",
        "'client.search()'",
        "'Usage: client.batch(operations[, callback])'",
        "'POST'",
        "'/1/indexes/*/batch'",
        "'write'",
        "'You have to provide both a userID and cluster'",
        "'POST'",
        "'/1/clusters/mapping'",
        "'write'",
        "'x-algolia-user-id'",
        "'You have to provide both an array of userIDs and cluster'",
        "'POST'",
        "'/1/clusters/mapping/batch'",
        "'write'",
        "'GET'",
        "'/1/clusters/mapping/top'",
        "'read'",
        "'You have to provide a userID'",
        "'GET'",
        "'/1/clusters/mapping/'",
        "'read'",
        "'GET'",
        "'/1/clusters'",
        "'read'",
        "'GET'",
        "'/1/clusters/mapping'",
        "'read'",
        "'You have to provide a userID'",
        "'DELETE'",
        "'/1/clusters/mapping'",
        "'write'",
        "'x-algolia-user-id'",
        "'POST'",
        "'/1/clusters/mapping/search'",
        "'read'",
        "'POST'",
        "'/1/recommendation/personalization/strategy'",
        "'write'",
        "'GET'",
        "'/1/recommendation/personalization/strategy'",
        "'read'",
        "'Not implemented in this environment.\\n'",
        "'If you feel this is a mistake, write to support@algolia.com'",
        "\"17\"",
        "\"18\"",
        "\"26\"",
        "\"27\"",
        "\"28\"",
        "\"29\"",
        "\"30\"",
        "\"7\"",
        "\"8\"",
        "'algoliasearch'",
        "'Usage: algoliasearch(applicationID, apiKey, opts)'",
        "'Please provide an application ID. '",
        "'Please provide an API key. '",
        "'https:'",
        "':'",
        "'http:'",
        "'https:'",
        "'protocol must be `http:` or `https:` (was `'",
        "'`)'",
        "'-'",
        "'.algolianet.com'",
        "''",
        "'-dsn'",
        "'.algolia.net'",
        "'.algolia.net'",
        "'init done, %j'",
        "'; '",
        "'algoliasearch:'",
        "''",
        "'request start'",
        "'_body_'",
        "'serving response from cache'",
        "'could not get any response'",
        "'Cannot connect to the AlgoliaSearch API.'",
        "' Send an email to support@algolia.com to report and resolve the issue.'",
        "' Application id was: '",
        "'switching to fallback'",
        "'method: %s, url: %s, headers: %j, timeouts: %d'",
        "'using fallback'",
        "'received response: statusCode: %s, computed statusCode: %d, headers: %j'",
        "'unrecoverable error'",
        "'error: %s, stack: %s'",
        "'retrying request'",
        "'retrying request with higher timeout'",
        "'function'",
        "'_body_'",
        "'serving request from cache'",
        "'function'",
        "''",
        "''",
        "'&'",
        "'='",
        "'[object Array]'",
        "'; '",
        "'x-algolia-agent'",
        "'x-algolia-application-id'",
        "'x-algolia-api-key'",
        "'x-algolia-usertoken'",
        "'x-algolia-tagfilters'",
        "'Usage: client.search(arrayOfQueries[, callback])'",
        "'function'",
        "''",
        "'query='",
        "'='",
        "'/1/indexes/'",
        "'?'",
        "'&'",
        "'/1/indexes/*/queries'",
        "'POST'",
        "'read'",
        "'GET'",
        "'/1/indexes/*'",
        "'Usage: client.searchForFacetValues([{indexName, params: {facetName, facetQuery, ...params}}, ...queries])'",
        "'facetName'",
        "''",
        "'POST'",
        "'/1/indexes/'",
        "'/facets/'",
        "'/query'",
        "'read'",
        "'[object Array]'",
        "'[object Array]'",
        "'('",
        "','",
        "')'",
        "','",
        "'//'",
        "'x-algolia-api-key'",
        "'x-algolia-application-id'",
        "'**hidden for security purposes**'",
        "\"1\"",
        "\"12\"",
        "\"20\"",
        "\"26\"",
        "\"30\"",
        "\"31\"",
        "\"32\"",
        "\"34\"",
        "\"36\"",
        "\"5\"",
        "\"8\"",
        "'forwardToSlaves'",
        "'forwardToReplicas'",
        "'function'",
        "'PUT'",
        "'POST'",
        "'/1/indexes/'",
        "'/'",
        "''",
        "'write'",
        "'Usage: index.addObjects(arrayOfObjects[, callback])'",
        "'addObject'",
        "'POST'",
        "'/1/indexes/'",
        "'/batch'",
        "'write'",
        "'function'",
        "'/1/indexes/'",
        "'/'",
        "'/partial'",
        "'?createIfNotExists=false'",
        "'POST'",
        "'write'",
        "'function'",
        "'Usage: index.partialUpdateObjects(arrayOfObjects[, callback])'",
        "'partialUpdateObject'",
        "'partialUpdateObjectNoCreate'",
        "'POST'",
        "'/1/indexes/'",
        "'/batch'",
        "'write'",
        "'PUT'",
        "'/1/indexes/'",
        "'/'",
        "'write'",
        "'Usage: index.saveObjects(arrayOfObjects[, callback])'",
        "'updateObject'",
        "'POST'",
        "'/1/indexes/'",
        "'/batch'",
        "'write'",
        "'function'",
        "'string'",
        "'number'",
        "'function'",
        "'ObjectID must be a string'",
        "'Cannot delete an object without an objectID'",
        "'function'",
        "'DELETE'",
        "'/1/indexes/'",
        "'/'",
        "'write'",
        "'Usage: index.deleteObjects(arrayOfObjectIDs[, callback])'",
        "'deleteObject'",
        "'POST'",
        "'/1/indexes/'",
        "'/batch'",
        "'write'",
        "'function'",
        "'objectID'",
        "'index.deleteByQuery()'",
        "'index.deleteBy()'",
        "'POST'",
        "'/1/indexes/'",
        "'/deleteByQuery'",
        "''",
        "'write'",
        "'object'",
        "''",
        "'POST'",
        "'/1/indexes/'",
        "'/browse'",
        "'read'",
        "'function'",
        "'ttAdapter is not necessary anymore and will be removed in the next version,\\n'",
        "'have a look at autocomplete.js (https://github.com/algolia/autocomplete.js)'",
        "'GET'",
        "'read'",
        "'/1/indexes/'",
        "'/task/'",
        "'published'",
        "'POST'",
        "'/1/indexes/'",
        "'/clear'",
        "'write'",
        "'function'",
        "'GET'",
        "'/1/indexes/'",
        "'/settings?getVersion=2'",
        "'&advanced='",
        "''",
        "'read'",
        "'function'",
        "'POST'",
        "'/1/indexes/'",
        "'/synonyms/search'",
        "'read'",
        "'function'",
        "'function'",
        "'true'",
        "'false'",
        "'PUT'",
        "'/1/indexes/'",
        "'/synonyms/'",
        "'?forwardToReplicas='",
        "'write'",
        "'GET'",
        "'/1/indexes/'",
        "'/synonyms/'",
        "'read'",
        "'function'",
        "'true'",
        "'false'",
        "'DELETE'",
        "'/1/indexes/'",
        "'/synonyms/'",
        "'?forwardToReplicas='",
        "'write'",
        "'function'",
        "'true'",
        "'false'",
        "'POST'",
        "'/1/indexes/'",
        "'/synonyms/clear'",
        "'?forwardToReplicas='",
        "'write'",
        "'function'",
        "'true'",
        "'false'",
        "'POST'",
        "'/1/indexes/'",
        "'/synonyms/batch'",
        "'?forwardToReplicas='",
        "'&replaceExistingSynonyms='",
        "'true'",
        "'false'",
        "'write'",
        "'function'",
        "'POST'",
        "'/1/indexes/'",
        "'/rules/search'",
        "'read'",
        "'function'",
        "'Missing or empty objectID field for rule'",
        "'true'",
        "'false'",
        "'PUT'",
        "'/1/indexes/'",
        "'/rules/'",
        "'?forwardToReplicas='",
        "'write'",
        "'GET'",
        "'/1/indexes/'",
        "'/rules/'",
        "'read'",
        "'function'",
        "'true'",
        "'false'",
        "'DELETE'",
        "'/1/indexes/'",
        "'/rules/'",
        "'?forwardToReplicas='",
        "'write'",
        "'function'",
        "'true'",
        "'false'",
        "'POST'",
        "'/1/indexes/'",
        "'/rules/clear'",
        "'?forwardToReplicas='",
        "'write'",
        "'function'",
        "'true'",
        "'false'",
        "'POST'",
        "'/1/indexes/'",
        "'/rules/batch'",
        "'?forwardToReplicas='",
        "'&clearExistingRules='",
        "'true'",
        "'false'",
        "'write'",
        "'function'",
        "''",
        "'Object not found'",
        "'function'",
        "'true'",
        "'false'",
        "'PUT'",
        "'/1/indexes/'",
        "'/settings?forwardToReplicas='",
        "'write'",
        "'index.listUserKeys()'",
        "'client.listApiKeys()'",
        "'GET'",
        "'/1/indexes/'",
        "'/keys'",
        "'read'",
        "'index.listApiKeys()'",
        "'client.listApiKeys()'",
        "'index.getUserKeyACL()'",
        "'client.getApiKey()'",
        "'GET'",
        "'/1/indexes/'",
        "'/keys/'",
        "'read'",
        "'index.getApiKey()'",
        "'client.getApiKey()'",
        "'index.deleteUserKey()'",
        "'client.deleteApiKey()'",
        "'DELETE'",
        "'/1/indexes/'",
        "'/keys/'",
        "'write'",
        "'index.deleteApiKey()'",
        "'client.deleteApiKey()'",
        "'index.addUserKey()'",
        "'client.addApiKey()'",
        "'Usage: index.addApiKey(arrayOfAcls[, params, callback])'",
        "'function'",
        "''",
        "'POST'",
        "'/1/indexes/'",
        "'/keys'",
        "'write'",
        "'index.addApiKey()'",
        "'client.addApiKey()'",
        "'index.addUserKeyWithValidity()'",
        "'client.addApiKey()'",
        "'index.updateUserKey()'",
        "'client.updateApiKey()'",
        "'Usage: index.updateApiKey(key, arrayOfAcls[, params, callback])'",
        "'function'",
        "''",
        "'PUT'",
        "'/1/indexes/'",
        "'/keys/'",
        "'write'",
        "'index.updateApiKey()'",
        "'client.updateApiKey()'",
        "\"19\"",
        "\"20\"",
        "\"26\"",
        "\"28\"",
        "\"29\"",
        "\"30\"",
        "\"31\"",
        "\"32\"",
        "\"33\"",
        "\"7\"",
        "\"8\"",
        "'use strict'",
        "'end'",
        "'error'",
        "'result'",
        "'stop'",
        "'end'",
        "'error'",
        "'result'",
        "\"4\"",
        "\"7\"",
        "'query'",
        "'similarQuery'",
        "'index.similarSearch(query[, callback])'",
        "'index.search({ similarQuery: query }[, callback])'",
        "'function'",
        "'number'",
        "'number'",
        "'function'",
        "'object'",
        "'function'",
        "'string'",
        "'function'",
        "''",
        "'POST'",
        "'/1/indexes/'",
        "'/browse'",
        "'read'",
        "'POST'",
        "'/1/indexes/'",
        "'/browse'",
        "'read'",
        "'Usage: index.searchForFacetValues({facetName, facetQuery, ...params}[, callback])'",
        "'facetName'",
        "''",
        "'POST'",
        "'/1/indexes/'",
        "'/facets/'",
        "'/query'",
        "'read'",
        "'index.searchFacet(params[, callback])'",
        "'index.searchForFacetValues(params[, callback])'",
        "'POST'",
        "'/1/indexes/'",
        "'/query'",
        "'read'",
        "'GET'",
        "'/1/indexes/'",
        "'function'",
        "''",
        "'?attributes='",
        "','",
        "'GET'",
        "'/1/indexes/'",
        "'/'",
        "'read'",
        "'Usage: index.getObjects(arrayOfObjectIDs[, callback])'",
        "'function'",
        "','",
        "'POST'",
        "'/1/indexes/*/objects'",
        "'read'",
        "\"25\"",
        "\"26\"",
        "\"28\"",
        "\"29\"",
        "\"32\"",
        "\"33\"",
        "\"34\"",
        "\"8\"",
        "'use strict'",
        "'Browser'",
        "\"16\"",
        "\"22\"",
        "'use strict'",
        "''",
        "'debug'",
        "'algoliasearch*'",
        "'Algolia for JavaScript ('",
        "'); '",
        "'XMLHttpRequest'",
        "'XDomainRequest'",
        "'withCredentials'",
        "'CORS not supported'",
        "'onreadystatechange'",
        "'x-algolia-application-id'",
        "'x-algolia-application-id'",
        "'x-algolia-api-key'",
        "'x-algolia-api-key'",
        "'POST'",
        "'content-type'",
        "'application/x-www-form-urlencoded'",
        "'content-type'",
        "'application/json'",
        "'accept'",
        "'application/json'",
        "\"1\"",
        "\"12\"",
        "\"23\"",
        "\"24\"",
        "\"26\"",
        "\"3\"",
        "\"30\"",
        "\"35\"",
        "\"37\"",
        "\"6\"",
        "\"7\"",
        "'use strict'",
        "'&'",
        "'?'",
        "\"14\"",
        "'use strict'",
        "'GET'",
        "'Method '",
        "' '",
        "' is not supported by JSONP.'",
        "'JSONP: start'",
        "'head'",
        "'script'",
        "'algoliaJSONP_'",
        "'JSONP: Late answer, ignoring'",
        "'&callback='",
        "'&'",
        "'JSONP: success'",
        "'JSONP: Fail. Script loaded but did not call the callback'",
        "'loaded'",
        "'complete'",
        "'_loaded'",
        "'_loaded'",
        "'JSONP: Script timeout'",
        "'JSONP: Script error'",
        "\"30\"",
        "'function'",
        "'object'",
        "'object'",
        "'index.search usage is index.search(query, params, cb)'",
        "'function'",
        "''",
        "'function'",
        "'object'",
        "''",
        "''",
        "'='",
        "\"30\"",
        "'analytics.algolia.com'",
        "'analytics.algolia.com'",
        "'analytics.algolia.com'",
        "'analytics.algolia.com'",
        "'https:'",
        "'GET'",
        "'/2/abtests?offset='",
        "'&limit='",
        "'read'",
        "'GET'",
        "'/2/abtests/'",
        "'read'",
        "'POST'",
        "'/2/abtests'",
        "'read'",
        "'POST'",
        "'/2/abtests/'",
        "'/stop'",
        "'read'",
        "'DELETE'",
        "'/2/abtests/'",
        "'write'",
        "\"21\"",
        "''",
        "'algoliasearch: `'",
        "'` was replaced by `'",
        "'`. Please see https://github.com/algolia/algoliasearch-client-javascript/wiki/Deprecated#'",
        "'use strict'",
        "'function'",
        "'Cannot get a stacktrace, browser is too old'",
        "'AlgoliaSearchError'",
        "'Unknown error'",
        "'string'",
        "'AlgoliaSearch'",
        "'Error'",
        "'UnparsableJSON'",
        "'Could not parse the incoming response as JSON, see err.more for details'",
        "'RequestTimeout'",
        "'Request timed out before getting a response'",
        "'Network'",
        "'Network issue, see err.more for details'",
        "'JSONPScriptFail'",
        "'<script> was loaded but did not call our provided callback'",
        "'ValidUntilNotFound'",
        "'The SecuredAPIKey does not have a validUntil parameter.'",
        "'JSONPScriptError'",
        "'<script> unable to load due to an `error` event on it'",
        "'ObjectNotFound'",
        "'Object not found'",
        "'Unknown'",
        "'Unknown error occured'",
        "\"5\"",
        "\"7\"",
        "\"5\"",
        "'object'",
        "'object'",
        "\"5\"",
        "\"10\"",
        "\"5\"",
        "'places-dsn.algolia.net'",
        "'places-1.algolianet.com'",
        "'places-2.algolianet.com'",
        "'places-3.algolianet.com'",
        "'object'",
        "''",
        "''",
        "'places'",
        "'query'",
        "'/1/places/query'",
        "'GET'",
        "'/1/places/reverse?'",
        "'read'",
        "'GET'",
        "'/1/places/'",
        "'read'",
        "\"15\"",
        "\"25\"",
        "\"26\"",
        "'algoliasearch:src/hostIndexState.js'",
        "'algoliasearch-client-js'",
        "'localStorage failed with'",
        "'localStorage'",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"1\"",
        "'use strict'",
        "'3.35.1'"
    ],
    "variables": [
        "g",
        "define",
        "exports",
        "a",
        "f",
        "l",
        "n",
        "i",
        "o",
        "head",
        "script",
        "onend",
        "toFind",
        "scripts",
        "found",
        "currentScript",
        "nbScripts",
        "loadScript",
        "v2ScriptUrl",
        "message",
        "message",
        "message",
        "isUsingLatest",
        "loadV2",
        "oldGlobals",
        "g",
        "define",
        "exports",
        "a",
        "f",
        "l",
        "n",
        "i",
        "o",
        "useColors",
        "c",
        "index",
        "lastC",
        "r",
        "prevTime",
        "hash",
        "i",
        "debug",
        "curr",
        "ms",
        "args",
        "i",
        "index",
        "formatter",
        "val",
        "logFn",
        "split",
        "len",
        "i",
        "i",
        "len",
        "_isArray",
        "isArray",
        "_isArray",
        "len",
        "vertxNext",
        "customSchedulerFn",
        "asap",
        "browserWindow",
        "browserGlobal",
        "BrowserMutationObserver",
        "isNode",
        "isWorker",
        "iterations",
        "observer",
        "node",
        "channel",
        "globalSetTimeout",
        "setTimeout",
        "queue",
        "i",
        "callback",
        "arg",
        "r",
        "require",
        "vertx",
        "scheduleFlush",
        "_arguments",
        "arguments",
        "parent",
        "child",
        "_state",
        "callback",
        "Constructor",
        "promise",
        "PROMISE_ID",
        "PENDING",
        "FULFILLED",
        "REJECTED",
        "GET_THEN_ERROR",
        "error",
        "_subscribers",
        "length",
        "subscribers",
        "settled",
        "child",
        "callback",
        "detail",
        "i",
        "TRY_CATCH_ERROR",
        "hasCallback",
        "value",
        "error",
        "succeeded",
        "failed",
        "id",
        "i",
        "c",
        "resolve$$1",
        "_then",
        "promise",
        "promise",
        "enumerator",
        "Constructor",
        "length",
        "i",
        "Constructor",
        "promise",
        "local",
        "P",
        "promiseToString",
        "er",
        "handler",
        "len",
        "args",
        "i",
        "listeners",
        "err",
        "m",
        "fired",
        "position",
        "length",
        "i",
        "key",
        "listeners",
        "ret",
        "evlistener",
        "hasOwn",
        "toString",
        "l",
        "i",
        "win",
        "TempCtor",
        "toString",
        "s",
        "m",
        "h",
        "d",
        "y",
        "match",
        "n",
        "has",
        "toStr",
        "isArgs",
        "isEnumerable",
        "hasDontEnumBug",
        "hasProtoEnumBug",
        "dontEnums",
        "equalsConstructorPrototype",
        "ctor",
        "excludedKeys",
        "hasAutomationEqualityBug",
        "equalsConstructorPrototypeIfNotBuggy",
        "keysShim",
        "isObject",
        "isFunction",
        "isArguments",
        "isString",
        "theKeys",
        "skipProto",
        "i",
        "j",
        "skipConstructor",
        "k",
        "keysWorksWithArguments",
        "originalKeys",
        "toStr",
        "isArgs",
        "process",
        "cachedSetTimeout",
        "cachedClearTimeout",
        "queue",
        "draining",
        "currentQueue",
        "queueIndex",
        "timeout",
        "len",
        "args",
        "i",
        "obj",
        "regexp",
        "maxKeys",
        "len",
        "i",
        "x",
        "idx",
        "kstr",
        "vstr",
        "k",
        "v",
        "isArray",
        "stringifyPrimitive",
        "ks",
        "isArray",
        "res",
        "i",
        "objectKeys",
        "res",
        "Index",
        "deprecate",
        "deprecatedMessage",
        "AlgoliaSearchCore",
        "inherits",
        "errors",
        "postObj",
        "postObj",
        "callback",
        "_callback",
        "clone",
        "createAnalyticsClient",
        "isArray",
        "usage",
        "postObj",
        "isArray",
        "usage",
        "putObj",
        "isArray",
        "usage",
        "message",
        "errors",
        "exitPromise",
        "IndexCore",
        "store",
        "MAX_API_KEY_LENGTH",
        "RESET_APP_DATA_TIMER",
        "debug",
        "clone",
        "isArray",
        "usage",
        "protocol",
        "defaultHosts",
        "mainSuffix",
        "algoliaAgentWithDelimiter",
        "requestDebug",
        "body",
        "cacheID",
        "additionalUA",
        "cache",
        "client",
        "tries",
        "usingFallback",
        "hasFallback",
        "headers",
        "debugData",
        "startTime",
        "responseText",
        "currentHost",
        "url",
        "options",
        "status",
        "httpResponseOk",
        "endTime",
        "shouldRetry",
        "unrecoverableError",
        "endTime",
        "maybePromiseForCache",
        "promiseForCache",
        "request",
        "forEach",
        "ua",
        "requestHeaders",
        "isArray",
        "usage",
        "client",
        "postObj",
        "JSONPParams",
        "url",
        "isArray",
        "usage",
        "client",
        "clone",
        "omit",
        "indexName",
        "facetName",
        "filteredParams",
        "searchParameters",
        "strTags",
        "i",
        "oredTags",
        "j",
        "data",
        "data",
        "now",
        "newData",
        "currentData",
        "clone",
        "newHostIndexes",
        "timeoutMultiplier",
        "toJSON",
        "currentIndex",
        "temporaryValue",
        "randomIndex",
        "newHeaders",
        "value",
        "inherits",
        "IndexCore",
        "deprecate",
        "deprecatedMessage",
        "exitPromise",
        "errors",
        "deprecateForwardToSlaves",
        "indexObj",
        "isArray",
        "usage",
        "indexObj",
        "postObj",
        "i",
        "request",
        "indexObj",
        "url",
        "isArray",
        "usage",
        "indexObj",
        "postObj",
        "i",
        "request",
        "indexObj",
        "isArray",
        "usage",
        "indexObj",
        "postObj",
        "i",
        "request",
        "err",
        "indexObj",
        "isArray",
        "usage",
        "indexObj",
        "postObj",
        "clone",
        "indexObj",
        "client",
        "promise",
        "objectIDs",
        "indexObj",
        "merge",
        "IndexBrowser",
        "browser",
        "client",
        "index",
        "body",
        "cb",
        "baseDelay",
        "maxDelay",
        "loop",
        "indexObj",
        "client",
        "promise",
        "delay",
        "indexObj",
        "indexName",
        "options",
        "previous",
        "hits",
        "nbHits",
        "current",
        "synonyms",
        "forwardToReplicas",
        "forwardToReplicas",
        "forwardToReplicas",
        "forwardToReplicas",
        "forwardToReplicas",
        "forwardToReplicas",
        "forwardToReplicas",
        "forwardToReplicas",
        "result",
        "paginate",
        "query",
        "that",
        "page",
        "paginateLoop",
        "hits",
        "position",
        "hit",
        "promise",
        "hits",
        "position",
        "forwardToReplicas",
        "indexObj",
        "indexObj",
        "indexObj",
        "indexObj",
        "isArray",
        "usage",
        "postObj",
        "isArray",
        "usage",
        "putObj",
        "inherits",
        "EventEmitter",
        "buildSearchMethod",
        "deprecate",
        "deprecatedMessage",
        "merge",
        "indexObj",
        "page",
        "hitsPerPage",
        "clone",
        "omit",
        "usage",
        "facetName",
        "filteredParams",
        "searchParameters",
        "indexObj",
        "i",
        "isArray",
        "usage",
        "indexObj",
        "body",
        "request",
        "AlgoliaSearch",
        "createAlgoliasearch",
        "inherits",
        "errors",
        "inlineHeaders",
        "jsonpRequest",
        "places",
        "cloneDeep",
        "support",
        "body",
        "req",
        "reqTimeout",
        "timedOut",
        "connected",
        "encode",
        "errors",
        "JSONPCounter",
        "cbCalled",
        "timedOut",
        "head",
        "script",
        "cbName",
        "done",
        "ontimeout",
        "errors",
        "additionalUA",
        "algoliasearch",
        "analytics",
        "offset",
        "limit",
        "warned",
        "githubAnchorLink",
        "inherits",
        "forEach",
        "error",
        "args",
        "newArr",
        "sources",
        "keys",
        "filtered",
        "qs3",
        "buildSearchMethod",
        "cloneDeep",
        "client",
        "index",
        "encoded",
        "debug",
        "localStorageNamespace",
        "store",
        "moduleStore",
        "localStorageStore"
    ],
    "comments": [
        "! algoliasearch 3.35.1 | © 2014, 2015 Algolia SAS | github.com/algolia/algoliasearch-client-js",
        "some good legacy browsers (firefox) fail the 'in' detection above",
        "so as a fallback we always set onload",
        "old IE will ignore this and new IE will set onload",
        "this.onload = null here is necessary",
        "because even IE9 works not like others",
        "there is no way to catch loading errors in IE8",
        "this module helps finding if the current page is using",
        "the cdn.jsdelivr.net/algoliasearch/latest/$BUILDNAME.min.js version",
        "algoliasearch, algoliasearch.angular",
        "[.min].js",
        "If current script loaded asynchronously,",
        "it will load the script with DOMElement",
        "otherwise, it will load the script with document.write",
        "why \\x3c? http://stackoverflow.com/a/236106/147079",
        "eslint no-unused-vars: [2, {\"vars\": \"local\"}]",
        "put old window.AlgoliaSearch.. into window. again so that",
        "users upgrading to V3 without changing their code, will be warned",
        "This script will be browserified and prepended to the normal build",
        "directly in window, not wrapped in any module definition",
        "To avoid cases where we are loaded with /latest/ along with",
        "Now onto the V2 related code:",
        "If the client is using /latest/$BUILDNAME.min.js, load V2 of the library",
        "",
        "Otherwise, setup a migration layer that will throw on old constructors like",
        "new AlgoliaSearch().",
        "So that users upgrading from v2 to v3 will have a clear information",
        "message on what to do if they did not read the migration guide",
        "NB: In an Electron preload script, document will be defined but not fully",
        "initialized. Since we know we're in Chrome, we'll just detect this case",
        "explicitly",
        "is webkit? http://stackoverflow.com/a/16459606/376773",
        "document is undefined in react-native: https://github.com/facebook/react-native/pull/1632",
        "is firebug? http://stackoverflow.com/a/398120/376773",
        "is firefox >= v31?",
        "https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages",
        "double check webkit in userAgent just in case we are in a worker",
        "the final \"%c\" is somewhat tricky, because there could be other",
        "arguments passed either before or after the %c, so we need to",
        "figure out the correct index to insert the CSS into",
        "we only are interested in the *last* %c",
        "(the user may have provided their own)",
        "this hackery is required for IE8/9, where",
        "the `console.log` function doesn't have 'apply'",
        "If debug isn't set in LS, and we're in Electron, try to load $DEBUG",
        "Convert to 32bit integer",
        "disabled?",
        "set `diff` timestamp",
        "turn the `arguments` into a proper Array",
        "anything else let's inspect with %O",
        "apply any `formatters` transformations",
        "if we encounter an escaped % then don't increase the array index",
        "now we need to remove `args[index]` since it's inlined in the `format`",
        "apply env-specific formatting (colors, etc.)",
        "env-specific initialization logic for debug instances",
        "ignore empty strings",
        "!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   4.1.1",
        "If len is 2, that means that we need to schedule an async flush.",
        "If additional callbacks are queued before the queue is flushed, they",
        "will be processed by this flush that we are scheduling.",
        "test for web worker but not in IE10",
        "node",
        "node version 0.10.x displays a deprecation warning when nextTick is used recursively",
        "see https://github.com/cujojs/when/issues/410 for details",
        "vertx",
        "web worker",
        "Store setTimeout reference so es6-promise will be unaffected by",
        "other code modifying setTimeout (like sinon.useFakeTimers())",
        "Decide what async method to use to triggering processing of queued callbacks:",
        "`Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`",
        "jshint validthis:true",
        "noop",
        "`Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static",
        "`Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.",
        "jshint validthis:true",
        "`Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.",
        "jshint validthis:true",
        "Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {function} resolver\n  Useful for tooling.\n  @constructor",
        "The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we're unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfilled\n    @param {Function} onRejected\n    Useful for tooling.\n    @return {Promise}",
        "`catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn't find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    Useful for tooling.\n    @return {Promise}",
        "global self",
        "silently ignored",
        "Strange compat..",
        "Copyright Joyent, Inc. and other Node contributors.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a",
        "copy of this software and associated documentation files (the",
        "\"Software\"), to deal in the Software without restriction, including",
        "without limitation the rights to use, copy, modify, merge, publish,",
        "distribute, sublicense, and/or sell copies of the Software, and to permit",
        "persons to whom the Software is furnished to do so, subject to the",
        "following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included",
        "in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
        "OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN",
        "NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,",
        "DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR",
        "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE",
        "USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "Backwards-compat with node 0.10.x",
        "By default EventEmitters will print a warning if more than 10 listeners are",
        "added to it. This is a useful default which helps finding memory leaks.",
        "Obviously not all Emitters should be limited to 10. This function allows",
        "that to be increased. Set to zero for unlimited.",
        "If there is no 'error' event listener then throw.",
        "Unhandled 'error' event",
        "At least give some kind of context to the user",
        "fast cases",
        "slower",
        "To avoid recursion in the case that type === \"newListener\"! Before",
        "adding it to the listeners, first emit \"newListener\".",
        "Optimize the case of one listener. Don't need the extra array object.",
        "If we've already got an array, just append.",
        "Adding the second element, need to change to array.",
        "Check for listener leak",
        "not supported in IE 10",
        "emits a 'removeListener' event iff the listener was removed",
        "not listening for removeListener, no need to emit",
        "emit removeListener for all listeners on all events",
        "LIFO order",
        "implementation from standard node.js 'util' module",
        "old school shim for old browsers",
        "modified from https://github.com/es-shims/es5-shim",
        "global window",
        "global window",
        "Safari 5.0 bug",
        "shim for using process in browser",
        "cached from whatever global is present so that test runners that stub it",
        "don't break things.  But we need to wrap it in a try catch in case it is",
        "wrapped in strict mode code which doesn't define any globals.  It's inside a",
        "function because try/catches deoptimize in certain engines.",
        "normal enviroments in sane situations",
        "if setTimeout wasn't available but was latter defined",
        "when when somebody has screwed with setTimeout but no I.E. maddness",
        "When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally",
        "same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error",
        "normal enviroments in sane situations",
        "if clearTimeout wasn't available but was latter defined",
        "when when somebody has screwed with setTimeout but no I.E. maddness",
        "When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally",
        "same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.",
        "Some versions of I.E. have different rules for clearTimeout vs setTimeout",
        "v8 likes predictible objects",
        "empty string to avoid regexp issues",
        "Copyright Joyent, Inc. and other Node contributors.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a",
        "copy of this software and associated documentation files (the",
        "\"Software\"), to deal in the Software without restriction, including",
        "without limitation the rights to use, copy, modify, merge, publish,",
        "distribute, sublicense, and/or sell copies of the Software, and to permit",
        "persons to whom the Software is furnished to do so, subject to the",
        "following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included",
        "in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
        "OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN",
        "NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,",
        "DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR",
        "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE",
        "USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "If obj.hasOwnProperty has been overridden, then calling",
        "obj.hasOwnProperty(prop) will break.",
        "See: https://github.com/joyent/node/issues/1707",
        "maxKeys <= 0 means that we should not limit keys count",
        "Copyright Joyent, Inc. and other Node contributors.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a",
        "copy of this software and associated documentation files (the",
        "\"Software\"), to deal in the Software without restriction, including",
        "without limitation the rights to use, copy, modify, merge, publish,",
        "distribute, sublicense, and/or sell copies of the Software, and to permit",
        "persons to whom the Software is furnished to do so, subject to the",
        "following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included",
        "in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
        "OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN",
        "NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,",
        "DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR",
        "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE",
        "USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "oops, old behaviour of third argument being a function",
        "getLogs(params)",
        "getLogs([cb])",
        "getLogs(1, [cb)]",
        "getLogs(1, 2, [cb])",
        "the actual require must be inside the function, when put outside then you have a cyclic dependency",
        "not well resolved that ends up making the main \"./index.js\" (main module, the agloliasearch function)",
        "export an object instead of a function",
        "Other workarounds:",
        "- rewrite the lib in ES6, cyclic dependencies may be better supported",
        "- move initAnalytics to a property on the main module (algoliasearch.initAnalytics),",
        "same as places.",
        "The current API was made mostly to mimic the one made in PHP",
        "@deprecated see client.addApiKey",
        "environment specific methods",
        "We will always put the API KEY in the JSON body in case of too long API KEY,",
        "to avoid query string being too long and failing in various conditions (our server limit, browser limit,",
        "proxies limit)",
        "after 2 minutes reset to first host",
        "500ms connect is GPRS latency",
        "backward compat, if opts.timeout is passed, we use it to configure all timeouts like before",
        "while we advocate for colon-at-the-end values: 'http:' for `opts.protocol`",
        "we also accept `http` and `https`. It's a common error.",
        "no hosts given, compute defaults",
        "when passing custom hosts, we need to have a different host index if the number",
        "of write/read hosts are different.",
        "add protocol and lowercase hosts",
        "In some situations you might want to warm the cache",
        "index.search()",
        "client.search()",
        "as we sometime use POST requests to pass parameters (like query='aa'),",
        "the cacheID must also include the body to be different between calls",
        "handle cache existence",
        "Cache response must match the type of the original one",
        "if we reached max tries",
        "then stop",
        "let's try the fallback starting from here",
        "method, url and body are fallback dependent",
        "re-compute headers, they could be omitting the API KEY",
        "the current request is now using fallback",
        "`requester` is any of this._request or this._request.fallback",
        "thus it needs to be called using the client as context",
        "compute the status of the response,",
        "",
        "When in browser mode, using XDR or JSONP, we have no statusCode available",
        "So we rely on our API response `status` property.",
        "But `waitTask` can set a `status` property which is not the statusCode (it's the task status)",
        "So we check if there's a `message` along `status` and it means it's an error",
        "",
        "That's the only case where we have a response.status that's not the http statusCode",
        "this is important to check the request statusCode AFTER the body eventual",
        "statusCode because some implementations (jQuery XDomainRequest transport) may",
        "send statusCode 200 while we had an error",
        "When in browser mode, using XDR or JSONP",
        "we default to success when no error (no response.status && response.message)",
        "If there was a JSON.parse() error then body is null and it fails",
        "no success and no retry => fail",
        "error cases:",
        "While not in fallback mode:",
        "- CORS not supported",
        "- network error",
        "While in fallback mode:",
        "- timeout",
        "- network error",
        "- badly formatted JSONP (script loaded, did not call our callback)",
        "In both cases:",
        "- uncaught exception occurs (TypeError)",
        "stop the request implementation when:",
        "we did not generate this error,",
        "it comes from a throw in some other piece of code",
        "server sent unparsable JSON",
        "max tries and already using fallback or no fallback",
        "stop request implementation for this command",
        "When a timeout occurred, retry by raising timeout",
        "Release the cache on error",
        "either we have a callback",
        "either we are using promises",
        "as we sometime use POST requests to pass parameters (like query='aa'),",
        "the cacheID must also include the body to be different between calls",
        "In case the cache is warmup with value that is not a promise",
        "In case of the cache request, return the original value",
        "In case of the first request, return the JSON value",
        "browser will inline headers in the url, node.js will use http headers",
        "but in some situations, the API KEY will be too long (big secured API keys)",
        "so if the request is a POST and the KEY is very long, we will be asked to not put",
        "it into headers but in the JSON body",
        "allow query.query",
        "so we are mimicing the index.search(query, params) method",
        "{indexName:, query:, params:}",
        "eslint-disable-line max-len",
        "Prototype.js < 1.7, a widely used library, defines a weird",
        "Array.prototype.toJSON function that will fail to stringify our content",
        "appropriately",
        "refs:",
        "- https://groups.google.com/forum/#!topic/prototype-core/E-SAVvV_V9Q",
        "- https://github.com/sstephenson/prototype/commit/038a2985a70593c1a86c230fadbdfe2e4898a48c",
        "- http://stackoverflow.com/a/3148441/147079",
        "eslint no-extend-native:0",
        "While there remain elements to shuffle...",
        "Pick a remaining element...",
        "And swap it with the current element.",
        "update or create",
        "create (API generates an objectID)",
        "create",
        "update or create",
        "when deleting, we should never use cache to get the",
        "search results",
        "there's a problem in how we use the promise chain,",
        "see how waitTask is done",
        "stop here",
        "return indexObj.as._request.resolve();",
        "continue and do a recursive call",
        "start browsing",
        "no cursor means we are finished browsing",
        "typeahead 0.11",
        "pre typeahead 0.11",
        "wait minimum 100ms before retrying",
        "wait maximum 5s before retrying",
        "waitTask() must be handled differently from other methods,",
        "it's a recursive method using a timeout",
        "paginate if option was set and has next page",
        "This is the object returned by the `index.browseAll()` method",
        "make sure every index instance has it's own cache",
        "we check variadic calls that are not the one defined",
        ".browse()/.browse(fn)",
        "=> page = 0",
        ".browse(2)/.browse(2, 10)/.browse(2, fn)/.browse(2, 10, fn)",
        ".browse(queryParameters)/.browse(queryParameters, cb)",
        ".browse(query, cb)",
        "otherwise it's a .browse(query)/.browse(query, queryParameters)/.browse(query, queryParameters, cb)",
        "get search query parameters combining various possible calls",
        "to .browse();",
        "This is the standalone browser build entry point",
        "Browser implementation of the Algolia Search JavaScript client,",
        "using XMLHttpRequest, XDomainRequest and JSONP as fallback",
        "we expose into window no matter how we are used, this will allow",
        "us to easily debug any website running algolia",
        "call AlgoliaSearch constructor",
        "no cors or XDomainRequest, no request",
        "very old browser, not supported",
        "we set an empty onprogress listener",
        "so that XDomainRequest on IE9 is not aborted",
        "refs:",
        "- https://github.com/algolia/algoliasearch-client-js/issues/76",
        "- https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment",
        "do not rely on default XHR async flag, as some analytics code like hotjar",
        "breaks it and set it to false by default",
        "The Analytics API never accepts Auth headers as query string",
        "this option exists specifically for them.",
        "headers are meant to be sent after open",
        "https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Simple_requests",
        "event object not received in IE8, at least",
        "but we do not use it, still important to note",
        "event",
        "When browser does not supports req.timeout, we can",
        "have both a load and timeout event, since handled by a dumb setTimeout",
        "XDomainRequest does not have any response headers",
        "error event is trigerred both with XDR/XHR on:",
        "- DNS error",
        "- unallowed cross domain request",
        ", reject",
        ",\n      // We do not send the statusCode, there's no statusCode in JSONP, it will be\n      // computed using data.status && data.message like with XDR\n      statusCode",
        "add callback by hand",
        "add body params manually",
        "script onreadystatechange needed only for",
        "<= IE8",
        "https://github.com/angular/angular.js/issues/4523",
        "script loaded but did not call the fn => script loading error",
        "warn V2 users on how to search",
        ".search(query, params, cb)",
        ".search(cb, params)",
        "Normalizing the function signature",
        "Usage : .search(), .search(cb)",
        "Usage : .search(query/args), .search(query, cb)",
        "At this point we have 3 arguments with values",
        "Usage : .search(args) // careful: typeof null === 'object'",
        ".search(undefined/null)",
        "`_getSearchParams` will augment params, do not be fooled by the = versus += from previous if",
        "there need to be 4 hosts, like on the client, since if requests fail,",
        "the counter goes up by 1, so we need to have the same amount of hosts",
        "4 because: -dsn, -1, -2, -3",
        "This is done because the APPID used for search will be the same for the analytics client created,",
        "and since the state of available hosts is shared by APPID globally for the module, we had issues",
        "where the hostIndex would be 1 while the array was only one entry (you got an empty host)",
        "eslint no-console:0",
        "This file hosts our error definitions",
        "We use custom error \"types\" so that we can act on them when we need it",
        "e.g.: if error instanceof errors.UnparsableJSON then..",
        "try to get a stacktrace",
        "custom message not set, use default",
        "late exports to let various fn defs and inherits take place",
        "Parse cloud does not supports setTimeout",
        "We do not store a setTimeout reference in the client everytime",
        "We only fallback to a fake setTimeout when not available",
        "setTimeout cannot be override globally sadly",
        ", sources",
        "allow initPlaces() no arguments => community rate limited",
        "always replicate localStorageStore to moduleStore in case of failure",
        "actual creation of the namespace",
        "In case of any error on localStorage, we clean our own namespace, this should handle",
        "quota errors when a lot of keys + data are used",
        "nothing to do"
    ],
    "docstrings": [
        "* This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.",
        "* Colors.",
        "* Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors",
        "* Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.",
        "* Colorize log arguments if enabled.\n *\n * @api public",
        "* Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public",
        "* Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private",
        "* Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private",
        "* Enable namespaces listed in `localStorage.debug` initially.",
        "* Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private",
        "* This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.",
        "* The currently active debug mode names, and names to skip.",
        "* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".",
        "* Previous log timestamp.",
        "* Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private",
        "* Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public",
        "* Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public",
        "* Disable debug output.\n *\n * @api public",
        "* Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public",
        "* Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private",
        "* Helpers.",
        "* Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public",
        "* Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private",
        "* Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private",
        "* Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private",
        "* Pluralization helper.",
        "* Delete an index\n *\n * @param indexName the name of index to delete\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer that contains the task ID",
        "* Move an existing index.\n * @param srcIndexName the name of index to copy.\n * @param dstIndexName the new index name that will contains a copy of\n * srcIndexName (destination will be overriten if it already exist).\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer that contains the task ID",
        "* Copy an existing index.\n * @param srcIndexName the name of index to copy.\n * @param dstIndexName the new index name that will contains a copy\n * of srcIndexName (destination will be overriten if it already exist).\n * @param scope an array of scopes to copy: ['settings', 'synonyms', 'rules']\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer that contains the task ID",
        "* Return last log entries.\n * @param offset Specify the first entry to retrieve (0-based, 0 is the most recent log entry).\n * @param length Specify the maximum number of entries to retrieve starting\n * at offset. Maximum allowed value: 1000.\n * @param type Specify the maximum number of entries to retrieve starting\n * at offset. Maximum allowed value: 1000.\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer that contains the task ID",
        "* List all existing indexes (paginated)\n *\n * @param page The page to retrieve, starting at 0.\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer with index list",
        "* Get the index object initialized\n *\n * @param indexName the name of index\n * @param callback the result callback with one argument (the Index instance)",
        "* @deprecated use client.listApiKeys",
        "* List all existing api keys with their associated ACLs\n *\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer with api keys list",
        "* @deprecated see client.getApiKey",
        "* Get an API key\n *\n * @param key\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer with the right API key",
        "* @deprecated see client.deleteApiKey",
        "* Delete an existing API key\n * @param key\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer with the date of deletion",
        "* Restore a deleted API key\n *\n * @param {String} key - The key to restore\n * @param {Function} callback - The result callback called with two arguments\n *   error: null or Error('message')\n *   content: the server answer with the restored API key\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.restoreApiKey('APIKEY')\n * @see {@link https://www.algolia.com/doc/rest-api/search/#restore-api-key|Algolia REST API Documentation}",
        "* Add a new global API key\n *\n * @param {string[]} acls - The list of ACL for this key. Defined by an array of strings that\n *   can contains the following values:\n *     - search: allow to search (https and http)\n *     - addObject: allows to add/update an object in the index (https only)\n *     - deleteObject : allows to delete an existing object (https only)\n *     - deleteIndex : allows to delete index content (https only)\n *     - settings : allows to get index settings (https only)\n *     - editSettings : allows to change index settings (https only)\n * @param {Object} [params] - Optionnal parameters to set for the key\n * @param {number} params.validity - Number of seconds after which the key will be automatically removed (0 means no time limit for this key)\n * @param {number} params.maxQueriesPerIPPerHour - Number of API calls allowed from an IP address per hour\n * @param {number} params.maxHitsPerQuery - Number of hits this API key can retrieve in one call\n * @param {string[]} params.indexes - Allowed targeted indexes for this key\n * @param {string} params.description - A description for your key\n * @param {string[]} params.referers - A list of authorized referers\n * @param {Object} params.queryParameters - Force the key to use specific query parameters\n * @param {Function} callback - The result callback called with two arguments\n *   error: null or Error('message')\n *   content: the server answer with the added API key\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.addApiKey(['search'], {\n *   validity: 300,\n *   maxQueriesPerIPPerHour: 2000,\n *   maxHitsPerQuery: 3,\n *   indexes: ['fruits'],\n *   description: 'Eat three fruits',\n *   referers: ['*.algolia.com'],\n *   queryParameters: {\n *     tagFilters: ['public'],\n *   }\n * })\n * @see {@link https://www.algolia.com/doc/rest_api#AddKey|Algolia REST API Documentation}",
        "* @deprecated Please use client.addApiKey()",
        "* @deprecated Please use client.updateApiKey()",
        "* Update an existing API key\n * @param {string} key - The key to update\n * @param {string[]} acls - The list of ACL for this key. Defined by an array of strings that\n *   can contains the following values:\n *     - search: allow to search (https and http)\n *     - addObject: allows to add/update an object in the index (https only)\n *     - deleteObject : allows to delete an existing object (https only)\n *     - deleteIndex : allows to delete index content (https only)\n *     - settings : allows to get index settings (https only)\n *     - editSettings : allows to change index settings (https only)\n * @param {Object} [params] - Optionnal parameters to set for the key\n * @param {number} params.validity - Number of seconds after which the key will be automatically removed (0 means no time limit for this key)\n * @param {number} params.maxQueriesPerIPPerHour - Number of API calls allowed from an IP address per hour\n * @param {number} params.maxHitsPerQuery - Number of hits this API key can retrieve in one call\n * @param {string[]} params.indexes - Allowed targeted indexes for this key\n * @param {string} params.description - A description for your key\n * @param {string[]} params.referers - A list of authorized referers\n * @param {Object} params.queryParameters - Force the key to use specific query parameters\n * @param {Function} callback - The result callback called with two arguments\n *   error: null or Error('message')\n *   content: the server answer with the modified API key\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.updateApiKey('APIKEY', ['search'], {\n *   validity: 300,\n *   maxQueriesPerIPPerHour: 2000,\n *   maxHitsPerQuery: 3,\n *   indexes: ['fruits'],\n *   description: 'Eat three fruits',\n *   referers: ['*.algolia.com'],\n *   queryParameters: {\n *     tagFilters: ['public'],\n *   }\n * })\n * @see {@link https://www.algolia.com/doc/rest_api#UpdateIndexKey|Algolia REST API Documentation}",
        "* Initialize a new batch of search queries\n * @deprecated use client.search()",
        "* Add a search query in the batch\n * @deprecated use client.search()",
        "* Launch the batch of queries using XMLHttpRequest.\n * @deprecated use client.search()",
        "* Perform write operations across multiple indexes.\n *\n * To reduce the amount of time spent on network round trips,\n * you can create, update, or delete several objects in one call,\n * using the batch endpoint (all operations are done in the given order).\n *\n * Available actions:\n *   - addObject\n *   - updateObject\n *   - partialUpdateObject\n *   - partialUpdateObjectNoCreate\n *   - deleteObject\n *\n * https://www.algolia.com/doc/rest_api#Indexes\n * @param  {Object[]} operations An array of operations to perform\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.batch([{\n *   action: 'addObject',\n *   indexName: 'clients',\n *   body: {\n *     name: 'Bill'\n *   }\n * }, {\n *   action: 'udpateObject',\n *   indexName: 'fruits',\n *   body: {\n *     objectID: '29138',\n *     name: 'banana'\n *   }\n * }], cb)",
        "* Assign or Move a userID to a cluster\n *\n * @param {string} data.userID The userID to assign to a new cluster\n * @param {string} data.cluster The cluster to assign the user to\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.assignUserID({ cluster: 'c1-test', userID: 'some-user' });",
        "* Assign a array of userIDs to a cluster.\n *\n * @param {Array} data.userIDs The array of userIDs to assign to a new cluster\n * @param {string} data.cluster The cluster to assign the user to\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.assignUserIDs({ cluster: 'c1-test', userIDs: ['some-user-1', 'some-user-2'] });",
        "* Get the top userIDs\n *\n * (the callback is the second argument)\n *\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.getTopUserID();",
        "* Get userID\n *\n * @param {string} data.userID The userID to get info about\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.getUserID({ userID: 'some-user' });",
        "* List all the clusters\n *\n * (the callback is the second argument)\n *\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.listClusters();",
        "* List the userIDs\n *\n * (the callback is the second argument)\n *\n * @param {string} data.hitsPerPage How many hits on every page\n * @param {string} data.page The page to retrieve\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.listClusters();\n * client.listClusters({ page: 3, hitsPerPage: 30});",
        "* Remove an userID\n *\n * @param {string} data.userID The userID to assign to a new cluster\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.removeUserID({ userID: 'some-user' });",
        "* Search for userIDs\n *\n * @param {string} data.cluster The cluster to target\n * @param {string} data.query The query to execute\n * @param {string} data.hitsPerPage How many hits on every page\n * @param {string} data.page The page to retrieve\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.searchUserIDs({ cluster: 'c1-test', query: 'some-user' });\n * client.searchUserIDs({\n *   cluster: \"c1-test\",\n *   query: \"some-user\",\n *   page: 3,\n *   hitsPerPage: 2\n * });",
        "* Set strategy for personalization\n *\n * @param {Object} data\n * @param {Object} data.eventsScoring Associate a score to an event\n * @param {Object} data.eventsScoring.<eventName> The name of the event\n * @param {Number} data.eventsScoring.<eventName>.score The score to associate to <eventName>\n * @param {String} data.eventsScoring.<eventName>.type Either \"click\", \"conversion\" or \"view\"\n * @param {Object} data.facetsScoring Associate a score to a facet\n * @param {Object} data.facetsScoring.<facetName> The name of the facet\n * @param {Number} data.facetsScoring.<facetName>.score The score to associate to <facetName>\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.setPersonalizationStrategy({\n *   eventsScoring: {\n *      \"Add to cart\": { score: 50, type: \"conversion\" },\n *      Purchase: { score: 100, type: \"conversion\" }\n *   },\n *   facetsScoring: {\n *      brand: { score: 100 },\n *      categories: { score: 10 }\n *   }\n * });",
        "* Get strategy for personalization\n *\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.getPersonalizationStrategy();",
        "* Algolia Search library initialization\n * https://www.algolia.com/\n *\n * @param {string} applicationID - Your applicationID, found in your dashboard\n * @param {string} apiKey - Your API key, found in your dashboard\n * @param {Object} [opts]\n * @param {number} [opts.timeout=2000] - The request timeout set in milliseconds,\n * another request will be issued after this timeout\n * @param {string} [opts.protocol='https:'] - The protocol used to query Algolia Search API.\n *                                        Set to 'http:' to force using http.\n * @param {Object|Array} [opts.hosts={\n *           read: [this.applicationID + '-dsn.algolia.net'].concat([\n *             this.applicationID + '-1.algolianet.com',\n *             this.applicationID + '-2.algolianet.com',\n *             this.applicationID + '-3.algolianet.com']\n *           ]),\n *           write: [this.applicationID + '.algolia.net'].concat([\n *             this.applicationID + '-1.algolianet.com',\n *             this.applicationID + '-2.algolianet.com',\n *             this.applicationID + '-3.algolianet.com']\n *           ]) - The hosts to use for Algolia Search API.\n *           If you provide them, you will less benefit from our HA implementation",
        "* Get the index object initialized\n *\n * @param indexName the name of index\n * @param callback the result callback with one argument (the Index instance)",
        "* Add an extra field to the HTTP request\n*\n* @param name the header field name\n* @param value the header field value",
        "* Get the value of an extra HTTP header\n*\n* @param name the header field name",
        "* Remove an extra field from the HTTP request\n*\n* @param name the header field name",
        "* Augment sent x-algolia-agent with more data, each agent part\n* is automatically separated from the others by a semicolon;\n*\n* @param algoliaAgent the agent to add",
        "* Wrapper that try all hosts to maximize the quality of service",
        "* Transform search param object in query string\n* @param {object} args arguments to add to the current query string\n* @param {string} params current query string\n* @return {string} the final query string",
        "* Compute the headers for a request\n *\n * @param [string] options.additionalUA semi-colon separated string with other user agents to add\n * @param [boolean=true] options.withApiKey Send the api key as a header\n * @param [Object] options.headers Extra headers to send",
        "* Search through multiple indices at the same time\n * @param  {Object[]}   queries  An array of queries you want to run.\n * @param {string} queries[].indexName The index name you want to target\n * @param {string} [queries[].query] The query to issue on this index. Can also be passed into `params`\n * @param {Object} queries[].params Any search param like hitsPerPage, ..\n * @param  {Function} callback Callback to be called\n * @return {Promise|undefined} Returns a promise if no callback given",
        "* Search for facet values\n* https://www.algolia.com/doc/rest-api/search#search-for-facet-values\n* This is the top-level API for SFFV.\n*\n* @param {object[]} queries An array of queries to run.\n* @param {string} queries[].indexName Index name, name of the index to search.\n* @param {object} queries[].params Query parameters.\n* @param {string} queries[].params.facetName Facet name, name of the attribute to search for values in.\n* Must be declared as a facet\n* @param {string} queries[].params.facetQuery Query for the facet search\n* @param {string} [queries[].params.*] Any search parameter of Algolia,\n* see https://www.algolia.com/doc/api-client/javascript/search#search-parameters\n* Pagination is not supported. The page and hitsPerPage parameters will be ignored.",
        "* Set the extra security tagFilters header\n * @param {string|array} tags The list of tags defining the current security filters",
        "* Set the extra user token header\n * @param {string} userToken The token identifying a uniq user (used to apply rate limits)",
        "* Clear all queries in client's cache\n * @return undefined",
        "* Set the number of milliseconds a request can take before automatically being terminated.\n* @deprecated\n* @param {Number} milliseconds",
        "* Set the three different (connect, read, write) timeouts to be used when requesting\n* @param {Object} timeouts",
        "* Get the three different (connect, read, write) timeouts to be used when requesting\n* @param {Object} timeouts",
        "* Add an object in this index\n*\n* @param content contains the javascript object to add inside the index\n* @param objectID (optional) an objectID you want to attribute to this object\n* (if the attribute already exist the old object will be overwrite)\n* @param callback (optional) the result callback called with two arguments:\n*  error: null or Error('message')\n*  content: the server answer that contains 3 elements: createAt, taskId and objectID",
        "* Add several objects\n*\n* @param objects contains an array of objects to add\n* @param callback (optional) the result callback called with two arguments:\n*  error: null or Error('message')\n*  content: the server answer that updateAt and taskID",
        "* Update partially an object (only update attributes passed in argument)\n*\n* @param partialObject contains the javascript attributes to override, the\n*  object must contains an objectID attribute\n* @param createIfNotExists (optional) if false, avoid an automatic creation of the object\n* @param callback (optional) the result callback called with two arguments:\n*  error: null or Error('message')\n*  content: the server answer that contains 3 elements: createAt, taskId and objectID",
        "* Partially Override the content of several objects\n*\n* @param objects contains an array of objects to update (each object must contains a objectID attribute)\n* @param callback (optional) the result callback called with two arguments:\n*  error: null or Error('message')\n*  content: the server answer that updateAt and taskID",
        "* Override the content of object\n*\n* @param object contains the javascript object to save, the object must contains an objectID attribute\n* @param callback (optional) the result callback called with two arguments:\n*  error: null or Error('message')\n*  content: the server answer that updateAt and taskID",
        "* Override the content of several objects\n*\n* @param objects contains an array of objects to update (each object must contains a objectID attribute)\n* @param callback (optional) the result callback called with two arguments:\n*  error: null or Error('message')\n*  content: the server answer that updateAt and taskID",
        "* Delete an object from the index\n*\n* @param objectID the unique identifier of object to delete\n* @param callback (optional) the result callback called with two arguments:\n*  error: null or Error('message')\n*  content: the server answer that contains 3 elements: createAt, taskId and objectID",
        "* Delete several objects from an index\n*\n* @param objectIDs contains an array of objectID to delete\n* @param callback (optional) the result callback called with two arguments:\n*  error: null or Error('message')\n*  content: the server answer that contains 3 elements: createAt, taskId and objectID",
        "* Delete all objects matching a query\n*\n* @param query the query string\n* @param params the optional query parameters\n* @param callback (optional) the result callback called with one argument\n*  error: null or Error('message')\n* @deprecated see index.deleteBy",
        "* Delete all objects matching a query\n*\n* the query parameters that can be used are:\n* - filters (numeric, facet, tag)\n* - geo\n*\n* you can not send an empty query or filters\n*\n* @param params the optional query parameters\n* @param callback (optional) the result callback called with one argument\n*  error: null or Error('message')",
        "* Browse all content from an index using events. Basically this will do\n* .browse() -> .browseFrom -> .browseFrom -> .. until all the results are returned\n*\n* @param {string} query - The full text query\n* @param {Object} [queryParameters] - Any search query parameter\n* @return {EventEmitter}\n* @example\n* var browser = index.browseAll('cool songs', {\n*   tagFilters: 'public,comments',\n*   hitsPerPage: 500\n* });\n*\n* browser.on('result', function resultCallback(content) {\n*   console.log(content.hits);\n* });\n*\n* // if any error occurs, you get it\n* browser.on('error', function(err) {\n*   throw err;\n* });\n*\n* // when you have browsed the whole index, you get this event\n* browser.on('end', function() {\n*   console.log('finished');\n* });\n*\n* // at any point if you want to stop the browsing process, you can stop it manually\n* // otherwise it will go on and on\n* browser.stop();\n*\n* @see {@link https://www.algolia.com/doc/rest_api#Browse|Algolia REST API Documentation}",
        "* Get a Typeahead.js adapter\n* @param searchParams contains an object with query parameters (see search for details)",
        "* Wait the publication of a task on the server.\n* All server task are asynchronous and you can check with this method that the task is published.\n*\n* @param taskID the id of the task returned by server\n* @param callback the result callback with with two arguments:\n*  error: null or Error('message')\n*  content: the server answer that contains the list of results",
        "* This function deletes the index content. Settings and index specific API keys are kept untouched.\n*\n* @param callback (optional) the result callback called with two arguments\n*  error: null or Error('message')\n*  content: the settings object or the error message if a failure occurred",
        "* Get settings of this index\n*\n* @param opts an object of options to add\n* @param opts.advanced get more settings like nbShards (useful for Enterprise)\n* @param callback (optional) the result callback called with two arguments\n*  error: null or Error('message')\n*  content: the settings object or the error message if a failure occurred",
        "* Retrieve all the synonyms in an index\n * @param [number=100] hitsPerPage The amount of synonyms to retrieve per batch\n * @param [function] callback will be called after all synonyms are retrieved",
        "* Retrieve all the query rules in an index\n * @param [number=100] hitsPerPage The amount of query rules to retrieve per batch\n * @param [function] callback will be called after all query rules are retrieved\n *  error: null or Error('message')",
        "* Set settings for this index\n*\n* @param settings the settings object that can contains :\n* - minWordSizefor1Typo: (integer) the minimum number of characters to accept one typo (default = 3).\n* - minWordSizefor2Typos: (integer) the minimum number of characters to accept two typos (default = 7).\n* - hitsPerPage: (integer) the number of hits per page (default = 10).\n* - attributesToRetrieve: (array of strings) default list of attributes to retrieve in objects.\n*   If set to null, all attributes are retrieved.\n* - attributesToHighlight: (array of strings) default list of attributes to highlight.\n*   If set to null, all indexed attributes are highlighted.\n* - attributesToSnippet**: (array of strings) default list of attributes to snippet alongside the number\n* of words to return (syntax is attributeName:nbWords).\n*   By default no snippet is computed. If set to null, no snippet is computed.\n* - attributesToIndex: (array of strings) the list of fields you want to index.\n*   If set to null, all textual and numerical attributes of your objects are indexed,\n*   but you should update it to get optimal results.\n*   This parameter has two important uses:\n*     - Limit the attributes to index: For example if you store a binary image in base64,\n*     you want to store it and be able to\n*       retrieve it but you don't want to search in the base64 string.\n*     - Control part of the ranking*: (see the ranking parameter for full explanation)\n*     Matches in attributes at the beginning of\n*       the list will be considered more important than matches in attributes further down the list.\n*       In one attribute, matching text at the beginning of the attribute will be\n*       considered more important than text after, you can disable\n*       this behavior if you add your attribute inside `unordered(AttributeName)`,\n*       for example attributesToIndex: [\"title\", \"unordered(text)\"].\n* - attributesForFaceting: (array of strings) The list of fields you want to use for faceting.\n*   All strings in the attribute selected for faceting are extracted and added as a facet.\n*   If set to null, no attribute is used for faceting.\n* - attributeForDistinct: (string) The attribute name used for the Distinct feature.\n* This feature is similar to the SQL \"distinct\" keyword: when enabled\n*   in query with the distinct=1 parameter, all hits containing a duplicate\n*   value for this attribute are removed from results.\n*   For example, if the chosen attribute is show_name and several hits have\n*   the same value for show_name, then only the best one is kept and others are removed.\n* - ranking: (array of strings) controls the way results are sorted.\n*   We have six available criteria:\n*    - typo: sort according to number of typos,\n*    - geo: sort according to decreassing distance when performing a geo-location based search,\n*    - proximity: sort according to the proximity of query words in hits,\n*    - attribute: sort according to the order of attributes defined by attributesToIndex,\n*    - exact:\n*        - if the user query contains one word: sort objects having an attribute\n*        that is exactly the query word before others.\n*          For example if you search for the \"V\" TV show, you want to find it\n*          with the \"V\" query and avoid to have all popular TV\n*          show starting by the v letter before it.\n*        - if the user query contains multiple words: sort according to the\n*        number of words that matched exactly (and not as a prefix).\n*    - custom: sort according to a user defined formula set in **customRanking** attribute.\n*   The standard order is [\"typo\", \"geo\", \"proximity\", \"attribute\", \"exact\", \"custom\"]\n* - customRanking: (array of strings) lets you specify part of the ranking.\n*   The syntax of this condition is an array of strings containing attributes\n*   prefixed by asc (ascending order) or desc (descending order) operator.\n*   For example `\"customRanking\" => [\"desc(population)\", \"asc(name)\"]`\n* - queryType: Select how the query words are interpreted, it can be one of the following value:\n*   - prefixAll: all query words are interpreted as prefixes,\n*   - prefixLast: only the last word is interpreted as a prefix (default behavior),\n*   - prefixNone: no query word is interpreted as a prefix. This option is not recommended.\n* - highlightPreTag: (string) Specify the string that is inserted before\n* the highlighted parts in the query result (default to \"<em>\").\n* - highlightPostTag: (string) Specify the string that is inserted after\n* the highlighted parts in the query result (default to \"</em>\").\n* - optionalWords: (array of strings) Specify a list of words that should\n* be considered as optional when found in the query.\n* @param callback (optional) the result callback called with two arguments\n*  error: null or Error('message')\n*  content: the server answer or the error message if a failure occurred",
        "* @deprecated see client.listApiKeys()",
        "* List all existing API keys to this index\n*\n* @param callback the result callback called with two arguments\n*  error: null or Error('message')\n*  content: the server answer with API keys belonging to the index\n*\n* @deprecated see client.listApiKeys()",
        "* @deprecated see client.getApiKey()",
        "* Get an API key from this index\n*\n* @param key\n* @param callback the result callback called with two arguments\n*  error: null or Error('message')\n*  content: the server answer with the right API key\n*\n* @deprecated see client.getApiKey()",
        "* @deprecated see client.deleteApiKey()",
        "* Delete an existing API key associated to this index\n*\n* @param key\n* @param callback the result callback called with two arguments\n*  error: null or Error('message')\n*  content: the server answer with the deletion date\n*\n* @deprecated see client.deleteApiKey()",
        "* @deprecated see client.addApiKey()",
        "* Add a new API key to this index\n*\n* @param {string[]} acls - The list of ACL for this key. Defined by an array of strings that\n*   can contains the following values:\n*     - search: allow to search (https and http)\n*     - addObject: allows to add/update an object in the index (https only)\n*     - deleteObject : allows to delete an existing object (https only)\n*     - deleteIndex : allows to delete index content (https only)\n*     - settings : allows to get index settings (https only)\n*     - editSettings : allows to change index settings (https only)\n* @param {Object} [params] - Optionnal parameters to set for the key\n* @param {number} params.validity - Number of seconds after which the key will\n* be automatically removed (0 means no time limit for this key)\n* @param {number} params.maxQueriesPerIPPerHour - Number of API calls allowed from an IP address per hour\n* @param {number} params.maxHitsPerQuery - Number of hits this API key can retrieve in one call\n* @param {string} params.description - A description for your key\n* @param {string[]} params.referers - A list of authorized referers\n* @param {Object} params.queryParameters - Force the key to use specific query parameters\n* @param {Function} callback - The result callback called with two arguments\n*   error: null or Error('message')\n*   content: the server answer with the added API key\n* @return {Promise|undefined} Returns a promise if no callback given\n* @example\n* index.addUserKey(['search'], {\n*   validity: 300,\n*   maxQueriesPerIPPerHour: 2000,\n*   maxHitsPerQuery: 3,\n*   description: 'Eat three fruits',\n*   referers: ['*.algolia.com'],\n*   queryParameters: {\n*     tagFilters: ['public'],\n*   }\n* })\n* @see {@link https://www.algolia.com/doc/rest_api#AddIndexKey|Algolia REST API Documentation}\n*\n* @deprecated see client.addApiKey()",
        "* @deprecated use client.addApiKey()",
        "* @deprecated see client.updateApiKey()",
        "* Update an existing API key of this index\n* @param {string} key - The key to update\n* @param {string[]} acls - The list of ACL for this key. Defined by an array of strings that\n*   can contains the following values:\n*     - search: allow to search (https and http)\n*     - addObject: allows to add/update an object in the index (https only)\n*     - deleteObject : allows to delete an existing object (https only)\n*     - deleteIndex : allows to delete index content (https only)\n*     - settings : allows to get index settings (https only)\n*     - editSettings : allows to change index settings (https only)\n* @param {Object} [params] - Optionnal parameters to set for the key\n* @param {number} params.validity - Number of seconds after which the key will\n* be automatically removed (0 means no time limit for this key)\n* @param {number} params.maxQueriesPerIPPerHour - Number of API calls allowed from an IP address per hour\n* @param {number} params.maxHitsPerQuery - Number of hits this API key can retrieve in one call\n* @param {string} params.description - A description for your key\n* @param {string[]} params.referers - A list of authorized referers\n* @param {Object} params.queryParameters - Force the key to use specific query parameters\n* @param {Function} callback - The result callback called with two arguments\n*   error: null or Error('message')\n*   content: the server answer with user keys list\n* @return {Promise|undefined} Returns a promise if no callback given\n* @example\n* index.updateApiKey('APIKEY', ['search'], {\n*   validity: 300,\n*   maxQueriesPerIPPerHour: 2000,\n*   maxHitsPerQuery: 3,\n*   description: 'Eat three fruits',\n*   referers: ['*.algolia.com'],\n*   queryParameters: {\n*     tagFilters: ['public'],\n*   }\n* })\n* @see {@link https://www.algolia.com/doc/rest_api#UpdateIndexKey|Algolia REST API Documentation}\n*\n* @deprecated see client.updateApiKey()",
        "* Index class constructor.\n* You should not use this method directly but use initIndex() function",
        "* Clear all queries in cache",
        "* Search inside the index using XMLHttpRequest request (Using a POST query to\n* minimize number of OPTIONS queries: Cross-Origin Resource Sharing).\n*\n* @param {string} [query] the full text query\n* @param {object} [args] (optional) if set, contains an object with query parameters:\n* - page: (integer) Pagination parameter used to select the page to retrieve.\n*                   Page is zero-based and defaults to 0. Thus,\n*                   to retrieve the 10th page you need to set page=9\n* - hitsPerPage: (integer) Pagination parameter used to select the number of hits per page. Defaults to 20.\n* - attributesToRetrieve: a string that contains the list of object attributes\n* you want to retrieve (let you minimize the answer size).\n*   Attributes are separated with a comma (for example \"name,address\").\n*   You can also use an array (for example [\"name\",\"address\"]).\n*   By default, all attributes are retrieved. You can also use '*' to retrieve all\n*   values when an attributesToRetrieve setting is specified for your index.\n* - attributesToHighlight: a string that contains the list of attributes you\n*   want to highlight according to the query.\n*   Attributes are separated by a comma. You can also use an array (for example [\"name\",\"address\"]).\n*   If an attribute has no match for the query, the raw value is returned.\n*   By default all indexed text attributes are highlighted.\n*   You can use `*` if you want to highlight all textual attributes.\n*   Numerical attributes are not highlighted.\n*   A matchLevel is returned for each highlighted attribute and can contain:\n*      - full: if all the query terms were found in the attribute,\n*      - partial: if only some of the query terms were found,\n*      - none: if none of the query terms were found.\n* - attributesToSnippet: a string that contains the list of attributes to snippet alongside\n* the number of words to return (syntax is `attributeName:nbWords`).\n*    Attributes are separated by a comma (Example: attributesToSnippet=name:10,content:10).\n*    You can also use an array (Example: attributesToSnippet: ['name:10','content:10']).\n*    By default no snippet is computed.\n* - minWordSizefor1Typo: the minimum number of characters in a query word to accept one typo in this word.\n* Defaults to 3.\n* - minWordSizefor2Typos: the minimum number of characters in a query word\n* to accept two typos in this word. Defaults to 7.\n* - getRankingInfo: if set to 1, the result hits will contain ranking\n* information in _rankingInfo attribute.\n* - aroundLatLng: search for entries around a given\n* latitude/longitude (specified as two floats separated by a comma).\n*   For example aroundLatLng=47.316669,5.016670).\n*   You can specify the maximum distance in meters with the aroundRadius parameter (in meters)\n*   and the precision for ranking with aroundPrecision\n*   (for example if you set aroundPrecision=100, two objects that are distant of\n*   less than 100m will be considered as identical for \"geo\" ranking parameter).\n*   At indexing, you should specify geoloc of an object with the _geoloc attribute\n*   (in the form {\"_geoloc\":{\"lat\":48.853409, \"lng\":2.348800}})\n* - insideBoundingBox: search entries inside a given area defined by the two extreme points\n* of a rectangle (defined by 4 floats: p1Lat,p1Lng,p2Lat,p2Lng).\n*   For example insideBoundingBox=47.3165,4.9665,47.3424,5.0201).\n*   At indexing, you should specify geoloc of an object with the _geoloc attribute\n*   (in the form {\"_geoloc\":{\"lat\":48.853409, \"lng\":2.348800}})\n* - numericFilters: a string that contains the list of numeric filters you want to\n* apply separated by a comma.\n*   The syntax of one filter is `attributeName` followed by `operand` followed by `value`.\n*   Supported operands are `<`, `<=`, `=`, `>` and `>=`.\n*   You can have multiple conditions on one attribute like for example numericFilters=price>100,price<1000.\n*   You can also use an array (for example numericFilters: [\"price>100\",\"price<1000\"]).\n* - tagFilters: filter the query by a set of tags. You can AND tags by separating them by commas.\n*   To OR tags, you must add parentheses. For example, tags=tag1,(tag2,tag3) means tag1 AND (tag2 OR tag3).\n*   You can also use an array, for example tagFilters: [\"tag1\",[\"tag2\",\"tag3\"]]\n*   means tag1 AND (tag2 OR tag3).\n*   At indexing, tags should be added in the _tags** attribute\n*   of objects (for example {\"_tags\":[\"tag1\",\"tag2\"]}).\n* - facetFilters: filter the query by a list of facets.\n*   Facets are separated by commas and each facet is encoded as `attributeName:value`.\n*   For example: `facetFilters=category:Book,author:John%20Doe`.\n*   You can also use an array (for example `[\"category:Book\",\"author:John%20Doe\"]`).\n* - facets: List of object attributes that you want to use for faceting.\n*   Comma separated list: `\"category,author\"` or array `['category','author']`\n*   Only attributes that have been added in **attributesForFaceting** index setting\n*   can be used in this parameter.\n*   You can also use `*` to perform faceting on all attributes specified in **attributesForFaceting**.\n* - queryType: select how the query words are interpreted, it can be one of the following value:\n*    - prefixAll: all query words are interpreted as prefixes,\n*    - prefixLast: only the last word is interpreted as a prefix (default behavior),\n*    - prefixNone: no query word is interpreted as a prefix. This option is not recommended.\n* - optionalWords: a string that contains the list of words that should\n* be considered as optional when found in the query.\n*   Comma separated and array are accepted.\n* - distinct: If set to 1, enable the distinct feature (disabled by default)\n* if the attributeForDistinct index setting is set.\n*   This feature is similar to the SQL \"distinct\" keyword: when enabled\n*   in a query with the distinct=1 parameter,\n*   all hits containing a duplicate value for the attributeForDistinct attribute are removed from results.\n*   For example, if the chosen attribute is show_name and several hits have\n*   the same value for show_name, then only the best\n*   one is kept and others are removed.\n* - restrictSearchableAttributes: List of attributes you want to use for\n* textual search (must be a subset of the attributesToIndex index setting)\n* either comma separated or as an array\n* @param {function} [callback] the result callback called with two arguments:\n*  error: null or Error('message'). If false, the content contains the error.\n*  content: the server answer that contains the list of results.",
        "* -- BETA --\n* Search a record similar to the query inside the index using XMLHttpRequest request (Using a POST query to\n* minimize number of OPTIONS queries: Cross-Origin Resource Sharing).\n*\n* @param {string} [query] the similar query\n* @param {object} [args] (optional) if set, contains an object with query parameters.\n*   All search parameters are supported (see search function), restrictSearchableAttributes and facetFilters\n*   are the two most useful to restrict the similar results and get more relevant content",
        "* Browse index content. The response content will have a `cursor` property that you can use\n* to browse subsequent pages for this query. Use `index.browseFrom(cursor)` when you want.\n*\n* @param {string} query - The full text query\n* @param {Object} [queryParameters] - Any search query parameter\n* @param {Function} [callback] - The result callback called with two arguments\n*   error: null or Error('message')\n*   content: the server answer with the browse result\n* @return {Promise|undefined} Returns a promise if no callback given\n* @example\n* index.browse('cool songs', {\n*   tagFilters: 'public,comments',\n*   hitsPerPage: 500\n* }, callback);\n* @see {@link https://www.algolia.com/doc/rest_api#Browse|Algolia REST API Documentation}",
        "* Continue browsing from a previous position (cursor), obtained via a call to `.browse()`.\n*\n* @param {string} query - The full text query\n* @param {Object} [queryParameters] - Any search query parameter\n* @param {Function} [callback] - The result callback called with two arguments\n*   error: null or Error('message')\n*   content: the server answer with the browse result\n* @return {Promise|undefined} Returns a promise if no callback given\n* @example\n* index.browseFrom('14lkfsakl32', callback);\n* @see {@link https://www.algolia.com/doc/rest_api#Browse|Algolia REST API Documentation}",
        "* Search for facet values\n* https://www.algolia.com/doc/rest-api/search#search-for-facet-values\n*\n* @param {string} params.facetName Facet name, name of the attribute to search for values in.\n* Must be declared as a facet\n* @param {string} params.facetQuery Query for the facet search\n* @param {string} [params.*] Any search parameter of Algolia,\n* see https://www.algolia.com/doc/api-client/javascript/search#search-parameters\n* Pagination is not supported. The page and hitsPerPage parameters will be ignored.\n* @param callback (optional)",
        "* Get an object from this index\n*\n* @param objectID the unique identifier of the object to retrieve\n* @param attrs (optional) if set, contains the array of attribute names to retrieve\n* @param callback (optional) the result callback called with two arguments\n*  error: null or Error('message')\n*  content: the object to retrieve or the error message if a failure occurred",
        "* Get several objects from this index\n*\n* @param objectIDs the array of unique identifier of objects to retrieve",
        "* Creates a search method to be used in clients\n * @param {string} queryParam the name of the attribute used for the query\n * @param {string} url the url\n * @return {function} the search method",
        "* The search method. Prepares the data and send the query to Algolia.\n   * @param {string} query the string used for query search\n   * @param {object} args additional parameters to send with the search\n   * @param {function} [callback] the callback to be called with the client gets the answer\n   * @return {undefined|Promise} If the callback is not provided then this methods returns a Promise"
    ],
    "functions": [
        "s",
        "setAttributes",
        "stdOnEnd",
        "ieOnEnd",
        "isUsingLatest",
        "loadV2",
        "scriptLoaded",
        "oldGlobals",
        "migrationLayer",
        "s",
        "useColors",
        "formatArgs",
        "log",
        "save",
        "load",
        "localstorage",
        "selectColor",
        "createDebug",
        "debug",
        "enable",
        "disable",
        "enabled",
        "coerce",
        "objectOrFunction",
        "isFunction",
        "setScheduler",
        "setAsap",
        "useNextTick",
        "useVertxTimer",
        "useMutationObserver",
        "useMessageChannel",
        "useSetTimeout",
        "flush",
        "attemptVertx",
        "then",
        "resolve$1",
        "noop",
        "selfFulfillment",
        "cannotReturnOwn",
        "getThen",
        "tryThen",
        "handleForeignThenable",
        "handleOwnThenable",
        "handleMaybeThenable",
        "resolve",
        "publishRejection",
        "fulfill",
        "reject",
        "subscribe",
        "publish",
        "ErrorObject",
        "tryCatch",
        "invokeCallback",
        "initializePromise",
        "nextId",
        "makePromise",
        "Enumerator$1",
        "validationError",
        "all$1",
        "race$1",
        "reject$1",
        "needsResolver",
        "needsNew",
        "Promise$2",
        "polyfill$1",
        "EventEmitter",
        "g",
        "isFunction",
        "isNumber",
        "isObject",
        "isUndefined",
        "parse",
        "fmtShort",
        "fmtLong",
        "plural",
        "defaultSetTimout",
        "defaultClearTimeout",
        "runTimeout",
        "runClearTimeout",
        "cleanUpNextTick",
        "drainQueue",
        "Item",
        "noop",
        "hasOwnProperty",
        "AlgoliaSearch",
        "notImplemented",
        "AlgoliaSearchCore",
        "doRequest",
        "success",
        "tryFallback",
        "retryRequest",
        "retryRequestWithHigherTimeout",
        "isCacheValidWithCurrentID",
        "interopCallbackReturn",
        "prepareHost",
        "safeJSONStringify",
        "shuffle",
        "removeCredentials",
        "Index",
        "stopOrDelete",
        "waitTask",
        "doDeleteByQuery",
        "success",
        "failure",
        "browseLoop",
        "browseCallback",
        "retryLoop",
        "successCb",
        "failureCb",
        "exportData",
        "search",
        "IndexBrowser",
        "IndexCore",
        "algoliasearch",
        "AlgoliaSearchBrowser",
        "onLoad",
        "onError",
        "onTimeout",
        "onConnect",
        "onProgress",
        "onReadyStateChange",
        "inlineHeaders",
        "jsonpRequest",
        "success",
        "readystatechange",
        "clean",
        "removeGlobals",
        "timeout",
        "error",
        "buildSearchMethod",
        "createAnalyticsClient",
        "deprecated",
        "AlgoliaSearchError",
        "createCustomError",
        "AlgoliaSearchCustomError",
        "createPlacesClient",
        "localStorageFailure",
        "getOrSet",
        "supportsLocalStorage",
        "cleanup"
    ],
    "classes": []
}