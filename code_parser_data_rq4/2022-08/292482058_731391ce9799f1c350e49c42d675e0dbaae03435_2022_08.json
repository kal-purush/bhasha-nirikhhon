{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "unicode_literals",
        "locale",
        "re",
        "subprocess",
        "sys",
        "collections",
        "namedtuple",
        "pyroengine",
        "ImportError",
        "NameError",
        "AttributeError",
        "onnxruntime",
        "ImportError",
        "NameError",
        "AttributeError",
        "sys",
        "version_info",
        "namedtuple",
        "command",
        "subprocess",
        "Popen",
        "command",
        "stdout",
        "subprocess",
        "PIPE",
        "stderr",
        "subprocess",
        "PIPE",
        "shell",
        "p",
        "communicate",
        "p",
        "returncode",
        "PY3",
        "locale",
        "getpreferredencoding",
        "output",
        "decode",
        "enc",
        "err",
        "decode",
        "enc",
        "rc",
        "output",
        "strip",
        "err",
        "strip",
        "run_lambda",
        "command",
        "run_lambda",
        "command",
        "rc",
        "run_lambda",
        "command",
        "regex",
        "run_lambda",
        "command",
        "rc",
        "re",
        "search",
        "regex",
        "match",
        "match",
        "group",
        "sys",
        "platform",
        "startswith",
        "sys",
        "platform",
        "startswith",
        "sys",
        "platform",
        "startswith",
        "sys",
        "platform",
        "startswith",
        "sys",
        "platform",
        "run_lambda",
        "run_and_parse_first_match",
        "run_lambda",
        "run_lambda",
        "run_and_read_all",
        "run_lambda",
        "run_lambda",
        "run_and_parse_first_match",
        "run_lambda",
        "run_lambda",
        "run_and_parse_first_match",
        "run_lambda",
        "run_lambda",
        "get_platform",
        "platform",
        "platform",
        "get_windows_version",
        "run_lambda",
        "platform",
        "get_mac_version",
        "run_lambda",
        "version",
        "format",
        "version",
        "platform",
        "get_lsb_version",
        "run_lambda",
        "desc",
        "desc",
        "check_release_file",
        "run_lambda",
        "desc",
        "desc",
        "platform",
        "platform",
        "run",
        "ENGINE_AVAILABLE",
        "pyroengine",
        "__version__",
        "ONNX_AVAILABLE",
        "onnxruntime",
        "__version__",
        "SystemEnv",
        "pyroengine_version",
        "pyroengine_str",
        "onnxruntime_version",
        "onnxruntime_str",
        "python_version",
        "join",
        "sys",
        "version_info",
        "os",
        "get_os",
        "run_lambda",
        "strip",
        "envinfo",
        "dct",
        "replacement",
        "key",
        "dct",
        "keys",
        "dct",
        "key",
        "replacement",
        "dct",
        "dct",
        "key",
        "dct",
        "keys",
        "dct",
        "key",
        "dct",
        "key",
        "dct",
        "len",
        "split",
        "format",
        "envinfo",
        "_asdict",
        "replace_bools",
        "mutable_dict",
        "replace_nones",
        "mutable_dict",
        "env_info_fmt",
        "format",
        "mutable_dict",
        "pretty_str",
        "get_env_info",
        "get_pretty_env_info",
        "output",
        "main"
    ],
    "literals": [
        "\"SystemEnv\"",
        "\"pyroengine_version\"",
        "\"onnxruntime_version\"",
        "\"os\"",
        "\"python_version\"",
        "\"linux\"",
        "\"linux\"",
        "\"win32\"",
        "\"win32\"",
        "\"cygwin\"",
        "\"cygwin\"",
        "\"darwin\"",
        "\"darwin\"",
        "\"sw_vers -productVersion\"",
        "r\"(.*)\"",
        "\"wmic os get Caption | findstr /v Caption\"",
        "\"lsb_release -a\"",
        "r\"Description:\\t(.*)\"",
        "\"cat /etc/*-release\"",
        "r'PRETTY_NAME=\"(.*)\"'",
        "\"win32\"",
        "\"cygwin\"",
        "\"darwin\"",
        "\"Mac OSX {}\"",
        "\"linux\"",
        "\"N/A\"",
        "\"N/A\"",
        "\".\"",
        "\"Could not collect\"",
        "\"Yes\"",
        "\"No\"",
        "\"\\n\"",
        "\"\\n{}\\n\"",
        "\"Collecting environment information...\"",
        "\"__main__\""
    ],
    "variables": [
        "ENGINE_AVAILABLE",
        "ENGINE_AVAILABLE",
        "ONNX_AVAILABLE",
        "ONNX_AVAILABLE",
        "PY3",
        "SystemEnv",
        "p",
        "output",
        "err",
        "rc",
        "enc",
        "output",
        "err",
        "rc",
        "_",
        "rc",
        "_",
        "match",
        "platform",
        "version",
        "desc",
        "desc",
        "run_lambda",
        "pyroengine_str",
        "pyroengine_str",
        "onnxruntime_str",
        "onnxruntime_str",
        "env_info_fmt",
        "dct",
        "key",
        "dct",
        "key",
        "dct",
        "key",
        "mutable_dict",
        "mutable_dict",
        "mutable_dict",
        "output"
    ],
    "comments": [
        "Copyright (C) 2020-2022, Pyronear.",
        "This program is licensed under the Apache License 2.0.",
        "See LICENSE or go to <https://www.apache.org/licenses/LICENSE-2.0> for full license details.",
        "System Environment Information",
        "Ubuntu/Debian based",
        "Try reading /etc/*-release",
        "Unknown platform",
        "If `string` is multiline, prepend a \\n to it.",
        "Replace True with Yes, False with No",
        "Replace all None objects with 'Could not collect'"
    ],
    "docstrings": [
        "\"\"\"\nBased on https://github.com/pytorch/pytorch/blob/master/torch/utils/collect_env.py\nThis script outputs relevant system environment info\nRun it with `python collect_env.py`.\n\"\"\"",
        "\"\"\"Returns (return-code, stdout, stderr)\"\"\"",
        "\"\"\"Runs command using run_lambda; reads and returns entire output if rc is 0\"\"\"",
        "\"\"\"Runs command using run_lambda, returns the first regex match if it exists\"\"\"",
        "\"\"\"\nPyroEngine version: {pyroengine_version}\nONNX runtime version: {onnxruntime_version}\n\nOS: {os}\n\nPython version: {python_version}\n\"\"\"",
        "\"\"\"Collects environment information for debugging purposes\n\n    Returns:\n        str: environment information\n    \"\"\""
    ],
    "functions": [
        "run",
        "run_and_read_all",
        "run_and_parse_first_match",
        "get_platform",
        "get_mac_version",
        "get_windows_version",
        "get_lsb_version",
        "check_release_file",
        "get_os",
        "get_env_info",
        "pretty_str",
        "replace_nones",
        "replace_bools",
        "maybe_start_on_next_line",
        "get_pretty_env_info",
        "main"
    ],
    "classes": []
}