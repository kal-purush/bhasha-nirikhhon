{
    "identifiers": [
        "absolute_import",
        "print_function",
        "unicode_literals",
        "sys",
        "dbus",
        "dbus",
        "service",
        "dbus",
        "mainloop",
        "glib",
        "gi",
        "repository",
        "GObject",
        "ImportError",
        "gobject",
        "GObject",
        "prompt",
        "raw_input",
        "prompt",
        "input",
        "prompt",
        "path",
        "dbus",
        "Interface",
        "bus",
        "get_object",
        "path",
        "props",
        "path",
        "dbus",
        "Interface",
        "bus",
        "get_object",
        "path",
        "dev",
        "Connect",
        "dbus",
        "DBusException",
        "dbus",
        "service",
        "exit_on_release",
        "exit_on_release",
        "dbus",
        "service",
        "method",
        "AGENT_INTERFACE",
        "in_signature",
        "out_signature",
        "exit_on_release",
        "mainloop",
        "quit",
        "dbus",
        "service",
        "method",
        "AGENT_INTERFACE",
        "in_signature",
        "out_signature",
        "device",
        "uuid",
        "device",
        "uuid",
        "ask",
        "authorize",
        "Rejected",
        "dbus",
        "service",
        "method",
        "AGENT_INTERFACE",
        "in_signature",
        "out_signature",
        "device",
        "device",
        "set_trusted",
        "device",
        "ask",
        "dbus",
        "service",
        "method",
        "AGENT_INTERFACE",
        "in_signature",
        "out_signature",
        "device",
        "device",
        "set_trusted",
        "device",
        "ask",
        "dbus",
        "UInt32",
        "passkey",
        "dbus",
        "service",
        "method",
        "AGENT_INTERFACE",
        "in_signature",
        "out_signature",
        "device",
        "passkey",
        "entered",
        "device",
        "passkey",
        "entered",
        "dbus",
        "service",
        "method",
        "AGENT_INTERFACE",
        "in_signature",
        "out_signature",
        "device",
        "pincode",
        "device",
        "pincode",
        "dbus",
        "service",
        "method",
        "AGENT_INTERFACE",
        "in_signature",
        "out_signature",
        "device",
        "passkey",
        "device",
        "passkey",
        "ask",
        "confirm",
        "set_trusted",
        "device",
        "Rejected",
        "dbus",
        "service",
        "method",
        "AGENT_INTERFACE",
        "in_signature",
        "out_signature",
        "device",
        "device",
        "ask",
        "auth",
        "Rejected",
        "dbus",
        "service",
        "method",
        "AGENT_INTERFACE",
        "in_signature",
        "out_signature",
        "set_trusted",
        "dev_path",
        "dev_connect",
        "dev_path",
        "mainloop",
        "quit",
        "error",
        "error",
        "get_dbus_name",
        "err_name",
        "device_obj",
        "device_obj",
        "CancelPairing",
        "error",
        "mainloop",
        "quit"
    ],
    "literals": [
        "'org.bluez'",
        "'org.bluez.Agent1'",
        "\"/test/agent\"",
        "\"org.bluez\"",
        "\"org.freedesktop.DBus.Properties\"",
        "\"org.bluez.Device1\"",
        "\"Trusted\"",
        "\"org.bluez\"",
        "\"org.bluez.Device1\"",
        "\"org.bluez.Error.Rejected\"",
        "\"\"",
        "\"\"",
        "\"Release\"",
        "\"os\"",
        "\"\"",
        "\"AuthorizeService (%s, %s)\"",
        "\"Authorize connection (yes/no): \"",
        "\"yes\"",
        "\"Connection rejected by user\"",
        "\"o\"",
        "\"s\"",
        "\"RequestPinCode (%s)\"",
        "\"Enter PIN Code: \"",
        "\"o\"",
        "\"u\"",
        "\"RequestPasskey (%s)\"",
        "\"Enter passkey: \"",
        "\"ouq\"",
        "\"\"",
        "\"DisplayPasskey (%s, %06u entered %u)\"",
        "\"os\"",
        "\"\"",
        "\"DisplayPinCode (%s, %s)\"",
        "\"ou\"",
        "\"\"",
        "\"RequestConfirmation (%s, %06d)\"",
        "\"Confirm passkey (yes/no): \"",
        "\"yes\"",
        "\"Passkey doesn't match\"",
        "\"o\"",
        "\"\"",
        "\"RequestAuthorization (%s)\"",
        "\"Authorize? (yes/no): \"",
        "\"yes\"",
        "\"Pairing rejected\"",
        "\"\"",
        "\"\"",
        "\"Cancel\"",
        "\"Device paired\"",
        "\"org.freedesktop.DBus.Error.NoReply\"",
        "\"Timed out. Cancelling pairing\"",
        "\"Creating device failed: %s\""
    ],
    "variables": [
        "BUS_NAME",
        "AGENT_INTERFACE",
        "AGENT_PATH",
        "bus",
        "device_obj",
        "dev_path",
        "props",
        "dev",
        "_dbus_error_name",
        "exit_on_release",
        "exit_on_release",
        "authorize",
        "passkey",
        "confirm",
        "auth",
        "err_name"
    ],
    "comments": [
        "!/usr/bin/python",
        "SPDX-License-Identifier: LGPL-2.1-or-later",
        "if __name__ == '__main__':",
        "dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)",
        "bus = dbus.SystemBus()",
        "capability = \"KeyboardDisplay\"",
        "parser = OptionParser()",
        "parser.add_option(\"-i\", \"--adapter\", action=\"store\",",
        "type=\"string\",",
        "dest=\"adapter_pattern\",",
        "default=None)",
        "parser.add_option(\"-c\", \"--capability\", action=\"store\",",
        "type=\"string\", dest=\"capability\")",
        "parser.add_option(\"-t\", \"--timeout\", action=\"store\",",
        "type=\"int\", dest=\"timeout\",",
        "default=60000)",
        "(options, args) = parser.parse_args()",
        "if options.capability:",
        "capability = options.capability",
        "path = \"/test/agent\"",
        "agent = Agent(bus, path)",
        "mainloop = GObject.MainLoop()",
        "obj = bus.get_object(BUS_NAME, \"/org/bluez\")",
        "manager = dbus.Interface(obj, \"org.bluez.AgentManager1\")",
        "manager.RegisterAgent(path, capability)",
        "print(\"Agent registered\")",
        "# Fix-up old style invocation (BlueZ 4)",
        "if len(args) > 0 and args[0].startswith(\"hci\"):",
        "options.adapter_pattern = args[0]",
        "del args[:1]",
        "if len(args) > 0:",
        "device = bluezutils.find_device(args[0],",
        "options.adapter_pattern)",
        "dev_path = device.object_path",
        "agent.set_exit_on_release(False)",
        "device.Pair(reply_handler=pair_reply, error_handler=pair_error,",
        "timeout=60000)",
        "device_obj = device",
        "else:",
        "manager.RequestDefaultAgent(path)",
        "mainloop.run()",
        "adapter.UnregisterAgent(path)",
        "print(\"Agent unregistered\")"
    ],
    "docstrings": [],
    "functions": [
        "ask",
        "set_trusted",
        "dev_connect",
        "set_exit_on_release",
        "Release",
        "AuthorizeService",
        "RequestPinCode",
        "RequestPasskey",
        "DisplayPasskey",
        "DisplayPinCode",
        "RequestConfirmation",
        "RequestAuthorization",
        "Cancel",
        "pair_reply",
        "pair_error"
    ],
    "classes": [
        "Rejected",
        "Agent"
    ]
}