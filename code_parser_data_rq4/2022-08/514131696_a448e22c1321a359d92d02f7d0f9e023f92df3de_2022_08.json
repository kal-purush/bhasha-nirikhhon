{
    "identifiers": [
        "canopen",
        "time",
        "INetwork",
        "py",
        "Network",
        "canopen",
        "Network",
        "network",
        "connect",
        "bustype",
        "channel",
        "bitrate",
        "network",
        "create_node",
        "node",
        "nmt",
        "send_command",
        "node",
        "nmt",
        "start_heartbeat",
        "node",
        "rpdo",
        "read",
        "node",
        "tpdo",
        "read",
        "node",
        "rpdo",
        "wait_for_reception",
        "timeout",
        "node",
        "rpdo",
        "wait_for_reception",
        "timeout",
        "node",
        "rpdo",
        "wait_for_reception",
        "timeout",
        "node",
        "rpdo",
        "wait_for_reception",
        "timeout",
        "node",
        "rpdo",
        "wait_for_reception",
        "timeout",
        "node",
        "rpdo",
        "wait_for_reception",
        "timeout",
        "node",
        "rpdo",
        "wait_for_reception",
        "timeout",
        "node",
        "rpdo",
        "wait_for_reception",
        "timeout",
        "node",
        "rpdo",
        "phys",
        "node",
        "rpdo",
        "phys",
        "node",
        "rpdo",
        "phys",
        "node",
        "rpdo",
        "phys",
        "node",
        "rpdo",
        "phys",
        "node",
        "rpdo",
        "phys",
        "node",
        "rpdo",
        "phys",
        "node",
        "rpdo",
        "phys",
        "node",
        "rpdo",
        "phys",
        "node",
        "rpdo",
        "phys",
        "node",
        "rpdo",
        "phys",
        "node",
        "rpdo",
        "phys",
        "format",
        "node",
        "rpdo",
        "raw",
        "timestamp_1",
        "format",
        "node",
        "rpdo",
        "raw",
        "timestamp_1",
        "format",
        "node",
        "rpdo",
        "raw",
        "timestamp_2",
        "format",
        "node",
        "rpdo",
        "raw",
        "timestamp_3",
        "format",
        "node",
        "rpdo",
        "raw",
        "timestamp_3",
        "format",
        "node",
        "rpdo",
        "raw",
        "timestamp_4",
        "format",
        "node",
        "rpdo",
        "raw",
        "timestamp_5",
        "format",
        "node",
        "rpdo",
        "raw",
        "timestamp_5",
        "format",
        "node",
        "rpdo",
        "raw",
        "timestamp_6",
        "format",
        "node",
        "rpdo",
        "raw",
        "timestamp_7",
        "format",
        "node",
        "rpdo",
        "raw",
        "timestamp_7",
        "format",
        "node",
        "rpdo",
        "raw",
        "timestamp_8",
        "KeyboardInterrupt"
    ],
    "literals": [
        "'socketcan'",
        "'vcan0'",
        "'Jetson_exo_66.eds'",
        "\"LH Actual Position = {}, t={}\"",
        "\"LH Actual Velocity = {}, t={}\"",
        "\"LH Actual Torque   = {}, t={}\"",
        "\"LK Actual Position = {}, t={}\"",
        "\"LK Actual Velocity = {}, t={}\"",
        "\"LK Actual Torque   = {}, t={}\"",
        "\"RH Actual Position = {}, t={}\"",
        "\"RH Actual Velocity = {}, t={}\"",
        "\"RH Actual Torque   = {}, t={}\"",
        "\"RK Actual Position = {}, t={}\"",
        "\"RK Actual Velocity = {}, t={}\"",
        "\"RK Actual Torque   = {}, t={}\"",
        "\"Exit from reading PDO to Jetson\"",
        "\"Test reading PDO to read input of Exo\""
    ],
    "variables": [
        "network",
        "node",
        "network",
        "node",
        "timestamp_1",
        "timestamp_2",
        "timestamp_3",
        "timestamp_4",
        "timestamp_5",
        "timestamp_6",
        "timestamp_7",
        "timestamp_8",
        "LH_position",
        "LH_velocity",
        "LH_torque",
        "LK_position",
        "LK_velocity",
        "LK_torque",
        "RH_position",
        "RH_velocity",
        "RH_torque",
        "RK_position",
        "RK_velocity",
        "RK_torque"
    ],
    "comments": [
        "Setup the connection object",
        "construct a CAN network",
        "connect to the CAN network",
        "self.network.connect(bustype='socketcan', channel='can0', bitrate=1000000)",
        "create a slaver node with id 2(need to match with master.py) and Object Dictionary \"Slaver.eds\"",
        "Node send the boot-up message to the CAN network COB-ID:0x700+node-ID detail: \"0\"",
        "With the heartbeat configuration in object Dictionary, use the function by following command every 1s(1000ms)",
        "send pdo message",
        "Polling goes here",
        "For setting up hardware (might not be in use"
    ],
    "docstrings": [],
    "functions": [
        "Setup",
        "Update",
        "SetupHardware"
    ],
    "classes": [
        "CANNetwork"
    ]
}