{
    "identifiers": [
        "serial",
        "serial",
        "tools",
        "list_ports",
        "comports",
        "library",
        "lcd_comm",
        "IntEnum",
        "IntEnum",
        "orientation",
        "Orientation",
        "OrientationValueRevB",
        "orientation",
        "Orientation",
        "PORTRAIT",
        "orientation",
        "Orientation",
        "REVERSE_PORTRAIT",
        "OrientationValueRevB",
        "ORIENTATION_PORTRAIT",
        "OrientationValueRevB",
        "ORIENTATION_LANDSCAPE",
        "LcdComm",
        "CONFIG_DATA",
        "auto_detect_com_port",
        "serial",
        "Serial",
        "lcd_com_port",
        "timeout",
        "rtscts",
        "lcd_com_port",
        "CONFIG_DATA",
        "lcd_com_port",
        "serial",
        "Serial",
        "lcd_com_port",
        "timeout",
        "rtscts",
        "staticmethod",
        "serial",
        "tools",
        "list_ports",
        "comports",
        "com_port",
        "com_ports",
        "com_port",
        "serial_number",
        "com_port",
        "device",
        "auto_com_port",
        "cmd",
        "Command",
        "payload",
        "payload",
        "len",
        "payload",
        "payload",
        "len",
        "payload",
        "cmd",
        "payload",
        "payload",
        "payload",
        "payload",
        "payload",
        "payload",
        "payload",
        "payload",
        "cmd",
        "config",
        "update_queue_mutex",
        "config",
        "update_queue",
        "put",
        "WriteData",
        "byteBuffer",
        "byteBuffer",
        "lcd_serial",
        "write",
        "byteBuffer",
        "serial",
        "serialutil",
        "SerialTimeoutException",
        "line",
        "config",
        "update_queue",
        "put",
        "WriteLine",
        "line",
        "line",
        "lcd_serial",
        "write",
        "line",
        "serial",
        "serialutil",
        "SerialTimeoutException",
        "Command",
        "HELLO",
        "ord",
        "ord",
        "ord",
        "ord",
        "ord",
        "Command",
        "HELLO",
        "config",
        "update_queue_mutex",
        "WriteData",
        "byteBuffer",
        "lcd_serial",
        "read",
        "len",
        "response",
        "response",
        "Command",
        "HELLO",
        "response",
        "Command",
        "HELLO",
        "x",
        "x",
        "response",
        "byteBuffer",
        "response",
        "Hello",
        "SetBrightness",
        "SetBrightness",
        "level",
        "CONFIG_DATA",
        "level",
        "level",
        "SendCommand",
        "Command",
        "SET_BRIGHTNESS",
        "payload",
        "level_absolute",
        "led_color",
        "THEME_DATA",
        "SendCommand",
        "Command",
        "SET_LIGHTING",
        "payload",
        "led_color",
        "orientation",
        "Orientation",
        "get_theme_orientation",
        "SendCommand",
        "Command",
        "SET_ORIENTATION",
        "payload",
        "get_rev_b_orientation",
        "orientation",
        "image",
        "Image",
        "x",
        "y",
        "image_width",
        "image_height",
        "image_height",
        "image",
        "size",
        "image_width",
        "image",
        "size",
        "image",
        "size",
        "get_height",
        "get_height",
        "image",
        "size",
        "get_width",
        "get_width",
        "x",
        "get_width",
        "y",
        "get_height",
        "image_height",
        "image_width",
        "x",
        "y",
        "x",
        "image_width",
        "y",
        "image_height",
        "SendCommand",
        "Command",
        "DISPLAY_BITMAP",
        "payload",
        "x0",
        "x0",
        "y0",
        "y0",
        "x1",
        "x1",
        "y1",
        "y1",
        "image",
        "load",
        "config",
        "update_queue_mutex",
        "h",
        "image_height",
        "w",
        "image_width",
        "pix",
        "w",
        "h",
        "pix",
        "w",
        "h",
        "pix",
        "w",
        "h",
        "B",
        "G",
        "G",
        "R",
        "line",
        "pack",
        "rgb",
        "len",
        "line",
        "get_width",
        "SendLine",
        "line",
        "len",
        "line",
        "SendLine",
        "line"
    ],
    "literals": [
        "'config'",
        "'COM_PORT'",
        "'AUTO'",
        "f\"Auto detected comm port: {lcd_com_port}\"",
        "\"config\"",
        "\"COM_PORT\"",
        "f\"Static comm port: {lcd_com_port}\"",
        "\"2017-2-25\"",
        "\"(Write data) Too fast! Slow down!\"",
        "\"(Write line) Too fast! Slow down!\"",
        "'H'",
        "'E'",
        "'L'",
        "'L'",
        "'O'",
        "\"Device not recognised (short response to HELLO)\"",
        "\"Device not recognised (bad framing)\"",
        "\"Device not recognised (No HELLO; got %r)\"",
        "\"display\"",
        "\"BRIGHTNESS\"",
        "'Brightness level must be [0-100]'",
        "'display'",
        "\"DISPLAY_RGB_LED\"",
        "'Image X coordinate must be <= display width'",
        "'Image Y coordinate must be <= display height'",
        "'Image width must be > 0'",
        "'Image height must be > 0'",
        "'H'"
    ],
    "variables": [
        "HELLO",
        "SET_ORIENTATION",
        "DISPLAY_BITMAP",
        "SET_LIGHTING",
        "SET_BRIGHTNESS",
        "ORIENTATION_PORTRAIT",
        "ORIENTATION_LANDSCAPE",
        "lcd_serial",
        "lcd_com_port",
        "lcd_serial",
        "lcd_com_port",
        "lcd_serial",
        "com_ports",
        "auto_com_port",
        "auto_com_port",
        "payload",
        "payload",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "byteBuffer",
        "response",
        "level_absolute",
        "image_height",
        "image_width",
        "image_height",
        "image_width",
        "x0",
        "y0",
        "x1",
        "y1",
        "pix",
        "line",
        "R",
        "G",
        "B",
        "rgb",
        "line"
    ],
    "comments": [
        "Establish communication before driving the screen",
        "Sets the screen orientation",
        "Displays an image on the screen",
        "Sets the screen backplate RGB LED color",
        "Sets the screen brightness",
        "New protocol (10 byte packets, framed with the command, 8 data bytes inside)",
        "Lock queue mutex then queue the request",
        "We timed-out trying to write to our device, slow things down.",
        "We timed-out trying to write to our device, slow things down.",
        "This command reads LCD answer on serial link, so it bypasses the queue",
        "The HELLO response here is followed by:",
        "0x0A, 0x12, 0x00",
        "It is not clear what these might be.",
        "It would be handy if these were a version number, or a set of capability",
        "flags. The 0x0A=10 being version 10 or 0.10, and the 0x12 being the size or the",
        "indication that a backlight is present, would be nice. But that's guessing",
        "based on how I'd do it.",
        "HW revision B does not implement a command to reset it",
        "HW revision B does not implement a \"ScreenOff\" native command: using SetBrightness(0) instead",
        "HW revision B does not implement a \"ScreenOn\" native command: using SetBrightness() instead",
        "Display scales from 0 to 255, with 255 being the brightest and 0 being the darkest.",
        "Convert our brightness % to an absolute value.",
        "Level : 0 (darkest) - 255 (brightest)",
        "If the image height/width isn't provided, use the native image size",
        "If our image is bigger than our display, resize it to fit our screen",
        "Lock queue mutex then queue all the requests for the image data",
        "Revision A: 0bRRRRRGGGGGGBBBBB",
        "fedcba9876543210",
        "Revision B: 0bgggBBBBBRRRRRGGG",
        "That is...",
        "High 3 bits of green in b0-b2",
        "Low 3 bits of green in b13-b15",
        "Red 5 bits in b3-b7",
        "Blue 5 bits in b8-b12",
        "Send image data by multiple of DISPLAY_WIDTH bytes",
        "Write last line if needed"
    ],
    "docstrings": [],
    "functions": [
        "get_rev_b_orientation",
        "auto_detect_com_port",
        "SendCommand",
        "WriteData",
        "SendLine",
        "WriteLine",
        "Hello",
        "InitializeComm",
        "Reset",
        "Clear",
        "ScreenOff",
        "ScreenOn",
        "SetBrightness",
        "SetBackplateLedColor",
        "SetOrientation",
        "DisplayPILImage"
    ],
    "classes": [
        "Command",
        "OrientationValueRevB",
        "LcdCommRevB"
    ]
}