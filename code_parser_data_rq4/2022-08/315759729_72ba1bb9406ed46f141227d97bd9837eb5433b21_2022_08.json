{
    "identifiers": [
        "Document",
        "Redirect",
        "FLAW_LEVELS",
        "BCDSection",
        "CompatStatementExtended",
        "Doc",
        "doc",
        "options",
        "options",
        "FLAW_LEVELS",
        "query",
        "key",
        "slug",
        "suggestion",
        "doc",
        "doc",
        "doc",
        "doc",
        "absURL",
        "absURL",
        "absURL",
        "URL",
        "absURL",
        "u",
        "absURL",
        "u",
        "slug",
        "slug",
        "slug",
        "section",
        "doc",
        "section",
        "section",
        "section",
        "data",
        "data",
        "data",
        "isCompatStatement",
        "value",
        "value",
        "value",
        "isCompatStatement",
        "block",
        "getPathFromAbsoluteURL",
        "block",
        "block",
        "url",
        "checkLinks",
        "url",
        "url",
        "Document",
        "urlLC",
        "found",
        "section",
        "Redirect",
        "urlLC",
        "resolved",
        "urlLC",
        "Document",
        "resolved",
        "finalDocument",
        "finalDocument",
        "addBadBCDLinkFlaw",
        "query",
        "key",
        "url",
        "suggestion",
        "block",
        "suggestion",
        "addBadBCDLinkFlaw",
        "query",
        "key",
        "url",
        "block",
        "doc",
        "section",
        "doc",
        "section",
        "section",
        "nextId",
        "nextId",
        "doc",
        "fileName",
        "data",
        "dataURL",
        "section",
        "section",
        "dataURL",
        "section",
        "section",
        "data"
    ],
    "literals": [
        "\"../content\"",
        "\"../libs/constants\"",
        "\"../libs/types\"",
        "\"bad_bcd_links\"",
        "\"bad_bcd_links\"",
        "bad_bcd_link${doc.flaws.bad_bcd_links.length}",
        "\"://\"",
        "\"developer.mozilla.org\"",
        "\"/docs/\"",
        "/en-US${slug}",
        "not implemented! ${slug}",
        "\"browser_compatibility\"",
        "\"__compat\"",
        "\"/\"",
        "string",
        "\"value\"",
        "\"browser_compatibility\"",
        "bcd-${nextId}.json",
        "\"bcd.json\"",
        "${doc.mdn_url}/${fileName}"
    ],
    "variables": [
        "checkLinks",
        "u",
        "slug",
        "key",
        "data",
        "block",
        "isCompatStatement",
        "url",
        "urlLC",
        "found",
        "query",
        "resolved",
        "finalDocument",
        "suggestion",
        "data",
        "nextId",
        "fileName",
        "dataURL"
    ],
    "comments": [
        "Because the compat data is mutated out of @mdn/browser-compat-data,",
        "through our `packageBCD` function, it's very possible that",
        "the `doc[i].type === 'browser_compatibility` has already been",
        "processed.",
        "If URL is from a different host, return without modifying it",
        "Return the pathname without docs directory, the base path for the",
        "`Document` component the BCD table is within is /:locale/docs/ so it is",
        "not needed.",
        "The `mdn_url` field in BCD data is always like this:",
        "https://developer.mozilla.org/docs/Web/API/MediaTrackSettings/width",
        "So to get the appropriate slug, in Yari, we have to assume a locale.",
        "Important! For now, to make this a slug we can understand we",
        "have to have a locale and we pick `en-US` as the default.",
        "This happens if a query is \"broken\".",
        "E.g. <div class=\"bc-data\" data-query=\"apii.TypoCatching\">",
        "First block from the BCD data does not have its name as the root key",
        "so mdn_url is accessible at the root. If the block has a key for",
        "`__compat` it is not the first block, and the information is nested",
        "under `__compat`.",
        "Now we need to scrutinize if that's a url we can fully",
        "recognize. (But only if it's a relative link)",
        "That means trouble!",
        "But can it be salvaged with a redirect?",
        "Remember that `Redirect.resolve()` will return the input",
        "if it couldn't be resolved to a *different* url.",
        "Just because it's a redirect doesn't mean it ends up",
        "on a page we have.",
        "For example, there might be a redirect but where it",
        "goes to is not in this.allTitles.",
        "This can happen if it's a \"fundamental redirect\" for example.",
        "If the url is bad, and can't be salvaged with a redirect,",
        "we need to pass that information on so that it can be",
        "leveraged in the UI that displays the BCD table.",
        "That way, it knows to not attempt to make a link out of it.",
        "Most pages only have exactly 1 so no need to put the prefix on them.",
        "This happens if a query is \"broken\".",
        "E.g. <div class=\"bc-data\" data-query=\"apii.TypoCatching\">"
    ],
    "docstrings": [
        "* Loop over, and mutate, all 'browser_compatibility' sections.\n * BCD data comes from from a library with `mdn_url`'s that are absolute.\n * This takes the `mdn_url` and sets it to a URI that can be used when\n * rendering the BCD table to link to a relative path.\n *\n * Also, if enabled, check all of these inner `mdn_url` for flaws.\n *",
        "* Return an array of BCD data blocks like [{url: ..., data: ...},]\n * for each BCD section in the doc and mutate it from the doc itself.\n * @param {Doc} doc"
    ],
    "functions": [
        "normalizeBCDURLs",
        "addBadBCDLinkFlaw",
        "getPathFromAbsoluteURL",
        "extractBCDData"
    ],
    "classes": []
}