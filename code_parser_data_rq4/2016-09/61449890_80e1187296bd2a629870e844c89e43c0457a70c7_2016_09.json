{
    "identifiers": [
        "Component",
        "Input",
        "Output",
        "EventEmitter",
        "ViewChild",
        "OnInit",
        "Component",
        "Input",
        "Input",
        "Input",
        "Input",
        "Input",
        "Output",
        "EventEmitter",
        "ViewChild",
        "activeSuggestionIndex",
        "activeSuggestionIndex",
        "activeSuggestionIndex",
        "activeSuggestionIndex",
        "activeSuggestionIndex",
        "activeSuggestionIndex",
        "suggestion",
        "suggestion",
        "activeSuggestionIndex",
        "activeSuggestionIndex",
        "array",
        "property",
        "value",
        "array",
        "array",
        "i",
        "array",
        "i",
        "array",
        "i",
        "property",
        "array",
        "i",
        "property",
        "value",
        "index",
        "i",
        "index",
        "suggestion",
        "suggestion",
        "suggestion",
        "suggestion",
        "searchProperty",
        "searchProperty",
        "input",
        "input",
        "item",
        "item",
        "searchProperty",
        "input",
        "suggestion",
        "suggestion",
        "suggestion",
        "suggestion",
        "suggestion"
    ],
    "literals": [
        "'@angular/core'",
        "'typeahead'",
        "<div class=\"typeahead\">\n\n      <input #inputElement\n        [placeholder]=\"placeholder\"\n        [(ngModel)]=\"input\"\n        type=\"text\"\n        [ngClass]=\"{'typeahead-input': true, 'typeahead-input-has-selection': hasSelection()}\"\n        typeahead=\"off\"\n        spellcheck=\"false\"\n        (keyup)=\"inputKeyUp($event)\"\n        (keydown)=\"inputKeyDown($event)\"\n        (focus)=\"inputFocus($event)\"\n        (blur)=\"inputBlur($event)\">\n\n      <input type=\"text\"\n        class=\"typeahead-typeahead\"\n        [(ngModel)]=\"typeahead\"\n        typeahead=\"off\"\n        spellcheck=\"false\"\n        disabled=\"true\">\n\n      <div #suggestionsContainer\n        class=\"typeahead-suggestions\"\n        [hidden]=\"!areSuggestionsVisible\">\n\n        <ul (mouseout)=\"suggestionsMouseOut($event)\">\n\n          <li *ngFor=\"let suggestion of suggestions\"\n            (mouseover)=\"suggestionMouseOver(suggestion)\"\n            (mousedown)=\"suggestionMouseDown(suggestion)\"\n            [ngClass]=\"{'typeahead-suggestion-active': activeSuggestion===suggestion}\">{{ suggestion[displayProperty] }}</li>\n\n        </ul>\n\n      </div>\n\n    </div>",
        ".typeahead {\n      position: relative;\n      width: 100%;\n      text-align: left;\n      vertical-align: top;\n      padding-bottom: 2.5em;\n    }\n\n    .typeahead-input {\n      border-color: transparent;\n      position: absolute;\n      z-index: 10;\n      background-color: transparent;\n      background-repeat: no-repeat;\n      background-position: right 10px;\n      background-size: 28px 18px;\n    }\n\n    .typeahead-input-has-selection {\n      background-color: #f5f5f5;\n      border: 1px solid #4c4845;\n      color: #008fca;\n    }\n\n    .typeahead-typeahead {\n      color: rgb(128, 128, 128);\n      position: absolute;\n      z-index: 5;\n      text-align: start;\n      background-color: rgb(255, 255, 255);\n    }\n\n    .typeahead-suggestions {\n      position: absolute;\n      top: 42px;\n      overflow-y: auto;\n      color: #666666;\n      border-radius: 3px;\n      padding: 0;\n      background-color: #f5f5f5;\n      width: 100%;\n      max-height: 18em !important;\n      border: 1px solid #e0e0e0;\n      z-index: 100;\n    }\n\n    .typeahead-suggestions ul {\n      list-style-type: none;\n      padding-left: 0;\n      margin-top: 3px;\n    }\n\n    .typeahead-suggestions ul li {\n      padding: 6px !important;\n      font-size: 0.9em;\n      border-bottom: 1px solid #e0e0e0;\n    }\n\n    .typeahead-suggestion-active {\n      background-color: #008fca;\n      color: #ffffff;\n    }",
        "string",
        "''",
        "string",
        "'name'",
        "string",
        "'name'",
        "'inputElement'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "inputKeyUp:",
        "When the input is cleared",
        "''",
        "If the suggestion matches the input, then return",
        "''",
        "'The input attribute `searchProperty` must be provided'",
        "''",
        "''",
        "''"
    ],
    "variables": [
        "activeSuggestionIndex",
        "activeSuggestionIndex",
        "activeSuggestionIndex",
        "index",
        "i",
        "searchProperty",
        "input"
    ],
    "comments": [
        "TAB",
        "Only enter this branch if suggestions are displayed",
        "Select the first suggestion",
        "Remove all but the first suggestion",
        "Hide the suggestions",
        "UP",
        "Find the active suggestion in the list",
        "If not found, then activate the first suggestion",
        "Go to the last suggestion",
        "Decrement the suggestion index",
        "DOWN",
        "Find the active suggestion in the list",
        "If not found, then activate the first suggestion",
        "Go to the first suggestion",
        "Increment the suggestion index",
        "ENTER",
        "Select the active suggestion",
        "Hide the suggestions",
        "Ignore TAB, UP, and DOWN since they are processed by the keydown handler",
        "When the input is cleared",
        "If the suggestion matches the input, then return",
        "Repopulate the suggestions",
        "If the element is receiving focus and it has a selection, then",
        "clear the selection. This helps prevent partial editing",
        "Re-populate the suggestions",
        "If we have suggestions",
        "Set the typeahead to a slice of the first suggestion",
        "Show/hide the suggestions",
        "Capture variables scoped to the component",
        "Confirm that we have a search property",
        "Handle empty input",
        "No input yet",
        "Check that we have data",
        "Filter the suggestions",
        "Limit the suggestions (if applicable)",
        "No suggestions, so clear the typeahead",
        "Set the typeahead value",
        "Make the first suggestion active",
        "Show/hide the suggestions",
        "Clear the typeahead when there is no active suggestion",
        "Set the typeahead value",
        "Set the variable",
        "Hide the suggestions",
        "Notify the parent component",
        "Other form operations",
        "Set the values of the input elements",
        "Blur the input so we can \"lock\" the selected suggestion"
    ],
    "docstrings": [
        "* The complete list of items.",
        "* Input element placeholder text.",
        "* The property of a list item that should be used for matching.",
        "* The property of a list item that should be displayed.",
        "* The maximum number of suggestions to display.",
        "* Event that occurs when a suggestion is selected.",
        "* Handle to the input element.",
        "* The input element's value.",
        "* The typeahead element's value. This element is displayed behind the input element.",
        "* The previously entered input string.",
        "* The filtered list of suggestions.",
        "* Indicates whether the suggestions are visible.",
        "* The currently selected suggestion.",
        "* The active (highlighted) suggestion.",
        "* Creates and initializes a new typeahead component.",
        "* Implement this interface to execute custom initialization logic after your\n    * directive's data-bound properties have been initialized.\n    *\n    * ngOnInit is called right after the directive's data-bound properties have\n    * been checked for the first time, and before any of its\n    * children have been checked. It is invoked only once when the directive is\n    * instantiated.",
        "* Called when a keydown event is fired on the input element.",
        "* Sets the active (highlighted) suggestion.",
        "* Gets the index of the active suggestion within the suggestions list.",
        "* Gets the index of an object in a list by matching a property value.",
        "* Called when a keyup event is fired on the input element.",
        "* Called when a focus event is fired on the input element.",
        "* Called when a blur event is fired on the input element.",
        "* Called when a mouseover event is fired on a suggestion element.",
        "* Called when a mousedown event is fired on a suggestion element.",
        "* Called when a mouseout event is fired on the suggestions element.",
        "* Fills the suggestions list with items matching the input pattern.",
        "* Sets the typeahead input element's value based on the active suggestion.",
        "* Selects a suggestion.",
        "* Blurs the input element in order to \"lock\" the value and prevent partial editing.",
        "* Indicates whether a suggestion has been selected."
    ],
    "functions": [
        "ngOnInit",
        "inputKeyDown",
        "setActiveSuggestion",
        "getActiveSuggestionIndex",
        "indexOfObject",
        "inputKeyUp",
        "inputFocus",
        "inputBlur",
        "suggestionMouseOver",
        "suggestionMouseDown",
        "suggestionsMouseOut",
        "populateSuggestions",
        "populateTypeahead",
        "selectSuggestion",
        "blurInputElement",
        "hasSelection"
    ],
    "classes": [
        "Typeahead"
    ]
}