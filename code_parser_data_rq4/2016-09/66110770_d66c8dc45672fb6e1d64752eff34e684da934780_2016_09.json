{
    "identifiers": [
        "org",
        "firstinspires",
        "ftc",
        "robotcontroller",
        "external",
        "samples",
        "com",
        "qualcomm",
        "hardware",
        "modernrobotics",
        "ModernRoboticsI2cCompassSensor",
        "com",
        "qualcomm",
        "robotcore",
        "eventloop",
        "opmode",
        "Autonomous",
        "com",
        "qualcomm",
        "robotcore",
        "eventloop",
        "opmode",
        "Disabled",
        "com",
        "qualcomm",
        "robotcore",
        "eventloop",
        "opmode",
        "LinearOpMode",
        "com",
        "qualcomm",
        "robotcore",
        "hardware",
        "CompassSensor",
        "com",
        "qualcomm",
        "robotcore",
        "util",
        "ElapsedTime",
        "org",
        "firstinspires",
        "ftc",
        "robotcore",
        "external",
        "navigation",
        "Acceleration",
        "Autonomous",
        "name",
        "group",
        "Disabled",
        "compass",
        "timer",
        "Override",
        "compass",
        "hardwareMap",
        "get",
        "telemetry",
        "log",
        "setCapacity",
        "telemetry",
        "log",
        "add",
        "telemetry",
        "log",
        "add",
        "telemetry",
        "log",
        "add",
        "telemetry",
        "log",
        "add",
        "telemetry",
        "log",
        "add",
        "telemetry",
        "log",
        "add",
        "telemetry",
        "log",
        "add",
        "telemetry",
        "log",
        "add",
        "telemetry",
        "log",
        "add",
        "waitForStart",
        "telemetry",
        "log",
        "clear",
        "opModeIsActive",
        "gamepad1",
        "a",
        "compass",
        "isCalibrating",
        "telemetry",
        "log",
        "clear",
        "telemetry",
        "log",
        "add",
        "telemetry",
        "log",
        "add",
        "telemetry",
        "log",
        "add",
        "compass",
        "setMode",
        "CompassSensor",
        "CompassMode",
        "CALIBRATION_MODE",
        "timer",
        "reset",
        "gamepad1",
        "a",
        "opModeIsActive",
        "doTelemetry",
        "idle",
        "gamepad1",
        "b",
        "compass",
        "isCalibrating",
        "telemetry",
        "log",
        "clear",
        "telemetry",
        "log",
        "add",
        "compass",
        "setMode",
        "CompassSensor",
        "CompassMode",
        "MEASUREMENT_MODE",
        "compass",
        "calibrationFailed",
        "telemetry",
        "log",
        "add",
        "compass",
        "writeCommand",
        "ModernRoboticsI2cCompassSensor",
        "Command",
        "NORMAL",
        "gamepad1",
        "a",
        "opModeIsActive",
        "doTelemetry",
        "idle",
        "doTelemetry",
        "idle",
        "compass",
        "isCalibrating",
        "telemetry",
        "addData",
        "round",
        "timer",
        "seconds",
        "telemetry",
        "addData",
        "compass",
        "getDirection",
        "accel",
        "compass",
        "getAcceleration",
        "accelMagnitude",
        "sqrt",
        "accel",
        "xAccel",
        "accel",
        "xAccel",
        "accel",
        "yAccel",
        "accel",
        "yAccel",
        "accel",
        "zAccel",
        "accel",
        "zAccel",
        "telemetry",
        "addData",
        "accel",
        "telemetry",
        "addData",
        "accelMagnitude",
        "telemetry",
        "addData",
        "compass",
        "getMagneticFlux",
        "telemetry",
        "addData",
        "compass",
        "readCommand",
        "telemetry",
        "update"
    ],
    "literals": [
        "\"Sensor: MR compass\"",
        "\"Sensor\"",
        "\"compass\"",
        "\"The compass sensor operates quite well out-of-the\"",
        "\"box, as shipped by the manufacturer. Precision can\"",
        "\"however be somewhat improved with calibration.\"",
        "\"\"",
        "\"To calibrate the compass once the opmode is\"",
        "\"started, make sure the compass is level, then\"",
        "\"press 'A' on the gamepad. Next, slowly rotate the \"",
        "\"compass in a full 360 degree circle while keeping\"",
        "\"it level. When complete, press 'B'.\"",
        "\"Calibration started\"",
        "\"Slowly rotate compass 360deg\"",
        "\"Press 'B' when complete\"",
        "\"Calibration complete\"",
        "\"Calibration failed\"",
        "\"compass\"",
        "\"calibrating %s\"",
        "\"|..\"",
        "\"..|\"",
        "\"heading\"",
        "\"%.1f\"",
        "\"accel\"",
        "\"accel magnitude\"",
        "\"%.3f\"",
        "\"mag flux\"",
        "\"command\"",
        "\"%s\""
    ],
    "variables": [
        "compass"
    ],
    "comments": [
        "comment out or remove this line to enable this opmode",
        "get a reference to our compass",
        "wait for the start button to be pressed",
        "If the A button is pressed, start calibration and wait for the A button to rise",
        "If the B button is pressed, stop calibration and wait for the B button to rise",
        "Always call idle() at the bottom of your while(opModeIsActive()) loop",
        "getDirection() returns a traditional compass heading in the range [0,360),",
        "with values increasing in a CW direction",
        "getAcceleration() returns the current 3D acceleration experienced by",
        "the sensor. This is used internally to the sensor to compute its tilt and thence",
        "to correct the magnetometer reading to produce tilt-corrected values in getDirection()",
        "getMagneticFlux returns the 3D magnetic field flux experienced by the sensor",
        "the command register provides status data"
    ],
    "docstrings": [
        "Copyright (c) 2016 Robert Atkinson\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted (subject to the limitations in the disclaimer below) provided that\nthe following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list\nof conditions and the following disclaimer.\n\nRedistributions in binary form must reproduce the above copyright notice, this\nlist of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\nNeither the name of Robert Atkinson nor the names of his contributors may be used to\nendorse or promote products derived from this software without specific prior\nwritten permission.\n\nNO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS\nLICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESSFOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\nTORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "* The {@link SensorMRCompass} op mode provides a demonstration of the\n * functionality provided by the Modern Robotics compass sensor.\n *\n * The op mode assumes that the MR compass is configured with a name of \"compass\".\n *\n * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.\n * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list\n *\n * @see <a href=\"http://www.modernroboticsinc.com/compass\">MR Compass Sensor</a>"
    ],
    "functions": [
        "runOpMode",
        "doTelemetry"
    ],
    "classes": [
        "SensorMRCompass"
    ]
}