{
    "identifiers": [
        "weesner",
        "taxfetcher",
        "android",
        "content",
        "Context",
        "org",
        "json",
        "JSONArray",
        "org",
        "json",
        "JSONException",
        "org",
        "json",
        "JSONObject",
        "java",
        "io",
        "BufferedReader",
        "java",
        "io",
        "java",
        "io",
        "InputStreamReader",
        "MEDICARE",
        "SOCIAL_SECURITY",
        "ALLOWANCES",
        "FEDERAL_INCOME_TAX",
        "PERIOD_TYPE_WEEKLY",
        "PERIOD_TYPE_BIWEEKLY",
        "PERIOD_TYPE_SEMIMONTHLY",
        "PERIOD_TYPE_MONTHLY",
        "PERIOD_TYPE_QUARTERLY",
        "PERIOD_TYPE_SEMIANNUAL",
        "PERIOD_TYPE_ANNUAL",
        "PERIOD_TYPE_DAILY",
        "MARITAL_STATUS_SINGLE",
        "MARITAL_STATUS_MARRIED",
        "context",
        "fileToLoad",
        "sb",
        "br",
        "context",
        "getResources",
        "getAssets",
        "open",
        "fileToLoad",
        "temp",
        "temp",
        "br",
        "readLine",
        "sb",
        "append",
        "temp",
        "br",
        "close",
        "e",
        "e",
        "printStackTrace",
        "sb",
        "toString",
        "context",
        "year",
        "ficaValue",
        "equals",
        "MEDICARE",
        "equals",
        "SOCIAL_SECURITY",
        "ficaObject",
        "loadJSONFromAsset",
        "context",
        "ficaItems",
        "ficaObject",
        "getJSONArray",
        "i",
        "i",
        "ficaItems",
        "length",
        "i",
        "ficaItems",
        "get",
        "i",
        "equals",
        "year",
        "ficaValue",
        "ficaItems",
        "getDouble",
        "i",
        "e",
        "e",
        "printStackTrace",
        "MEDICARE",
        "SOCIAL_SECURITY",
        "ficaValue",
        "context",
        "year",
        "getFica",
        "context",
        "MEDICARE",
        "year",
        "context",
        "year",
        "getMedicare",
        "context",
        "valueOf",
        "year",
        "context",
        "year",
        "getFica",
        "context",
        "SOCIAL_SECURITY",
        "year",
        "context",
        "year",
        "getSocialSecurity",
        "context",
        "valueOf",
        "year",
        "context",
        "periodType",
        "year",
        "allowanceCost",
        "periodType",
        "equals",
        "PERIOD_TYPE_WEEKLY",
        "periodType",
        "equals",
        "PERIOD_TYPE_BIWEEKLY",
        "periodType",
        "equals",
        "PERIOD_TYPE_SEMIMONTHLY",
        "periodType",
        "equals",
        "PERIOD_TYPE_MONTHLY",
        "periodType",
        "equals",
        "PERIOD_TYPE_QUARTERLY",
        "periodType",
        "equals",
        "PERIOD_TYPE_SEMIANNUAL",
        "periodType",
        "equals",
        "PERIOD_TYPE_ANNUAL",
        "periodType",
        "equals",
        "PERIOD_TYPE_DAILY",
        "allowancesObject",
        "loadJSONFromAsset",
        "context",
        "ALLOWANCES",
        "allowanceItems",
        "allowancesObject",
        "getJSONArray",
        "ALLOWANCES",
        "i",
        "i",
        "allowanceItems",
        "length",
        "i",
        "allowanceItems",
        "get",
        "i",
        "equals",
        "year",
        "allowanceTypes",
        "allowanceItems",
        "getJSONArray",
        "i",
        "j",
        "j",
        "allowanceTypes",
        "length",
        "j",
        "allowanceTypes",
        "get",
        "j",
        "equals",
        "periodType",
        "allowanceCost",
        "allowanceTypes",
        "getDouble",
        "j",
        "e",
        "e",
        "printStackTrace",
        "allowanceCost",
        "context",
        "periodType",
        "year",
        "getAllowanceCost",
        "context",
        "periodType",
        "valueOf",
        "year",
        "context",
        "periodType",
        "allowances",
        "year",
        "allowances",
        "getAllowanceCost",
        "context",
        "periodType",
        "year",
        "allowances",
        "context",
        "checkAmount",
        "maritalStatus",
        "periodType",
        "allowances",
        "year",
        "fitCost",
        "canBeTaxed",
        "checkAmount",
        "getTotalAllowancesCost",
        "context",
        "periodType",
        "allowances",
        "year",
        "federalIncomeTaxObject",
        "loadJSONFromAsset",
        "context",
        "FEDERAL_INCOME_TAX",
        "fitItems",
        "federalIncomeTaxObject",
        "getJSONArray",
        "FEDERAL_INCOME_TAX",
        "i",
        "i",
        "fitItems",
        "length",
        "i",
        "fitItems",
        "get",
        "i",
        "equals",
        "year",
        "fitYearItems",
        "fitItems",
        "getJSONArray",
        "i",
        "j",
        "j",
        "fitYearItems",
        "length",
        "j",
        "fitYearItems",
        "get",
        "j",
        "equals",
        "periodType",
        "maritalStatus",
        "needValue",
        "k",
        "k",
        "fitYearItems",
        "length",
        "k",
        "canBeTaxed",
        "stringToDouble",
        "fitYearItems",
        "getString",
        "j",
        "needValue",
        "needValue",
        "fitQualifiers",
        "fitYearItems",
        "getJSONObject",
        "j",
        "plus",
        "fitQualifiers",
        "getDouble",
        "percent",
        "fitQualifiers",
        "getDouble",
        "withheld",
        "fitQualifiers",
        "getDouble",
        "fitCost",
        "plus",
        "percent",
        "canBeTaxed",
        "withheld",
        "nfe",
        "needValue",
        "needValue",
        "nfe",
        "getMessage",
        "equals",
        "fitQualifiers",
        "fitYearItems",
        "getJSONObject",
        "j",
        "plus",
        "fitQualifiers",
        "getDouble",
        "percent",
        "fitQualifiers",
        "getDouble",
        "withheld",
        "fitQualifiers",
        "getDouble",
        "fitCost",
        "plus",
        "percent",
        "canBeTaxed",
        "withheld",
        "e",
        "e",
        "printStackTrace",
        "fitCost",
        "value",
        "value",
        "contains",
        "value",
        "value",
        "replace",
        "parseDouble",
        "value",
        "parseDouble",
        "value"
    ],
    "literals": [
        "\"medicare\"",
        "\"socialSecurity\"",
        "\"allowances\"",
        "\"federalIncomeTax\"",
        "\"Weekly\"",
        "\"Biweekly\"",
        "\"Semimonthly\"",
        "\"Monthly\"",
        "\"Quarterly\"",
        "\"Semiannual\"",
        "\"Annual\"",
        "\"Daily\"",
        "\"Single\"",
        "\"Married\"",
        "\".json\"",
        "\"Invalid type. Type can only be: \"",
        "\" or \"",
        "\".json\"",
        "\"Period Type must be equal to one of the English constants provided starting with PERIOD_TYPE_ eg: PERIOD_TYPE_WEEKLY\"",
        "\"The amount of allowances cannot exceed 10\"",
        "\".json\"",
        "\"_\"",
        "\"plus\"",
        "\"percent\"",
        "\"withheld\"",
        "\"Invalid double: \\\"max\\\"\"",
        "\"plus\"",
        "\"percent\"",
        "\"withheld\"",
        "\",\"",
        "\",\"",
        "\".\""
    ],
    "variables": [
        "temp"
    ],
    "comments": [
        "the file names in assets folder to be used in retrieving values",
        "English constants for retrieving allowances",
        "constants for married and single for"
    ],
    "docstrings": [
        "* Created by alwee on 9/26/2016.",
        "* A helper function to retrieve the JSON file from the assets folder\n     *\n     * @param context    used to retrieve resources from the assets folder\n     * @param fileToLoad name of the JSON file to read from\n     * @return the string that is to be passed into the JSONObject",
        "* function to get Social Security and Medicare tax .json files\n     *\n     * @param context used to retrieve resources from the assets folder\n     * @param type    which file to load use MEDICARE or SOCIAL_SECURITY constants, or it will throw an error\n     * @param year    has to be 4 digit format eg: 2016\n     * @return the percentage of the fica tax taken out of ones check",
        "* helper function to get medicare.json using only year qualifier\n     *\n     * @param context used to retrieve resources from the assets folder\n     * @param year    has to be 4 digit format eg: 2016\n     * @return the percentage of ones check that is taken out by medicare",
        "* helper function to get medicare.json using only year qualifier\n     *\n     * @param context used to retrieve resources from the assets folder\n     * @param year    has to be 4 digit format eg: 2016\n     * @return the percentage of ones check that is taken out by medicare",
        "* helper function to get socialSecurity.json using only year qualifier\n     *\n     * @param context used to retrieve resources from the assets folder\n     * @param year    has to be 4 digit format eg: 2016\n     * @return the percentage of ones check that is taken out by social security",
        "* helper function to get socialSecurity.json using only year qualifier\n     *\n     * @param context used to retrieve resources from the assets folder\n     * @param year    has to be 4 digit format eg: 2016\n     * @return the percentage of ones check that is taken out by social security",
        "* function to get how much each allowance will cost based on periodType and year\n     *\n     * @param context    used to retrieve resources from the assets folder\n     * @param periodType needs to be equal to one of the English constant provided starting with PERIOD_TYPE_\n     * @param year       has to be 4 digit format eg: 2016\n     * @return the cost of each allowance",
        "* function to get how much each allowance will cost based on periodType and year\n     *\n     * @param context    used to retrieve resources from the assets folder\n     * @param periodType needs to be an English constant provided starting with PERIOD_TYPE_\n     * @param year       has to be 4 digit format eg: 2016\n     * @return the cost of each allowance",
        "* function that gets the total cost of all ones allowances\n     *\n     * @param context    used to retrieve resources from the assets folder\n     * @param periodType needs to be an English constant provided starting with PERIOD_TYPE_\n     * @param allowances amount of allowances one has entered, can be 0 - 10 any other number will throw error\n     * @param year       has to be 4 digit format eg: 2016\n     * @return total cost of all allowances",
        "* function to get the amount of Federal Income Tax to be taken out of ones check\n     *\n     * @param context       used to retrieve resources from the assets folder\n     * @param checkAmount   the gross amount to figure out how much Federal Income Tax will be taken out\n     * @param maritalStatus ones marital status needs to be equal to one of the constants starting with MARITAL_STATUS_\n     * @param periodType    needs to be an English constant provided starting with PERIOD_TYPE_\n     * @param allowances    amount of allowances one has entered, can be 0 - 10 any other number will throw error\n     * @param year          has to be 4 digit format eg: 2016\n     * @return the amount of Federal Income Tax"
    ],
    "functions": [
        "JSONObject",
        "loadJSONFromAsset",
        "getFica",
        "getMedicare",
        "getMedicare",
        "getSocialSecurity",
        "getSocialSecurity",
        "getAllowanceCost",
        "getAllowanceCost",
        "getTotalAllowancesCost",
        "getFederalIncomeTax",
        "stringToDouble"
    ],
    "classes": [
        "Utility"
    ]
}