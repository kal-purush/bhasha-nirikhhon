{
    "identifiers": [
        "urllib",
        "cgi",
        "sys",
        "getopt",
        "os",
        "http",
        "server",
        "BaseHTTPRequestHandler",
        "HTTPServer",
        "BaseHTTPRequestHandler",
        "format",
        "headers",
        "path",
        "path",
        "rpath",
        "split",
        "rpath",
        "split",
        "os",
        "path",
        "abspath",
        "rpath",
        "os",
        "path",
        "join",
        "apath",
        "rfile",
        "os",
        "path",
        "join",
        "apath",
        "rfileXml",
        "os",
        "path",
        "isfile",
        "fpath",
        "send_response",
        "send_header",
        "path",
        "send_header",
        "path",
        "send_header",
        "end_headers",
        "open",
        "fpath",
        "wfile",
        "write",
        "f",
        "read",
        "encode",
        "f",
        "close",
        "os",
        "path",
        "isfile",
        "fpathxml",
        "send_response",
        "send_header",
        "end_headers",
        "open",
        "fpathxml",
        "wfile",
        "write",
        "f",
        "read",
        "encode",
        "f",
        "close",
        "send_response",
        "end_headers",
        "format",
        "headers",
        "headers",
        "headers",
        "rfile",
        "read",
        "len",
        "format",
        "dataa",
        "send_response",
        "end_headers",
        "format",
        "headers",
        "headers",
        "headers",
        "rfile",
        "read",
        "len",
        "format",
        "dataa",
        "send_response",
        "end_headers",
        "format",
        "headers",
        "headers",
        "headers",
        "rfile",
        "read",
        "len",
        "format",
        "dataa",
        "send_response",
        "end_headers",
        "path",
        "path",
        "split",
        "path",
        "split",
        "posixpath",
        "normpath",
        "urllib",
        "unquote",
        "path",
        "path",
        "split",
        "words",
        "os",
        "getcwd",
        "word",
        "words",
        "os",
        "path",
        "splitdrive",
        "word",
        "os",
        "path",
        "split",
        "word",
        "word",
        "os",
        "curdir",
        "os",
        "pardir",
        "os",
        "path",
        "join",
        "path",
        "word",
        "path",
        "program",
        "format",
        "program",
        "argv",
        "argv",
        "program",
        "getopt",
        "getopt",
        "argv",
        "getopt",
        "GetoptError",
        "err",
        "err",
        "usage",
        "sys",
        "exit",
        "opt",
        "arg",
        "opts",
        "opt",
        "usage",
        "program",
        "sys",
        "exit",
        "opt",
        "opt",
        "arg",
        "opt",
        "arg",
        "sys",
        "exit",
        "program",
        "hostname",
        "port",
        "HTTPServer",
        "hostname",
        "port",
        "RfMockupServer",
        "port",
        "myServer",
        "serve_forever",
        "KeyboardInterupt",
        "myServer",
        "server_close",
        "main",
        "sys",
        "argv"
    ],
    "literals": [
        "\"RedfishMockupHTTPD_v0.9.1\"",
        "\"   GET: Headers: {}\"",
        "\"index.json\"",
        "\"index.xml\"",
        "'/'",
        "'?'",
        "'#'",
        "\"Content-type\"",
        "\"application/json\"",
        "\"/redfish/v1/Systems/1\"",
        "\"Etag\"",
        "\"W/\\\"12345\\\"\"",
        "\"/redfish/v1/AccountService/Accounts/1\"",
        "\"Etag\"",
        "\"W/\\\"123456\\\"\"",
        "\"r\"",
        "\"Content-type\"",
        "\"application/xml\"",
        "\"r\"",
        "\"   PATCH: Headers: {}\"",
        "\"content-length\"",
        "\"content-length\"",
        "\"   PATCH: Data: {}\"",
        "\"   POST: Headers: {}\"",
        "\"content-length\"",
        "\"content-length\"",
        "\"   POST: Data: {}\"",
        "\"DELETE: Headers: {}\"",
        "\"content-length\"",
        "\"content-length\"",
        "\"DELETE: Data: {}\"",
        "'?'",
        "'#'",
        "'/'",
        "\"usage: {}   [-h][-P][-H <hostIpAddr>:<port>]\"",
        "\"      -h --help      # prints usage \"",
        "\"      -L --Load      # <not implemented yet>: load and Dump json read from mockup in pretty format with indent=4\"",
        "\"      -H <IpAddr>   --Host=<IpAddr>    # hostIP, default: 127.0.0.1\"",
        "\"      -P <port>     --Port=<port>      # port:  default is 8000\"",
        "\"   by default, service runs on 127.0.0.1:8000, using raw JSON response from mockup\"",
        "\"127.0.0.1\"",
        "\"hLH:P:\"",
        "\"help\"",
        "\"Load\"",
        "\"Host=\"",
        "\"Port=\"",
        "\"-h\"",
        "\"--help\"",
        "\"L\"",
        "\"--Load\"",
        "\"-H\"",
        "\"--Host\"",
        "\"-P\"",
        "\"--Port\"",
        "'unhandled option'",
        "'program: '",
        "'Hostname:'",
        "'Port:'",
        "'Serving Redfish mockup on port:'",
        "\"Shutting down http server\"",
        "\"__main__\""
    ],
    "variables": [
        "server_version",
        "rfile",
        "rfileXml",
        "f",
        "rpath",
        "rpath",
        "rpath",
        "apath",
        "fpath",
        "fpathxml",
        "f",
        "f",
        "len",
        "dataa",
        "len",
        "dataa",
        "len",
        "dataa",
        "path",
        "path",
        "path",
        "words",
        "words",
        "path",
        "drive",
        "word",
        "head",
        "word",
        "path",
        "hostname",
        "port",
        "load",
        "program",
        "opts",
        "args",
        "load",
        "hostname",
        "port",
        "myServer"
    ],
    "comments": [
        "Copyright Notice:",
        "Copyright 2016 Distributed Management Task Force, Inc. All rights reserved.",
        "License: BSD 3-Clause License. For full text see link: https://github.com/DMTF/Redfish-Tools/LICENSE.md",
        "redfishMockupServer.py",
        "v0.9.1",
        "tested and developed Python 3.4",
        "for GETs always dump the request headers to the console",
        "there is no request data, so no need to dump that",
        "xpath = self.translate_path(self.path)",
        "print(\"filepath:{}\".format(fpath))",
        "special cases to test etag for testing",
        "if etag is returned then the patch to these resource should include this etag",
        "Deletes don't have data, so this doesnt execute",
        "this is currently not used",
        "abandon query parameters",
        "usage()",
        "the below is only executed if the program is run as a script"
    ],
    "docstrings": [
        "'''\n        returns index.json file for Serverthe specified URL\n        '''",
        "\"\"\"\n                Translate a /-separated PATH to the local filename syntax.\n                Components that mean special things to the local file system\n                (e.g. drive or directory names) are ignored.  (XXX They should\n                probably be diagnosed.)\n                \"\"\"",
        "'''\nTODO:\n1. add -L option to load json and dump output from python dictionary\n2. add authentication support -- note that in redfish some api don't require auth\n3. add https support\n\n\n'''"
    ],
    "functions": [
        "do_GET",
        "do_PATCH",
        "do_POST",
        "do_DELETE",
        "translate_path",
        "usage",
        "main"
    ],
    "classes": [
        "RfMockupServer"
    ]
}