{
    "identifiers": [
        "Superpower",
        "Model",
        "Superpower",
        "Util",
        "Linq",
        "Superpower",
        "Parsers",
        "CharParser",
        "Func",
        "predicate",
        "expectations",
        "predicate",
        "ArgumentNullException",
        "nameof",
        "predicate",
        "expectations",
        "ArgumentNullException",
        "nameof",
        "expectations",
        "input",
        "ConsumeChar",
        "next",
        "HasValue",
        "predicate",
        "next",
        "Value",
        "CharResult",
        "Empty",
        "input",
        "expectations",
        "next",
        "CharParser",
        "Func",
        "predicate",
        "name",
        "predicate",
        "ArgumentNullException",
        "nameof",
        "predicate",
        "name",
        "ArgumentNullException",
        "nameof",
        "name",
        "Matching",
        "predicate",
        "name",
        "CharParser",
        "Func",
        "predicate",
        "description",
        "predicate",
        "ArgumentNullException",
        "nameof",
        "predicate",
        "description",
        "ArgumentNullException",
        "nameof",
        "description",
        "Matching",
        "predicate",
        "c",
        "description",
        "CharParser",
        "ch",
        "Matching",
        "parsed",
        "ch",
        "Presentation",
        "FormatCharacter",
        "ch",
        "CharParser",
        "chars",
        "Matching",
        "chars",
        "Contains",
        "chars",
        "Select",
        "Presentation",
        "FormatCharacter",
        "ToArray",
        "CharParser",
        "ch",
        "Except",
        "parsed",
        "ch",
        "Presentation",
        "FormatCharacter",
        "ch",
        "CharParser",
        "chars",
        "Matching",
        "chars",
        "Contains",
        "c",
        "Presentation",
        "chars",
        "Select",
        "Presentation",
        "FormatCharacter",
        "CharParser",
        "Matching",
        "CharParser",
        "Matching",
        "IsWhiteSpace",
        "CharParser",
        "Matching",
        "IsDigit",
        "CharParser",
        "Matching",
        "IsLetter",
        "CharParser",
        "Matching",
        "IsLetterOrDigit",
        "CharParser",
        "Matching",
        "IsLower",
        "CharParser",
        "Matching",
        "IsUpper",
        "CharParser",
        "Matching",
        "IsNumber"
    ],
    "literals": [
        "\"any character except \"",
        "\"any character except \"",
        "\"any character\"",
        "\"whitespace\"",
        "\"digit\"",
        "\"letter\"",
        "\"letter\"",
        "\"digit\"",
        "\"lowercase letter\"",
        "\"uppercase letter\"",
        "\"numeric character\""
    ],
    "variables": [
        "next",
        "AnyChar",
        "WhiteSpace",
        "Digit",
        "Letter",
        "LetterOrDigit",
        "Lower",
        "Upper",
        "Numeric"
    ],
    "comments": [
        "Parse a single character matching <paramref name=\"predicate\"/>.",
        "</summary>",
        "Parse a single character except those matching <paramref name=\"predicate\"/>.",
        "</summary>",
        "<param name=\"predicate\">Characters not to match.</param>",
        "<param name=\"description\">Description of characters that don't match.</param>",
        "<returns>A parser for characters except those matching <paramref name=\"predicate\"/>.</returns>",
        "Parse a single specified character.",
        "</summary>",
        "Parse any single character in <paramref name=\"chars\"/>.",
        "</summary>",
        "Parse a single character except <paramref name=\"ch\"/>.",
        "</summary>",
        "Parse any single character except those in <paramref name=\"chars\"/>.",
        "</summary>",
        "Parse any character.",
        "</summary>",
        "Parse a whitespace character.",
        "</summary>",
        "Parse a digit.",
        "</summary>",
        "Parse a letter.",
        "</summary>",
        "Parse a letter or digit.",
        "</summary>",
        "Parse a lowercase letter.",
        "</summary>",
        "Parse an uppercase letter.",
        "</summary>",
        "Parse a numeric character.",
        "</summary>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "Matching",
        "Matching",
        "Except",
        "EqualTo",
        "In",
        "Except",
        "ExceptIn"
    ],
    "classes": []
}