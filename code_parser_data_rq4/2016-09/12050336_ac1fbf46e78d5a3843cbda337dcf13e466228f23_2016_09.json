{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Text",
        "Threading",
        "Tasks",
        "DBreeze",
        "DBreeze",
        "Utils",
        "DBreeze",
        "DataTypes",
        "DBreeze",
        "DataStructures",
        "externalId",
        "externalId",
        "externalId",
        "T",
        "DataTypesConvertor",
        "ConvertBack",
        "T",
        "externalId",
        "internalId",
        "internalId",
        "T",
        "T",
        "content",
        "DataTypesConvertor",
        "ConvertValue",
        "T",
        "content",
        "c",
        "_ByteArrayEquals",
        "content",
        "content",
        "c",
        "contentWasModified",
        "T",
        "DataTypesConvertor",
        "ConvertBack",
        "T",
        "content",
        "DGNode",
        "DGNode",
        "graph",
        "CheckGraph",
        "graph",
        "AddNode",
        "DGNode",
        "kidNodes",
        "LinksKids",
        "AddRange",
        "kidNodes",
        "DGNode",
        "T",
        "T",
        "externalId",
        "AsReadVisibilityScope",
        "internalId",
        "CheckGraph",
        "externalId",
        "DataTypesConvertor",
        "ConvertKey",
        "T",
        "externalId",
        "ConcatMany",
        "internalId",
        "To_4_bytes_array_BigEndian",
        "btExId",
        "DBreeze",
        "DataTypes",
        "Row",
        "n",
        "graph",
        "tran",
        "SelectForwardStartFrom",
        "graph",
        "tableName",
        "key",
        "AsReadVisibilityScope",
        "key",
        "Substring",
        "key",
        "Length",
        "_ByteArrayEquals",
        "n",
        "Key",
        "Substring",
        "key",
        "Length",
        "node",
        "DGNode",
        "btExId",
        "content",
        "n",
        "Value",
        "graph",
        "graph",
        "internalId",
        "n",
        "Key",
        "Substring",
        "key",
        "Length",
        "To_UInt32_BigEndian",
        "key1",
        "ConcatMany",
        "btExId",
        "node",
        "internalId",
        "To_4_bytes_array_BigEndian",
        "row",
        "graph",
        "tran",
        "Select",
        "graph",
        "tableName",
        "key1",
        "node",
        "content",
        "row",
        "Value",
        "node",
        "DGNode",
        "T",
        "T",
        "externalId",
        "AsReadVisibilityScope",
        "internalId",
        "CheckGraph",
        "externalId",
        "DataTypesConvertor",
        "ConvertKey",
        "T",
        "externalId",
        "ConcatMany",
        "internalId",
        "To_4_bytes_array_BigEndian",
        "btExId",
        "DBreeze",
        "DataTypes",
        "Row",
        "n",
        "graph",
        "tran",
        "SelectForwardStartFrom",
        "graph",
        "tableName",
        "key",
        "AsReadVisibilityScope",
        "key",
        "Substring",
        "key",
        "Length",
        "_ByteArrayEquals",
        "n",
        "Key",
        "Substring",
        "key",
        "Length",
        "node",
        "DGNode",
        "btExId",
        "content",
        "n",
        "Value",
        "graph",
        "graph",
        "internalId",
        "n",
        "Key",
        "Substring",
        "key",
        "Length",
        "To_UInt32_BigEndian",
        "key1",
        "ConcatMany",
        "btExId",
        "node",
        "internalId",
        "To_4_bytes_array_BigEndian",
        "row",
        "graph",
        "tran",
        "Select",
        "graph",
        "tableName",
        "key1",
        "node",
        "content",
        "row",
        "Value",
        "node"
    ],
    "literals": [
        "\"Node must be returned by DGraph instance\"",
        "\"Searched ID can't be null\"",
        "\"Searched ID can't be null\""
    ],
    "variables": [
        "internalId",
        "DGraph",
        "graph",
        "externalId",
        "InternalId",
        "Exists",
        "content",
        "contentWasModified",
        "c",
        "LinksKids",
        "btExId",
        "key",
        "key1",
        "row",
        "DGNode",
        "node",
        "btExId",
        "key",
        "key1",
        "row",
        "DGNode",
        "node"
    ],
    "comments": [
        "Copyright (C) 2012 dbreeze.tiesky.com / Alex Solovyov / Ivars Sudmalis.\n  It's a free software for those, who think that it should be free.",
        "DBreeze Graph Node",
        "</summary>",
        "Graph table must by Synced \n\n\n            Node:\n            1 + externalId + internalID(for group parent is needed) (or externalID becomes automatically internal ID if empty) in value content (IF IT MUST BE UNIQUE among nodes), \n                //like \"Vegetables\" or \"tro158po\".TOByte + DateTime...\n            //2 + internalID in value content\n\n            NodeGroup (we need group, because it can have non-unique name among nodes-namespace)\n            10 + Node(parent)InternalId + GroupExternalID \n                    (may be not unique, like \"Vegetables\": Masha(Node).Vegetables(group),Misha(unique node name).Vegetables)+internalID\n            \n            InternalID = 0 means GroupNode has no parent\n\n            GroupLinkToNode\n            10 + GroupInternalID + { (Link2Node)[1 + externalId + internalID] || (Link2Group)[10+] }\n\n            Scenarios:\n            - GetRootGroupNode.GetNodeByExternalID.GetGroupByExternalID.GetAnyLinkByExternalId Select+Forward+Backward possibilities\n            - GetNodeByExternalID.GetGroupByExternalID.GetAnyLinkByExternalId Select+Forward+Backward possibilities\n\n\n\n            InternalNodeId is uint 4bytes\n            Protocol 1 byte\n            0 - internal nodes ID counter\n            1 - node externalID (byte[]) + internalID (uint) - (binding between externalID and internalID) - HERE also content\n            2??? - node internalID (uint) + externalID (byte[]) - (binding between internalID and externalID)             \n\n            3 - internalID (Parent)(uint)+internalID(or better externalID(!null)+internalID) (Kid)(uint) - get all kid (referencing) nodes *-->\n            4 - internalID (Node)(uint)+internalID(Parent)(uint) - get all parent (referenced by) nodes *<--\n\n            5? - internalID (Node)(uint) + uint - referencing quantity\n            6? - internalID (Node)(uint) + uint - referenced by quantity\n\n               \n            -> no need (3,4 is enough + SelectStartFrom and stopping when comparing Key not equal to internalID) 7 - ONLY IF EXIST KID's externalID -> internalID (Parent)(uint)+externalID (if exist) internalID(for uniqness) (Kid)(uint) - get all kid (referencing) nodes *-->\n                Searching Kids(Links) of that node by ExternalId\n            -> no need 7???we got such 2 internal+external -> GetPeople->GetVasya, Vasya can be many times under different \n\n            Scenario_\n                1.GetNode(People).Get(\"Vasya\")  - IEnum - external ID's must not be unique\n                2. GetNode(Vasya) - IEnum \n\n            Notes:\n                - ExternalID can't be null\n                - ExternalID can'T be renamed\n                \n\n         Node links? From-To-Both\n         Node ID(int,uint,long,ulong,short,ushort,byte[]), Name\n         Node Content\n\n        Node with BiggestQuantity of links\n        Node with SmallestQuantity of links\n         ---------------\n\n        Node asks to see all kids\n        Node asks to see all parental links\n        (Both are together)\n\n            Search by Id, Name\n            Get, remove services\n            voids may return ID's",
        "if (externalId == null)",
        "throw new Exception(\"ExternalID of DGNode can't be null in constructor\");",
        "Internally setup only. 0 - no ID",
        "</summary>",
        "Will be instatiated internally",
        "</summary>",
        "If externalId was modified after internal setup, becomes true, helping to avoid unnecessary checks and inserts concerning externalID",
        "</summary>",
        "bool externalIdWasModified = false;",
        "",
        "</summary>",
        "<typeparam name=\"T\"></typeparam>",
        "<returns></returns>",
        "Internal ID uint, is set automatically from the system, 0 - not assigned",
        "</summary>",
        "Indicates that node once was saved to db",
        "</summary>",
        "Any content bound to node from outside",
        "</summary>",
        "public byte[] Content",
        "{",
        "get",
        "{",
        "return content;",
        "}",
        "set",
        "{",
        "if (content._ByteArrayEquals(value))",
        "return;",
        "content = value;",
        "contentWasModified = true;",
        "}",
        "}",
        "Sets content and returns this node back",
        "</summary>",
        "<typeparam name=\"T\"></typeparam>",
        "<param name=\"content\"></param>",
        "<returns></returns>",
        "Returns content back",
        "</summary>",
        "<typeparam name=\"T\"></typeparam>",
        "<returns></returns>",
        "Will create connection to from the Node to Kids",
        "</summary>",
        "Performs correspondent Inserts into DBreeze table",
        "</summary>",
        "Adds referencing links, parents can be added only as a kid of a parent node.",
        "</summary>",
        "<param name=\"kidNodes\"></param>",
        "<returns></returns>",
        "",
        "</summary>",
        "<typeparam name=\"T\"></typeparam>",
        "<param name=\"externalId\"></param>",
        "<param name=\"AsReadVisibilityScope\"></param>",
        "<returns></returns>",
        "Not existing in DB node",
        "",
        "</summary>",
        "<typeparam name=\"T\"></typeparam>",
        "<param name=\"externalId\"></param>",
        "<param name=\"AsReadVisibilityScope\"></param>",
        "<returns></returns>",
        "Not existing in DB node",
        "if (n.Key.Length <= 5) //1 - protocol + 4 bytes internalID",
        "{",
        "break;",
        "}",
        "else",
        "",
        "</summary>",
        "<typeparam name=\"T\"></typeparam>",
        "<param name=\"startExternalId\"></param>",
        "<param name=\"includeStartKey\"></param>",
        "<param name=\"stopExternalId\"></param>",
        "<param name=\"includeStopKey\"></param>",
        "<param name=\"AsReadVisibilityScope\"></param>",
        "<returns></returns>",
        "public IEnumerable<DGNode> GetKidsForwardFromTo<T>(T startExternalId, bool includeStartKey, T stopExternalId, bool includeStopKey, bool AsReadVisibilityScope = false)",
        "{",
        "if (this.internalId == 0)   //Not existing in DB node",
        "yield return null;",
        "CheckGraph();",
        "if (externalId == null)",
        "throw new Exception(\"Searched ID can't be null\");",
        "byte[] btStartExId = DataTypesConvertor.ConvertKey<T>(startExternalId);",
        "byte[] btStopExId = DataTypesConvertor.ConvertKey<T>(stopExternalId);",
        "byte[] keyA = new byte[] { 3 }.ConcatMany(this.internalId.To_4_bytes_array_BigEndian(), btStartExId);",
        "byte[] keyZ = new byte[] { 3 }.ConcatMany(this.internalId.To_4_bytes_array_BigEndian(), btStopExId);",
        "byte[] key1 = null;",
        "DBreeze.DataTypes.Row<byte[], byte[]> row = null;",
        "DGNode node = null;",
        "foreach (var n in this.graph.tran.SelectForwardFromTo<byte[], byte[]>(this.graph.tableName, keyA, includeStartKey, keyZ, includeStopKey, AsReadVisibilityScope))",
        "{",
        "if (!key.Substring(0, key.Length)._ByteArrayEquals(n.Key.Substring(0, key.Length)))",
        "{",
        "break;",
        "}",
        "else",
        "{",
        "node = new DGNode(btExId) { content = n.Value, graph = this.graph, internalId = n.Key.Substring(key.Length).To_UInt32_BigEndian() };",
        "key1 = new byte[] { 1 }.ConcatMany(btExId, node.internalId.To_4_bytes_array_BigEndian());",
        "row = this.graph.tran.Select<byte[], byte[]>(this.graph.tableName, key1, true);",
        "node.content = row.Value;",
        "yield return node;",
        "}",
        "}",
        "}",
        "eoc"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "DGNode",
        "T",
        "ExternalId",
        "DGNode",
        "SetContent",
        "T",
        "GetContent",
        "CheckGraph",
        "Update",
        "DGNode",
        "AddKids",
        "GetKid",
        "GetParent"
    ],
    "classes": [
        "DGNode"
    ]
}