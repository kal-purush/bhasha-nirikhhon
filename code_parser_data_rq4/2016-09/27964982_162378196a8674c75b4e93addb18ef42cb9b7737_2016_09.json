{
    "identifiers": [
        "argparse",
        "subprocess",
        "math",
        "sys",
        "ALL",
        "ALL",
        "ALL",
        "BOUNCE_ALIGNMENTS",
        "SINGLE_BUFFER_ALIGNMENTS",
        "SINGLE_BUFFER_ALIGNMENTS",
        "SINGLE_BUFFER_ALIGNMENTS",
        "SINGLE_BUFFER_ALIGNMENTS",
        "DUAL_BUFFER_ALIGNMENTS",
        "DUAL_BUFFER_ALIGNMENTS",
        "DUAL_BUFFER_ALIGNMENTS",
        "DUAL_BUFFER_ALIGNMENTS",
        "sorted",
        "HAS",
        "keys",
        "sorted",
        "ALIGNMENTS",
        "keys",
        "cache",
        "variant",
        "loops",
        "alignment",
        "run_id",
        "quiet",
        "join",
        "x",
        "x",
        "variant",
        "loops",
        "alignment",
        "run_id",
        "key",
        "cache",
        "cache",
        "key",
        "build",
        "locals",
        "subprocess",
        "check_output",
        "cmd",
        "split",
        "strip",
        "OSError",
        "ex",
        "ex",
        "cmd",
        "got",
        "split",
        "parts",
        "got",
        "quiet",
        "got",
        "sys",
        "stdout",
        "flush",
        "took",
        "cache",
        "variants",
        "all_functions",
        "sorted",
        "len",
        "all_functions",
        "HAS",
        "split",
        "functions",
        "HAS",
        "values",
        "functions",
        "split",
        "all_functions",
        "all_functions",
        "append",
        "all_functions",
        "alignment",
        "ALIGNMENTS",
        "variant",
        "variants",
        "HAS",
        "variant",
        "split",
        "f",
        "math",
        "sqrt",
        "max",
        "mid",
        "run",
        "cache",
        "variant",
        "mid",
        "loops",
        "alignment",
        "quiet",
        "min",
        "max",
        "want",
        "took",
        "f",
        "factor",
        "math",
        "log10",
        "f",
        "scale",
        "f",
        "scale",
        "b",
        "sorted",
        "f",
        "math",
        "sqrt",
        "max",
        "b",
        "run_id",
        "NUM_RUNS",
        "run",
        "cache",
        "variant",
        "b",
        "loops",
        "alignment",
        "run_id",
        "cache",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "VARIANTS",
        "choices",
        "VARIANTS",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "FUNCTIONS",
        "choices",
        "FUNCTIONS",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "step",
        "step1",
        "step2",
        "step",
        "round",
        "math",
        "log",
        "args",
        "limit",
        "math",
        "log",
        "step",
        "extend",
        "step",
        "x",
        "x",
        "steps",
        "run_many",
        "cache",
        "args",
        "variants",
        "args",
        "functions",
        "open",
        "cachename",
        "f",
        "line",
        "f",
        "line",
        "strip",
        "line",
        "split",
        "join",
        "parts",
        "line",
        "run_top",
        "cache",
        "open",
        "cachename",
        "f",
        "line",
        "sorted",
        "cache",
        "values",
        "f",
        "line",
        "main"
    ],
    "literals": [
        "'../build/try-'",
        "'memchr memcmp memcpy memset strchr strcmp strcpy strlen'",
        "'this'",
        "'bounce memchr memcpy memset strchr strcmp strcpy strlen'",
        "'bionic-a9'",
        "'memcmp memcpy memset strcmp strcpy strlen'",
        "'bionic-a15'",
        "'memcmp memcpy memset strcmp strcpy strlen'",
        "'bionic-c'",
        "'csl'",
        "'memcpy memset'",
        "'glibc'",
        "'memcpy memset strchr strlen'",
        "'glibc-c'",
        "'newlib'",
        "'memcpy strcmp strcpy strlen'",
        "'newlib-c'",
        "'newlib-xscale'",
        "'memchr memcpy memset strchr strcmp strcpy strlen'",
        "'plain'",
        "'memset memcpy strcmp strcpy'",
        "'1'",
        "'1'",
        "'2'",
        "'4'",
        "'8'",
        "'16'",
        "'32'",
        "'1:32'",
        "'2:32'",
        "'4:32'",
        "'8:32'",
        "'16:32'",
        "'32:32'",
        "'bounce'",
        "'memchr'",
        "'memset'",
        "'strchr'",
        "'strlen'",
        "'memcmp'",
        "'memcpy'",
        "'strcmp'",
        "'strcpy'",
        "':'",
        "'%s'",
        "'%(xbuild)s%(variant)s -t %(function)s -c %(bytes)s -l %(loops)s -a %(alignment)s -r %(run_id)s'",
        "'Error %s while running %s'",
        "':'",
        "'this'",
        "\"-v\"",
        "\"--variants\"",
        "\"+\"",
        "\"library variant to run (run all if not specified)\"",
        "\"-f\"",
        "\"--functions\"",
        "\"+\"",
        "\"function to run (run all if not specified)\"",
        "\"-l\"",
        "\"--limit\"",
        "\"upper limit to test to (in bytes)\"",
        "'cache.txt'",
        "':'",
        "':'",
        "'w'",
        "'__main__'"
    ],
    "variables": [
        "build",
        "ALL",
        "HAS",
        "BOUNCE_ALIGNMENTS",
        "SINGLE_BUFFER_ALIGNMENTS",
        "DUAL_BUFFER_ALIGNMENTS",
        "ALIGNMENTS",
        "VARIANTS",
        "FUNCTIONS",
        "NUM_RUNS",
        "key",
        "got",
        "xbuild",
        "cmd",
        "got",
        "parts",
        "took",
        "cache",
        "key",
        "mid",
        "all_functions",
        "f",
        "want",
        "loops",
        "took",
        "factor",
        "f",
        "scale",
        "f",
        "loops",
        "parser",
        "args",
        "step1",
        "step2",
        "steps",
        "cachename",
        "cache",
        "line",
        "parts",
        "cache"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Prefix to the executables",
        "We want the data to come out in a useful order.  So fix an",
        "alignment and function, and do all sizes for a variant first",
        "Use the ordering in 'this' as the default",
        "Find all other functions",
        "Run a tracer through and see how long it takes and",
        "adjust the number of loops based on that.  Not great",
        "for memchr() and similar which are O(n), but it will",
        "do",
        "Keep it reasonable for silly routines like bounce",
        "Round f to a few significant figures",
        "Figure out the number of loops to give a roughly consistent run",
        "Test all powers of 2",
        "Test intermediate powers of 1.4",
        "Figure out how many steps get us up to the top"
    ],
    "docstrings": [
        "\"\"\"Simple harness that benchmarks different variants of the routines,\ncaches the results, and emits all of the records at the end.\n\nResults are generated for different values of:\n * Source\n * Routine\n * Length\n * Alignment\n\"\"\"",
        "\"\"\"Perform a single run, exercising the cache as appropriate.\"\"\""
    ],
    "functions": [
        "run",
        "run_many",
        "run_top",
        "main"
    ],
    "classes": []
}