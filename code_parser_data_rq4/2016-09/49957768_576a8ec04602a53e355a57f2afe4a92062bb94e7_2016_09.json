{
    "identifiers": [
        "Diagnostics",
        "Windows",
        "Forms",
        "Runtime",
        "InteropServices",
        "Text",
        "Parameters",
        "BlockAltTab",
        "BlockWindowsKey",
        "BlockAltTabAndWindows",
        "BlockAllKeys",
        "IntPtr",
        "Zero",
        "IntPtr",
        "HookHandlerDelegate",
        "nCode",
        "IntPtr",
        "wParam",
        "KBDLLHOOKSTRUCT",
        "lParam",
        "KBDLLHOOKSTRUCT",
        "proc",
        "HookHandlerDelegate",
        "HookCallback",
        "Process",
        "GetCurrentProcess",
        "curProcess",
        "MainModule",
        "hookID",
        "NativeMethods",
        "SetWindowsHookEx",
        "WH_KEYBOARD_LL",
        "proc",
        "NativeMethods",
        "GetModuleHandle",
        "curModule",
        "ModuleName",
        "param",
        "IsNullOrEmpty",
        "param",
        "Enum",
        "IsDefined",
        "Parameters",
        "param",
        "SetParameters",
        "Parameters",
        "Enum",
        "Parse",
        "Parameters",
        "param",
        "Parameters",
        "param",
        "SetParameters",
        "param",
        "Parameters",
        "param",
        "param",
        "Parameters",
        "Parameters",
        "BlockAltTab",
        "BlockAltTab",
        "Parameters",
        "BlockWindowsKey",
        "BlockWindowsKey",
        "Parameters",
        "BlockAltTabAndWindows",
        "BlockAltTab",
        "BlockWindowsKey",
        "Parameters",
        "BlockAllKeys",
        "BlockAllKeys",
        "StringBuilder",
        "NativeMethods",
        "GetKeyState",
        "VK_CAPITAL",
        "sb",
        "AppendLine",
        "NativeMethods",
        "GetKeyState",
        "VK_SHIFT",
        "sb",
        "AppendLine",
        "NativeMethods",
        "GetKeyState",
        "VK_CONTROL",
        "sb",
        "AppendLine",
        "NativeMethods",
        "GetKeyState",
        "VK_MENU",
        "sb",
        "AppendLine",
        "WriteLine",
        "sb",
        "ToString",
        "nCode",
        "IntPtr",
        "wParam",
        "KBDLLHOOKSTRUCT",
        "lParam",
        "nCode",
        "blocageActif",
        "wParam",
        "IntPtr",
        "WM_KEYUP",
        "wParam",
        "IntPtr",
        "WM_SYSKEYUP",
        "wParam",
        "IntPtr",
        "WM_KEYDOWN",
        "wParam",
        "IntPtr",
        "WM_SYSKEYDOWN",
        "Debug",
        "WriteLine",
        "lParam",
        "vkCode",
        "lParam",
        "flags",
        "lParam",
        "flags",
        "lParam",
        "vkCode",
        "lParam",
        "flags",
        "lParam",
        "vkCode",
        "lParam",
        "flags",
        "lParam",
        "vkCode",
        "lParam",
        "flags",
        "lParam",
        "vkCode",
        "lParam",
        "flags",
        "lParam",
        "vkCode",
        "lParam",
        "flags",
        "lParam",
        "vkCode",
        "lParam",
        "flags",
        "lParam",
        "vkCode",
        "Suppress",
        "Suppress",
        "Debug",
        "WriteLine",
        "IntPtr",
        "NativeMethods",
        "CallNextHookEx",
        "hookID",
        "nCode",
        "wParam",
        "lParam",
        "KeyboardHookEventArgs",
        "e",
        "KeyIntercepted",
        "KeyIntercepted",
        "e",
        "KeyboardHookEventHandler",
        "KeyboardHookEventArgs",
        "e",
        "EventArgs",
        "keyName",
        "keyCode",
        "passThrough",
        "evtKeyCode",
        "evtPassThrough",
        "keyName",
        "Keys",
        "evtKeyCode",
        "ToString",
        "keyCode",
        "evtKeyCode",
        "passThrough",
        "evtPassThrough",
        "NativeMethods",
        "UnhookWindowsHookEx",
        "hookID",
        "ComVisibleAttribute",
        "Security",
        "SuppressUnmanagedCodeSecurity",
        "DllImport",
        "CharSet",
        "CharSet",
        "Auto",
        "SetLastError",
        "lpModuleName",
        "DllImport",
        "CharSet",
        "CharSet",
        "Auto",
        "SetLastError",
        "idHook",
        "HookHandlerDelegate",
        "lpfn",
        "IntPtr",
        "hMod",
        "dwThreadId",
        "DllImport",
        "CharSet",
        "CharSet",
        "Auto",
        "SetLastError",
        "MarshalAs",
        "UnmanagedType",
        "Bool",
        "IntPtr",
        "hhk",
        "DllImport",
        "CharSet",
        "CharSet",
        "Auto",
        "SetLastError",
        "IntPtr",
        "hhk",
        "nCode",
        "IntPtr",
        "wParam",
        "KBDLLHOOKSTRUCT",
        "lParam",
        "DllImport",
        "CharSet",
        "CharSet",
        "Auto",
        "ExactSpelling",
        "CallingConvention",
        "CallingConvention",
        "Winapi",
        "keyCode"
    ],
    "literals": [
        "\"Capslock is enabled.\"",
        "\"Shift is pressed.\"",
        "\"Control is pressed.\"",
        "\"Alt is pressed.\"",
        "\"lParam.vkCode = \"",
        "\" / lParam.flags = \"",
        "\"Suppression !\"",
        "\"kernel32.dll\"",
        "\"user32.dll\"",
        "\"user32.dll\"",
        "\"user32.dll\"",
        "\"user32.dll\""
    ],
    "variables": [
        "blocageActif",
        "BlockAllKeys",
        "BlockAltTab",
        "BlockWindowsKey",
        "WH_KEYBOARD_LL",
        "WM_KEYUP",
        "WM_SYSKEYUP",
        "WM_KEYDOWN",
        "WM_SYSKEYDOWN",
        "VK_SHIFT",
        "VK_CONTROL",
        "VK_MENU",
        "VK_CAPITAL",
        "HookHandlerDelegate",
        "proc",
        "IntPtr",
        "hookID",
        "KeyboardHookEventHandler",
        "KeyIntercepted",
        "vkCode",
        "scanCode",
        "flags",
        "time",
        "dwExtraInfo",
        "Process",
        "curProcess",
        "ProcessModule",
        "curModule",
        "StringBuilder",
        "sb",
        "Suppress",
        "keyName",
        "keyCode",
        "passThrough",
        "KeyName",
        "KeyCode",
        "PassThrough"
    ],
    "comments": [
        "KEYBOARD.CS",
        "(c) 2006 by Emma Burrows",
        "This file contains the following items:",
        "- KeyboardHook: class to enable low-level keyboard hook using",
        "the Windows API.",
        "- KeyboardHookEventHandler: delegate to handle the KeyIntercepted",
        "event raised by the KeyboardHook class.",
        "- KeyboardHookEventArgs: EventArgs class to contain the information",
        "returned by the KeyIntercepted event.",
        "",
        "Change history:",
        "17/06/06: 1.0 - First version.",
        "18/06/06: 1.1 - Modified proc assignment in constructor to make class backward",
        "compatible with 2003.",
        "10/07/06: 1.2 - Added support for modifier keys:",
        "-Changed filter in HookCallback to WM_KEYUP instead of WM_KEYDOWN",
        "-Imported GetKeyState from user32.dll",
        "-Moved native DLL imports to a separate internal class as this",
        "is a Good Idea according to Microsoft's guidelines",
        "13/02/07: 1.3 - Improved modifier key support:",
        "-Added CheckModifiers() method",
        "-Deleted LoWord/HiWord methods as they weren't necessary",
        "-Implemented Barry Dorman's suggestion to AND GetKeyState",
        "values with 0x8000 to get their result",
        "23/03/07: 1.4 - Fixed bug which made the Alt key appear stuck",
        "- Changed the line",
        "if (nCode >= 0 && (wParam == (IntPtr)WM_KEYUP || wParam == (IntPtr)WM_SYSKEYUP))",
        "to",
        "if (nCode >= 0)",
        "{",
        "if (wParam == (IntPtr)WM_KEYUP || wParam == (IntPtr)WM_SYSKEYUP)",
        "...",
        "Many thanks to \"Scottie Numbnuts\" for the solution.",
        "Low-level keyboard intercept class to trap and suppress system keys.",
        "</summary>",
        "Parameters accepted by the KeyboardHook constructor.",
        "</summary>",
        "Internal parameters",
        "Keyboard API constants",
        "Modifier key constants",
        "Variables used in the call to SetWindowsHookEx",
        "Event triggered when a keystroke is intercepted by the",
        "low-level hook.",
        "</summary>",
        "Structure returned by the hook whenever a key is pressed",
        "Sets up a keyboard hook to trap all keystrokes without",
        "passing any to other applications.",
        "</summary>",
        "Sets up a keyboard hook with custom parameters.",
        "</summary>",
        "<param name=\"param\">A valid name from the Parameter enum; otherwise, the",
        "default parameter Parameter.None will be used.</param>",
        "Sets up a keyboard hook with custom parameters.",
        "</summary>",
        "<param name=\"param\">A value from the Parameters enum.</param>",
        "Checks whether Alt, Shift, Control or CapsLock",
        "is enabled at the same time as another key.",
        "Modify the relevant sections and return type",
        "depending on what you want to do with modifier keys.",
        "</summary>",
        "CAPSLOCK is ON",
        "SHIFT is pressed",
        "CONTROL is pressed",
        "ALT is pressed",
        "Processes the key event captured by the hook.",
        "</summary>",
        "bool BlockKey = BlockAllKeys;",
        "Filter wParam for KeyUp events only",
        "Alt+Tab",
        "Alt+Esc",
        "Ctrl+Esc",
        "Left Windows Key",
        "Right Windows Key",
        "Alt+F4",
        "// Check for modifier keys, but only if the key being\n                                // currently processed isn't a modifier key (in other\n                                // words, CheckModifiers will only run if Ctrl, Shift,\n                                // CapsLock or Alt are active at the same time as\n                                // another key)\n\n\n                                // Check for key combinations that are allowed to \n                                // get through to Windows\n                                //\n                                // Ctrl+Esc or Windows key\n                                if (BlockWindowsKey)\n                                {\n                                    switch (lParam.flags)\n                                    {\n                                        //Ctrl+Esc\n                                        case 0:\n                                            if (lParam.vkCode == 27)\n                                                BlockKey = true;\n                                            break;\n\n                                        //Windows keys\n                                        case 129:\n                                            if ((lParam.vkCode == 91) || (lParam.vkCode == 92))\n                                                BlockKey = true;\n                                            break;\n                                    }\n                                }\n                                // Alt+Tab\n                                if (BlockAltTab)\n                                {\n                                    if (((lParam.flags == 32) || (lParam.flags == 160)) && (lParam.vkCode == 9))\n                                        BlockKey = true;\n                                }\n\n                                OnKeyIntercepted(new KeyboardHookEventArgs(lParam.vkCode, !BlockKey));",
        "If this key is being suppressed, return a dummy value",
        "if (BlockKey == true)\n                return (System.IntPtr)1;",
        "Pass key to next application",
        "Raises the KeyIntercepted event.",
        "</summary>",
        "<param name=\"e\">An instance of KeyboardHookEventArgs</param>",
        "Delegate for KeyboardHook event handling.",
        "</summary>",
        "<param name=\"e\">An instance of InterceptKeysEventArgs.</param>",
        "Event arguments for the KeyboardHook class's KeyIntercepted event.",
        "</summary>",
        "The name of the key that was pressed.",
        "</summary>",
        "The virtual key code of the key that was pressed.",
        "</summary>",
        "True if this key combination was passed to other applications,",
        "false if it was trapped.",
        "</summary>",
        "Releases the keyboard hook.",
        "</summary>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "KeyboardHook",
        "KeyboardHook",
        "KeyboardHook",
        "SetParameters",
        "CheckModifiers",
        "IntPtr",
        "HookCallback",
        "OnKeyIntercepted",
        "KeyboardHookEventArgs",
        "Dispose",
        "IntPtr",
        "GetModuleHandle",
        "IntPtr",
        "SetWindowsHookEx",
        "UnhookWindowsHookEx",
        "IntPtr",
        "CallNextHookEx",
        "GetKeyState"
    ],
    "classes": [
        "KeyboardHook",
        "KeyboardHookEventArgs",
        "NativeMethods"
    ]
}