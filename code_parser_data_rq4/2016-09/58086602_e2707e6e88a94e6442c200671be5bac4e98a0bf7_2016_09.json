{
    "identifiers": [
        "arq",
        "examples",
        "riot",
        "java",
        "io",
        "ByteArrayOutputStream",
        "java",
        "io",
        "java",
        "io",
        "OutputStream",
        "java",
        "io",
        "StringReader",
        "org",
        "apache",
        "jena",
        "query",
        "DatasetFactory",
        "org",
        "apache",
        "jena",
        "rdf",
        "model",
        "Model",
        "org",
        "apache",
        "jena",
        "rdf",
        "model",
        "ModelFactory",
        "org",
        "apache",
        "jena",
        "rdf",
        "model",
        "Resource",
        "org",
        "apache",
        "jena",
        "riot",
        "JsonLDWriteContext",
        "org",
        "apache",
        "jena",
        "riot",
        "RDFDataMgr",
        "org",
        "apache",
        "jena",
        "riot",
        "RDFFormat",
        "org",
        "apache",
        "jena",
        "riot",
        "WriterDatasetRIOT",
        "org",
        "apache",
        "jena",
        "riot",
        "system",
        "PrefixMap",
        "org",
        "apache",
        "jena",
        "riot",
        "system",
        "RiotLib",
        "org",
        "apache",
        "jena",
        "sparql",
        "core",
        "DatasetGraph",
        "org",
        "apache",
        "jena",
        "sparql",
        "util",
        "Context",
        "org",
        "apache",
        "jena",
        "vocabulary",
        "RDF",
        "org",
        "apache",
        "jena",
        "vocabulary",
        "RDFS",
        "com",
        "github",
        "jsonldjava",
        "core",
        "JsonLdOptions",
        "args",
        "doIt",
        "doSimpleStuff",
        "moreControl",
        "m",
        "aSimpleModel",
        "m",
        "write",
        "RDFDataMgr",
        "write",
        "m",
        "RDFFormat",
        "JSONLD",
        "RDFDataMgr",
        "write",
        "m",
        "RDFFormat",
        "JSONLD_PRETTY",
        "RDFDataMgr",
        "write",
        "m",
        "RDFFormat",
        "JSONLD_FLAT",
        "m",
        "setNsPrefix",
        "m",
        "setNsPrefix",
        "RDFDataMgr",
        "write",
        "m",
        "RDFFormat",
        "JSONLD_PRETTY",
        "RDFDataMgr",
        "write",
        "m",
        "RDFFormat",
        "JSONLD_EXPAND_PRETTY",
        "RDFDataMgr",
        "write",
        "m",
        "RDFFormat",
        "JSONLD_FLATTEN_PRETTY",
        "m",
        "aSimpleModel",
        "m",
        "setNsPrefix",
        "m",
        "setNsPrefix",
        "g",
        "DatasetFactory",
        "create",
        "m",
        "asDatasetGraph",
        "write",
        "g",
        "RDFFormat",
        "JSONLD_COMPACT_PRETTY",
        "controllingAtContext",
        "settingAtContextToURI",
        "frame",
        "controllingJsonLDApiOptions",
        "m",
        "aSimpleModel",
        "m",
        "setNsPrefix",
        "m",
        "setNsPrefix",
        "g",
        "DatasetFactory",
        "create",
        "m",
        "asDatasetGraph",
        "ctx",
        "atContextAsJson",
        "ctx",
        "setJsonLDContext",
        "atContextAsJson",
        "write",
        "g",
        "RDFFormat",
        "JSONLD_COMPACT_PRETTY",
        "ctx",
        "m",
        "aModelThatOnlyUsesSchemaDotOrg",
        "g",
        "DatasetFactory",
        "create",
        "m",
        "asDatasetGraph",
        "ctx",
        "ctx",
        "setJsonLDContext",
        "write",
        "g",
        "RDFFormat",
        "JSONLD_COMPACT_PRETTY",
        "ctx",
        "atContextAsJson",
        "ctx",
        "setJsonLDContext",
        "atContextAsJson",
        "ctx",
        "setJsonLDContextSubstitution",
        "write",
        "g",
        "RDFFormat",
        "JSONLD_COMPACT_PRETTY",
        "ctx",
        "m",
        "ModelFactory",
        "createDefaultModel",
        "ns",
        "person",
        "m",
        "createResource",
        "ns",
        "s",
        "m",
        "createResource",
        "m",
        "add",
        "s",
        "m",
        "createProperty",
        "ns",
        "m",
        "add",
        "s",
        "m",
        "createProperty",
        "ns",
        "m",
        "add",
        "s",
        "m",
        "createProperty",
        "ns",
        "m",
        "add",
        "s",
        "RDF",
        "person",
        "s",
        "m",
        "createResource",
        "m",
        "add",
        "s",
        "m",
        "createProperty",
        "ns",
        "m",
        "add",
        "s",
        "m",
        "createProperty",
        "ns",
        "m",
        "add",
        "s",
        "RDF",
        "person",
        "s",
        "m",
        "createResource",
        "m",
        "add",
        "s",
        "m",
        "createProperty",
        "ns",
        "m",
        "add",
        "s",
        "RDF",
        "m",
        "createResource",
        "ns",
        "g",
        "DatasetFactory",
        "create",
        "m",
        "asDatasetGraph",
        "ctx",
        "frame",
        "ctx",
        "setFrame",
        "frame",
        "write",
        "g",
        "RDFFormat",
        "JSONLD_FRAME_PRETTY",
        "ctx",
        "m",
        "aSimpleModel",
        "m",
        "setNsPrefix",
        "m",
        "setNsPrefix",
        "g",
        "DatasetFactory",
        "create",
        "m",
        "asDatasetGraph",
        "ctx",
        "opts",
        "ctx",
        "setOptions",
        "opts",
        "opts",
        "setCompactArrays",
        "write",
        "g",
        "RDFFormat",
        "JSONLD_COMPACT_PRETTY",
        "ctx",
        "g",
        "f",
        "ctx",
        "w",
        "RDFDataMgr",
        "createDatasetWriter",
        "f",
        "pm",
        "RiotLib",
        "prefixMap",
        "g",
        "w",
        "write",
        "g",
        "pm",
        "ctx",
        "g",
        "f",
        "ctx",
        "write",
        "g",
        "f",
        "ctx",
        "g",
        "f",
        "ctx",
        "write",
        "g",
        "f",
        "ctx",
        "flush",
        "x",
        "toString",
        "close",
        "x",
        "e",
        "e",
        "jsonld",
        "m",
        "ModelFactory",
        "createDefaultModel",
        "reader",
        "jsonld",
        "m",
        "read",
        "reader",
        "m",
        "m",
        "ModelFactory",
        "createDefaultModel",
        "ns",
        "person",
        "m",
        "createResource",
        "ns",
        "s",
        "s",
        "m",
        "createResource",
        "m",
        "add",
        "s",
        "m",
        "createProperty",
        "ns",
        "m",
        "add",
        "s",
        "RDF",
        "person",
        "m",
        "add",
        "s",
        "RDFS",
        "seeAlso",
        "m",
        "createResource",
        "m",
        "m",
        "ModelFactory",
        "createDefaultModel",
        "ns",
        "person",
        "m",
        "createResource",
        "ns",
        "s",
        "s",
        "m",
        "createResource",
        "m",
        "add",
        "s",
        "m",
        "createProperty",
        "ns",
        "m",
        "add",
        "s",
        "RDF",
        "person",
        "m"
    ],
    "literals": [
        "\"--- DEFAULT ---\"",
        "\"JSON-LD\"",
        "\"\\n--- DEFAULT ---\"",
        "\"\\n--- DEFAULT, PRETTY (same as above, BTW) ---\"",
        "\"\\n--- DEFAULT, FLAT ---\"",
        "\"ex\"",
        "\"http://www.ex.com/\"",
        "\"sh\"",
        "\"http://schema.org/\"",
        "\"\\n--- DEFAULT, model including prefix mappings ---\"",
        "\"\\n--- EXPAND ---\"",
        "\"\\n--- FLATTEN ---\"",
        "\"ex\"",
        "\"http://www.ex.com/\"",
        "\"sh\"",
        "\"http://schema.org/\"",
        "\"\\n--- COMPACT with a null Context: same result as default ---\"",
        "\"ex\"",
        "\"http://www.ex.com/\"",
        "\"sh\"",
        "\"http://schema.org/\"",
        "\"{\\\"@vocab\\\":\\\"http://schema.org/\\\"}\"",
        "\"\\n--- COMPACT using a Context that defines @vocab ---\"",
        "\"\\\"http://schema.org/\\\"\"",
        "\"\\n--- Setting the context to a URI, WRONG WAY: it's slow, and the output is not JSON-LD. Sorry about that. ---\"",
        "\"{\\\"name\\\":{\\\"@id\\\":\\\"http://schema.org/name\\\"},\\\"Person\\\": {\\\"@id\\\": \\\"http://schema.org/Person\\\"}}\"",
        "\"\\\"http://schema.org/\\\"\"",
        "\"\\n--- COMPACT with @context replaced by schema.org URI ---\"",
        "\"http://schema.org/\"",
        "\"Person\"",
        "\"name\"",
        "\"Jane Doe\"",
        "\"url\"",
        "\"http://www.janedoe.com\"",
        "\"jobTitle\"",
        "\"Professor\"",
        "\"name\"",
        "\"Gado Salamatou\"",
        "\"url\"",
        "\"http://www.salamatou.com\"",
        "\"name\"",
        "\"Not a person\"",
        "\"Event\"",
        "\"{\\\"@type\\\" : \\\"http://schema.org/Person\\\"}\"",
        "\"\\n--- Using frame to select resources to be output: only output persons ---\"",
        "\"ex\"",
        "\"http://www.ex.com/\"",
        "\"sh\"",
        "\"http://schema.org/\"",
        "\"\\n--- COMPACT with CompactArrays false: there is an @graph node\"",
        "\"UTF-8\"",
        "\"JSON-LD\"",
        "\"http://schema.org/\"",
        "\"Person\"",
        "\"http://www.ex.com/janedoe\"",
        "\"name\"",
        "\"Jane Doe\"",
        "\"http://www.ex.com/janedoe/moreinfo\"",
        "\"http://schema.org/\"",
        "\"Person\"",
        "\"http://www.ex.com/janedoe\"",
        "\"name\"",
        "\"Jane Doe\""
    ],
    "variables": [
        "s",
        "s"
    ],
    "comments": [
        "to get a default output: just do like for any other lang",
        "same thing, using the more modern RDFDataMgr, and specifying the RDFFormat",
        "output can be pretty (with line breaks), or not",
        "all these default outputs use the JsonLD \"Compact\" format",
        "(note the \"@context\" node in the output)",
        "if prefixes are defined in the model,",
        "they are used in computing the @context,",
        "and corresponding values are displayed as prefix:localname",
        "(note something nice with jsonld: look at the value of \"seeAlso\")",
        "Besides \"Compact\", JSON-LD defines the following kinds of outputs: expanded, flattened, and framed",
        "For each of them, there is a dedicated RDFFormat -- actually, 2 of them (one pretty, one flat)",
        "As previously seen, RDFFormat.JSONLD is just an alias of RDFFormat.JSONLD_COMPACT_PRETYY",
        "Let's try the other ones:",
        "Expand is the fastest one",
        "no @context in it",
        "flatten has an @context node",
        "framed requires some more parameters to run, we'll get back to it later",
        "Note that the write method takes a DatasetGraph as input to represent the data that we want to output",
        "Let's create one from our model:",
        "and let's use this new write method to output it in compact format,",
        "passing a null Context for the moment",
        "A Context is just a way to pass implementation-specific parameters as named values",
        "to a given general interface (the WriterDatasetRIOT, in this case).",
        "In order to make it easier to define the named values relevant here,",
        "there is a subclass of Context that defines setters for the values:",
        "the JsonLDWriteContext class",
        "so, the way to proceed is:",
        "JsonLDWriteContext ctx = new JsonLDWriteContext();",
        "ctx.setSomething(...)",
        "write(g, RDFFormat.JSONLD_COMPACT_PRETTY, ctx);",
        "let's see now what can be customized with the JsonLDWriteContext object",
        "When none is provided, Jena computes one from the defined prefixes, and from the content",
        "of the data. This default is probably good enough in most of the cases, but you may want to customize it.",
        "Or, if it is always the same one, you may consider that computing it again and again",
        "(each time that you output data), is a waste of time (the computing of the \"@context\" implies to loop through all the triples)",
        "You may therefore want to compute it once for all, and to pass it to the output process",
        "To pass a given \"@context\" to the writing process,",
        "you pass the corresponding value as a JSON string",
        "(alternatively, you can directly pass the object expected by the JSON-LD API)",
        "for instance, we can pass a simple context",
        "that uses jsonld \"@vocab\" to define the \"default vocabulary\"",
        "as being schema.org.",
        "One thing you'll probably want to do is to set the \"@context\" to the URL of a file",
        "containing the actual JSON-LD context.",
        "Let's take Model that only uses schema.org terms,",
        "and let's try to set the \"@Context\" to the URL of schema.org",
        "\"@context\" : \"http://schema.org/\"",
        "The following should work, but it doesn't (with JSONLD-java 0.8.3):",
        "But don't worry (be happy):",
        "- there is a solution",
        "- and what we tried is not what we would want to do, anyway.",
        "The output process needs to have the content of the \"@context\" at hand",
        "in order to compute the output. So, if passing the URL of the vocab,",
        "the output process must download the vocab before anything.",
        "(that's why it is slow)",
        "-> that would not be an efficient way to output your data.",
        "And it doesn't work eventually (at least with JSONLD-java 0.8.3)",
        "-> that would be a very bad way",
        "But well, no regret.",
        "To achieve the expected result,",
        "you have to do 2 things:",
        "1)",
        "you have to pass the dereferenced content of http://schema.org/",
        "or the relevant subset of it (we only use a very limited subset).",
        "Here it is:",
        "Alternatively, we could just pass \"null\":",
        "ctx.setJsonLDContext(null);",
        "and let jena compute the context (as the model only uses schema.org vocab)",
        "2)",
        "and then you pass the schema.org url using:",
        "To summarize:",
        "- ctx.setJsonLDContext allows to define the @context used to compute the output",
        "- ctx.setJsonLDContextSubstitution allows to change the value of the \"@context\" in the output",
        "Final note: BEWARE when replacing the context:",
        "if you let some things undefined, the output will be json, not jsonld",
        "only output the persons using a frame",
        "default is true",
        "create a WriterDatasetRIOT with the RDFFormat",
        "following 2 methods: if you want to test",
        "that everything is OK in a roundtrip: model -> jsonld -> model",
        "something like:",
        "String jsonld = write2String(g, RDFFormat.JSONLD_COMPACT_PRETTY, ctx);",
        "Model m2 = parse(jsonld);",
        "System.out.println(\"ISO : \" + m.isIsomorphicWith(m2));",
        "m.add(s, m.createProperty(ns + \"url\"), \"http://www.janedoe.com\");",
        "m.add(s, m.createProperty(ns + \"jobTitle\"), \"Professor\");",
        "s = m.createResource();",
        "m.add(s, m.createProperty(ns + \"name\"), \"Salamatou Gado\");",
        "m.add(s, m.createProperty(ns + \"url\"), \"http://www.salamatou.com\");"
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "Example writing as JSON-LD",
        "* Simple stuff.\n     * \n     * output using defaults, \n     * in \"expanded\"\", compacted\" or \"flattened\" format\n     * (framed is more difficult, not handled here)",
        "* To get more control about the output,\n     * we have to use a mechanism provided by jena to pass information\n     * to the writing process\n     * \n     * This requires a few lines of code, see {@link #write(DatasetGraph, RDFFormat, Context)}\n     * \n     * Here we use this write method to see what can be customized.",
        "* Shows how to customize the \"@context\" in \"compacted\" and \"flattened\" format.\n     * \n     * To set it to the URI of a vocab, {@link #settingAtContextToURI()}",
        "* Shows how to set \"@context\" to a URI.",
        "*  the JSON-LD java API (that jena uses for JSON-LD I/O) defines a set of options\n     *  that can be customized",
        "* Write RDF data as JSON-LD.\n     * \n     * To get more control about the output,\n     * we have to use a mechanism provided by jena to pass information\n     * to the writing process (cf. org.apache.jena.riot.WriterDatasetRIOT and the \"Context\" mechanism).\n     * For that, we have to create a WriterDatasetRIOT (a one-time use object)\n     * and we pass a \"Context\" object (not to be confused with the \"@context\" in JSON-LD) as argument to its write method\n     * \n     * @param out\n     * @param f RDFFormat of the output, eg. RDFFormat.JSONLD_COMPACT_PRETTY\n     * @param g the data that we want to output as JSON-LD\n     * @param ctx the object that allows to control the writing process (a set of parameters)",
        "Write RDF data to the console",
        "Write RDF data into a String",
        "Parse a jsonld string into a Model"
    ],
    "functions": [
        "main",
        "doIt",
        "doSimpleStuff",
        "moreControl",
        "controllingAtContext",
        "settingAtContextToURI",
        "frame",
        "controllingJsonLDApiOptions",
        "write",
        "write",
        "write2String",
        "Model",
        "parse",
        "Model",
        "aSimpleModel",
        "Model",
        "aModelThatOnlyUsesSchemaDotOrg"
    ],
    "classes": [
        "ExJsonLD"
    ]
}