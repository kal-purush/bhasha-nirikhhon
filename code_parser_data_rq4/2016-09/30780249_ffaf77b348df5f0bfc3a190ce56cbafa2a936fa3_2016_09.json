{
    "identifiers": [
        "ntpath",
        "six",
        "argus",
        "config_generator",
        "windows",
        "argus",
        "introspection",
        "cloud",
        "windows",
        "introspect",
        "argus",
        "util",
        "BaseWindowsConfig",
        "util",
        "HTTP_SERVICE",
        "util",
        "CONFIG_DRIVE_SERVICE",
        "util",
        "EC2_SERVICE",
        "util",
        "OPEN_NEBULA_SERVICE",
        "util",
        "CLOUD_STACK_SERVICE",
        "util",
        "MAAS_SERVICE",
        "client",
        "BasePopulatedCBInitConfig",
        "client",
        "name",
        "value",
        "conf",
        "name",
        "value",
        "cmd",
        "count",
        "util",
        "RETRY_COUNT",
        "delay",
        "util",
        "RETRY_DELAY",
        "command_type",
        "_client",
        "run_command_with_retry",
        "cmd",
        "count",
        "count",
        "delay",
        "delay",
        "command_type",
        "command_type",
        "introspect",
        "get_cbinit_dir",
        "_execute",
        "set_conf_value",
        "ntpath",
        "join",
        "cbinit_dir",
        "set_conf_value",
        "ntpath",
        "join",
        "cbinit_dir",
        "set_conf_value",
        "ntpath",
        "join",
        "cbinit_dir",
        "set_conf_value",
        "ntpath",
        "join",
        "cbinit_dir",
        "service_type",
        "join",
        "util",
        "SERVICES_PREFIX",
        "SERVICES",
        "service_type",
        "service_type",
        "isinstance",
        "service_type",
        "six",
        "string_types",
        "service_type",
        "_get_service",
        "serv",
        "serv",
        "service_type",
        "join",
        "service_type",
        "set_conf_value",
        "conf_value",
        "path",
        "BasePopulatedCBInitConfig",
        "apply_config",
        "path",
        "ntpath",
        "join",
        "path",
        "config_name",
        "_client",
        "run_command_with_retry",
        "cmd",
        "format",
        "filename",
        "file_path",
        "command_type",
        "util",
        "POWERSHELL",
        "BasePopulatedCBInitConfig",
        "BasePopulatedCBInitConfig"
    ],
    "literals": [
        "\"httpservice.HttpService\"",
        "\"configdrive.ConfigDriveService\"",
        "\"ec2service.EC2Service\"",
        "\"opennebulaservice.OpenNebulaService\"",
        "\"cloudstack.CloudStack\"",
        "\"maasservice.MaaSHttpService\"",
        "\"\"",
        "\"DEFAULT\"",
        "\"bsdtar_path\"",
        "r'bin\\bsdtar.exe'",
        "\"local_scripts_path\"",
        "'LocalScripts\\\\'",
        "\"logdir\"",
        "\"log\\\\\"",
        "\"mtools_path\"",
        "\"bin\\\\\"",
        "'.'",
        "\",\"",
        "\"metadata_services\"",
        "\"(get-content '{filename}')| \"",
        "\"out-file '{filename}' -encoding ascii\"",
        "\"cloudbase-init.conf-template\"",
        "\"cloudbase-init.conf\"",
        "\"cloudbase-init-unattend.conf-template\"",
        "\"cloudbase-init-unattend.conf\""
    ],
    "variables": [
        "SERVICES",
        "cbinit_dir",
        "service_type",
        "service_type",
        "conf_value",
        "file_path",
        "cmd",
        "default_config",
        "config_name",
        "default_config",
        "config_name"
    ],
    "comments": [
        "Copyright 2016 Cloudbase Solutions Srl",
        "All Rights Reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
        "not use this file except in compliance with the License. You may obtain",
        "a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
        "WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
        "License for the specific language governing permissions and limitations",
        "under the License.",
        "NOTE(mmicu): Because python2.x does not support UTF-8 we need to",
        "convert the config file."
    ],
    "docstrings": [
        "\"\"\"An object that holds the cloudbaseinit config.\"\"\"",
        "\"\"\"Set a config value in default section.\"\"\"",
        "\"\"\"Execute until success and return only the standard output\n\n        A positive exit code will trigger the failure\n        in the underlying methods as an `ArgusError`.\n        Also, if the retrying limit is reached, `ArgusTimeoutError`\n        will be raised.\n        \"\"\"",
        "\"\"\"Populate the ConfigParser object with instance specific values.\"\"\"",
        "\"\"\"Returns the Cloudbase-init config value.\n\n        :param service_type:\n            This can be http, configdrive, ec2, opennebula,\n            cloudstack or maas.\n        \"\"\"",
        "\"\"\"Set the service type config.\n\n        :param service_type:\n            This can be a string like http, configdrive, ec2, opennebula,\n            cloudstack, MAAS or it can be a list with the required service\n            types. The order is important.!\n\n        ::\n        Example:\n        ::\n            [uti.MAAS_SERVICE, util.EC2_SERVICE]\n        \"\"\"",
        "\"\"\"Write the configuration values in the right place.\n\n            Take the curent state of the `self.conf` object and\n            write it to the specific path.The name of the file\n            will be `config_name`.\n\n        :param path:\n            Path to the directory in which the config file is created.\n        \"\"\"",
        "\"\"\"Config object for cloudbase-init.conf.\"\"\"",
        "\"\"\"Config object for cloudbase-init-unattend.conf.\"\"\""
    ],
    "functions": [
        "set_conf_value",
        "_execute",
        "_config_specific_paths",
        "_get_service",
        "set_service_type",
        "apply_config"
    ],
    "classes": [
        "BasePopulatedCBInitConfig",
        "CBInitConfig",
        "UnattendCBInitConfig"
    ]
}