{
    "identifiers": [],
    "literals": [
        "\"Valid Parenthesis\"",
        "\"Given a string, return true if every open parenthesis '(' has a corresponding closed parenthesis ')'\"",
        "\"((Hello), (World))\"",
        "\"Hi george :)\"",
        "\"())\"",
        "\"()()\"",
        "\"(())\"",
        "\"(()\"",
        "\"((\"",
        "\"())(\"",
        "\")()\"",
        "\"))()\"",
        "\"Reversing Carets\"",
        "\"Your goal is to write a function that takes in a string as input and returns that string reversing whatever text is inside the caret marks.\"",
        "\"foo^bat^bar\"",
        "\"footabbar\"",
        "\"^a^bcd^efgh^ijklm^nopqrs^tuvwxy^z^\"",
        "\"zbcdsrqponijklmhgfetuvwxya\"",
        "\"Spell Check\"",
        "Implement a function to determine if a word is spelled correctly, and if it is not spelled correctly return the top options for the correct spelling of the intended word. You can use the following as a dictionary.",
        "[\"family\", \"can\", \"cab\", \"cave\", \"it\", \"ant\", \"bit\", \"bait\"]",
        "\"family\"",
        "[\"family\"]",
        "\"faily\"",
        "[\"family\"]",
        "\"fammily\"",
        "[\"family\"]",
        "\"faxily\"",
        "[\"family\"]",
        "\"it\"",
        "[\"it\", \"bit\"]",
        "\"\"",
        "[\"\"]",
        "\"Telephone\"",
        "\"Given a number, return the list of strings that could be texted if using a dialer. The following letters can be printed per number.\"",
        "0 -> \n1 -> \n2 -> a, b, c\n3 -> d, e, f\n4 -> g, h, i\n5 -> j, k, l\n6 -> m, n, o\n7 -> p, q, r, s\n8 -> t, u, v\n9 -> w, x, y, z",
        "123",
        "[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]",
        "\"a!\"",
        "NaN",
        "\"000\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"S Number\"",
        "\"A number qualifies as an S nunber if it's squareroot equals some permutation of it's numbers.\"",
        "Explanation: sqrt(9801) === 98 + 0 + 1 === 99",
        "9801",
        "true",
        "8281",
        "true",
        "6724",
        "true",
        "\"Encoding\"",
        "\"Write a function that takes in a string (only a-z, lowercase) and returns a compressed string with repeated characters replaced by a single instance follow by a number.\"",
        "\"a\"",
        "\"a\"",
        "\"aa\"",
        "\"aa\"",
        "\"aaaa\"",
        "\"a4\"",
        "\"baaad\"",
        "\"ba3d\"",
        "\"badbadbad\"",
        "\"bad3\"",
        "\"badbeebad\"",
        "\"badbeebad\"",
        "\"Highest Number\"",
        "\"Write a function that takes a list of numbers, and returns the largest number in the list. If there are no numbers in the list, return 0.\"",
        "[7, 2, 6, 3]",
        "7",
        "[]",
        "0",
        "\"Word Wrap & Justify\"",
        "\"Given a string and line limit, write a function that can wrap words into an array of strings with a set max length and adds hyphens to be exactly the set length., \"",
        "The day began as still as the night abruptly lighted with brilliant flame",
        "\"wrap\", 24",
        "[\"The day began as still\", \"as the night abruptly\", \"lighted with brilliant\", \"flame\"]",
        "\"justify\", 24",
        "[\"The--day--began-as-still\", \"as--the--night--abruptly\", \"lighted--with--brilliant\", \"flame\"]",
        "\"wrap\", 25",
        "[\"The day began as still as\", \"the night abruptly\", \"lighted with brilliant\", \"flame\"]",
        "\"justify\", 25",
        "[\"The-day-began-as-still-as\", \"the-----night----abruptly\", \"lighted---with--brilliant\", \"flame\"]",
        "\"wrap\", 40",
        "[\"The day began as still as the night\", \"abruptly lighted with brilliant flame\"]",
        "\"justify\", 40",
        "[\"The--day--began--as--still--as-the-night\", \"abruptly--lighted--with--brilliant-flame\"]",
        "\"MinStack\"",
        "\"Write a stack class with the following methods: push, pop, peek. Push adds to the top of the stack. Pop removes top item from stack and returns it. Peek inspects top item and returns it, but does not remove it. Implement a new method min, that returns the minimum item in the stack. The min method should be constant.\"",
        "\"minStack.min.pop()\"",
        "\"???\"",
        "\"Fibonacci Sequence\"",
        "\"Write a function that given a number n, returns the nth Fibonacci number.\"",
        "\"0\"",
        "\"0\"",
        "\"1\"",
        "\"1\"",
        "\"2\"",
        "\"1\"",
        "\"3\"",
        "\"2\"",
        "\"4\"",
        "\"3\"",
        "\"5\"",
        "\"5\"",
        "\"6\"",
        "\"8\"",
        "\"7\"",
        "\"13\"",
        "\"15\"",
        "\"610\"",
        "\"50\"",
        "\"12586269025\""
    ],
    "variables": [
        "bank"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [],
    "classes": []
}