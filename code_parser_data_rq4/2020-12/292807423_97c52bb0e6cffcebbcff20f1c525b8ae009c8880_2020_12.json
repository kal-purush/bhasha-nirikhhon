{
    "identifiers": [
        "Abalon",
        "AI",
        "java",
        "util",
        "java",
        "security",
        "NoSuchAlgorithmException",
        "java",
        "security",
        "SecureRandom",
        "Abalon",
        "UI",
        "Hexagon",
        "Abalon",
        "UI",
        "BoardUI",
        "javafx",
        "application",
        "Application",
        "javafx",
        "stage",
        "Stage",
        "getPossibleMoves",
        "args",
        "obj",
        "obj",
        "GenAlgoCoached",
        "gen_number",
        "population",
        "Log",
        "init",
        "gen_number",
        "population",
        "Log",
        "read",
        "e",
        "e",
        "printStackTrace",
        "exit",
        "scoreSum",
        "population",
        "length",
        "i",
        "i",
        "population",
        "length",
        "i",
        "format",
        "i",
        "population",
        "i",
        "normalize",
        "scoreSum",
        "i",
        "playGame",
        "population",
        "i",
        "order",
        "i",
        "i",
        "population",
        "length",
        "i",
        "order",
        "add",
        "i",
        "order",
        "sort",
        "p1",
        "p2",
        "scoreSum",
        "p1",
        "scoreSum",
        "p2",
        "scoreSum",
        "p1",
        "scoreSum",
        "p2",
        "temp_population",
        "population",
        "length",
        "temp_scoreSum",
        "population",
        "length",
        "i",
        "i",
        "population",
        "length",
        "i",
        "temp_population",
        "i",
        "population",
        "i",
        "temp_scoreSum",
        "i",
        "scoreSum",
        "i",
        "i",
        "i",
        "population",
        "length",
        "i",
        "population",
        "i",
        "temp_population",
        "order",
        "get",
        "i",
        "scoreSum",
        "i",
        "temp_scoreSum",
        "order",
        "get",
        "i",
        "offset",
        "population",
        "length",
        "i",
        "i",
        "population",
        "length",
        "i",
        "Collections",
        "shuffle",
        "order",
        "mx1",
        "mx2",
        "j",
        "j",
        "population",
        "length",
        "j",
        "currentID",
        "order",
        "get",
        "j",
        "mx1",
        "mx1",
        "currentID",
        "mx2",
        "mx2",
        "currentID",
        "scoreSum",
        "currentID",
        "scoreSum",
        "mx1",
        "mx2",
        "mx1",
        "mx1",
        "currentID",
        "scoreSum",
        "currentID",
        "scoreSum",
        "mx2",
        "mx2",
        "currentID",
        "son",
        "Vec",
        "add",
        "Vec",
        "multiply",
        "population",
        "mx1",
        "scoreSum",
        "mx1",
        "Vec",
        "multiply",
        "population",
        "mx2",
        "scoreSum",
        "mx2",
        "son",
        "normalize",
        "offset",
        "i",
        "son",
        "old_son",
        "son",
        "result",
        "mutate",
        "offset",
        "i",
        "i",
        "i",
        "population",
        "length",
        "i",
        "population",
        "i",
        "offset",
        "i",
        "Log",
        "writeResultPopulation",
        "population",
        "e",
        "e",
        "printStackTrace",
        "exit",
        "v",
        "r",
        "SecureRandom",
        "getInstance",
        "prob",
        "r",
        "nextDouble",
        "prob",
        "val",
        "r",
        "nextDouble",
        "val",
        "val",
        "val",
        "id",
        "r",
        "nextInt",
        "v",
        "length",
        "v",
        "v",
        "id",
        "val",
        "v",
        "normalize",
        "e",
        "e",
        "printStackTrace",
        "exit",
        "rootCellColor",
        "rootCellColor",
        "p",
        "currentBoardState",
        "getRootBoardState",
        "rootBoardState",
        "getRootBoardState",
        "currentPlayer",
        "move_cnt",
        "break_flag",
        "move_cnt",
        "move_cnt",
        "nextBoardState",
        "currentPlayer",
        "childrenStates",
        "getPossibleMoves",
        "getPossibleMoves",
        "currentBoardState",
        "currentPlayer",
        "max_score",
        "NEGATIVE_INFINITY",
        "child",
        "childrenStates",
        "func",
        "currentPlayer",
        "child",
        "rootBoardState",
        "func",
        "changeModus",
        "p",
        "toDouble",
        "func",
        "isWin",
        "break_flag",
        "score",
        "func",
        "evaluate",
        "score",
        "max_score",
        "nextBoardState",
        "child",
        "max_score",
        "score",
        "childrenStates",
        "getPossibleMoves",
        "getPossibleMoves",
        "currentBoardState",
        "currentPlayer",
        "max_score",
        "NEGATIVE_INFINITY",
        "child",
        "childrenStates",
        "func",
        "currentPlayer",
        "child",
        "rootBoardState",
        "func",
        "isWin",
        "break_flag",
        "score",
        "func",
        "evaluate",
        "score",
        "max_score",
        "nextBoardState",
        "child",
        "max_score",
        "score",
        "break_flag",
        "currentBoardState",
        "nextBoardState",
        "currentPlayer",
        "currentPlayer",
        "score1",
        "i",
        "i",
        "currentBoardState",
        "length",
        "i",
        "j",
        "j",
        "currentBoardState",
        "length",
        "j",
        "currentBoardState",
        "i",
        "j",
        "score1",
        "score2",
        "i",
        "i",
        "currentBoardState",
        "length",
        "i",
        "j",
        "j",
        "currentBoardState",
        "length",
        "j",
        "currentBoardState",
        "i",
        "j",
        "score2",
        "score1",
        "score2",
        "score1",
        "score2"
    ],
    "literals": [
        "\"game #%d\"",
        "\"SHA1PRNG\""
    ],
    "variables": [],
    "comments": [
        "extends Application {",
        "System.out.println();",
        "for (int i = 0; i < 100; i++) {",
        "obj.GenAlgoCoached(i + 1);",
        "System.out.println(\"population \" + (i + 1) + \" produced\");",
        "}",
        "here we dont use MiniMax explicitly since with its current speed we would be able to use it for subtrees of depth 2 maximum anyways",
        "hence, for optimization reasons we use default values in EvaluationFunction that are also used by default in MiniMax"
    ],
    "docstrings": [
        "* This class can produce new populations of evaluation function weights based on supervised learning.\n * As a supervisor this version uses MiniMax algorirthm with Alpha Beta optimization.\n * In principle, MiniMax algorithm here can be replaced with any other AI that produces one-move decisions given the current state of the game only.\n * population size: 100\n * scoreSum function: number of marbles scored against MiniMax\n * selection: 70 iterations, random 10% of population\n * offset: for each selection iteration 2 members with max scoreSum function value produce a son\n * mutation chance: 5%\n * replacement: 70% of population with worst scoreSum function"
    ],
    "functions": [
        "main",
        "GenAlgoCoached",
        "compare",
        "mutate",
        "getRootBoardState",
        "playGame"
    ],
    "classes": [
        "GenAlgoCoached"
    ]
}