{
    "identifiers": [
        "org",
        "firstinspires",
        "ftc",
        "teamcode",
        "android",
        "app",
        "Activity",
        "android",
        "graphics",
        "Color",
        "android",
        "view",
        "View",
        "com",
        "qualcomm",
        "robotcore",
        "eventloop",
        "opmode",
        "Disabled",
        "com",
        "qualcomm",
        "robotcore",
        "eventloop",
        "opmode",
        "LinearOpMode",
        "com",
        "qualcomm",
        "robotcore",
        "eventloop",
        "opmode",
        "TeleOp",
        "com",
        "qualcomm",
        "robotcore",
        "hardware",
        "DistanceSensor",
        "com",
        "qualcomm",
        "robotcore",
        "hardware",
        "NormalizedColorSensor",
        "com",
        "qualcomm",
        "robotcore",
        "hardware",
        "NormalizedRGBA",
        "com",
        "qualcomm",
        "robotcore",
        "hardware",
        "SwitchableLight",
        "org",
        "firstinspires",
        "ftc",
        "robotcore",
        "external",
        "navigation",
        "DistanceUnit",
        "TeleOp",
        "name",
        "group",
        "colorSensor",
        "relativeLayout",
        "Override",
        "relativeLayoutId",
        "hardwareMap",
        "appContext",
        "getResources",
        "getIdentifier",
        "hardwareMap",
        "appContext",
        "getPackageName",
        "relativeLayout",
        "hardwareMap",
        "appContext",
        "findViewById",
        "relativeLayoutId",
        "runSample",
        "relativeLayout",
        "post",
        "relativeLayout",
        "setBackgroundColor",
        "Color",
        "WHITE",
        "gain",
        "hsvValues",
        "xButtonPreviouslyPressed",
        "xButtonCurrentlyPressed",
        "colorSensor",
        "hardwareMap",
        "get",
        "colorSensor",
        "colorSensor",
        "enableLight",
        "waitForStart",
        "opModeIsActive",
        "telemetry",
        "addLine",
        "telemetry",
        "addLine",
        "gamepad1",
        "a",
        "gain",
        "gamepad1",
        "b",
        "gain",
        "gain",
        "telemetry",
        "addData",
        "gain",
        "colorSensor",
        "setGain",
        "gain",
        "xButtonCurrentlyPressed",
        "gamepad1",
        "x",
        "xButtonCurrentlyPressed",
        "xButtonPreviouslyPressed",
        "xButtonCurrentlyPressed",
        "colorSensor",
        "light",
        "colorSensor",
        "light",
        "enableLight",
        "light",
        "isLightOn",
        "xButtonPreviouslyPressed",
        "xButtonCurrentlyPressed",
        "colors",
        "colorSensor",
        "getNormalizedColors",
        "Color",
        "colorToHSV",
        "colors",
        "toColor",
        "hsvValues",
        "telemetry",
        "addLine",
        "addData",
        "colors",
        "red",
        "addData",
        "colors",
        "green",
        "addData",
        "colors",
        "blue",
        "telemetry",
        "addLine",
        "addData",
        "hsvValues",
        "addData",
        "hsvValues",
        "addData",
        "hsvValues",
        "telemetry",
        "addData",
        "colors",
        "alpha",
        "colorSensor",
        "telemetry",
        "addData",
        "colorSensor",
        "getDistance",
        "DistanceUnit",
        "CM",
        "telemetry",
        "update",
        "relativeLayout",
        "post",
        "relativeLayout",
        "setBackgroundColor",
        "Color",
        "HSVToColor",
        "hsvValues"
    ],
    "literals": [
        "\"Sensor: Color\"",
        "\"Sensor\"",
        "\"RelativeLayout\"",
        "\"id\"",
        "\"sensor_color\"",
        "\"Hold the A button on gamepad 1 to increase gain, or B to decrease it.\\n\"",
        "\"Higher gain values mean that the sensor will report larger numbers for Red, Green, and Blue, and Value\\n\"",
        "\"Gain\"",
        "\"Red\"",
        "\"%.3f\"",
        "\"Green\"",
        "\"%.3f\"",
        "\"Blue\"",
        "\"%.3f\"",
        "\"Hue\"",
        "\"%.3f\"",
        "\"Saturation\"",
        "\"%.3f\"",
        "\"Value\"",
        "\"%.3f\"",
        "\"Alpha\"",
        "\"%.3f\"",
        "\"Distance (cm)\"",
        "\"%.3f\""
    ],
    "variables": [
        "colorSensor",
        "relativeLayout"
    ],
    "comments": [
        "@Disabled",
        "Get a reference to the RelativeLayout so we can later change the background",
        "color of the Robot Controller app to match the hue detected by the RGB sensor.",
        "actually execute the sample",
        "On the way out, *guarantee* that the background is reasonable. It doesn't actually start off",
        "as pure white, but it's too much work to dig out what actually was used, and this is good",
        "enough to at least make the screen reasonable again.",
        "Set the panel back to the default color",
        "You can give the sensor a gain value, will be multiplied by the sensor's raw value before the",
        "normalized color values are calculated. Color sensors (especially the REV Color Sensor V3)",
        "can give very low values (depending on the lighting conditions), which only use a small part",
        "of the 0-1 range that is available for the red, green, and blue values. In brighter conditions,",
        "you should use a smaller gain than in dark conditions. If your gain is too high, all of the",
        "colors will report at or near 1, and you won't be able to determine what color you are",
        "actually looking at. For this reason, it's better to err on the side of a lower gain",
        "(but always greater than  or equal to 1).",
        "Once per loop, we will update this hsvValues array. The first element (0) will contain the",
        "hue, the second element (1) will contain the saturation, and the third element (2) will",
        "contain the value. See http://web.archive.org/web/20190311170843/https://infohost.nmt.edu/tcc/help/pubs/colortheory/web/hsv.html",
        "for an explanation of HSV color.",
        "xButtonPreviouslyPressed and xButtonCurrentlyPressed keep track of the previous and current",
        "state of the X button on the gamepad",
        "Get a reference to our sensor object. It's recommended to use NormalizedColorSensor over",
        "ColorSensor, because NormalizedColorSensor consistently gives values between 0 and 1, while",
        "the values you get from ColorSensor are dependent on the specific sensor you're using.",
        "If possible, turn the light on in the beginning (it might already be on anyway,",
        "we just make sure it is if we can).",
        "Wait for the start button to be pressed.",
        "Loop until we are asked to stop",
        "Explain basic gain information via telemetry",
        "Update the gain value if either of the A or B gamepad buttons is being held",
        "Only increase the gain by a small amount, since this loop will occur multiple times per second.",
        "A gain of less than 1 will make the values smaller, which is not helpful.",
        "Show the gain value via telemetry",
        "Tell the sensor our desired gain value (normally you would do this during initialization,",
        "not during the loop)",
        "Check the status of the X button on the gamepad",
        "If the button state is different than what it was, then act",
        "If the button is (now) down, then toggle the light",
        "Get the normalized colors from the sensor",
        "Update the hsvValues array by passing it to Color.colorToHSV()",
        "Change the Robot Controller's background color to match the color detected by the color sensor."
    ],
    "docstrings": [
        "Copyright (c) 2017-2020 FIRST. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted (subject to the limitations in the disclaimer below) provided that\n * the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice, this list\n * of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright notice, this\n * list of conditions and the following disclaimer in the documentation and/or\n * other materials provided with the distribution.\n *\n * Neither the name of FIRST nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written permission.\n *\n * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS\n * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "* This is an example LinearOpMode that shows how to use a color sensor in a generic\n * way, regardless of which particular make or model of color sensor is used. The Op Mode\n * assumes that the color sensor is configured with a name of \"sensor_color\".\n *\n * There will be some variation in the values measured depending on the specific sensor you are using.\n *\n * You can increase the gain (a multiplier to make the sensor report higher values) by holding down\n * the A button on the gamepad, and decrease the gain by holding down the B button on the gamepad.\n *\n * If the color sensor has a light which is controllable from software, you can use the X button on\n * the gamepad to toggle the light on and off. The REV sensors don't support this, but instead have\n * a physical switch on them to turn the light on and off, beginning with REV Color Sensor V2.\n *\n * If the color sensor also supports short-range distance measurements (usually via an infrared\n * proximity sensor), the reported distance will be written to telemetry. As of September 2020,\n * the only color sensors that support this are the ones from REV Robotics. These infrared proximity\n * sensor measurements are only useful at very small distances, and are sensitive to ambient light\n * and surface reflectivity. You should use a different sensor if you need precise distance measurements.\n *\n * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.\n * Remove or comment out the @Disabled line to add this Op Mode to the Driver Station OpMode list",
        "The colorSensor field will contain a reference to our color sensor hardware object",
        "The relativeLayout field is used to aid in providing interesting visual feedback\n   * in this sample application; you probably *don't* need this when you use a color sensor on your\n   * robot. Note that you won't see anything change on the Driver Station, only on the Robot Controller.",
        "* The runOpMode() method is the root of this Op Mode, as it is in all LinearOpModes.\n   * Our implementation here, though is a bit unusual: we've decided to put all the actual work\n   * in the runSample() method rather than directly in runOpMode() itself. The reason we do that is\n   * that in this sample we're changing the background color of the robot controller screen as the\n   * Op Mode runs, and we want to be able to *guarantee* that we restore it to something reasonable\n   * and palatable when the Op Mode ends. The simplest way to do that is to use a try...finally\n   * block around the main, core logic, and an easy way to make that all clear was to separate\n   * the former from the latter in separate methods.",
        "Use telemetry to display feedback on the driver station. We show the red, green, and blue\n       * normalized values from the sensor (in the range of 0 to 1), as well as the equivalent\n       * HSV (hue, saturation and value) values. See http://web.archive.org/web/20190311170843/https://infohost.nmt.edu/tcc/help/pubs/colortheory/web/hsv.html\n       * for an explanation of HSV color.",
        "If this color sensor also has a distance sensor, display the measured distance.\n       * Note that the reported distance is only useful at very close range, and is impacted by\n       * ambient light and surface reflectivity."
    ],
    "functions": [
        "runOpMode",
        "run",
        "runSample",
        "run"
    ],
    "classes": [
        "SensorColor"
    ]
}