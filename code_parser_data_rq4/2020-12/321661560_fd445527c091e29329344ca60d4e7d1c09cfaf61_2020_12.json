{
    "identifiers": [
        "f",
        "exports",
        "f",
        "define",
        "define",
        "define",
        "f",
        "g",
        "g",
        "g",
        "g",
        "g",
        "f",
        "e",
        "n",
        "t",
        "i",
        "f",
        "n",
        "i",
        "e",
        "i",
        "require",
        "require",
        "f",
        "c",
        "c",
        "i",
        "u",
        "u",
        "i",
        "i",
        "a",
        "a",
        "n",
        "i",
        "e",
        "i",
        "p",
        "r",
        "e",
        "i",
        "r",
        "o",
        "n",
        "r",
        "p",
        "p",
        "r",
        "e",
        "n",
        "t",
        "n",
        "i",
        "require",
        "require",
        "i",
        "t",
        "i",
        "o",
        "t",
        "i",
        "o",
        "r",
        "_dereq_",
        "exports",
        "Body",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "Body",
        "Body",
        "Body",
        "Body",
        "Body",
        "options",
        "Common",
        "Vertices",
        "Common",
        "defaults",
        "options",
        "_initProperties",
        "body",
        "options",
        "body",
        "Body",
        "isNonColliding",
        "isNonColliding",
        "Body",
        "Body",
        "Body",
        "Body",
        "Body",
        "Body",
        "body",
        "options",
        "options",
        "options",
        "Body",
        "body",
        "body",
        "Bounds",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "Vertices",
        "body",
        "body",
        "body",
        "Axes",
        "body",
        "body",
        "Bounds",
        "body",
        "body",
        "body",
        "Body",
        "body",
        "options",
        "body",
        "options",
        "body",
        "options",
        "body",
        "options",
        "body",
        "body",
        "Common",
        "body",
        "body",
        "defaultFillStyle",
        "body",
        "body",
        "defaultStrokeStyle",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "Body",
        "body",
        "settings",
        "value",
        "settings",
        "property",
        "settings",
        "settings",
        "settings",
        "property",
        "value",
        "property",
        "settings",
        "value",
        "settings",
        "property",
        "settings",
        "property",
        "property",
        "Body",
        "body",
        "value",
        "Sleeping",
        "body",
        "value",
        "Body",
        "body",
        "value",
        "Body",
        "body",
        "value",
        "Body",
        "body",
        "value",
        "Body",
        "body",
        "value",
        "Body",
        "body",
        "value",
        "Body",
        "body",
        "value",
        "Body",
        "body",
        "value",
        "Body",
        "body",
        "value",
        "Body",
        "body",
        "value",
        "body",
        "property",
        "value",
        "Body",
        "body",
        "isStatic",
        "i",
        "body",
        "i",
        "body",
        "i",
        "part",
        "isStatic",
        "isStatic",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "Infinity",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "Body",
        "body",
        "mass",
        "body",
        "body",
        "body",
        "moment",
        "mass",
        "body",
        "body",
        "body",
        "mass",
        "body",
        "body",
        "body",
        "body",
        "body",
        "Body",
        "body",
        "density",
        "Body",
        "body",
        "density",
        "body",
        "body",
        "density",
        "Body",
        "body",
        "inertia",
        "body",
        "inertia",
        "body",
        "body",
        "Body",
        "body",
        "vertices",
        "vertices",
        "body",
        "body",
        "vertices",
        "body",
        "Vertices",
        "vertices",
        "body",
        "body",
        "Axes",
        "body",
        "body",
        "Vertices",
        "body",
        "Body",
        "body",
        "body",
        "body",
        "Vertices",
        "body",
        "Vertices",
        "body",
        "centre",
        "Body",
        "body",
        "Body",
        "Vertices",
        "body",
        "body",
        "Vertices",
        "body",
        "body",
        "Bounds",
        "body",
        "body",
        "body",
        "Body",
        "body",
        "parts",
        "autoHull",
        "parts",
        "parts",
        "body",
        "body",
        "body",
        "body",
        "body",
        "i",
        "i",
        "parts",
        "i",
        "parts",
        "i",
        "part",
        "body",
        "part",
        "body",
        "body",
        "part",
        "body",
        "autoHull",
        "autoHull",
        "autoHull",
        "autoHull",
        "i",
        "i",
        "parts",
        "i",
        "vertices",
        "vertices",
        "parts",
        "i",
        "Vertices",
        "vertices",
        "Vertices",
        "vertices",
        "Vertices",
        "hull",
        "Body",
        "body",
        "hull",
        "Vertices",
        "body",
        "hullCentre",
        "Body",
        "body",
        "body",
        "total",
        "body",
        "body",
        "body",
        "total",
        "body",
        "total",
        "body",
        "total",
        "body",
        "total",
        "Body",
        "body",
        "total",
        "Body",
        "body",
        "total",
        "Body",
        "body",
        "total",
        "Body",
        "body",
        "position",
        "position",
        "body",
        "body",
        "delta",
        "body",
        "delta",
        "i",
        "body",
        "i",
        "body",
        "i",
        "part",
        "delta",
        "part",
        "delta",
        "Vertices",
        "part",
        "delta",
        "Bounds",
        "part",
        "part",
        "body",
        "Body",
        "body",
        "angle",
        "angle",
        "body",
        "body",
        "delta",
        "i",
        "body",
        "i",
        "body",
        "i",
        "part",
        "delta",
        "Vertices",
        "part",
        "delta",
        "body",
        "Axes",
        "part",
        "delta",
        "Bounds",
        "part",
        "part",
        "body",
        "i",
        "part",
        "delta",
        "body",
        "part",
        "Body",
        "body",
        "velocity",
        "body",
        "body",
        "velocity",
        "body",
        "body",
        "velocity",
        "body",
        "velocity",
        "body",
        "velocity",
        "body",
        "body",
        "Body",
        "body",
        "velocity",
        "body",
        "body",
        "velocity",
        "body",
        "velocity",
        "body",
        "body",
        "Body",
        "body",
        "translation",
        "Body",
        "body",
        "body",
        "translation",
        "Body",
        "body",
        "rotation",
        "point",
        "point",
        "Body",
        "body",
        "body",
        "rotation",
        "rotation",
        "rotation",
        "body",
        "point",
        "body",
        "point",
        "Body",
        "body",
        "point",
        "dx",
        "cos",
        "dy",
        "sin",
        "point",
        "dx",
        "sin",
        "dy",
        "cos",
        "Body",
        "body",
        "body",
        "rotation",
        "Body",
        "body",
        "scaleX",
        "scaleY",
        "point",
        "point",
        "point",
        "body",
        "i",
        "body",
        "i",
        "body",
        "i",
        "Vertices",
        "part",
        "scaleX",
        "scaleY",
        "point",
        "part",
        "Axes",
        "part",
        "part",
        "Vertices",
        "part",
        "Body",
        "part",
        "body",
        "part",
        "Vertices",
        "part",
        "part",
        "part",
        "Body",
        "part",
        "Body",
        "Vertices",
        "part",
        "part",
        "Vertices",
        "part",
        "part",
        "part",
        "i",
        "totalArea",
        "part",
        "totalInertia",
        "part",
        "part",
        "point",
        "part",
        "point",
        "scaleX",
        "part",
        "point",
        "part",
        "point",
        "scaleY",
        "Bounds",
        "part",
        "part",
        "body",
        "body",
        "body",
        "totalArea",
        "body",
        "Body",
        "body",
        "body",
        "totalArea",
        "Body",
        "body",
        "totalInertia",
        "body",
        "scaleX",
        "scaleY",
        "body",
        "scaleX",
        "body",
        "Body",
        "body",
        "deltaTime",
        "timeScale",
        "correction",
        "deltaTime",
        "timeScale",
        "body",
        "body",
        "timeScale",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "velocityPrevX",
        "frictionAir",
        "correction",
        "body",
        "body",
        "deltaTimeSquared",
        "body",
        "velocityPrevY",
        "frictionAir",
        "correction",
        "body",
        "body",
        "deltaTimeSquared",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "frictionAir",
        "correction",
        "body",
        "body",
        "deltaTimeSquared",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "i",
        "body",
        "i",
        "body",
        "i",
        "Vertices",
        "part",
        "body",
        "i",
        "part",
        "body",
        "part",
        "body",
        "body",
        "Vertices",
        "part",
        "body",
        "body",
        "Axes",
        "part",
        "body",
        "i",
        "part",
        "body",
        "body",
        "part",
        "Bounds",
        "part",
        "part",
        "body",
        "Body",
        "body",
        "position",
        "force",
        "body",
        "force",
        "body",
        "force",
        "position",
        "body",
        "position",
        "body",
        "body",
        "offset",
        "force",
        "offset",
        "force",
        "Body",
        "body",
        "body",
        "i",
        "body",
        "i",
        "body",
        "i",
        "part",
        "Infinity",
        "part",
        "properties",
        "mass",
        "properties",
        "part",
        "properties",
        "part",
        "properties",
        "properties",
        "part",
        "mass",
        "properties",
        "properties",
        "properties",
        "properties",
        "_dereq_",
        "exports",
        "Composite",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "Composite",
        "options",
        "Common",
        "Common",
        "options",
        "Composite",
        "composite",
        "isModified",
        "updateParents",
        "updateChildren",
        "composite",
        "isModified",
        "updateParents",
        "composite",
        "Composite",
        "composite",
        "isModified",
        "updateParents",
        "updateChildren",
        "updateChildren",
        "i",
        "composite",
        "i",
        "composite",
        "i",
        "Composite",
        "childComposite",
        "isModified",
        "updateParents",
        "updateChildren",
        "Composite",
        "composite",
        "Events",
        "composite",
        "i",
        "objects",
        "i",
        "objects",
        "i",
        "obj",
        "obj",
        "obj",
        "Common",
        "Composite",
        "composite",
        "obj",
        "Composite",
        "composite",
        "obj",
        "Composite",
        "composite",
        "obj",
        "Composite",
        "composite",
        "obj",
        "Events",
        "composite",
        "composite",
        "Composite",
        "composite",
        "deep",
        "Events",
        "composite",
        "i",
        "objects",
        "i",
        "objects",
        "i",
        "obj",
        "Composite",
        "composite",
        "obj",
        "deep",
        "Composite",
        "composite",
        "obj",
        "deep",
        "Composite",
        "composite",
        "obj",
        "deep",
        "Composite",
        "composite",
        "obj",
        "Events",
        "composite",
        "composite",
        "Composite",
        "compositeA",
        "compositeB",
        "compositeA",
        "compositeB",
        "compositeB",
        "compositeA",
        "Composite",
        "compositeA",
        "compositeA",
        "Composite",
        "compositeA",
        "compositeB",
        "deep",
        "Common",
        "compositeA",
        "compositeB",
        "position",
        "Composite",
        "compositeA",
        "position",
        "Composite",
        "compositeA",
        "deep",
        "i",
        "compositeA",
        "i",
        "Composite",
        "compositeA",
        "i",
        "compositeB",
        "compositeA",
        "Composite",
        "composite",
        "position",
        "composite",
        "position",
        "Composite",
        "composite",
        "composite",
        "Composite",
        "composite",
        "body",
        "composite",
        "body",
        "Composite",
        "composite",
        "composite",
        "Composite",
        "composite",
        "body",
        "deep",
        "Common",
        "composite",
        "body",
        "position",
        "Composite",
        "composite",
        "position",
        "Composite",
        "composite",
        "deep",
        "i",
        "composite",
        "i",
        "Composite",
        "composite",
        "i",
        "body",
        "composite",
        "Composite",
        "composite",
        "position",
        "composite",
        "position",
        "Composite",
        "composite",
        "composite",
        "Composite",
        "composite",
        "constraint",
        "composite",
        "constraint",
        "Composite",
        "composite",
        "composite",
        "Composite",
        "composite",
        "constraint",
        "deep",
        "Common",
        "composite",
        "constraint",
        "position",
        "Composite",
        "composite",
        "position",
        "deep",
        "i",
        "composite",
        "i",
        "Composite",
        "composite",
        "i",
        "constraint",
        "composite",
        "Composite",
        "composite",
        "position",
        "composite",
        "position",
        "Composite",
        "composite",
        "composite",
        "Composite",
        "composite",
        "keepStatic",
        "deep",
        "deep",
        "i",
        "composite",
        "i",
        "Composite",
        "composite",
        "i",
        "keepStatic",
        "keepStatic",
        "composite",
        "composite",
        "body",
        "body",
        "composite",
        "composite",
        "composite",
        "Composite",
        "composite",
        "composite",
        "Composite",
        "composite",
        "composite",
        "i",
        "composite",
        "i",
        "bodies",
        "bodies",
        "Composite",
        "composite",
        "i",
        "bodies",
        "Composite",
        "composite",
        "composite",
        "i",
        "composite",
        "i",
        "constraints",
        "constraints",
        "Composite",
        "composite",
        "i",
        "constraints",
        "Composite",
        "composite",
        "composite",
        "i",
        "composite",
        "i",
        "composites",
        "composites",
        "Composite",
        "composite",
        "i",
        "composites",
        "Composite",
        "composite",
        "id",
        "objects",
        "Composite",
        "composite",
        "objects",
        "Composite",
        "composite",
        "objects",
        "Composite",
        "composite",
        "composite",
        "objects",
        "objects",
        "id",
        "Composite",
        "compositeA",
        "objects",
        "compositeB",
        "Composite",
        "compositeA",
        "objects",
        "Composite",
        "compositeB",
        "objects",
        "compositeA",
        "Composite",
        "composite",
        "Composite",
        "composite",
        "Composite",
        "composite",
        "Composite",
        "composite",
        "i",
        "objects",
        "i",
        "objects",
        "i",
        "Common",
        "Composite",
        "composite",
        "composite",
        "Composite",
        "composite",
        "translation",
        "recursive",
        "recursive",
        "Composite",
        "composite",
        "composite",
        "i",
        "bodies",
        "i",
        "Body",
        "bodies",
        "i",
        "translation",
        "Composite",
        "composite",
        "composite",
        "Composite",
        "composite",
        "rotation",
        "point",
        "recursive",
        "rotation",
        "rotation",
        "recursive",
        "Composite",
        "composite",
        "composite",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "body",
        "point",
        "body",
        "point",
        "Body",
        "body",
        "point",
        "dx",
        "cos",
        "dy",
        "sin",
        "point",
        "dx",
        "sin",
        "dy",
        "cos",
        "Body",
        "body",
        "rotation",
        "Composite",
        "composite",
        "composite",
        "Composite",
        "composite",
        "scaleX",
        "scaleY",
        "point",
        "recursive",
        "recursive",
        "Composite",
        "composite",
        "composite",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "body",
        "point",
        "body",
        "point",
        "Body",
        "body",
        "point",
        "dx",
        "scaleX",
        "point",
        "dy",
        "scaleY",
        "Body",
        "body",
        "scaleX",
        "scaleY",
        "Composite",
        "composite",
        "composite",
        "Composite",
        "composite",
        "Composite",
        "composite",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "vertices",
        "body",
        "body",
        "Bounds",
        "vertices",
        "_dereq_",
        "exports",
        "World",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "World",
        "options",
        "Composite",
        "Infinity",
        "Infinity",
        "Infinity",
        "Infinity",
        "Common",
        "composite",
        "defaults",
        "options",
        "_dereq_",
        "exports",
        "Contact",
        "Contact",
        "vertex",
        "Contact",
        "vertex",
        "vertex",
        "Contact",
        "vertex",
        "vertex",
        "vertex",
        "_dereq_",
        "exports",
        "Detector",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "Detector",
        "broadphasePairs",
        "engine",
        "engine",
        "i",
        "broadphasePairs",
        "i",
        "broadphasePairs",
        "i",
        "broadphasePairs",
        "i",
        "bodyA",
        "bodyA",
        "bodyB",
        "bodyB",
        "Detector",
        "bodyA",
        "bodyB",
        "Bounds",
        "bodyA",
        "bodyB",
        "bodyA",
        "j",
        "bodyA",
        "j",
        "bodyA",
        "j",
        "bodyB",
        "k",
        "bodyB",
        "k",
        "bodyB",
        "k",
        "partA",
        "bodyA",
        "partB",
        "bodyB",
        "Bounds",
        "partA",
        "partB",
        "Pair",
        "partA",
        "partB",
        "pairsTable",
        "pairId",
        "pair",
        "pair",
        "previousCollision",
        "pair",
        "previousCollision",
        "SAT",
        "partA",
        "partB",
        "previousCollision",
        "collision",
        "collisions",
        "collision",
        "collisions",
        "Detector",
        "filterA",
        "filterB",
        "filterA",
        "filterB",
        "filterA",
        "filterA",
        "filterA",
        "filterB",
        "filterB",
        "filterA",
        "_dereq_",
        "exports",
        "Grid",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "Grid",
        "options",
        "Grid",
        "Detector",
        "Common",
        "defaults",
        "options",
        "Grid",
        "grid",
        "bodies",
        "engine",
        "forceUpdate",
        "engine",
        "grid",
        "i",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "body",
        "forceUpdate",
        "body",
        "world",
        "body",
        "world",
        "body",
        "world",
        "body",
        "world",
        "Grid",
        "grid",
        "body",
        "body",
        "newRegion",
        "body",
        "forceUpdate",
        "body",
        "forceUpdate",
        "body",
        "newRegion",
        "Grid",
        "newRegion",
        "body",
        "col",
        "union",
        "col",
        "union",
        "col",
        "row",
        "union",
        "row",
        "union",
        "row",
        "bucketId",
        "Grid",
        "col",
        "row",
        "bucket",
        "buckets",
        "bucketId",
        "col",
        "newRegion",
        "col",
        "newRegion",
        "row",
        "newRegion",
        "row",
        "newRegion",
        "col",
        "body",
        "col",
        "body",
        "row",
        "body",
        "row",
        "body",
        "isInsideNewRegion",
        "isInsideOldRegion",
        "isInsideOldRegion",
        "bucket",
        "Grid",
        "grid",
        "bucket",
        "body",
        "body",
        "newRegion",
        "isInsideNewRegion",
        "isInsideOldRegion",
        "forceUpdate",
        "bucket",
        "bucket",
        "Grid",
        "buckets",
        "bucketId",
        "Grid",
        "grid",
        "bucket",
        "body",
        "body",
        "newRegion",
        "gridChanged",
        "gridChanged",
        "grid",
        "Grid",
        "grid",
        "Grid",
        "grid",
        "grid",
        "grid",
        "grid",
        "Grid",
        "regionA",
        "regionB",
        "regionA",
        "regionB",
        "regionA",
        "regionB",
        "regionA",
        "regionB",
        "regionA",
        "regionB",
        "Grid",
        "startCol",
        "endCol",
        "startRow",
        "endRow",
        "Grid",
        "grid",
        "body",
        "body",
        "bounds",
        "grid",
        "bounds",
        "grid",
        "bounds",
        "grid",
        "bounds",
        "grid",
        "Grid",
        "startCol",
        "endCol",
        "startRow",
        "endRow",
        "Grid",
        "startCol",
        "endCol",
        "startRow",
        "endRow",
        "startCol",
        "endCol",
        "startRow",
        "endRow",
        "startCol",
        "endCol",
        "startRow",
        "endRow",
        "Grid",
        "column",
        "row",
        "column",
        "row",
        "Grid",
        "buckets",
        "bucketId",
        "buckets",
        "bucketId",
        "bucket",
        "Grid",
        "grid",
        "bucket",
        "body",
        "i",
        "bucket",
        "i",
        "bucket",
        "i",
        "body",
        "bodyB",
        "body",
        "bodyB",
        "Pair",
        "body",
        "bodyB",
        "grid",
        "pairId",
        "pair",
        "pair",
        "grid",
        "pairId",
        "body",
        "bodyB",
        "bucket",
        "body",
        "Grid",
        "grid",
        "bucket",
        "body",
        "bucket",
        "Common",
        "bucket",
        "body",
        "i",
        "bucket",
        "i",
        "bucket",
        "i",
        "Pair",
        "body",
        "bodyB",
        "grid",
        "pairId",
        "pair",
        "pair",
        "Grid",
        "grid",
        "pairKeys",
        "Common",
        "grid",
        "k",
        "pairKeys",
        "k",
        "pair",
        "grid",
        "pairKeys",
        "k",
        "pair",
        "pairs",
        "pair",
        "grid",
        "pairKeys",
        "k",
        "pairs",
        "_dereq_",
        "exports",
        "Pair",
        "_dereq_",
        "Pair",
        "collision",
        "timestamp",
        "collision",
        "collision",
        "collision",
        "collision",
        "Pair",
        "bodyA",
        "bodyB",
        "bodyA",
        "bodyB",
        "bodyA",
        "bodyB",
        "timestamp",
        "timestamp",
        "parentA",
        "parentB",
        "parentA",
        "parentB",
        "parentA",
        "parentB",
        "parentA",
        "parentB",
        "parentA",
        "parentB",
        "Pair",
        "pair",
        "collision",
        "timestamp",
        "pair",
        "Pair",
        "pair",
        "collision",
        "timestamp",
        "pair",
        "collision",
        "pair",
        "collision",
        "collision",
        "pair",
        "collision",
        "pair",
        "parentA",
        "parentB",
        "pair",
        "parentA",
        "parentB",
        "pair",
        "parentA",
        "parentB",
        "pair",
        "parentA",
        "parentB",
        "pair",
        "parentA",
        "parentB",
        "activeContacts",
        "collision",
        "i",
        "supports",
        "i",
        "supports",
        "i",
        "Contact",
        "support",
        "contacts",
        "contactId",
        "contact",
        "activeContacts",
        "contact",
        "activeContacts",
        "contacts",
        "contactId",
        "Contact",
        "support",
        "pair",
        "collision",
        "Pair",
        "pair",
        "timestamp",
        "pair",
        "Pair",
        "pair",
        "timestamp",
        "Pair",
        "pair",
        "isActive",
        "timestamp",
        "isActive",
        "pair",
        "pair",
        "timestamp",
        "pair",
        "pair",
        "Pair",
        "bodyA",
        "bodyB",
        "bodyA",
        "bodyB",
        "bodyA",
        "bodyB",
        "bodyB",
        "bodyA",
        "_dereq_",
        "exports",
        "Pairs",
        "_dereq_",
        "_dereq_",
        "Pairs",
        "Pairs",
        "options",
        "Common",
        "options",
        "Pairs",
        "pairs",
        "collisions",
        "timestamp",
        "pairs",
        "pairs",
        "pairs",
        "pairs",
        "pairs",
        "collisionStart",
        "collisionEnd",
        "collisionActive",
        "i",
        "i",
        "collisions",
        "i",
        "collision",
        "collisions",
        "i",
        "collision",
        "pairId",
        "Pair",
        "collision",
        "collision",
        "activePairIds",
        "pairId",
        "pair",
        "pairsTable",
        "pairId",
        "pair",
        "pair",
        "collisionActive",
        "pair",
        "collisionStart",
        "pair",
        "Pair",
        "pair",
        "collision",
        "timestamp",
        "pair",
        "Pair",
        "collision",
        "timestamp",
        "pairsTable",
        "pairId",
        "pair",
        "collisionStart",
        "pair",
        "pairsList",
        "pair",
        "i",
        "i",
        "pairsList",
        "i",
        "pair",
        "pairsList",
        "i",
        "pair",
        "Common",
        "activePairIds",
        "pair",
        "Pair",
        "pair",
        "timestamp",
        "collisionEnd",
        "pair",
        "Pairs",
        "pairs",
        "timestamp",
        "pairs",
        "pairs",
        "i",
        "i",
        "pairsList",
        "i",
        "pair",
        "pairsList",
        "i",
        "collision",
        "pair",
        "collision",
        "collision",
        "pair",
        "timestamp",
        "timestamp",
        "pair",
        "Pairs",
        "indexesToRemove",
        "i",
        "i",
        "i",
        "indexesToRemove",
        "i",
        "pairIndex",
        "indexesToRemove",
        "i",
        "i",
        "pair",
        "pairsList",
        "pairIndex",
        "pairsTable",
        "pair",
        "pairsList",
        "pairIndex",
        "Pairs",
        "pairs",
        "pairs",
        "pairs",
        "pairs",
        "pairs",
        "pairs",
        "pairs",
        "_dereq_",
        "exports",
        "Query",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "Query",
        "body",
        "bodies",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "Bounds",
        "bodyA",
        "body",
        "bodyA",
        "j",
        "bodyA",
        "j",
        "bodyA",
        "j",
        "Bounds",
        "part",
        "body",
        "SAT",
        "part",
        "body",
        "collision",
        "collisions",
        "collision",
        "collisions",
        "Query",
        "bodies",
        "startPoint",
        "endPoint",
        "rayWidth",
        "rayWidth",
        "rayWidth",
        "startPoint",
        "endPoint",
        "startPoint",
        "endPoint",
        "endPoint",
        "startPoint",
        "endPoint",
        "startPoint",
        "Bodies",
        "rayX",
        "rayY",
        "rayLength",
        "rayWidth",
        "rayAngle",
        "Query",
        "ray",
        "bodies",
        "i",
        "collisions",
        "i",
        "collisions",
        "i",
        "collision",
        "collision",
        "collision",
        "collisions",
        "Query",
        "bodies",
        "bounds",
        "outside",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "Bounds",
        "body",
        "bounds",
        "overlaps",
        "outside",
        "overlaps",
        "outside",
        "result",
        "body",
        "result",
        "Query",
        "bodies",
        "point",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "Bounds",
        "body",
        "point",
        "body",
        "j",
        "body",
        "j",
        "body",
        "j",
        "Bounds",
        "part",
        "point",
        "Vertices",
        "part",
        "point",
        "result",
        "body",
        "result",
        "_dereq_",
        "exports",
        "Resolver",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "Resolver",
        "Resolver",
        "Resolver",
        "Resolver",
        "Resolver",
        "Resolver",
        "pairs",
        "i",
        "i",
        "pairs",
        "i",
        "pair",
        "pairs",
        "i",
        "pair",
        "activeCount",
        "pair",
        "pair",
        "activeCount",
        "pair",
        "activeCount",
        "Resolver",
        "pairs",
        "timeScale",
        "i",
        "i",
        "pairs",
        "i",
        "pair",
        "pairs",
        "i",
        "pair",
        "pair",
        "collision",
        "pair",
        "bodyA",
        "collision",
        "bodyB",
        "collision",
        "normal",
        "collision",
        "bodyBtoA",
        "bodyB",
        "bodyB",
        "tempA",
        "bodyA",
        "bodyB",
        "collision",
        "tempB",
        "tempC",
        "tempD",
        "pair",
        "normal",
        "bodyBtoA",
        "i",
        "i",
        "pairs",
        "i",
        "pair",
        "pairs",
        "i",
        "pair",
        "pair",
        "collision",
        "pair",
        "bodyA",
        "collision",
        "bodyB",
        "collision",
        "normal",
        "collision",
        "positionImpulse",
        "pair",
        "pair",
        "timeScale",
        "bodyA",
        "bodyB",
        "positionImpulse",
        "bodyA",
        "bodyA",
        "contactShare",
        "Resolver",
        "bodyA",
        "bodyA",
        "normal",
        "positionImpulse",
        "contactShare",
        "bodyA",
        "normal",
        "positionImpulse",
        "contactShare",
        "bodyB",
        "bodyB",
        "contactShare",
        "Resolver",
        "bodyB",
        "bodyB",
        "normal",
        "positionImpulse",
        "contactShare",
        "bodyB",
        "normal",
        "positionImpulse",
        "contactShare",
        "Resolver",
        "bodies",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "body",
        "body",
        "body",
        "j",
        "body",
        "j",
        "body",
        "j",
        "Vertices",
        "part",
        "body",
        "Bounds",
        "part",
        "part",
        "body",
        "part",
        "body",
        "part",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "Resolver",
        "body",
        "Resolver",
        "Resolver",
        "pairs",
        "i",
        "i",
        "pairs",
        "i",
        "pair",
        "pairs",
        "i",
        "pair",
        "pair",
        "contacts",
        "pair",
        "collision",
        "pair",
        "bodyA",
        "collision",
        "bodyB",
        "collision",
        "normal",
        "collision",
        "tangent",
        "collision",
        "j",
        "j",
        "contacts",
        "j",
        "contact",
        "contacts",
        "j",
        "contactVertex",
        "contact",
        "normalImpulse",
        "contact",
        "tangentImpulse",
        "contact",
        "normalImpulse",
        "tangentImpulse",
        "impulse",
        "normal",
        "normalImpulse",
        "tangent",
        "tangentImpulse",
        "impulse",
        "normal",
        "normalImpulse",
        "tangent",
        "tangentImpulse",
        "bodyA",
        "bodyA",
        "offset",
        "contactVertex",
        "bodyA",
        "tempA",
        "bodyA",
        "impulse",
        "bodyA",
        "bodyA",
        "impulse",
        "bodyA",
        "bodyA",
        "offset",
        "impulse",
        "bodyA",
        "bodyB",
        "bodyB",
        "offset",
        "contactVertex",
        "bodyB",
        "tempA",
        "bodyB",
        "impulse",
        "bodyB",
        "bodyB",
        "impulse",
        "bodyB",
        "bodyB",
        "offset",
        "impulse",
        "bodyB",
        "Resolver",
        "pairs",
        "timeScale",
        "timeScale",
        "timeScale",
        "i",
        "pairs",
        "i",
        "pairs",
        "i",
        "pair",
        "pair",
        "pair",
        "collision",
        "collision",
        "collision",
        "collision",
        "pair",
        "contacts",
        "bodyA",
        "bodyA",
        "bodyA",
        "bodyA",
        "bodyA",
        "bodyA",
        "bodyB",
        "bodyB",
        "bodyB",
        "bodyB",
        "bodyB",
        "bodyB",
        "bodyA",
        "bodyA",
        "bodyA",
        "bodyB",
        "bodyB",
        "bodyB",
        "j",
        "contacts",
        "j",
        "contacts",
        "j",
        "contact",
        "contactVertex",
        "bodyA",
        "tempA",
        "contactVertex",
        "bodyB",
        "tempB",
        "bodyA",
        "offsetA",
        "bodyA",
        "tempC",
        "bodyB",
        "offsetB",
        "bodyB",
        "tempD",
        "velocityPointA",
        "velocityPointB",
        "tempE",
        "normal",
        "relativeVelocity",
        "tangent",
        "relativeVelocity",
        "tangentVelocity",
        "Common",
        "tangentVelocity",
        "pair",
        "normalVelocity",
        "Common",
        "pair",
        "normalVelocity",
        "Resolver",
        "tangentSpeed",
        "pair",
        "pair",
        "normalForce",
        "timeScaleSquared",
        "maxFriction",
        "tangentSpeed",
        "tangentImpulse",
        "Common",
        "pair",
        "tangentVelocityDirection",
        "timeScaleSquared",
        "maxFriction",
        "maxFriction",
        "offsetA",
        "normal",
        "offsetB",
        "normal",
        "contactShare",
        "bodyA",
        "bodyB",
        "bodyA",
        "oAcN",
        "oAcN",
        "bodyB",
        "oBcN",
        "oBcN",
        "normalImpulse",
        "share",
        "tangentImpulse",
        "share",
        "normalVelocity",
        "normalVelocity",
        "normalVelocity",
        "Resolver",
        "timeScaleSquared",
        "contact",
        "contact",
        "contact",
        "contact",
        "normalImpulse",
        "normalImpulse",
        "contact",
        "contactNormalImpulse",
        "tangentVelocity",
        "tangentVelocity",
        "Resolver",
        "timeScaleSquared",
        "contact",
        "contact",
        "contact",
        "Common",
        "contact",
        "tangentImpulse",
        "maxFriction",
        "maxFriction",
        "tangentImpulse",
        "contact",
        "contactTangentImpulse",
        "impulse",
        "normal",
        "normalImpulse",
        "tangent",
        "tangentImpulse",
        "impulse",
        "normal",
        "normalImpulse",
        "tangent",
        "tangentImpulse",
        "bodyA",
        "bodyA",
        "bodyA",
        "impulse",
        "bodyA",
        "bodyA",
        "impulse",
        "bodyA",
        "bodyA",
        "offsetA",
        "impulse",
        "bodyA",
        "bodyB",
        "bodyB",
        "bodyB",
        "impulse",
        "bodyB",
        "bodyB",
        "impulse",
        "bodyB",
        "bodyB",
        "offsetB",
        "impulse",
        "bodyB",
        "_dereq_",
        "exports",
        "SAT",
        "_dereq_",
        "_dereq_",
        "SAT",
        "bodyA",
        "bodyB",
        "previousCollision",
        "previousCollision",
        "bodyA",
        "bodyB",
        "parentA",
        "parentA",
        "parentA",
        "parentA",
        "parentB",
        "parentB",
        "parentB",
        "parentB",
        "canReusePrevCol",
        "previousCollision",
        "previousCollision",
        "motion",
        "collision",
        "previousCollision",
        "collision",
        "bodyA",
        "bodyB",
        "previousCollision",
        "canReusePrevCol",
        "collision",
        "axisBodyA",
        "bodyA",
        "bodyB",
        "bodyA",
        "axisBodyA",
        "previousCollision",
        "minOverlap",
        "SAT",
        "axisBodyA",
        "axisBodyB",
        "axes",
        "collision",
        "minOverlap",
        "collision",
        "collision",
        "overlapAB",
        "SAT",
        "bodyA",
        "bodyB",
        "bodyA",
        "overlapAB",
        "collision",
        "collision",
        "overlapBA",
        "SAT",
        "bodyB",
        "bodyA",
        "bodyB",
        "overlapBA",
        "collision",
        "collision",
        "overlapAB",
        "overlapBA",
        "minOverlap",
        "overlapAB",
        "collision",
        "bodyA",
        "minOverlap",
        "overlapBA",
        "collision",
        "bodyB",
        "collision",
        "minOverlap",
        "collision",
        "bodyA",
        "bodyB",
        "bodyA",
        "bodyB",
        "collision",
        "bodyA",
        "bodyB",
        "bodyB",
        "bodyA",
        "collision",
        "collision",
        "minOverlap",
        "collision",
        "collision",
        "collision",
        "collision",
        "bodyA",
        "collision",
        "bodyB",
        "collision",
        "minOverlap",
        "bodyB",
        "bodyA",
        "collision",
        "minOverlap",
        "minOverlap",
        "collision",
        "minOverlap",
        "minOverlap",
        "collision",
        "collision",
        "collision",
        "collision",
        "collision",
        "collision",
        "collision",
        "collision",
        "collision",
        "collision",
        "SAT",
        "bodyA",
        "bodyB",
        "collision",
        "Vertices",
        "bodyA",
        "verticesB",
        "supports",
        "verticesB",
        "Vertices",
        "bodyA",
        "verticesB",
        "supports",
        "verticesB",
        "supports",
        "SAT",
        "bodyB",
        "bodyA",
        "collision",
        "Vertices",
        "bodyB",
        "verticesA",
        "supports",
        "verticesA",
        "supports",
        "Vertices",
        "bodyB",
        "verticesA",
        "supports",
        "verticesA",
        "supports",
        "supports",
        "verticesB",
        "collision",
        "supports",
        "collision",
        "SAT",
        "verticesA",
        "verticesB",
        "axes",
        "i",
        "axes",
        "i",
        "axis",
        "axes",
        "i",
        "SAT",
        "projectionA",
        "verticesA",
        "axis",
        "SAT",
        "projectionB",
        "verticesB",
        "axis",
        "overlap",
        "projectionA",
        "projectionB",
        "projectionB",
        "projectionA",
        "overlap",
        "result",
        "overlap",
        "result",
        "overlap",
        "result",
        "result",
        "overlap",
        "result",
        "axis",
        "result",
        "i",
        "result",
        "SAT",
        "projection",
        "vertices",
        "axis",
        "vertices",
        "axis",
        "i",
        "vertices",
        "i",
        "vertices",
        "i",
        "axis",
        "dot",
        "max",
        "max",
        "dot",
        "dot",
        "min",
        "min",
        "dot",
        "projection",
        "min",
        "projection",
        "max",
        "SAT",
        "bodyA",
        "bodyB",
        "normal",
        "bodyB",
        "bodyA",
        "i",
        "vertices",
        "i",
        "vertex",
        "vertices",
        "i",
        "vertexToBody",
        "vertex",
        "bodyAPosition",
        "vertexToBody",
        "vertex",
        "bodyAPosition",
        "distance",
        "normal",
        "vertexToBody",
        "distance",
        "nearestDistance",
        "nearestDistance",
        "distance",
        "vertexA",
        "vertex",
        "vertexA",
        "vertexA",
        "vertices",
        "vertex",
        "vertices",
        "prevIndex",
        "vertexToBody",
        "vertex",
        "bodyAPosition",
        "vertexToBody",
        "vertex",
        "bodyAPosition",
        "nearestDistance",
        "normal",
        "vertexToBody",
        "vertexB",
        "vertex",
        "vertexA",
        "vertices",
        "vertex",
        "vertices",
        "nextIndex",
        "vertexToBody",
        "vertex",
        "bodyAPosition",
        "vertexToBody",
        "vertex",
        "bodyAPosition",
        "distance",
        "normal",
        "vertexToBody",
        "distance",
        "nearestDistance",
        "vertexB",
        "vertex",
        "vertexA",
        "vertexB",
        "_dereq_",
        "exports",
        "Constraint",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "Constraint",
        "Constraint",
        "Constraint",
        "Constraint",
        "options",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "initialPointA",
        "initialPointB",
        "constraint",
        "constraint",
        "constraint",
        "length",
        "constraint",
        "constraint",
        "Common",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "render",
        "render",
        "constraint",
        "render",
        "constraint",
        "Common",
        "render",
        "constraint",
        "constraint",
        "Constraint",
        "bodies",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "body",
        "body",
        "impulse",
        "impulse",
        "impulse",
        "body",
        "impulse",
        "body",
        "impulse",
        "body",
        "impulse",
        "Constraint",
        "constraints",
        "timeScale",
        "i",
        "constraints",
        "i",
        "constraints",
        "i",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "fixedA",
        "fixedB",
        "Constraint",
        "constraints",
        "i",
        "timeScale",
        "i",
        "i",
        "constraints",
        "i",
        "constraint",
        "constraints",
        "i",
        "fixedA",
        "constraint",
        "constraint",
        "constraint",
        "fixedB",
        "constraint",
        "constraint",
        "constraint",
        "fixedA",
        "fixedB",
        "Constraint",
        "constraints",
        "i",
        "timeScale",
        "Constraint",
        "constraint",
        "timeScale",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "bodyA",
        "bodyB",
        "bodyA",
        "bodyA",
        "pointA",
        "bodyA",
        "constraint",
        "pointA",
        "constraint",
        "bodyA",
        "bodyB",
        "bodyB",
        "pointB",
        "bodyB",
        "constraint",
        "pointB",
        "constraint",
        "bodyB",
        "bodyA",
        "pointAWorld",
        "bodyA",
        "pointA",
        "bodyB",
        "pointBWorld",
        "bodyB",
        "pointB",
        "pointAWorld",
        "pointBWorld",
        "pointAWorld",
        "pointBWorld",
        "delta",
        "currentLength",
        "Constraint",
        "currentLength",
        "Constraint",
        "currentLength",
        "constraint",
        "currentLength",
        "constraint",
        "constraint",
        "timeScale",
        "constraint",
        "delta",
        "difference",
        "stiffness",
        "bodyA",
        "bodyA",
        "bodyB",
        "bodyB",
        "bodyA",
        "bodyA",
        "bodyB",
        "bodyB",
        "massTotal",
        "inertiaTotal",
        "constraint",
        "normal",
        "delta",
        "currentLength",
        "relativeVelocity",
        "bodyB",
        "bodyB",
        "bodyB",
        "zero",
        "bodyA",
        "bodyA",
        "bodyA",
        "zero",
        "normalVelocity",
        "normal",
        "relativeVelocity",
        "bodyA",
        "bodyA",
        "share",
        "bodyA",
        "massTotal",
        "bodyA",
        "force",
        "share",
        "bodyA",
        "force",
        "share",
        "bodyA",
        "force",
        "share",
        "bodyA",
        "force",
        "share",
        "constraint",
        "bodyA",
        "constraint",
        "normal",
        "normalVelocity",
        "share",
        "bodyA",
        "constraint",
        "normal",
        "normalVelocity",
        "share",
        "torque",
        "pointA",
        "force",
        "resistanceTotal",
        "Constraint",
        "bodyA",
        "constraint",
        "bodyA",
        "torque",
        "bodyA",
        "torque",
        "bodyB",
        "bodyB",
        "share",
        "bodyB",
        "massTotal",
        "bodyB",
        "force",
        "share",
        "bodyB",
        "force",
        "share",
        "bodyB",
        "force",
        "share",
        "bodyB",
        "force",
        "share",
        "constraint",
        "bodyB",
        "constraint",
        "normal",
        "normalVelocity",
        "share",
        "bodyB",
        "constraint",
        "normal",
        "normalVelocity",
        "share",
        "torque",
        "pointB",
        "force",
        "resistanceTotal",
        "Constraint",
        "bodyB",
        "constraint",
        "bodyB",
        "torque",
        "bodyB",
        "torque",
        "Constraint",
        "bodies",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "body",
        "body",
        "impulse",
        "impulse",
        "impulse",
        "Sleeping",
        "body",
        "j",
        "body",
        "j",
        "body",
        "j",
        "Vertices",
        "part",
        "impulse",
        "j",
        "part",
        "impulse",
        "part",
        "impulse",
        "impulse",
        "Vertices",
        "part",
        "impulse",
        "body",
        "Axes",
        "part",
        "impulse",
        "j",
        "part",
        "impulse",
        "body",
        "part",
        "Bounds",
        "part",
        "part",
        "body",
        "impulse",
        "Constraint",
        "impulse",
        "Constraint",
        "impulse",
        "Constraint",
        "_dereq_",
        "exports",
        "MouseConstraint",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "MouseConstraint",
        "engine",
        "options",
        "engine",
        "engine",
        "options",
        "options",
        "mouse",
        "engine",
        "engine",
        "engine",
        "mouse",
        "Mouse",
        "engine",
        "options",
        "options",
        "mouse",
        "Mouse",
        "options",
        "mouse",
        "Mouse",
        "Common",
        "Constraint",
        "mouse",
        "mouse",
        "constraint",
        "Common",
        "defaults",
        "options",
        "Events",
        "engine",
        "Composite",
        "engine",
        "MouseConstraint",
        "mouseConstraint",
        "allBodies",
        "MouseConstraint",
        "mouseConstraint",
        "mouseConstraint",
        "MouseConstraint",
        "mouseConstraint",
        "bodies",
        "mouseConstraint",
        "mouseConstraint",
        "mouseConstraint",
        "mouse",
        "constraint",
        "i",
        "bodies",
        "i",
        "body",
        "bodies",
        "i",
        "Bounds",
        "body",
        "mouse",
        "Detector",
        "body",
        "mouseConstraint",
        "body",
        "j",
        "body",
        "j",
        "body",
        "j",
        "Vertices",
        "part",
        "mouse",
        "constraint",
        "mouse",
        "constraint",
        "mouseConstraint",
        "body",
        "constraint",
        "mouse",
        "body",
        "mouse",
        "body",
        "constraint",
        "body",
        "Sleeping",
        "body",
        "Events",
        "mouseConstraint",
        "mouse",
        "body",
        "Sleeping",
        "constraint",
        "constraint",
        "mouse",
        "constraint",
        "mouseConstraint",
        "constraint",
        "body",
        "Events",
        "mouseConstraint",
        "mouse",
        "body",
        "MouseConstraint",
        "mouseConstraint",
        "mouseConstraint",
        "mouse",
        "mouseEvents",
        "Events",
        "mouseConstraint",
        "mouse",
        "mouseEvents",
        "Events",
        "mouseConstraint",
        "mouse",
        "mouseEvents",
        "Events",
        "mouseConstraint",
        "mouse",
        "Mouse",
        "mouse",
        "_dereq_",
        "exports",
        "Common",
        "Common",
        "Common",
        "Common",
        "Common",
        "obj",
        "deep",
        "deep",
        "argsStart",
        "deepClone",
        "deep",
        "argsStart",
        "deepClone",
        "i",
        "arguments",
        "i",
        "arguments",
        "i",
        "source",
        "prop",
        "source",
        "deepClone",
        "source",
        "prop",
        "source",
        "prop",
        "obj",
        "prop",
        "obj",
        "prop",
        "obj",
        "prop",
        "obj",
        "prop",
        "Common",
        "obj",
        "prop",
        "deepClone",
        "source",
        "prop",
        "obj",
        "prop",
        "source",
        "prop",
        "obj",
        "prop",
        "source",
        "prop",
        "obj",
        "Common",
        "obj",
        "deep",
        "Common",
        "deep",
        "obj",
        "Common",
        "obj",
        "obj",
        "key",
        "obj",
        "keys",
        "key",
        "keys",
        "Common",
        "obj",
        "obj",
        "i",
        "keys",
        "i",
        "values",
        "obj",
        "keys",
        "i",
        "values",
        "key",
        "obj",
        "values",
        "obj",
        "key",
        "values",
        "Common",
        "obj",
        "path",
        "begin",
        "end",
        "path",
        "path",
        "begin",
        "end",
        "i",
        "path",
        "i",
        "obj",
        "obj",
        "path",
        "i",
        "obj",
        "Common",
        "obj",
        "path",
        "val",
        "begin",
        "end",
        "path",
        "begin",
        "end",
        "Common",
        "obj",
        "path",
        "parts",
        "parts",
        "val",
        "val",
        "Common",
        "array",
        "array",
        "i",
        "i",
        "Common",
        "i",
        "array",
        "i",
        "array",
        "i",
        "array",
        "j",
        "array",
        "j",
        "temp",
        "array",
        "Common",
        "choices",
        "choices",
        "Common",
        "choices",
        "Common",
        "obj",
        "HTMLElement",
        "obj",
        "HTMLElement",
        "obj",
        "obj",
        "obj",
        "Common",
        "obj",
        "obj",
        "Common",
        "obj",
        "obj",
        "Common",
        "obj",
        "obj",
        "obj",
        "Common",
        "obj",
        "toString",
        "obj",
        "Common",
        "value",
        "min",
        "max",
        "value",
        "min",
        "min",
        "value",
        "max",
        "max",
        "value",
        "Common",
        "value",
        "value",
        "Common",
        "Common",
        "Common",
        "min",
        "max",
        "min",
        "min",
        "min",
        "max",
        "max",
        "max",
        "min",
        "_seededRandom",
        "max",
        "min",
        "Common",
        "Common",
        "Common",
        "Common",
        "colorString",
        "colorString",
        "colorString",
        "colorString",
        "colorString",
        "colorString",
        "colorString",
        "colorString",
        "colorString",
        "colorString",
        "colorString",
        "parseInt",
        "colorString",
        "Common",
        "Common",
        "Common",
        "Common",
        "arguments",
        "Common",
        "Common",
        "Common",
        "arguments",
        "Common",
        "Common",
        "Common",
        "arguments",
        "Common",
        "Common",
        "Common",
        "haystack",
        "needle",
        "haystack",
        "haystack",
        "needle",
        "i",
        "haystack",
        "i",
        "haystack",
        "i",
        "needle",
        "i",
        "Common",
        "func",
        "func",
        "i",
        "i",
        "mapped",
        "func",
        "i",
        "mapped",
        "Common",
        "graph",
        "node",
        "graph",
        "visited",
        "node",
        "temp",
        "node",
        "Common",
        "node",
        "visited",
        "temp",
        "graph",
        "result",
        "result",
        "Common",
        "node",
        "visited",
        "temp",
        "graph",
        "result",
        "graph",
        "node",
        "temp",
        "node",
        "i",
        "neighbors",
        "i",
        "neighbors",
        "i",
        "temp",
        "neighbor",
        "visited",
        "neighbor",
        "Common",
        "neighbor",
        "visited",
        "temp",
        "graph",
        "result",
        "temp",
        "node",
        "visited",
        "node",
        "result",
        "node",
        "Common",
        "i",
        "arguments",
        "i",
        "arguments",
        "i",
        "func",
        "funcs",
        "funcs",
        "func",
        "funcs",
        "func",
        "arguments",
        "arguments",
        "i",
        "l",
        "i",
        "args",
        "i",
        "arguments",
        "i",
        "i",
        "i",
        "funcs",
        "i",
        "funcs",
        "i",
        "lastResult",
        "args",
        "result",
        "lastResult",
        "result",
        "lastResult",
        "chain",
        "funcs",
        "chain",
        "Common",
        "path",
        "func",
        "Common",
        "path",
        "Common",
        "func",
        "Common",
        "path",
        "Common",
        "path",
        "func",
        "Common",
        "path",
        "Common",
        "Common",
        "path",
        "func",
        "Common",
        "globalName",
        "moduleName",
        "globalName",
        "globalName",
        "obj",
        "_dereq_",
        "moduleName",
        "_dereq_",
        "exports",
        "Engine",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "Engine",
        "element",
        "options",
        "options",
        "Common",
        "element",
        "options",
        "element",
        "element",
        "Common",
        "element",
        "element",
        "options",
        "options",
        "element",
        "options",
        "Common",
        "Grid",
        "Common",
        "defaults",
        "options",
        "element",
        "engine",
        "element",
        "Render",
        "engine",
        "Common",
        "renderDefaults",
        "engine",
        "engine",
        "engine",
        "engine",
        "engine",
        "engine",
        "engine",
        "engine",
        "engine",
        "engine",
        "options",
        "World",
        "engine",
        "engine",
        "Pairs",
        "engine",
        "engine",
        "engine",
        "engine",
        "engine",
        "engine",
        "Engine",
        "engine",
        "delta",
        "correction",
        "delta",
        "delta",
        "correction",
        "correction",
        "engine",
        "engine",
        "engine",
        "timing",
        "delta",
        "timing",
        "timing",
        "Events",
        "engine",
        "Composite",
        "world",
        "Composite",
        "world",
        "engine",
        "Sleeping",
        "allBodies",
        "timing",
        "Engine",
        "allBodies",
        "world",
        "Engine",
        "allBodies",
        "delta",
        "timing",
        "correction",
        "world",
        "Constraint",
        "allBodies",
        "i",
        "i",
        "engine",
        "i",
        "Constraint",
        "allConstraints",
        "timing",
        "Constraint",
        "allBodies",
        "broadphase",
        "world",
        "broadphase",
        "broadphase",
        "broadphase",
        "broadphase",
        "allBodies",
        "engine",
        "world",
        "broadphasePairs",
        "broadphase",
        "broadphasePairs",
        "allBodies",
        "world",
        "Composite",
        "world",
        "broadphase",
        "broadphasePairs",
        "engine",
        "engine",
        "timing",
        "Pairs",
        "pairs",
        "collisions",
        "timestamp",
        "Pairs",
        "pairs",
        "timestamp",
        "engine",
        "Sleeping",
        "pairs",
        "timing",
        "pairs",
        "Events",
        "engine",
        "pairs",
        "Resolver",
        "pairs",
        "i",
        "i",
        "engine",
        "i",
        "Resolver",
        "pairs",
        "timing",
        "Resolver",
        "allBodies",
        "Constraint",
        "allBodies",
        "i",
        "i",
        "engine",
        "i",
        "Constraint",
        "allConstraints",
        "timing",
        "Constraint",
        "allBodies",
        "Resolver",
        "pairs",
        "i",
        "i",
        "engine",
        "i",
        "Resolver",
        "pairs",
        "timing",
        "pairs",
        "Events",
        "engine",
        "pairs",
        "pairs",
        "Events",
        "engine",
        "pairs",
        "Engine",
        "allBodies",
        "Events",
        "engine",
        "engine",
        "Engine",
        "engineA",
        "engineB",
        "Common",
        "engineA",
        "engineB",
        "engineB",
        "engineA",
        "engineB",
        "Engine",
        "engineA",
        "Composite",
        "engineA",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "Sleeping",
        "body",
        "body",
        "Common",
        "Engine",
        "engine",
        "engine",
        "Pairs",
        "engine",
        "engine",
        "broadphase",
        "Composite",
        "world",
        "broadphase",
        "broadphase",
        "broadphase",
        "broadphase",
        "bodies",
        "engine",
        "Engine",
        "bodies",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "body",
        "body",
        "body",
        "Engine",
        "bodies",
        "gravity",
        "gravity",
        "gravity",
        "gravity",
        "gravity",
        "gravityScale",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "body",
        "body",
        "body",
        "body",
        "gravity",
        "gravityScale",
        "body",
        "body",
        "gravity",
        "gravityScale",
        "Engine",
        "bodies",
        "deltaTime",
        "timeScale",
        "correction",
        "worldBounds",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "body",
        "body",
        "Body",
        "body",
        "deltaTime",
        "timeScale",
        "correction",
        "_dereq_",
        "exports",
        "Events",
        "_dereq_",
        "Events",
        "eventNames",
        "callback",
        "eventNames",
        "i",
        "names",
        "i",
        "name",
        "names",
        "i",
        "name",
        "name",
        "name",
        "callback",
        "callback",
        "Events",
        "eventNames",
        "callback",
        "eventNames",
        "eventNames",
        "callback",
        "eventNames",
        "eventNames",
        "Common",
        "eventNames",
        "i",
        "names",
        "i",
        "names",
        "i",
        "callback",
        "callbacks",
        "j",
        "callbacks",
        "j",
        "callbacks",
        "j",
        "callback",
        "newCallbacks",
        "callbacks",
        "j",
        "names",
        "i",
        "newCallbacks",
        "Events",
        "eventNames",
        "names",
        "eventNames",
        "i",
        "names",
        "i",
        "name",
        "names",
        "i",
        "callbacks",
        "name",
        "callbacks",
        "eventClone",
        "Common",
        "eventClone",
        "name",
        "eventClone",
        "j",
        "callbacks",
        "j",
        "callbacks",
        "j",
        "eventClone",
        "_dereq_",
        "exports",
        "Matter",
        "_dereq_",
        "_dereq_",
        "Matter",
        "Matter",
        "Matter",
        "Matter",
        "Matter",
        "Plugin",
        "Matter",
        "arguments",
        "Matter",
        "path",
        "func",
        "path",
        "path",
        "Common",
        "Matter",
        "path",
        "func",
        "Matter",
        "path",
        "func",
        "path",
        "path",
        "Common",
        "Matter",
        "path",
        "func",
        "_dereq_",
        "exports",
        "_dereq_",
        "exports",
        "Mouse",
        "_dereq_",
        "Mouse",
        "element",
        "element",
        "Common",
        "mouse",
        "element",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "Mouse",
        "mouse",
        "mouse",
        "touches",
        "mouse",
        "mouse",
        "position",
        "mouse",
        "position",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "Mouse",
        "mouse",
        "mouse",
        "touches",
        "mouse",
        "mouse",
        "mouse",
        "position",
        "mouse",
        "position",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "Mouse",
        "mouse",
        "mouse",
        "touches",
        "mouse",
        "mouse",
        "position",
        "mouse",
        "position",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "Mouse",
        "mouse",
        "mouse",
        "mouse",
        "Mouse",
        "mouse",
        "element",
        "mouse",
        "element",
        "element",
        "mouse",
        "element",
        "mouse",
        "element",
        "mouse",
        "element",
        "mouse",
        "element",
        "mouse",
        "element",
        "mouse",
        "element",
        "mouse",
        "element",
        "mouse",
        "Mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "Mouse",
        "mouse",
        "offset",
        "mouse",
        "offset",
        "mouse",
        "offset",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "Mouse",
        "mouse",
        "scale",
        "mouse",
        "scale",
        "mouse",
        "scale",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "Mouse",
        "element",
        "pixelRatio",
        "element",
        "rootNode",
        "rootNode",
        "touches",
        "x",
        "touches",
        "elementBounds",
        "scrollX",
        "y",
        "touches",
        "elementBounds",
        "scrollY",
        "x",
        "elementBounds",
        "scrollX",
        "y",
        "elementBounds",
        "scrollY",
        "x",
        "element",
        "element",
        "element",
        "pixelRatio",
        "y",
        "element",
        "element",
        "element",
        "pixelRatio",
        "_dereq_",
        "exports",
        "Plugin",
        "_dereq_",
        "Plugin",
        "Plugin",
        "plugin",
        "Plugin",
        "plugin",
        "Common",
        "Plugin",
        "plugin",
        "plugin",
        "Plugin",
        "Plugin",
        "plugin",
        "Plugin",
        "plugin",
        "Plugin",
        "registered",
        "pluginVersion",
        "registeredVersion",
        "Common",
        "Plugin",
        "registered",
        "Plugin",
        "plugin",
        "Plugin",
        "plugin",
        "plugin",
        "pluginVersion",
        "registeredVersion",
        "Common",
        "Plugin",
        "registered",
        "Plugin",
        "plugin",
        "plugin",
        "registered",
        "Common",
        "Plugin",
        "plugin",
        "Plugin",
        "plugin",
        "plugin",
        "plugin",
        "Plugin",
        "dependency",
        "Plugin",
        "Plugin",
        "dependency",
        "Plugin",
        "plugin",
        "plugin",
        "plugin",
        "plugin",
        "plugin",
        "plugin",
        "Plugin",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "Plugin",
        "name",
        "name",
        "Plugin",
        "plugin",
        "plugin",
        "Plugin",
        "plugin",
        "plugin",
        "parsed",
        "Plugin",
        "parsed",
        "Plugin",
        "plugins",
        "plugins",
        "Common",
        "Plugin",
        "Plugin",
        "Common",
        "dependencies",
        "i",
        "sortedDependencies",
        "i",
        "sortedDependencies",
        "i",
        "Plugin",
        "sortedDependencies",
        "i",
        "plugin",
        "status",
        "sortedDependencies",
        "i",
        "Plugin",
        "plugin",
        "Plugin",
        "plugin",
        "Common",
        "Plugin",
        "plugin",
        "plugin",
        "Plugin",
        "plugin",
        "plugin",
        "plugin",
        "Common",
        "Plugin",
        "plugin",
        "plugin",
        "plugin",
        "status",
        "Plugin",
        "plugin",
        "plugin",
        "status",
        "Plugin",
        "plugin",
        "plugin",
        "status",
        "Common",
        "status",
        "Plugin",
        "tracked",
        "Plugin",
        "parsedBase",
        "tracked",
        "tracked",
        "name",
        "tracked",
        "Plugin",
        "tracked",
        "name",
        "Common",
        "dependency",
        "Plugin",
        "dependency",
        "Plugin",
        "dependency",
        "Plugin",
        "dependency",
        "Plugin",
        "dependency",
        "resolved",
        "Plugin",
        "resolved",
        "parsed",
        "Common",
        "Plugin",
        "resolved",
        "Plugin",
        "parsed",
        "Plugin",
        "parsedBase",
        "resolved",
        "resolved",
        "Common",
        "Plugin",
        "dependency",
        "Plugin",
        "parsedBase",
        "parsed",
        "i",
        "tracked",
        "name",
        "i",
        "Plugin",
        "tracked",
        "name",
        "i",
        "tracked",
        "tracked",
        "Plugin",
        "dependency",
        "Common",
        "dependency",
        "pattern",
        "dependency",
        "Common",
        "dependency",
        "dependency",
        "dependency",
        "dependency",
        "dependency",
        "dependency",
        "Plugin",
        "pattern",
        "Common",
        "identifiers",
        "isNaN",
        "isRange",
        "Common",
        "version",
        "part",
        "part",
        "isRange",
        "version",
        "isRange",
        "parts",
        "identifiers",
        "parts",
        "parts",
        "parts",
        "Plugin",
        "version",
        "Plugin",
        "rangeParsed",
        "Plugin",
        "version",
        "versionParsed",
        "rangeParsed",
        "rangeParsed",
        "version",
        "rangeParsed",
        "versionParts",
        "rangeParts",
        "versionParts",
        "rangeParts",
        "versionParts",
        "rangeParts",
        "rangeParsed",
        "rangeParts",
        "versionParts",
        "rangeParts",
        "versionParsed",
        "rangeParsed",
        "rangeParts",
        "versionParts",
        "rangeParts",
        "versionParts",
        "rangeParts",
        "versionParts",
        "rangeParts",
        "version",
        "version",
        "_dereq_",
        "exports",
        "Runner",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_requestAnimationFrame",
        "_cancelAnimationFrame",
        "_requestAnimationFrame",
        "_requestAnimationFrame",
        "callback",
        "_frameTimeout",
        "setTimeout",
        "callback",
        "Common",
        "_cancelAnimationFrame",
        "clearTimeout",
        "_frameTimeout",
        "Runner",
        "options",
        "Common",
        "defaults",
        "options",
        "runner",
        "runner",
        "runner",
        "runner",
        "runner",
        "runner",
        "runner",
        "runner",
        "runner",
        "runner",
        "runner",
        "runner",
        "Runner",
        "runner",
        "engine",
        "runner",
        "engine",
        "runner",
        "runner",
        "Runner",
        "render",
        "time",
        "runner",
        "_requestAnimationFrame",
        "render",
        "time",
        "runner",
        "Runner",
        "runner",
        "engine",
        "time",
        "runner",
        "Runner",
        "runner",
        "engine",
        "time",
        "engine",
        "timing",
        "Events",
        "runner",
        "Events",
        "engine",
        "runner",
        "delta",
        "runner",
        "delta",
        "time",
        "runner",
        "runner",
        "runner",
        "time",
        "runner",
        "delta",
        "runner",
        "runner",
        "runner",
        "delta",
        "runner",
        "delta",
        "delta",
        "runner",
        "runner",
        "delta",
        "delta",
        "delta",
        "runner",
        "runner",
        "delta",
        "correction",
        "delta",
        "runner",
        "runner",
        "delta",
        "runner",
        "correction",
        "timing",
        "runner",
        "timing",
        "correction",
        "runner",
        "timing",
        "runner",
        "correction",
        "runner",
        "time",
        "runner",
        "runner",
        "runner",
        "time",
        "runner",
        "runner",
        "time",
        "runner",
        "Events",
        "runner",
        "Events",
        "engine",
        "engine",
        "engine",
        "engine",
        "engine",
        "engine",
        "engine",
        "Events",
        "runner",
        "Engine",
        "engine",
        "delta",
        "correction",
        "Events",
        "runner",
        "engine",
        "engine",
        "Events",
        "runner",
        "Events",
        "engine",
        "engine",
        "engine",
        "Events",
        "runner",
        "Events",
        "engine",
        "Events",
        "runner",
        "Events",
        "engine",
        "Runner",
        "runner",
        "_cancelAnimationFrame",
        "runner",
        "Runner",
        "runner",
        "engine",
        "Runner",
        "runner",
        "engine",
        "_dereq_",
        "exports",
        "Sleeping",
        "_dereq_",
        "Sleeping",
        "Sleeping",
        "Sleeping",
        "Sleeping",
        "bodies",
        "timeScale",
        "timeScale",
        "timeScale",
        "timeScale",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "Sleeping",
        "body",
        "body",
        "motion",
        "body",
        "motion",
        "body",
        "Sleeping",
        "minMotion",
        "Sleeping",
        "maxMotion",
        "body",
        "body",
        "Sleeping",
        "timeFactor",
        "body",
        "body",
        "body",
        "Sleeping",
        "body",
        "body",
        "body",
        "Sleeping",
        "pairs",
        "timeScale",
        "timeScale",
        "timeScale",
        "timeScale",
        "i",
        "pairs",
        "i",
        "pairs",
        "i",
        "pair",
        "pair",
        "collision",
        "collision",
        "bodyA",
        "bodyB",
        "bodyA",
        "bodyB",
        "bodyA",
        "bodyB",
        "bodyA",
        "bodyA",
        "bodyA",
        "bodyB",
        "sleepingBody",
        "bodyA",
        "bodyB",
        "bodyA",
        "sleepingBody",
        "movingBody",
        "Sleeping",
        "timeFactor",
        "Sleeping",
        "sleepingBody",
        "Sleeping",
        "body",
        "isSleeping",
        "body",
        "isSleeping",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "wasSleeping",
        "Events",
        "body",
        "body",
        "body",
        "wasSleeping",
        "Events",
        "body",
        "_dereq_",
        "exports",
        "Bodies",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "Bodies",
        "x",
        "y",
        "width",
        "height",
        "options",
        "options",
        "options",
        "x",
        "y",
        "Vertices",
        "width",
        "width",
        "height",
        "height",
        "options",
        "options",
        "rectangle",
        "Vertices",
        "rectangle",
        "chamfer",
        "chamfer",
        "chamfer",
        "chamfer",
        "options",
        "Body",
        "Common",
        "rectangle",
        "options",
        "Bodies",
        "x",
        "y",
        "width",
        "height",
        "slope",
        "options",
        "options",
        "options",
        "slope",
        "slope",
        "width",
        "width",
        "slope",
        "x1",
        "roof",
        "x2",
        "x1",
        "slope",
        "verticesPath",
        "x1",
        "height",
        "x2",
        "height",
        "x3",
        "verticesPath",
        "x2",
        "height",
        "x3",
        "x",
        "y",
        "Vertices",
        "verticesPath",
        "options",
        "options",
        "trapezoid",
        "Vertices",
        "trapezoid",
        "chamfer",
        "chamfer",
        "chamfer",
        "chamfer",
        "options",
        "Body",
        "Common",
        "trapezoid",
        "options",
        "Bodies",
        "x",
        "y",
        "radius",
        "options",
        "maxSides",
        "options",
        "options",
        "radius",
        "maxSides",
        "maxSides",
        "maxSides",
        "radius",
        "sides",
        "sides",
        "Bodies",
        "x",
        "y",
        "sides",
        "radius",
        "Common",
        "circle",
        "options",
        "Bodies",
        "x",
        "y",
        "sides",
        "radius",
        "options",
        "options",
        "options",
        "sides",
        "Bodies",
        "x",
        "y",
        "radius",
        "options",
        "sides",
        "theta",
        "i",
        "sides",
        "i",
        "offset",
        "i",
        "theta",
        "angle",
        "radius",
        "angle",
        "radius",
        "path",
        "xx",
        "yy",
        "x",
        "y",
        "Vertices",
        "path",
        "options",
        "options",
        "polygon",
        "Vertices",
        "polygon",
        "chamfer",
        "chamfer",
        "chamfer",
        "chamfer",
        "options",
        "Body",
        "Common",
        "polygon",
        "options",
        "Bodies",
        "x",
        "y",
        "vertexSets",
        "options",
        "flagInternal",
        "removeCollinear",
        "minimumArea",
        "decomp",
        "decomp",
        "Common",
        "options",
        "options",
        "parts",
        "flagInternal",
        "flagInternal",
        "flagInternal",
        "removeCollinear",
        "removeCollinear",
        "removeCollinear",
        "minimumArea",
        "minimumArea",
        "minimumArea",
        "decomp",
        "Common",
        "Common",
        "vertexSets",
        "vertexSets",
        "vertexSets",
        "v",
        "v",
        "vertexSets",
        "v",
        "vertices",
        "vertexSets",
        "v",
        "isConvex",
        "Vertices",
        "vertices",
        "isConvex",
        "decomp",
        "isConvex",
        "vertices",
        "Vertices",
        "vertices",
        "vertices",
        "Vertices",
        "vertices",
        "parts",
        "x",
        "y",
        "vertices",
        "vertices",
        "vertex",
        "vertex",
        "vertex",
        "decomp",
        "concave",
        "removeCollinear",
        "decomp",
        "concave",
        "removeCollinear",
        "decomp",
        "concave",
        "i",
        "i",
        "decomposed",
        "i",
        "decomposed",
        "i",
        "chunk",
        "vertices",
        "vertices",
        "vertices",
        "minimumArea",
        "Vertices",
        "chunkVertices",
        "minimumArea",
        "parts",
        "Vertices",
        "chunkVertices",
        "chunkVertices",
        "i",
        "i",
        "parts",
        "i",
        "parts",
        "i",
        "Body",
        "Common",
        "parts",
        "i",
        "options",
        "flagInternal",
        "i",
        "i",
        "parts",
        "i",
        "parts",
        "i",
        "j",
        "i",
        "j",
        "parts",
        "j",
        "parts",
        "j",
        "Bounds",
        "partA",
        "partB",
        "partA",
        "partB",
        "k",
        "k",
        "partA",
        "k",
        "z",
        "z",
        "partB",
        "z",
        "pav",
        "k",
        "pav",
        "pbv",
        "z",
        "pav",
        "k",
        "pbv",
        "z",
        "pbv",
        "da",
        "coincident_max_dist",
        "db",
        "coincident_max_dist",
        "pav",
        "k",
        "pbv",
        "z",
        "parts",
        "body",
        "Body",
        "Common",
        "parts",
        "options",
        "Body",
        "body",
        "x",
        "y",
        "body",
        "parts",
        "_dereq_",
        "exports",
        "Composites",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "Composites",
        "xx",
        "yy",
        "columns",
        "rows",
        "columnGap",
        "rowGap",
        "callback",
        "Composite",
        "row",
        "rows",
        "row",
        "column",
        "columns",
        "column",
        "callback",
        "x",
        "y",
        "column",
        "row",
        "lastBody",
        "i",
        "body",
        "body",
        "body",
        "body",
        "body",
        "bodyHeight",
        "maxHeight",
        "maxHeight",
        "bodyHeight",
        "Body",
        "body",
        "bodyWidth",
        "bodyHeight",
        "x",
        "body",
        "columnGap",
        "Composite",
        "stack",
        "body",
        "lastBody",
        "body",
        "i",
        "x",
        "columnGap",
        "y",
        "maxHeight",
        "rowGap",
        "x",
        "xx",
        "stack",
        "Composites",
        "composite",
        "xOffsetA",
        "yOffsetA",
        "xOffsetB",
        "yOffsetB",
        "options",
        "composite",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "bodyA",
        "bodyA",
        "bodyA",
        "bodyA",
        "bodyB",
        "bodyB",
        "bodyB",
        "bodyB",
        "bodyA",
        "bodyAWidth",
        "xOffsetA",
        "bodyAHeight",
        "yOffsetA",
        "bodyB",
        "bodyBWidth",
        "xOffsetB",
        "bodyBHeight",
        "yOffsetB",
        "Common",
        "defaults",
        "options",
        "Composite",
        "composite",
        "Constraint",
        "constraint",
        "composite",
        "composite",
        "Composites",
        "composite",
        "columns",
        "rows",
        "crossBrace",
        "options",
        "composite",
        "row",
        "row",
        "rows",
        "row",
        "col",
        "col",
        "columns",
        "col",
        "bodyA",
        "bodies",
        "col",
        "row",
        "columns",
        "bodyB",
        "bodies",
        "col",
        "row",
        "columns",
        "Composite",
        "composite",
        "Constraint",
        "Common",
        "bodyA",
        "bodyB",
        "options",
        "row",
        "col",
        "col",
        "columns",
        "col",
        "bodyA",
        "bodies",
        "col",
        "row",
        "columns",
        "bodyB",
        "bodies",
        "col",
        "row",
        "columns",
        "Composite",
        "composite",
        "Constraint",
        "Common",
        "bodyA",
        "bodyB",
        "options",
        "crossBrace",
        "col",
        "bodyC",
        "bodies",
        "col",
        "row",
        "columns",
        "Composite",
        "composite",
        "Constraint",
        "Common",
        "bodyC",
        "bodyB",
        "options",
        "crossBrace",
        "col",
        "columns",
        "bodyC",
        "bodies",
        "col",
        "row",
        "columns",
        "Composite",
        "composite",
        "Constraint",
        "Common",
        "bodyC",
        "bodyB",
        "options",
        "composite",
        "composite",
        "Composites",
        "xx",
        "yy",
        "columns",
        "rows",
        "columnGap",
        "rowGap",
        "callback",
        "Composites",
        "xx",
        "yy",
        "columns",
        "rows",
        "columnGap",
        "rowGap",
        "x",
        "y",
        "column",
        "row",
        "lastBody",
        "i",
        "rows",
        "columns",
        "lastBody",
        "lastBody",
        "lastBody",
        "row",
        "actualRows",
        "row",
        "actualRows",
        "row",
        "columns",
        "row",
        "column",
        "start",
        "column",
        "end",
        "i",
        "Body",
        "lastBody",
        "column",
        "columns",
        "lastBodyWidth",
        "lastBody",
        "column",
        "lastBodyWidth",
        "callback",
        "xx",
        "xOffset",
        "column",
        "columnGap",
        "y",
        "column",
        "row",
        "lastBody",
        "i",
        "Composites",
        "xx",
        "yy",
        "number",
        "size",
        "length",
        "Composite",
        "i",
        "number",
        "i",
        "Bodies",
        "xx",
        "i",
        "size",
        "separation",
        "yy",
        "length",
        "size",
        "Infinity",
        "Constraint",
        "xx",
        "i",
        "size",
        "separation",
        "yy",
        "circle",
        "Composite",
        "newtonsCradle",
        "circle",
        "Composite",
        "newtonsCradle",
        "constraint",
        "newtonsCradle",
        "Composites",
        "xx",
        "yy",
        "width",
        "height",
        "wheelSize",
        "Body",
        "width",
        "wheelBase",
        "width",
        "wheelBase",
        "Composite",
        "Bodies",
        "xx",
        "yy",
        "width",
        "height",
        "group",
        "height",
        "Bodies",
        "xx",
        "wheelAOffset",
        "yy",
        "wheelYOffset",
        "wheelSize",
        "group",
        "Bodies",
        "xx",
        "wheelBOffset",
        "yy",
        "wheelYOffset",
        "wheelSize",
        "group",
        "Constraint",
        "body",
        "wheelAOffset",
        "wheelYOffset",
        "wheelA",
        "Constraint",
        "body",
        "wheelBOffset",
        "wheelYOffset",
        "wheelB",
        "Composite",
        "car",
        "body",
        "Composite",
        "car",
        "wheelA",
        "Composite",
        "car",
        "wheelB",
        "Composite",
        "car",
        "axelA",
        "Composite",
        "car",
        "axelB",
        "car",
        "Composites",
        "xx",
        "yy",
        "columns",
        "rows",
        "columnGap",
        "rowGap",
        "crossBrace",
        "particleRadius",
        "particleOptions",
        "constraintOptions",
        "particleOptions",
        "Common",
        "Infinity",
        "particleOptions",
        "constraintOptions",
        "Common",
        "constraintOptions",
        "Composites",
        "xx",
        "yy",
        "columns",
        "rows",
        "columnGap",
        "rowGap",
        "x",
        "y",
        "Bodies",
        "x",
        "y",
        "particleRadius",
        "particleOptions",
        "Composites",
        "softBody",
        "columns",
        "rows",
        "crossBrace",
        "constraintOptions",
        "softBody",
        "softBody",
        "_dereq_",
        "exports",
        "Axes",
        "_dereq_",
        "_dereq_",
        "Axes",
        "vertices",
        "i",
        "vertices",
        "i",
        "i",
        "vertices",
        "vertices",
        "j",
        "vertices",
        "i",
        "vertices",
        "i",
        "vertices",
        "j",
        "normal",
        "Infinity",
        "normal",
        "normal",
        "gradient",
        "gradient",
        "axes",
        "gradient",
        "normal",
        "Common",
        "axes",
        "Axes",
        "axes",
        "angle",
        "angle",
        "angle",
        "angle",
        "i",
        "axes",
        "i",
        "axes",
        "i",
        "xx",
        "axis",
        "cos",
        "axis",
        "sin",
        "axis",
        "axis",
        "sin",
        "axis",
        "cos",
        "axis",
        "xx",
        "_dereq_",
        "exports",
        "Bounds",
        "Bounds",
        "vertices",
        "vertices",
        "Bounds",
        "bounds",
        "vertices",
        "bounds",
        "Bounds",
        "bounds",
        "vertices",
        "velocity",
        "bounds",
        "Infinity",
        "bounds",
        "Infinity",
        "bounds",
        "Infinity",
        "bounds",
        "Infinity",
        "i",
        "vertices",
        "i",
        "vertices",
        "i",
        "vertex",
        "bounds",
        "bounds",
        "vertex",
        "vertex",
        "bounds",
        "bounds",
        "vertex",
        "vertex",
        "bounds",
        "bounds",
        "vertex",
        "vertex",
        "bounds",
        "bounds",
        "vertex",
        "velocity",
        "velocity",
        "bounds",
        "velocity",
        "bounds",
        "velocity",
        "velocity",
        "bounds",
        "velocity",
        "bounds",
        "velocity",
        "Bounds",
        "bounds",
        "point",
        "point",
        "bounds",
        "point",
        "bounds",
        "point",
        "bounds",
        "point",
        "bounds",
        "Bounds",
        "boundsA",
        "boundsB",
        "boundsA",
        "boundsB",
        "boundsA",
        "boundsB",
        "boundsA",
        "boundsB",
        "boundsA",
        "boundsB",
        "Bounds",
        "bounds",
        "vector",
        "bounds",
        "vector",
        "bounds",
        "vector",
        "bounds",
        "vector",
        "bounds",
        "vector",
        "Bounds",
        "bounds",
        "position",
        "bounds",
        "bounds",
        "bounds",
        "bounds",
        "bounds",
        "position",
        "bounds",
        "position",
        "deltaX",
        "bounds",
        "position",
        "bounds",
        "position",
        "deltaY",
        "_dereq_",
        "exports",
        "Svg",
        "_dereq_",
        "_dereq_",
        "Svg",
        "path",
        "sampleLength",
        "Common",
        "sampleLength",
        "sampleLength",
        "px",
        "py",
        "pathSegType",
        "pathSegType",
        "pathSegType",
        "lastPoint",
        "px",
        "lastPoint",
        "py",
        "lastPoint",
        "lastPoint",
        "isRelative",
        "lx",
        "lastPoint",
        "ly",
        "lastPoint",
        "lx",
        "ly",
        "lx",
        "px",
        "ly",
        "py",
        "isRelative",
        "lastPoint",
        "lastPoint",
        "point",
        "points",
        "point",
        "x",
        "lx",
        "px",
        "y",
        "ly",
        "py",
        "segment",
        "segment",
        "segType",
        "segType",
        "x",
        "segment",
        "y",
        "segment",
        "x",
        "segment",
        "y",
        "segment",
        "addPoint",
        "x",
        "y",
        "segment",
        "Svg",
        "path",
        "total",
        "path",
        "segments",
        "i",
        "i",
        "path",
        "i",
        "segments",
        "path",
        "i",
        "segmentsQueue",
        "segments",
        "length",
        "total",
        "segmentIndex",
        "path",
        "length",
        "segment",
        "segments",
        "segmentIndex",
        "segment",
        "lastSegment",
        "segmentsQueue",
        "segmentsQueue",
        "segment",
        "addSegmentPoint",
        "segmentsQueue",
        "lastSegment",
        "segment",
        "segment",
        "point",
        "path",
        "length",
        "addPoint",
        "point",
        "point",
        "length",
        "sampleLength",
        "i",
        "il",
        "segmentsQueue",
        "i",
        "il",
        "i",
        "addSegmentPoint",
        "segmentsQueue",
        "i",
        "points",
        "Svg",
        "path",
        "path",
        "segs",
        "i",
        "len",
        "i",
        "segs",
        "i",
        "seg",
        "segType",
        "seg",
        "x",
        "seg",
        "seg",
        "y",
        "seg",
        "seg",
        "x1",
        "x",
        "seg",
        "seg",
        "x2",
        "x",
        "seg",
        "seg",
        "y1",
        "y",
        "seg",
        "seg",
        "y2",
        "y",
        "seg",
        "seg",
        "x",
        "seg",
        "seg",
        "y",
        "seg",
        "segType",
        "segs",
        "path",
        "x",
        "y",
        "i",
        "segs",
        "path",
        "x",
        "y",
        "i",
        "segs",
        "path",
        "x",
        "i",
        "segs",
        "path",
        "y",
        "i",
        "segs",
        "path",
        "x",
        "y",
        "x1",
        "y1",
        "x2",
        "y2",
        "i",
        "segs",
        "path",
        "x",
        "y",
        "x2",
        "y2",
        "i",
        "segs",
        "path",
        "x",
        "y",
        "x1",
        "y1",
        "i",
        "segs",
        "path",
        "x",
        "y",
        "i",
        "segs",
        "path",
        "x",
        "y",
        "seg",
        "seg",
        "seg",
        "seg",
        "seg",
        "i",
        "x",
        "x0",
        "y",
        "y0",
        "segType",
        "segType",
        "x0",
        "x",
        "y0",
        "y",
        "_dereq_",
        "exports",
        "x",
        "y",
        "x",
        "y",
        "vector",
        "vector",
        "vector",
        "vector",
        "vector",
        "vector",
        "vector",
        "vector",
        "vector",
        "vector",
        "vector",
        "vector",
        "vector",
        "vector",
        "angle",
        "output",
        "angle",
        "angle",
        "output",
        "output",
        "vector",
        "cos",
        "vector",
        "sin",
        "output",
        "vector",
        "sin",
        "vector",
        "cos",
        "output",
        "x",
        "output",
        "vector",
        "angle",
        "point",
        "output",
        "angle",
        "angle",
        "output",
        "output",
        "point",
        "vector",
        "point",
        "cos",
        "vector",
        "point",
        "sin",
        "output",
        "point",
        "vector",
        "point",
        "sin",
        "vector",
        "point",
        "cos",
        "output",
        "x",
        "output",
        "vector",
        "vector",
        "magnitude",
        "vector",
        "magnitude",
        "vector",
        "magnitude",
        "vectorA",
        "vectorB",
        "vectorA",
        "vectorB",
        "vectorA",
        "vectorB",
        "vectorA",
        "vectorB",
        "vectorA",
        "vectorB",
        "vectorA",
        "vectorB",
        "vectorA",
        "vectorB",
        "vectorC",
        "vectorB",
        "vectorA",
        "vectorC",
        "vectorA",
        "vectorB",
        "vectorA",
        "vectorC",
        "vectorA",
        "vectorA",
        "vectorB",
        "output",
        "output",
        "output",
        "output",
        "vectorA",
        "vectorB",
        "output",
        "vectorA",
        "vectorB",
        "output",
        "vectorA",
        "vectorB",
        "output",
        "output",
        "output",
        "output",
        "vectorA",
        "vectorB",
        "output",
        "vectorA",
        "vectorB",
        "output",
        "vector",
        "scalar",
        "vector",
        "scalar",
        "vector",
        "scalar",
        "vector",
        "scalar",
        "vector",
        "scalar",
        "vector",
        "scalar",
        "vector",
        "negate",
        "negate",
        "negate",
        "negate",
        "vector",
        "negate",
        "vector",
        "vector",
        "vector",
        "vector",
        "vectorA",
        "vectorB",
        "vectorB",
        "vectorA",
        "vectorB",
        "vectorA",
        "_dereq_",
        "exports",
        "Vertices",
        "_dereq_",
        "_dereq_",
        "Vertices",
        "points",
        "body",
        "i",
        "points",
        "i",
        "points",
        "i",
        "point",
        "point",
        "i",
        "body",
        "vertices",
        "vertex",
        "vertices",
        "Vertices",
        "path",
        "body",
        "path",
        "pathPattern",
        "match",
        "x",
        "y",
        "points",
        "parseFloat",
        "x",
        "parseFloat",
        "y",
        "Vertices",
        "points",
        "body",
        "Vertices",
        "vertices",
        "Vertices",
        "vertices",
        "i",
        "vertices",
        "i",
        "j",
        "i",
        "vertices",
        "cross",
        "vertices",
        "i",
        "vertices",
        "j",
        "temp",
        "vertices",
        "i",
        "vertices",
        "j",
        "cross",
        "centre",
        "centre",
        "temp",
        "centre",
        "area",
        "Vertices",
        "vertices",
        "i",
        "vertices",
        "i",
        "average",
        "vertices",
        "i",
        "average",
        "vertices",
        "i",
        "average",
        "vertices",
        "Vertices",
        "vertices",
        "signed",
        "vertices",
        "i",
        "vertices",
        "i",
        "area",
        "vertices",
        "j",
        "vertices",
        "i",
        "vertices",
        "j",
        "vertices",
        "i",
        "j",
        "i",
        "signed",
        "area",
        "area",
        "Vertices",
        "vertices",
        "mass",
        "n",
        "v",
        "n",
        "j",
        "n",
        "v",
        "cross",
        "v",
        "j",
        "v",
        "n",
        "numerator",
        "cross",
        "v",
        "j",
        "v",
        "j",
        "v",
        "j",
        "v",
        "n",
        "v",
        "n",
        "v",
        "n",
        "denominator",
        "cross",
        "mass",
        "numerator",
        "denominator",
        "Vertices",
        "vertices",
        "vector",
        "scalar",
        "scalar",
        "i",
        "i",
        "vertices",
        "i",
        "vertices",
        "i",
        "vector",
        "scalar",
        "vertices",
        "i",
        "vector",
        "scalar",
        "i",
        "i",
        "vertices",
        "i",
        "vertices",
        "i",
        "vector",
        "vertices",
        "i",
        "vector",
        "vertices",
        "Vertices",
        "vertices",
        "angle",
        "point",
        "angle",
        "angle",
        "angle",
        "i",
        "vertices",
        "i",
        "vertices",
        "i",
        "vertice",
        "point",
        "vertice",
        "point",
        "vertice",
        "point",
        "dx",
        "cos",
        "dy",
        "sin",
        "vertice",
        "point",
        "dx",
        "sin",
        "dy",
        "cos",
        "vertices",
        "Vertices",
        "vertices",
        "point",
        "i",
        "vertices",
        "i",
        "vertices",
        "i",
        "vertices",
        "i",
        "vertices",
        "point",
        "vertice",
        "nextVertice",
        "vertice",
        "point",
        "vertice",
        "vertice",
        "nextVertice",
        "Vertices",
        "vertices",
        "scaleX",
        "scaleY",
        "point",
        "scaleX",
        "scaleY",
        "vertices",
        "point",
        "point",
        "Vertices",
        "vertices",
        "i",
        "vertices",
        "i",
        "vertex",
        "vertices",
        "i",
        "delta",
        "vertex",
        "point",
        "vertices",
        "i",
        "point",
        "delta",
        "scaleX",
        "vertices",
        "i",
        "point",
        "delta",
        "scaleY",
        "vertices",
        "Vertices",
        "vertices",
        "radius",
        "quality",
        "qualityMin",
        "qualityMax",
        "radius",
        "radius",
        "radius",
        "radius",
        "radius",
        "quality",
        "quality",
        "quality",
        "qualityMin",
        "qualityMin",
        "qualityMax",
        "qualityMax",
        "i",
        "vertices",
        "i",
        "vertices",
        "i",
        "i",
        "vertices",
        "vertices",
        "i",
        "vertices",
        "i",
        "vertices",
        "radius",
        "i",
        "radius",
        "i",
        "radius",
        "currentRadius",
        "newVertices",
        "vertex",
        "vertex",
        "prevVertex",
        "prevVertex",
        "vertex",
        "nextVertex",
        "vertex",
        "vertex",
        "nextVertex",
        "currentRadius",
        "Common",
        "prevNormal",
        "currentRadius",
        "prevNormal",
        "nextNormal",
        "vertex",
        "midNormal",
        "diagonalRadius",
        "quality",
        "precision",
        "currentRadius",
        "precision",
        "Common",
        "precision",
        "qualityMin",
        "qualityMax",
        "precision",
        "precision",
        "prevNormal",
        "nextNormal",
        "alpha",
        "precision",
        "j",
        "precision",
        "j",
        "newVertices",
        "radiusVector",
        "theta",
        "j",
        "scaledVertex",
        "newVertices",
        "Vertices",
        "vertices",
        "Vertices",
        "vertices",
        "vertices",
        "vertexA",
        "vertexB",
        "centre",
        "vertexA",
        "centre",
        "vertexB",
        "vertices",
        "Vertices",
        "vertices",
        "vertices",
        "n",
        "i",
        "i",
        "n",
        "i",
        "j",
        "i",
        "n",
        "k",
        "i",
        "n",
        "z",
        "vertices",
        "j",
        "vertices",
        "i",
        "vertices",
        "k",
        "vertices",
        "j",
        "z",
        "vertices",
        "j",
        "vertices",
        "i",
        "vertices",
        "k",
        "vertices",
        "j",
        "z",
        "flag",
        "z",
        "flag",
        "flag",
        "flag",
        "Vertices",
        "vertices",
        "vertices",
        "vertices",
        "vertices",
        "vertexA",
        "vertexB",
        "vertexA",
        "vertexB",
        "dx",
        "dx",
        "vertexA",
        "vertexB",
        "i",
        "i",
        "vertices",
        "i",
        "vertex",
        "vertices",
        "i",
        "lower",
        "lower",
        "lower",
        "lower",
        "lower",
        "vertex",
        "lower",
        "lower",
        "vertex",
        "i",
        "vertices",
        "i",
        "i",
        "vertex",
        "vertices",
        "i",
        "upper",
        "upper",
        "upper",
        "upper",
        "upper",
        "vertex",
        "upper",
        "upper",
        "vertex",
        "upper",
        "lower",
        "upper",
        "lower",
        "_dereq_",
        "exports",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "_dereq_",
        "Matter",
        "Matter",
        "Matter",
        "Matter",
        "Matter",
        "Matter",
        "Matter",
        "Matter",
        "Matter",
        "Matter",
        "Matter",
        "Matter",
        "Matter",
        "Matter",
        "_dereq_",
        "exports",
        "Render",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_requestAnimationFrame",
        "callback",
        "callback",
        "Common",
        "_cancelAnimationFrame",
        "Render",
        "options",
        "Render",
        "options",
        "Common",
        "defaults",
        "options",
        "render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "options",
        "render",
        "options",
        "render",
        "render",
        "_createCanvas",
        "render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "Render",
        "render",
        "render",
        "Common",
        "render",
        "render",
        "render",
        "render",
        "Common",
        "render",
        "Render",
        "render",
        "loop",
        "time",
        "render",
        "_requestAnimationFrame",
        "loop",
        "Render",
        "render",
        "Render",
        "render",
        "_cancelAnimationFrame",
        "render",
        "Render",
        "render",
        "pixelRatio",
        "render",
        "render",
        "pixelRatio",
        "pixelRatio",
        "_getPixelRatio",
        "canvas",
        "options",
        "pixelRatio",
        "canvas",
        "pixelRatio",
        "canvas",
        "options",
        "pixelRatio",
        "canvas",
        "options",
        "pixelRatio",
        "canvas",
        "options",
        "canvas",
        "options",
        "render",
        "pixelRatio",
        "pixelRatio",
        "Render",
        "render",
        "objects",
        "padding",
        "center",
        "center",
        "center",
        "center",
        "objects",
        "Common",
        "objects",
        "objects",
        "objects",
        "padding",
        "padding",
        "Infinity",
        "Infinity",
        "Infinity",
        "Infinity",
        "i",
        "objects",
        "i",
        "objects",
        "i",
        "min",
        "max",
        "min",
        "bounds",
        "bounds",
        "min",
        "max",
        "bounds",
        "bounds",
        "max",
        "min",
        "bounds",
        "bounds",
        "min",
        "max",
        "bounds",
        "bounds",
        "max",
        "bounds",
        "bounds",
        "padding",
        "bounds",
        "bounds",
        "padding",
        "render",
        "render",
        "viewWidth",
        "viewHeight",
        "width",
        "height",
        "innerRatio",
        "outerRatio",
        "scaleY",
        "innerRatio",
        "outerRatio",
        "scaleX",
        "outerRatio",
        "innerRatio",
        "render",
        "render",
        "bounds",
        "render",
        "bounds",
        "width",
        "scaleX",
        "render",
        "bounds",
        "render",
        "bounds",
        "height",
        "scaleY",
        "center",
        "render",
        "width",
        "width",
        "scaleX",
        "render",
        "width",
        "width",
        "scaleX",
        "render",
        "height",
        "height",
        "scaleY",
        "render",
        "height",
        "height",
        "scaleY",
        "render",
        "padding",
        "render",
        "padding",
        "render",
        "padding",
        "render",
        "padding",
        "render",
        "Mouse",
        "render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "Mouse",
        "render",
        "render",
        "Render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "boundsWidth",
        "render",
        "boundsHeight",
        "render",
        "render",
        "boundsScaleX",
        "boundsScaleY",
        "render",
        "render",
        "render",
        "Render",
        "render",
        "render",
        "render",
        "render",
        "Render",
        "render",
        "render",
        "engine",
        "render",
        "render",
        "render",
        "Composite",
        "world",
        "Composite",
        "world",
        "options",
        "options",
        "options",
        "engine",
        "Events",
        "render",
        "render",
        "background",
        "_applyBackground",
        "render",
        "background",
        "context",
        "context",
        "context",
        "canvas",
        "canvas",
        "context",
        "options",
        "i",
        "i",
        "allBodies",
        "i",
        "allBodies",
        "i",
        "Bounds",
        "body",
        "render",
        "bodies",
        "body",
        "i",
        "i",
        "allConstraints",
        "i",
        "allConstraints",
        "i",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "bodyA",
        "pointAWorld",
        "bodyA",
        "constraint",
        "bodyB",
        "pointBWorld",
        "bodyB",
        "constraint",
        "pointAWorld",
        "pointBWorld",
        "Bounds",
        "render",
        "pointAWorld",
        "Bounds",
        "render",
        "pointBWorld",
        "constraints",
        "constraint",
        "Render",
        "render",
        "render",
        "Mouse",
        "render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "Mouse",
        "render",
        "render",
        "constraints",
        "allConstraints",
        "bodies",
        "allBodies",
        "options",
        "engine",
        "options",
        "Render",
        "render",
        "bodies",
        "context",
        "options",
        "Render",
        "render",
        "bodies",
        "context",
        "Render",
        "render",
        "bodies",
        "context",
        "options",
        "Render",
        "render",
        "bodies",
        "context",
        "options",
        "options",
        "Render",
        "render",
        "bodies",
        "context",
        "options",
        "Render",
        "render",
        "bodies",
        "context",
        "options",
        "Render",
        "render",
        "bodies",
        "context",
        "options",
        "Render",
        "render",
        "bodies",
        "context",
        "options",
        "Render",
        "render",
        "engine",
        "context",
        "options",
        "Render",
        "render",
        "engine",
        "context",
        "options",
        "Render",
        "render",
        "bodies",
        "context",
        "options",
        "Render",
        "render",
        "render",
        "context",
        "Render",
        "constraints",
        "context",
        "options",
        "engine",
        "Grid",
        "Render",
        "render",
        "engine",
        "context",
        "options",
        "Render",
        "render",
        "context",
        "options",
        "Render",
        "render",
        "Events",
        "render",
        "Render",
        "render",
        "context",
        "render",
        "engine",
        "engine",
        "render",
        "Composite",
        "world",
        "engine",
        "render",
        "metrics",
        "text",
        "metrics",
        "space",
        "render",
        "text",
        "render",
        "engine",
        "render",
        "c",
        "options",
        "c",
        "c",
        "render",
        "i",
        "split",
        "i",
        "c",
        "split",
        "i",
        "i",
        "Render",
        "constraints",
        "context",
        "i",
        "constraints",
        "i",
        "constraints",
        "i",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "bodyA",
        "start",
        "bodyA",
        "constraint",
        "start",
        "constraint",
        "constraint",
        "c",
        "c",
        "start",
        "start",
        "c",
        "bodyB",
        "end",
        "bodyB",
        "constraint",
        "end",
        "constraint",
        "c",
        "c",
        "start",
        "start",
        "constraint",
        "end",
        "start",
        "delta",
        "Common",
        "constraint",
        "j",
        "coils",
        "j",
        "offset",
        "j",
        "c",
        "start",
        "delta",
        "j",
        "coils",
        "normal",
        "offset",
        "start",
        "delta",
        "j",
        "coils",
        "normal",
        "offset",
        "c",
        "end",
        "end",
        "constraint",
        "c",
        "constraint",
        "c",
        "constraint",
        "c",
        "constraint",
        "c",
        "constraint",
        "c",
        "c",
        "start",
        "start",
        "c",
        "end",
        "end",
        "c",
        "c",
        "Render",
        "render",
        "bodies",
        "context",
        "render",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "body",
        "body",
        "c",
        "c",
        "body",
        "body",
        "body",
        "c",
        "c",
        "c",
        "body",
        "body",
        "j",
        "body",
        "j",
        "c",
        "body",
        "j",
        "body",
        "j",
        "c",
        "body",
        "render",
        "body",
        "render",
        "distanceX",
        "distanceY",
        "c",
        "c",
        "distanceX",
        "c",
        "distanceY",
        "c",
        "distance",
        "c",
        "c",
        "c",
        "c",
        "c",
        "Render",
        "render",
        "bodies",
        "context",
        "render",
        "render",
        "options",
        "options",
        "i",
        "i",
        "bodies",
        "i",
        "body",
        "bodies",
        "i",
        "body",
        "k",
        "body",
        "k",
        "body",
        "k",
        "part",
        "body",
        "k",
        "part",
        "options",
        "body",
        "c",
        "part",
        "part",
        "c",
        "part",
        "part",
        "part",
        "options",
        "part",
        "_getTexture",
        "render",
        "sprite",
        "c",
        "part",
        "part",
        "c",
        "part",
        "c",
        "texture",
        "texture",
        "sprite",
        "sprite",
        "texture",
        "sprite",
        "sprite",
        "texture",
        "sprite",
        "texture",
        "sprite",
        "c",
        "part",
        "c",
        "part",
        "part",
        "part",
        "c",
        "c",
        "part",
        "part",
        "part",
        "c",
        "c",
        "part",
        "part",
        "j",
        "part",
        "j",
        "part",
        "j",
        "showInternalEdges",
        "c",
        "part",
        "j",
        "part",
        "j",
        "c",
        "part",
        "j",
        "part",
        "j",
        "part",
        "j",
        "showInternalEdges",
        "c",
        "part",
        "j",
        "part",
        "part",
        "j",
        "part",
        "c",
        "part",
        "part",
        "c",
        "options",
        "c",
        "part",
        "part",
        "c",
        "part",
        "c",
        "part",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "Render",
        "render",
        "bodies",
        "context",
        "render",
        "c",
        "i",
        "i",
        "bodies",
        "i",
        "body",
        "bodies",
        "i",
        "body",
        "k",
        "body",
        "k",
        "body",
        "k",
        "part",
        "body",
        "k",
        "c",
        "part",
        "part",
        "j",
        "j",
        "part",
        "j",
        "part",
        "j",
        "showInternalEdges",
        "c",
        "part",
        "j",
        "part",
        "j",
        "c",
        "part",
        "j",
        "part",
        "j",
        "part",
        "j",
        "showInternalEdges",
        "c",
        "part",
        "j",
        "part",
        "part",
        "j",
        "part",
        "c",
        "part",
        "part",
        "c",
        "c",
        "c",
        "Render",
        "render",
        "bodies",
        "context",
        "c",
        "i",
        "i",
        "bodies",
        "i",
        "body",
        "bodies",
        "i",
        "body",
        "body",
        "c",
        "body",
        "body",
        "j",
        "j",
        "body",
        "j",
        "c",
        "body",
        "j",
        "body",
        "j",
        "c",
        "body",
        "body",
        "c",
        "c",
        "c",
        "Render",
        "render",
        "bodies",
        "context",
        "i",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "k",
        "parts",
        "k",
        "parts",
        "k",
        "parts",
        "k",
        "j",
        "j",
        "part",
        "j",
        "c",
        "c",
        "i",
        "j",
        "part",
        "part",
        "j",
        "part",
        "part",
        "part",
        "j",
        "part",
        "Render",
        "render",
        "mouse",
        "context",
        "c",
        "c",
        "mouse",
        "mouse",
        "mouse",
        "mouse",
        "Render",
        "render",
        "bodies",
        "context",
        "render",
        "render",
        "c",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "body",
        "bodies",
        "i",
        "parts",
        "j",
        "parts",
        "j",
        "parts",
        "j",
        "c",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "options",
        "c",
        "c",
        "c",
        "c",
        "Render",
        "render",
        "bodies",
        "context",
        "render",
        "render",
        "c",
        "i",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "body",
        "body",
        "options",
        "j",
        "parts",
        "j",
        "parts",
        "j",
        "part",
        "parts",
        "j",
        "k",
        "k",
        "part",
        "k",
        "part",
        "k",
        "c",
        "part",
        "part",
        "c",
        "part",
        "axis",
        "part",
        "axis",
        "j",
        "parts",
        "j",
        "parts",
        "j",
        "part",
        "parts",
        "j",
        "k",
        "k",
        "part",
        "k",
        "c",
        "part",
        "part",
        "c",
        "part",
        "part",
        "part",
        "part",
        "part",
        "part",
        "options",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "Render",
        "render",
        "bodies",
        "context",
        "render",
        "render",
        "c",
        "i",
        "i",
        "bodies",
        "i",
        "body",
        "bodies",
        "i",
        "body",
        "k",
        "k",
        "body",
        "k",
        "part",
        "body",
        "k",
        "c",
        "part",
        "part",
        "c",
        "options",
        "c",
        "c",
        "c",
        "c",
        "i",
        "i",
        "bodies",
        "i",
        "body",
        "bodies",
        "i",
        "body",
        "c",
        "body",
        "body",
        "c",
        "c",
        "c",
        "Render",
        "render",
        "bodies",
        "context",
        "c",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "body",
        "c",
        "body",
        "body",
        "c",
        "body",
        "body",
        "body",
        "body",
        "body",
        "body",
        "c",
        "c",
        "c",
        "Render",
        "render",
        "bodies",
        "context",
        "i",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "j",
        "parts",
        "j",
        "parts",
        "j",
        "parts",
        "j",
        "c",
        "c",
        "c",
        "part",
        "part",
        "part",
        "Render",
        "render",
        "pairs",
        "context",
        "render",
        "c",
        "i",
        "i",
        "pairs",
        "i",
        "pair",
        "pairs",
        "i",
        "pair",
        "collision",
        "pair",
        "j",
        "j",
        "pair",
        "j",
        "pair",
        "j",
        "contact",
        "c",
        "vertex",
        "vertex",
        "options",
        "c",
        "c",
        "c",
        "c",
        "i",
        "i",
        "pairs",
        "i",
        "pair",
        "pairs",
        "i",
        "pair",
        "collision",
        "pair",
        "pair",
        "pair",
        "pair",
        "pair",
        "normalPosX",
        "pair",
        "pair",
        "normalPosY",
        "pair",
        "pair",
        "collision",
        "collision",
        "collision",
        "c",
        "normalPosX",
        "collision",
        "normalPosY",
        "collision",
        "c",
        "normalPosX",
        "collision",
        "normalPosY",
        "collision",
        "c",
        "normalPosX",
        "normalPosY",
        "options",
        "c",
        "c",
        "c",
        "c",
        "Render",
        "render",
        "pairs",
        "context",
        "render",
        "c",
        "i",
        "i",
        "pairs",
        "i",
        "pair",
        "pairs",
        "i",
        "pair",
        "collision",
        "pair",
        "bodyA",
        "collision",
        "bodyB",
        "collision",
        "bodyB",
        "bodyA",
        "k",
        "bodyB",
        "k",
        "c",
        "bodyB",
        "bodyB",
        "c",
        "bodyB",
        "collision",
        "k",
        "bodyB",
        "collision",
        "k",
        "k",
        "bodyB",
        "bodyA",
        "k",
        "bodyA",
        "k",
        "c",
        "bodyA",
        "bodyA",
        "c",
        "bodyA",
        "collision",
        "k",
        "bodyA",
        "collision",
        "k",
        "options",
        "c",
        "c",
        "c",
        "Render",
        "render",
        "grid",
        "context",
        "render",
        "options",
        "c",
        "c",
        "c",
        "Common",
        "grid",
        "i",
        "bucketKeys",
        "i",
        "bucketKeys",
        "i",
        "grid",
        "bucketId",
        "bucketId",
        "c",
        "parseInt",
        "region",
        "grid",
        "parseInt",
        "region",
        "grid",
        "grid",
        "grid",
        "c",
        "c",
        "Render",
        "inspector",
        "context",
        "inspector",
        "inspector",
        "inspector",
        "render",
        "options",
        "render",
        "render",
        "render",
        "render",
        "boundsWidth",
        "render",
        "boundsHeight",
        "render",
        "context",
        "boundsScaleX",
        "boundsScaleY",
        "context",
        "render",
        "render",
        "i",
        "selected",
        "i",
        "selected",
        "i",
        "context",
        "context",
        "context",
        "context",
        "item",
        "bounds",
        "item",
        "context",
        "context",
        "bounds",
        "bounds",
        "bounds",
        "bounds",
        "bounds",
        "bounds",
        "context",
        "context",
        "item",
        "item",
        "point",
        "item",
        "context",
        "context",
        "point",
        "point",
        "context",
        "context",
        "context",
        "context",
        "inspector",
        "context",
        "context",
        "context",
        "context",
        "bounds",
        "inspector",
        "context",
        "context",
        "bounds",
        "bounds",
        "bounds",
        "bounds",
        "bounds",
        "bounds",
        "context",
        "context",
        "context",
        "context",
        "options",
        "context",
        "width",
        "height",
        "canvas",
        "width",
        "canvas",
        "height",
        "canvas",
        "canvas",
        "canvas",
        "canvas",
        "canvas",
        "context",
        "context",
        "context",
        "context",
        "context",
        "devicePixelRatio",
        "backingStorePixelRatio",
        "render",
        "imagePath",
        "render",
        "imagePath",
        "image",
        "image",
        "image",
        "render",
        "imagePath",
        "Image",
        "image",
        "imagePath",
        "image",
        "render",
        "background",
        "background",
        "cssBackground",
        "background",
        "render",
        "cssBackground",
        "render",
        "render",
        "background",
        "_dereq_",
        "exports",
        "RenderPixi",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_requestAnimationFrame",
        "callback",
        "callback",
        "Common",
        "_cancelAnimationFrame",
        "RenderPixi",
        "options",
        "Common",
        "RenderPixi",
        "Common",
        "defaults",
        "options",
        "render",
        "render",
        "render",
        "render",
        "render",
        "transparent",
        "options",
        "render",
        "options",
        "render",
        "options",
        "render",
        "render",
        "PIXI",
        "render",
        "render",
        "render",
        "render",
        "render",
        "PIXI",
        "render",
        "render",
        "PIXI",
        "render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "Events",
        "render",
        "RenderPixi",
        "render",
        "render",
        "render",
        "render",
        "render",
        "render",
        "Common",
        "render",
        "render",
        "render",
        "Common",
        "render",
        "render",
        "render",
        "RenderPixi",
        "render",
        "loop",
        "time",
        "render",
        "_requestAnimationFrame",
        "loop",
        "RenderPixi",
        "render",
        "RenderPixi",
        "render",
        "_cancelAnimationFrame",
        "render",
        "RenderPixi",
        "render",
        "render",
        "render",
        "container",
        "container",
        "container",
        "spriteContainer",
        "spriteContainer",
        "spriteContainer",
        "render",
        "render",
        "render",
        "render",
        "render",
        "bgSprite",
        "bgSprite",
        "container",
        "bgSprite",
        "render",
        "render",
        "render",
        "container",
        "container",
        "RenderPixi",
        "render",
        "background",
        "render",
        "background",
        "background",
        "background",
        "render",
        "isColor",
        "Common",
        "background",
        "render",
        "color",
        "bgSprite",
        "render",
        "bgSprite",
        "bgSprite",
        "_getTexture",
        "render",
        "background",
        "bgSprite",
        "render",
        "PIXI",
        "texture",
        "bgSprite",
        "bgSprite",
        "render",
        "bgSprite",
        "render",
        "background",
        "RenderPixi",
        "render",
        "render",
        "engine",
        "render",
        "render",
        "render",
        "Composite",
        "world",
        "Composite",
        "world",
        "options",
        "RenderPixi",
        "render",
        "options",
        "RenderPixi",
        "render",
        "options",
        "render",
        "render",
        "render",
        "render",
        "boundsWidth",
        "render",
        "boundsHeight",
        "render",
        "options",
        "i",
        "i",
        "bodies",
        "i",
        "bodies",
        "i",
        "body",
        "Bounds",
        "body",
        "render",
        "i",
        "i",
        "allConstraints",
        "i",
        "allConstraints",
        "i",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "bodyA",
        "pointAWorld",
        "bodyA",
        "constraint",
        "bodyB",
        "pointBWorld",
        "bodyB",
        "constraint",
        "pointAWorld",
        "pointBWorld",
        "Bounds",
        "render",
        "pointAWorld",
        "Bounds",
        "render",
        "pointBWorld",
        "constraints",
        "constraint",
        "container",
        "boundsScaleX",
        "boundsScaleY",
        "container",
        "render",
        "boundsScaleX",
        "render",
        "boundsScaleY",
        "constraints",
        "allConstraints",
        "i",
        "i",
        "bodies",
        "i",
        "RenderPixi",
        "render",
        "bodies",
        "i",
        "i",
        "i",
        "constraints",
        "i",
        "RenderPixi",
        "render",
        "constraints",
        "i",
        "renderer",
        "container",
        "RenderPixi",
        "render",
        "constraint",
        "render",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "render",
        "constraint",
        "constraint",
        "render",
        "primitiveId",
        "primitive",
        "primitive",
        "render",
        "primitiveId",
        "PIXI",
        "constraintRender",
        "constraint",
        "constraint",
        "primitive",
        "Common",
        "container",
        "primitive",
        "container",
        "primitive",
        "primitive",
        "primitive",
        "primitive",
        "constraintRender",
        "Common",
        "constraintRender",
        "bodyA",
        "primitive",
        "bodyA",
        "pointA",
        "bodyA",
        "pointA",
        "primitive",
        "pointA",
        "pointA",
        "bodyB",
        "primitive",
        "bodyB",
        "pointB",
        "bodyB",
        "pointB",
        "primitive",
        "pointB",
        "pointB",
        "primitive",
        "RenderPixi",
        "render",
        "body",
        "render",
        "body",
        "bodyRender",
        "bodyRender",
        "bodyRender",
        "body",
        "render",
        "spriteId",
        "render",
        "sprite",
        "sprite",
        "render",
        "spriteId",
        "_createBodySprite",
        "render",
        "body",
        "Common",
        "spriteContainer",
        "sprite",
        "spriteContainer",
        "sprite",
        "sprite",
        "body",
        "sprite",
        "body",
        "sprite",
        "body",
        "sprite",
        "bodyRender",
        "sprite",
        "bodyRender",
        "body",
        "render",
        "primitiveId",
        "render",
        "primitive",
        "primitive",
        "render",
        "primitiveId",
        "_createBodyPrimitive",
        "render",
        "body",
        "primitive",
        "body",
        "Common",
        "container",
        "primitive",
        "container",
        "primitive",
        "primitive",
        "body",
        "primitive",
        "body",
        "primitive",
        "body",
        "primitive",
        "render",
        "body",
        "body",
        "bodyRender",
        "_getTexture",
        "render",
        "texturePath",
        "PIXI",
        "texture",
        "sprite",
        "body",
        "sprite",
        "body",
        "sprite",
        "render",
        "body",
        "body",
        "render",
        "PIXI",
        "Common",
        "bodyRender",
        "Common",
        "bodyRender",
        "Common",
        "bodyRender",
        "Common",
        "Common",
        "primitive",
        "body",
        "k",
        "body",
        "k",
        "part",
        "body",
        "k",
        "options",
        "primitive",
        "fillStyle",
        "primitive",
        "bodyRender",
        "strokeStyle",
        "primitive",
        "primitive",
        "strokeStyleWireframe",
        "primitive",
        "part",
        "body",
        "part",
        "body",
        "j",
        "part",
        "j",
        "primitive",
        "part",
        "j",
        "body",
        "part",
        "j",
        "body",
        "primitive",
        "part",
        "body",
        "part",
        "body",
        "primitive",
        "options",
        "options",
        "primitive",
        "options",
        "primitive",
        "strokeStyleWireframeIndicator",
        "primitive",
        "strokeStyleIndicator",
        "primitive",
        "part",
        "body",
        "part",
        "body",
        "primitive",
        "part",
        "part",
        "part",
        "body",
        "part",
        "part",
        "part",
        "body",
        "primitive",
        "primitive",
        "render",
        "imagePath",
        "render",
        "imagePath",
        "texture",
        "texture",
        "render",
        "imagePath",
        "PIXI",
        "imagePath",
        "texture"
    ],
    "literals": [
        "\"object\"",
        "\"undefined\"",
        "\"function\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"function\"",
        "\"Cannot find module '\"",
        "\"'\"",
        "\"MODULE_NOT_FOUND\"",
        "\"function\"",
        "'../geometry/Vertices'",
        "'../geometry/Vector'",
        "'../core/Sleeping'",
        "'../render/Render'",
        "'../core/Common'",
        "'../geometry/Bounds'",
        "'../geometry/Axes'",
        "'body'",
        "'Body'",
        "'L 0 0 L 40 0 L 40 40 L 0 40'",
        "'#2e2b44'",
        "'#006BA6'",
        "'#0496FF'",
        "'#FFBC42'",
        "'#D81159'",
        "'#8F2D56'",
        "'#000'",
        "'string'",
        "'isStatic'",
        "'isSleeping'",
        "'mass'",
        "'density'",
        "'inertia'",
        "'vertices'",
        "'position'",
        "'angle'",
        "'velocity'",
        "'angularVelocity'",
        "'parts'",
        "'undefined'",
        "\"../core/Common\"",
        "\"../core/Sleeping\"",
        "\"../geometry/Axes\"",
        "\"../geometry/Bounds\"",
        "\"../geometry/Vector\"",
        "\"../geometry/Vertices\"",
        "\"../render/Render\"",
        "'../core/Events'",
        "'../core/Common'",
        "'../geometry/Bounds'",
        "'./Body'",
        "'composite'",
        "'Composite'",
        "'beforeAdd'",
        "'body'",
        "'Composite.add: skipped adding a compound body part (you must add its parent instead)'",
        "'constraint'",
        "'composite'",
        "'mouseConstraint'",
        "'afterAdd'",
        "'beforeRemove'",
        "'body'",
        "'constraint'",
        "'composite'",
        "'mouseConstraint'",
        "'afterRemove'",
        "'body'",
        "'constraint'",
        "'composite'",
        "\"../core/Common\"",
        "\"../core/Events\"",
        "\"../geometry/Bounds\"",
        "\"./Body\"",
        "'./Composite'",
        "'../constraint/Constraint'",
        "'../core/Common'",
        "'World'",
        "\"../constraint/Constraint\"",
        "\"../core/Common\"",
        "\"./Composite\"",
        "'_'",
        "'./SAT'",
        "'./Pair'",
        "'../geometry/Bounds'",
        "\"../geometry/Bounds\"",
        "\"./Pair\"",
        "\"./SAT\"",
        "'./Pair'",
        "'./Detector'",
        "'../core/Common'",
        "','",
        "','",
        "','",
        "'C'",
        "'R'",
        "\"../core/Common\"",
        "\"./Detector\"",
        "\"./Pair\"",
        "'./Contact'",
        "'A'",
        "'B'",
        "'A'",
        "'B'",
        "\"./Contact\"",
        "'./Pair'",
        "'../core/Common'",
        "\"../core/Common\"",
        "\"./Pair\"",
        "'../geometry/Vector'",
        "'./SAT'",
        "'../geometry/Bounds'",
        "'../factory/Bodies'",
        "'../geometry/Vertices'",
        "\"../factory/Bodies\"",
        "\"../geometry/Bounds\"",
        "\"../geometry/Vector\"",
        "\"../geometry/Vertices\"",
        "\"./SAT\"",
        "'../geometry/Vertices'",
        "'../geometry/Vector'",
        "'../core/Common'",
        "'../geometry/Bounds'",
        "\"../core/Common\"",
        "\"../geometry/Bounds\"",
        "\"../geometry/Vector\"",
        "\"../geometry/Vertices\"",
        "'../geometry/Vertices'",
        "'../geometry/Vector'",
        "\"../geometry/Vector\"",
        "\"../geometry/Vertices\"",
        "'../geometry/Vertices'",
        "'../geometry/Vector'",
        "'../core/Sleeping'",
        "'../geometry/Bounds'",
        "'../geometry/Axes'",
        "'../core/Common'",
        "'undefined'",
        "'Constraint'",
        "'constraint'",
        "'#ffffff'",
        "'line'",
        "'pin'",
        "'spring'",
        "\"../core/Common\"",
        "\"../core/Sleeping\"",
        "\"../geometry/Axes\"",
        "\"../geometry/Bounds\"",
        "\"../geometry/Vector\"",
        "\"../geometry/Vertices\"",
        "'../geometry/Vertices'",
        "'../core/Sleeping'",
        "'../core/Mouse'",
        "'../core/Events'",
        "'../collision/Detector'",
        "'./Constraint'",
        "'../body/Composite'",
        "'../core/Common'",
        "'../geometry/Bounds'",
        "'MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected'",
        "'Mouse Constraint'",
        "'#90EE90'",
        "'mouseConstraint'",
        "'beforeUpdate'",
        "'startdrag'",
        "'enddrag'",
        "'mousemove'",
        "'mousedown'",
        "'mouseup'",
        "\"../body/Composite\"",
        "\"../collision/Detector\"",
        "\"../core/Common\"",
        "\"../core/Events\"",
        "\"../core/Mouse\"",
        "\"../core/Sleeping\"",
        "\"../geometry/Bounds\"",
        "\"../geometry/Vertices\"",
        "\"./Constraint\"",
        "'boolean'",
        "'.'",
        "'.'",
        "'undefined'",
        "'[object Array]'",
        "\"function\"",
        "'object'",
        "'[object String]'",
        "\"undefined\"",
        "\"undefined\"",
        "'#'",
        "''",
        "'matter-js:'",
        "'matter-js:'",
        "'matter-js:'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "'../body/World'",
        "'./Sleeping'",
        "'../collision/Resolver'",
        "'../render/Render'",
        "'../collision/Pairs'",
        "'./Metrics'",
        "'../collision/Grid'",
        "'./Events'",
        "'../body/Composite'",
        "'../constraint/Constraint'",
        "'./Common'",
        "'../body/Body'",
        "'Engine.create: engine.render is deprecated (see docs)'",
        "'beforeUpdate'",
        "'collisionStart'",
        "'collisionActive'",
        "'collisionEnd'",
        "'afterUpdate'",
        "'undefined'",
        "\"../body/Body\"",
        "\"../body/Composite\"",
        "\"../body/World\"",
        "\"../collision/Grid\"",
        "\"../collision/Pairs\"",
        "\"../collision/Resolver\"",
        "\"../constraint/Constraint\"",
        "\"../render/Render\"",
        "\"./Common\"",
        "\"./Events\"",
        "\"./Metrics\"",
        "\"./Sleeping\"",
        "'./Common'",
        "' '",
        "'function'",
        "' '",
        "' '",
        "' '",
        "\"./Common\"",
        "'./Plugin'",
        "'./Common'",
        "'matter-js'",
        "'0.14.2'",
        "''",
        "''",
        "\"./Common\"",
        "\"./Plugin\"",
        "\"../body/Composite\"",
        "\"./Common\"",
        "'../core/Common'",
        "'Mouse.create: element was undefined, defaulting to document.body'",
        "'warn'",
        "'data-pixel-ratio'",
        "'mousemove'",
        "'mousedown'",
        "'mouseup'",
        "'mousewheel'",
        "'DOMMouseScroll'",
        "'touchmove'",
        "'touchstart'",
        "'touchend'",
        "\"../core/Common\"",
        "'./Common'",
        "'Plugin.register:'",
        "'does not implement all required fields.'",
        "'Plugin.register:'",
        "'was upgraded to'",
        "'Plugin.register:'",
        "'can not be downgraded to'",
        "'Plugin.register:'",
        "'is already registered to different plugin object'",
        "'string'",
        "'anonymous'",
        "'@'",
        "'0.0.0'",
        "'Plugin.use:'",
        "'does not specify any dependencies to install.'",
        "'❌ '",
        "'Plugin.use:'",
        "'is for'",
        "'but installed on'",
        "'.'",
        "'Plugin.use:'",
        "'does not specify an install function.'",
        "'🔶 '",
        "'✅ '",
        "'  '",
        "'Plugin.dependencies:'",
        "'does not satisfy'",
        "'used by'",
        "'.'",
        "'Plugin.dependencies:'",
        "'used by'",
        "'could not be resolved.'",
        "'Plugin.dependencyParse:'",
        "'is not a valid dependency string.'",
        "'@'",
        "'@'",
        "'*'",
        "'Plugin.versionParse:'",
        "'is not a valid version or range.'",
        "'-'",
        "'.'",
        "''",
        "'*'",
        "'*'",
        "'*'",
        "'~'",
        "'^'",
        "'*'",
        "\"./Common\"",
        "'./Events'",
        "'./Engine'",
        "'./Common'",
        "'undefined'",
        "'undefined'",
        "'beforeTick'",
        "'beforeTick'",
        "'tick'",
        "'tick'",
        "'beforeUpdate'",
        "'afterUpdate'",
        "'beforeRender'",
        "'beforeRender'",
        "'afterRender'",
        "'afterRender'",
        "'afterTick'",
        "'afterTick'",
        "\"./Common\"",
        "\"./Engine\"",
        "\"./Events\"",
        "'./Events'",
        "'sleepStart'",
        "'sleepEnd'",
        "\"./Events\"",
        "'../geometry/Vertices'",
        "'../core/Common'",
        "'../body/Body'",
        "'../geometry/Bounds'",
        "'../geometry/Vector'",
        "'Rectangle Body'",
        "'L 0 0 L '",
        "' 0 L '",
        "' '",
        "' L 0 '",
        "'L 0 0 L '",
        "' '",
        "' L '",
        "' '",
        "' L '",
        "' 0'",
        "'L 0 0 L '",
        "' '",
        "' L '",
        "' 0'",
        "'Trapezoid Body'",
        "'Circle Body'",
        "''",
        "'L '",
        "' '",
        "' '",
        "'Polygon Body'",
        "'decomp'",
        "'poly-decomp'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.'",
        "\"../body/Body\"",
        "\"../core/Common\"",
        "\"../geometry/Bounds\"",
        "\"../geometry/Vector\"",
        "\"../geometry/Vertices\"",
        "'../body/Composite'",
        "'../constraint/Constraint'",
        "'../core/Common'",
        "'../body/Body'",
        "'./Bodies'",
        "'Stack'",
        "' Chain'",
        "' Mesh'",
        "'Newtons Cradle'",
        "'Car'",
        "'line'",
        "'Soft Body'",
        "\"../body/Body\"",
        "\"../body/Composite\"",
        "\"../constraint/Constraint\"",
        "\"../core/Common\"",
        "\"./Bodies\"",
        "'../geometry/Vector'",
        "'../core/Common'",
        "\"../core/Common\"",
        "\"../geometry/Vector\"",
        "'../geometry/Bounds'",
        "'../core/Common'",
        "'undefined'",
        "'SVGPathSeg'",
        "'Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.'",
        "'Z'",
        "'M'",
        "'L'",
        "'T'",
        "'C'",
        "'S'",
        "'Q'",
        "'H'",
        "'V'",
        "'C'",
        "'T'",
        "'S'",
        "'Q'",
        "'A'",
        "'x'",
        "'y'",
        "'x1'",
        "'x2'",
        "'y1'",
        "'y2'",
        "'x'",
        "'y'",
        "'m'",
        "'l'",
        "'h'",
        "'v'",
        "'c'",
        "'s'",
        "'q'",
        "'t'",
        "'a'",
        "'z'",
        "'Z'",
        "'M'",
        "'m'",
        "\"../core/Common\"",
        "\"../geometry/Bounds\"",
        "'../geometry/Vector'",
        "'../core/Common'",
        "'number'",
        "'undefined'",
        "\"../core/Common\"",
        "\"../geometry/Vector\"",
        "'../core/Matter'",
        "'../body/Body'",
        "'../body/Composite'",
        "'../body/World'",
        "'../collision/Contact'",
        "'../collision/Detector'",
        "'../collision/Grid'",
        "'../collision/Pairs'",
        "'../collision/Pair'",
        "'../collision/Query'",
        "'../collision/Resolver'",
        "'../collision/SAT'",
        "'../constraint/Constraint'",
        "'../constraint/MouseConstraint'",
        "'../core/Common'",
        "'../core/Engine'",
        "'../core/Events'",
        "'../core/Mouse'",
        "'../core/Runner'",
        "'../core/Sleeping'",
        "'../core/Plugin'",
        "'../factory/Bodies'",
        "'../factory/Composites'",
        "'../geometry/Axes'",
        "'../geometry/Bounds'",
        "'../geometry/Svg'",
        "'../geometry/Vector'",
        "'../geometry/Vertices'",
        "'../render/Render'",
        "'../render/RenderPixi'",
        "\"../body/Body\"",
        "\"../body/Composite\"",
        "\"../body/World\"",
        "\"../collision/Contact\"",
        "\"../collision/Detector\"",
        "\"../collision/Grid\"",
        "\"../collision/Pair\"",
        "\"../collision/Pairs\"",
        "\"../collision/Query\"",
        "\"../collision/Resolver\"",
        "\"../collision/SAT\"",
        "\"../constraint/Constraint\"",
        "\"../constraint/MouseConstraint\"",
        "\"../core/Common\"",
        "\"../core/Engine\"",
        "\"../core/Events\"",
        "\"../core/Matter\"",
        "\"../core/Metrics\"",
        "\"../core/Mouse\"",
        "\"../core/Plugin\"",
        "\"../core/Runner\"",
        "\"../core/Sleeping\"",
        "\"../factory/Bodies\"",
        "\"../factory/Composites\"",
        "\"../geometry/Axes\"",
        "\"../geometry/Bounds\"",
        "\"../geometry/Svg\"",
        "\"../geometry/Vector\"",
        "\"../geometry/Vertices\"",
        "\"../render/Render\"",
        "\"../render/RenderPixi\"",
        "'../core/Common'",
        "'../body/Composite'",
        "'../geometry/Bounds'",
        "'../core/Events'",
        "'../collision/Grid'",
        "'../geometry/Vector'",
        "'../core/Mouse'",
        "'undefined'",
        "'#18181d'",
        "'#0f0f13'",
        "'2d'",
        "'Render.create: options.element was undefined, render.canvas was created but not appended'",
        "'warn'",
        "'auto'",
        "'data-pixel-ratio'",
        "'px'",
        "'px'",
        "'undefined'",
        "'beforeRender'",
        "'source-in'",
        "\"transparent\"",
        "'source-over'",
        "'afterRender'",
        "\"    \"",
        "\"\"",
        "\"fps: \"",
        "\"12px Arial\"",
        "'rgba(255,255,255,0.5)'",
        "'rgba(0,0,0,0.5)'",
        "'\\n'",
        "'pin'",
        "'spring'",
        "'rgba(0,0,0,0.15)'",
        "'#bbb'",
        "'#bbb'",
        "'rgba(255,255,255,0.2)'",
        "'rgba(255,255,255,0.2)'",
        "'_'",
        "'rgba(255,255,255,0.8)'",
        "'  '",
        "'rgba(255,255,255,0.08)'",
        "'rgba(0,0,0,0.1)'",
        "'indianred'",
        "'rgba(255, 255, 255, 0.4)'",
        "'overlay'",
        "'source-over'",
        "'indianred'",
        "'rgba(0,0,0,0.5)'",
        "'rgba(255,165,0,0.8)'",
        "'cornflowerblue'",
        "\"12px Arial\"",
        "'rgba(255,255,255,0.5)'",
        "'rgba(255,255,255,0.7)'",
        "'orange'",
        "'rgba(255,165,0,0.7)'",
        "'orange'",
        "'rgba(255,165,0,0.5)'",
        "'orange'",
        "'rgba(255,180,0,0.1)'",
        "'rgba(255,180,0,0.5)'",
        "'rgba(255,165,0,0.9)'",
        "'body'",
        "'constraint'",
        "'rgba(255,165,0,0.6)'",
        "'rgba(255,165,0,0.1)'",
        "'canvas'",
        "'2d'",
        "'url('",
        "')'",
        "\"contain\"",
        "\"../body/Composite\"",
        "\"../collision/Grid\"",
        "\"../core/Common\"",
        "\"../core/Events\"",
        "\"../core/Mouse\"",
        "\"../geometry/Bounds\"",
        "\"../geometry/Vector\"",
        "'../geometry/Bounds'",
        "'../body/Composite'",
        "'../core/Common'",
        "'../core/Events'",
        "'../geometry/Vector'",
        "'undefined'",
        "'RenderPixi.create: Matter.RenderPixi is deprecated (see docs)'",
        "'#fafafa'",
        "'#222'",
        "'transparent'",
        "'beforeUpdate'",
        "'No \"render.element\" passed, \"render.canvas\" was not inserted into document.'",
        "'bg-0'",
        "'bg-0'",
        "'#'",
        "'bg-0'",
        "'bg-0'",
        "'c-'",
        "'b-'",
        "'b-'",
        "'#bbb'",
        "'#CD5C5C'",
        "\"../body/Composite\"",
        "\"../core/Common\"",
        "\"../core/Events\"",
        "\"../geometry/Bounds\"",
        "\"../geometry/Vector\""
    ],
    "variables": [
        "g",
        "define",
        "exports",
        "c",
        "a",
        "p",
        "n",
        "u",
        "i",
        "Body",
        "Vertices",
        "Sleeping",
        "Render",
        "Common",
        "Bounds",
        "Axes",
        "defaults",
        "body",
        "_initProperties",
        "defaultFillStyle",
        "defaultStrokeStyle",
        "property",
        "i",
        "part",
        "moment",
        "centre",
        "i",
        "part",
        "vertices",
        "hull",
        "hullCentre",
        "total",
        "delta",
        "i",
        "part",
        "delta",
        "i",
        "part",
        "cos",
        "sin",
        "dx",
        "dy",
        "totalArea",
        "totalInertia",
        "i",
        "part",
        "deltaTimeSquared",
        "frictionAir",
        "velocityPrevX",
        "velocityPrevY",
        "i",
        "part",
        "offset",
        "properties",
        "i",
        "part",
        "mass",
        "Composite",
        "Events",
        "Common",
        "Bounds",
        "Body",
        "i",
        "childComposite",
        "objects",
        "i",
        "obj",
        "objects",
        "i",
        "obj",
        "position",
        "i",
        "position",
        "i",
        "position",
        "i",
        "i",
        "bodies",
        "i",
        "constraints",
        "i",
        "composites",
        "i",
        "objects",
        "objects",
        "i",
        "bodies",
        "i",
        "cos",
        "sin",
        "bodies",
        "i",
        "body",
        "dx",
        "dy",
        "bodies",
        "i",
        "body",
        "dx",
        "dy",
        "bodies",
        "vertices",
        "i",
        "body",
        "World",
        "Composite",
        "Constraint",
        "Common",
        "composite",
        "defaults",
        "Contact",
        "Detector",
        "SAT",
        "Pair",
        "Bounds",
        "collisions",
        "pairsTable",
        "i",
        "bodyA",
        "bodyB",
        "j",
        "partA",
        "k",
        "partB",
        "pairId",
        "pair",
        "previousCollision",
        "collision",
        "Grid",
        "Pair",
        "Detector",
        "Common",
        "defaults",
        "i",
        "col",
        "row",
        "world",
        "buckets",
        "bucket",
        "bucketId",
        "gridChanged",
        "body",
        "newRegion",
        "union",
        "isInsideNewRegion",
        "isInsideOldRegion",
        "startCol",
        "endCol",
        "startRow",
        "endRow",
        "bounds",
        "startCol",
        "endCol",
        "startRow",
        "endRow",
        "bucket",
        "i",
        "bodyB",
        "pairId",
        "pair",
        "i",
        "bodyB",
        "pairId",
        "pair",
        "pairKeys",
        "pair",
        "pairs",
        "k",
        "Pair",
        "Contact",
        "bodyA",
        "bodyB",
        "parentA",
        "parentB",
        "pair",
        "contacts",
        "supports",
        "activeContacts",
        "parentA",
        "parentB",
        "i",
        "support",
        "contactId",
        "contact",
        "Pairs",
        "Pair",
        "Common",
        "pairsList",
        "pairsTable",
        "collisionStart",
        "collisionEnd",
        "collisionActive",
        "activePairIds",
        "collision",
        "pairId",
        "pair",
        "i",
        "pairsList",
        "pairsTable",
        "indexesToRemove",
        "pair",
        "collision",
        "pairIndex",
        "i",
        "Query",
        "SAT",
        "Bounds",
        "Bodies",
        "Vertices",
        "collisions",
        "i",
        "bodyA",
        "j",
        "part",
        "collision",
        "rayAngle",
        "rayLength",
        "rayX",
        "rayY",
        "ray",
        "collisions",
        "i",
        "collision",
        "result",
        "i",
        "body",
        "overlaps",
        "result",
        "i",
        "body",
        "j",
        "part",
        "Resolver",
        "Vertices",
        "Common",
        "Bounds",
        "i",
        "pair",
        "activeCount",
        "i",
        "pair",
        "collision",
        "bodyA",
        "bodyB",
        "normal",
        "bodyBtoA",
        "contactShare",
        "positionImpulse",
        "contactCount",
        "tempA",
        "tempB",
        "tempC",
        "tempD",
        "i",
        "body",
        "j",
        "part",
        "i",
        "j",
        "pair",
        "contacts",
        "collision",
        "bodyA",
        "bodyB",
        "normal",
        "tangent",
        "contact",
        "contactVertex",
        "normalImpulse",
        "tangentImpulse",
        "offset",
        "impulse",
        "tempA",
        "timeScaleSquared",
        "impulse",
        "tempA",
        "tempB",
        "tempC",
        "tempD",
        "tempE",
        "i",
        "pair",
        "collision",
        "bodyA",
        "bodyB",
        "normal",
        "tangent",
        "contacts",
        "contactShare",
        "j",
        "contact",
        "contactVertex",
        "offsetA",
        "offsetB",
        "velocityPointA",
        "velocityPointB",
        "relativeVelocity",
        "normalVelocity",
        "tangentVelocity",
        "tangentSpeed",
        "tangentVelocityDirection",
        "normalImpulse",
        "normalForce",
        "tangentImpulse",
        "tangentVelocity",
        "maxFriction",
        "Infinity",
        "oAcN",
        "oBcN",
        "share",
        "contactNormalImpulse",
        "contactTangentImpulse",
        "SAT",
        "Vertices",
        "overlapAB",
        "overlapBA",
        "minOverlap",
        "collision",
        "canReusePrevCol",
        "parentA",
        "parentB",
        "motion",
        "axisBodyA",
        "axisBodyB",
        "axes",
        "verticesB",
        "supports",
        "verticesA",
        "projectionA",
        "projectionB",
        "result",
        "overlap",
        "axis",
        "i",
        "min",
        "max",
        "min",
        "i",
        "dot",
        "nearestDistance",
        "vertexToBody",
        "vertices",
        "bodyAPosition",
        "distance",
        "vertex",
        "vertexA",
        "vertexB",
        "i",
        "prevIndex",
        "nextIndex",
        "Constraint",
        "Vertices",
        "Sleeping",
        "Bounds",
        "Axes",
        "Common",
        "constraint",
        "options",
        "initialPointA",
        "initialPointB",
        "length",
        "render",
        "i",
        "body",
        "impulse",
        "i",
        "constraint",
        "fixedA",
        "fixedB",
        "bodyA",
        "bodyB",
        "pointA",
        "pointB",
        "pointAWorld",
        "pointA",
        "pointBWorld",
        "pointB",
        "delta",
        "currentLength",
        "difference",
        "stiffness",
        "force",
        "massTotal",
        "inertiaTotal",
        "resistanceTotal",
        "torque",
        "share",
        "normal",
        "normalVelocity",
        "relativeVelocity",
        "zero",
        "i",
        "body",
        "impulse",
        "j",
        "part",
        "MouseConstraint",
        "Vertices",
        "Sleeping",
        "Mouse",
        "Events",
        "Detector",
        "Constraint",
        "Composite",
        "Common",
        "Bounds",
        "mouse",
        "constraint",
        "defaults",
        "mouseConstraint",
        "allBodies",
        "mouse",
        "constraint",
        "body",
        "i",
        "j",
        "part",
        "mouse",
        "mouseEvents",
        "Common",
        "argsStart",
        "args",
        "deepClone",
        "i",
        "argsStart",
        "source",
        "keys",
        "values",
        "keys",
        "i",
        "i",
        "parts",
        "i",
        "j",
        "temp",
        "_seededRandom",
        "i",
        "mapped",
        "i",
        "result",
        "visited",
        "temp",
        "neighbors",
        "i",
        "neighbor",
        "funcs",
        "i",
        "func",
        "chain",
        "lastResult",
        "args",
        "i",
        "l",
        "result",
        "obj",
        "Engine",
        "World",
        "Sleeping",
        "Resolver",
        "Render",
        "Pairs",
        "Metrics",
        "Grid",
        "Events",
        "Composite",
        "Constraint",
        "Common",
        "Body",
        "defaults",
        "engine",
        "renderDefaults",
        "world",
        "timing",
        "broadphase",
        "broadphasePairs",
        "i",
        "allBodies",
        "allConstraints",
        "collisions",
        "pairs",
        "timestamp",
        "bodies",
        "i",
        "body",
        "world",
        "broadphase",
        "bodies",
        "i",
        "body",
        "gravityScale",
        "i",
        "body",
        "i",
        "body",
        "Events",
        "Common",
        "names",
        "name",
        "i",
        "names",
        "i",
        "callbacks",
        "newCallbacks",
        "j",
        "names",
        "name",
        "callbacks",
        "eventClone",
        "i",
        "j",
        "Matter",
        "Plugin",
        "Common",
        "Mouse",
        "Common",
        "mouse",
        "position",
        "touches",
        "position",
        "touches",
        "position",
        "touches",
        "elementBounds",
        "rootNode",
        "scrollX",
        "scrollY",
        "touches",
        "x",
        "y",
        "Plugin",
        "Common",
        "registered",
        "pluginVersion",
        "registeredVersion",
        "parsed",
        "dependencies",
        "sortedDependencies",
        "status",
        "i",
        "plugin",
        "parsedBase",
        "name",
        "parsed",
        "resolved",
        "i",
        "pattern",
        "pattern",
        "identifiers",
        "isRange",
        "version",
        "parts",
        "rangeParsed",
        "rangeParts",
        "versionParsed",
        "versionParts",
        "Runner",
        "Events",
        "Engine",
        "Common",
        "_requestAnimationFrame",
        "_cancelAnimationFrame",
        "_frameTimeout",
        "defaults",
        "runner",
        "timing",
        "correction",
        "delta",
        "Sleeping",
        "Events",
        "timeFactor",
        "i",
        "body",
        "motion",
        "minMotion",
        "maxMotion",
        "timeFactor",
        "i",
        "pair",
        "collision",
        "bodyA",
        "bodyB",
        "sleepingBody",
        "movingBody",
        "wasSleeping",
        "Bodies",
        "Vertices",
        "Common",
        "Body",
        "Bounds",
        "decomp",
        "rectangle",
        "chamfer",
        "roof",
        "x1",
        "x2",
        "x3",
        "verticesPath",
        "trapezoid",
        "chamfer",
        "circle",
        "sides",
        "theta",
        "path",
        "offset",
        "i",
        "angle",
        "xx",
        "yy",
        "polygon",
        "chamfer",
        "body",
        "parts",
        "isConvex",
        "vertices",
        "i",
        "j",
        "k",
        "v",
        "z",
        "concave",
        "decomposed",
        "chunk",
        "chunkVertices",
        "coincident_max_dist",
        "partA",
        "partB",
        "pav",
        "pbv",
        "da",
        "db",
        "Composites",
        "Composite",
        "Constraint",
        "Common",
        "Body",
        "Bodies",
        "stack",
        "x",
        "xx",
        "y",
        "yy",
        "lastBody",
        "i",
        "row",
        "maxHeight",
        "column",
        "body",
        "bodyHeight",
        "bodyWidth",
        "bodies",
        "i",
        "bodyA",
        "bodyB",
        "bodyAHeight",
        "bodyAWidth",
        "bodyBHeight",
        "bodyBWidth",
        "defaults",
        "constraint",
        "bodies",
        "row",
        "col",
        "bodyA",
        "bodyB",
        "bodyC",
        "actualRows",
        "lastBodyWidth",
        "start",
        "row",
        "end",
        "xOffset",
        "newtonsCradle",
        "i",
        "separation",
        "circle",
        "constraint",
        "group",
        "wheelBase",
        "wheelAOffset",
        "wheelBOffset",
        "wheelYOffset",
        "car",
        "body",
        "wheelA",
        "wheelB",
        "axelA",
        "axelB",
        "softBody",
        "Axes",
        "Common",
        "axes",
        "i",
        "j",
        "normal",
        "gradient",
        "cos",
        "sin",
        "i",
        "axis",
        "xx",
        "Bounds",
        "bounds",
        "i",
        "vertex",
        "deltaX",
        "deltaY",
        "Svg",
        "Bounds",
        "Common",
        "i",
        "il",
        "total",
        "point",
        "segment",
        "segments",
        "segmentsQueue",
        "lastSegment",
        "lastPoint",
        "segmentIndex",
        "points",
        "lx",
        "ly",
        "length",
        "x",
        "y",
        "addPoint",
        "isRelative",
        "point",
        "addSegmentPoint",
        "segType",
        "x0",
        "y0",
        "x1",
        "y1",
        "x2",
        "y2",
        "segs",
        "x",
        "y",
        "len",
        "i",
        "seg",
        "segType",
        "cos",
        "sin",
        "x",
        "cos",
        "sin",
        "x",
        "magnitude",
        "Vertices",
        "Common",
        "vertices",
        "i",
        "point",
        "vertex",
        "pathPattern",
        "points",
        "area",
        "centre",
        "cross",
        "temp",
        "j",
        "i",
        "average",
        "i",
        "area",
        "j",
        "i",
        "numerator",
        "denominator",
        "v",
        "vertices",
        "cross",
        "j",
        "n",
        "i",
        "cos",
        "sin",
        "i",
        "vertice",
        "dx",
        "dy",
        "i",
        "vertice",
        "nextVertice",
        "vertex",
        "delta",
        "i",
        "newVertices",
        "i",
        "prevVertex",
        "vertex",
        "nextVertex",
        "currentRadius",
        "prevNormal",
        "nextNormal",
        "diagonalRadius",
        "radiusVector",
        "midNormal",
        "scaledVertex",
        "precision",
        "quality",
        "alpha",
        "theta",
        "j",
        "centre",
        "flag",
        "n",
        "i",
        "j",
        "k",
        "z",
        "upper",
        "lower",
        "vertex",
        "i",
        "dx",
        "Matter",
        "Render",
        "Common",
        "Composite",
        "Bounds",
        "Events",
        "Grid",
        "Mouse",
        "_requestAnimationFrame",
        "_cancelAnimationFrame",
        "defaults",
        "render",
        "options",
        "canvas",
        "bounds",
        "i",
        "min",
        "max",
        "width",
        "height",
        "viewHeight",
        "viewWidth",
        "outerRatio",
        "innerRatio",
        "scaleX",
        "scaleY",
        "boundsWidth",
        "boundsHeight",
        "boundsScaleX",
        "boundsScaleY",
        "engine",
        "world",
        "canvas",
        "context",
        "options",
        "allBodies",
        "allConstraints",
        "background",
        "bodies",
        "constraints",
        "i",
        "body",
        "constraint",
        "bodyA",
        "bodyB",
        "pointAWorld",
        "pointBWorld",
        "c",
        "context",
        "engine",
        "world",
        "metrics",
        "options",
        "bodies",
        "space",
        "text",
        "split",
        "i",
        "c",
        "context",
        "i",
        "constraint",
        "bodyA",
        "bodyB",
        "start",
        "end",
        "delta",
        "normal",
        "coils",
        "offset",
        "j",
        "c",
        "context",
        "engine",
        "i",
        "body",
        "j",
        "distanceX",
        "distanceY",
        "distance",
        "c",
        "context",
        "engine",
        "options",
        "showInternalEdges",
        "body",
        "part",
        "i",
        "k",
        "sprite",
        "texture",
        "j",
        "c",
        "context",
        "showInternalEdges",
        "body",
        "part",
        "i",
        "j",
        "k",
        "c",
        "context",
        "body",
        "part",
        "i",
        "j",
        "k",
        "c",
        "context",
        "i",
        "j",
        "k",
        "parts",
        "part",
        "c",
        "context",
        "c",
        "context",
        "engine",
        "options",
        "i",
        "body",
        "parts",
        "j",
        "part",
        "c",
        "context",
        "engine",
        "options",
        "part",
        "i",
        "j",
        "k",
        "body",
        "parts",
        "axis",
        "c",
        "context",
        "engine",
        "options",
        "body",
        "part",
        "i",
        "k",
        "c",
        "context",
        "i",
        "body",
        "c",
        "context",
        "i",
        "j",
        "parts",
        "part",
        "c",
        "context",
        "options",
        "pair",
        "collision",
        "corrected",
        "bodyA",
        "bodyB",
        "i",
        "j",
        "contact",
        "vertex",
        "normalPosX",
        "normalPosY",
        "c",
        "context",
        "options",
        "pair",
        "collision",
        "corrected",
        "bodyA",
        "bodyB",
        "i",
        "j",
        "k",
        "c",
        "context",
        "options",
        "bucketKeys",
        "i",
        "bucketId",
        "region",
        "engine",
        "selected",
        "render",
        "options",
        "bounds",
        "boundsWidth",
        "boundsHeight",
        "boundsScaleX",
        "boundsScaleY",
        "i",
        "item",
        "point",
        "_createCanvas",
        "canvas",
        "_getPixelRatio",
        "context",
        "devicePixelRatio",
        "backingStorePixelRatio",
        "_getTexture",
        "image",
        "_applyBackground",
        "cssBackground",
        "background",
        "RenderPixi",
        "Bounds",
        "Composite",
        "Common",
        "Events",
        "_requestAnimationFrame",
        "_cancelAnimationFrame",
        "defaults",
        "render",
        "transparent",
        "container",
        "spriteContainer",
        "bgSprite",
        "isColor",
        "bgSprite",
        "color",
        "texture",
        "engine",
        "world",
        "renderer",
        "container",
        "options",
        "bodies",
        "allConstraints",
        "constraints",
        "i",
        "boundsWidth",
        "boundsHeight",
        "boundsScaleX",
        "boundsScaleY",
        "body",
        "constraint",
        "bodyA",
        "bodyB",
        "pointAWorld",
        "pointBWorld",
        "engine",
        "bodyA",
        "bodyB",
        "pointA",
        "pointB",
        "container",
        "constraintRender",
        "primitiveId",
        "primitive",
        "engine",
        "bodyRender",
        "spriteId",
        "sprite",
        "spriteContainer",
        "primitiveId",
        "primitive",
        "container",
        "_createBodySprite",
        "bodyRender",
        "texturePath",
        "texture",
        "sprite",
        "_createBodyPrimitive",
        "bodyRender",
        "options",
        "primitive",
        "fillStyle",
        "strokeStyle",
        "strokeStyleIndicator",
        "strokeStyleWireframe",
        "strokeStyleWireframeIndicator",
        "part",
        "k",
        "j",
        "_getTexture",
        "texture"
    ],
    "comments": [
        "init required properties (order is important)",
        "allow options to override the automatically calculated properties",
        "render properties",
        "change vertices",
        "update properties",
        "orient vertices around the centre of mass at origin (0, 0)",
        "update inertia while vertices are at origin (0, 0)",
        "update geometry",
        "add all the parts, ensuring that the first part is always the parent body",
        "find the convex hull of all parts to set on the parent body",
        "sum the properties of all compound parts of the parent body",
        "scale vertices",
        "update properties",
        "update inertia (requires vertices to be at origin)",
        "scale position",
        "update bounds",
        "handle parent body",
        "handle circles",
        "body is no longer a circle",
        "from the previous step",
        "update velocity with Verlet integration",
        "update angular velocity with Verlet integration",
        "track speed and acceleration",
        "transform the body geometry",
        "from equations at:",
        "https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory",
        "http://output.to/sideway/default.asp?qno=121100087",
        "sum the properties of all compound parts of the parent body",
        "skip adding compound parts",
        "World is a Composite body",
        "see src/module/Outro.js for these aliases:",
        "TODO: speculative contacts",
        "mid phase",
        "find a previous collision we could reuse",
        "narrow phase",
        "don't update out of world bodies",
        "if the body has changed grid region",
        "update grid buckets affected by region change",
        "iterate over the union of both regions",
        "remove from old region buckets",
        "add to new region buckets",
        "set the new region",
        "flag changes so we can update pairs",
        "update pairs list only if pairs changed (i.e. a body changed region)",
        "add new pairs",
        "keep track of the number of buckets the pair exists in",
        "important for Grid.update to work",
        "add to bodies (after pairs, otherwise pairs with self)",
        "remove from bucket",
        "update pair counts",
        "keep track of the number of buckets the pair exists in",
        "important for _createActivePairsList to work",
        "grid.pairs is used as a hashmap",
        "iterate over grid.pairs",
        "if pair exists in at least one bucket",
        "it is a pair that needs further collision testing so push it",
        "clear collision state arrays, but maintain old reference",
        "pair already exists (but may or may not be active)",
        "pair exists and is active",
        "pair exists but was inactive, so a collision has just started again",
        "update the pair",
        "pair did not exist, create a new pair",
        "push the new pair",
        "deactivate previously active pairs that are now inactive",
        "never remove sleeping pairs",
        "if pair is inactive for too long, mark it to be removed",
        "remove marked pairs",
        "find total contacts on each body",
        "find impulses required to resolve penetration",
        "get current separation between body edges involved in collision",
        "reset contact count",
        "update body geometry",
        "move the body without changing velocity",
        "reset cached impulse if the body has velocity along it",
        "warm the next iteration",
        "resolve each contact",
        "total impulse from contact",
        "apply impulse from contact",
        "update body velocities",
        "resolve each contact",
        "raw impulses",
        "coulomb friction",
        "modify impulses accounting for mass, inertia and offset",
        "handle high velocity and resting collisions separately",
        "high normal velocity so clear cached contact normal impulse",
        "solve resting collision constraints using Erin Catto's method (GDC08)",
        "impulse constraint tends to 0",
        "handle high velocity and resting collisions separately",
        "high tangent velocity so clear cached contact tangent impulse",
        "solve resting collision constraints using Erin Catto's method (GDC08)",
        "tangent impulse tends to -tangentSpeed or +tangentSpeed",
        "total impulse from contact",
        "apply impulse from contact",
        "TODO: true circles and curves",
        "estimate total motion",
        "we may be able to (partially) reuse collision result",
        "but only safe if collision was resting",
        "reuse collision object",
        "if we can reuse the collision result",
        "we only need to test the previously found axis",
        "if we can't reuse a result, perform a full SAT test",
        "important for reuse later",
        "ensure normal is facing away from bodyA",
        "find support points, there is always either exactly one or two",
        "find the supports from bodyB that are inside bodyA",
        "find the supports from bodyA that are inside bodyB",
        "account for the edge case of overlapping but no vertex containment",
        "find closest vertex on bodyB",
        "find next closest vertex using the two connected to it",
        "if bodies defined but no points, use body centre",
        "calculate static length using initial world space points",
        "option defaults",
        "render",
        "Solve fixed constraints first.",
        "Solve free constraints last.",
        "update reference angle",
        "update reference angle",
        "prevent singularity",
        "solve distance constraint with Gauss-Siedel method",
        "keep track of applied impulses for post solving",
        "apply forces",
        "apply damping",
        "apply torque",
        "keep track of applied impulses for post solving",
        "apply forces",
        "apply damping",
        "apply torque",
        "update geometry and reset",
        "dampen the cached impulse for warming next step",
        "reset the mouse state ready for the next step",
        "avoid hasOwnProperty for performance",
        "avoid hasOwnProperty for performance",
        "https://en.wikipedia.org/wiki/Linear_congruential_generator",
        "https://github.com/mgechev/javascript-algorithms",
        "Copyright (c) Minko Gechev (MIT license)",
        "Modifications: tidy formatting and naming",
        "skip circular dependencies",
        "flatten already chained functions",
        "https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358",
        "options may be passed as the first (and only) argument",
        "@deprecated",
        "@deprecated",
        "@deprecated",
        "increment timestamp",
        "create an event object",
        "get lists of all bodies and constraints, no matter what composites they are in",
        "if sleeping enabled, call the sleeping controller",
        "applies gravity to all bodies",
        "update all body position and rotation by integration",
        "update all constraints (first pass)",
        "broadphase pass: find potential collision pairs",
        "if world is dirty, we must flush the whole grid",
        "update the grid buckets based on current bodies",
        "if no broadphase set, we just pass all bodies",
        "clear all composite modified flags",
        "narrowphase pass: find actual collisions, then create or update collision pairs",
        "update collision pairs",
        "wake up bodies involved in collisions",
        "trigger collision events",
        "iteratively resolve position between collisions",
        "update all constraints (second pass)",
        "iteratively resolve velocity between collisions",
        "trigger collision events",
        "clear force buffers",
        "reset force buffers",
        "apply gravity",
        "handle Events.off(object, callback)",
        "create runner if engine is first argument",
        "create an event object",
        "@deprecated",
        "fixed timestep",
        "dynamic timestep based on wall clock between calls",
        "optimistically filter delta over a few frames, to improve stability",
        "limit delta",
        "correction for delta",
        "update engine timing object",
        "time correction for time scaling",
        "fps counter",
        "@deprecated",
        "if world has been modified, clear the render scene graph",
        "@deprecated",
        "update",
        "render",
        "@deprecated",
        "@deprecated",
        "@deprecated",
        "@deprecated",
        "update bodies sleeping status",
        "wake up bodies if they have a force applied",
        "biased average motion estimation between frames",
        "wake up bodies involved in collisions",
        "don't wake inactive pairs",
        "don't wake if at least one body is static",
        "TODO: true circle bodies",
        "approximate circles with polygons until true circles implemented in SAT",
        "optimisation: always use even number of sides (half the number of unique axes)",
        "ensure vertexSets is an array of arrays",
        "fallback to convex hull when decomposition is not possible",
        "initialise a decomposition",
        "vertices are concave and simple, we can decompose into parts",
        "use the quick decomposition algorithm (Bayazit)",
        "for each decomposed chunk",
        "convert vertices into the correct structure",
        "skip small chunks",
        "create a compound part",
        "create body parts",
        "flag internal edges (coincident part edges)",
        "iterate vertices of both parts",
        "find distances between the vertices",
        "if both vertices are very close, consider the edge concident (internal)",
        "create the parent body to be returned, that contains generated compound parts",
        "reverse row order",
        "retroactively fix the first body's position, since width was unknown",
        "find the unique axes, using edge normal gradients",
        "limit precision",
        "https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js",
        "all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)",
        "when the last point doesn't equal the current point add the current point",
        "set last point",
        "skip path ends",
        "map segment to x and y",
        "ensure path is absolute",
        "get total length",
        "queue segments",
        "sample through path",
        "get segment at position",
        "new segment",
        "add points in between when curving",
        "TODO: adaptive sampling",
        "increment by sample value",
        "add remaining segments not passed by sampling",
        "http://phrogz.net/convert-svg-path-to-all-absolute-commands",
        "Copyright (c) Gavin Kistner",
        "http://phrogz.net/js/_ReuseLicense.txt",
        "Modifications: tidy formatting and naming",
        "TODO: consider params for reusing vector objects",
        "find the polygon's moment of inertia, using second moment of area",
        "from equations at http://www.physicsforums.com/showthread.php?t=25293",
        "quality defaults to -1, which is auto",
        "automatically decide precision",
        "use an even value for precision, more likely to reduce axes by using symmetry",
        "http://paulbourke.net/geometry/polygonmesh/",
        "Copyright (c) Paul Bourke (use permitted)",
        "http://geomalgorithms.com/a10-_hull-1.html",
        "sort vertices on x-axis (y-axis for ties)",
        "build lower hull",
        "build upper hull",
        "concatenation of the lower and upper hulls gives the convex hull",
        "omit last points because they are repeated at the beginning of the other list",
        "aliases",
        "find bounds of all objects",
        "find ratios",
        "find scale factor",
        "enable bounds",
        "position and size",
        "center",
        "padding",
        "update mouse",
        "apply background if it has changed",
        "clear the canvas with a transparent fill, to allow the canvas background to show",
        "handle bounds",
        "filter out bodies that are not in view",
        "filter out constraints that are not in view",
        "transform the view",
        "update mouse",
        "fully featured rendering of bodies",
        "optimised method for wireframes only",
        "revert view transforms",
        "handle compound parts",
        "part sprite",
        "revert translation, hopefully faster than save / restore",
        "part polygon",
        "render all bodies",
        "handle compound parts",
        "render convex hulls",
        "render all axes",
        "render a single axis indicator",
        "render current positions",
        "handle compound parts",
        "render previous positions",
        "render collision positions",
        "render collision normals",
        "render separations",
        "render body selections",
        "render constraint selections",
        "render selection region",
        "init pixi",
        "event listeners",
        "caches",
        "use a sprite batch for performance",
        "insert canvas",
        "prevent menus on canvas",
        "clear stage container",
        "clear sprite batch",
        "clear caches",
        "set background sprite",
        "add sprite batch back into container",
        "reset background state",
        "reset bounds transforms",
        "if solid background color",
        "remove background sprite if existing",
        "initialise background sprite if needed",
        "handle bounds",
        "Hide bodies that are not in view",
        "filter out constraints that are not in view",
        "transform the view",
        "initialise constraint primitive if not existing",
        "don't render if constraint does not have two end points",
        "add to scene graph if not already there",
        "render the constraint on every update, since they can change dynamically",
        "initialise body sprite if not existing",
        "add to scene graph if not already there",
        "update body sprite",
        "initialise body primitive if not existing",
        "add to scene graph if not already there",
        "update body primitive",
        "handle compound parts",
        "angle indicator"
    ],
    "docstrings": [
        "* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT",
        "* The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.",
        "* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body",
        "* Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body",
        "* Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index",
        "* Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield",
        "* Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]",
        "* Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.",
        "* Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic",
        "* Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass",
        "* Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density",
        "* Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia",
        "* Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices",
        "* Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]",
        "* Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position",
        "* Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle",
        "* Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity",
        "* Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity",
        "* Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation",
        "* Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]",
        "* Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]",
        "* Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction",
        "* Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force",
        "* Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}",
        "*\n    *  Events Documentation\n    *",
        "* Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "*\n    *  Properties Documentation\n    *",
        "* An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number",
        "* A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly",
        "* An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"",
        "* An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]",
        "* An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}",
        "* A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body",
        "* A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0",
        "* An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]",
        "* A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }",
        "* A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }",
        "* A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0",
        "* A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0",
        "* A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0",
        "* A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }",
        "* A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0",
        "* A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false",
        "* A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false",
        "* A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false",
        "* A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0",
        "* A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60",
        "* A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001",
        "* A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number",
        "* A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number",
        "* A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number",
        "* A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number",
        "* A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0",
        "* A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1",
        "* A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5",
        "* A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01",
        "* An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object",
        "* An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0",
        "* A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1",
        "* A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1",
        "* A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05",
        "* A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1",
        "* An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object",
        "* A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true",
        "* Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1",
        "* An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object",
        "* An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string",
        "* A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1",
        "* A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1",
        "* A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0",
        "* A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0",
        "* A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0",
        "* A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour",
        "* A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour",
        "* An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]",
        "* A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default",
        "* A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds",
        "* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite",
        "* Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite",
        "* Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]",
        "* Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added",
        "* Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed",
        "* Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added",
        "* Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed",
        "* Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed",
        "* Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added",
        "* Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed",
        "* Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed",
        "* Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added",
        "* Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed",
        "* Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed",
        "* Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]",
        "* Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies",
        "* Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints",
        "* Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites",
        "* Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found",
        "* Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA",
        "* Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite",
        "* Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]",
        "* Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]",
        "* Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]",
        "* Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.",
        "*\n    *  Events Documentation\n    *",
        "* Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "*\n    *  Properties Documentation\n    *",
        "* An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number",
        "* A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly",
        "* An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"",
        "* A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false",
        "* The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null",
        "* An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []",
        "* An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []",
        "* An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []",
        "* An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}",
        "* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite",
        "* Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world",
        "*\n    *  Properties Documentation\n    *",
        "* The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object",
        "* The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0",
        "* The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1",
        "* The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001",
        "* A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }",
        "* An alias for Composite.add\n     * @method add\n     * @param {world} world\n     * @param {} object\n     * @return {composite} The original world with the objects added",
        "* An alias for Composite.remove\n     * @method remove\n     * @param {world} world\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original world with the objects removed",
        "* An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic",
        "* An alias for Composite.addComposite\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added",
        "* An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added",
        "* An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added",
        "* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact",
        "* Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact",
        "* Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID",
        "* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector",
        "* Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions",
        "* Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur",
        "* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid",
        "* Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid",
        "* The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48",
        "* The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48",
        "* Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate",
        "* Clears the grid.\n     * @method clear\n     * @param {grid} grid",
        "* Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region",
        "* Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region",
        "* Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region",
        "* Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id",
        "* Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket",
        "* Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body",
        "* Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body",
        "* Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs",
        "* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair",
        "* Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair",
        "* Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp",
        "* Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp",
        "* Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId",
        "* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs",
        "* Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure",
        "* Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp",
        "* Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp",
        "* Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs",
        "* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query",
        "* Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions",
        "* Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions",
        "* Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query",
        "* Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query",
        "* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver",
        "* Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs",
        "* Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale",
        "* Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies",
        "* Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs",
        "* Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale",
        "* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT",
        "* Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision",
        "* Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result",
        "* Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis",
        "* Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]",
        "* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint",
        "* Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint",
        "* Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies",
        "* Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale",
        "* Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale",
        "* Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies",
        "*\n    *  Properties Documentation\n    *",
        "* An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number",
        "* A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly",
        "* An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"",
        "* An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object",
        "* A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true",
        "* A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2",
        "* A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour",
        "* A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'",
        "* A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true",
        "* The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null",
        "* The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null",
        "* A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }",
        "* A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }",
        "* A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1",
        "* A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0",
        "* A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number",
        "* An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}",
        "* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint",
        "* Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint",
        "* Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies",
        "* Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint",
        "*\n    *  Events Documentation\n    *",
        "* Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "*\n    *  Properties Documentation\n    *",
        "* A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly",
        "* The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse",
        "* The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null",
        "* The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint",
        "* An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object",
        "* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common",
        "* Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended",
        "* Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned",
        "* Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys",
        "* Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values",
        "* Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path",
        "* Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining",
        "* Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly",
        "* Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array",
        "* Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false",
        "* Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false",
        "* Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false",
        "* Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false",
        "* Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false",
        "* Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive",
        "* Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive",
        "* Returns the current timestamp since the time origin (e.g. from page load).\n     * The result will be high-resolution including decimal places if available.\n     * @method now\n     * @return {number} the current timestamp",
        "* Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive",
        "* Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string",
        "* The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1",
        "* Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.",
        "* Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.",
        "* Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.",
        "* Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID",
        "* A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.",
        "* A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.",
        "* Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.",
        "* Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.",
        "* Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original",
        "* Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original",
        "* Used to require external libraries outside of the bundle.\n     * It first looks for the `globalName` on the environment's global namespace.\n     * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n     * @private\n     * @method _requireGlobal\n     * @param {string} globalName The global module name\n     * @param {string} moduleName The fallback CommonJS module name\n     * @return {} The loaded module",
        "* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine",
        "* Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine",
        "* Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]",
        "* Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB",
        "* Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine",
        "* Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies",
        "* Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity",
        "* Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds",
        "* An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine",
        "* Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "*\n    *  Properties Documentation\n    *",
        "* An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6",
        "* An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4",
        "* An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2",
        "* A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false",
        "* An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object",
        "* A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1",
        "* A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0",
        "* An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance",
        "* An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance",
        "* A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance",
        "* An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}",
        "* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events",
        "* Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback",
        "* Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback",
        "* Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event",
        "* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter",
        "* The library name.\n     * @property name\n     * @readOnly\n     * @type {String}",
        "* The library version.\n     * @property version\n     * @readOnly\n     * @type {String}",
        "* A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}",
        "* The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}",
        "* Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).",
        "* Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original",
        "* Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original",
        "* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse",
        "* Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse",
        "* Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element",
        "* Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse",
        "* Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset",
        "* Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale",
        "* Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}",
        "* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin",
        "* Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.",
        "* Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.",
        "* Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.",
        "* Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.",
        "* Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.",
        "* Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.",
        "* Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).",
        "* Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.",
        "* Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.",
        "* Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.",
        "* Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.",
        "* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner",
        "* Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options",
        "* Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine",
        "* A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time",
        "* Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner",
        "* Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine",
        "*\n    *  Events Documentation\n    *",
        "* Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated",
        "* Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated",
        "*\n    *  Properties Documentation\n    *",
        "* A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true",
        "* A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false",
        "* A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60",
        "* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping",
        "* Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale",
        "* Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale",
        "* Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping",
        "* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies",
        "* Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body",
        "* Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body",
        "* Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body",
        "* Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body",
        "* Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}",
        "* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites",
        "* Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback",
        "* Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints",
        "* Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints",
        "* Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback",
        "* Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body",
        "* Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body",
        "* Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody",
        "* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes",
        "* Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices",
        "* Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle",
        "* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds",
        "* Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object",
        "* Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity",
        "* Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false",
        "* Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false",
        "* Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector",
        "* Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position",
        "* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg",
        "* Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points",
        "* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector",
        "* Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector",
        "* Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector",
        "* Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector",
        "* Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector",
        "* Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)",
        "* Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point",
        "* Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised",
        "* Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors",
        "* Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors",
        "* Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors",
        "* Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added",
        "* Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted",
        "* Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar",
        "* Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar",
        "* Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector",
        "* Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector",
        "* Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians",
        "* Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private",
        "* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices",
        "* Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body",
        "* Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices",
        "* Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point",
        "* Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point",
        "* Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area",
        "* Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia",
        "* Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar",
        "* Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point",
        "* Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false",
        "* Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point",
        "* Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax",
        "* Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices",
        "* Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).",
        "* Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices",
        "* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render",
        "* Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer",
        "* Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render",
        "* Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render",
        "* Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio",
        "* Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]",
        "* Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render",
        "* Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render",
        "* Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render",
        "* Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context",
        "* Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context",
        "* Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context",
        "* Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context",
        "* Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context",
        "* Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context",
        "* Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context",
        "* Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context",
        "* Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context",
        "* Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context",
        "* Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context",
        "* Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context",
        "* Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context",
        "* Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context",
        "* Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context",
        "* Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context",
        "* Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context",
        "* Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas",
        "* Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio",
        "* Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture",
        "* Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background",
        "*\n    *  Events Documentation\n    *",
        "* Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "* Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event",
        "*\n    *  Properties Documentation\n    *",
        "* A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render",
        "* A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine",
        "* A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null",
        "* The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null",
        "* The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}",
        "* The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800",
        "* The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600",
        "* A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false",
        "* A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds",
        "* The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D",
        "* The sprite texture cache.\n     *\n     * @property textures\n     * @type {}",
        "* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).",
        "* Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated",
        "* Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated",
        "* Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated",
        "* Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated",
        "* Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated",
        "* Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated",
        "* Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated",
        "* Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated",
        "* Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated",
        "* Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated",
        "* Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated"
    ],
    "functions": [
        "r",
        "o"
    ],
    "classes": []
}