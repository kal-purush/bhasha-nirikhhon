{
    "identifiers": [
        "os",
        "glob",
        "platform",
        "re",
        "subprocess",
        "sys",
        "shutil",
        "which",
        "ImportError",
        "distutils",
        "spawn",
        "find_executable",
        "which",
        "platform",
        "system",
        "platform",
        "system",
        "platform",
        "system",
        "actual_version",
        "required_version",
        "actual_version",
        "actual_version",
        "strip",
        "required_version",
        "strip",
        "actual_version",
        "startswith",
        "required_version",
        "actual_version",
        "required_version",
        "v",
        "v",
        "actual_version",
        "split",
        "v",
        "v",
        "required_version",
        "split",
        "actual",
        "required",
        "path",
        "name",
        "line",
        "open",
        "path",
        "encoding",
        "readlines",
        "re",
        "match",
        "name",
        "line",
        "match",
        "match",
        "group",
        "first",
        "second",
        "os",
        "path",
        "join",
        "f",
        "s",
        "f",
        "first",
        "s",
        "second",
        "_is_linux",
        "which",
        "subprocess",
        "check_output",
        "ldconfig_path",
        "re",
        "compile",
        "line",
        "output",
        "splitlines",
        "pattern",
        "match",
        "line",
        "decode",
        "UnicodeDecodeError",
        "match",
        "result",
        "add",
        "os",
        "path",
        "dirname",
        "match",
        "group",
        "sorted",
        "result",
        "cuda_version",
        "cuda_version",
        "cuda_version",
        "cuda_version",
        "_is_windows",
        "os",
        "environ",
        "get",
        "cuda_version",
        "cuda_version",
        "_get_ld_config_paths",
        "base_paths",
        "relative_paths",
        "filepattern",
        "join",
        "path",
        "path",
        "sorted",
        "base_paths",
        "join",
        "path",
        "path",
        "relative_paths",
        "ConfigError",
        "filepattern",
        "relative_paths",
        "base_paths",
        "base_paths",
        "relative_paths",
        "filepattern",
        "path",
        "_cartesian_product",
        "base_paths",
        "relative_paths",
        "file_path",
        "glob",
        "glob",
        "os",
        "path",
        "join",
        "path",
        "filepattern",
        "file_path",
        "_not_found_error",
        "base_paths",
        "relative_paths",
        "filepattern",
        "base_paths",
        "library_name",
        "required_version",
        "_is_windows",
        "library_name",
        "_is_macos",
        "join",
        "library_name",
        "required_version",
        "split",
        "join",
        "library_name",
        "required_version",
        "split",
        "_find_file",
        "base_paths",
        "_library_paths",
        "filepattern",
        "base_paths",
        "relative_paths",
        "filepatterns",
        "required_version",
        "get_version",
        "filepatterns",
        "filepatterns",
        "path",
        "_cartesian_product",
        "base_paths",
        "relative_paths",
        "pattern",
        "filepatterns",
        "file_path",
        "glob",
        "glob",
        "os",
        "path",
        "join",
        "path",
        "pattern",
        "get_version",
        "file_path",
        "_matches_version",
        "actual_version",
        "required_version",
        "file_path",
        "actual_version",
        "_not_found_error",
        "base_paths",
        "relative_paths",
        "join",
        "filepatterns",
        "required_version",
        "base_paths",
        "header_name",
        "required_version",
        "get_version",
        "_find_versioned_file",
        "base_paths",
        "_header_paths",
        "header_name",
        "required_version",
        "get_version",
        "base_paths",
        "required_version",
        "path",
        "_get_header_version",
        "path",
        "version",
        "version",
        "version",
        "_find_header",
        "base_paths",
        "required_version",
        "get_header_version",
        "header_version",
        "_find_library",
        "base_paths",
        "cuda_version",
        "path",
        "line",
        "subprocess",
        "check_output",
        "path",
        "splitlines",
        "re",
        "match",
        "pattern",
        "line",
        "decode",
        "match",
        "match",
        "group",
        "_is_windows",
        "_find_versioned_file",
        "base_paths",
        "nvcc_name",
        "cuda_version",
        "get_nvcc_version",
        "_find_file",
        "base_paths",
        "_find_file",
        "base_paths",
        "_header_paths",
        "_find_library",
        "base_paths",
        "required_version",
        "os",
        "path",
        "dirname",
        "nvcc_path",
        "os",
        "path",
        "dirname",
        "nvvm_path",
        "os",
        "path",
        "normpath",
        "os",
        "path",
        "join",
        "cuda_binary_dir",
        "os",
        "path",
        "normpath",
        "os",
        "path",
        "join",
        "nvvm_library_dir",
        "cuda_toolkit_paths",
        "cuda_toolkit_paths",
        "ConfigError",
        "cuda_toolkit_paths",
        "cuda_version",
        "os",
        "path",
        "dirname",
        "cuda_header_path",
        "os",
        "path",
        "dirname",
        "cuda_library_path",
        "cuda_binary_dir",
        "nvvm_library_dir",
        "os",
        "path",
        "dirname",
        "cupti_header_path",
        "os",
        "path",
        "dirname",
        "cupti_library_path",
        "cuda_toolkit_paths",
        "base_paths",
        "required_version",
        "cuda_version",
        "_at_least_version",
        "cuda_version",
        "path",
        "_get_header_version",
        "path",
        "name",
        "name",
        "join",
        "version",
        "_find_header",
        "base_paths",
        "required_version",
        "get_header_version",
        "cublas_version",
        "split",
        "cuda_version",
        "_find_file",
        "base_paths",
        "_header_paths",
        "required_version",
        "_find_library",
        "base_paths",
        "cublas_major_version",
        "cublas_version",
        "os",
        "path",
        "dirname",
        "header_path",
        "os",
        "path",
        "dirname",
        "library_path",
        "base_paths",
        "required_version",
        "cuda_version",
        "_at_least_version",
        "cuda_version",
        "path",
        "_get_header_version",
        "path",
        "name",
        "name",
        "join",
        "version",
        "_find_header",
        "base_paths",
        "required_version",
        "get_header_version",
        "header_version",
        "split",
        "cuda_version",
        "_find_file",
        "base_paths",
        "_header_paths",
        "required_version",
        "_find_library",
        "base_paths",
        "cusolver_version",
        "header_version",
        "os",
        "path",
        "dirname",
        "header_path",
        "os",
        "path",
        "dirname",
        "library_path",
        "base_paths",
        "required_version",
        "cuda_version",
        "_at_least_version",
        "cuda_version",
        "path",
        "_get_header_version",
        "path",
        "name",
        "name",
        "join",
        "version",
        "_find_header",
        "base_paths",
        "required_version",
        "get_header_version",
        "header_version",
        "split",
        "cuda_version",
        "_find_file",
        "base_paths",
        "_header_paths",
        "required_version",
        "_find_library",
        "base_paths",
        "curand_version",
        "header_version",
        "os",
        "path",
        "dirname",
        "header_path",
        "os",
        "path",
        "dirname",
        "library_path",
        "base_paths",
        "required_version",
        "cuda_version",
        "_at_least_version",
        "cuda_version",
        "path",
        "_get_header_version",
        "path",
        "name",
        "name",
        "join",
        "version",
        "_find_header",
        "base_paths",
        "required_version",
        "get_header_version",
        "header_version",
        "split",
        "cuda_version",
        "_find_file",
        "base_paths",
        "_header_paths",
        "required_version",
        "_find_library",
        "base_paths",
        "cufft_version",
        "header_version",
        "os",
        "path",
        "dirname",
        "header_path",
        "os",
        "path",
        "dirname",
        "library_path",
        "base_paths",
        "required_version",
        "path",
        "_get_header_version",
        "path",
        "name",
        "name",
        "join",
        "version",
        "version",
        "_find_header",
        "base_paths",
        "required_version",
        "get_header_version",
        "header_version",
        "split",
        "_find_library",
        "base_paths",
        "cudnn_version",
        "cudnn_version",
        "os",
        "path",
        "dirname",
        "header_path",
        "os",
        "path",
        "dirname",
        "library_path",
        "base_paths",
        "required_version",
        "path",
        "_get_header_version",
        "path",
        "name",
        "name",
        "join",
        "version",
        "_find_header",
        "base_paths",
        "required_version",
        "get_header_version",
        "header_version",
        "split",
        "_find_library",
        "base_paths",
        "nccl_version",
        "nccl_version",
        "os",
        "path",
        "dirname",
        "header_path",
        "os",
        "path",
        "dirname",
        "library_path",
        "base_paths",
        "required_version",
        "path",
        "_get_header_version",
        "path",
        "name",
        "name",
        "version",
        "all",
        "version",
        "join",
        "version",
        "_find_header",
        "base_paths",
        "required_version",
        "get_header_version",
        "ConfigError",
        "_find_header",
        "base_paths",
        "required_version",
        "get_header_version",
        "header_version",
        "split",
        "_find_library",
        "base_paths",
        "tensorrt_version",
        "tensorrt_version",
        "os",
        "path",
        "dirname",
        "header_path",
        "os",
        "path",
        "dirname",
        "library_path",
        "env_name",
        "env_name",
        "os",
        "environ",
        "os",
        "environ",
        "env_name",
        "split",
        "env_name",
        "env_name",
        "os",
        "environ",
        "re",
        "match",
        "os",
        "environ",
        "env_name",
        "match",
        "match",
        "group",
        "_list_from_env",
        "env_name",
        "path",
        "os",
        "path",
        "normpath",
        "path",
        "_is_windows",
        "path",
        "replace",
        "path",
        "argv",
        "lower",
        "argv",
        "sys",
        "argv",
        "os",
        "environ",
        "get",
        "_list_from_env",
        "_get_default_cuda_paths",
        "cuda_version",
        "path",
        "path",
        "base_paths",
        "os",
        "path",
        "exists",
        "path",
        "libraries",
        "_list_from_env",
        "base_paths",
        "result",
        "update",
        "_find_cuda_config",
        "cuda_paths",
        "cuda_version",
        "result",
        "base_paths",
        "v",
        "v",
        "cuda_version",
        "split",
        "cuda_paths",
        "os",
        "environ",
        "get",
        "result",
        "update",
        "_find_cublas_config",
        "cublas_paths",
        "cublas_version",
        "cuda_version",
        "base_paths",
        "v",
        "v",
        "cuda_version",
        "split",
        "cuda_paths",
        "os",
        "environ",
        "get",
        "result",
        "update",
        "_find_cusolver_config",
        "cusolver_paths",
        "cusolver_version",
        "cuda_version",
        "base_paths",
        "v",
        "v",
        "cuda_version",
        "split",
        "cuda_paths",
        "os",
        "environ",
        "get",
        "result",
        "update",
        "_find_curand_config",
        "curand_paths",
        "curand_version",
        "cuda_version",
        "base_paths",
        "v",
        "v",
        "cuda_version",
        "split",
        "cuda_paths",
        "os",
        "environ",
        "get",
        "result",
        "update",
        "_find_cufft_config",
        "cufft_paths",
        "cufft_version",
        "cuda_version",
        "libraries",
        "_get_legacy_path",
        "base_paths",
        "os",
        "environ",
        "get",
        "result",
        "update",
        "_find_cudnn_config",
        "cudnn_paths",
        "cudnn_version",
        "libraries",
        "_get_legacy_path",
        "base_paths",
        "os",
        "environ",
        "get",
        "result",
        "update",
        "_find_nccl_config",
        "nccl_paths",
        "nccl_version",
        "libraries",
        "_get_legacy_path",
        "base_paths",
        "os",
        "environ",
        "get",
        "result",
        "update",
        "_find_tensorrt_config",
        "tensorrt_paths",
        "tensorrt_version",
        "k",
        "v",
        "result",
        "items",
        "k",
        "endswith",
        "k",
        "endswith",
        "_normalize_path",
        "v",
        "result",
        "key",
        "value",
        "sorted",
        "find_cuda_config",
        "items",
        "format",
        "key",
        "value",
        "ConfigError",
        "e",
        "sys",
        "stderr",
        "write",
        "e",
        "sys",
        "exit",
        "main"
    ],
    "literals": [
        "\"Linux\"",
        "\"Windows\"",
        "\"Darwin\"",
        "\".\"",
        "\".\"",
        "\"r\"",
        "\"utf-8\"",
        "r\"#define %s +(\\d+)\"",
        "\"\"",
        "\"ldconfig\"",
        "\"/sbin/ldconfig\"",
        "\"-p\"",
        "\".* => (.*)\"",
        "\"ascii\"",
        "\"*\"",
        "\".\"",
        "\".*\"",
        "\"CUDA_PATH\"",
        "\"C:\\\\Program Files\\\\NVIDIA GPU Computing Toolkit\\\\CUDA\\\\v%s\\\\\"",
        "\"/usr/local/cuda-%s\"",
        "\"/usr/local/cuda\"",
        "\"/usr\"",
        "\"/usr/local/cudnn\"",
        "\"\"",
        "\"include\"",
        "\"include/cuda\"",
        "\"include/*-linux-gnu\"",
        "\"extras/CUPTI/include\"",
        "\"include/cuda/CUPTI\"",
        "\"\"",
        "\"lib64\"",
        "\"lib\"",
        "\"lib/*-linux-gnu\"",
        "\"lib/x64\"",
        "\"extras/CUPTI/*\"",
        "\"\"",
        "\"\\n        '%s'\"",
        "\"\"",
        "\"\\n        '%s'\"",
        "\"Could not find any %s in any subdirectory:%s\\nof:%s\\n\"",
        "\".lib\"",
        "\"%s*.dylib\"",
        "\".\"",
        "\"lib\"",
        "\".\"",
        "\".\"",
        "\"lib\"",
        "\"so\"",
        "\".\"",
        "\"*\"",
        "\", \"",
        "\" matching version '%s'\"",
        "\"CUDA_VERSION\"",
        "\"%d.%d\"",
        "\"cuda.h\"",
        "\"cudart\"",
        "r\"Cuda compilation tools, release \\d+\\.\\d+, V(\\d+\\.\\d+\\.\\d+)\"",
        "\"--version\"",
        "\"ascii\"",
        "\"nvcc.exe\"",
        "\"nvcc\"",
        "\"\"",
        "\"bin\"",
        "\"nvvm/libdevice\"",
        "\"share/cuda\"",
        "\"lib/nvidia-cuda-toolkit/libdevice\"",
        "\"libdevice*.10.bc\"",
        "\"cupti.h\"",
        "\"cupti\"",
        "\"..\"",
        "\"../..\"",
        "\"Inconsistent CUDA toolkit path: %s vs %s\"",
        "\"cuda_version\"",
        "\"cuda_include_dir\"",
        "\"cuda_library_dir\"",
        "\"cuda_binary_dir\"",
        "\"nvvm_library_dir\"",
        "\"cupti_include_dir\"",
        "\"cupti_library_dir\"",
        "\"cuda_toolkit_path\"",
        "\"10.1\"",
        "\"CUBLAS_VER_MAJOR\"",
        "\"CUBLAS_VER_MINOR\"",
        "\"CUBLAS_VER_PATCH\"",
        "\".\"",
        "\"cublas_api.h\"",
        "\".\"",
        "\"cublas_api.h\"",
        "\"cublas\"",
        "\"cublas_version\"",
        "\"cublas_include_dir\"",
        "\"cublas_library_dir\"",
        "\"11.0\"",
        "\"CUSOLVER_VER_MAJOR\"",
        "\"CUSOLVER_VER_MINOR\"",
        "\"CUSOLVER_VER_PATCH\"",
        "\".\"",
        "\"cusolver_common.h\"",
        "\".\"",
        "\"cusolver_common.h\"",
        "\"cusolver\"",
        "\"cusolver_version\"",
        "\"cusolver_include_dir\"",
        "\"cusolver_library_dir\"",
        "\"11.0\"",
        "\"CURAND_VER_MAJOR\"",
        "\"CURAND_VER_MINOR\"",
        "\"CURAND_VER_PATCH\"",
        "\".\"",
        "\"curand.h\"",
        "\".\"",
        "\"curand.h\"",
        "\"curand\"",
        "\"curand_version\"",
        "\"curand_include_dir\"",
        "\"curand_library_dir\"",
        "\"11.0\"",
        "\"CUFFT_VER_MAJOR\"",
        "\"CUFFT_VER_MINOR\"",
        "\"CUFFT_VER_PATCH\"",
        "\".\"",
        "\"cufft.h\"",
        "\".\"",
        "\"cufft.h\"",
        "\"cufft\"",
        "\"cufft_version\"",
        "\"cufft_include_dir\"",
        "\"cufft_library_dir\"",
        "\"CUDNN_MAJOR\"",
        "\"CUDNN_MINOR\"",
        "\"CUDNN_PATCHLEVEL\"",
        "\".\"",
        "\"cudnn.h\"",
        "\"cudnn_version.h\"",
        "\".\"",
        "\"cudnn\"",
        "\"cudnn_version\"",
        "\"cudnn_include_dir\"",
        "\"cudnn_library_dir\"",
        "\"NCCL_MAJOR\"",
        "\"NCCL_MINOR\"",
        "\"NCCL_PATCH\"",
        "\".\"",
        "\"nccl.h\"",
        "\".\"",
        "\"nccl\"",
        "\"nccl_version\"",
        "\"nccl_include_dir\"",
        "\"nccl_library_dir\"",
        "\"NV_TENSORRT_MAJOR\"",
        "\"NV_TENSORRT_MINOR\"",
        "\"NV_TENSORRT_PATCH\"",
        "\".\"",
        "\"NvInfer.h\"",
        "\"NvInferVersion.h\"",
        "\".\"",
        "\"nvinfer\"",
        "\"tensorrt_version\"",
        "\"tensorrt_include_dir\"",
        "\"tensorrt_library_dir\"",
        "\",\"",
        "r\"^(/[^/ ]*)+/lib/\\w+-linux-gnu/?$\"",
        "\"\\\\\"",
        "\"/\"",
        "\"TF_CUDA_VERSION\"",
        "\"\"",
        "\"TF_CUDA_PATHS\"",
        "\"cuda\"",
        "\"CUDA_TOOLKIT_PATH\"",
        "\"cuda_version\"",
        "\".\"",
        "\"TF_CUBLAS_VERSION\"",
        "\"\"",
        "\".\"",
        "\"TF_CUSOLVER_VERSION\"",
        "\"\"",
        "\".\"",
        "\"TF_CURAND_VERSION\"",
        "\"\"",
        "\".\"",
        "\"TF_CUFFT_VERSION\"",
        "\"\"",
        "\"cudnn\"",
        "\"CUDNN_INSTALL_PATH\"",
        "\"TF_CUDNN_VERSION\"",
        "\"\"",
        "\"nccl\"",
        "\"NCCL_INSTALL_PATH\"",
        "\"TF_NCCL_VERSION\"",
        "\"\"",
        "\"tensorrt\"",
        "\"TENSORRT_INSTALL_PATH\"",
        "\"TF_TENSORRT_VERSION\"",
        "\"\"",
        "\"_dir\"",
        "\"_path\"",
        "\"{}: {}\"",
        "\"__main__\""
    ],
    "variables": [
        "actual_version",
        "required_version",
        "actual",
        "required",
        "match",
        "ldconfig_path",
        "output",
        "pattern",
        "result",
        "match",
        "match",
        "cuda_version",
        "cuda_version",
        "base_paths",
        "relative_paths",
        "filepattern",
        "filepattern",
        "filepattern",
        "filepatterns",
        "actual_version",
        "version",
        "cuda_header_path",
        "header_version",
        "cuda_version",
        "cuda_library_path",
        "pattern",
        "match",
        "nvcc_name",
        "nvcc_path",
        "nvcc_version",
        "nvvm_path",
        "cupti_header_path",
        "cupti_library_path",
        "cuda_binary_dir",
        "nvvm_library_dir",
        "cuda_toolkit_paths",
        "version",
        "header_path",
        "cublas_version",
        "cublas_major_version",
        "cublas_version",
        "header_path",
        "cublas_major_version",
        "library_path",
        "version",
        "header_path",
        "header_version",
        "cusolver_version",
        "header_version",
        "header_path",
        "cusolver_version",
        "library_path",
        "version",
        "header_path",
        "header_version",
        "curand_version",
        "header_version",
        "header_path",
        "curand_version",
        "library_path",
        "version",
        "header_path",
        "header_version",
        "cufft_version",
        "header_version",
        "header_path",
        "cufft_version",
        "library_path",
        "version",
        "header_path",
        "header_version",
        "cudnn_version",
        "library_path",
        "version",
        "header_path",
        "header_version",
        "nccl_version",
        "library_path",
        "version",
        "version",
        "header_path",
        "header_version",
        "header_path",
        "header_version",
        "tensorrt_version",
        "library_path",
        "match",
        "path",
        "path",
        "libraries",
        "cuda_version",
        "base_paths",
        "base_paths",
        "result",
        "cuda_paths",
        "cuda_version",
        "cublas_paths",
        "cublas_paths",
        "cublas_version",
        "cusolver_paths",
        "cusolver_paths",
        "cusolver_version",
        "curand_paths",
        "curand_paths",
        "curand_version",
        "cufft_paths",
        "cufft_paths",
        "cufft_version",
        "cudnn_paths",
        "cudnn_version",
        "nccl_paths",
        "nccl_version",
        "tensorrt_paths",
        "tensorrt_version",
        "result",
        "k"
    ],
    "comments": [
        "Copyright 2019 The TensorFlow Authors. All Rights Reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "==============================================================================",
        "Strip spaces from the versions.",
        "x.y, see above.",
        "XLA requires the toolkit path to find ptxas and libdevice.",
        "TODO(csigg): pass in both directories instead.",
        "There is no version info available before CUDA 10.1, just find the file.",
        "cuBLAS version is the same as CUDA version (x.y).",
        "`version` is a generator object, so we convert it to a list before using",
        "it (muitiple times below).",
        "Versions not found, make _matches_version returns False.",
        "TensorRT 6 moved the version information to NvInferVersion.h.",
        "Before CUDA 10.1, cuBLAS was in the same directory as the toolkit."
    ],
    "docstrings": [
        "\"\"\"Prints CUDA library and header directories and versions found on the system.\n\nThe script searches for CUDA library and header files on the system, inspects\nthem to determine their version and prints the configuration to stdout.\nThe paths to inspect and the required versions are specified through\nenvironment variables. If no valid configuration is found, the script prints\nto stderr and returns an error code.\n\nThe list of libraries to find is specified as arguments. Supported libraries\nare CUDA (includes cuBLAS), cuDNN, NCCL, and TensorRT.\n\nThe script takes a list of base directories specified by the TF_CUDA_PATHS\nenvironment variable as comma-separated glob list. The script looks for headers\nand library files in a hard-coded set of subdirectories from these base paths.\nIf TF_CUDA_PATHS is not specified, a OS specific default is used:\n\n  Linux:   /usr/local/cuda, /usr, and paths from 'ldconfig -p'.\n  Windows: CUDA_PATH environment variable, or\n           C:\\\\Program Files\\\\NVIDIA GPU Computing Toolkit\\\\CUDA\\\\*\n\nFor backwards compatibility, some libraries also use alternative base\ndirectories from other environment variables if they are specified. List of\nlibrary-specific environment variables:\n\n  Library   Version env variable  Additional base directories\n  ----------------------------------------------------------------\n  CUDA      TF_CUDA_VERSION       CUDA_TOOLKIT_PATH\n  cuBLAS    TF_CUBLAS_VERSION     CUDA_TOOLKIT_PATH\n  cuDNN     TF_CUDNN_VERSION      CUDNN_INSTALL_PATH\n  NCCL      TF_NCCL_VERSION       NCCL_INSTALL_PATH, NCCL_HDR_PATH\n  TensorRT  TF_TENSORRT_VERSION   TENSORRT_INSTALL_PATH\n\nVersions environment variables can be of the form 'x' or 'x.y' to request a\nspecific version, empty or unspecified to accept any version.\n\nThe output of a found library is of the form:\ntf_<library>_version: x.y.z\ntf_<library>_header_dir: ...\ntf_<library>_library_dir: ...\n\"\"\"",
        "\"\"\"Checks whether some version meets the requirements.\n\n    All elements of the required_version need to be present in the\n    actual_version.\n\n        required_version  actual_version  result\n        -----------------------------------------\n        1                 1.1             True\n        1.2               1               False\n        1.2               1.3             False\n                          1               True\n\n    Args:\n      required_version: The version specified by the user.\n      actual_version: The version detected from the CUDA installation.\n    Returns: Whether the actual version matches the required one.\n    \"\"\"",
        "\"\"\"Returns preprocessor defines in C header file.\"\"\"",
        "\"\"\"Returns all path combinations of first and second.\"\"\"",
        "\"\"\"Returns all directories from 'ldconfig -p'.\"\"\"",
        "\"\"\"Returns hard-coded set of relative paths to look for header files.\"\"\"",
        "\"\"\"Returns hard-coded set of relative paths to look for library files.\"\"\"",
        "\"\"\"Returns first valid path to the requested library.\"\"\"",
        "\"\"\"Returns first valid path to a file that matches the requested\n    version.\"\"\"",
        "\"\"\"Returns first valid path to a header that matches the requested\n    version.\"\"\"",
        "\"\"\"Returns comma-separated list from environment variable.\"\"\"",
        "\"\"\"Returns a path specified by a legacy environment variable.\n\n    CUDNN_INSTALL_PATH, NCCL_INSTALL_PATH, TENSORRT_INSTALL_PATH set to\n    '/usr/lib/x86_64-linux-gnu' would previously find both library and\n    header paths. Detect those and return '/usr', otherwise forward to\n    _list_from_env().\n    \"\"\"",
        "\"\"\"Returns normalized path, with forward slashes on Windows.\"\"\"",
        "\"\"\"Returns a dictionary of CUDA library and header file paths.\"\"\""
    ],
    "functions": [
        "_is_linux",
        "_is_windows",
        "_is_macos",
        "_matches_version",
        "_at_least_version",
        "_get_header_version",
        "_cartesian_product",
        "_get_ld_config_paths",
        "_get_default_cuda_paths",
        "_header_paths",
        "_library_paths",
        "_not_found_error",
        "_find_file",
        "_find_library",
        "_find_versioned_file",
        "_find_header",
        "_find_cuda_config",
        "get_header_version",
        "get_nvcc_version",
        "_find_cublas_config",
        "get_header_version",
        "_find_cusolver_config",
        "get_header_version",
        "_find_curand_config",
        "get_header_version",
        "_find_cufft_config",
        "get_header_version",
        "_find_cudnn_config",
        "get_header_version",
        "_find_nccl_config",
        "get_header_version",
        "_find_tensorrt_config",
        "get_header_version",
        "_list_from_env",
        "_get_legacy_path",
        "_normalize_path",
        "find_cuda_config",
        "main"
    ],
    "classes": [
        "ConfigError"
    ]
}