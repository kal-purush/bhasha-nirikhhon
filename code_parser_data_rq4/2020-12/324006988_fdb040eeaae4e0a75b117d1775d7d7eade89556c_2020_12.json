{
    "identifiers": [
        "copy",
        "time",
        "random",
        "move",
        "move",
        "move",
        "move",
        "move",
        "move",
        "move",
        "move",
        "move",
        "ret",
        "perm",
        "perm",
        "perm",
        "perm",
        "perm",
        "permF",
        "permD",
        "permD",
        "permD",
        "permF",
        "permF",
        "permR",
        "permR",
        "permR",
        "permF",
        "permF",
        "permF",
        "copy",
        "deepcopy",
        "permL",
        "permR",
        "permR",
        "permR",
        "permD",
        "permD",
        "permD",
        "join",
        "F",
        "join",
        "R",
        "join",
        "L",
        "join",
        "D",
        "perm",
        "perm",
        "perm",
        "perm",
        "perm",
        "permF",
        "permR",
        "permR",
        "permR",
        "permF",
        "permF",
        "permR",
        "permR",
        "permR",
        "permD",
        "permD",
        "permD",
        "copy",
        "deepcopy",
        "permL",
        "permF",
        "permF",
        "permF",
        "permD",
        "permD",
        "permD",
        "join",
        "F",
        "join",
        "R",
        "join",
        "L",
        "join",
        "D",
        "perm",
        "perm",
        "perm",
        "perm",
        "perm",
        "permF",
        "permF",
        "permF",
        "permL",
        "permL",
        "permL",
        "permL",
        "permD",
        "permD",
        "permD",
        "permL",
        "permL",
        "permF",
        "permD",
        "permD",
        "permD",
        "permF",
        "permF",
        "copy",
        "deepcopy",
        "permR",
        "join",
        "F",
        "join",
        "R",
        "join",
        "L",
        "join",
        "D",
        "perm",
        "perm",
        "perm",
        "perm",
        "perm",
        "permF",
        "permF",
        "permF",
        "permD",
        "permD",
        "permD",
        "permL",
        "permF",
        "permF",
        "permF",
        "permL",
        "permL",
        "permL",
        "permD",
        "permD",
        "permD",
        "permL",
        "permL",
        "copy",
        "deepcopy",
        "permR",
        "join",
        "F",
        "join",
        "R",
        "join",
        "L",
        "join",
        "D",
        "perm",
        "perm",
        "perm",
        "perm",
        "perm",
        "permR",
        "permD",
        "permD",
        "permD",
        "permR",
        "permR",
        "permL",
        "permL",
        "permL",
        "permR",
        "permR",
        "permR",
        "permD",
        "permD",
        "permL",
        "permL",
        "permL",
        "permD",
        "copy",
        "deepcopy",
        "permF",
        "join",
        "F",
        "join",
        "R",
        "join",
        "L",
        "join",
        "D",
        "perm",
        "perm",
        "perm",
        "perm",
        "perm",
        "permR",
        "permL",
        "permL",
        "permL",
        "permR",
        "permR",
        "permL",
        "permL",
        "permL",
        "permD",
        "permD",
        "permD",
        "permD",
        "permD",
        "permR",
        "permR",
        "permR",
        "permD",
        "copy",
        "deepcopy",
        "permF",
        "join",
        "F",
        "join",
        "R",
        "join",
        "L",
        "join",
        "D",
        "perm",
        "perm",
        "perm",
        "perm",
        "perm",
        "permR",
        "permR",
        "permF",
        "permF",
        "permF",
        "permR",
        "permL",
        "permL",
        "permR",
        "permR",
        "permR",
        "permL",
        "permF",
        "permF",
        "permL",
        "permL",
        "permL",
        "permF",
        "permD",
        "permD",
        "permD",
        "permD",
        "permD",
        "permD",
        "join",
        "F",
        "join",
        "R",
        "join",
        "L",
        "join",
        "D",
        "perm",
        "perm",
        "perm",
        "perm",
        "perm",
        "permR",
        "permR",
        "permL",
        "permL",
        "permL",
        "permR",
        "permL",
        "permL",
        "permF",
        "permF",
        "permF",
        "permL",
        "permF",
        "permF",
        "permR",
        "permR",
        "permR",
        "permF",
        "permD",
        "permD",
        "permD",
        "permD",
        "permD",
        "permD",
        "join",
        "F",
        "join",
        "R",
        "join",
        "L",
        "join",
        "D",
        "move_R",
        "move_Rp",
        "move_L",
        "move_Lp",
        "move_D",
        "move_Dp",
        "move_B",
        "move_Bp",
        "start",
        "time",
        "time",
        "open",
        "opened",
        "current",
        "opened",
        "count",
        "opened",
        "current",
        "opened",
        "current",
        "opened",
        "pop",
        "current",
        "fout",
        "write",
        "current",
        "closed",
        "current",
        "closed",
        "current",
        "count",
        "time",
        "time",
        "stamp",
        "move",
        "MOVE_LIST",
        "MOVE_LIST",
        "move",
        "current",
        "neighbour",
        "closed",
        "neighbour",
        "opened",
        "cost",
        "opened",
        "neighbour",
        "opened",
        "neighbour",
        "cost",
        "opened",
        "neighbour",
        "inverse",
        "move",
        "path",
        "neighbour",
        "opened",
        "cost",
        "inverse",
        "move",
        "path",
        "opened",
        "neighbour",
        "cost",
        "fout",
        "close",
        "solve"
    ],
    "literals": [
        "\"R\"",
        "\"Rp\"",
        "\"Rp\"",
        "\"R\"",
        "\"L\"",
        "\"Lp\"",
        "\"Lp\"",
        "\"L\"",
        "\"D\"",
        "\"Dp\"",
        "\"Dp\"",
        "\"D\"",
        "\"B\"",
        "\"Bp\"",
        "\"Bp\"",
        "\"B\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"R\"",
        "\"Rp\"",
        "\"L\"",
        "\"Lp\"",
        "\"D\"",
        "\"Dp\"",
        "\"B\"",
        "\"Bp\"",
        "\"YYYYYYBBBBBBGGGGGGRRRRRR\"",
        "\"\"",
        "'../data/permutations.txt'",
        "'w'",
        "f'{current}: {closed[current][0]} {closed[current][1]}\\n'",
        "\" \"",
        "\"Done\""
    ],
    "variables": [
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "ret",
        "permF",
        "permR",
        "permL",
        "permD",
        "F",
        "R",
        "L",
        "D",
        "F",
        "F",
        "F",
        "F",
        "F",
        "F",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "L",
        "D",
        "D",
        "D",
        "D",
        "D",
        "D",
        "permF",
        "permR",
        "permL",
        "permD",
        "F",
        "R",
        "L",
        "D",
        "F",
        "F",
        "F",
        "F",
        "F",
        "F",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "L",
        "D",
        "D",
        "D",
        "D",
        "D",
        "D",
        "permF",
        "permR",
        "permL",
        "permD",
        "F",
        "R",
        "L",
        "D",
        "F",
        "F",
        "F",
        "F",
        "F",
        "F",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "D",
        "D",
        "D",
        "D",
        "D",
        "D",
        "R",
        "permF",
        "permR",
        "permL",
        "permD",
        "F",
        "R",
        "L",
        "D",
        "F",
        "F",
        "F",
        "F",
        "F",
        "F",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "D",
        "D",
        "D",
        "D",
        "D",
        "D",
        "R",
        "permF",
        "permR",
        "permL",
        "permD",
        "F",
        "R",
        "L",
        "D",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "D",
        "D",
        "D",
        "D",
        "D",
        "D",
        "F",
        "permF",
        "permR",
        "permL",
        "permD",
        "F",
        "R",
        "L",
        "D",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "D",
        "D",
        "D",
        "D",
        "D",
        "D",
        "F",
        "permF",
        "permR",
        "permL",
        "permD",
        "F",
        "R",
        "L",
        "D",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "F",
        "F",
        "F",
        "F",
        "F",
        "F",
        "D",
        "D",
        "D",
        "D",
        "D",
        "D",
        "permF",
        "permR",
        "permL",
        "permD",
        "F",
        "R",
        "L",
        "D",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "F",
        "F",
        "F",
        "F",
        "F",
        "F",
        "D",
        "D",
        "D",
        "D",
        "D",
        "D",
        "MOVE_LIST",
        "start",
        "opened",
        "closed",
        "count",
        "stamp",
        "fout",
        "cost",
        "path",
        "closed",
        "current",
        "neighbour",
        "opened",
        "neighbour"
    ],
    "comments": [
        "Objectives",
        "Takes a Permute object as an input and produces the permute object after applying R move on it",
        "store length of the path and the path as a string of moves that solves the given permutation",
        "",
        "if current == target:",
        "break"
    ],
    "docstrings": [],
    "functions": [
        "inverse",
        "move_R",
        "move_Rp",
        "move_L",
        "move_Lp",
        "move_B",
        "move_Bp",
        "move_D",
        "move_Dp",
        "solve"
    ],
    "classes": []
}