{
    "identifiers": [
        "Microsoft",
        "AspNetCore",
        "SignalR",
        "Client",
        "QuorumDB",
        "Models",
        "Collections",
        "Generic",
        "Linq",
        "Threading",
        "Tasks",
        "Quorum",
        "Data",
        "Hubs",
        "IAsyncDisposable",
        "username",
        "siteUrl",
        "IsNullOrWhiteSpace",
        "siteUrl",
        "ArgumentNullException",
        "nameof",
        "siteUrl",
        "_hubUrl",
        "siteUrl",
        "TrimEnd",
        "ChatHub",
        "HubUrl",
        "_username",
        "username",
        "_started",
        "_hubConnection",
        "HubConnectionBuilder",
        "WithUrl",
        "_hubUrl",
        "Build",
        "WriteLine",
        "_hubConnection",
        "On",
        "Message",
        "MessageFunctions",
        "RECEIVE",
        "message",
        "HandleReceiveMessage",
        "message",
        "_hubConnection",
        "On",
        "MessageFunctions",
        "USEREVENT",
        "UserEvent",
        "Invoke",
        "EventArgs",
        "Empty",
        "_hubConnection",
        "StartAsync",
        "WriteLine",
        "_started",
        "_hubConnection",
        "SendAsync",
        "MessageFunctions",
        "REGISTER",
        "_username",
        "Message",
        "message",
        "MessageReceived",
        "Invoke",
        "MessageReceivedEventArgs",
        "message",
        "Message",
        "message",
        "_started",
        "InvalidOperationException",
        "_hubConnection",
        "SendAsync",
        "MessageFunctions",
        "SEND",
        "message",
        "WriteLine",
        "StopAsync",
        "_started",
        "_hubConnection",
        "StopAsync",
        "_hubConnection",
        "DisposeAsync",
        "_hubConnection",
        "_started",
        "MessageReceivedEventHandler",
        "sender",
        "MessageReceivedEventArgs",
        "e",
        "EventArgs",
        "Message",
        "message",
        "Message",
        "message"
    ],
    "literals": [
        "\"ChatClient: calling Start()\"",
        "\"ChatClient: Start returned\"",
        "\"Client not started\"",
        "\"ChatClient: Disposing\""
    ],
    "variables": [
        "_hubUrl",
        "HubConnection",
        "_hubConnection",
        "_username",
        "_started",
        "MessageReceivedEventHandler",
        "MessageReceived",
        "EventHandler",
        "UserEvent",
        "Message",
        "Message"
    ],
    "comments": [
        "set the hub URL",
        "create the connection using the .NET SignalR client",
        "add handler for receiving messages",
        "start the connection",
        "register user on hub to let other clients know they've joined",
        "Handle an inbound message from a hub",
        "</summary>",
        "<param name=\"method\">event name</param>",
        "<param name=\"message\">message content</param>",
        "raise an event to subscribers",
        "Event raised when this client receives a message",
        "</summary>",
        "<remarks>",
        "Instance classes should subscribe to this event",
        "</remarks>",
        "Send a message to the hub",
        "</summary>",
        "check we are connected",
        "send the message",
        "disconnect the client",
        "await _hubConnection.SendAsync(MessageFunctions.DISCONNECT);",
        "Delegate for the message handler",
        "</summary>",
        "<param name=\"sender\">the SignalRclient instance</param>",
        "<param name=\"e\">Event args</param>",
        "Message received argument class",
        "</summary>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "ChatClient",
        "StartAsync",
        "HandleReceiveMessage",
        "SendAsync",
        "ValueTask",
        "DisposeAsync",
        "StopAsync",
        "MessageReceivedEventArgs"
    ],
    "classes": [
        "ChatClient",
        "MessageReceivedEventArgs"
    ]
}