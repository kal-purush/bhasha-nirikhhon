{
    "identifiers": [
        "IInputs",
        "IOutputs",
        "React",
        "ReactDOM",
        "Chatbot",
        "IPCFChatbotProps",
        "ComponentFramework",
        "context",
        "ComponentFramework",
        "notifyOutputChanged",
        "state",
        "ComponentFramework",
        "container",
        "container",
        "context",
        "ComponentFramework",
        "context",
        "ReactDOM",
        "React",
        "Chatbot",
        "ReactDOM"
    ],
    "literals": [
        "\"./generated/ManifestTypes\"",
        "'react'",
        "'react-dom'",
        "'./Chatbot'",
        "\"\""
    ],
    "variables": [],
    "comments": [
        "Add control initialization code",
        "Add code to update control view",
        "Add code to update control view",
        "Add code to cleanup control if necessary"
    ],
    "docstrings": [
        "* Empty constructor.",
        "* Used to initialize the control instance. Controls can kick off remote server calls and other initialization actions here.\n\t * Data-set values are not initialized here, use updateView.\n\t * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to property names defined in the manifest, as well as utility functions.\n\t * @param notifyOutputChanged A callback method to alert the framework that the control has new outputs ready to be retrieved asynchronously.\n\t * @param state A piece of data that persists in one session for a single user. Can be set at any point in a controls life cycle by calling 'setControlState' in the Mode interface.\n\t * @param container If a control is marked control-type='standard', it will receive an empty div element within which it can render its content.",
        "* Called when any value in the property bag has changed. This includes field values, data-sets, global values such as container height and width, offline status, control metadata values such as label, visible, etc.\n\t * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to names defined in the manifest, as well as utility functions",
        "* It is called by the framework prior to a control receiving new data. \n\t * @returns an object based on nomenclature defined in manifest, expecting object[s] for property marked as “bound” or “output”",
        "* Called when the control is to be removed from the DOM tree. Controls should use this call for cleanup.\n\t * i.e. cancelling any pending remote calls, removing listeners, etc."
    ],
    "functions": [
        "init",
        "updateView",
        "getOutputs",
        "destroy"
    ],
    "classes": [
        "PCFChatbot"
    ]
}