{
    "identifiers": [
        "org",
        "ensembl",
        "healthcheck",
        "testcase",
        "generic",
        "org",
        "ensembl",
        "healthcheck",
        "util",
        "CollectionUtils",
        "createArrayList",
        "java",
        "sql",
        "Connection",
        "java",
        "sql",
        "ResultSet",
        "java",
        "sql",
        "SQLException",
        "java",
        "util",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "LinkedHashMap",
        "java",
        "util",
        "LinkedHashSet",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "logging",
        "Logger",
        "java",
        "util",
        "regex",
        "Matcher",
        "java",
        "util",
        "regex",
        "Pattern",
        "org",
        "apache",
        "commons",
        "lang",
        "StringUtils",
        "org",
        "ensembl",
        "healthcheck",
        "DatabaseRegistryEntry",
        "org",
        "ensembl",
        "healthcheck",
        "ReportManager",
        "org",
        "ensembl",
        "healthcheck",
        "testcase",
        "EnsTestCase",
        "org",
        "ensembl",
        "healthcheck",
        "util",
        "ConnectionBasedSqlTemplateImpl",
        "org",
        "ensembl",
        "healthcheck",
        "util",
        "DBUtils",
        "org",
        "ensembl",
        "healthcheck",
        "util",
        "DefaultObjectRowMapper",
        "org",
        "ensembl",
        "healthcheck",
        "util",
        "PoorLruMap",
        "org",
        "ensembl",
        "healthcheck",
        "util",
        "RowMapper",
        "logger",
        "Logger",
        "getLogger",
        "getClass",
        "getSimpleName",
        "MAX_CACHE_SIZE",
        "COMPARE_LEFT",
        "COMPARE_RIGHT",
        "COMPARE_BOTH",
        "TestTypes",
        "IGNORE_AUTOINCREMENT_OPTION",
        "AVG_ROW_LENGTH",
        "MAX_ROWS",
        "CHARSET",
        "ENGINE",
        "CHECK_UNEQUAL",
        "IGNORE_BACKUP",
        "testTypes",
        "testTypes",
        "types",
        "types",
        "testTypes",
        "add",
        "views",
        "MAX_CACHE_SIZE",
        "columns",
        "MAX_CACHE_SIZE",
        "createTables",
        "MAX_CACHE_SIZE",
        "tables",
        "MAX_CACHE_SIZE",
        "testcase",
        "master",
        "dbre",
        "result",
        "masterCon",
        "master",
        "getConnection",
        "checkCon",
        "dbre",
        "getConnection",
        "logger",
        "info",
        "master",
        "getName",
        "dbre",
        "getName",
        "compareTableEquality",
        "testcase",
        "master",
        "dbre",
        "COMPARE_BOTH",
        "result",
        "getTestTypes",
        "contains",
        "TestTypes",
        "CHECK_UNEQUAL",
        "msg",
        "searchForTemporaryTables",
        "checkCon",
        "msg",
        "format",
        "dbre",
        "getName",
        "msg",
        "ReportManager",
        "problem",
        "testcase",
        "checkCon",
        "msg",
        "ReportManager",
        "problem",
        "testcase",
        "checkCon",
        "table",
        "DBUtils",
        "getTableNames",
        "masterCon",
        "result",
        "compareTable",
        "testcase",
        "master",
        "dbre",
        "table",
        "e",
        "logger",
        "severe",
        "e",
        "getMessage",
        "result",
        "testcase",
        "master",
        "target",
        "directionFlag",
        "compareTablesInSchema",
        "testcase",
        "target",
        "master",
        "directionFlag",
        "testcase",
        "schema1",
        "schema2",
        "directionFlag",
        "result",
        "directionFlag",
        "COMPARE_RIGHT",
        "directionFlag",
        "COMPARE_BOTH",
        "result",
        "compareTablesInSchema",
        "testcase",
        "schema2",
        "schema1",
        "COMPARE_LEFT",
        "directionFlag",
        "COMPARE_LEFT",
        "directionFlag",
        "COMPARE_BOTH",
        "reportConnection",
        "directionFlag",
        "COMPARE_LEFT",
        "schema2",
        "getConnection",
        "schema1",
        "getConnection",
        "tables",
        "DBUtils",
        "getTableNames",
        "schema1",
        "getConnection",
        "i",
        "i",
        "tables",
        "length",
        "i",
        "table",
        "tables",
        "i",
        "DBUtils",
        "checkTableExists",
        "schema2",
        "getConnection",
        "table",
        "ReportManager",
        "problem",
        "testcase",
        "reportConnection",
        "table",
        "schema1",
        "getName",
        "schema2",
        "getName",
        "result",
        "result",
        "test",
        "master",
        "targetDbre",
        "table",
        "masterName",
        "master",
        "getName",
        "targetName",
        "targetDbre",
        "getName",
        "logger",
        "info",
        "table",
        "masterName",
        "targetName",
        "target",
        "targetDbre",
        "getConnection",
        "masterCon",
        "master",
        "getConnection",
        "getTables",
        "masterCon",
        "contains",
        "table",
        "ReportManager",
        "problem",
        "test",
        "target",
        "table",
        "masterName",
        "getTables",
        "target",
        "contains",
        "table",
        "ReportManager",
        "problem",
        "test",
        "target",
        "table",
        "targetName",
        "getCreateTable",
        "masterCon",
        "table",
        "equals",
        "getCreateTable",
        "target",
        "table",
        "logger",
        "info",
        "table",
        "okay",
        "masterMinusTargetColumns",
        "getColumns",
        "masterCon",
        "table",
        "masterMinusTargetColumns",
        "removeAll",
        "getColumns",
        "target",
        "table",
        "columnIssuesCalled",
        "masterMinusTargetColumns",
        "isEmpty",
        "col",
        "masterMinusTargetColumns",
        "message",
        "format",
        "targetName",
        "table",
        "masterName",
        "col",
        "ReportManager",
        "problem",
        "test",
        "target",
        "message",
        "columnIssuesCalled",
        "add",
        "col",
        "okay",
        "targetMinusMasterColumns",
        "getColumns",
        "target",
        "table",
        "localMaster",
        "getColumns",
        "masterCon",
        "table",
        "localMaster",
        "removeAll",
        "columnIssuesCalled",
        "targetMinusMasterColumns",
        "removeAll",
        "localMaster",
        "targetMinusMasterColumns",
        "isEmpty",
        "col",
        "targetMinusMasterColumns",
        "columnIssuesCalled",
        "contains",
        "col",
        "message",
        "format",
        "masterCon",
        "table",
        "targetName",
        "col",
        "ReportManager",
        "problem",
        "test",
        "targetDbre",
        "getConnection",
        "message",
        "okay",
        "masterView",
        "getViews",
        "masterCon",
        "contains",
        "table",
        "targetView",
        "getViews",
        "target",
        "contains",
        "table",
        "masterView",
        "targetView",
        "masterType",
        "masterView",
        "targetType",
        "targetView",
        "msg",
        "format",
        "table",
        "masterType",
        "masterName",
        "targetType",
        "targetName",
        "ReportManager",
        "problem",
        "test",
        "target",
        "msg",
        "okay",
        "getViews",
        "target",
        "contains",
        "table",
        "masterIndexes",
        "getIndexes",
        "masterCon",
        "table",
        "targetIndexes",
        "getIndexes",
        "target",
        "table",
        "masterMinusTargetIndexes",
        "masterIndexes",
        "masterMinusTargetIndexes",
        "removeAll",
        "targetIndexes",
        "masterMinusTargetIndexes",
        "isEmpty",
        "index",
        "masterMinusTargetIndexes",
        "message",
        "format",
        "targetName",
        "table",
        "index",
        "masterName",
        "ReportManager",
        "problem",
        "test",
        "target",
        "message",
        "okay",
        "targetMinusMasterIndexes",
        "targetIndexes",
        "targetMinusMasterIndexes",
        "removeAll",
        "masterIndexes",
        "targetMinusMasterIndexes",
        "isEmpty",
        "index",
        "targetMinusMasterIndexes",
        "message",
        "format",
        "targetDbre",
        "getName",
        "table",
        "index",
        "targetName",
        "ReportManager",
        "problem",
        "test",
        "targetDbre",
        "getConnection",
        "message",
        "okay",
        "applyTest",
        "TestTypes",
        "AVG_ROW_LENGTH",
        "result",
        "regexCreateTable",
        "test",
        "master",
        "targetDbre",
        "table",
        "TestTypes",
        "AVG_ROW_LENGTH",
        "result",
        "okay",
        "applyTest",
        "TestTypes",
        "MAX_ROWS",
        "result",
        "regexCreateTable",
        "test",
        "master",
        "targetDbre",
        "table",
        "TestTypes",
        "MAX_ROWS",
        "result",
        "okay",
        "applyTest",
        "TestTypes",
        "CHARSET",
        "result",
        "regexCreateTable",
        "test",
        "master",
        "targetDbre",
        "table",
        "TestTypes",
        "CHARSET",
        "result",
        "okay",
        "applyTest",
        "TestTypes",
        "ENGINE",
        "result",
        "regexCreateTable",
        "test",
        "master",
        "targetDbre",
        "table",
        "TestTypes",
        "ENGINE",
        "result",
        "okay",
        "okay",
        "testType",
        "getTestTypes",
        "contains",
        "testType",
        "test",
        "master",
        "target",
        "table",
        "regex",
        "testing",
        "p",
        "Pattern",
        "compile",
        "regex",
        "masterValue",
        "regex",
        "p",
        "getCreateTable",
        "master",
        "getConnection",
        "table",
        "targetValue",
        "regex",
        "p",
        "getCreateTable",
        "target",
        "getConnection",
        "table",
        "masterValue",
        "equals",
        "targetValue",
        "message",
        "format",
        "testing",
        "toString",
        "table",
        "master",
        "getName",
        "masterValue",
        "target",
        "getName",
        "targetValue",
        "ReportManager",
        "problem",
        "test",
        "target",
        "getConnection",
        "message",
        "p",
        "target",
        "o",
        "matcher",
        "p",
        "matcher",
        "target",
        "matcher",
        "find",
        "equals",
        "o",
        "valueOf",
        "matcher",
        "group",
        "o",
        "matcher",
        "group",
        "o",
        "StringUtils",
        "EMPTY",
        "o",
        "conn",
        "table",
        "key",
        "conn",
        "getMetaData",
        "getURL",
        "table",
        "createTables",
        "containsKey",
        "key",
        "createTables",
        "get",
        "key",
        "sql",
        "table",
        "mapper",
        "createTable",
        "conn",
        "queryForObject",
        "sql",
        "mapper",
        "applyTest",
        "TestTypes",
        "IGNORE_AUTOINCREMENT_OPTION",
        "createTable",
        "createTable",
        "replaceFirst",
        "createTables",
        "put",
        "key",
        "createTable",
        "createTable",
        "conn",
        "dbmsUrl",
        "conn",
        "getMetaData",
        "getURL",
        "views",
        "containsKey",
        "dbmsUrl",
        "dbViews",
        "DBUtils",
        "getViews",
        "conn",
        "views",
        "put",
        "dbmsUrl",
        "dbViews",
        "views",
        "get",
        "dbmsUrl",
        "conn",
        "table",
        "getColumns",
        "conn",
        "get",
        "table",
        "conn",
        "dbmsUrl",
        "conn",
        "getMetaData",
        "getURL",
        "columns",
        "containsKey",
        "dbmsUrl",
        "dbColumns",
        "rs",
        "conn",
        "getMetaData",
        "getColumns",
        "DBUtils",
        "getShortDatabaseName",
        "conn",
        "processAutoIncrement",
        "DBUtils",
        "resultSetContainsColumn",
        "rs",
        "rs",
        "next",
        "table",
        "rs",
        "getString",
        "tableColumns",
        "dbColumns",
        "get",
        "table",
        "tableColumns",
        "tableColumns",
        "dbColumns",
        "put",
        "table",
        "tableColumns",
        "autoIncrement",
        "processAutoIncrement",
        "rs",
        "getBoolean",
        "columnInstance",
        "rs",
        "getString",
        "rs",
        "getInt",
        "rs",
        "getInt",
        "rs",
        "getInt",
        "rs",
        "getBoolean",
        "rs",
        "getString",
        "rs",
        "getInt",
        "autoIncrement",
        "tableColumns",
        "add",
        "columnInstance",
        "DBUtils",
        "closeQuietly",
        "rs",
        "columns",
        "put",
        "dbmsUrl",
        "dbColumns",
        "columns",
        "get",
        "dbmsUrl",
        "conn",
        "table",
        "indexes",
        "rs",
        "conn",
        "getMetaData",
        "getIndexInfo",
        "DBUtils",
        "getShortDatabaseName",
        "conn",
        "table",
        "rs",
        "next",
        "indexName",
        "rs",
        "getString",
        "index",
        "indexes",
        "get",
        "indexName",
        "index",
        "index",
        "indexName",
        "rs",
        "getBoolean",
        "rs",
        "getInt",
        "indexes",
        "put",
        "indexName",
        "index",
        "index",
        "addColumn",
        "rs",
        "getString",
        "DBUtils",
        "closeQuietly",
        "rs",
        "indexes",
        "values",
        "conn",
        "url",
        "conn",
        "getMetaData",
        "getURL",
        "tables",
        "containsKey",
        "url",
        "array",
        "DBUtils",
        "getTableNames",
        "conn",
        "tables",
        "put",
        "url",
        "Arrays",
        "asList",
        "array",
        "tables",
        "get",
        "url",
        "conn",
        "temporaryTables",
        "tables",
        "getTables",
        "conn",
        "searchValues",
        "createArrayList",
        "table",
        "tables",
        "search",
        "searchValues",
        "table",
        "contains",
        "search",
        "temporaryTables",
        "temporaryTables",
        "name",
        "dataType",
        "columnSize",
        "decimalDigits",
        "nullable",
        "columnDefault",
        "charOctetLength",
        "autoIncrement",
        "name",
        "dataType",
        "columnSize",
        "decimalDigits",
        "nullable",
        "columnDefault",
        "charOctetLength",
        "autoIncrement",
        "name",
        "name",
        "dataType",
        "dataType",
        "columnSize",
        "columnSize",
        "decimalDigits",
        "decimalDigits",
        "nullable",
        "nullable",
        "columnDefault",
        "columnDefault",
        "charOctetLength",
        "charOctetLength",
        "autoIncrement",
        "autoIncrement",
        "name",
        "Override",
        "prime",
        "result",
        "result",
        "prime",
        "result",
        "autoIncrement",
        "result",
        "prime",
        "result",
        "charOctetLength",
        "result",
        "prime",
        "result",
        "columnDefault",
        "columnDefault",
        "hashCode",
        "result",
        "prime",
        "result",
        "columnSize",
        "result",
        "prime",
        "result",
        "dataType",
        "result",
        "prime",
        "result",
        "decimalDigits",
        "result",
        "prime",
        "result",
        "name",
        "name",
        "hashCode",
        "result",
        "prime",
        "result",
        "nullable",
        "result",
        "Override",
        "obj",
        "obj",
        "obj",
        "getClass",
        "obj",
        "getClass",
        "other",
        "obj",
        "autoIncrement",
        "other",
        "autoIncrement",
        "charOctetLength",
        "other",
        "charOctetLength",
        "columnDefault",
        "other",
        "columnDefault",
        "columnDefault",
        "equals",
        "other",
        "columnDefault",
        "columnSize",
        "other",
        "columnSize",
        "dataType",
        "other",
        "dataType",
        "decimalDigits",
        "other",
        "decimalDigits",
        "name",
        "other",
        "name",
        "name",
        "equals",
        "other",
        "name",
        "nullable",
        "other",
        "nullable",
        "Override",
        "getName",
        "name",
        "columns",
        "nonUnique",
        "name",
        "nonUnique",
        "name",
        "name",
        "nonUnique",
        "nonUnique",
        "col",
        "columns",
        "add",
        "col",
        "Override",
        "prime",
        "result",
        "result",
        "prime",
        "result",
        "columns",
        "columns",
        "hashCode",
        "result",
        "prime",
        "result",
        "nonUnique",
        "result",
        "prime",
        "result",
        "result",
        "Override",
        "obj",
        "obj",
        "obj",
        "getClass",
        "obj",
        "getClass",
        "other",
        "obj",
        "columns",
        "other",
        "columns",
        "columns",
        "equals",
        "other",
        "columns",
        "nonUnique",
        "other",
        "nonUnique",
        "other",
        "Override",
        "name",
        "StringUtils",
        "join",
        "columns"
    ],
    "literals": [
        "\"Comparing \"",
        "\" with \"",
        "\"Table name discrepancy detected but temporary tables \"",
        "\"were found in the schema '%s'. Try running \"",
        "\"ensembl/misc-scripts/db/cleanup_tmp_tables.pl\"",
        "\"Table name discrepancy detected, skipping rest of checks\"",
        "\"Table name discrepancy detected but continuing with table checks\"",
        "\"Table \"",
        "\" exists in \"",
        "\" but not in \"",
        "\"Comparing \"",
        "\" between \"",
        "\" and \"",
        "\"Table \"",
        "\" not found in \"",
        "\"Table \"",
        "\" not found in \"",
        "\"Table \"",
        "\" identical between schemata\"",
        "\"`%s` `%s` does not have the same definition as `%s`. Column `%s` was different. Check table structures\"",
        "\"`%s` `%s` does not have the same definition as `%s`. Column `%s` was different. Check table structures\"",
        "\"VIEW\"",
        "\"TABLE\"",
        "\"VIEW\"",
        "\"TABLE\"",
        "\"`%s` is a %s in `%s` but a %s in `%s`\"",
        "\"`%s` `%s` does not have the index `%s` which is present in `%s`. Check table structures\"",
        "\"`%s` `%s` does not have the index `%s` which is present in `%s`. Check table structures\"",
        "\"AVG_ROW_LENGTH=(\\\\d+)\"",
        "\"MAX_ROWS=(\\\\d+)\"",
        "\"DEFAULT CHARSET=([a-zA-Z0-9]+)\"",
        "\"ENGINE=([a-zA-Z0-9]+)\"",
        "\"%s in `%s` had different values. `%s` contained '%s'. `%s` contained '%s'\"",
        "\":\"",
        "\"SHOW CREATE TABLE \"",
        "\"AUTO_INCREMENT=\\\\d+\\\\s*\"",
        "\"\"",
        "\"%\"",
        "\"%\"",
        "\"IS_AUTOINCREMENT\"",
        "\"TABLE_NAME\"",
        "\"IS_AUTOINCREMENT\"",
        "\"COLUMN_NAME\"",
        "\"DATA_TYPE\"",
        "\"COLUMN_SIZE\"",
        "\"DECIMAL_DIGITS\"",
        "\"NULLABLE\"",
        "\"COLUMN_DEF\"",
        "\"CHAR_OCTET_LENGTH\"",
        "\"INDEX_NAME\"",
        "\"NON_UNIQUE\"",
        "\"TYPE\"",
        "\"COLUMN_NAME\"",
        "\"MTMP_\"",
        "\"tmp\"",
        "\"temp\"",
        "\"bak\"",
        "\"backup\"",
        "\"=[\"",
        "\"]\""
    ],
    "variables": [
        "types",
        "msg",
        "o",
        "name",
        "dataType",
        "columnSize",
        "decimalDigits",
        "nullable",
        "columnDefault",
        "charOctetLength",
        "autoIncrement",
        "name",
        "nonUnique",
        "type"
    ],
    "comments": [
        "check that both schemas have the same tables",
        "method will generate a report",
        "perform right compare if required",
        "",
        "check each table in turn",
        "If either schema did not contain this table then just return early",
        "because we will have warned about it earlier on. This could only happen",
        "if the skipCheckingIfTablesAreUnequal() method was returning false",
        "- test show create table as it's the fastest ... apparently",
        "Compare table structure",
        "report that the target is missing columns deinfod in the master",
        "report that a target table columns which the master lacks",
        "Compare index structure if it wasn't a view",
        "report that target is missing indexes deinfod in master",
        "report that target has indexes not deinfod in master",
        "Compare avg_row_length",
        "Compare max rows",
        "Compare charset",
        "Compare engine",
        "Get columns list"
    ],
    "docstrings": [
        "* Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute\n * Copyright [2016-2018] EMBL-European Bioinformatics Institute\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* A re-implementation of the {@link CompareSchema} health-check code but the\n * intention is to allow for post modifications in the various extension classes\n * to support all types of schema comparisons.\n * \n * It has several ways of deciding which schema to use as the \"master\" to\n * compare all the others against:\n * <p>\n * <ol>\n * <li>If the property getDefinitionFileKey() in database.properties exists, the\n * table.sql file it points to</li>\n * <li>If this is not present, the schema named by the property\n * {@link #getMasterSchemaKey()} is used</li>\n * <li>If neither of the above properties are present, an arbitrary first schema\n * is used as the master</li>\n * </ol>\n * \n * @author ayates",
        "comparison flags",
        "* An enum to contain the types of tests we allow a compare schema to perform.\n\t * All should be self-explanatory.\n\t *",
        "* Compare each database with the master.\n\t * \n\t * @param dbr\n\t *            The database registry containing all the specified databases.\n\t * @return true if the test passed.",
        "* Currently delegates onto\n\t * {@link #compareTablesInSchema(Connection, Connection, boolean, int)} but can\n\t * be over-ridden if required.",
        "* Compare two schemas to see if they have the same tables. The comparison can\n\t * be done in in one direction or both directions.\n\t * \n\t * @param schema1\n\t *            The first schema to compare.\n\t * @param schema2\n\t *            The second schema to compare.\n\t * @param ignoreBackupTables\n\t *            Should backup tables be excluded form this check?\n\t * @param directionFlag\n\t *            The direction to perform comparison in, either\n\t *            EnsTestCase.COMPARE_RIGHT, EnsTestCase.COMPARE_LEFT or\n\t *            EnsTestCase.COMPARE_BOTH,\n\t * @return for left comparison: all tables in schema1 exist in schema2 for right\n\t *         comparison: all tables in schema1 exist in schema2 for both: if all\n\t *         tables in schema1 exist in schema2, and vice-versa",
        "* Performs tests on the equivalent sets of columns in the given table, the\n\t * indexes on the given table, the type of the table (view or not) as well as\n\t * other creation parameters e.g. <em>AVG_ROW_LENGTH</em>. Many of these are\n\t * controlled by the {@link TestTypes} enum.\n\t * \n\t * To help with speed we first compare a <em>SHOW CREATE TABLE</em> with some\n\t * post modification.",
        "* Used to cache the current known set of views for each distinct JDBC URL\n\t * retrieved from {@link Connection#getMetaData()}.\n\t * \n\t * @param conn\n\t *            Connection to query with\n\t * @return {@link Set} of all views known of in the given connection\n\t * @throws SQLException\n\t *             Thrown if there is an issue with MetaData retrieval",
        "* Returns a copy of the columns we currently hold for this table",
        "* Used to cache the columns from a single schema.\n\t * \n\t * @param conn\n\t *            Connection to query with\n\t * @return {@link Set} of all columns in a given connection keyed by the table\n\t *         name\n\t * @throws SQLException\n\t *             Thrown if there is an issue with MetaData retrieval",
        "* Used to return all known indexed columns for a database\n\t * \n\t * @param conn\n\t *            Connection to query\n\t * @param table\n\t *            Table to query\n\t * @return {@link Set} of index objects ordered by their discovery\n\t * @throws SQLException\n\t *             Thrown if there is a problem with MetaData",
        "* Returns a locally cached Set of table names in the given schema",
        "* Internal class used to represent a column",
        "* Represents an Index with an equality and hashcode method which does not take\n\t * into account name which is why a List would not suffice"
    ],
    "functions": [
        "getTestTypes",
        "addTestTypes",
        "compare",
        "compareTableEquality",
        "compareTablesInSchema",
        "compareTable",
        "applyTest",
        "regexCreateTable",
        "regex",
        "getCreateTable",
        "getViews",
        "getColumns",
        "getColumns",
        "getIndexes",
        "getTables",
        "searchForTemporaryTables",
        "Column",
        "getName",
        "hashCode",
        "equals",
        "toString",
        "Index",
        "addColumn",
        "hashCode",
        "equals",
        "toString"
    ],
    "classes": [
        "SchemaComparer",
        "Column",
        "Index"
    ]
}