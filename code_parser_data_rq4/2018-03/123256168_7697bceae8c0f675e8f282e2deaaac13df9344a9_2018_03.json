{
    "identifiers": [
        "com",
        "kgisl",
        "Eventhandler",
        "Eventhandler",
        "aspect",
        "java",
        "util",
        "Arrays",
        "org",
        "aopalliance",
        "aop",
        "Advice",
        "org",
        "aspectj",
        "lang",
        "JoinPoint",
        "org",
        "aspectj",
        "lang",
        "annotation",
        "AfterReturning",
        "org",
        "aspectj",
        "lang",
        "annotation",
        "AfterThrowing",
        "org",
        "aspectj",
        "lang",
        "annotation",
        "Around",
        "org",
        "aspectj",
        "lang",
        "annotation",
        "Aspect",
        "org",
        "aspectj",
        "lang",
        "annotation",
        "Before",
        "org",
        "aspectj",
        "lang",
        "annotation",
        "Pointcut",
        "org",
        "aspectj",
        "lang",
        "ProceedingJoinPoint",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "org",
        "springframework",
        "aop",
        "ThrowsAdvice",
        "org",
        "springframework",
        "stereotype",
        "Component",
        "Aspect",
        "Component",
        "LOGGER",
        "LoggerFactory",
        "getLogger",
        "getClass",
        "Pointcut",
        "Pointcut",
        "Before",
        "point",
        "LOGGER",
        "info",
        "LOGGER",
        "debug",
        "point",
        "getSignature",
        "getDeclaringTypeName",
        "LOGGER",
        "info",
        "point",
        "getSignature",
        "getName",
        "LOGGER",
        "warn",
        "Arrays",
        "toString",
        "point",
        "getArgs",
        "AfterReturning",
        "pointcut",
        "returning",
        "joinPoint",
        "result",
        "LOGGER",
        "info",
        "LOGGER",
        "info",
        "joinPoint",
        "getTarget",
        "getClass",
        "getName",
        "joinPoint",
        "getSignature",
        "getName",
        "result",
        "LOGGER",
        "info",
        "result",
        "toString",
        "LOGGER",
        "info",
        "AfterThrowing",
        "pointcut",
        "throwing",
        "joinPoint",
        "exception",
        "LOGGER",
        "info",
        "LOGGER",
        "error",
        "exception",
        "LOGGER",
        "error",
        "LOGGER",
        "error",
        "AfterThrowing",
        "pointcut",
        "throwing",
        "joinPoint",
        "excep",
        "LOGGER",
        "info",
        "LOGGER",
        "error",
        "excep",
        "excep"
    ],
    "literals": [
        "\"execution(* com.kgisl.Eventhandler.Eventhandler.service.*.*(..))\"",
        "\"execution(* com.kgisl.Eventhandler.Eventhandler.service.*.*(..))\"",
        "\"execution(* com.kgisl.Eventhandler.Eventhandler.service.*.*(..))\"",
        "\"-----------------------@Before advice called--------------------------------------\"",
        "\"Class Name :  \"",
        "\"Entering in Method :  \"",
        "\"Argumentsttt :  \"",
        "\"within(@org.springframework.stereotype.Service *)\"",
        "\"result\"",
        "\"------------------- @AfterReturning advice called ---------------------------------\"",
        "\" >Returning for class : {} ; Method : {} \"",
        "\"> with value : {}\"",
        "\">with null as return value.\"",
        "\"within(@org.springframework.stereotype.Service *||@org.springframework.stereotype.Controller.divideByZero * )\"",
        "\"exception\"",
        "\"++++++++++++please enter into throwing+++++++++++++\"",
        "\"-------------------@AfterThrowing advice called -----------------------------------\"",
        "\">>Exception Thrown: \"",
        "\">>Inside CatchThrowException.afterThrowing() method...\"",
        "\">>Running after throwing exception...\"",
        "\"execution(* com.kgisl.Eventhandler.Eventhandler.Controller.*.*(..))\"",
        "\"excep\"",
        "\"------------------ @AFter Throwing advice called ----------------------------------------\"",
        "\">>Exception Illegal Arithmetic Exception argument:: \"",
        "\"Inside CatchThrowException.afterThrowing() method...\"",
        "\"Running after throwing exception...\"",
        "\"Exception : \""
    ],
    "variables": [],
    "comments": [
        "private static final Logger LOGGER = LoggerFactory.getLogger(TodoAspect.class);",
        "@Around(\"execution(* com.kgisl.Eventhandler.Eventhandler.service.*.*(..))\")",
        "public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable{",
        "LOGGER.info(\"------------------ @Around advice called ----------------------------------------\");",
        "LOGGER.info(\"The method \"+joinPoint.getSignature().getName()+\"() begins with \"",
        "+Arrays.toString(joinPoint.getArgs()));",
        "try{",
        "Object result = joinPoint.proceed();",
        "LOGGER.info(\"The method \"+joinPoint.getSignature().getName()",
        "+\"() ends with \"+result);",
        "return result;",
        "}catch(IllegalArgumentException e){",
        "// LOGGER.error(\"Illegal argument \"+Arrays.toString(joinPoint.getArgs())",
        "//         +\" in \"+joinPoint.getSignature().getName()+\"()\");",
        "// throw e;",
        "LOGGER.error(\">>Illegal argument:\");",
        "LOGGER.error(\">>Exception Illegal argument:: \" + e);",
        "throw e;",
        "}",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "controller",
        "allMethod",
        "beforelog",
        "logAfterReturning",
        "logAfterThrowing",
        "afterThrowing"
    ],
    "classes": [
        "AspectLog"
    ]
}