{
    "identifiers": [
        "InjectionToken",
        "LOCALE_ID",
        "Observable",
        "Subject",
        "InjectionToken",
        "MAT_DATE_LOCALE",
        "LOCALE_ID",
        "Subject",
        "date",
        "date",
        "date",
        "date",
        "style",
        "style",
        "date",
        "date",
        "date",
        "year",
        "month",
        "date",
        "value",
        "parseFormat",
        "date",
        "displayFormat",
        "date",
        "years",
        "date",
        "months",
        "date",
        "days",
        "date",
        "obj",
        "date",
        "value",
        "value",
        "value",
        "value",
        "value",
        "locale",
        "locale",
        "first",
        "second",
        "first",
        "second",
        "first",
        "second",
        "first",
        "second",
        "first",
        "second",
        "first",
        "second",
        "first",
        "second",
        "firstValid",
        "secondValid",
        "first",
        "second",
        "firstValid",
        "secondValid",
        "first",
        "second",
        "date",
        "min",
        "max",
        "min",
        "date",
        "min",
        "min",
        "max",
        "date",
        "max",
        "max",
        "date"
    ],
    "literals": [
        "'@angular/core'",
        "'rxjs/Observable'",
        "'rxjs/Subject'",
        "string",
        "'MAT_DATE_LOCALE'",
        "'long'",
        "'short'",
        "'narrow'",
        "string",
        "string",
        "'long'",
        "'short'",
        "'narrow'",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "MAT_DATE_LOCALE",
        "MAT_DATE_LOCALE_PROVIDER",
        "firstValid",
        "secondValid"
    ],
    "comments": [
        "InjectionToken for datepicker that can be used to override default locale code.",
        "Provider for MAT_DATE_LOCALE injection token.",
        "Adapts type `D` to be usable as a date by cdk-based components that work with dates.",
        "The locale to use for all dates.",
        "A stream that emits when the locale changes."
    ],
    "docstrings": [
        "* @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license",
        "* Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.",
        "* Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).",
        "* Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).",
        "* Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).",
        "* Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.",
        "* Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.",
        "* Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.",
        "* Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').",
        "* Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).",
        "* Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.",
        "* Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.",
        "* Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.",
        "* Gets today's date.\n   * @returns Today's date.",
        "* Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.",
        "* Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.",
        "* Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.",
        "* Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.",
        "* Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.",
        "* Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.",
        "* Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.",
        "* Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.",
        "* Gets date instance that is not valid.\n   * @returns An invalid date.",
        "* Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.",
        "* Sets the locale used for all dates.\n   * @param locale The new locale.",
        "* Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.",
        "* Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.",
        "* Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`."
    ],
    "functions": [
        "localeChanges",
        "deserialize",
        "setLocale",
        "compareDate",
        "sameDate",
        "clampDate"
    ],
    "classes": []
}