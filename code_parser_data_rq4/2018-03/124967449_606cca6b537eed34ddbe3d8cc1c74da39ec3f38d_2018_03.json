{
    "identifiers": [
        "mergeObjects",
        "mergeArrays",
        "extractFields",
        "getPessoaCallback",
        "getPessoaPromisse",
        "test",
        "expect",
        "mergeObjects",
        "contact",
        "address",
        "contact",
        "address",
        "test",
        "expect",
        "mergeArrays",
        "contact",
        "address",
        "contact",
        "address",
        "test",
        "expect",
        "numeroExpected",
        "test",
        "expect",
        "extractFields",
        "pessoa",
        "resultExpected",
        "test",
        "functionSuccess",
        "pessoa",
        "pessoa",
        "functionError",
        "error",
        "error",
        "getPessoaCallback",
        "functionSuccess",
        "functionError",
        "test",
        "functionSuccess",
        "pessoa",
        "pessoa",
        "getPessoaCallback",
        "s",
        "s",
        "e",
        "e",
        "functionError",
        "error",
        "error",
        "getPessoaCallback",
        "functionSuccess",
        "functionError",
        "test",
        "resolve",
        "pessoa",
        "pessoa",
        "reject",
        "error",
        "error",
        "getPessoaPromisse",
        "v",
        "resolve",
        "v",
        "done",
        "result",
        "result",
        "done",
        "test",
        "getPessoaPromisse",
        "result",
        "result",
        "result",
        "result",
        "result",
        "getPessoaPromisse",
        "done",
        "result",
        "result",
        "done"
    ],
    "literals": [
        "'../0-exercicios/exercicios'",
        "'Merge Objects'",
        "'Joaldo'",
        "'joaldo@hotmail.com'",
        "'Java'",
        "'Merge Arrays'",
        "'Joaldo'",
        "'joaldo@hotmail.com'",
        "'Dunha'",
        "'dunha@hotmail.com'",
        "'Java'",
        "'Destructuring'",
        "'Joaldo'",
        "'joaldo@hotmail.com'",
        "'Java'",
        "'Extract fields then object'",
        "'Joaldo'",
        "'000-000-000'",
        "'Rua Java'",
        "'Joaldo'",
        "'000-000-000'",
        "'nome'",
        "'telefone'",
        "'http mock with callbacks'",
        "O ${pessoa.nome} conseguiu fazer uma função que recebee callbacks!",
        "'/api/pessoa'",
        "'http mock with callbacks chaining'",
        "O ${pessoa.nome} conseguiu fazer uma função que recebee callbacks!",
        "'/teste'",
        "'/api/pessoa'",
        "'refactoring callback exercise'",
        "O ${pessoa.nome} conseguiu fazer uma função que recebee callbacks!",
        "'/api/pessoa'",
        "'refactoring callback chaining promises'",
        "'/api/pessoa'",
        "'api/erro'"
    ],
    "variables": [
        "contact",
        "address",
        "contact",
        "address",
        "pessoa",
        "numeroExpected",
        "pessoa",
        "pessoa",
        "resultExpected",
        "functionSuccess",
        "functionError",
        "functionSuccess",
        "functionError",
        "resolve",
        "reject"
    ],
    "comments": [
        "Exercício 1.\n * Criar uma função que receba como argumento dois objetos e retorne um terceiro objeto\n * Que contenha todas as chaves e os valores dos dois",
        "Exercício 2.\n* Criar uma função que receba 2 arrays como argumento e retorne \n* Um terceiro com os elementos dos dois arrays (sem utilizar o concat e spread)",
        "Exercício 3.\n *  Destructuring de um objeto de domínio da aplicação que trabalha, extraindo propriedades de dois níveis",
        "Exercício 4.\n *  Criar uma função que recebe um objeto complexo e um array de campos que serão extraídos"
    ],
    "docstrings": [
        "**********************************\n * \n * EXERCÍCIOS DO 1º DIA\n * \n **************************************",
        "**********************************\n * \n * EXERCÍCIOS DO 2º DIA\n * \n **************************************\n * Exercício 1.\n * \n * Criar uma função que simule uma requisição http para uma API REST (seja criativo).\n * Essa função deverá receber outras duas como argumento: uma função em caso de sucesso e outra em caso de falha.\n * De de acordo com o comportamento da sua api a função de sucesso ou falha deverá ser invocada.\n * \n * Caso o requisição seja feita no /jstraining/api/#onomedasuaapi então deve retornar um json com o resultado que você quiser; Caso contrário um erro deverá ser retornado.\n * \n * Obs\n *  - Não precisa colocar a asserção dos testes, apenas simular o comportamento de uma requisição normal.\n *  - Você deve chamar a sua função dentro do bloco de testes abaixo 'http mock with callbacks'",
        "* Exercício 2.\n * \n * Chamar a função que foi criada duas vezes, garantindo a sua ordem de execução.\n *",
        "* Exercício 3\n * \n * Refatorar o exercício dos callbacks (#2) para utilizar Promises conforme exemplo mostrado anteriormente",
        "* Exercício 4\n * \n * Refatorar o exercício do encadeamento dos callbacks para utilizar o encadeamento das promises."
    ],
    "functions": [],
    "classes": []
}