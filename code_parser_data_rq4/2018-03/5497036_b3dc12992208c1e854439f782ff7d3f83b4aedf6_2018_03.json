{
    "identifiers": [
        "keyring",
        "os",
        "json",
        "warnings",
        "keyring",
        "errors",
        "PasswordDeleteError",
        "keyring",
        "backends",
        "fail",
        "Keyring",
        "FailKeyring",
        "os",
        "path",
        "expanduser",
        "isinstance",
        "keyring",
        "get_keyring",
        "FailKeyring",
        "username",
        "_keyring_is_available",
        "username",
        "keyring",
        "get_password",
        "SYNAPSE_CACHED_SESSION_APLICATION_NAME",
        "username",
        "username",
        "_keyring_is_available",
        "keyring",
        "delete_password",
        "SYNAPSE_CACHED_SESSION_APLICATION_NAME",
        "username",
        "PasswordDeleteError",
        "username",
        "api_key",
        "_keyring_is_available",
        "keyring",
        "set_password",
        "SYNAPSE_CACHED_SESSION_APLICATION_NAME",
        "username",
        "api_key",
        "warnings",
        "warn",
        "_read_session_cache",
        "session_cache",
        "get",
        "username",
        "username",
        "_write_session_cache",
        "cachedSessions",
        "open",
        "SESSION_CAHCE_FILEPATH",
        "json",
        "load",
        "file",
        "isinstance",
        "result",
        "result",
        "data",
        "open",
        "SESSION_CAHCE_FILEPATH",
        "file",
        "json",
        "dump",
        "data",
        "file",
        "file",
        "write"
    ],
    "literals": [
        "\"SYNAPSE.ORG_CLIENT\"",
        "\"~/.synapseSession\"",
        "'\\nUnable to save user credentials as you do not have a keyring available. '",
        "'Please refer to login() documentation (http://docs.synapse.org/python/Client.html#synapseclient.Synapse.login) for setting up credential storage a Linux machine\\n'",
        "'If you are on a headless Linux session (e.g. connecting via SSH), please run the following commands before running your Python session:'",
        "'\\tdbus-run-session -- bash #(replace \"bash\" with \"sh\" if bash is unavailable)'",
        "'\\techo -n \"REPLACE_WITH_YOUR_KEYRING_PASSWORD\"|gnome-keyring-daemon --unlock'",
        "\"<mostRecent>\"",
        "\"<mostRecent>\"",
        "'r'",
        "'w'",
        "'\\n'"
    ],
    "variables": [
        "SYNAPSE_CACHED_SESSION_APLICATION_NAME",
        "SESSION_CAHCE_FILEPATH",
        "_keyring_is_available",
        "session_cache",
        "cachedSessions",
        "file",
        "result"
    ],
    "comments": [
        "In the case where no key store backend is available (most likely in Linux), a fail.Keyring is returned which will throw errors when any of its functions are called",
        "However, the errors thrown are of the generic type RuntimeError (not a subclass of RuntimeError).",
        "It didn't feel safe to try/except and ignore RuntimeError since there are very many other RuntimeErrors that could occur.",
        "Instead, we use this boolean to keep track of whether we should call the keyring methods",
        "The API key does not exist, but that is fine",
        "For compatibility with R's JSON parser"
    ],
    "docstrings": [
        "\"\"\"\n    Retrieves the user's API key\n    :param str username:\n    :return: API key for the specified username\n    :rtype: str\n    \"\"\"",
        "\"\"\"Returns the JSON contents of CACHE_DIR/SESSION_FILENAME.\"\"\"",
        "\"\"\"Dumps the JSON data into CACHE_DIR/SESSION_FILENAME.\"\"\""
    ],
    "functions": [
        "get_api_key",
        "remove_api_key",
        "set_api_key",
        "get_most_recent_user",
        "set_most_recent_user",
        "_read_session_cache",
        "_write_session_cache"
    ],
    "classes": []
}