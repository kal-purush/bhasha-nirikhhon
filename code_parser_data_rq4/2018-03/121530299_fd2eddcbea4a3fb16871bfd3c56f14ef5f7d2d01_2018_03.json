{
    "identifiers": [
        "numpy",
        "np",
        "scipy",
        "signal",
        "n",
        "sizes",
        "n",
        "len",
        "sizes",
        "no_sizes",
        "no_sizes",
        "n",
        "i",
        "n",
        "no_sizes",
        "sizes",
        "append",
        "sizes",
        "size",
        "size",
        "size",
        "sizes",
        "np",
        "mgrid",
        "slices",
        "np",
        "ones",
        "XXX",
        "shape",
        "dtype",
        "np",
        "float64",
        "X",
        "size",
        "XXX",
        "sizes",
        "g",
        "np",
        "exp",
        "X",
        "size",
        "g",
        "g",
        "sum",
        "data",
        "n",
        "sizes",
        "gauss_kern_nd",
        "n",
        "sizes",
        "signal",
        "convolve",
        "data",
        "g",
        "mode"
    ],
    "literals": [
        "r\"\"\"Constructs a Gaussian kernel in any number of dimensions.\n    \n    Parameters\n    ----------\n    n : int\n        The number of dimensions. Must be 1 or above.\n    sizes : list\n        The sizes along the various dimensions, ie. in 3D this would be [size_x, size_y, size_x]. The length of\n        this list should be either 1 or n. If it only contains one element, eg. [size], it is assumed that\n        size_x = size_y = size_x = size.\n    \n    Returns\n    -------\n    g : ndarray\n        The kernel, with dimensions (in 3d) (2*size_x+1, 2*size_y+1, 2*size_z+1).\n    \"\"\"",
        "'at least 1d required'",
        "'either give one size or all of them'",
        "r\"\"\"Smoothens the input by performing a convolution with a Gaussian kernel.\n    \n    Parameters\n    ----------\n    data : ndarray\n        Input data, with ``n`` dimensions.\n    n : int\n        The number of dimensions. Must be 1 or above.\n    sizes : list\n        The sizes along the various dimensions, ie. in 3D this would be [size_x, size_y, size_x]. The length of\n        this list should be either 1 or n. If it only contains one element, eg. [size], it is assumed that\n        size_x = size_y = size_x = size.\n        \n    Returns\n    -------\n    out : ndarray\n        The smoothed input, of shape ```data.shape - 2 * sizes```.\n    \"\"\"",
        "'valid'"
    ],
    "variables": [
        "no_sizes",
        "slices",
        "XXX",
        "g",
        "g",
        "g"
    ],
    "comments": [
        "signal processing, needed for convolution"
    ],
    "docstrings": [
        "''' Module for Gaussian convolution. '''"
    ],
    "functions": [
        "gauss_kern_nd",
        "smooth"
    ],
    "classes": []
}