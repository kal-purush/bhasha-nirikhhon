{
    "identifiers": [
        "DecodeHintType",
        "OneDReader",
        "BarcodeFormat",
        "Code128Reader",
        "Result",
        "BitArray",
        "OneDReader",
        "hints",
        "hints",
        "hints",
        "DecodeHintType",
        "hints",
        "hints",
        "DecodeHintType",
        "possibleFormats",
        "possibleFormats",
        "BarcodeFormat",
        "Code128Reader",
        "Code128Reader",
        "rowNumber",
        "row",
        "hints",
        "i",
        "i",
        "i",
        "rowNumber",
        "row",
        "hints",
        "re",
        "reader",
        "reader"
    ],
    "literals": [
        "'./../DecodeHintType'",
        "'./OneDReader'",
        "'../BarcodeFormat'",
        "'./Code128Reader'",
        "'../Result'",
        "'./../common/BitArray'",
        "'../Exception'"
    ],
    "variables": [
        "possibleFormats",
        "useCode39CheckDigit",
        "i"
    ],
    "comments": [
        "namespace com.google.zxing.oned {",
        "if (possibleFormats.contains(BarcodeFormat.EAN_13) ||",
        "possibleFormats.contains(BarcodeFormat.UPC_A)  ||",
        "possibleFormats.contains(BarcodeFormat.EAN_8)  ||",
        "possibleFormats.contains(BarcodeFormat.UPC_E)) {",
        "readers.push(new MultiFormatUPCEANReader(hints));",
        "}",
        "if (possibleFormats.contains(BarcodeFormat.CODE_39)) {",
        "this.readers.push(new Code39Reader(useCode39CheckDigit));",
        "}",
        "if (possibleFormats.contains(BarcodeFormat.CODE_93)) {",
        "this.readers.push(new Code93Reader());",
        "}",
        "if (possibleFormats.contains(BarcodeFormat.ITF)) {",
        "this.readers.push(new ITFReader());",
        "}",
        "if (possibleFormats.contains(BarcodeFormat.CODABAR)) {",
        "this.readers.push(new CodaBarReader());",
        "}",
        "if (possibleFormats.contains(BarcodeFormat.RSS_14)) {",
        "this.readers.push(new RSS14Reader());",
        "}",
        "if (possibleFormats.contains(BarcodeFormat.RSS_EXPANDED)) {",
        "this.readers.push(new RSSExpandedReader());",
        "}",
        "this.readers.push(new MultiFormatUPCEANReader(hints));",
        "this.readers.push(new Code39Reader());",
        "this.readers.push(new CodaBarReader());",
        "this.readers.push(new Code93Reader());",
        "this.readers.push(new ITFReader());",
        "this.readers.push(new RSS14Reader());",
        "this.readers.push(new RSSExpandedReader());",
        "@Override",
        "continue",
        "@Override"
    ],
    "docstrings": [
        "* Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* @author dswitkin@google.com (Daniel Switkin)\n * @author Sean Owen"
    ],
    "functions": [
        "decodeRow",
        "reset"
    ],
    "classes": [
        "MultiFormatOneDReader"
    ]
}