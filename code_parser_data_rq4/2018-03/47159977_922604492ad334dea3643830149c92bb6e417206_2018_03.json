{
    "identifiers": [
        "os",
        "waflib",
        "Errors",
        "Utils",
        "waflib",
        "TaskGen",
        "taskgen_method",
        "before_method",
        "taskgen_method",
        "filename",
        "prefix",
        "hasattr",
        "meths",
        "meths",
        "append",
        "gdbus_lst",
        "append",
        "filename",
        "prefix",
        "before_method",
        "before_method",
        "path",
        "get_bld",
        "make_node",
        "get_name",
        "filename",
        "prefix",
        "getattr",
        "path",
        "find_resource",
        "filename",
        "node",
        "Errors",
        "WafError",
        "filename",
        "output_node",
        "find_or_declare",
        "node",
        "change_ext",
        "name",
        "output_node",
        "find_or_declare",
        "node",
        "change_ext",
        "name",
        "create_task",
        "node",
        "c_file",
        "h_file",
        "output_node",
        "abspath",
        "tsk",
        "env",
        "prefix",
        "tsk",
        "env",
        "tsk",
        "env",
        "node",
        "change_ext",
        "name",
        "sources",
        "append",
        "c_file",
        "sources",
        "output_node",
        "mkdir",
        "Utils",
        "to_list",
        "source",
        "sources",
        "output_node",
        "to_incnodes",
        "getattr",
        "output_node",
        "to_incnodes",
        "getattr",
        "conf",
        "conf",
        "find_program"
    ],
    "literals": [
        "'gdbus_lst'",
        "'process_gdbus'",
        "'process_gdbus'",
        "'apply_core'",
        "'process_source'",
        "'gdbus'",
        "'gdbus_lst'",
        "'file not found '",
        "'.c'",
        "'.h'",
        "'gdbus_binding_tool'",
        "''",
        "'includes'",
        "'export_includes'",
        "'BLUE'",
        "'.h'",
        "'.c'",
        "'${GDBUS_CODEGEN} --interface-prefix ${GDBUS_CODEGEN_INTERFACE_PREFIX} --generate-c-code ${GDBUS_CODEGEN_OUTPUT} --c-namespace ${GDBUS_CODEGEN_NAMESPACE} --c-generate-object-manager ${SRC[0].abspath()}'",
        "'gdbus-codegen'",
        "'GDBUS_CODEGEN'"
    ],
    "variables": [
        "gdbus_lst",
        "output_node",
        "sources",
        "node",
        "c_file",
        "h_file",
        "tsk",
        "tsk",
        "cwd",
        "GDBUS_CODEGEN_INTERFACE_PREFIX",
        "GDBUS_CODEGEN_NAMESPACE",
        "GDBUS_CODEGEN_OUTPUT",
        "source",
        "includes",
        "export_includes",
        "color",
        "ext_out",
        "run_str",
        "shell"
    ],
    "comments": [
        "!/usr/bin/env python",
        "encoding: utf-8",
        "Copyright Garmin International or its subsidiaries, 2018",
        "",
        "Heavily based on dbus.py"
    ],
    "docstrings": [
        "\"\"\"\nCompiles dbus files with **gdbus-codegen**\nTypical usage::\n    def options(opt):\n        opt.load('compiler_c gdbus')\n    def configure(conf):\n        conf.load('compiler_c gdbus')\n    def build(bld):\n        tg = bld.program(\n            includes = '.',\n            source = bld.path.ant_glob('*.c'),\n            target = 'gnome-hello')\n        tg.add_gdbus_file('test.xml', 'com.example.example.', 'Example')\n\"\"\"",
        "\"\"\"\n    Adds a dbus file to the list of dbus files to process. Store them in the attribute *dbus_lst*.\n    :param filename: xml file to compile\n    :type filename: string\n    :param prefix: interface prefix (--interface-prefix=prefix)\n    :type prefix: string\n    :param mode: C namespace (--c-namespace=namespace)\n    :type mode: string\n    :param export: Export Headers?\n    :type export: boolean\n    \"\"\"",
        "\"\"\"\n    Processes the dbus files stored in the attribute *gdbus_lst* to create :py:class:`gdbus_binding_tool` instances.\n    \"\"\"",
        "\"\"\"\n    Compiles a dbus file\n    \"\"\"",
        "\"\"\"\n    Detects the program gdbus-codegen and sets ``conf.env.GDBUS_CODEGEN``\n    \"\"\""
    ],
    "functions": [
        "add_gdbus_file",
        "process_gdbus",
        "configure"
    ],
    "classes": [
        "gdbus_binding_tool"
    ]
}