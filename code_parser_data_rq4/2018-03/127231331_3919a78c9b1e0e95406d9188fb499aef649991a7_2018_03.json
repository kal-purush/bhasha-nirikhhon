{
    "identifiers": [
        "s",
        "s",
        "s",
        "length",
        "s2",
        "addBoundaries",
        "s",
        "toCharArray",
        "p",
        "s2",
        "length",
        "c",
        "r",
        "m",
        "n",
        "i",
        "i",
        "s2",
        "length",
        "i",
        "i",
        "r",
        "p",
        "i",
        "m",
        "i",
        "n",
        "i",
        "i2",
        "c",
        "i",
        "p",
        "i2",
        "r",
        "i",
        "p",
        "i",
        "p",
        "i2",
        "m",
        "p",
        "i",
        "r",
        "i",
        "n",
        "r",
        "m",
        "i",
        "n",
        "m",
        "n",
        "s2",
        "length",
        "s2",
        "m",
        "s2",
        "n",
        "p",
        "i",
        "m",
        "n",
        "i",
        "p",
        "i",
        "r",
        "c",
        "i",
        "r",
        "i",
        "p",
        "i",
        "len",
        "c",
        "i",
        "i",
        "s2",
        "length",
        "i",
        "len",
        "p",
        "i",
        "len",
        "p",
        "i",
        "c",
        "i",
        "ss",
        "Arrays",
        "copyOfRange",
        "s2",
        "c",
        "len",
        "c",
        "len",
        "valueOf",
        "removeBoundaries",
        "ss",
        "cs",
        "cs",
        "cs",
        "length",
        "toCharArray",
        "cs2",
        "cs",
        "length",
        "i",
        "i",
        "cs2",
        "length",
        "i",
        "i",
        "cs2",
        "i",
        "cs2",
        "i",
        "cs",
        "i",
        "cs2",
        "cs2",
        "length",
        "cs2",
        "cs",
        "cs",
        "cs",
        "length",
        "toCharArray",
        "cs2",
        "cs",
        "length",
        "i",
        "i",
        "cs2",
        "length",
        "i",
        "cs2",
        "i",
        "cs",
        "i",
        "cs2"
    ],
    "literals": [
        "\"\"",
        "\"||\"",
        "\"\""
    ],
    "variables": [],
    "comments": [
        "Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.",
        "Here the first element in s2 has been processed.",
        "The walking indices to compare if two elements are the same",
        "This signals bypassing the while loop below."
    ],
    "docstrings": [],
    "functions": [
        "longestPalindrome",
        "addBoundaries",
        "removeBoundaries"
    ],
    "classes": [
        "Solution"
    ]
}