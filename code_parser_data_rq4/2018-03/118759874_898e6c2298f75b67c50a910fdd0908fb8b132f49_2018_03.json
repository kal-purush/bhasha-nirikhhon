{
    "identifiers": [
        "os",
        "pandas",
        "pd",
        "collections",
        "fnmatch",
        "glob",
        "os",
        "path",
        "op",
        "termcolor",
        "colored",
        "typing",
        "typing",
        "Union",
        "os",
        "getcwd",
        "op",
        "dirname",
        "op",
        "dirname",
        "code_path",
        "op",
        "dirname",
        "Analysis_path",
        "op",
        "join",
        "pathBase",
        "task",
        "date",
        "pathBase",
        "Analysis_path",
        "pd",
        "read_table",
        "op",
        "join",
        "pathBase",
        "dtype",
        "ld",
        "ld",
        "include",
        "task",
        "ld",
        "ld",
        "task",
        "task",
        "date",
        "ld",
        "ld",
        "date",
        "date",
        "ld",
        "id",
        "ld",
        "iloc",
        "k",
        "ld",
        "shape",
        "ld",
        "iloc",
        "k",
        "z",
        "ld",
        "iloc",
        "k",
        "subjlist",
        "append",
        "z",
        "subjlist",
        "colored",
        "subj",
        "pathBase",
        "Analysis_path",
        "subj",
        "isdigit",
        "subj",
        "subj",
        "isalpha",
        "pd",
        "read_table",
        "op",
        "join",
        "pathBase",
        "dtype",
        "ld",
        "ld",
        "name",
        "subj",
        "ld",
        "iloc",
        "subj_id",
        "subj",
        "pathBase",
        "Analysis_path",
        "pd",
        "read_table",
        "op",
        "join",
        "pathBase",
        "dtype",
        "ld",
        "ld",
        "id",
        "subj",
        "ld",
        "name",
        "subj",
        "ld",
        "iloc",
        "protocol",
        "subj",
        "block",
        "protocol",
        "pathBase",
        "Analysis_path",
        "pd",
        "read_table",
        "op",
        "join",
        "pathBase",
        "dtype",
        "ld",
        "ld",
        "id",
        "subj",
        "ld",
        "name",
        "subj",
        "protocol",
        "ld",
        "ld",
        "protocol",
        "protocol",
        "block",
        "ld",
        "ld",
        "block",
        "block",
        "ld",
        "iloc",
        "task",
        "subj",
        "pathBase",
        "Analysis_path",
        "pd",
        "read_table",
        "op",
        "join",
        "pathBase",
        "dtype",
        "ld",
        "ld",
        "id",
        "subj",
        "ld",
        "name",
        "subj",
        "ld",
        "iloc",
        "date",
        "subj",
        "pathBase",
        "Analysis_path",
        "pd",
        "read_table",
        "op",
        "join",
        "pathBase",
        "dtype",
        "ld",
        "ld",
        "id",
        "subj",
        "ld",
        "name",
        "subj",
        "ld",
        "iloc",
        "name",
        "subj",
        "task",
        "noise",
        "NoiseBase",
        "op",
        "join",
        "Raw_data_path",
        "pathBase",
        "Analysis_path",
        "pd",
        "read_table",
        "op",
        "join",
        "pathBase",
        "dtype",
        "subj",
        "isdigit",
        "ld",
        "loc",
        "ld",
        "subj",
        "subj",
        "ldsub",
        "iloc",
        "subj",
        "isalpha",
        "ld",
        "loc",
        "ld",
        "subj",
        "subj",
        "ldsub",
        "iloc",
        "task",
        "ldsub",
        "ld",
        "task",
        "task",
        "ldsub",
        "iloc",
        "ldsub",
        "iloc",
        "noise",
        "glob",
        "glob",
        "op",
        "join",
        "NoiseBase",
        "subj_id",
        "subj_name",
        "protocol",
        "date",
        "noise",
        "subj_name",
        "protocol",
        "date",
        "subj_id",
        "filename",
        "subj",
        "state",
        "task",
        "protocol",
        "pathBase",
        "Analysis_path",
        "pd",
        "read_table",
        "op",
        "join",
        "pathBase",
        "dtype",
        "ld",
        "ld",
        "id",
        "subj",
        "ld",
        "name",
        "subj",
        "state",
        "ld",
        "ld",
        "state",
        "state",
        "ld",
        "state",
        "state",
        "ld",
        "state",
        "state",
        "task",
        "ld",
        "ld",
        "task",
        "task",
        "protocol",
        "ld",
        "ld",
        "protocol",
        "protocol",
        "k",
        "ld",
        "shape",
        "ld",
        "iloc",
        "k",
        "ld",
        "iloc",
        "k",
        "collections",
        "OrderedDict",
        "sorted",
        "blockstate",
        "items",
        "odblockstate",
        "state",
        "pathBase",
        "Analysis_path",
        "pd",
        "read_table",
        "op",
        "join",
        "pathBase",
        "dtype",
        "ld",
        "ld",
        "state",
        "state",
        "ld",
        "state",
        "state",
        "ld",
        "state",
        "state",
        "ld",
        "state",
        "state",
        "ld",
        "state",
        "state",
        "ld",
        "include",
        "ld",
        "shape",
        "subject",
        "chan_type",
        "data",
        "pd",
        "read_csv",
        "header",
        "dtype",
        "master",
        "master",
        "id",
        "subject",
        "reset_index",
        "drop",
        "sub_data",
        "get_value",
        "chan_type",
        "channel",
        "ValueError",
        "channel",
        "split",
        "data",
        "ch",
        "chans",
        "fnmatch",
        "data",
        "ch_names",
        "ch",
        "data_ch",
        "ValueError",
        "len",
        "data_ch",
        "warnings",
        "warn",
        "format",
        "data_ch",
        "data_chans",
        "append",
        "data_ch",
        "len",
        "data_chans",
        "data_chans",
        "data_chans",
        "warnings",
        "warn",
        "format",
        "chans",
        "len",
        "chans",
        "chans",
        "chans"
    ],
    "literals": [
        "'Raw data'",
        "'MEG'",
        "'meta'",
        "'listdata.tsv'",
        "'1'",
        "'No subjects found for this task ...'",
        "'green'",
        "'MEG'",
        "'meta'",
        "'listdata.tsv'",
        "'id'",
        "'MEG'",
        "'meta'",
        "'listdata.tsv'",
        "'protocol'",
        "'MEG'",
        "'meta'",
        "'listdata.tsv'",
        "'task'",
        "'MEG'",
        "'meta'",
        "'listdata.tsv'",
        "'date'",
        "'MEG'",
        "'meta'",
        "'listdata.tsv'",
        "'name'",
        "'MEG_noise'",
        "'MEG'",
        "'meta'",
        "'listdata.tsv'",
        "'id'",
        "'name'",
        "'name'",
        "'id'",
        "'protocol'",
        "'date'",
        "'_'",
        "'_'",
        "'.misc'",
        "'lyon_Noise_*'",
        "'_'",
        "'_'",
        "'_'",
        "'MEG'",
        "'meta'",
        "'listdata.tsv'",
        "'1'",
        "'2'",
        "'block'",
        "'state'",
        "'MEG'",
        "'meta'",
        "'listdata.tsv'",
        "'1'",
        "'2'",
        "'_postFA'",
        "'_postOM'",
        "'1'",
        "\"'ecg_chan', 'eogH_chan', 'eogV_chan', 'respi_chan', 'egg_chans', 'emgTrap_chan'\"",
        "'../meta/MEG_ANALYSIS_MASTERFILE.csv'",
        "'id'",
        "'Channel name not found for this type. Please edit masterfile.'",
        "'|'",
        "'*'",
        "'*'",
        "\"Channel not found in data.\"",
        "\"More than one channel found. Check that the masterfile is sufficiently accurate (e.g. 'EEG062' rather than '62').\\nUsing channel {}.\"",
        "\"No input dataset. Using channel(s) {} as defined in masterfile.\""
    ],
    "variables": [
        "code_path",
        "Analysis_path",
        "pathBase",
        "Raw_data_path",
        "ld",
        "ld",
        "ld",
        "ld",
        "ld",
        "subjlist",
        "z",
        "ld",
        "ld",
        "subj_id",
        "ld",
        "ld",
        "protocol",
        "ld",
        "ld",
        "ld",
        "ld",
        "task",
        "ld",
        "ld",
        "date",
        "ld",
        "ld",
        "name",
        "ld",
        "ldsub",
        "subj_id",
        "subj_name",
        "ldsub",
        "subj_name",
        "subj_id",
        "ldsub",
        "protocol",
        "date",
        "filename",
        "filename",
        "ld",
        "ld",
        "ld",
        "ld",
        "ld",
        "blockstate",
        "blockstate",
        "odblockstate",
        "ld",
        "ld",
        "master",
        "sub_data",
        "channel",
        "chans",
        "data_chans",
        "data_ch",
        "data_chans",
        "chans"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "==============================================================================",
        "SUBJECT INFOS USING CSV FILE",
        "==============================================================================",
        "PATH BASES",
        "==============================================================================",
        "pathBase = '/dycog/meditation/ERC'",
        "Analysis_path = op.join(pathBase, 'Analyses')",
        "code_path = op.join(Analysis_path, 'MEG', 'code')",
        "==============================================================================",
        "GET SUBJECT LIST",
        "==============================================================================",
        "==============================================================================",
        "GET SUBJECT ID",
        "==============================================================================",
        "==============================================================================",
        "GET SUBJECT PROTOCOL",
        "==============================================================================",
        "==============================================================================",
        "GET SUBJECT TASK",
        "==============================================================================",
        "==============================================================================",
        "GET SUBJECT DATE",
        "==============================================================================",
        "==============================================================================",
        "GET SUBJECT'S NAME",
        "==============================================================================",
        "==============================================================================",
        "GET RAW DATA PATH",
        "==============================================================================",
        "==============================================================================",
        "GET AN ORDERED DICT OF A SUBJECT'S BLOCKS AND CORRESPONDING STATES",
        "==============================================================================",
        "==============================================================================",
        "COUNT THE NUMBER OF SUBJ BLOCKS FOR A GIVEN STATE",
        "==============================================================================",
        "==============================================================================",
        "%% 26/02/2018",
        "GET CHANNEL NAME",
        "=============================================================================",
        "def get_chan_name(subject: typing.Text, chan_type :\"'ecg_chan', 'eogH_chan', 'eogV_chan', 'respi_chan', 'egg_chans', 'emgTrap_chan'\", data=None) -> Union[typing.Text, List[typing.Text]]:",
        "============================================================================="
    ],
    "docstrings": [
        "\"\"\"\n    Returns the name of the channel (or a list of channels) of the indicated type in the input dataset, as specified in ../meta/MEG_ANALYSIS_MASTERFILE.csv.\n    INPUT\n        data: MNE data where to find the channel.\n        chan_type: Type of the channel to get the name of.\n    \"\"\""
    ],
    "functions": [
        "get_subjlist",
        "get_id",
        "get_protocol",
        "get_task",
        "get_date",
        "get_name",
        "get_rawpath",
        "get_blocks",
        "state_count",
        "get_chan_name"
    ],
    "classes": []
}