{
    "identifiers": [
        "argparse",
        "numpy",
        "np",
        "cv2",
        "filename",
        "save_debug_images",
        "np",
        "array",
        "dtype",
        "np",
        "array",
        "dtype",
        "cv2",
        "imread",
        "filename",
        "frame",
        "filename",
        "frame",
        "copy",
        "cv2",
        "inRange",
        "frame",
        "gray_lower",
        "gray_upper",
        "cv2",
        "GaussianBlur",
        "whitish",
        "cv2",
        "bitwise_not",
        "whitish",
        "cv2",
        "Canny",
        "opposite",
        "cv2",
        "findContours",
        "canny",
        "copy",
        "cv2",
        "RETR_EXTERNAL",
        "cv2",
        "CHAIN_APPROX_SIMPLE",
        "index",
        "contour",
        "contours",
        "cv2",
        "arcLength",
        "contour",
        "cv2",
        "approxPolyDP",
        "contour",
        "perimeter",
        "len",
        "approx",
        "cv2",
        "arcLength",
        "contour",
        "perimeter",
        "bug_count",
        "save_debug_images",
        "np",
        "int32",
        "cv2",
        "boxPoints",
        "cv2",
        "minAreaRect",
        "contour",
        "cv2",
        "drawContours",
        "frame_boxes",
        "rect",
        "save_debug_images",
        "cv2",
        "imwrite",
        "frame",
        "cv2",
        "imwrite",
        "whitish",
        "cv2",
        "imwrite",
        "opposite",
        "cv2",
        "imwrite",
        "canny",
        "cv2",
        "imwrite",
        "frame_boxes",
        "bug_count",
        "argparse",
        "ArgumentParser",
        "ap",
        "add_argument",
        "required",
        "help",
        "ap",
        "add_argument",
        "action",
        "help",
        "ap",
        "parse_args",
        "detect",
        "args",
        "image",
        "args",
        "debug_images",
        "num_bugs",
        "main"
    ],
    "literals": [
        "'uint8'",
        "'uint8'",
        "f\"Couldn't load {filename}!\"",
        "f'debug/original.png'",
        "f'debug/whitish.png'",
        "f'debug/opposite.png'",
        "f'debug/canny.png'",
        "f'debug/boxes.png'",
        "'-i'",
        "'--image'",
        "'Path to image'",
        "'-d'",
        "'--debug-images'",
        "'store_true'",
        "'If True, debug images will be saved to debug/'",
        "f'Detected {num_bugs} bugs.'",
        "'__main__'"
    ],
    "variables": [
        "gray_lower",
        "gray_upper",
        "frame",
        "frame_boxes",
        "whitish",
        "whitish",
        "opposite",
        "canny",
        "_",
        "contours",
        "_",
        "bug_count",
        "perimeter",
        "approx",
        "perimeter",
        "rect",
        "ap",
        "args",
        "num_bugs"
    ],
    "comments": [
        "Upper and lower rgb space for selecting background",
        "Don't be fooled by the name. Started gray, ended up everything but",
        "Again, don't be fooled by the variable name.",
        "Not whitish as much as it selected out the background",
        "Now flip the background to be white, subject dark",
        "Begin edge detection",
        "Find the contours",
        "Count what we think are EABs by the number of corners",
        "Optional stuff for showing what was counted as EAB"
    ],
    "docstrings": [
        "\"\"\"Detects Emerald Ash Borers from a given image.\n\nCan be run standalone, or imported into another script. To run as a script,\n\n    python iotrees/detect.py --image examples/EAB-on-purple-trap.jpg\n\nOtherwise, import into a script with\n\n    from iotrees.detect import detect\n\n\"\"\""
    ],
    "functions": [
        "detect",
        "main"
    ],
    "classes": []
}