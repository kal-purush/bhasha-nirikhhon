{
    "identifiers": [
        "numpy",
        "np",
        "pandas",
        "pd",
        "sklearn",
        "naive_bayes",
        "GaussianNB",
        "sklearn",
        "preprocessing",
        "cross_validation",
        "neighbors",
        "svm",
        "matplotlib",
        "pyplot",
        "plt",
        "gdal",
        "rasterio",
        "plt",
        "style",
        "use",
        "pd",
        "read_csv",
        "pd",
        "DataFrame",
        "pd",
        "DataFrame",
        "pd",
        "DataFrame",
        "pd",
        "DataFrame",
        "pd",
        "DataFrame",
        "i",
        "HAsites",
        "np",
        "array",
        "hcrf_master",
        "i",
        "format",
        "i",
        "hcrf_HA",
        "ii",
        "LAsites",
        "np",
        "array",
        "hcrf_master",
        "ii",
        "format",
        "ii",
        "hcrf_LA",
        "iii",
        "CIsites",
        "np",
        "array",
        "hcrf_master",
        "iii",
        "format",
        "iii",
        "hcrf_CI",
        "iv",
        "CCsites",
        "np",
        "array",
        "hcrf_master",
        "iv",
        "format",
        "iv",
        "hcrf_CC",
        "v",
        "WATsites",
        "np",
        "array",
        "hcrf_master",
        "v",
        "format",
        "v",
        "hcrf_WAT",
        "pd",
        "DataFrame",
        "np",
        "array",
        "HA_hcrf",
        "iloc",
        "np",
        "array",
        "HA_hcrf",
        "iloc",
        "np",
        "array",
        "HA_hcrf",
        "iloc",
        "np",
        "array",
        "HA_hcrf",
        "iloc",
        "pd",
        "DataFrame",
        "np",
        "array",
        "LA_hcrf",
        "iloc",
        "np",
        "array",
        "LA_hcrf",
        "iloc",
        "np",
        "array",
        "LA_hcrf",
        "iloc",
        "np",
        "array",
        "LA_hcrf",
        "iloc",
        "pd",
        "DataFrame",
        "np",
        "array",
        "CI_hcrf",
        "iloc",
        "np",
        "array",
        "CI_hcrf",
        "iloc",
        "np",
        "array",
        "CI_hcrf",
        "iloc",
        "np",
        "array",
        "CI_hcrf",
        "iloc",
        "pd",
        "DataFrame",
        "np",
        "array",
        "CC_hcrf",
        "iloc",
        "np",
        "array",
        "CC_hcrf",
        "iloc",
        "np",
        "array",
        "CC_hcrf",
        "iloc",
        "np",
        "array",
        "CC_hcrf",
        "iloc",
        "pd",
        "DataFrame",
        "np",
        "array",
        "WAT_hcrf",
        "iloc",
        "np",
        "array",
        "WAT_hcrf",
        "iloc",
        "np",
        "array",
        "WAT_hcrf",
        "iloc",
        "np",
        "array",
        "WAT_hcrf",
        "iloc",
        "pd",
        "DataFrame",
        "np",
        "array",
        "np",
        "array",
        "np",
        "array",
        "np",
        "array",
        "X",
        "append",
        "Y",
        "ignore_index",
        "X",
        "append",
        "Z",
        "ignore_index",
        "X",
        "append",
        "P",
        "ignore_index",
        "X",
        "append",
        "Q",
        "ignore_index",
        "X",
        "append",
        "Zero",
        "ignore_index",
        "X",
        "drop",
        "X",
        "i",
        "Num_runs",
        "cross_validation",
        "train_test_split",
        "XX",
        "YY",
        "test_size",
        "GaussianNB",
        "clf",
        "fit",
        "X_train",
        "Y_train",
        "clf",
        "score",
        "X_test",
        "Y_test",
        "Naive_Bayes",
        "append",
        "accuracy",
        "neighbors",
        "KNeighborsClassifier",
        "clf",
        "fit",
        "X_train",
        "Y_train",
        "clf",
        "score",
        "X_test",
        "Y_test",
        "KKN",
        "append",
        "accuracy",
        "svm",
        "SVC",
        "kernel",
        "C",
        "clf",
        "fit",
        "X_train",
        "Y_train",
        "clf",
        "score",
        "X_test",
        "Y_test",
        "SVM_linear",
        "append",
        "accuracy",
        "np",
        "mean",
        "KKN",
        "np",
        "mean",
        "Naive_Bayes",
        "np",
        "mean",
        "SVM_linear",
        "jp2",
        "jp2s",
        "rasterio",
        "open",
        "jp2",
        "f",
        "arrs",
        "append",
        "f",
        "read",
        "np",
        "array",
        "arrs",
        "dtype",
        "arrs",
        "dtype",
        "np",
        "shape",
        "data",
        "i",
        "lenx",
        "j",
        "leny",
        "B2",
        "append",
        "data",
        "i",
        "j",
        "B3",
        "append",
        "data",
        "i",
        "j",
        "B4",
        "append",
        "data",
        "i",
        "j",
        "B8",
        "append",
        "data",
        "i",
        "j",
        "i",
        "len",
        "B2",
        "test_array",
        "append",
        "B2",
        "i",
        "B3",
        "i",
        "B4",
        "i",
        "B8",
        "i",
        "clf",
        "predict",
        "test_array",
        "predicted",
        "predicted",
        "predicted",
        "predicted",
        "predicted",
        "predicted",
        "predicted",
        "astype",
        "np",
        "reshape",
        "predicted",
        "lenx",
        "leny",
        "predicted",
        "plt",
        "figure",
        "figsize",
        "plt",
        "imshow",
        "predicted",
        "plt",
        "colorbar",
        "predicted",
        "sum",
        "predicted",
        "sum",
        "predicted",
        "sum",
        "predicted",
        "sum",
        "predicted",
        "sum",
        "predicted",
        "sum",
        "predicted",
        "sum",
        "numHA",
        "numLA",
        "noUNKNOWNS",
        "numHA",
        "noUNKNOWNS",
        "np",
        "round",
        "tot_alg_coverage"
    ],
    "literals": [
        "'ggplot'",
        "'//home//joe//Code//HCRF_master_machine.csv'",
        "'13_7_SB2'",
        "'13_7_SB4'",
        "'14_7_S5'",
        "'14_7_SB1'",
        "'14_7_SB5'",
        "'14_7_SB10'",
        "'15_7_SB3'",
        "'21_7_SB1'",
        "'21_7_SB7'",
        "'22_7_SB4'",
        "'22_7_SB5'",
        "'22_7_S3'",
        "'22_7_S5'",
        "'23_7_SB3'",
        "'23_7_SB5'",
        "'23_7_S3'",
        "'23_7_SB4'",
        "'24_7_SB2'",
        "'HA_1'",
        "'HA_2'",
        "'HA_3'",
        "'HA_4'",
        "'HA_5'",
        "'HA_6'",
        "'HA_7'",
        "'HA_8'",
        "'HA_10'",
        "'HA_11'",
        "'HA_12'",
        "'HA_13'",
        "'HA_14'",
        "'HA_15'",
        "'HA_16'",
        "'HA_17'",
        "'HA_18'",
        "'HA_19'",
        "'HA_20'",
        "'HA_21'",
        "'HA_22'",
        "'HA_24'",
        "'HA_25'",
        "'HA_26'",
        "'HA_27'",
        "'HA_28'",
        "'HA_29'",
        "'HA_30'",
        "'HA_31'",
        "'13_7_S2'",
        "'14_7_SB9'",
        "'MA_11'",
        "'MA_14'",
        "'MA_15'",
        "'MA_17'",
        "'21_7_SB2'",
        "'22_7_SB1'",
        "'MA_4'",
        "'MA_7'",
        "'MA_18'",
        "'14_7_S2'",
        "'14_7_S3'",
        "'14_7_SB2'",
        "'14_7_SB3'",
        "'14_7_SB7'",
        "'15_7_S2'",
        "'15_7_SB4'",
        "'20_7_SB1'",
        "'20_7_SB3'",
        "'21_7_S1'",
        "'21_7_S5'",
        "'21_7_SB4'",
        "'22_7_SB2'",
        "'22_7_SB3'",
        "'22_7_S1'",
        "'23_7_S1'",
        "'23_7_S2'",
        "'24_7_S2'",
        "'MA_1'",
        "'MA_2'",
        "'MA_3'",
        "'MA_5'",
        "'MA_6'",
        "'MA_8'",
        "'MA_9'",
        "'MA_10'",
        "'MA_12'",
        "'MA_13'",
        "'MA_16'",
        "'MA_19'",
        "'13_7_S1'",
        "'13_7_S3'",
        "'14_7_S1'",
        "'15_7_S1'",
        "'15_7_SB2'",
        "'20_7_SB2'",
        "'21_7_SB5'",
        "'21_7_SB8'",
        "'25_7_S3'",
        "'13_7_SB3'",
        "'13_7_SB5'",
        "'15_7_S4'",
        "'15_7_SB1'",
        "'15_7_SB5'",
        "'21_7_S2'",
        "'21_7_S4'",
        "'21_7_SB3'",
        "'22_7_S2'",
        "'22_7_S4'",
        "'23_7_SB1'",
        "'23_7_SB2'",
        "'23_7_S4'",
        "'WI_1'",
        "'WI_2'",
        "'WI_3'",
        "'WI_4'",
        "'WI_5'",
        "'WI_6'",
        "'WI_7'",
        "'WI_8'",
        "'WI_9'",
        "'WI_10'",
        "'WI_11'",
        "'WI_12'",
        "'WI_13'",
        "'DISP1'",
        "'DISP2'",
        "'DISP3'",
        "'DISP4'",
        "'DISP5'",
        "'DISP6'",
        "'DISP7'",
        "'DISP8'",
        "'DISP9'",
        "'DISP10'",
        "'DISP11'",
        "'DISP12'",
        "'DISP13'",
        "'DISP14'",
        "'21_7_SB5'",
        "'21_7_SB7'",
        "'21_7_SB8'",
        "'25_7_S3'",
        "'WAT_1'",
        "'WAT_3'",
        "'WAT_4'",
        "'WAT_5'",
        "'WAT_6'",
        "'WAT_6'",
        "'{}'",
        "'{}'",
        "'{}'",
        "'{}'",
        "'{}'",
        "'R140'",
        "'R210'",
        "'R315'",
        "'R490'",
        "'label'",
        "'HA'",
        "'R140'",
        "'R210'",
        "'R315'",
        "'R490'",
        "'label'",
        "'LA'",
        "'R140'",
        "'R210'",
        "'R315'",
        "'R490'",
        "'label'",
        "'CI'",
        "'R140'",
        "'R210'",
        "'R315'",
        "'R490'",
        "'label'",
        "'CC'",
        "'R140'",
        "'R210'",
        "'R315'",
        "'R490'",
        "'label'",
        "'WAT'",
        "'R140'",
        "'R210'",
        "'R315'",
        "'R490'",
        "'label'",
        "'UNKNOWN'",
        "'label'",
        "'label'",
        "'linear'",
        "'KKN '",
        "'Naive Bayes '",
        "'SVM_linear '",
        "'/media/joe/FDB2-2F9B/B02.jp2'",
        "'/media/joe/FDB2-2F9B/B03.jp2'",
        "'/media/joe/FDB2-2F9B/B04.jp2'",
        "'/media/joe/FDB2-2F9B/B08.jp2'",
        "'UNKNOWN'",
        "'WAT'",
        "'CC'",
        "'CI'",
        "'LA'",
        "'HA'",
        "'Total Algal Coverage = '"
    ],
    "variables": [
        "hcrf_master",
        "HA_hcrf",
        "LA_hcrf",
        "CI_hcrf",
        "CC_hcrf",
        "WAT_hcrf",
        "HAsites",
        "LAsites",
        "CIsites",
        "CCsites",
        "WATsites",
        "hcrf_HA",
        "HA_hcrf",
        "hcrf_LA",
        "LA_hcrf",
        "hcrf_CI",
        "CI_hcrf",
        "hcrf_CC",
        "CC_hcrf",
        "hcrf_WAT",
        "WAT_hcrf",
        "X",
        "X",
        "X",
        "X",
        "X",
        "X",
        "Y",
        "Y",
        "Y",
        "Y",
        "Y",
        "Y",
        "Z",
        "Z",
        "Z",
        "Z",
        "Z",
        "Z",
        "P",
        "P",
        "P",
        "P",
        "P",
        "P",
        "Q",
        "Q",
        "Q",
        "Q",
        "Q",
        "Q",
        "Zero",
        "Zero",
        "Zero",
        "Zero",
        "Zero",
        "Zero",
        "X",
        "X",
        "X",
        "X",
        "X",
        "XX",
        "YY",
        "Naive_Bayes",
        "KKN",
        "SVM_linear",
        "SVM_sigmoid",
        "SVM_poly",
        "SVM_rbf",
        "Num_runs",
        "X_train",
        "X_test",
        "Y_train",
        "Y_test",
        "clf",
        "accuracy",
        "clf",
        "accuracy",
        "clf",
        "accuracy",
        "jp2s",
        "arrs",
        "data",
        "B2",
        "B3",
        "B4",
        "B8",
        "predicted",
        "test_array",
        "lenx",
        "leny",
        "predicted",
        "predicted",
        "predicted",
        "predicted",
        "predicted",
        "predicted",
        "predicted",
        "predicted",
        "predicted",
        "predicted",
        "numHA",
        "numLA",
        "numCI",
        "numCC",
        "numWAT",
        "numUNKNOWN",
        "noUNKNOWNS",
        "tot_alg_coverage",
        "HA_coverage"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "-*- coding: utf-8 -*-",
        "Read in raw HCRF data to DataFrame. This version pulls in HCRF data from 2016 and 2017",
        "Group site names",
        "the following were reclassified from LAsites due to their v low reflectance",
        "These have been removed completely from HAsites: '21_7_S3', '23_7_S5', 'HA_32'",
        "'24_7_S1','25_7_S1','HA_9', 'HA_33','13_7_SB1', '13_7_S5', 'HA_23'",
        "these have been moved from CI",
        "These have been removed competely from LA sites",
        "'13_7_S2','13_7_SB1','14_7_SB9', '15_7_S3' ,'MA_11',' MA_14','MA15','MA_17',",
        "'13_7_S5', '25_7_S2','25_7_S4','25_7_S5'",
        "REMOVED FROM WATER SITES 'WAT_2'",
        "Create dataframes for ML algorithm",
        "Make dataframe with column for label, columns for reflectancxe at key wavelengths",
        "select wavelengths to use - currently set to 8 Sentnel 2 bands",
        "Zero option added to avoid the classifier assigning a surface type to clipped",
        "aread of image. Since these areas have zero reflectance values in all bands,",
        "the classifier correctly identifies them and assigns the to the 'unknown' category",
        "Include Snow as feature ZZ: OPTIONAL (not included by default)",
        "ZZ = pd.DataFrame()",
        "ZZ['R125'] = np.array(statsSnow_hcrf.iloc[125])",
        "ZZ['R210'] = np.array(statsSnow_hcrf.iloc[210])",
        "ZZ['R318'] = np.array(statsSnow_hcrf.iloc[318])",
        "ZZ['R367'] = np.array(statsSnow_hcrf.iloc[367])",
        "ZZ['R490'] = np.array(statsSnow_hcrf.iloc[490])",
        "",
        "ZZ['label'] = 'Snow'",
        "Jin dataframes into one continuous DF",
        "X = X.append(ZZ,ignore_index=True)",
        "Create featires and labels (XX = features - all data but no labels, YY = labels only)",
        "Train a range of algorithms and measure accuracy",
        "split data into test and train sets",
        "test different classifers",
        "1. Try K-nearest neighbours",
        "2. Try support Vector Machine (linear kernel)",
        "3. Try support Vector Machine (radial basis function kernel)",
        "clf = svm.SVC(kernel='rbf', C=1000.0, gamma = 0.1)",
        "clf.fit(X_train,Y_train)",
        "accuracy = clf.score(X_test,Y_test)",
        "SVM_rbf.append(accuracy)",
        "4. Try support Vector Machine (polynomial kernel)",
        "clf = svm.SVC(kernel='poly', C=1000.0)",
        "clf.fit(X_train,Y_train)",
        "accuracy = clf.score(X_test,Y_test)",
        "SVM_poly.append(accuracy)",
        "",
        "# 5. Try support Vector Machine (sigmoid kernel)",
        "clf = svm.SVC(kernel='sigmoid', C=1000.0)",
        "clf.fit(X_train,Y_train)",
        "accuracy = clf.score(X_test,Y_test)",
        "SVM_sigmoid.append(accuracy)",
        "print('SVM_sigmoid',np.mean(SVM_sigmoid))",
        "print('SVM_rbf',np.mean(SVM_rbf))",
        "print('SVM_poly',np.mean(SVM_poly))",
        "",
        "OPTIMIZING PARAMETERS FOR SVM ##########################",
        "comment out for actual model fitting, but run to determie optimal params for",
        "svm",
        "",
        "Optimize parameters using GridSearch with cross validation (GridSearchCV) to",
        "find optimal set of values for best model performance. Apply to three kernel types",
        "and wide range of C and gamma values. Print best set of params.",
        "",
        "",
        "from sklearn.grid_search import GridSearchCV",
        "tuned_parameters = [{'kernel': ['linear'], 'gamma': [1e-1, 1e-2, 1e-3, 1e-4],",
        "'C': [0.1, 1, 10, 100, 1000, 10000]},",
        "{'kernel': ['rbf'], 'C': [0.1, 1, 10, 100, 1000, 10000]},",
        "{'kernel':['poly'], 'C':[0.1,1,10,100,1000,10000]}]",
        "",
        "",
        "clf = GridSearchCV(svm.SVC(C=1), tuned_parameters, cv=5)",
        "clf.fit(X_train, Y_train)",
        "",
        "print(\"Best parameters set found on development set:\")",
        "print()",
        "print(clf.best_params_)",
        "",
        "IMPORT MULTISPECTRAL IMAGE AND CLASSIFY USING ########################",
        "TRAINED ML ALGORITHM   ##################################",
        "NB THIS SECTION TAKES A LONG TIME TO RUN",
        "(>30 mins on laptop - i7 7700 GHz, 32 GB RAM)",
        "import image from file (importing 4 x jp2 files)",
        "set up empty lists to append into",
        "get dimensions of each band layer",
        "Loop through each pixel and append the pixel value from each layer to a 1D list",
        "crop image to eliminate non-ice areas",
        "create new array of arrays. Each subarray contains reflectance value for each layer",
        "Sen2Cor provides data * 10000, so divide by 10000 to get reflectance between 0-1",
        "apply ML algorithm to 4-value array for each pixel - predict surface type",
        "convert surface class (string) to a numeric value for plotting",
        "ensure array data type is float (required for imshow)",
        "reshape 1D array back into original image dimensions",
        "plot classified surface",
        "Calculate coverage stats",
        ""
    ],
    "docstrings": [
        "\"\"\"\nCreated on Thu Mar  8 14:32:24 2018\n\n@author: joe\n\"\"\""
    ],
    "functions": [],
    "classes": []
}