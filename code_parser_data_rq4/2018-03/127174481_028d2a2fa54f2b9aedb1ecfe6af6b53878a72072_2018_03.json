{
    "identifiers": [
        "datetime",
        "datetime",
        "requests",
        "sqlalchemy",
        "dialects",
        "postgresql",
        "insert",
        "app",
        "models",
        "Forecast",
        "engine",
        "Session",
        "timestamp",
        "lat",
        "lon",
        "api_key",
        "lat",
        "lon",
        "timestamp",
        "requests",
        "get",
        "api_call",
        "r",
        "json",
        "data",
        "data",
        "_x",
        "data",
        "_x",
        "keys",
        "key",
        "_x_keys",
        "key",
        "keys",
        "_x",
        "pop",
        "key",
        "data",
        "datetime",
        "timestamp",
        "march",
        "get_weather",
        "march",
        "filter_weather",
        "weather",
        "weather",
        "Session",
        "insert",
        "Forecast",
        "__tablename__",
        "values",
        "values",
        "values",
        "id",
        "data",
        "stmt",
        "on_conflict_do_update",
        "index_elements",
        "set_",
        "data",
        "session",
        "execute",
        "do_update_stmt"
    ],
    "literals": [
        "\"83942510644cc6a8bfceae5bed2e6ed8\"",
        "f\"https://api.darksky.net/forecast/{api_key}/{lat},{lon},{int(timestamp)}?exclude=flags,alerts,currently,daily,minutely\"",
        "'hourly'",
        "'data'",
        "'time'",
        "'summary'",
        "'precipIntensity'",
        "'precipProbability'",
        "'precipType'",
        "'temperature'",
        "'some_id'",
        "'inserted value'",
        "'id'",
        "'updated value'"
    ],
    "variables": [
        "api_key",
        "api_call",
        "r",
        "data",
        "keys",
        "_x_keys",
        "march",
        "weather",
        "weather",
        "values",
        "session",
        "stmt",
        "do_update_stmt"
    ],
    "comments": [
        "===STD IMPORTS",
        "===PIP IMPORTS",
        "===LOCAL IMPORTS",
        "print(r.status_code)",
        "print(r.text)",
        "print(data)",
        "pop all except for interested keys",
        "days grab in 48 hour chunks. Grab only 15 days",
        "select on lat, lon, time"
    ],
    "docstrings": [
        "\"\"\"\nGets one month of info from the weather API\n\"\"\"",
        "\"\"\"Get weather at timestamp, lat, lon\"\"\"",
        "\"\"\"strip weather data\"\"\""
    ],
    "functions": [
        "get_weather",
        "filter_weather"
    ],
    "classes": []
}