{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "key",
        "key",
        "injectedEnv",
        "assign",
        "injectedEnv",
        "injectedEnv",
        "omitBy",
        "pick",
        "process",
        "envKeys",
        "value",
        "isString",
        "value",
        "forEach",
        "envKeys",
        "v",
        "k",
        "process",
        "k",
        "assign",
        "process",
        "assign",
        "process",
        "assign",
        "process",
        "assign",
        "process",
        "assign",
        "process",
        "assign",
        "InstancedEnv",
        "process",
        "process",
        "process",
        "process",
        "isString",
        "env",
        "shouldRun",
        "isString",
        "env",
        "shouldRun",
        "isString",
        "env",
        "shouldRun",
        "isString",
        "env",
        "shouldRun",
        "shouldRun",
        "shouldRun",
        "process",
        "describe",
        "ERR_TOKEN",
        "ErrorMessage",
        "sampleError",
        "before",
        "env",
        "beforeEach",
        "env",
        "fakeService",
        "nock",
        "process",
        "logger",
        "createLogger",
        "client",
        "RequestHandler",
        "Configuration",
        "logger",
        "logger",
        "afterEach",
        "env",
        "nock",
        "after",
        "env",
        "it",
        "done",
        "client",
        "err",
        "response",
        "err",
        "err",
        "isObject",
        "response",
        "response",
        "done",
        "it",
        "done",
        "fakeService",
        "tries",
        "tries",
        "intendedTries",
        "client",
        "errorMessage",
        "tries",
        "intendedTries",
        "done",
        "it",
        "done",
        "env",
        "env",
        "createLogger",
        "RequestHandler",
        "Configuration",
        "key",
        "logger",
        "logger",
        "fakeService",
        "key",
        "uri",
        "uri",
        "key",
        "client",
        "errorMessage",
        "done",
        "it",
        "done",
        "fakeService",
        "done",
        "client",
        "errorMessage",
        "describe",
        "ERR_TOKEN",
        "ErrorMessage",
        "sampleError",
        "after",
        "env",
        "it",
        "done",
        "env",
        "createLogger",
        "Configuration",
        "env",
        "logger",
        "RequestHandler",
        "cfg",
        "logger",
        "errorMessage",
        "err",
        "response",
        "body",
        "err",
        "response",
        "isObject",
        "body",
        "isEmpty",
        "body",
        "done",
        "it",
        "done",
        "env",
        "createLogger",
        "Configuration",
        "logger",
        "RequestHandler",
        "cfg",
        "logger",
        "errorMessage",
        "err",
        "response",
        "body",
        "err",
        "response",
        "isObject",
        "body",
        "isEmpty",
        "body",
        "done",
        "it",
        "done",
        "env",
        "createLogger",
        "Configuration",
        "parseInt",
        "env",
        "logger",
        "RequestHandler",
        "cfg",
        "logger",
        "errorMessage",
        "err",
        "response",
        "body",
        "err",
        "response",
        "isObject",
        "body",
        "isEmpty",
        "body",
        "done",
        "it",
        "done",
        "env",
        "createLogger",
        "Configuration",
        "logger",
        "RequestHandler",
        "cfg",
        "logger",
        "errorMessage",
        "err",
        "response",
        "body",
        "err",
        "response",
        "isObject",
        "body",
        "isEmpty",
        "body",
        "done",
        "describe",
        "ERR_TOKEN",
        "ErrorMessage",
        "er",
        "after",
        "env",
        "it",
        "done",
        "env",
        "process",
        "createLogger",
        "RequestHandler",
        "Configuration",
        "logger",
        "logger",
        "client",
        "err",
        "response",
        "err",
        "err",
        "ERROR_STRING",
        "response",
        "done",
        "it",
        "done",
        "env",
        "createLogger",
        "Configuration",
        "env",
        "logger",
        "RequestHandler",
        "cfg",
        "logger",
        "client",
        "em",
        "err",
        "response",
        "body",
        "err",
        "isObject",
        "body",
        "isEmpty",
        "body",
        "response",
        "done",
        "it",
        "done",
        "env",
        "createLogger",
        "Configuration",
        "parseInt",
        "env",
        "logger",
        "RequestHandler",
        "cfg",
        "logger",
        "client",
        "em",
        "err",
        "response",
        "body",
        "err",
        "isObject",
        "body",
        "isEmpty",
        "body",
        "response",
        "done",
        "describe",
        "env",
        "env",
        "env",
        "testCase",
        "it",
        "testCase",
        "done",
        "testCase",
        "request",
        "API",
        "env",
        "key",
        "err",
        "response",
        "body",
        "err",
        "body",
        "response",
        "testCase",
        "body",
        "testCase",
        "done",
        "describe",
        "path",
        "__dirname",
        "suffix",
        "TIMESTAMP",
        "BASE_NAME",
        "suffix",
        "buildName",
        "buildName",
        "before",
        "process",
        "oldLogger",
        "util",
        "arguments",
        "oldLogger",
        "text",
        "logOutput",
        "text",
        "reinitialize",
        "extraConfig",
        "process",
        "SERVICE",
        "VERSION",
        "extraConfig",
        "require",
        "errors",
        "ErrorReporting",
        "config",
        "transport",
        "ErrorsApiTransport",
        "errors",
        "errors",
        "after",
        "done",
        "oldLogger",
        "transport",
        "transport",
        "err",
        "err",
        "done",
        "afterEach",
        "logOutput",
        "messageTest",
        "timeout",
        "cb",
        "setTimeout",
        "transport",
        "err",
        "groups",
        "err",
        "groups",
        "groups",
        "errItem",
        "errItem",
        "errItem",
        "errItem",
        "errItem",
        "SERVICE",
        "errItem",
        "VERSION",
        "messageTest",
        "errItem",
        "cb",
        "matchedErrors",
        "timeout",
        "messageTest",
        "timeout",
        "cb",
        "verifyAllGroups",
        "messageTest",
        "timeout",
        "matchedErrors",
        "matchedErrors",
        "matchedErrors",
        "errItem",
        "errItem",
        "errItem",
        "rep",
        "rep",
        "SRC_ROOT",
        "rep",
        "rep",
        "context",
        "context",
        "SERVICE",
        "context",
        "VERSION",
        "cb",
        "errOb",
        "messageTest",
        "timeout",
        "cb",
        "expectedTopOfStack",
        "errors",
        "errOb",
        "err",
        "response",
        "body",
        "err",
        "isObject",
        "response",
        "body",
        "verifyServerResponse",
        "messageTest",
        "timeout",
        "cb",
        "it",
        "verifyErrors",
        "done",
        "TIMEOUT",
        "buildName",
        "expectedTopOfStack",
        "errorId",
        "verifyReporting",
        "errOb",
        "message",
        "message",
        "errorId",
        "TIMEOUT",
        "done",
        "it",
        "done",
        "TIMEOUT",
        "buildName",
        "verifyReporting",
        "errorId",
        "message",
        "message",
        "errorId",
        "TIMEOUT",
        "done",
        "it",
        "done",
        "TIMEOUT",
        "verifyReporting",
        "message",
        "message",
        "TIMEOUT",
        "done",
        "it",
        "done",
        "TIMEOUT",
        "verifyReporting",
        "message",
        "message",
        "TIMEOUT",
        "done",
        "it",
        "done",
        "TIMEOUT",
        "verifyReporting",
        "message",
        "message",
        "TIMEOUT",
        "done",
        "it",
        "done",
        "TIMEOUT",
        "verifyReporting",
        "num",
        "message",
        "message",
        "num",
        "TIMEOUT",
        "done",
        "it",
        "done",
        "TIMEOUT",
        "verifyReporting",
        "message",
        "message",
        "TIMEOUT",
        "done",
        "it",
        "done",
        "TIMEOUT",
        "buildName",
        "definitionSiteFunction",
        "expectedTopOfStack",
        "errors",
        "errorId",
        "callingSiteFunction",
        "verifyReporting",
        "errOb",
        "message",
        "message",
        "errorId",
        "message",
        "message",
        "TIMEOUT",
        "done",
        "it",
        "done",
        "TIMEOUT",
        "reinitialize",
        "buildName",
        "expectedTopOfStack",
        "rejectValue",
        "rejectValue",
        "setImmediate",
        "rejectText",
        "logOutput",
        "expected",
        "verifyServerResponse",
        "message",
        "message",
        "rejectText",
        "TIMEOUT",
        "done",
        "it",
        "done",
        "TIMEOUT",
        "reinitialize",
        "buildName",
        "expectedTopOfStack",
        "rejectValue",
        "setImmediate",
        "rejectValue",
        "logOutput",
        "notExpected",
        "verifyAllGroups",
        "message",
        "message",
        "rejectValue",
        "TIMEOUT",
        "matchedErrors",
        "matchedErrors",
        "done"
    ],
    "literals": [
        "'use strict'",
        "'assert'",
        "'nock'",
        "'../src/google-apis/auth-client.js'",
        "'../utils/errors-api-transport.js'",
        "'../src/classes/error-message.js'",
        "'../test/fixtures/configuration.js'",
        "'../src/logger.js'",
        "'is'",
        "'lodash.foreach'",
        "'lodash.assign'",
        "'lodash.pick'",
        "'lodash.omitby'",
        "'request'",
        "'util'",
        "'path'",
        "'_@google_STACKDRIVER_INTEGRATION_TEST_ERROR__'",
        "'GOOGLE_APPLICATION_CREDENTIALS'",
        "'GCLOUD_PROJECT'",
        "'NODE_ENV'",
        "string",
        "string",
        "string",
        "string",
        "'production'",
        "'The project id (projectId) was not set in the env'",
        "'The api key (apiKey) was not set as an env variable'",
        "'The project number (projectNumber) was not set in the env'",
        "'The key filename (keyFilename) was not set in the env'",
        "'Skipping error-reporting system tests'",
        "'Request/Response lifecycle mocking'",
        "'https://clouderrorreporting.googleapis.com/v1beta1/projects/'",
        "'/events:report'",
        "'Should fail when receiving non-retryable errors'",
        "'message cannot be empty.'",
        "'Should retry when receiving retryable errors'",
        "'Mock Server Received Request:'",
        "'/'",
        "'Please try again later'",
        "'Should provide the key as a query string on outgoing requests when '",
        "'using an API key'",
        "'key='",
        "'Should still execute the request with a callback-less invocation'",
        "'Client creation'",
        "'Should not throw on initialization when using only project id as a '",
        "'runtime argument'",
        "'Should not throw on initialization when using only project id as an '",
        "'env variable'",
        "'Should not throw on initialization when using only project number as '",
        "'a runtime argument'",
        "'Should not throw on initialization when using only project number as '",
        "'an env variable'",
        "'Expected Behavior'",
        "'Stackdriver error reporting client has not been configured to send'",
        "'errors, please check the NODE_ENV environment variable and make'",
        "'sure it is set to \"production\" or set the ignoreEnvironmentCheck'",
        "'property to true in the runtime configuration object'",
        "' '",
        "'Should callback with an error with a configuration to not report errors'",
        "'null'",
        "'Should succeed in its request given a valid project id'",
        "'Should succeed in its request given a valid project number'",
        "'Error Reporting API'",
        "'when a valid API key is given'",
        "'Message cannot be empty.'",
        "'when an empty API key is given'",
        "''",
        "'The request is missing a valid API key.'",
        "'when an invalid API key is given'",
        "'API key not valid. Please pass a valid API key.'",
        "should return an expected message ${testCase.name}",
        "'https://clouderrorreporting.googleapis.com/v1beta1'",
        "${API}/projects/${env.projectId}/events:report?key=${key}",
        "'error-reporting'",
        "'..'",
        "'src'",
        "'error-reporting-system-test'",
        "'_'",
        "'service-name'",
        "'service-version'",
        "''",
        "'unhandledRejection'",
        "'unhandledRejection'",
        "'../src/index.js'",
        "''",
        "'expectedTopOfStack'",
        "'Should correctly publish an error that is an Error object'",
        "'with-error-constructor'",
        "'Error: '",
        "'\\n'",
        "'Should correctly publish an error that is a string'",
        "'with-string'",
        "'\\n'",
        "'Should correctly publish an error that is undefined'",
        "'undefined\\n'",
        "'Should correctly publish an error that is null'",
        "'null\\n'",
        "'Should correctly publish an error that is a plain object'",
        "'someValue'",
        "'[object Object]\\n'",
        "'Should correctly publish an error that is a number'",
        "''",
        "'\\n'",
        "'Should correctly publish an error that is of an unknown type'",
        "'true\\n'",
        "'Should correctly publish errors using an error builder'",
        "'with-error-builder'",
        "'callingSiteFunction'",
        "'definitionSiteFunction'",
        "'Should report unhandledRejections if enabled'",
        "'promise-rejection'",
        "'Error: '",
        "'UnhandledPromiseRejectionWarning: Unhandled '",
        "'promise rejection: '",
        "'.  This rejection has been reported to the '",
        "'Google Cloud Platform error-reporting console.'",
        "'Should not report unhandledRejections if disabled'",
        "'promise-rejection'",
        "'UnhandledPromiseRejectionWarning: Unhandled '",
        "'promise rejection: '",
        "'.  This rejection has been reported to the error-reporting console.'"
    ],
    "variables": [
        "nock",
        "RequestHandler",
        "ErrorsApiTransport",
        "ErrorMessage",
        "Configuration",
        "createLogger",
        "isObject",
        "isString",
        "isEmpty",
        "forEach",
        "assign",
        "pick",
        "omitBy",
        "request",
        "util",
        "path",
        "ERR_TOKEN",
        "TIMEOUT",
        "envKeys",
        "env",
        "shouldRun",
        "sampleError",
        "errorMessage",
        "fakeService",
        "client",
        "logger",
        "tries",
        "intendedTries",
        "key",
        "logger",
        "client",
        "sampleError",
        "errorMessage",
        "logger",
        "cfg",
        "logger",
        "cfg",
        "logger",
        "cfg",
        "logger",
        "cfg",
        "ERROR_STRING",
        "er",
        "em",
        "logger",
        "client",
        "logger",
        "cfg",
        "client",
        "logger",
        "cfg",
        "client",
        "API",
        "key",
        "SRC_ROOT",
        "TIMESTAMP",
        "BASE_NAME",
        "SERVICE",
        "VERSION",
        "errors",
        "transport",
        "oldLogger",
        "logOutput",
        "text",
        "config",
        "ErrorReporting",
        "matchedErrors",
        "errItem",
        "rep",
        "context",
        "errorId",
        "errOb",
        "errorId",
        "num",
        "errorId",
        "errOb",
        "rejectValue",
        "rejectText",
        "expected",
        "rejectValue",
        "notExpected"
    ],
    "comments": [
        "eslint-disable-next-line node/no-extraneous-require",
        "eslint-disable-next-line node/no-missing-require",
        "eslint-disable-next-line no-process-exit",
        "TODO: Determine if 403 is the correct expected status code.",
        "Prior to the code migration, the expected status code",
        "was 400.  However, the service is now reporting 403.",
        "This test assumes that only the error-reporting library will be",
        "adding listeners to the 'unhandledRejection' event.  Thus we need to",
        "make sure that no listeners for that event exist.  If this check",
        "fails, then the reinitialize() method below will need to updated to",
        "more carefully reinitialize the error-reporting library without",
        "interfering with existing listeners of the 'unhandledRejection' event.",
        "The error should have been reported exactly once",
        "Ensure the stack trace in the message does not contain any frames",
        "specific to the error-reporting library.",
        "Ensure the stack trace in the mssage contains the frame corresponding",
        "to the 'expectedTopOfStack' function because that is the name of",
        "function used in this file that is the topmost function in the call",
        "stack that is not internal to the error-reporting library.",
        "This ensures that only the frames specific to the",
        "error-reporting library are removed from the stack trace.",
        "For each test below, after an error is reported, the test waits",
        "TIMEOUT ms before verifying the error has been reported to ensure",
        "the system had enough time to receive the error report and process it.",
        "As such, each test is set to fail due to a timeout only if sufficiently",
        "more than TIMEOUT ms has elapsed to avoid test fragility.",
        "Use an IIFE with the name `definitionSiteFunction` to use later to ensure",
        "the stack trace of the point where the error message was constructed is",
        "used.",
        "Use an IIFE with the name `expectedTopOfStack` so that the test can",
        "verify that the stack trace used does not contain any frames",
        "specific to the error-reporting library.",
        "Verify that the stack trace of the constructed error",
        "uses the stack trace at the point where the error was constructed",
        "and not the stack trace at the point where the `report` method",
        "was called.",
        "An Error is used for the rejection value so that it's stack",
        "contains the stack trace at the point the rejection occured and is",
        "rejected within a function named `expectedTopOfStack` so that the",
        "test can verify that the collected stack is correct.",
        "Get all groups that that start with the rejection value and hence all",
        "of the groups corresponding to the above rejection (Since the",
        "buildName() creates a string unique enough to single out only the",
        "above rejection.) and verify that there are no such groups reported."
    ],
    "docstrings": [
        "* Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License."
    ],
    "functions": [
        "_captureProcessProperties",
        "sterilizeProcess",
        "setProjectId",
        "setProjectNumber",
        "setKeyFilename",
        "setProduction",
        "restoreProcessToOriginalState",
        "injected",
        "shouldRun",
        "buildName",
        "reinitialize",
        "verifyAllGroups",
        "verifyServerResponse",
        "verifyReporting"
    ],
    "classes": [
        "InstancedEnv"
    ]
}