{
    "identifiers": [
        "Component",
        "createElement",
        "Alert",
        "LineChart",
        "LineChartContainerProps",
        "getRandomNumbers",
        "validateSeriesProps",
        "deepMerge",
        "ScatterData",
        "LineMode",
        "Component",
        "createElement",
        "createElement",
        "Alert",
        "validateSeriesProps",
        "createElement",
        "LineChart",
        "props",
        "props",
        "props",
        "series",
        "series",
        "series",
        "series",
        "series",
        "preview",
        "deepMerge",
        "seriesOptions",
        "series",
        "series",
        "series",
        "series",
        "series",
        "sampleData",
        "sampleData",
        "preview",
        "getRandomNumbers",
        "require",
        "require"
    ],
    "literals": [
        "\"react\"",
        "\"../components/Alert\"",
        "\"../LineChart/components/LineChart\"",
        "\"../LineChart/components/LineChartContainer\"",
        "\"../utils/data\"",
        "\"deepmerge\"",
        "\"plotly.js\"",
        "\"../utils/types\"",
        "\"div\"",
        "\"widget-charts-any-alert\"",
        "\"points\"",
        "\"X\"",
        "\"+\"",
        "\"lines\"",
        "\"scatter\"",
        "\"tonexty\"",
        "\"points\"",
        "\"Sample\"",
        "\"scatter\"",
        "string",
        "string",
        "\"Sample 1\"",
        "\"Sample 2\"",
        "\"Sample 3\"",
        "\"Sample 4\"",
        "\"../ui/Charts.scss\"",
        "\"../ui/ChartsLoading.scss\""
    ],
    "variables": [
        "seriesOptions",
        "sampleData"
    ],
    "comments": [
        "tslint:disable-next-line class-name",
        "export function getVisibleProperties(valueMap: LineChartContainerProps, visibilityMap: VisibilityMap<LineChartContainerProps>) { // tslint:disable-line max-line-length",
        "if (valueMap.series && Array.isArray(valueMap.series)) {",
        "valueMap.series.forEach((series, index) => {",
        "if (series.dataSourceType === \"XPath\") {",
        "visibilityMap.series[index].dataSourceMicroflow = false;",
        "} else if (series.dataSourceType === \"microflow\") {",
        "visibilityMap.series[index].entityConstraint = false;",
        "}",
        "visibilityMap.series[index].seriesOptions = false;",
        "visibilityMap.series[index].sampleData = false;",
        "});",
        "}",
        "visibilityMap.layoutOptions = false;",
        "visibilityMap.devMode = false;",
        "return visibilityMap;",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "render",
        "getData",
        "getSampleTraces",
        "getPreviewCss"
    ],
    "classes": [
        "preview"
    ]
}