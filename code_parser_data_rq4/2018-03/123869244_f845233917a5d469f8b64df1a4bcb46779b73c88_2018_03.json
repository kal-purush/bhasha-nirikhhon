{
    "identifiers": [
        "code",
        "code",
        "t",
        "t",
        "t",
        "isNaN",
        "t",
        "t",
        "t",
        "tokens",
        "tokens",
        "tokens",
        "current_token",
        "current_token",
        "tokens",
        "argument",
        "expression",
        "argument",
        "AST",
        "expression",
        "tokens",
        "argument",
        "expression",
        "argument",
        "AST",
        "expression",
        "tokens",
        "argument",
        "expression",
        "argument",
        "AST",
        "expression",
        "AST",
        "parser",
        "lexer"
    ],
    "literals": [
        "'word'",
        "'number'",
        "'Drawing'",
        "'word'",
        "'Paper'",
        "'CallExpression'",
        "'Paper'",
        "'number'",
        "'NumberLiteral'",
        "'Paper command must be followed by a number.'",
        "'Pen'",
        "'CallExpression'",
        "'Pen'",
        "'number'",
        "'NumberLiteral'",
        "'Pen command must be followed by a number.'",
        "'Line'",
        "'CallExpression'",
        "'Line'",
        "'number'",
        "'NumberLiteral'",
        "'Line command must be followed by a number.'",
        "\"Paper 0\\n Pen 100 \\n Line 0 50 100 50\""
    ],
    "variables": [
        "AST",
        "current_token",
        "expression",
        "argument",
        "expression",
        "argument",
        "expression",
        "argument"
    ],
    "comments": [
        "extract a token at a time as current_token. Loop until we are out of tokens.",
        "Since number token does not do anything by it self, we only analyze syntax when we find a word.",
        "if current token is CallExpression of type Paper, next token should be color argument",
        "add argument information to expression object",
        "push the expression object to body of our AST",
        "if current token is CallExpression of type Paper, next token should be color argument",
        "add argument information to expression object",
        "push the expression object to body of our AST",
        "if current token is CallExpression of type Paper, next token should be color argument",
        "add argument information to expression object",
        "push the expression object to body of our AST",
        "console.log(lexer(\"Paper 0 \\n Pen 100 \\n Line 0 50 100 50\"));"
    ],
    "docstrings": [],
    "functions": [
        "lexer",
        "parser"
    ],
    "classes": []
}