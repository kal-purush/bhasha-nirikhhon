{
    "identifiers": [
        "Neo",
        "Cryptography",
        "NeoLux",
        "Demo",
        "args",
        "NeoDB",
        "ForTestNet",
        "WriteLine",
        "KeyPair",
        "privateKey",
        "HexToBytes",
        "WriteLine",
        "keys",
        "address",
        "WriteLine",
        "api",
        "GetBalancesOf",
        "keys",
        "address",
        "entry",
        "balances",
        "WriteLine",
        "entry",
        "Value",
        "entry",
        "Key",
        "api",
        "TestInvokeScript",
        "NeoDraw_ContractHash",
        "response",
        "result",
        "WriteLine",
        "resultsArray",
        "Length",
        "resultsElement",
        "resultsArray",
        "WriteLine",
        "resultsElement",
        "GetType",
        "Name",
        "resultsElement",
        "GetType",
        "Name",
        "WriteLine",
        "resultsElement",
        "ToString",
        "resultsElement",
        "results",
        "WriteLine",
        "results",
        "Length",
        "result",
        "results",
        "WriteLine",
        "raIndex",
        "ToString",
        "rIndex",
        "ToString",
        "result",
        "ToString",
        "result",
        "GetType",
        "Name",
        "result",
        "GetType",
        "Name",
        "ooooo",
        "result",
        "ooooo",
        "WriteLine",
        "raIndex",
        "ToString",
        "rIndex",
        "ToString",
        "oooooIndex",
        "ToString",
        "ooooo",
        "ToString",
        "ooooo",
        "GetType",
        "Name",
        "ooooo",
        "GetType",
        "Name",
        "oooo",
        "ooooo",
        "oooo",
        "WriteLine",
        "raIndex",
        "ToString",
        "rIndex",
        "ToString",
        "oooooIndex",
        "ToString",
        "ooooIndex",
        "ToString",
        "oooo",
        "ToString",
        "oooo",
        "GetType",
        "Name",
        "ooooIndex",
        "oooooIndex",
        "rIndex",
        "raIndex",
        "WriteLine",
        "ReadLine",
        "api",
        "NeoDB",
        "ForMainNet",
        "api",
        "GetToken",
        "WriteLine",
        "redPulse",
        "WriteLine",
        "symbol",
        "WriteLine",
        "redPulse",
        "BalanceOf",
        "WriteLine",
        "balance",
        "WriteLine",
        "ReadKey"
    ],
    "literals": [
        "\"a9e2b5436cab6ff74be2d5c91b8a67053494ab5b454ac2851f872fb0fd30ba5e\"",
        "\"*Loading NEO address...\"",
        "\"Got :\"",
        "\"*Syncing balances...\"",
        "\" \"",
        "\"694ebe0840d1952b09f5435152eebbbc1f8e4b8e\"",
        "\"getall\"",
        "\"point\"",
        "\"100\"",
        "\"resultsArray.length: \"",
        "\"resultsElement:\"",
        "\"Object[]\"",
        "\"resultsElement:\\t\"",
        "\"results.length: \"",
        "\"result:\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"Object[]\"",
        "\"ooooo:\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"Object[]\"",
        "\"oooo:\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"Press Enter to Exit...\"",
        "\"RPX\"",
        "\"*Querying Symbol from RedPulse contract...\"",
        "\"*Querying BalanceOf from RedPulse contract...\"",
        "\"AVQ6jAQ3Prd32BXU5r2Vb3QL1gYzTpFhaf\"",
        "\"Press any key to quit...\""
    ],
    "variables": [
        "api",
        "privateKey",
        "keys",
        "balances",
        "NeoDraw_ContractHash",
        "response",
        "resultsArray",
        "raIndex",
        "rIndex",
        "results",
        "oooooIndex",
        "ooooIndex",
        "redPulse",
        "symbol",
        "balance"
    ],
    "comments": [
        "NOTE - You can also create an API instance for a specific private net",
        "NOTE - Private keys should not be hardcoded in the code, this is just for demonstration purposes!",
        "it is possible to optionally obtain also token balances with this method",
        "const string NeoDraw_ContractHash = \"694ebe0840d1952b09f5435152eebbbc1f8e4b8e\";",
        "var response = api.TestInvokeScript(NeoDraw_ContractHash, new object[] { \"getx\", \"user\", new object[] { \"100\" } });",
        "TEST CASE 1: object[] results = { -1 }; return results; /* WORKS */",
        "{ \"jsonrpc\":\"2.0\",\"id\":1,",
        "\"result\":{ \"script\":\"0331303051c104757365720467657478678e4b8e1fbcbbee525143f5092b95d14008be4e69\",",
        "\"state\":\"HALT, BREAK\",\"gas_consumed\":\"0.47\",",
        "\"stack\":[",
        "{ \"type\":\"ByteArray\", { \"value\":\"756e6b6e6f776e206f7065726174696f6e2027\"},",
        "{ \"type\":\"Array\",\"value\":[",
        "{ \"type\":\"Integer\",\"value\":\"-1\"}]}]}}",
        "const string NeoDraw_ContractHash = \"694ebe0840d1952b09f5435152eebbbc1f8e4b8e\";",
        "var response = api.TestInvokeScript(NeoDraw_ContractHash, new object[] { \"get\", \"user\", new object[] { \"100\" } });",
        "TEST CASE 2: UserCredentials uc = FindUser(AppVAU, encodedUsername); results = new object[] { uc }; return results; /* DOESN'T WORK */",
        "{ \"jsonrpc\":\"2.0\",\"id\":1,",
        "\"result\":{ \"script\":\"0331303051c1047573657203676574678e4b8e1fbcbbee525143f5092b95d14008be4e69\",",
        "\"state\":\"HALT, BREAK\",\"gas_consumed\":\"2.082\",",
        "\"stack\":[",
        "{ \"type\":\"Array\",\"value\":[",
        "{\"type\":\"Array\",\"value\":[",
        "{\"type\":\"ByteArray\",\"value\":\"313030\"},{\"type\":\"ByteArray\",\"value\":\"313030\"},{\"type\":\"Integer\",\"value\":\"4\"},",
        "{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},",
        "{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},",
        "{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},",
        "{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false}]}]}]}}",
        "TEST CASE 3: UserPoint[] points = new UserPoint[(int)nPoints]; results = points; return results;",
        "{ \"jsonrpc\":\"2.0\",\"id\":1,",
        "\"result\":{ \"script\":\"0331303051c105706f696e7406676574616c6c678e4b8e1fbcbbee525143f5092b95d14008be4e69\",",
        "\"state\":\"HALT, BREAK\",\"gas_consumed\":\"7.724\",",
        "\"stack\":[",
        "{ \"type\":\"Array\",\"value\":[",
        "{ \"type\":\"Array\",\"value\":[",
        "{ \"type\":\"ByteArray\",\"value\":\"3130\"},{\"type\":\"ByteArray\",\"value\":\"3230\"},{\"type\":\"Integer\",\"value\":\"4\"},",
        "{ \"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},",
        "{ \"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},",
        "{ \"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},",
        "{ \"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false}]},",
        "{ \"type\":\"Array\",\"value\":[",
        "{ \"type\":\"ByteArray\",\"value\":\"3430\"},{\"type\":\"ByteArray\",\"value\":\"3630\"},{\"type\":\"Integer\",\"value\":\"4\"},",
        "{ \"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},",
        "{ \"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},",
        "{ \"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},",
        "{ \"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false}]},",
        "{ \"type\":\"Array\",\"value\":[",
        "{ \"type\":\"ByteArray\",\"value\":\"35\"},{\"type\":\"ByteArray\",\"value\":\"35\"},{\"type\":\"Integer\",\"value\":\"4\"},",
        "{ \"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},",
        "{ \"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},",
        "{ \"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},",
        "{ \"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false},{\"type\":\"Boolean\",\"value\":false}]}]}]}}                                                                     //TEST CASE 3: UserPoint[] points = new UserPoint[(int)nPoints]; results = points; return results; // DOESN'T WORK",
        "if (oooo.GetType().Name == \"Object[]\")",
        "{",
        "int oooIndex = 0;",
        "foreach (object ooo in (object[])oooo)",
        "{",
        "if (ooo != null)",
        "{",
        "Console.WriteLine(\"ooo:\\t\" + raIndex.ToString() + \"\\t\" + rIndex.ToString() + \"\\t\" + oooooIndex.ToString() + \"\\t\" + ooooIndex.ToString() + \"\\t\" + oooIndex.ToString() + \"\\t\" + ooo.ToString() + \"\\t\" + ooo.GetType().Name);",
        "if (ooo.GetType().Name == \"Object[]\")",
        "{",
        "int ooIndex = 0;",
        "foreach (object oo in (object[])ooo)",
        "{",
        "if (oo != null)",
        "{",
        "Console.WriteLine(\"oo:\\t\" + raIndex.ToString() + \"\\t\" + rIndex.ToString() + \"\\t\" + oooooIndex.ToString() + \"\\t\" + ooooIndex.ToString() + \"\\t\" + oooIndex.ToString() + \"\\t\" + ooIndex.ToString() + \"\\t\" + oo.ToString() + \"\\t\" + oo.GetType().Name);",
        "if (oo.GetType().Name == \"Object[]\" && ((object[])oo).Length > 0)",
        "{",
        "int oIndex = 0;",
        "foreach (object o in (object[])oo)",
        "{",
        "if (o != null)",
        "{",
        "Console.WriteLine(\"o:\\t\" + raIndex.ToString() + \"\\t\" + rIndex.ToString() + \"\\t\" + oooooIndex.ToString() + \"\\t\" + ooooIndex.ToString() + \"\\t\" + oooIndex.ToString() + \"\\t\" + ooIndex.ToString() + \"\\t\" + oIndex.ToString() + \"\\t\" + o.ToString() + \"\\t\" + o.GetType().Name);",
        "oIndex++;",
        "}",
        "}",
        "}",
        "else",
        "{",
        "var oo0 = (string)oo;",
        "Console.WriteLine(\"oo0:\\t\" + raIndex.ToString() + \"\\t\" + rIndex.ToString() + \"\\t\" + oooooIndex.ToString() + \"\\t\" + ooooIndex.ToString() + \"\\t\" + oooIndex.ToString() + \"\\t\" + ooIndex.ToString() + \"\\t\" + oo0.ToString() + \"\\t\" + oo0.GetType().Name);",
        "}",
        "ooIndex++;",
        "}",
        "}",
        "}",
        "oooIndex++;",
        "}",
        "}",
        "}",
        "TestInvokeScript let's us call a smart contract method and get back a result",
        "NEP5 https://github.com/neo-project/proposals/issues/3",
        "you could also create a NEP5 from a contract script hash",
        "var redPulse_contractHash = \"ecc6b20d3ccac1ee9ef109af5a7cdb85706b1df9\";",
        "var redPulse = new NEP5(api, redPulse_contractHash);",
        "var response = api.TestInvokeScript(redPulse_contractHash, \"symbol\", new object[] { \"\" });",
        "var symbol = System.Text.Encoding.ASCII.GetString((byte[])response.result);",
        "should print \"RPX\"",
        "here we get the RedPulse token balance from an address",
        "var balance = api.GetTokenBalance(\"AVQ6jAQ3Prd32BXU5r2Vb3QL1gYzTpFhaf\", \"RPX\");"
    ],
    "docstrings": [],
    "functions": [
        "Main"
    ],
    "classes": [
        "Demo"
    ]
}