{
    "identifiers": [
        "print_function",
        "division",
        "flask",
        "Flask",
        "spidev",
        "SpiDev",
        "ImportError",
        "abc",
        "ABCMeta",
        "abstractmethod",
        "spi_id",
        "chip_select",
        "channel",
        "property",
        "property",
        "BIT_RESOLUTION",
        "property",
        "property",
        "level",
        "SpiIOBase",
        "spi_id",
        "chip_select",
        "channel",
        "SpiDev",
        "spi",
        "open",
        "spi_id",
        "chip_select",
        "SPI_MAX_FREQ",
        "channel",
        "spi",
        "xfer2",
        "channel",
        "channel",
        "adc_value",
        "adc_value",
        "value",
        "value",
        "value",
        "spi",
        "xfer2",
        "high_byte",
        "low_byte",
        "host",
        "port",
        "prefix",
        "statsd",
        "StatsClient",
        "StatsClient",
        "host",
        "port",
        "value",
        "socket",
        "prefix",
        "socket",
        "gethostname",
        "client",
        "gauge",
        "key",
        "value",
        "ABCMeta",
        "load_config",
        "abstractmethod",
        "abstractmethod",
        "abstractmethod",
        "abstractmethod",
        "cycle_id",
        "abstractmethod",
        "step_id",
        "abstractmethod",
        "value",
        "abstractmethod",
        "time",
        "what",
        "time",
        "sleep",
        "time",
        "ValueError",
        "what",
        "time",
        "time",
        "config",
        "sleep",
        "time",
        "config",
        "time",
        "time",
        "sleep_slice",
        "sleep_slice",
        "_",
        "time",
        "sleep_slice",
        "_is_stopping",
        "sleep",
        "sleep_slice",
        "_is_stopping",
        "time_delta",
        "sleep",
        "time_delta",
        "time",
        "time",
        "on_init",
        "time",
        "on_begin_measurement",
        "cycle_id",
        "config",
        "time",
        "on_begin_cycle",
        "cycle_id",
        "current_step",
        "config",
        "time",
        "on_begin_step",
        "current_step",
        "on_loop",
        "store_value",
        "value",
        "sleep",
        "STEP_PERIOD",
        "time",
        "st",
        "_is_stopping",
        "on_after_cycle",
        "sleep",
        "CYCLE_PERIOD",
        "time",
        "ct",
        "_is_stopping",
        "on_after_measurement",
        "sleep",
        "MEASUREMENT_PERIOD",
        "time",
        "mt",
        "_is_stopping",
        "EmbeddedApp",
        "property",
        "config",
        "property",
        "config",
        "config",
        "property",
        "config",
        "property",
        "config",
        "step",
        "config",
        "config",
        "config",
        "step",
        "max_steps",
        "config",
        "step",
        "min_v",
        "step",
        "max_steps",
        "max_v",
        "min_v",
        "voltage",
        "voltage",
        "output",
        "MAX_VALUE",
        "output",
        "V_REF",
        "round",
        "level",
        "level",
        "level",
        "input",
        "V_REF",
        "input",
        "MAX_VALUE",
        "SpiIOBase",
        "SpiDev",
        "SpiIOReal",
        "config",
        "SpiIO",
        "config",
        "SpiIO",
        "StatsD",
        "config",
        "config",
        "level",
        "sawtooth",
        "append",
        "voltage",
        "read_values",
        "append",
        "level_to_voltage",
        "level",
        "cycle_id",
        "step",
        "step",
        "step_to_voltage",
        "step",
        "voltage_to_level",
        "voltage",
        "read_values",
        "len",
        "read_values",
        "peaks",
        "append",
        "value",
        "series",
        "append",
        "sawtooth",
        "read_values",
        "sum",
        "peaks",
        "len",
        "peaks",
        "statsd",
        "send",
        "peak",
        "series",
        "time",
        "time",
        "time",
        "time",
        "t",
        "INTEGRATION_INTERVAL",
        "output",
        "output_level",
        "values",
        "append",
        "input",
        "get",
        "values",
        "sort",
        "values",
        "round",
        "len",
        "values",
        "json",
        "atexit",
        "threading",
        "Flask",
        "CarbaApp",
        "target",
        "carba_app",
        "main",
        "carba_app",
        "stop",
        "atexit",
        "register",
        "interrupt",
        "app",
        "route",
        "json",
        "dumps",
        "carba",
        "current_series",
        "carba_thread",
        "start",
        "app",
        "create_app"
    ],
    "literals": [
        "\"You don't have Spi installed\"",
        "\".\"",
        "\".\"",
        "\"peak\"",
        "\"You didn't time your %s well. You are lacking %f seconds.\"",
        "\"sleep_interactivity\"",
        "\"sleep_interactivity\"",
        "\"cycles\"",
        "\"steps\"",
        "\"steps\"",
        "\"cycles\"",
        "\"measurements\"",
        "\"grid_frequency\"",
        "\"sawtooth_period\"",
        "\"steps\"",
        "\"cycle_period\"",
        "\"measurement_period\"",
        "\"min_voltage\"",
        "\"max_voltage\"",
        "\"steps\"",
        "\"steps\"",
        "\"output_channel\"",
        "\"spi_class\"",
        "\"cycles\"",
        "\"sawtooth_period\"",
        "\"steps\"",
        "\"grid_frequency\"",
        "\"min_voltage\"",
        "\"max_voltage\"",
        "\"cycle_period\"",
        "\"measurement_period\"",
        "\"statsd_host\"",
        "\"docker-master.beia-consult.ro\"",
        "\"statsd_port\"",
        "\"sleep_interactivity\"",
        "\"spi_class\"",
        "\"output_channel\"",
        "\"statsd_host\"",
        "\"statsd_port\"",
        "\"sawtooth\"",
        "\"read_values\"",
        "\"/\""
    ],
    "variables": [
        "SpiDev",
        "spi",
        "max_speed_hz",
        "channel",
        "adc_value",
        "low_byte",
        "high_byte",
        "client",
        "key",
        "__metaclass__",
        "cycles",
        "_is_stopping",
        "_is_stopping",
        "sleep_slice",
        "time_delta",
        "mt",
        "ct",
        "st",
        "value",
        "min_v",
        "max_v",
        "max_steps",
        "step",
        "level",
        "config",
        "SpiIO",
        "input",
        "output",
        "statsd",
        "peaks",
        "series",
        "sawtooth",
        "read_values",
        "step",
        "voltage",
        "output_level",
        "value",
        "peak",
        "current_series",
        "t",
        "values",
        "app",
        "carba_app",
        "carba_thread",
        "app"
    ],
    "comments": [
        "!/usr/bin/env python",
        "4 Mhz",
        "0b00000000xxxxxxxx",
        "select bits from 7 to 0",
        "0bxx11xxxx00000000",
        "select bits from 15 to 8, set bits 12 and 13 to 1",
        "hacky, but we need to go back to 0",
        "Constants",
        "Utility functions",
        "Here step is between 0 and max_steps/2",
        "Framework method implementations",
        "TODO: load from config file / cmdline arguments",
        "SPI",
        "loops - cycles",
        "sawtooth",
        "loops - steps",
        "grid frequency - for integration",
        "output voltage",
        "statsd config",
        "interrupt",
        "TODO: replace with actual calculation - determine peak",
        "send peak to Statsd?!?"
    ],
    "docstrings": [
        "\"\"\" Max value that can be generated by this DAC/ADC\n        \"\"\"",
        "\"\"\" Max value that can be generated by this DAC/ADC\n        \"\"\"",
        "\"\"\" Max voltage that can be generated by this DAC/ADC\n        \"\"\"",
        "\"\"\" Calculate voltage from step number\n        \"\"\"",
        "\"\"\"\n        Main loop function. It sets the output level on the DAC and\n        the read the input from the ADC. It will return the median the inputs\n        over a 1/50 Hz interval to account for powerline frequency.\n        Returns: the median of all the ADC values.\n        \"\"\""
    ],
    "functions": [
        "BIT_RESOLUTION",
        "MAX_VALUE",
        "V_REF",
        "SPI_MAX_FREQ",
        "get",
        "get",
        "send",
        "on_init",
        "on_loop",
        "on_begin_measurement",
        "on_begin_cycle",
        "on_begin_step",
        "store_value",
        "load_config",
        "stop",
        "sleep",
        "main",
        "INTEGRATION_INTERVAL",
        "STEP_PERIOD",
        "CYCLE_PERIOD",
        "MEASUREMENT_PERIOD",
        "step_to_voltage",
        "voltage_to_level",
        "level_to_voltage",
        "load_config",
        "on_init",
        "store_value",
        "on_begin_measurement",
        "on_begin_cycle",
        "on_begin_step",
        "on_after_cycle",
        "on_after_measurement",
        "on_loop",
        "create_app",
        "interrupt",
        "homepage"
    ],
    "classes": [
        "SpiIOBase",
        "SpiIOReal",
        "StatsD",
        "EmbeddedApp",
        "CarbaApp"
    ]
}