{
    "identifiers": [
        "re",
        "sys",
        "textwrap",
        "replacements",
        "header",
        "replacements",
        "header",
        "prePost",
        "replacements",
        "regex",
        "text",
        "line",
        "find",
        "regex",
        "indent",
        "re",
        "search",
        "regex",
        "line",
        "match",
        "match",
        "groups",
        "len",
        "args",
        "args",
        "text",
        "format",
        "args",
        "text",
        "format",
        "name",
        "textwrap",
        "indent",
        "replacement",
        "indent",
        "replacement",
        "indent",
        "re",
        "sub",
        "regex",
        "replacement",
        "line",
        "i",
        "replacement",
        "splitlines",
        "output",
        "append",
        "i",
        "filename",
        "filename",
        "open",
        "filename",
        "f",
        "line",
        "f",
        "line",
        "regex",
        "text",
        "replacements",
        "items",
        "foundIt",
        "replaceText",
        "regex",
        "text",
        "foundIt",
        "output",
        "append",
        "line",
        "open",
        "filename",
        "f",
        "line",
        "output",
        "f",
        "write",
        "line",
        "MacroReplacer",
        "r",
        "replaceInFile",
        "sys",
        "argv",
        "r",
        "writeOutput"
    ],
    "literals": [
        "\"\"",
        "\"\"",
        "\"\"",
        "\"PANZER_EVALUATOR_CLASS\\((.*)\\)\"",
        "\"PANZER_EVALUATOR_CLASS_PP\\((.*)\\)\"",
        "\"PANZER_EVALUATOR_CLASS_END\"",
        "\" \"",
        "'w'",
        "\"__main__\""
    ],
    "variables": [
        "filename",
        "name",
        "line",
        "output",
        "header",
        "prePost",
        "replacements",
        "indent",
        "match",
        "args",
        "name",
        "replacement",
        "replacement",
        "replacement",
        "replacement",
        "replacement",
        "filename",
        "line",
        "foundIt",
        "foundIt",
        "r"
    ],
    "comments": [
        "!/usr/bin/env python",
        "This script will read a file and replace any Panzer Evaluator macros it",
        "finds with their contents."
    ],
    "docstrings": [
        "\"\"\"Replace Panzer Evaluator macros.\"\"\"",
        "\"\"\"Initialize the object.\n\n        Create the variables used to pass data around between members, along\n        with the various replacement rules that will be used.\n        \"\"\"",
        "\"\"\"template<typename EvalT, typename Traits>\nclass {0}\n  :\n  public panzer::EvaluatorWithBaseImpl<Traits>,\n  public PHX::EvaluatorDerived<EvalT, Traits>\n{{\"\"\"",
        "\"\"\"\n  public:\n\n    {0}(\n      const Teuchos::ParameterList& p);\n\n    void\n    postRegistrationSetup(\n      typename Traits::SetupData d,\n      PHX::FieldManager<Traits>& fm);\n\n    void\n    evaluateFields(\n      typename Traits::EvalData d);\n\"\"\"",
        "\"\"\"\n    void\n    preEvaluate(\n      typename Traits::PreEvalData d);\n\n    void\n    postEvaluate(\n      typename Traits::PostEvalData d);\n\"\"\"",
        "\"\"\"\n  private:\n\n    using ScalarT = typename EvalT::ScalarT;\"\"\"",
        "\"\"\"}}; // end of class {0}\n\"\"\"",
        "\"\"\"Replace a regular expression with its corresponding text.\"\"\"",
        "\"\"\"Make all the necessary replacements in the given file.\"\"\"",
        "\"\"\"Overwrite the original file with the modified output.\"\"\""
    ],
    "functions": [
        "replaceText",
        "replaceInFile",
        "writeOutput"
    ],
    "classes": [
        "MacroReplacer"
    ]
}