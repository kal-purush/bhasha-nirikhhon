{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "codecs",
        "math",
        "os",
        "path",
        "pybacktrack",
        "util",
        "call_system_command",
        "call_system_command",
        "pygplates",
        "sys",
        "grid_list_filename",
        "static_polygon_filename",
        "rotation_filenames",
        "longitude",
        "latitude",
        "age",
        "pygplates",
        "PointOnSphere",
        "latitude",
        "longitude",
        "age",
        "TimeDependentGrid",
        "grid_list_filename",
        "pygplates",
        "RotationModel",
        "rotation_filenames",
        "pygplates",
        "PlatePartitioner",
        "static_polygon_filename",
        "rotation_model",
        "plate_partitioner",
        "partition_point",
        "location",
        "partitioning_plate",
        "partitioning_plate",
        "get_feature",
        "get_reconstruction_plate_id",
        "age",
        "partitioning_plate",
        "age",
        "partitioning_plate",
        "get_feature",
        "get_valid_time",
        "time",
        "grids",
        "get_grids_bounding_time",
        "time",
        "grids_bounding_time",
        "grid_age_0",
        "grid_filename_0",
        "grid_age_1",
        "grid_filename_1",
        "grids_bounding_time",
        "grid_age_1",
        "age",
        "math",
        "fabs",
        "time",
        "grid_age_0",
        "_sample_grid",
        "grid_age_0",
        "grid_filename_0",
        "math",
        "fabs",
        "time",
        "grid_age_1",
        "_sample_grid",
        "grid_age_1",
        "grid_filename_1",
        "_sample_grid",
        "grid_age_0",
        "grid_filename_0",
        "_sample_grid",
        "grid_age_1",
        "grid_filename_1",
        "math",
        "isnan",
        "grid_value_0",
        "math",
        "isnan",
        "grid_value_1",
        "grid_age_1",
        "time",
        "grid_value_0",
        "time",
        "grid_age_0",
        "grid_value_1",
        "grid_age_1",
        "grid_age_0",
        "index",
        "len",
        "grids",
        "grid_ages_and_filenames",
        "grids",
        "grid_ages_and_filenames",
        "index",
        "grid_age",
        "age",
        "_sample_grid",
        "grid_age",
        "grid_filename",
        "grid_value",
        "grid_age",
        "grid_ages_and_filenames",
        "first_grid_age",
        "grid_age",
        "grid_filename",
        "rotation_model",
        "get_rotation",
        "grid_age",
        "reconstruction_plate_id",
        "rotation",
        "location",
        "reconstructed_location",
        "to_lat_lon",
        "format",
        "reconstructed_longitude",
        "reconstructed_latitude",
        "format",
        "grid_filename",
        "encode",
        "sys",
        "getfilesystemencoding",
        "call_system_command",
        "grdtrack_command_line",
        "stdin",
        "location_data",
        "return_stdout",
        "stdout_data",
        "split",
        "grid_list_filename",
        "grid_list_filename",
        "os",
        "path",
        "dirname",
        "grid_list_filename",
        "codecs",
        "open",
        "grid_list_filename",
        "grid_list_file",
        "line_number",
        "line",
        "grid_list_file",
        "line_number",
        "line",
        "strip",
        "startswith",
        "line",
        "split",
        "len",
        "row",
        "ValueError",
        "format",
        "grid_list_filename",
        "line_number",
        "os",
        "path",
        "join",
        "grids_relative_dir",
        "row",
        "row",
        "ValueError",
        "ValueError",
        "format",
        "grid_list_filename",
        "line_number",
        "grid_age",
        "detect_duplicate_ages",
        "ValueError",
        "format",
        "grid_list_filename",
        "grid_age",
        "detect_duplicate_ages",
        "add",
        "grid_age",
        "grid_ages_and_filenames",
        "append",
        "grid_age",
        "grid_filename",
        "grid_ages_and_filenames",
        "sort",
        "len",
        "grid_ages_and_filenames",
        "ValueError",
        "format",
        "grid_list_filename",
        "longitude",
        "latitude",
        "time",
        "get_grids_bounding_time",
        "time",
        "grids_bounding_time",
        "grid_age_0",
        "grid_filename_0",
        "grid_age_1",
        "grid_filename_1",
        "grids_bounding_time",
        "math",
        "fabs",
        "time",
        "grid_age_0",
        "_sample_grid",
        "longitude",
        "latitude",
        "grid_filename_0",
        "math",
        "fabs",
        "time",
        "grid_age_1",
        "_sample_grid",
        "longitude",
        "latitude",
        "grid_filename_1",
        "_sample_grid",
        "longitude",
        "latitude",
        "grid_filename_0",
        "_sample_grid",
        "longitude",
        "latitude",
        "grid_filename_1",
        "math",
        "isnan",
        "grid_value_0",
        "math",
        "isnan",
        "grid_value_1",
        "grid_age_1",
        "time",
        "grid_value_0",
        "time",
        "grid_age_0",
        "grid_value_1",
        "grid_age_1",
        "grid_age_0",
        "time",
        "grid_ages_and_filenames",
        "time",
        "first_grid_age",
        "grid_index",
        "len",
        "grid_ages_and_filenames",
        "grid_ages_and_filenames",
        "grid_index",
        "time",
        "grid_age_1",
        "grid_ages_and_filenames",
        "grid_index",
        "grid_age_0",
        "grid_filename_0",
        "grid_age_1",
        "grid_filename_1",
        "longitude",
        "latitude",
        "index",
        "len",
        "grid_ages_and_filenames",
        "grid_ages_and_filenames",
        "index",
        "_sample_grid",
        "longitude",
        "latitude",
        "grid_filename",
        "math",
        "isnan",
        "grid_value",
        "grid_value",
        "grid_age",
        "grid_ages_and_filenames",
        "first_grid_age"
    ],
    "literals": [
        "'nan'",
        "'nan'",
        "'nan'",
        "'nan'",
        "'{0} {1}\\n'",
        "\"gmt\"",
        "\"grdtrack\"",
        "\"-G{0}\"",
        "'r'",
        "'utf-8'",
        "'#'",
        "u'Grid list file \"{0}\" does not contain two columns at line {1}.'",
        "u'Grid list file \"{0}\" does not contain a valid age (2nd column) at line {1}.'",
        "u'There are two ages in grid list file \"{0}\" with the same value {1}.'",
        "u'The grid list file \"{0}\" contains fewer than two grids.'",
        "'nan'",
        "'nan'",
        "'nan'"
    ],
    "variables": [
        "location",
        "age",
        "grids",
        "rotation_model",
        "plate_partitioner",
        "partitioning_plate",
        "reconstruction_plate_id",
        "reconstruction_plate_id",
        "_",
        "age",
        "grids_bounding_time",
        "grid_value_0",
        "grid_value_1",
        "grid_age",
        "grid_filename",
        "grid_value",
        "first_grid_age",
        "_",
        "rotation",
        "reconstructed_location",
        "reconstructed_latitude",
        "reconstructed_longitude",
        "location_data",
        "grdtrack_command_line",
        "stdout_data",
        "grid_list_filename",
        "grid_ages_and_filenames",
        "grids_relative_dir",
        "detect_duplicate_ages",
        "line_number",
        "row",
        "grid_filename",
        "grid_age",
        "grids_bounding_time",
        "grid_value_0",
        "grid_value_1",
        "first_grid_age",
        "_",
        "grid_age_1",
        "grid_filename_1",
        "grid_age_0",
        "grid_filename_0",
        "grid_age",
        "grid_filename",
        "grid_value",
        "first_grid_age"
    ],
    "comments": [
        "",
        "Copyright (C) 2018 The University of Sydney, Australia",
        "",
        "This program is free software; you can redistribute it and/or modify it under",
        "the terms of the GNU General Public License, version 2, as published by",
        "the Free Software Foundation.",
        "",
        "This program is distributed in the hope that it will be useful, but WITHOUT",
        "ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or",
        "FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License",
        "for more details.",
        "",
        "You should have received a copy of the GNU General Public License along",
        "with this program; if not, write to Free Software Foundation, Inc.,",
        "51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.",
        "",
        "Find the plate ID of the static polygon containing the location (or zero if not in any plates).",
        "Use the age of the containing static polygon if location is None (ie, outside age grid).",
        "Search for the two grids bounding 'time'.",
        "Return NaN if 'time' outside age range of grids.",
        "If the age of the older grid is prior to appearance of location then return NaN.",
        "If 'time' matches either grid age then sample associated grid.",
        "Sample both grids (we'll interpolate between them).",
        "If either value is NaN then return NaN.",
        "This shouldn't happen since mantle-frame grids have global coverage.",
        "Linearly interpolate.",
        "We already know that no two ages are the same (from TimeDependentGrid constructor).",
        "So divide-by-zero is not possible.",
        "Search backward until we find a grid age younger than the age of the internal location.",
        "Unable to sample a non-NaN grid value, so just return NaN.",
        "Get rotation from present day to 'grid_age' using the reconstruction plate ID of the location.",
        "Reconstruct location to 'grid_age'.",
        "",
        "Sample mantle frame grid.",
        "",
        "The command-line strings to execute GMT 'grdtrack'.",
        "Call the system command.",
        "GMT grdtrack returns a single line containing \"longitude latitude sampled_value\".",
        "Note that if GMT returns \"NaN\" then we'll return float('nan').",
        "Grid filenames in the list file are relative to the directory of the list file.",
        "Read list of grids and associated ages.",
        "",
        "Assume file is encoded as UTF8 (which includes basic 7-bit ascii).",
        "Make line number 1-based instead of 0-based.",
        "Skip comments.",
        "Re-raise error with different error message.",
        "Make sure same age doesn't appear twice.",
        "Sort in order of increasing age.",
        "Need at least two grids.",
        "Search for ages neighbouring 'time'.",
        "Return NaN if 'time' outside age range of grids.",
        "If 'time' matches either grid age then sample associated grid.",
        "If either value is NaN then return NaN.",
        "Need to interpolate between grids but one grid's value is invalid.",
        "Linearly interpolate.",
        "We've already verified in constructor that no two ages are the same (so divide-by-zero is not possible).",
        "Search for ages neighbouring 'time'.",
        "Time is outside grid age range ('time' is less than first grid age).",
        "Time is outside grid age range ('time' is greater than last grid age).",
        "Search backward until we sample a non-NaN grid value at requested location.",
        "Unable to sample a non-NaN grid value, so just return NaN."
    ],
    "docstrings": [
        "\"\"\"Reconstruct point locations and sample the time-dependent dynamic topography *mantle* frame grid files.\n\n:class:`pybacktrack.DynamicTopography` can be used to query dynamic topography.\n\"\"\"",
        "\"\"\"\n    Class to reconstruct point location and sample the time-dependent dynamic topography *mantle* frame grid files.\n    \"\"\"",
        "\"\"\"\n        Load dynamic topography grid filenames and associated ages from grid list file 'grid_list_filename'.\n        \n        The present day location ('longitude' / 'latitude' in degrees) is also assigned a plate ID using the static polygons.\n        \"\"\"",
        "\"\"\"\n        Samples the time-dependent grid files at 'time' at the internal location.\n        \n        The location is first reconstructed to the two grid ages bounding 'time' before sampling\n        the two grids (and interpolating between them).\n        \n        Returns NaN if:\n        - 'time' is outside age range of grids, or\n        - the age of either (of two) interpolated grids is older than age of the internal location.\n        \"\"\"",
        "\"\"\"\n        Samples the oldest grid file that is younger than the age-of-appearance of the internal location.\n        \n        This function is useful when 'sample()' has already been called but returns NaN due to the specific time having\n        bounding grid times older than the ocean floor at that location.\n        \n        Returns 2-tuple (grid_value, grid_age).\n        \"\"\"",
        "\"\"\"\n    Class to sample the time-dependent grid files.\n    \"\"\"",
        "\"\"\"\n        Load grid filenames and associated ages from grid list file 'grid_list_filename'.\n        \n        Raises ValueError if:\n        - not all rows contain a grid filename followed by age, or\n        - there are two ages in list file with same age, or\n        - list file contains fewer than two grids.\n        \"\"\"",
        "\"\"\"\n        Samples the time-dependent grid files at 'time' and the 'longitude' / 'latitude' location (in degrees).\n        \n        Returns sampled float value (which can be NaN if location is in a masked region of grid).\n        \"\"\"",
        "\"\"\"\n        Returns the two adjacent grid files (and associated times) that surround 'time' as the 2-tuple\n        ((grid_age_0, grid_filename_0), (grid_age_1, grid_filename_1)).\n        \n        Returns None if 'time' is outside time range of grids.\n        \"\"\"",
        "\"\"\"\n        Samples the oldest grid file that gives an unmasked value (non-NaN) at the 'longitude' / 'latitude' location (in degrees).\n        \n        This function is useful when 'sample()' has already been called but returns NaN due to the specific time being\n        older than the ocean floor at that location (or the plate frame grids were reconstructed using static polygons\n        but without using age grid, resulting in static-polygon-sized chunks of the grid disappearing back through time rather\n        than the more gradual disappearance due to using age grid for appearance times in reconstruction as opposed to using\n        appearance times from static polygons).\n        \n        Returns 2-tuple (value, age) where sampled value can be still be NaN if present-day grid does not have full global coverage.\n        \"\"\""
    ],
    "functions": [
        "sample",
        "sample_oldest",
        "_sample_grid",
        "sample",
        "get_grids_bounding_time",
        "sample_oldest_unmasked"
    ],
    "classes": [
        "DynamicTopography",
        "TimeDependentGrid"
    ]
}