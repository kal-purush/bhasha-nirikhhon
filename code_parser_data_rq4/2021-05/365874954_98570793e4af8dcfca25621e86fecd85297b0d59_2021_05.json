{
    "identifiers": [
        "annotations",
        "typing",
        "Optional",
        "TYPE_CHECKING",
        "Tuple",
        "Type",
        "TypeVar",
        "enums",
        "try_enum",
        "ComponentType",
        "ButtonStyle",
        "partial_emoji",
        "PartialEmoji",
        "TYPE_CHECKING",
        "types",
        "components",
        "Component",
        "ComponentPayload",
        "ButtonComponent",
        "ButtonComponentPayload",
        "ComponentContainer",
        "ComponentContainerPayload",
        "TypeVar",
        "bound",
        "Tuple",
        "data",
        "ComponentPayload",
        "ComponentType",
        "try_enum",
        "ComponentType",
        "data",
        "Component",
        "_component_factory",
        "d",
        "d",
        "data",
        "get",
        "join",
        "key",
        "getattr",
        "key",
        "key",
        "__slots__",
        "__class__",
        "attrs",
        "ComponentContainerPayload",
        "child",
        "to_dict",
        "child",
        "children",
        "classmethod",
        "cls",
        "Type",
        "C",
        "kwargs",
        "C",
        "C",
        "cls",
        "__new__",
        "cls",
        "cls",
        "__slots__",
        "attr",
        "value",
        "kwargs",
        "items",
        "attr",
        "slots",
        "setattr",
        "attr",
        "value",
        "Component",
        "Tuple",
        "Component",
        "__slots__",
        "data",
        "ButtonComponentPayload",
        "ComponentType",
        "try_enum",
        "ComponentType",
        "data",
        "ButtonStyle",
        "try_enum",
        "ButtonStyle",
        "data",
        "Optional",
        "data",
        "get",
        "Optional",
        "data",
        "get",
        "data",
        "get",
        "data",
        "Optional",
        "PartialEmoji",
        "PartialEmoji",
        "from_dict",
        "data",
        "KeyError",
        "ButtonComponentPayload",
        "style",
        "label",
        "disabled",
        "custom_id",
        "custom_id",
        "url",
        "url",
        "payload",
        "data",
        "ComponentPayload",
        "Component",
        "data",
        "component_type",
        "Component",
        "data",
        "component_type",
        "Button",
        "data",
        "Component",
        "data"
    ],
    "literals": [
        "'Component'",
        "'Button'",
        "'C'",
        "'Component'",
        "'type'",
        "'children'",
        "'type'",
        "'components'",
        "' '",
        "f'{key}={getattr(self, key)!r}'",
        "f'<{self.__class__.__name__} type={self.type!r} {attrs}>'",
        "'type'",
        "'components'",
        "'style'",
        "'custom_id'",
        "'url'",
        "'disabled'",
        "'label'",
        "'emoji'",
        "'type'",
        "'style'",
        "'custom_id'",
        "'url'",
        "'disabled'",
        "'label'",
        "'emoji'",
        "'type'",
        "'style'",
        "'label'",
        "'disabled'",
        "'custom_id'",
        "'url'",
        "'type'"
    ],
    "variables": [
        "__all__",
        "C",
        "__slots__",
        "children",
        "attrs",
        "slots",
        "__slots__",
        "style",
        "custom_id",
        "url",
        "disabled",
        "label",
        "emoji",
        "emoji",
        "emoji",
        "payload",
        "payload",
        "payload",
        "component_type"
    ],
    "comments": [
        "type: ignore",
        "type: ignore",
        "type: ignore"
    ],
    "docstrings": [
        "\"\"\"\nThe MIT License (MIT)\n\nCopyright (c) 2015-present Rapptz\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\"\"\"",
        "\"\"\"Represents a Discord Bot UI Kit Component.\n\n    Currently, the only components supported by Discord are buttons and button groups.\n\n    .. versionadded:: 2.0\n\n    Attributes\n    ------------\n    type: :class:`ComponentType`\n        The type of component.\n    children: List[:class:`Component`]\n        The children components that this holds, if any.\n    \"\"\"",
        "\"\"\"Represents a button from the Discord Bot UI Kit.\n\n    This inherits from :class:`Component`.\n\n    .. versionadded:: 2.0\n\n    Attributes\n    -----------\n    style: :class:`ComponentButtonStyle`\n        The style of the button.\n    custom_id: Optional[:class:`str`]\n        The ID of the button that gets received during an interaction.\n        If this button is for a URL, it does not have a custom ID.\n    url: Optional[:class:`str`]\n        The URL this button sends you to.\n    disabled: :class:`bool`\n        Whether the button is disabled or not.\n    label: :class:`str`\n        The label of the button.\n    emoji: Optional[:class:`PartialEmoji`]\n        The emoji of the button, if available.\n    \"\"\""
    ],
    "functions": [
        "__repr__",
        "to_dict",
        "_raw_construct",
        "to_dict",
        "_component_factory"
    ],
    "classes": [
        "Component",
        "Button"
    ]
}