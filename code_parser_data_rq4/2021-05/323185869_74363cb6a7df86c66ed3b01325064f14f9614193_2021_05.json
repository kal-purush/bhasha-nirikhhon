{
    "identifiers": [
        "Parlot",
        "Compilation",
        "Linq",
        "Expressions",
        "Parlot",
        "Fluent",
        "T",
        "Parser",
        "T",
        "ICompilable",
        "Parser",
        "T",
        "Parser",
        "T",
        "parser",
        "_parser",
        "parser",
        "ParseContext",
        "context",
        "ParseResult",
        "T",
        "result",
        "context",
        "EnterParser",
        "context",
        "Scanner",
        "Cursor",
        "Position",
        "context",
        "SkipWhiteSpace",
        "_parser",
        "Parse",
        "context",
        "result",
        "context",
        "Scanner",
        "Cursor",
        "ResetPosition",
        "start",
        "CompilationContext",
        "context",
        "CompilationResult",
        "context",
        "DeclareSuccessVariable",
        "result",
        "context",
        "DeclareValueVariable",
        "result",
        "Expression",
        "Default",
        "T",
        "context",
        "DeclarePositionVariable",
        "result",
        "_parser",
        "Build",
        "context",
        "result",
        "Body",
        "Add",
        "Expression",
        "Block",
        "parserCompileResult",
        "Variables",
        "context",
        "SkipWhiteSpace",
        "Expression",
        "Block",
        "parserCompileResult",
        "Body",
        "Expression",
        "IfThenElse",
        "parserCompileResult",
        "Success",
        "Expression",
        "Block",
        "context",
        "DiscardResult",
        "Expression",
        "Empty",
        "Expression",
        "Assign",
        "value",
        "parserCompileResult",
        "Value",
        "Expression",
        "Assign",
        "success",
        "Expression",
        "Constant",
        "context",
        "ResetPosition",
        "start",
        "result"
    ],
    "literals": [],
    "variables": [
        "_parser",
        "start",
        "result",
        "success",
        "value",
        "start",
        "parserCompileResult"
    ],
    "comments": [
        "Use the scanner's logic to ignore whitespaces since it knows about multi-line grammars"
    ],
    "docstrings": [],
    "functions": [
        "SkipWhiteSpace",
        "Parse",
        "CompilationResult",
        "Compile"
    ],
    "classes": [
        "SkipWhiteSpace"
    ]
}