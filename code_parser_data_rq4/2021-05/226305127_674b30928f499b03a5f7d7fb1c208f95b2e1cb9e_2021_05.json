{
    "identifiers": [
        "com",
        "forgerock",
        "openbanking",
        "aspsp",
        "service",
        "headless",
        "accesstoken",
        "com",
        "forgerock",
        "openbanking",
        "am",
        "gateway",
        "AMGateway",
        "com",
        "forgerock",
        "openbanking",
        "aspsp",
        "api",
        "authorisation",
        "redirect",
        "AuthorisationApi",
        "com",
        "forgerock",
        "openbanking",
        "aspsp",
        "service",
        "PairClientIDAuthMethod",
        "com",
        "forgerock",
        "openbanking",
        "exceptions",
        "OBErrorException",
        "com",
        "forgerock",
        "openbanking",
        "exceptions",
        "OBErrorResponseException",
        "com",
        "forgerock",
        "openbanking",
        "model",
        "error",
        "ErrorCode",
        "com",
        "forgerock",
        "openbanking",
        "model",
        "error",
        "OBRIErrorResponseCategory",
        "com",
        "forgerock",
        "openbanking",
        "model",
        "oidc",
        "AccessTokenResponse",
        "org",
        "junit",
        "Before",
        "org",
        "junit",
        "Test",
        "org",
        "junit",
        "runner",
        "RunWith",
        "org",
        "mockito",
        "InjectMocks",
        "org",
        "mockito",
        "Mock",
        "org",
        "mockito",
        "junit",
        "MockitoJUnitRunner",
        "org",
        "springframework",
        "core",
        "ParameterizedTypeReference",
        "org",
        "springframework",
        "http",
        "HttpHeaders",
        "org",
        "springframework",
        "http",
        "HttpStatus",
        "org",
        "springframework",
        "http",
        "ResponseEntity",
        "org",
        "springframework",
        "util",
        "LinkedMultiValueMap",
        "org",
        "springframework",
        "util",
        "MultiValueMap",
        "javax",
        "servlet",
        "http",
        "HttpServletRequest",
        "java",
        "net",
        "URI",
        "java",
        "net",
        "URISyntaxException",
        "com",
        "forgerock",
        "openbanking",
        "constants",
        "OIDCConstants",
        "org",
        "assertj",
        "core",
        "api",
        "Assertions",
        "assertThat",
        "org",
        "assertj",
        "core",
        "api",
        "Assertions",
        "catchThrowableOfType",
        "org",
        "mockito",
        "BDDMockito",
        "given",
        "RunWith",
        "Mock",
        "authorisationApi",
        "Mock",
        "amGateway",
        "InjectMocks",
        "headlessAccessTokenService",
        "request",
        "typeReference",
        "Before",
        "typeReference",
        "Test",
        "clientIdAuthMethod",
        "getClientIDAuthMethod",
        "TokenEndpointAuthMethods",
        "CLIENT_SECRET_BASIC",
        "getParamsMap",
        "GrantType",
        "HEADLESS_AUTH",
        "httpHeaders",
        "httpHeaders",
        "setLocation",
        "accessTokenResponse",
        "responseEntity",
        "accessTokenResponse",
        "httpHeaders",
        "HttpStatus",
        "OK",
        "given",
        "authorisationApi",
        "getAuthorisation",
        "getFirst",
        "OIDCClaim",
        "RESPONSE_TYPE",
        "getFirst",
        "OIDCClaim",
        "CLIENT_ID",
        "getFirst",
        "OIDCClaim",
        "STATE",
        "getFirst",
        "OIDCClaim",
        "NONCE",
        "getFirst",
        "OIDCClaim",
        "SCOPE",
        "getFirst",
        "OIDCClaim",
        "REDIRECT_URI",
        "getFirst",
        "OIDCClaim",
        "REQUEST",
        "getFirst",
        "OIDCClaim",
        "USERNAME",
        "getFirst",
        "OIDCClaim",
        "PASSWORD",
        "request",
        "willReturn",
        "responseEntity",
        "requestBody",
        "given",
        "amGateway",
        "toAM",
        "request",
        "typeReference",
        "requestBody",
        "willReturn",
        "responseEntity",
        "response",
        "headlessAccessTokenService",
        "getAccessToken",
        "amGateway",
        "clientIdAuthMethod",
        "request",
        "assertThat",
        "response",
        "isNotNull",
        "assertThat",
        "response",
        "getStatusCode",
        "isEqualTo",
        "HttpStatus",
        "OK",
        "Test",
        "clientIdAuthMethod",
        "getClientIDAuthMethod",
        "TokenEndpointAuthMethods",
        "CLIENT_SECRET_BASIC",
        "getParamsMap",
        "GrantType",
        "HEADLESS_AUTH",
        "httpHeaders",
        "accessTokenResponse",
        "responseEntity",
        "accessTokenResponse",
        "httpHeaders",
        "HttpStatus",
        "OK",
        "given",
        "authorisationApi",
        "getAuthorisation",
        "getFirst",
        "OIDCClaim",
        "RESPONSE_TYPE",
        "getFirst",
        "OIDCClaim",
        "CLIENT_ID",
        "getFirst",
        "OIDCClaim",
        "STATE",
        "getFirst",
        "OIDCClaim",
        "NONCE",
        "getFirst",
        "OIDCClaim",
        "SCOPE",
        "getFirst",
        "OIDCClaim",
        "REDIRECT_URI",
        "getFirst",
        "OIDCClaim",
        "REQUEST",
        "getFirst",
        "OIDCClaim",
        "USERNAME",
        "getFirst",
        "OIDCClaim",
        "PASSWORD",
        "request",
        "willReturn",
        "responseEntity",
        "exception",
        "catchThrowableOfType",
        "headlessAccessTokenService",
        "getAccessToken",
        "amGateway",
        "clientIdAuthMethod",
        "request",
        "assertThat",
        "exception",
        "isNotNull",
        "assertThat",
        "exception",
        "getCategory",
        "isEqualTo",
        "OBRIErrorResponseCategory",
        "HEADLESS_AUTH",
        "Test",
        "clientIdAuthMethod",
        "getClientIDAuthMethod",
        "TokenEndpointAuthMethods",
        "CLIENT_SECRET_BASIC",
        "getParamsMap",
        "GrantType",
        "HEADLESS_AUTH",
        "httpHeaders",
        "accessTokenResponse",
        "responseEntity",
        "httpHeaders",
        "HttpStatus",
        "BAD_REQUEST",
        "given",
        "authorisationApi",
        "getAuthorisation",
        "getFirst",
        "OIDCClaim",
        "RESPONSE_TYPE",
        "getFirst",
        "OIDCClaim",
        "CLIENT_ID",
        "getFirst",
        "OIDCClaim",
        "STATE",
        "getFirst",
        "OIDCClaim",
        "NONCE",
        "getFirst",
        "OIDCClaim",
        "SCOPE",
        "getFirst",
        "OIDCClaim",
        "REDIRECT_URI",
        "getFirst",
        "OIDCClaim",
        "REQUEST",
        "getFirst",
        "OIDCClaim",
        "USERNAME",
        "getFirst",
        "OIDCClaim",
        "PASSWORD",
        "request",
        "willReturn",
        "responseEntity",
        "exception",
        "catchThrowableOfType",
        "headlessAccessTokenService",
        "getAccessToken",
        "amGateway",
        "clientIdAuthMethod",
        "request",
        "assertThat",
        "exception",
        "isNotNull",
        "assertThat",
        "exception",
        "getCategory",
        "isEqualTo",
        "OBRIErrorResponseCategory",
        "HEADLESS_AUTH",
        "assertThat",
        "exception",
        "getErrors",
        "get",
        "getErrorCode",
        "isEqualTo",
        "ErrorCode",
        "OBRI_HEADLESS_AS_ERROR",
        "toString",
        "clientIdAuthMethod",
        "pairClientIDAuthMethod",
        "pairClientIDAuthMethod",
        "setAuthMethod",
        "clientIdAuthMethod",
        "pairClientIDAuthMethod",
        "grantType",
        "add",
        "OIDCClaim",
        "RESPONSE_TYPE",
        "ResponseType",
        "CODE",
        "toString",
        "add",
        "OIDCClaim",
        "CLIENT_ID",
        "add",
        "OIDCClaim",
        "STATE",
        "add",
        "OIDCClaim",
        "NONCE",
        "add",
        "OIDCClaim",
        "SCOPE",
        "add",
        "OIDCClaim",
        "REDIRECT_URI",
        "add",
        "OIDCClaim",
        "REQUEST",
        "add",
        "OIDCClaim",
        "USERNAME",
        "add",
        "OIDCClaim",
        "PASSWORD",
        "add",
        "OIDCClaim",
        "GRANT_TYPE",
        "grantType"
    ],
    "literals": [
        "\"http://acme.com/#code=access_code\"",
        "\"\"",
        "\"grant_type=authorization_code&redirect_uri=https%3A%2F%2Facme.co.uk&code=access_code\"",
        "\"\"",
        "\"{\\\"error\\\":\\\"broken stuff\\\"}\"",
        "\"\"",
        "\"test_client_id\"",
        "\"test_state\"",
        "\"test_nonce\"",
        "\"test_scope\"",
        "\"https://acme.co.uk\"",
        "\"test_request\"",
        "\"test_username\"",
        "\"test_password\""
    ],
    "variables": [
        "authorisationApi",
        "amGateway",
        "headlessAccessTokenService",
        "request",
        "typeReference"
    ],
    "comments": [
        "Given",
        "When",
        "Then",
        "Given",
        "httpHeaders.setLocation(new URI(\"http://acme.com/#code=access_code\"));",
        "When",
        "Then",
        "Given",
        "When",
        "Then",
        "ToDo: Extract to test helper class as also used in @AccessTokenApiControllerTest"
    ],
    "docstrings": [
        "* Copyright 2019 ForgeRock AS.\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License."
    ],
    "functions": [
        "setUp",
        "success_getAccessToken",
        "failWhenNoLocationHeader_getAccessToken",
        "failWhenNoAuthorisation_getAccessToken",
        "PairClientIDAuthMethod",
        "getClientIDAuthMethod",
        "getParamsMap"
    ],
    "classes": [
        "HeadLessAccessTokenServiceTest"
    ]
}