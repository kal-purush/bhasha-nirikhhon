{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "com",
        "vmware",
        "vapi",
        "std_client",
        "DynamicID",
        "ImportError",
        "pyVmomi",
        "vim",
        "ImportError",
        "ansible",
        "errors",
        "AnsibleError",
        "ansible",
        "module_utils",
        "_text",
        "to_text",
        "to_native",
        "ansible",
        "module_utils",
        "common",
        "dict_transformations",
        "camel_dict_to_snake_dict",
        "ansible",
        "module_utils",
        "six",
        "text_type",
        "ansible_collections",
        "community",
        "vmware",
        "plugins",
        "module_utils",
        "inventory",
        "BaseVMwareInventory",
        "to_nested_dict",
        "to_flatten_dict",
        "ansible",
        "plugins",
        "inventory",
        "BaseInventoryPlugin",
        "Constructable",
        "Cacheable",
        "ansible",
        "parsing",
        "yaml",
        "objects",
        "AnsibleVaultEncryptedUnicode",
        "BaseInventoryPlugin",
        "Constructable",
        "Cacheable",
        "path",
        "InventoryModule",
        "verify_file",
        "path",
        "path",
        "endswith",
        "valid",
        "inventory",
        "loader",
        "path",
        "cache",
        "InventoryModule",
        "parse",
        "inventory",
        "loader",
        "path",
        "cache",
        "cache",
        "get_cache_key",
        "path",
        "_read_config_data",
        "path",
        "_consume_options",
        "config_data",
        "get_option",
        "isinstance",
        "password",
        "AnsibleVaultEncryptedUnicode",
        "password",
        "data",
        "BaseVMwareInventory",
        "hostname",
        "get_option",
        "username",
        "get_option",
        "password",
        "password",
        "port",
        "get_option",
        "with_tags",
        "get_option",
        "validate_certs",
        "get_option",
        "display",
        "display",
        "pyv",
        "do_login",
        "cache",
        "get_option",
        "cache",
        "_cache",
        "cache_key",
        "KeyError",
        "cache",
        "update_cache",
        "_populate_from_cache",
        "cacheable_results",
        "_populate_from_source",
        "update_cache",
        "cache",
        "get_option",
        "_cache",
        "cacheable_results",
        "cache_data",
        "host",
        "host_properties",
        "cache_data",
        "items",
        "_populate_host_properties",
        "host_properties",
        "host",
        "get_option",
        "get_option",
        "isinstance",
        "host_properties",
        "host_properties",
        "len",
        "host_properties",
        "host_properties",
        "host_properties",
        "remove",
        "host_properties",
        "host_properties",
        "append",
        "x",
        "x",
        "host_properties",
        "x",
        "pyv",
        "get_managed_objects_properties",
        "vim_type",
        "vim",
        "HostSystem",
        "properties",
        "query_props",
        "resources",
        "get_option",
        "strict",
        "strict",
        "pyv",
        "with_tags",
        "pyv",
        "rest_content",
        "tagging",
        "Tag",
        "pyv",
        "rest_content",
        "tagging",
        "Category",
        "tag_svc",
        "tag",
        "tags",
        "tag_svc",
        "get",
        "tag",
        "tag_obj",
        "id",
        "tag_obj",
        "name",
        "cat_svc",
        "get",
        "tag_obj",
        "category_id",
        "name",
        "get_option",
        "host_obj",
        "objects",
        "host_obj_property",
        "host_obj",
        "propSet",
        "host_obj_property",
        "name",
        "host_obj_property",
        "val",
        "properties",
        "get",
        "properties",
        "connectionState",
        "host_properties",
        "pyv",
        "content",
        "customFieldsManager",
        "pyv",
        "content",
        "customFieldsManager",
        "field",
        "cust_value",
        "host_obj",
        "obj",
        "customValue",
        "y",
        "name",
        "y",
        "field_mgr",
        "y",
        "key",
        "cust_value",
        "key",
        "cust_value",
        "value",
        "pyv",
        "with_tags",
        "tags_info",
        "host_obj",
        "obj",
        "_GetMoId",
        "DynamicID",
        "id",
        "host_mo_id",
        "pyv",
        "rest_content",
        "tagging",
        "TagAssociation",
        "tag_id",
        "tag_association",
        "list_attached_tags",
        "host_dynamic_id",
        "tag_id",
        "tags_info",
        "properties",
        "append",
        "tags_info",
        "tag_id",
        "properties",
        "append",
        "tags_info",
        "tag_id",
        "tags_info",
        "tag_id",
        "properties",
        "properties",
        "tags_info",
        "tag_id",
        "properties",
        "tags_info",
        "tag_id",
        "append",
        "tags_info",
        "tag_id",
        "get_option",
        "with_path",
        "host_obj",
        "obj",
        "parent",
        "parent",
        "path",
        "append",
        "parent",
        "name",
        "parent",
        "parent",
        "path",
        "reverse",
        "join",
        "path",
        "to_nested_dict",
        "properties",
        "_get_hostname",
        "host_properties",
        "hostnames",
        "strict",
        "strict",
        "get_option",
        "host",
        "hostvars",
        "_can_add_host",
        "host_filters",
        "host_properties",
        "strict",
        "strict",
        "host_properties",
        "_populate_host_properties",
        "host_properties",
        "host",
        "inventory",
        "set_variable",
        "host",
        "get_management_ip",
        "host_obj",
        "obj",
        "hostvars",
        "properties",
        "hostnames",
        "strict",
        "preference",
        "hostnames",
        "_compose",
        "preference",
        "properties",
        "e",
        "strict",
        "AnsibleError",
        "preference",
        "to_native",
        "e",
        "errors",
        "append",
        "preference",
        "e",
        "hostname",
        "to_text",
        "hostname",
        "AnsibleError",
        "join",
        "pref",
        "err",
        "pref",
        "err",
        "errors",
        "host_filters",
        "host_properties",
        "strict",
        "host_filter",
        "host_filters",
        "_compose",
        "host_filter",
        "host_properties",
        "e",
        "strict",
        "AnsibleError",
        "host_filter",
        "to_native",
        "e",
        "can_add_host",
        "staticmethod",
        "host",
        "host",
        "configManager",
        "virtualNicManager",
        "vnic_manager",
        "QueryNetConfig",
        "nic",
        "net_config",
        "candidateVnic",
        "nic",
        "key",
        "net_config",
        "selectedVnic",
        "nic",
        "spec",
        "ip",
        "ipAddress",
        "host_properties",
        "host",
        "inventory",
        "add_host",
        "host",
        "get_option",
        "get_option",
        "_set_composite_vars",
        "compose",
        "host_properties",
        "host",
        "strict",
        "strict",
        "_add_host_to_composed_groups",
        "get_option",
        "host_properties",
        "host",
        "strict",
        "strict",
        "_add_host_to_keyed_groups",
        "get_option",
        "host_properties",
        "host",
        "strict",
        "strict",
        "get_option",
        "with_path",
        "host_properties",
        "split",
        "parents",
        "isinstance",
        "with_path",
        "text_type",
        "with_path",
        "parents",
        "_sanitize_group_name",
        "join",
        "parents",
        "inventory",
        "add_group",
        "c_name",
        "inventory",
        "add_host",
        "host",
        "c_group",
        "parents",
        "pop",
        "len",
        "parents",
        "_sanitize_group_name",
        "join",
        "parents",
        "inventory",
        "add_group",
        "p_name",
        "inventory",
        "add_child",
        "p_group",
        "c_group",
        "p_group",
        "parents",
        "pop",
        "get_option",
        "can_sanitize",
        "camel_dict_to_snake_dict",
        "host_properties",
        "get_option",
        "with_nested_properties",
        "k",
        "v",
        "host_properties",
        "items",
        "_sanitize_group_name",
        "k",
        "can_sanitize",
        "k",
        "inventory",
        "set_variable",
        "host",
        "k",
        "v",
        "to_flatten_dict",
        "host_properties",
        "k",
        "v",
        "host_properties",
        "items",
        "_sanitize_group_name",
        "k",
        "can_sanitize",
        "k",
        "inventory",
        "set_variable",
        "host",
        "k",
        "v"
    ],
    "literals": [
        "r\"\"\"\n    name: vmware_host_inventory\n    plugin_type: inventory\n    short_description: VMware ESXi hostsystem inventory source\n    author:\n      - Abhijeet Kasurde (@Akasurde)\n    description:\n        - Get VMware ESXi hostsystem as inventory hosts from VMware environment.\n        - Uses any file which ends with vmware.yml, vmware.yaml, vmware_host_inventory.yml, or vmware_host_inventory.yaml as a YAML configuration file.\n    extends_documentation_fragment:\n      - inventory_cache\n      - constructed\n    requirements:\n      - \"Python >= 2.7\"\n      - \"PyVmomi\"\n      - \"requests >= 2.3\"\n      - \"vSphere Automation SDK - For tag feature\"\n    version_added: \"1.11.0\"\n    options:\n        hostname:\n            description: Name of vCenter or ESXi server.\n            required: True\n            env:\n              - name: VMWARE_HOST\n              - name: VMWARE_SERVER\n        username:\n            description: Name of vSphere user.\n            required: True\n            env:\n              - name: VMWARE_USER\n              - name: VMWARE_USERNAME\n        password:\n            description: Password of vSphere user.\n            required: True\n            env:\n              - name: VMWARE_PASSWORD\n        port:\n            description: Port number used to connect to vCenter or ESXi Server.\n            default: 443\n            type: int\n            env:\n              - name: VMWARE_PORT\n        validate_certs:\n            description:\n            - Allows connection when SSL certificates are not valid.\n            - Set to C(false) when certificates are not trusted.\n            default: True\n            type: bool\n            env:\n              - name: VMWARE_VALIDATE_CERTS\n        with_tags:\n            description:\n            - Include tags and associated hosts.\n            - Requires 'vSphere Automation SDK' library to be installed on the given controller machine.\n            - Please refer following URLs for installation steps\n            - U(https://code.vmware.com/web/sdk/7.0/vsphere-automation-python)\n            default: False\n            type: bool\n        hostnames:\n            description:\n            - A list of templates in order of precedence to compose inventory_hostname.\n            - Ignores template if resulted in an empty string or None value.\n            - You can use property specified in I(properties) as variables in the template.\n            type: list\n            default: ['name']\n        properties:\n            description:\n            - Specify the list of VMware schema properties associated with the ESXi hostsystem.\n            - These properties will be populated in hostvars of the given ESXi hostsystem.\n            - Each value in the list can be a path to a specific property in hostsystem object or a path to a collection of hostsystem objects.\n            - C(summary.runtime.powerState) are required if C(keyed_groups) is set to default.\n            - Please make sure that all the properties that are used in other parameters are included in this options.\n            - In addition to ESXi hostsystem's properties, the following are special values\n            - Use C(customValue) to populate ESXi hostsystem's custom attributes. C(customValue) is only supported by vCenter and not by ESXi.\n            - Use C(all) to populate all the properties of the virtual machine.\n              The value C(all) is time consuming operation, do not use unless required absolutely.\n            type: list\n            default: [ 'name', 'customValue', 'summary.runtime.powerState' ]\n        with_nested_properties:\n            description:\n            - This option transform flatten properties name to nested dictionary.\n            type: bool\n            default: True\n        keyed_groups:\n            description:\n            - Add hosts to group based on the values of a variable.\n            type: list\n            default: [\n                {key: 'summary.runtime.powerState', separator: ''},\n            ]\n        filters:\n            description:\n            - This option allows client-side filtering hosts with jinja templating.\n            - When server-side filtering is introduced, it should be preferred over this.\n            type: list\n            elements: str\n            default: []\n        resources:\n            description:\n            - A list of resources to limit search scope.\n            - Each resource item is represented by exactly one C('vim_type_snake_case):C(list of resource names) pair and optional nested I(resources)\n            - Key name is based on snake case of a vim type name; e.g C(host_system) correspond to C(vim.HostSystem)\n            required: False\n            type: list\n            default: []\n        with_path:\n            description:\n            - Include ESXi hostsystem's path.\n            - Set this option to a string value to replace root name from I('Datacenters').\n            default: False\n            type: bool\n        with_sanitized_property_name:\n            description:\n                - This option allows property name sanitization to create safe property names for use in Ansible.\n                - Also, transforms property name to snake case.\n            type: bool\n            default: False\n\"\"\"",
        "r\"\"\"\n# Sample configuration file for VMware Host dynamic inventory\n    plugin: community.vmware.vmware_host_inventory\n    strict: False\n    hostname: 10.65.223.31\n    username: administrator@vsphere.local\n    password: Esxi@123$%\n    validate_certs: False\n    with_tags: True\n\"\"\"",
        "\"community.vmware.vmware_host_inventory\"",
        "\"vmware.yaml\"",
        "\"vmware.yml\"",
        "\"vmware_host_inventory.yaml\"",
        "\"vmware_host_inventory.yml\"",
        "\"password\"",
        "\"hostname\"",
        "\"username\"",
        "\"port\"",
        "\"with_tags\"",
        "\"validate_certs\"",
        "\"cache\"",
        "\"cache\"",
        "\"strict\"",
        "\"properties\"",
        "\"name\"",
        "\"all\"",
        "\"all\"",
        "\"runtime.connectionState\"",
        "\"runtime.connectionState\"",
        "\"customValue\"",
        "\"resources\"",
        "\"hostnames\"",
        "\"runtime.connectionState\"",
        "\"runtime\"",
        "\"disconnected\"",
        "\"notResponding\"",
        "\"customValue\"",
        "\"tags\"",
        "\"categories\"",
        "\"tag_category\"",
        "\"HostSystem\"",
        "\"tags\"",
        "\"categories\"",
        "\"tag_category\"",
        "\"tag_category\"",
        "\"tag_category\"",
        "\"with_path\"",
        "\"path\"",
        "\"/\"",
        "\"filters\"",
        "\"ansible_host\"",
        "\"Could not compose %s as hostnames - %s\"",
        "\"Could not template any hostname for host, errors for each preference: %s\"",
        "\", \"",
        "\"%s: %s\"",
        "\"Could not evaluate %s as host filters - %s\"",
        "\"management\"",
        "\"\"",
        "\"\"",
        "\"strict\"",
        "\"compose\"",
        "\"groups\"",
        "\"keyed_groups\"",
        "\"with_path\"",
        "\"path\"",
        "\"/\"",
        "\"/\"",
        "\"/\"",
        "\"with_sanitized_property_name\"",
        "\"with_nested_properties\""
    ],
    "variables": [
        "__metaclass__",
        "DOCUMENTATION",
        "EXAMPLES",
        "NAME",
        "valid",
        "valid",
        "cache_key",
        "config_data",
        "password",
        "password",
        "pyv",
        "cache",
        "update_cache",
        "cacheable_results",
        "update_cache",
        "cacheable_results",
        "cache_key",
        "hostvars",
        "strict",
        "host_properties",
        "host_properties",
        "host_properties",
        "query_props",
        "query_props",
        "objects",
        "tags_info",
        "tag_svc",
        "cat_svc",
        "tags",
        "tag_obj",
        "tags_info",
        "hostnames",
        "properties",
        "properties",
        "field_mgr",
        "field_mgr",
        "properties",
        "properties",
        "properties",
        "properties",
        "host_mo_id",
        "host_dynamic_id",
        "tag_association",
        "with_path",
        "path",
        "parent",
        "parent",
        "properties",
        "host_properties",
        "host",
        "host_filters",
        "hostvars",
        "host",
        "hostname",
        "errors",
        "hostname",
        "can_add_host",
        "can_add_host",
        "vnic_manager",
        "net_config",
        "strict",
        "compose",
        "with_path",
        "parents",
        "parents",
        "c_name",
        "c_group",
        "p_name",
        "p_group",
        "c_group",
        "can_sanitize",
        "host_properties",
        "with_nested_properties",
        "k",
        "host_properties",
        "k"
    ],
    "comments": [
        "",
        "Copyright: (c) 2018, Ansible Project",
        "Copyright: (c) 2020, dacrystal",
        "Copyright: (c) 2021, Abhijeet Kasurde <akasurde@redhat.com>",
        "",
        "GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)",
        "Already handled in module_utils/inventory.py",
        "Already handled in module_utils/inventory.py",
        "set _options from config data",
        "Custom values",
        "not an ESXi",
        "Tags",
        "Add virtual machine to appropriate tag group",
        "pylint: disable=protected-access",
        "Ghost Tags",
        "Add tags related to VM",
        "Add categories related to VM",
        "Add tag and categories related to VM",
        "Path",
        "pylint: disable=broad-except",
        "pylint: disable=broad-except",
        "filter nics that are selected",
        "add hostvar 'management_ip' to each host",
        "Load VM properties in host_vars",
        "Use constructed if applicable",
        "Composed variables",
        "Complex groups based on jinja2 conditionals, hosts that meet the conditional are added to group",
        "Create groups based on variable values and add the corresponding hosts to it",
        "Sanitize host properties: to snake case",
        "to snake case",
        "For backward compatability"
    ],
    "docstrings": [
        "\"\"\"\n        Verify plugin configuration file and mark this plugin active\n        Args:\n            path: Path of configuration YAML file\n        Returns: True if everything is correct, else False\n        \"\"\"",
        "\"\"\"\n        Parses the inventory file\n        \"\"\"",
        "\"\"\"\n        Populate cache using source data\n\n        \"\"\"",
        "\"\"\"\n        Populate inventory data from direct source\n\n        \"\"\""
    ],
    "functions": [
        "verify_file",
        "parse",
        "_populate_from_cache",
        "_populate_from_source",
        "_get_hostname",
        "_can_add_host",
        "get_management_ip",
        "_populate_host_properties"
    ],
    "classes": [
        "InventoryModule"
    ]
}