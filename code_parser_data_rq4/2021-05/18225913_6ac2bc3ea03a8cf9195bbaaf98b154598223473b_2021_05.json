{
    "identifiers": [
        "picard",
        "arrays",
        "illumina",
        "htsjdk",
        "samtools",
        "liftover",
        "LiftOver",
        "htsjdk",
        "samtools",
        "reference",
        "ReferenceSequenceFile",
        "htsjdk",
        "samtools",
        "util",
        "Interval",
        "htsjdk",
        "samtools",
        "util",
        "Log",
        "htsjdk",
        "samtools",
        "util",
        "SequenceUtil",
        "htsjdk",
        "tribble",
        "annotation",
        "Strand",
        "joptsimple",
        "Strings",
        "org",
        "apache",
        "commons",
        "lang3",
        "StringUtils",
        "org",
        "apache",
        "commons",
        "lang3",
        "ImmutablePair",
        "picard",
        "PicardException",
        "java",
        "io",
        "File",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "TreeSet",
        "java",
        "util",
        "regex",
        "Matcher",
        "java",
        "util",
        "regex",
        "Pattern",
        "targetBuild",
        "referenceFilesMap",
        "chainFilesMap",
        "supportedBuilds",
        "unsupportedBuilds",
        "refStrandDefinedInManifest",
        "log",
        "Log",
        "getInstance",
        "BUILD_37",
        "IUPAC_NUCLEOTIDE_CODES",
        "ACGT_CODES",
        "SRC_SEQ_REGEX",
        "IUPAC_NUCLEOTIDE_CODES",
        "ACGT_CODES",
        "ACGT_CODES",
        "IUPAC_NUCLEOTIDE_CODES",
        "pattern",
        "Pattern",
        "compile",
        "SRC_SEQ_REGEX",
        "ACGT_REGEX",
        "ACGT_CODES",
        "ACGT_PATTERN",
        "Pattern",
        "compile",
        "ACGT_REGEX",
        "FIVE_PRIME_SEQUENCE",
        "PRE_INDEL_SEQUENCE",
        "INDEL_SEQUENCE",
        "THREE_PRIME_SEQUENCE",
        "targetBuild",
        "referenceFilesMap",
        "chainFilesMap",
        "targetBuild",
        "targetBuild",
        "referenceFilesMap",
        "referenceFilesMap",
        "chainFilesMap",
        "chainFilesMap",
        "supportedBuilds",
        "unsupportedBuilds",
        "supportedBuilds",
        "add",
        "targetBuild",
        "supportedBuilds",
        "addAll",
        "chainFilesMap",
        "keySet",
        "illuminaManifestRecord",
        "newRecord",
        "illuminaManifestRecord",
        "Build37ExtendedIlluminaManifestRecord",
        "Flag",
        "PASS",
        "illuminaManifestRecord",
        "getChr",
        "equals",
        "IlluminaManifestRecord",
        "ILLUMINA_FLAGGED_BAD_CHR",
        "illuminaManifestRecord",
        "getPosition",
        "newRecord",
        "flag",
        "Build37ExtendedIlluminaManifestRecord",
        "Flag",
        "ILLUMINA_FLAGGED",
        "newRecord",
        "supportedBuilds",
        "contains",
        "illuminaManifestRecord",
        "getMajorGenomeBuild",
        "unsupportedBuilds",
        "add",
        "illuminaManifestRecord",
        "getMajorGenomeBuild",
        "newRecord",
        "flag",
        "Build37ExtendedIlluminaManifestRecord",
        "Flag",
        "UNSUPPORTED_GENOME_BUILD",
        "newRecord",
        "illuminaManifestRecord",
        "getMajorGenomeBuild",
        "equals",
        "targetBuild",
        "newRecord",
        "b37Chr",
        "illuminaManifestRecord",
        "getChr",
        "newRecord",
        "b37Pos",
        "illuminaManifestRecord",
        "getPosition",
        "liftOverToTargetBuild",
        "newRecord",
        "illuminaManifestRecord",
        "newRecord",
        "isFail",
        "newRecord",
        "refFile",
        "referenceFilesMap",
        "get",
        "targetBuild",
        "setReferenceStrand",
        "newRecord",
        "refFile",
        "newRecord",
        "isFail",
        "newRecord",
        "isSnp",
        "processSnp",
        "newRecord",
        "refFile",
        "processIndel",
        "newRecord",
        "refFile",
        "newRecord",
        "build37ExtendedIlluminaManifestRecord",
        "refFile",
        "build37ExtendedIlluminaManifestRecord",
        "snpAlleleA",
        "build37ExtendedIlluminaManifestRecord",
        "getSnp",
        "substring",
        "build37ExtendedIlluminaManifestRecord",
        "snpAlleleB",
        "build37ExtendedIlluminaManifestRecord",
        "getSnp",
        "substring",
        "build37ExtendedIlluminaManifestRecord",
        "referenceStrand",
        "Strand",
        "NEGATIVE",
        "build37ExtendedIlluminaManifestRecord",
        "snpAlleleA",
        "SequenceUtil",
        "reverseComplement",
        "build37ExtendedIlluminaManifestRecord",
        "snpAlleleA",
        "build37ExtendedIlluminaManifestRecord",
        "snpAlleleB",
        "SequenceUtil",
        "reverseComplement",
        "build37ExtendedIlluminaManifestRecord",
        "snpAlleleB",
        "build37ExtendedIlluminaManifestRecord",
        "isAmbiguous",
        "build37ExtendedIlluminaManifestRecord",
        "getAlleleBProbeSeq",
        "probeAAllele",
        "build37ExtendedIlluminaManifestRecord",
        "getAlleleAProbeSeq",
        "substring",
        "build37ExtendedIlluminaManifestRecord",
        "getAlleleAProbeSeq",
        "length",
        "validateThatSequenceOnlyContainsACGTCharacters",
        "build37ExtendedIlluminaManifestRecord",
        "probeAAllele",
        "probeBAllele",
        "build37ExtendedIlluminaManifestRecord",
        "getAlleleBProbeSeq",
        "substring",
        "build37ExtendedIlluminaManifestRecord",
        "getAlleleBProbeSeq",
        "length",
        "validateThatSequenceOnlyContainsACGTCharacters",
        "build37ExtendedIlluminaManifestRecord",
        "probeBAllele",
        "probeAAllele",
        "equals",
        "build37ExtendedIlluminaManifestRecord",
        "snpAlleleA",
        "probeBAllele",
        "equals",
        "build37ExtendedIlluminaManifestRecord",
        "snpAlleleB",
        "build37ExtendedIlluminaManifestRecord",
        "referenceStrand",
        "Strand",
        "POSITIVE",
        "build37ExtendedIlluminaManifestRecord",
        "snpAlleleA",
        "probeAAllele",
        "build37ExtendedIlluminaManifestRecord",
        "snpAlleleB",
        "probeBAllele",
        "build37ExtendedIlluminaManifestRecord",
        "flag",
        "Build37ExtendedIlluminaManifestRecord",
        "Flag",
        "MISSING_ALLELE_B_PROBESEQ",
        "log",
        "warn",
        "build37ExtendedIlluminaManifestRecord",
        "log",
        "warn",
        "build37ExtendedIlluminaManifestRecord",
        "snpRefAllele",
        "getSequenceAt",
        "refFile",
        "build37ExtendedIlluminaManifestRecord",
        "b37Chr",
        "build37ExtendedIlluminaManifestRecord",
        "b37Pos",
        "build37ExtendedIlluminaManifestRecord",
        "b37Pos",
        "build37ExtendedIlluminaManifestRecord",
        "refFile",
        "build37ExtendedIlluminaManifestRecord",
        "referenceStrand",
        "build37ExtendedIlluminaManifestRecord",
        "referenceStrand",
        "build37ExtendedIlluminaManifestRecord",
        "getRefStrand",
        "build37ExtendedIlluminaManifestRecord",
        "referenceStrand",
        "Strand",
        "NONE",
        "refStrandDefinedInManifest",
        "build37ExtendedIlluminaManifestRecord",
        "isSnp",
        "probeSeq",
        "build37ExtendedIlluminaManifestRecord",
        "getAlleleAProbeSeq",
        "build37ExtendedIlluminaManifestRecord",
        "isAmbiguous",
        "probeSeq",
        "probeSeq",
        "substring",
        "probeSeq",
        "length",
        "validateThatSequenceOnlyContainsACGTCharacters",
        "build37ExtendedIlluminaManifestRecord",
        "probeSeq",
        "reference",
        "getSequenceAt",
        "refFile",
        "build37ExtendedIlluminaManifestRecord",
        "b37Chr",
        "build37ExtendedIlluminaManifestRecord",
        "b37Pos",
        "probeSeq",
        "length",
        "build37ExtendedIlluminaManifestRecord",
        "b37Pos",
        "reverseReference",
        "SequenceUtil",
        "reverseComplement",
        "getSequenceAt",
        "refFile",
        "build37ExtendedIlluminaManifestRecord",
        "b37Chr",
        "build37ExtendedIlluminaManifestRecord",
        "b37Pos",
        "build37ExtendedIlluminaManifestRecord",
        "b37Pos",
        "probeSeq",
        "length",
        "reference",
        "equals",
        "probeSeq",
        "build37ExtendedIlluminaManifestRecord",
        "referenceStrand",
        "Strand",
        "POSITIVE",
        "reverseReference",
        "equals",
        "probeSeq",
        "build37ExtendedIlluminaManifestRecord",
        "referenceStrand",
        "Strand",
        "NEGATIVE",
        "build37ExtendedIlluminaManifestRecord",
        "flag",
        "Build37ExtendedIlluminaManifestRecord",
        "Flag",
        "PROBE_SEQUENCE_MISMATCH",
        "log",
        "warn",
        "build37ExtendedIlluminaManifestRecord",
        "log",
        "warn",
        "log",
        "debug",
        "build37ExtendedIlluminaManifestRecord",
        "getAlleleAProbeSeq",
        "log",
        "debug",
        "reference",
        "log",
        "debug",
        "reverseReference",
        "build37ExtendedIlluminaManifestRecord",
        "getIlmnStrand",
        "IlluminaManifestRecord",
        "IlluminaStrand",
        "PLUS",
        "build37ExtendedIlluminaManifestRecord",
        "referenceStrand",
        "Strand",
        "POSITIVE",
        "build37ExtendedIlluminaManifestRecord",
        "getIlmnStrand",
        "IlluminaManifestRecord",
        "IlluminaStrand",
        "MINUS",
        "build37ExtendedIlluminaManifestRecord",
        "referenceStrand",
        "Strand",
        "NEGATIVE",
        "build37ExtendedIlluminaManifestRecord",
        "getIlmnStrand",
        "extendedIlluminaManifestRecord",
        "refFile",
        "extendedIlluminaManifestRecord",
        "isSnp",
        "matcher",
        "parseSourceSeq",
        "extendedIlluminaManifestRecord",
        "getSourceSeq",
        "matcher",
        "group",
        "PRE_INDEL_SEQUENCE",
        "equals",
        "extendedIlluminaManifestRecord",
        "fivePrimeSeq",
        "matcher",
        "group",
        "FIVE_PRIME_SEQUENCE",
        "toUpperCase",
        "indelSeq",
        "matcher",
        "group",
        "INDEL_SEQUENCE",
        "toUpperCase",
        "threePrimeSeq",
        "matcher",
        "group",
        "THREE_PRIME_SEQUENCE",
        "toUpperCase",
        "validateThatSequenceOnlyContainsACGTCharacters",
        "extendedIlluminaManifestRecord",
        "indelSeq",
        "isSourceOnDesignStrand",
        "extendedIlluminaManifestRecord",
        "getSourceStrand",
        "extendedIlluminaManifestRecord",
        "getIlmnStrand",
        "isSourceOnDesignStrand",
        "extendedIlluminaManifestRecord",
        "referenceStrand",
        "Strand",
        "POSITIVE",
        "temp",
        "threePrimeSeq",
        "threePrimeSeq",
        "SequenceUtil",
        "reverseComplement",
        "fivePrimeSeq",
        "indelSeq",
        "SequenceUtil",
        "reverseComplement",
        "indelSeq",
        "fivePrimeSeq",
        "SequenceUtil",
        "reverseComplement",
        "temp",
        "illuminaIsIndel",
        "calculateIsInsertionOrDeletion",
        "extendedIlluminaManifestRecord",
        "refFile",
        "fivePrimeSeq",
        "indelSeq",
        "threePrimeSeq",
        "isInsertion",
        "illuminaIsIndel",
        "left",
        "isDeletion",
        "illuminaIsIndel",
        "right",
        "isInsertion",
        "isDeletion",
        "extendedIlluminaManifestRecord",
        "flag",
        "Build37ExtendedIlluminaManifestRecord",
        "Flag",
        "INDEL_NOT_FOUND",
        "log",
        "warn",
        "extendedIlluminaManifestRecord",
        "log",
        "warn",
        "isInsertion",
        "isDeletion",
        "extendedIlluminaManifestRecord",
        "flag",
        "Build37ExtendedIlluminaManifestRecord",
        "Flag",
        "INDEL_CONFLICT",
        "log",
        "warn",
        "extendedIlluminaManifestRecord",
        "log",
        "warn",
        "isDeletion",
        "extendedIlluminaManifestRecord",
        "b37Pos",
        "refAllele",
        "getSequenceAt",
        "refFile",
        "extendedIlluminaManifestRecord",
        "getB37Chr",
        "extendedIlluminaManifestRecord",
        "getB37Pos",
        "extendedIlluminaManifestRecord",
        "getB37Pos",
        "isDeletion",
        "extendedIlluminaManifestRecord",
        "snpRefAllele",
        "refAllele",
        "indelSeq",
        "extendedIlluminaManifestRecord",
        "snpRefAllele",
        "refAllele",
        "extendedIlluminaManifestRecord",
        "getSnp",
        "equals",
        "extendedIlluminaManifestRecord",
        "snpAlleleA",
        "refAllele",
        "indelSeq",
        "extendedIlluminaManifestRecord",
        "snpAlleleB",
        "refAllele",
        "extendedIlluminaManifestRecord",
        "snpAlleleA",
        "refAllele",
        "extendedIlluminaManifestRecord",
        "snpAlleleB",
        "refAllele",
        "indelSeq",
        "extendedIlluminaManifestRecord",
        "refFile",
        "fivePrimeSeq",
        "indelSeq",
        "threePrimeSeq",
        "leftShiftedSourceSeq",
        "illuminaLeftShift",
        "fivePrimeSeq",
        "indelSeq",
        "threePrimeSeq",
        "leftShiftedFivePrimeSeq",
        "leftShiftedSourceSeq",
        "left",
        "leftShiftedThreePrimeSeq",
        "leftShiftedSourceSeq",
        "right",
        "startIndex",
        "extendedIlluminaManifestRecord",
        "b37Pos",
        "indelSequenceFromReference",
        "getSequenceAt",
        "refFile",
        "extendedIlluminaManifestRecord",
        "b37Chr",
        "startIndex",
        "startIndex",
        "indelSeq",
        "length",
        "indelSequenceMatch",
        "indelSeq",
        "equals",
        "indelSequenceFromReference",
        "genomicDeletionFivePrime",
        "getSequenceAt",
        "refFile",
        "extendedIlluminaManifestRecord",
        "b37Chr",
        "startIndex",
        "leftShiftedFivePrimeSeq",
        "length",
        "startIndex",
        "genomicDeletionThreePrime",
        "getSequenceAt",
        "refFile",
        "extendedIlluminaManifestRecord",
        "b37Chr",
        "startIndex",
        "indelSeq",
        "length",
        "startIndex",
        "indelSeq",
        "length",
        "leftShiftedThreePrimeSeq",
        "length",
        "deletionContextInfo",
        "calculateIsDeletion",
        "leftShiftedSourceSeq",
        "left",
        "leftShiftedSourceSeq",
        "right",
        "indelSequenceMatch",
        "genomicDeletionFivePrime",
        "indelSeq",
        "genomicDeletionThreePrime",
        "genomicInsertionFivePrime",
        "getSequenceAt",
        "refFile",
        "extendedIlluminaManifestRecord",
        "b37Chr",
        "startIndex",
        "leftShiftedFivePrimeSeq",
        "length",
        "startIndex",
        "genomicInsertionThreePrime",
        "getSequenceAt",
        "refFile",
        "extendedIlluminaManifestRecord",
        "b37Chr",
        "startIndex",
        "startIndex",
        "leftShiftedThreePrimeSeq",
        "length",
        "insertionContextInfo",
        "calculateIsInsertion",
        "leftShiftedSourceSeq",
        "left",
        "leftShiftedSourceSeq",
        "right",
        "genomicInsertionFivePrime",
        "indelSeq",
        "genomicInsertionThreePrime",
        "illuminaIsDeletion",
        "indelSequenceMatch",
        "deletionContextInfo",
        "left",
        "insertionContextInfo",
        "left",
        "deletionContextInfo",
        "right",
        "illuminaIsInsertion",
        "insertionContextInfo",
        "left",
        "deletionContextInfo",
        "left",
        "insertionContextInfo",
        "right",
        "illuminaIsInsertion",
        "illuminaIsDeletion",
        "fivePrimeSeq",
        "threePrimeSeq",
        "indelSequenceMatch",
        "genomicDeletionFivePrime",
        "indelSeq",
        "genomicDeletionThreePrime",
        "leftShiftedGenomicDeletionSeqs",
        "illuminaLeftShift",
        "genomicDeletionFivePrime",
        "indelSeq",
        "genomicDeletionThreePrime",
        "deletionContextSuffixMatchLength",
        "commonSuffixLength",
        "leftShiftedGenomicDeletionSeqs",
        "left",
        "fivePrimeSeq",
        "deletionContextPrefixMatchLength",
        "commonPrefixLength",
        "leftShiftedGenomicDeletionSeqs",
        "right",
        "threePrimeSeq",
        "minDeletionContextMaxLength",
        "min",
        "deletionContextPrefixMatchLength",
        "deletionContextSuffixMatchLength",
        "maxDeletionContext",
        "min",
        "genomicDeletionFivePrime",
        "length",
        "fivePrimeSeq",
        "length",
        "min",
        "genomicDeletionThreePrime",
        "length",
        "threePrimeSeq",
        "length",
        "indelSeq",
        "length",
        "deletionContextScore",
        "indelSequenceMatch",
        "deletionContextScore",
        "deletionContextPrefixMatchLength",
        "deletionContextSuffixMatchLength",
        "indelSeq",
        "length",
        "maxDeletionContext",
        "deletionContextScore",
        "minDeletionContextMaxLength",
        "fivePrimeSeq",
        "threePrimeSeq",
        "genomicInsertionFivePrime",
        "indelSeq",
        "genomicInsertionThreePrime",
        "leftShiftedGenomicInsertionSeqs",
        "illuminaLeftShift",
        "genomicInsertionFivePrime",
        "indelSeq",
        "genomicInsertionThreePrime",
        "insertionContextSuffixMatchLength",
        "commonSuffixLength",
        "leftShiftedGenomicInsertionSeqs",
        "left",
        "fivePrimeSeq",
        "insertionContextPrefixMatchLength",
        "commonPrefixLength",
        "leftShiftedGenomicInsertionSeqs",
        "right",
        "threePrimeSeq",
        "minInsertionContextMaxLength",
        "min",
        "insertionContextPrefixMatchLength",
        "insertionContextSuffixMatchLength",
        "maxInsertionContext",
        "min",
        "genomicInsertionFivePrime",
        "length",
        "fivePrimeSeq",
        "length",
        "min",
        "genomicInsertionThreePrime",
        "length",
        "threePrimeSeq",
        "length",
        "insertionContextScore",
        "insertionContextSuffixMatchLength",
        "insertionContextPrefixMatchLength",
        "maxInsertionContext",
        "insertionContextScore",
        "minInsertionContextMaxLength",
        "fivePrimeSeq",
        "indelSeq",
        "threePrimeSeq",
        "modifiedFivePrimeSeq",
        "fivePrimeSeq",
        "modifiedThreePrimeSeq",
        "threePrimeSeq",
        "indelLength",
        "indelSeq",
        "length",
        "modifiedFivePrimeSeq",
        "endsWith",
        "indelSeq",
        "modifiedFivePrimeSeq",
        "modifiedFivePrimeSeq",
        "substring",
        "modifiedFivePrimeSeq",
        "length",
        "indelLength",
        "modifiedThreePrimeSeq",
        "insert",
        "indelSeq",
        "Strings",
        "repeat",
        "modifiedFivePrimeSeq",
        "charAt",
        "modifiedFivePrimeSeq",
        "length",
        "indelLength",
        "equals",
        "indelSeq",
        "modifiedThreePrimeSeq",
        "insert",
        "modifiedFivePrimeSeq",
        "substring",
        "modifiedFivePrimeSeq",
        "length",
        "modifiedFivePrimeSeq",
        "modifiedFivePrimeSeq",
        "substring",
        "modifiedFivePrimeSeq",
        "length",
        "modifiedFivePrimeSeq",
        "modifiedThreePrimeSeq",
        "toString",
        "seq1",
        "seq2",
        "StringUtils",
        "isEmpty",
        "seq1",
        "StringUtils",
        "isEmpty",
        "seq2",
        "commonLength",
        "commonLength",
        "seq1",
        "length",
        "commonLength",
        "seq2",
        "length",
        "seq1",
        "charAt",
        "commonLength",
        "seq2",
        "charAt",
        "commonLength",
        "commonLength",
        "commonLength",
        "seq1",
        "seq2",
        "StringUtils",
        "isEmpty",
        "seq1",
        "StringUtils",
        "isEmpty",
        "seq2",
        "index1",
        "seq1",
        "length",
        "index2",
        "seq2",
        "length",
        "commonLength",
        "index1",
        "index2",
        "seq1",
        "charAt",
        "index1",
        "seq2",
        "charAt",
        "index2",
        "commonLength",
        "commonLength",
        "sourceSeq",
        "matcher",
        "pattern",
        "matcher",
        "sourceSeq",
        "matcher",
        "find",
        "matcher",
        "sourceSeq",
        "sequenceDescription",
        "sequence",
        "ACGT_PATTERN",
        "matcher",
        "sequence",
        "find",
        "sequenceDescription",
        "build37ExtendedIlluminaManifestRecord",
        "illuminaManifestRecord",
        "supportedBuildNumber",
        "illuminaManifestRecord",
        "getMajorGenomeBuild",
        "chainFileToTargetBuild",
        "chainFilesMap",
        "get",
        "supportedBuildNumber",
        "liftOver",
        "chainFileToTargetBuild",
        "interval",
        "illuminaManifestRecord",
        "getChr",
        "illuminaManifestRecord",
        "getPosition",
        "illuminaManifestRecord",
        "getPosition",
        "targetBuildInterval",
        "liftOver",
        "liftOver",
        "interval",
        "targetBuildInterval",
        "build37ExtendedIlluminaManifestRecord",
        "b37Chr",
        "targetBuildInterval",
        "getContig",
        "build37ExtendedIlluminaManifestRecord",
        "b37Pos",
        "targetBuildInterval",
        "getStart",
        "originalRefAllele",
        "getSequenceAt",
        "referenceFilesMap",
        "get",
        "supportedBuildNumber",
        "illuminaManifestRecord",
        "getChr",
        "illuminaManifestRecord",
        "getPosition",
        "illuminaManifestRecord",
        "getPosition",
        "newRefAllele",
        "getSequenceAt",
        "referenceFilesMap",
        "get",
        "targetBuild",
        "build37ExtendedIlluminaManifestRecord",
        "b37Chr",
        "build37ExtendedIlluminaManifestRecord",
        "b37Pos",
        "build37ExtendedIlluminaManifestRecord",
        "b37Pos",
        "originalRefAllele",
        "equals",
        "newRefAllele",
        "log",
        "debug",
        "build37ExtendedIlluminaManifestRecord",
        "log",
        "debug",
        "supportedBuildNumber",
        "illuminaManifestRecord",
        "getChr",
        "illuminaManifestRecord",
        "getPosition",
        "targetBuild",
        "build37ExtendedIlluminaManifestRecord",
        "b37Chr",
        "build37ExtendedIlluminaManifestRecord",
        "b37Pos",
        "build37ExtendedIlluminaManifestRecord",
        "flag",
        "Build37ExtendedIlluminaManifestRecord",
        "Flag",
        "LIFTOVER_FAILED",
        "log",
        "error",
        "build37ExtendedIlluminaManifestRecord",
        "log",
        "error",
        "build37ExtendedIlluminaManifestRecord",
        "flag",
        "Build37ExtendedIlluminaManifestRecord",
        "Flag",
        "LIFTOVER_FAILED",
        "log",
        "error",
        "build37ExtendedIlluminaManifestRecord",
        "unsupportedBuilds",
        "refStrandDefinedInManifest",
        "refFile",
        "chr",
        "startPos",
        "endPos",
        "contigLength",
        "refFile",
        "getSequenceDictionary",
        "getSequence",
        "chr",
        "getSequenceLength",
        "usedEndPos",
        "min",
        "endPos",
        "contigLength",
        "refFile",
        "getSubsequenceAt",
        "chr",
        "startPos",
        "usedEndPos",
        "getBases",
        "toUpperCase"
    ],
    "literals": [
        "\"37\"",
        "\"ACGTRYSWKMBDHVNacgtryswkmbdhvn\"",
        "\"ACGTacgt\"",
        "\"([\"",
        "\"]*)\\\\[([\"",
        "\"-])\\\\/([\"",
        "\"]*)\\\\]([\"",
        "\"]*)\"",
        "\"^[\"",
        "\"]+$\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"AlleleAProbeSeq for record: \"",
        "\"AlleleBProbeSeq for record: \"",
        "\"Error in processSnp.  Record:\"",
        "\"  Ambiguous probe without alleleBProbeSeq\"",
        "\"AlleleAProbeSeq for record: \"",
        "\"Error in getStrand.  Record:\"",
        "\"  Couldn't find alleleAProbeSeq in reference\"",
        "\"  AlleleAProbeSeq: \"",
        "\"  Reference:       \"",
        "\"  Reverse Ref:     \"",
        "\"Unexpected value for Illumina Strand: \"",
        "\"This shouldn't happen\"",
        "\"-\"",
        "\"Unexpected allele '-' Record: \"",
        "\"Indel sequence for record: \"",
        "\"Error in processIndel.  Record: \"",
        "\"  Couldn't find source sequence with or without variant in reference\"",
        "\"Error in processIndel.  Record: \"",
        "\"  Conflict.  Both source sequence with and without variation found in reference\"",
        "\"[I/D]\"",
        "\"Could not find the pattern V[W/X]Y in the SourceSeq: \"",
        "\" contains non-ACGT character(s)\"",
        "\"Lifted over record \"",
        "\" From build \"",
        "\" chr=\"",
        "\", position=\"",
        "\" To build \"",
        "\" chr=\"",
        "\", position=\"",
        "\"Liftover failed for record: \"",
        "\" Sequence at lifted over position does not match that at original position\"",
        "\"Liftover failed for record: \""
    ],
    "variables": [
        "targetBuild",
        "referenceFilesMap",
        "chainFilesMap",
        "supportedBuilds",
        "unsupportedBuilds"
    ],
    "comments": [
        "Builds found in records that we don't support (and so are failed)",
        "These are the IUPAC nucleotide codes as described here: https://www.bioinformatics.org/sms/iupac.html",
        "Symbolics for the regex groups...",
        "Look for entries which Illumina has marked as invalid",
        "no liftover needed",
        "This manifest contains no Allele B Probe Sequence.",
        "If here, the referenceStrand is not defined in the manifest.",
        "Ambiguous SNPs contain the probed base, so truncate",
        "Some Illumina manifests do not have refStrand defined.  We will use the illumina strand instead.",
        "Validate the source sequence",
        "In indels it's always of the form: [-/GCA]",
        "A deletion.  Position in VCF is before the deletion",
        "Do Illumina's strange left shift http://github.com/Illumina/GTCtoVCF/blob/develop/BPMRecord.py",
        "CONTAINS the indel",
        "Calculate the deletionContextScore:",
        "Calculate the insertionContextScore:",
        "Calculate the deletionContextScore:",
        "Calculate the insertionContextScore:",
        "May have not fully shifted homopolymer",
        "Validate that the reference allele at the lifted over coordinates matches that of the original."
    ],
    "docstrings": [
        "* Uses source sequence to determine snpAlleleA, snpAlleleB, and Allele.\n     * <p>",
        "* This method sets the reference strand\n     *\n     * If the refStrand is provided in the Illumina manifest(s) we will use that.\n     * Otherwise, we will attempt to calculate the reference strand.\n     *\n     * @param refFile reference to use for finding the probe sequence",
        "* Calculates the deletion context score and minimum deletion context, used in determining whether an indel, as encoded\n     * in the Illumina manifest represents a genomic deletion\n     * (that is, the reference contains the indel, and this assay is testing for a deletion)\n     *\n     * @param fivePrimeSeq The Five Prime component of the Source Sequence, as pulled from the Illumina Manifest (and left aligned)\n     * @param threePrimeSeq The Three Prime component of the Source Sequence, as pulled from the Illumina Manifest (and left aligned)\n     * @param indelSequenceMatch A boolean indicating whether the indel sequence (as pulled from the Illumina Manifest) is found in the reference sequence\n     * @param genomicDeletionFivePrime The Five Prime component of the source sequence as pulled from reference WITH the indel\n     * @param genomicDeletionThreePrime The Three Prime component of the source sequence as pulled from reference WITH the indel",
        "*\n     * Calculates the insertion context score and minimum insertion context, used in determining whether an indel, as encoded\n     * in the Illumina manifest represents a genomic insertion\n     * (that is, the reference DOES NOT contain the indel, and this assay is testing for an insertion)\n     *\n     * @param fivePrimeSeq The Five Prime component of the Source Sequence, as pulled from the Illumina Manifest (and left aligned)\n     * @param threePrimeSeq The Three Prime component of the Source Sequence, as pulled from the Illumina Manifest (and left aligned)\n     * @param genomicInsertionFivePrime The Five Prime component of the source sequence as pulled from reference WITH the indel\n     * @param indelSeq The sequence of the indel\n     * @param genomicInsertionThreePrime The Three Prime component of the source sequence as pulled from reference WITH the indel",
        "* Adjust 5' and 3' context of indel such that indel is fully shifted to 5'\n     *\n     * See: http://github.com/Illumina/GTCtoVCF/blob/develop/BPMRecord.py\n     *\n     * @param fivePrimeSeq 5' sequence\n     * @param indelSeq indel sequence\n     * @param threePrimeSeq 3' sequence\n\n     * @return ImmutablePair containing the 5' and 3' sequences, left shifted\n     *",
        "* Find the number of common characters in the prefixes of two strings\n     *\n     * @param seq1 sequence\n     * @param seq2 sequence\n\n     * @return The number of matching characters",
        "* Find the number of common characters in the suffixes of two strings\n     *\n     * @param seq1 sequence\n     * @param seq2 sequence\n\n     * @return The number of matching characters",
        "* Use regex to capture the insertion sequence and the sequence after the indel.\n     * <p>\n     * The source sequence is of the from V[W/X]Y, where V,W,X,Y are sequences.\n     * <p>\n     * - A SNP example looks like:    AGGGAGTC[A/G]GGTTGCGA\n     * V     W X    Y\n     * <p>\n     * - A InDel example looks like:  AGCCTCGA[-/CGAA]TCACC\n     * V     W   X   Y",
        "* Determines the chromosome and position of the record on the target build",
        "* Find the sequence in a reference sequence file.\n     * for the contig in the range [start,stop]\n     * @param refFile ReferenceSequenceFile to use\n     * @param chr Contig whose subsequence to retrieve.\n     * @param startPos inclusive, 1-based start of region.\n     * @param endPos inclusive, 1-based stop of region.\n     * @return The partial reference sequence associated with this range."
    ],
    "functions": [
        "Build37ExtendedIlluminaManifestRecordCreator",
        "Build37ExtendedIlluminaManifestRecord",
        "createRecord",
        "processSnp",
        "setReferenceStrand",
        "processIndel",
        "calculateIsInsertionOrDeletion",
        "calculateIsDeletion",
        "calculateIsInsertion",
        "illuminaLeftShift",
        "commonPrefixLength",
        "commonSuffixLength",
        "Matcher",
        "parseSourceSeq",
        "validateThatSequenceOnlyContainsACGTCharacters",
        "liftOverToTargetBuild",
        "getUnsupportedBuilds",
        "isRefStrandDefinedInManifest",
        "getSequenceAt"
    ],
    "classes": [
        "Build37ExtendedIlluminaManifestRecordCreator"
    ]
}