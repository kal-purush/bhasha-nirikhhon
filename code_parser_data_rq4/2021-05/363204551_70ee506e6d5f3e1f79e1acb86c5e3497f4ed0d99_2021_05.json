{
    "identifiers": [
        "sys",
        "random",
        "argparse",
        "numpy",
        "np",
        "math",
        "PIL",
        "Image",
        "image",
        "np",
        "array",
        "image",
        "im",
        "shape",
        "np",
        "average",
        "im",
        "reshape",
        "w",
        "h",
        "fileName",
        "cols",
        "scale",
        "moreLevels",
        "gscale1",
        "gscale2",
        "Image",
        "open",
        "fileName",
        "convert",
        "image",
        "size",
        "image",
        "size",
        "W",
        "H",
        "W",
        "cols",
        "w",
        "scale",
        "H",
        "h",
        "cols",
        "rows",
        "w",
        "h",
        "cols",
        "W",
        "rows",
        "H",
        "exit",
        "j",
        "rows",
        "j",
        "h",
        "j",
        "h",
        "j",
        "rows",
        "H",
        "aimg",
        "append",
        "i",
        "cols",
        "i",
        "w",
        "i",
        "w",
        "i",
        "cols",
        "W",
        "image",
        "crop",
        "x1",
        "y1",
        "x2",
        "y2",
        "getAverageL",
        "img",
        "gscale1",
        "avg",
        "aimg",
        "j",
        "gsval",
        "aimg",
        "argparse",
        "ArgumentParser",
        "description",
        "descStr",
        "parser",
        "add_argument",
        "dest",
        "required",
        "parser",
        "add_argument",
        "dest",
        "required",
        "parser",
        "add_argument",
        "dest",
        "required",
        "parser",
        "add_argument",
        "dest",
        "required",
        "parser",
        "add_argument",
        "dest",
        "action",
        "parser",
        "parse_args",
        "args",
        "imgFile",
        "args",
        "outFile",
        "args",
        "outFile",
        "args",
        "scale",
        "args",
        "scale",
        "args",
        "cols",
        "args",
        "cols",
        "covertImageToAscii",
        "imgFile",
        "cols",
        "scale",
        "args",
        "moreLevels",
        "open",
        "outFile",
        "row",
        "aimg",
        "f",
        "write",
        "row",
        "f",
        "close",
        "outFile",
        "main"
    ],
    "literals": [
        "\"$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1{}[]?-_+~<>i!lI;:,\\\"^`'. \"",
        "'L'",
        "\"input image dims: %d x %d\"",
        "\"cols: %d, rows: %d\"",
        "\"tile dims: %d x %d\"",
        "\"Image too small for specified cols!\"",
        "\"\"",
        "\"This program converts an image into ASCII art.\"",
        "'--file'",
        "'imgFile'",
        "'--scale'",
        "'scale'",
        "'--out'",
        "'outFile'",
        "'--cols'",
        "'cols'",
        "'--morelevels'",
        "'moreLevels'",
        "'store_true'",
        "'out.txt'",
        "'generating ASCII art...'",
        "'w'",
        "'\\n'",
        "\"ASCII art written to %s\"",
        "'__main__'"
    ],
    "variables": [
        "gscale1",
        "im",
        "w",
        "h",
        "image",
        "W",
        "H",
        "w",
        "h",
        "rows",
        "aimg",
        "y1",
        "y2",
        "y2",
        "x1",
        "x2",
        "x2",
        "img",
        "avg",
        "gsval",
        "descStr",
        "parser",
        "args",
        "imgFile",
        "outFile",
        "outFile",
        "scale",
        "scale",
        "cols",
        "cols",
        "aimg",
        "f"
    ],
    "comments": [
        "get image as numpy array",
        "get shape",
        "get average",
        "declare globals",
        "open image and convert to grayscale",
        "store dimensions",
        "compute width of tile",
        "compute tile height based on aspect ratio and scale",
        "compute number of rows",
        "check if image size is too small",
        "ascii image is a list of character strings",
        "generate list of dimensions",
        "correct last tile",
        "append an empty string",
        "crop image to tile",
        "correct last tile",
        "crop image to extract tile",
        "get average luminance",
        "append ascii char to string",
        "return txt image",
        "main() function",
        "create parser",
        "add expected arguments",
        "parse args",
        "set output file",
        "set scale default as 0.43 which suits",
        "a Courier font",
        "set cols",
        "convert image to ascii txt",
        "open file",
        "write to file",
        "cleanup",
        "import sys, random, argparse",
        "import numpy as np",
        "import math",
        "from PIL import Image",
        "#set gray scale of 70",
        "grayScale = \"\"\"$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1{}[]?-_+~i!lI;:,\\\"^`\". \"\"\"",
        "argImage = sys.argv[1]",
        "def getAverageGrayScale(image):",
        "array = np.array(image)",
        "w = array.shape[0]",
        "h = array.shape[1]",
        "return np.average(array.flatten())",
        "def imageToAscii(imageName, cols):",
        "#loading image to PIL format",
        "image = Image.open(imageName).convert('LA')",
        "#creating vars from image",
        "W, H = image.size",
        "#using scale that suite most fonts",
        "scale = 0.43",
        "w = W/cols",
        "h = w/scale",
        "rows = int(H/h)",
        "#creating a empty char array",
        "imageArray = []",
        "for i in range(rows):",
        "y1 = int(i*h)",
        "y2 = int((i+1)*h)",
        "if i == rows-1:",
        "y2 = h",
        "imageArray.append(\"\")",
        "for j in range(cols):",
        "x1 = int(j*w)",
        "x2 = int((j+w)*w)",
        "if j == cols-1:",
        "x2 = W",
        "img = image.crop((x1, y1, x2, y2))",
        "avg = int(getAverageGrayScale(image))",
        "grayScaleValue = grayScale[int((avg*69)/255)]",
        "imageArray[i] += grayScaleValue",
        "print(arrayImage)",
        "return imageArray",
        "#printing the image:",
        "#get the file",
        "string = imageToAscii(\"test2.jpg\", 80)",
        "print(string)"
    ],
    "docstrings": [
        "\"\"\"\n    Given PIL Image, return average value of grayscale value\n    \"\"\"",
        "\"\"\"\n    Given Image and dims (rows, cols) returns an m*n list of Images \n    \"\"\""
    ],
    "functions": [
        "getAverageL",
        "covertImageToAscii",
        "main"
    ],
    "classes": []
}