{
    "identifiers": [
        "com",
        "valdir",
        "os",
        "security",
        "java",
        "io",
        "javax",
        "servlet",
        "FilterChain",
        "javax",
        "servlet",
        "ServletException",
        "javax",
        "servlet",
        "http",
        "HttpServletRequest",
        "javax",
        "servlet",
        "http",
        "HttpServletResponse",
        "org",
        "springframework",
        "security",
        "authentication",
        "AuthenticationManager",
        "org",
        "springframework",
        "security",
        "authentication",
        "UsernamePasswordAuthenticationToken",
        "org",
        "springframework",
        "security",
        "core",
        "context",
        "SecurityContextHolder",
        "org",
        "springframework",
        "security",
        "core",
        "userdetails",
        "UserDetails",
        "org",
        "springframework",
        "security",
        "core",
        "userdetails",
        "UserDetailsService",
        "org",
        "springframework",
        "security",
        "web",
        "authentication",
        "www",
        "BasicAuthenticationFilter",
        "jwtUtil",
        "userDetailsService",
        "authenticationManager",
        "jwtUtil",
        "userDetailsService",
        "authenticationManager",
        "jwtUtil",
        "jwtUtil",
        "userDetailsService",
        "userDetailsService",
        "Override",
        "request",
        "response",
        "chain",
        "header",
        "request",
        "getHeader",
        "header",
        "header",
        "startsWith",
        "auth",
        "getAuthentication",
        "header",
        "substring",
        "auth",
        "SecurityContextHolder",
        "getContext",
        "setAuthentication",
        "auth",
        "chain",
        "doFilter",
        "request",
        "response",
        "token",
        "jwtUtil",
        "tokenValido",
        "token",
        "username",
        "jwtUtil",
        "getUsername",
        "token",
        "user",
        "userDetailsService",
        "loadUserByUsername",
        "username",
        "user",
        "user",
        "getAuthorities"
    ],
    "literals": [
        "\"Authorization\"",
        "\"Bearer \""
    ],
    "variables": [
        "jwtUtil",
        "userDetailsService"
    ],
    "comments": [],
    "docstrings": [
        "* Need from UserDetailsService to find a user by CPF",
        "* First I need take Authorization value that has on header from request",
        "* Method to free access to user that was trying access the endpoint"
    ],
    "functions": [
        "JWTAuthorizationFilter",
        "doFilterInternal",
        "UsernamePasswordAuthenticationToken",
        "getAuthentication"
    ],
    "classes": [
        "JWTAuthorizationFilter"
    ]
}