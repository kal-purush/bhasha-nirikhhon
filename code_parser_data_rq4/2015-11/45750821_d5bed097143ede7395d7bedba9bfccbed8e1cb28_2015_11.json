{
    "identifiers": [
        "d",
        "FFT",
        "Spectrogram",
        "Play",
        "SoundLoader",
        "AudioContext",
        "SoundLoader",
        "Play",
        "Spectrogram",
        "audioBuffer",
        "audioBuffer",
        "audioBuffer",
        "audioBuffer",
        "audioBuffer",
        "imd",
        "imd",
        "imd",
        "imd",
        "ctx",
        "imd",
        "time",
        "time",
        "x",
        "x",
        "d",
        "d",
        "d",
        "d",
        "d",
        "AudioSelection",
        "d",
        "d",
        "e",
        "e",
        "d",
        "d",
        "audioSelection",
        "audioSelection",
        "d",
        "player",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "node",
        "node",
        "parents",
        "node",
        "parents",
        "e",
        "e",
        "e",
        "left",
        "left",
        "e",
        "e",
        "Player"
    ],
    "literals": [
        "\"use strict\"",
        "'./d'",
        "'./sound-utils/FFT'",
        "'./sound-utils/Spectrogram'",
        "'./sound-utils/Play'",
        "'./sound-utils/SoundLoader'",
        "'width'",
        "''",
        "'height'",
        "''",
        "width: ${imd.width / 2 }px; height: ${imd.height / 2 }px",
        "'2d'",
        "'11.mp3'",
        "'translateX('",
        "'px)'",
        "'div'",
        "'selection'",
        "'div'",
        "'currentTime'",
        "'canvas'",
        "'div'",
        "'spectrogram'",
        "'div'",
        "'overlay'",
        "'input'",
        "'file'",
        "'div'",
        "'toolbar'",
        "'button'",
        "'Play'",
        "'button'",
        "'Stop'",
        "'mousedown'",
        "'mousemove'",
        "'mouseup'",
        "'px'",
        "'px'"
    ],
    "variables": [
        "imd",
        "ctx",
        "audioSelection",
        "node",
        "parents",
        "left"
    ],
    "comments": [
        "function getLine(fft:Uint8Array[]) {\n    var line = new Uint32Array(fft.length);\n    for (var i = 0; i < fft.length; i++) {\n        var sum = 0;\n        for (var j = 0; j < fft[i].length / 2; j++) {\n            sum += fft[i][j];\n        }\n        line[i] = sum;\n    }\n    return line;\n}\n\nfunction calc(fft:Uint8Array[]) {\n    var line = getLine(fft);\n    console.time('count');\n    var peaksData:number[] = [];\n    var width = fft.length;\n\n    for (var step = 100; step < 600; step++) {\n        var sum = 0;\n        var count = 0;\n        for (var i = 0; i < width - step; i += step) {\n            for (var p = i + step; p < width - step; p += step) {\n                for (var j = 0; j < step; j++) {\n                    var diff = line[i + j] - line[p + j];\n                    sum += diff > 0 ? diff : -diff;\n                    count++;\n                }\n            }\n        }\n        peaksData[step] = sum / count | 0;\n    }\n\n    var peaks:{diff:number; step: number}[] = [];\n    for (var i = 0; i < peaksData.length; i++) {\n        var obj = peaksData[i] || Infinity;\n        peaks.push({diff: obj, step: i});\n    }\n    peaks.sort((a, b)=> a.diff < b.diff ? -1 : 1);\n    console.log(peaks[0]);\n    console.log(peaks);\n\n    console.timeEnd('count');\n    return count;\n}"
    ],
    "docstrings": [],
    "functions": [
        "drawFFT",
        "defaultLoad",
        "getXByTime",
        "getTimeByX",
        "updateCurrentTime",
        "render",
        "start",
        "render",
        "getStartX",
        "getWidth",
        "getDur",
        "getStartTime",
        "move",
        "stop"
    ],
    "classes": [
        "Player",
        "AudioSelection"
    ]
}