{
    "identifiers": [
        "sys",
        "time",
        "getopt",
        "sys",
        "argv",
        "DEFAULT_INFNAME",
        "DEFAULT_OUTFNAME",
        "DEFAULT_TREESIG",
        "DEFAULT_TREEBKG",
        "getopt",
        "getopt",
        "sys",
        "argv",
        "shortopts",
        "longopts",
        "getopt",
        "GetoptError",
        "sys",
        "argv",
        "usage",
        "sys",
        "exit",
        "DEFAULT_INFNAME",
        "DEFAULT_TREESIG",
        "DEFAULT_TREEBKG",
        "DEFAULT_OUTFNAME",
        "DEFAULT_METHODS",
        "o",
        "a",
        "opts",
        "o",
        "usage",
        "sys",
        "exit",
        "o",
        "a",
        "o",
        "a",
        "o",
        "a",
        "o",
        "a",
        "strip",
        "a",
        "rsplit",
        "trees",
        "sort",
        "trees",
        "reverse",
        "len",
        "trees",
        "trees",
        "count",
        "trees",
        "sys",
        "exit",
        "trees",
        "trees",
        "o",
        "methods",
        "replace",
        "split",
        "m",
        "mlist",
        "m",
        "strip",
        "m",
        "strip",
        "ROOT",
        "gSystem",
        "gROOT",
        "gApplication",
        "TFile",
        "TTree",
        "TCut",
        "gROOT",
        "GetVersionCode",
        "gROOT",
        "GetVersionCode",
        "sys",
        "exit",
        "gROOT",
        "SetMacroPath",
        "gROOT",
        "Macro",
        "gROOT",
        "LoadMacro",
        "ROOT",
        "TMVA",
        "TFile",
        "outfname",
        "TMVA",
        "Factory",
        "outputFile",
        "factory",
        "SetVerbose",
        "verbose",
        "factory",
        "AddVariable",
        "factory",
        "AddVariable",
        "factory",
        "AddVariable",
        "factory",
        "AddVariable",
        "factory",
        "AddSpectator",
        "factory",
        "AddSpectator",
        "gSystem",
        "AccessPathName",
        "infname",
        "gSystem",
        "Exec",
        "infname",
        "TFile",
        "Open",
        "infname",
        "input",
        "Get",
        "treeNameSig",
        "input",
        "Get",
        "treeNameBkg",
        "factory",
        "AddSignalTree",
        "signal",
        "signalWeight",
        "factory",
        "AddBackgroundTree",
        "background",
        "backgroundWeight",
        "factory",
        "SetBackgroundWeightExpression",
        "TCut",
        "TCut",
        "factory",
        "PrepareTrainingAndTestTree",
        "mycutSig",
        "mycutBkg",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kCuts",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kCuts",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kCuts",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kCuts",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kCuts",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kLikelihood",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kLikelihood",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kLikelihood",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kLikelihood",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kLikelihood",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kPDERS",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kPDERS",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kPDERS",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kPDEFoam",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kPDEFoam",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kKNN",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kHMatrix",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kLD",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kFisher",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kFisher",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kFisher",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kFDA",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kFDA",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kFDA",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kFDA",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kFDA",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kFDA",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kMLP",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kMLP",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kMLP",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kCFMlpANN",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kTMlpANN",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kSVM",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kBDT",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kBDT",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kBDT",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kBDT",
        "mlist",
        "factory",
        "BookMethod",
        "TMVA",
        "Types",
        "kRuleFit",
        "factory",
        "TrainAllMethods",
        "factory",
        "TestAllMethods",
        "factory",
        "EvaluateAllMethods",
        "outputFile",
        "Close",
        "outfname",
        "gROOT",
        "ProcessLine",
        "outfname",
        "gApplication",
        "Run",
        "main"
    ],
    "literals": [
        "\"TMVA.root\"",
        "\"tmva_class_example.root\"",
        "\"TreeS\"",
        "\"TreeB\"",
        "\"Cuts,CutsD,CutsPCA,CutsGA,CutsSA,Likelihood,LikelihoodD,LikelihoodPCA,LikelihoodKDE,LikelihoodMIX,PDERS,PDERSD,PDERSPCA,PDEFoam,PDEFoamBoost,KNN,LD,Fisher,FisherG,BoostedFisher,HMatrix,FDA_GA,FDA_SA,FDA_MC,FDA_MT,FDA_GAMT,FDA_MCMT,MLP,MLPBFGS,MLPBNN,CFMlpANN,TMlpANN,SVM,BDT,BDTD,BDTG,BDTB,RuleFit\"",
        "\" \"",
        "\"Usage: python %s [options]\"",
        "\"  -m | --methods    : gives methods to be run (default: all methods)\"",
        "\"  -i | --inputfile  : name of input ROOT file (default: '%s')\"",
        "\"  -o | --outputfile : name of output ROOT file containing results (default: '%s')\"",
        "\"  -t | --inputtrees : input ROOT Trees for signal and background (default: '%s %s')\"",
        "\"  -v | --verbose\"",
        "\"  -? | --usage      : print this help message\"",
        "\"  -h | --help       : print this help message\"",
        "\" \"",
        "\"m:i:t:o:vh?\"",
        "\"methods=\"",
        "\"inputfile=\"",
        "\"inputtrees=\"",
        "\"outputfile=\"",
        "\"verbose\"",
        "\"help\"",
        "\"usage\"",
        "\"ERROR: unknown options in argument %s\"",
        "\"-?\"",
        "\"-h\"",
        "\"--help\"",
        "\"--usage\"",
        "\"-m\"",
        "\"--methods\"",
        "\"-i\"",
        "\"--inputfile\"",
        "\"-o\"",
        "\"--outputfile\"",
        "\"-t\"",
        "\"--inputtrees\"",
        "' '",
        "''",
        "\"ERROR: need to give two trees (each one for signal and background)\"",
        "\"-v\"",
        "\"--verbose\"",
        "' '",
        "','",
        "','",
        "\"=== TMVAClassification: use method(s)...\"",
        "''",
        "\"=== - <%s>\"",
        "\"*** You are running ROOT version 5.18, which has problems in PyROOT such that TMVA\"",
        "\"*** does not run properly (function calls with enums in the argument are ignored).\"",
        "\"*** Solution: either use CINT or a C++ compiled version (see TMVA/macros or TMVA/examples),\"",
        "\"*** or use another ROOT version (e.g., ROOT 5.19).\"",
        "\"./\"",
        "\"./TMVAlogon.C\"",
        "\"./TMVAGui.C\"",
        "'RECREATE'",
        "\"TMVAClassification\"",
        "\"!V:!Silent:Color:DrawProgressBar:Transformations=I;D;P;G,D:AnalysisType=Classification\"",
        "\"myvar1 := var1+var2\"",
        "'F'",
        "\"myvar2 := var1-var2\"",
        "\"Expression 2\"",
        "\"\"",
        "'F'",
        "\"var3\"",
        "\"Variable 3\"",
        "\"units\"",
        "'F'",
        "\"var4\"",
        "\"Variable 4\"",
        "\"units\"",
        "'F'",
        "\"spec1:=var1*2\"",
        "\"Spectator 1\"",
        "\"units\"",
        "'F'",
        "\"spec2:=var1*3\"",
        "\"Spectator 2\"",
        "\"units\"",
        "'F'",
        "\"wget http://root.cern.ch/files/\"",
        "\"weight\"",
        "\"\"",
        "\"\"",
        "\"nTrain_Signal=0:nTrain_Background=0:SplitMode=Random:NormMode=NumEvents:!V\"",
        "\"Cuts\"",
        "\"Cuts\"",
        "\"!H:!V:FitMethod=MC:EffSel:SampleSize=200000:VarProp=FSmart\"",
        "\"CutsD\"",
        "\"CutsD\"",
        "\"!H:!V:FitMethod=MC:EffSel:SampleSize=200000:VarProp=FSmart:VarTransform=Decorrelate\"",
        "\"CutsPCA\"",
        "\"CutsPCA\"",
        "\"!H:!V:FitMethod=MC:EffSel:SampleSize=200000:VarProp=FSmart:VarTransform=PCA\"",
        "\"CutsGA\"",
        "\"CutsGA\"",
        "\"H:!V:FitMethod=GA:CutRangeMin[0]=-10:CutRangeMax[0]=10:VarProp[1]=FMax:EffSel:Steps=30:Cycles=3:PopSize=400:SC_steps=10:SC_rate=5:SC_factor=0.95\"",
        "\"CutsSA\"",
        "\"CutsSA\"",
        "\"!H:!V:FitMethod=SA:EffSel:MaxCalls=150000:KernelTemp=IncAdaptive:InitialTemp=1e+6:MinTemp=1e-6:Eps=1e-10:UseDefaultScale\"",
        "\"Likelihood\"",
        "\"Likelihood\"",
        "\"H:!V:!TransformOutput:PDFInterpol=Spline2:NSmoothSig[0]=20:NSmoothBkg[0]=20:NSmoothBkg[1]=10:NSmooth=1:NAvEvtPerBin=50\"",
        "\"LikelihoodD\"",
        "\"LikelihoodD\"",
        "\"!H:!V:TransformOutput:PDFInterpol=Spline2:NSmoothSig[0]=20:NSmoothBkg[0]=20:NSmooth=5:NAvEvtPerBin=50:VarTransform=Decorrelate\"",
        "\"LikelihoodPCA\"",
        "\"LikelihoodPCA\"",
        "\"!H:!V:!TransformOutput:PDFInterpol=Spline2:NSmoothSig[0]=20:NSmoothBkg[0]=20:NSmooth=5:NAvEvtPerBin=50:VarTransform=PCA\"",
        "\"LikelihoodKDE\"",
        "\"LikelihoodKDE\"",
        "\"!H:!V:!TransformOutput:PDFInterpol=KDE:KDEtype=Gauss:KDEiter=Adaptive:KDEFineFactor=0.3:KDEborder=None:NAvEvtPerBin=50\"",
        "\"LikelihoodMIX\"",
        "\"LikelihoodMIX\"",
        "\"!H:!V:!TransformOutput:PDFInterpolSig[0]=KDE:PDFInterpolBkg[0]=KDE:PDFInterpolSig[1]=KDE:PDFInterpolBkg[1]=KDE:PDFInterpolSig[2]=Spline2:PDFInterpolBkg[2]=Spline2:PDFInterpolSig[3]=Spline2:PDFInterpolBkg[3]=Spline2:KDEtype=Gauss:KDEiter=Nonadaptive:KDEborder=None:NAvEvtPerBin=50\"",
        "\"PDERS\"",
        "\"PDERS\"",
        "\"!H:!V:NormTree=T:VolumeRangeMode=Adaptive:KernelEstimator=Gauss:GaussSigma=0.3:NEventsMin=400:NEventsMax=600\"",
        "\"PDERSD\"",
        "\"PDERSD\"",
        "\"!H:!V:VolumeRangeMode=Adaptive:KernelEstimator=Gauss:GaussSigma=0.3:NEventsMin=400:NEventsMax=600:VarTransform=Decorrelate\"",
        "\"PDERSPCA\"",
        "\"PDERSPCA\"",
        "\"!H:!V:VolumeRangeMode=Adaptive:KernelEstimator=Gauss:GaussSigma=0.3:NEventsMin=400:NEventsMax=600:VarTransform=PCA\"",
        "\"PDEFoam\"",
        "\"PDEFoam\"",
        "\"!H:!V:SigBgSeparate=F:TailCut=0.001:VolFrac=0.0666:nActiveCells=500:nSampl=2000:nBin=5:Nmin=100:Kernel=None:Compress=T\"",
        "\"PDEFoamBoost\"",
        "\"PDEFoamBoost\"",
        "\"!H:!V:Boost_Num=30:Boost_Transform=linear:SigBgSeparate=F:MaxDepth=4:UseYesNoCell=T:DTLogic=MisClassificationError:FillFoamWithOrigWeights=F:TailCut=0:nActiveCells=500:nBin=20:Nmin=400:Kernel=None:Compress=T\"",
        "\"KNN\"",
        "\"KNN\"",
        "\"H:nkNN=20:ScaleFrac=0.8:SigmaFact=1.0:Kernel=Gaus:UseKernel=F:UseWeight=T:!Trim\"",
        "\"HMatrix\"",
        "\"HMatrix\"",
        "\"!H:!V\"",
        "\"LD\"",
        "\"LD\"",
        "\"H:!V:VarTransform=None:CreateMVAPdfs:PDFInterpolMVAPdf=Spline2:NbinsMVAPdf=50:NsmoothMVAPdf=10\"",
        "\"Fisher\"",
        "\"Fisher\"",
        "\"H:!V:Fisher:CreateMVAPdfs:PDFInterpolMVAPdf=Spline2:NbinsMVAPdf=50:NsmoothMVAPdf=10\"",
        "\"FisherG\"",
        "\"FisherG\"",
        "\"H:!V:VarTransform=Gauss\"",
        "\"BoostedFisher\"",
        "\"BoostedFisher\"",
        "\"H:!V:Boost_Num=20:Boost_Transform=log:Boost_Type=AdaBoost:Boost_AdaBoostBeta=0.2\"",
        "\"FDA_MC\"",
        "\"FDA_MC\"",
        "\"H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1)(-10,10);(-10,10);(-10,10);(-10,10):FitMethod=MC:SampleSize=100000:Sigma=0.1\"",
        "\"FDA_GA\"",
        "\"FDA_GA\"",
        "\"H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1)(-10,10);(-10,10);(-10,10);(-10,10):FitMethod=GA:PopSize=300:Cycles=3:Steps=20:Trim=True:SaveBestGen=1\"",
        "\"FDA_SA\"",
        "\"FDA_SA\"",
        "\"H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1)(-10,10);(-10,10);(-10,10);(-10,10):FitMethod=SA:MaxCalls=15000:KernelTemp=IncAdaptive:InitialTemp=1e+6:MinTemp=1e-6:Eps=1e-10:UseDefaultScale\"",
        "\"FDA_MT\"",
        "\"FDA_MT\"",
        "\"H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1)(-10,10);(-10,10);(-10,10);(-10,10):FitMethod=MINUIT:ErrorLevel=1:PrintLevel=-1:FitStrategy=2:UseImprove:UseMinos:SetBatch\"",
        "\"FDA_GAMT\"",
        "\"FDA_GAMT\"",
        "\"H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1)(-10,10);(-10,10);(-10,10);(-10,10):FitMethod=GA:Converger=MINUIT:ErrorLevel=1:PrintLevel=-1:FitStrategy=0:!UseImprove:!UseMinos:SetBatch:Cycles=1:PopSize=5:Steps=5:Trim\"",
        "\"FDA_MCMT\"",
        "\"FDA_MCMT\"",
        "\"H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1)(-10,10);(-10,10);(-10,10);(-10,10):FitMethod=MC:Converger=MINUIT:ErrorLevel=1:PrintLevel=-1:FitStrategy=0:!UseImprove:!UseMinos:SetBatch:SampleSize=20\"",
        "\"MLP\"",
        "\"MLP\"",
        "\"H:!V:NeuronType=tanh:VarTransform=N:NCycles=600:HiddenLayers=N+5:TestRate=5:!UseRegulator\"",
        "\"MLPBFGS\"",
        "\"MLPBFGS\"",
        "\"H:!V:NeuronType=tanh:VarTransform=N:NCycles=600:HiddenLayers=N+5:TestRate=5:TrainingMethod=BFGS:!UseRegulator\"",
        "\"MLPBNN\"",
        "\"MLPBNN\"",
        "\"H:!V:NeuronType=tanh:VarTransform=N:NCycles=600:HiddenLayers=N+5:TestRate=5:TrainingMethod=BFGS:UseRegulator\"",
        "\"CFMlpANN\"",
        "\"CFMlpANN\"",
        "\"!H:!V:NCycles=2000:HiddenLayers=N+1,N\"",
        "\"TMlpANN\"",
        "\"TMlpANN\"",
        "\"!H:!V:NCycles=200:HiddenLayers=N+1,N:LearningMethod=BFGS:ValidationFraction=0.3\"",
        "\"SVM\"",
        "\"SVM\"",
        "\"Gamma=0.25:Tol=0.001:VarTransform=Norm\"",
        "\"BDTG\"",
        "\"BDTG\"",
        "\"!H:!V:NTrees=1000:MinNodeSize=1.5%:BoostType=Grad:Shrinkage=0.10:UseBaggedBoost:BaggedSampleFraction=0.5:nCuts=20:MaxDepth=2\"",
        "\"BDT\"",
        "\"BDT\"",
        "\"!H:!V:NTrees=850:MinNodeSize=2.5%:MaxDepth=3:BoostType=AdaBoost:AdaBoostBeta=0.5:UseBaggedBoost:BaggedSampleFraction=0.5:SeparationType=GiniIndex:nCuts=20\"",
        "\"BDTB\"",
        "\"BDTB\"",
        "\"!H:!V:NTrees=400:BoostType=Bagging:SeparationType=GiniIndex:nCuts=20\"",
        "\"BDTD\"",
        "\"BDTD\"",
        "\"!H:!V:NTrees=400:MinNodeSize=5%:MaxDepth=3:BoostType=AdaBoost:SeparationType=GiniIndex:nCuts=20:VarTransform=Decorrelate\"",
        "\"RuleFit\"",
        "\"RuleFit\"",
        "\"H:!V:RuleFitModule=RFTMVA:Model=ModRuleLinear:MinImp=0.001:RuleMinDist=0.001:NTrees=20:fEventsMin=0.01:fEventsMax=0.5:GDTau=-1.0:GDTauPrec=0.01:GDStep=0.01:GDNSteps=10000:GDErrScale=1.02\"",
        "\"=== wrote root file %s\\n\"",
        "\"=== TMVAClassification is done!\\n\"",
        "\"TMVAGui(\\\"%s\\\")\"",
        "\"__main__\""
    ],
    "variables": [
        "DEFAULT_OUTFNAME",
        "DEFAULT_INFNAME",
        "DEFAULT_TREESIG",
        "DEFAULT_TREEBKG",
        "DEFAULT_METHODS",
        "shortopts",
        "longopts",
        "opts",
        "args",
        "infname",
        "treeNameSig",
        "treeNameBkg",
        "outfname",
        "methods",
        "verbose",
        "methods",
        "infname",
        "outfname",
        "trees",
        "treeNameSig",
        "treeNameBkg",
        "verbose",
        "mlist",
        "outputFile",
        "factory",
        "input",
        "signal",
        "background",
        "signalWeight",
        "backgroundWeight",
        "mycutSig",
        "mycutBkg"
    ],
    "comments": [
        "!/usr/bin/env python",
        "@(#)root/tmva $Id$",
        "------------------------------------------------------------------------------ #",
        "Project      : TMVA - a Root-integrated toolkit for multivariate data analysis #",
        "Package      : TMVA                                                            #",
        "Python script: TMVAClassification.py                                           #",
        "#",
        "This python script provides examples for the training and testing of all the   #",
        "TMVA classifiers through PyROOT.                                               #",
        "#",
        "The Application works similarly, please see:                                   #",
        "TMVA/macros/TMVAClassificationApplication.C                                 #",
        "For regression, see:                                                           #",
        "TMVA/macros/TMVARegression.C                                                #",
        "TMVA/macros/TMVARegressionpplication.C                                      #",
        "and translate to python as done here.                                          #",
        "#",
        "As input data is used a toy-MC sample consisting of four Gaussian-distributed  #",
        "and linearly correlated input variables.                                       #",
        "#",
        "The methods to be used can be switched on and off via the prompt command, for  #",
        "example:                                                                       #",
        "#",
        "python TMVAClassification.py --methods Fisher,Likelihood                    #",
        "#",
        "The output file \"TMVA.root\" can be analysed with the use of dedicated          #",
        "macros (simply say: root -l <../macros/macro.C>), which can be conveniently    #",
        "invoked through a GUI that will appear at the end of the run of this macro.    #",
        "#",
        "for help type \"python TMVAClassification.py --help\"                            #",
        "------------------------------------------------------------------------------ #",
        "--------------------------------------------",
        "Standard python import",
        "exit",
        "time accounting",
        "command line parser",
        "--------------------------------------------",
        "Default settings for command line arguments",
        "Print usage help",
        "Main routine",
        "retrive command line options",
        "print help information and exit:",
        "Print methods",
        "Import ROOT classes",
        "check ROOT version, give alarm if 5.18",
        "Logon not automatically loaded through PyROOT (logon loads TMVA library) load also GUI",
        "Import TMVA classes from ROOT",
        "Output file",
        "Create instance of TMVA factory (see TMVA/macros/TMVAClassification.C for more factory options)",
        "All TMVA output can be suppressed by removing the \"!\" (not) in",
        "front of the \"Silent\" argument in the option string",
        "Set verbosity",
        "If you wish to modify default settings",
        "(please check \"src/Config.h\" to see all available global options)",
        "gConfig().GetVariablePlotting()).fTimesRMS = 8.0",
        "gConfig().GetIONames()).fWeightFileDir = \"myWeightDirectory\"",
        "Define the input variables that shall be used for the classifier training",
        "note that you may also use variable expressions, such as: \"3*var1/var2*abs(var3)\"",
        "[all types of expressions that can also be parsed by TTree::Draw( \"expression\" )]",
        "You can add so-called \"Spectator variables\", which are not used in the MVA training,",
        "but will appear in the final \"TestTree\" produced by TMVA. This TestTree will contain the",
        "input variables, the response values of all trained MVAs, and the spectator variables",
        "Read input data",
        "Get the signal and background trees for training",
        "Global event weights (see below for setting event-wise weights)",
        "====== register trees ====================================================",
        "",
        "the following method is the prefered one:",
        "you can add an arbitrary number of signal or background trees",
        "To give different trees for training and testing, do as follows:",
        "factory.AddSignalTree( signalTrainingTree, signalTrainWeight, \"Training\" )",
        "factory.AddSignalTree( signalTestTree,     signalTestWeight,  \"Test\" )",
        "Use the following code instead of the above two or four lines to add signal and background",
        "training and test events \"by hand\"",
        "NOTE that in this case one should not give expressions (such as \"var1+var2\") in the input",
        "variable definition, but simply compute the expression before adding the event",
        "",
        "# --- begin ----------------------------------------------------------",
        "",
        "... *** please lookup code in TMVA/macros/TMVAClassification.C ***",
        "",
        "# --- end ------------------------------------------------------------",
        "",
        "====== end of register trees ==============================================",
        "Set individual event weights (the variables must exist in the original TTree)",
        "for signal    : factory.SetSignalWeightExpression    (\"weight1*weight2\");",
        "for background: factory.SetBackgroundWeightExpression(\"weight1*weight2\");",
        "Apply additional cuts on the signal and background sample.",
        "example for cut: mycut = TCut( \"abs(var1)<0.5 && abs(var2-0.5)<1\" )",
        "Here, the relevant variables are copied over in new, slim trees that are",
        "used for TMVA training and testing",
        "\"SplitMode=Random\" means that the input events are randomly shuffled before",
        "splitting them into training and test samples",
        "--------------------------------------------------------------------------------------------------",
        "---- Book MVA methods",
        "",
        "please lookup the various method configuration options in the corresponding cxx files, eg:",
        "src/MethoCuts.cxx, etc, or here: http://tmva.sourceforge.net/optionRef.html",
        "it is possible to preset ranges in the option string in which the cut optimisation should be done:",
        "\"...:CutRangeMin[2]=-1:CutRangeMax[2]=1\"...\", where [2] is the third input variable",
        "Cut optimisation",
        "Likelihood (\"naive Bayes estimator\")",
        "Decorrelated likelihood",
        "PCA-transformed likelihood",
        "Use a kernel density estimator to approximate the PDFs",
        "Use a variable-dependent mix of splines and kernel density estimator",
        "Test the multi-dimensional probability density estimator",
        "here are the options strings for the MinMax and RMS methods, respectively:",
        "\"!H:!V:VolumeRangeMode=MinMax:DeltaFrac=0.2:KernelEstimator=Gauss:GaussSigma=0.3\" );",
        "\"!H:!V:VolumeRangeMode=RMS:DeltaFrac=3:KernelEstimator=Gauss:GaussSigma=0.3\" );",
        "Multi-dimensional likelihood estimator using self-adapting phase-space binning",
        "K-Nearest Neighbour classifier (KNN)",
        "H-Matrix (chi2-squared) method",
        "Linear discriminant (same as Fisher discriminant)",
        "Fisher discriminant (same as LD)",
        "Fisher with Gauss-transformed input variables",
        "Composite classifier: ensemble (tree) of boosted Fisher classifiers",
        "Function discrimination analysis (FDA) -- test of various fitters - the recommended one is Minuit (or GA or SA)",
        "TMVA ANN: MLP (recommended ANN) -- all ANNs in TMVA are Multilayer Perceptrons",
        "BFGS training with bayesian regulators",
        "CF(Clermont-Ferrand)ANN",
        "n_cycles:#nodes:#nodes:...",
        "Tmlp(Root)ANN",
        "n_cycles:#nodes:#nodes:...",
        "Support Vector Machine",
        "Boosted Decision Trees",
        "RuleFit -- TMVA implementation of Friedman's method",
        "--------------------------------------------------------------------------------------------------",
        "---- Now you can tell the factory to train, test, and evaluate the MVAs.",
        "Train MVAs",
        "Test MVAs",
        "Evaluate MVAs",
        "Save the output.",
        "open the GUI for the result macros",
        "keep the ROOT thread running",
        "----------------------------------------------------------"
    ],
    "docstrings": [],
    "functions": [
        "usage",
        "main"
    ],
    "classes": []
}