{
    "identifiers": [
        "GitHubElectron",
        "callback",
        "categoryGroups",
        "categoryFilter",
        "options",
        "callback",
        "resultFilePath",
        "callback",
        "filePath",
        "categoryFilter",
        "options",
        "callback",
        "callback",
        "resultFilePath",
        "callback",
        "filePath",
        "callback",
        "categoryName",
        "eventName",
        "callback",
        "GitHubElectron",
        "GitHubElectron",
        "GitHubElectron",
        "title",
        "content",
        "accelerator",
        "callback",
        "accelerator",
        "accelerator",
        "path",
        "options",
        "options",
        "scheme",
        "handler",
        "request",
        "scheme",
        "scheme",
        "scheme",
        "handler",
        "request",
        "scheme",
        "RequestFileJob",
        "RequestStringJob",
        "RequestBufferJob",
        "GitHubElectron",
        "_app",
        "GitHubElectron",
        "_autoUpdater",
        "GitHubElectron",
        "BrowserWindow",
        "GitHubElectron",
        "contentTracing",
        "GitHubElectron",
        "dialog",
        "GitHubElectron",
        "globalShortcut",
        "GitHubElectron",
        "Menu",
        "GitHubElectron",
        "MenuItem",
        "NodeJS",
        "powerMonitor",
        "GitHubElectron",
        "protocol",
        "GitHubElectron",
        "Tray"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'app'",
        "'auto-updater'",
        "'browser-window'",
        "'content-tracing'",
        "'dialog'",
        "'global-shortcut'",
        "'menu'",
        "'menu-item'",
        "'power-monitor'",
        "'protocol'",
        "'tray'"
    ],
    "variables": [
        "_app",
        "_autoUpdater",
        "BrowserWindow",
        "contentTracing",
        "dialog",
        "globalShortcut",
        "Menu",
        "MenuItem",
        "powerMonitor",
        "protocol",
        "Tray"
    ],
    "comments": [
        "Type definitions for the Electron 0.25.2 main process",
        "Project: http://electron.atom.io/",
        "Definitions by: jedmao <https://github.com/jedmao/>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "<reference path=\"./github-electron.d.ts\" />",
        "",
        "declare module 'ipc' {",
        "var ipc: NodeJS.EventEmitter;",
        "export = ipc;",
        "}",
        "",
        "interface NodeRequireFunction {",
        "(id: 'app'): GitHubElectron.App",
        "(id: 'auto-updater'): GitHubElectron.AutoUpdater",
        "(id: 'browser-window'): typeof GitHubElectron.BrowserWindow",
        "(id: 'content-tracing'): GitHubElectron.ContentTracing",
        "(id: 'dialog'): GitHubElectron.Dialog",
        "(id: 'global-shortcut'): GitHubElectron.GlobalShortcut",
        "(id: 'ipc'): NodeJS.EventEmitter",
        "(id: 'menu'): typeof GitHubElectron.Menu",
        "(id: 'menu-item'): typeof GitHubElectron.MenuItem",
        "(id: 'power-monitor'): NodeJS.EventEmitter",
        "(id: 'protocol'): GitHubElectron.Protocol",
        "(id: 'tray'): typeof GitHubElectron.Tray",
        "}",
        ""
    ],
    "docstrings": [
        "* Get a set of category groups. The category groups can change as new code paths are reached.\n\t\t * @param callback Called once all child processes have acked to the getCategories request.",
        "* Start recording on all processes. Recording begins immediately locally, and asynchronously\n\t\t * on child processes as soon as they receive the EnableRecording request.\n\t\t * @param categoryFilter A filter to control what category groups should be traced.\n\t\t * A filter can have an optional \"-\" prefix to exclude category groups that contain\n\t\t * a matching category. Having both included and excluded category patterns in the\n\t\t * same list would not be supported.\n\t\t * @param options controls what kind of tracing is enabled, it could be a OR-ed\n\t\t * combination of tracing.DEFAULT_OPTIONS, tracing.ENABLE_SYSTRACE, tracing.ENABLE_SAMPLING\n\t\t * and tracing.RECORD_CONTINUOUSLY.\n\t\t * @param callback Called once all child processes have acked to the startRecording request.",
        "* Stop recording on all processes. Child processes typically are caching trace data and\n\t\t * only rarely flush and send trace data back to the main process. That is because it may\n\t\t * be an expensive operation to send the trace data over IPC, and we would like to avoid\n\t\t * much runtime overhead of tracing. So, to end tracing, we must asynchronously ask all\n\t\t * child processes to flush any pending trace data.\n\t\t * @param resultFilePath Trace data will be written into this file if it is not empty,\n\t\t * or into a temporary file.\n\t\t * @param callback Called once all child processes have acked to the stopRecording request.",
        "* @param filePath A file that contains the traced data.",
        "* Start monitoring on all processes. Monitoring begins immediately locally, and asynchronously\n\t\t * on child processes as soon as they receive the startMonitoring request.\n\t\t * @param callback Called once all child processes have acked to the startMonitoring request.",
        "* Stop monitoring on all processes.\n\t\t * @param callback Called once all child processes have acked to the stopMonitoring request.",
        "* Get the current monitoring traced data. Child processes typically are caching trace data\n\t\t * and only rarely flush and send trace data back to the main process. That is because it may\n\t\t * be an expensive operation to send the trace data over IPC, and we would like to avoid much\n\t\t * runtime overhead of tracing. So, to end tracing, we must asynchronously ask all child\n\t\t * processes to flush any pending trace data.\n\t\t * @param callback Called once all child processes have acked to the captureMonitoringSnapshot request.",
        "* @param filePath A file that contains the traced data\n\t\t\t * @returns {}",
        "* Get the maximum across processes of trace buffer percent full state.\n\t\t * @param callback Called when the TraceBufferUsage value is determined.",
        "* @param callback Called every time the given event occurs on any process.",
        "* Cancel the watch event. If tracing is enabled, this may race with the watch event callback.",
        "* @param callback If supplied, the API call will be asynchronous.\n\t\t * @returns On success, returns an array of file paths chosen by the user,\n\t\t * otherwise returns undefined.",
        "* @param callback If supplied, the API call will be asynchronous.\n\t\t * @returns On success, returns the path of file chosen by the user, otherwise\n\t\t * returns undefined.",
        "* Shows a message box. It will block until the message box is closed. It returns .\n\t\t * @param callback If supplied, the API call will be asynchronous.\n\t\t * @returns The index of the clicked button.",
        "* Runs a modal dialog that shows an error message. This API can be called safely\n\t\t * before the ready event of app module emits, it is usually used to report errors\n\t\t * in early stage of startup.",
        "* Registers a global shortcut of accelerator.\n\t\t * @param accelerator Represents a keyboard shortcut. It can contain modifiers\n\t\t * and key codes, combined by the \"+\" character.\n\t\t * @param callback Called when the registered shortcut is pressed by the user.\n\t\t * @returns {}",
        "* @param accelerator Represents a keyboard shortcut. It can contain modifiers\n\t\t * and key codes, combined by the \"+\" character.\n\t\t * @returns Whether the accelerator is registered.",
        "* Unregisters the global shortcut of keycode.\n\t\t * @param accelerator Represents a keyboard shortcut. It can contain modifiers\n\t\t * and key codes, combined by the \"+\" character.",
        "* Unregisters all the global shortcuts.",
        "* Create a request job which would query a file of path and set corresponding mime types.",
        "* Create a request job which sends a string as response.",
        "* Default is \"text/plain\".",
        "* Default is \"UTF-8\".",
        "* Create a request job which accepts a buffer and sends a string as response.",
        "* Default is \"application/octet-stream\".",
        "* Default is \"UTF-8\"."
    ],
    "functions": [],
    "classes": [
        "RequestFileJob",
        "RequestStringJob",
        "RequestBufferJob"
    ]
}