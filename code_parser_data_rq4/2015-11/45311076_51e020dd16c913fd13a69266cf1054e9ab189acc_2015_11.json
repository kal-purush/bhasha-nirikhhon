{
    "identifiers": [
        "MySQLdb",
        "sys",
        "host",
        "user",
        "password",
        "dbName",
        "MySQLdb",
        "connect",
        "host",
        "user",
        "password",
        "dbName",
        "aaCode",
        "isdigit",
        "aaCode",
        "aaCode",
        "aaCode",
        "foundDigit",
        "isdigit",
        "aaPos",
        "origAA",
        "foundDigit",
        "isdigit",
        "aaPos",
        "mutAA",
        "origAA",
        "aaPos",
        "aaPos",
        "mutAA",
        "origAA",
        "aaPos",
        "mutAA",
        "splitLine",
        "isString",
        "firstNull",
        "firstNull",
        "valueString",
        "i",
        "len",
        "splitLine",
        "splitLine",
        "i",
        "splitLine",
        "i",
        "valueString",
        "isString",
        "i",
        "splitLine",
        "i",
        "splitLine",
        "i",
        "replace",
        "splitLine",
        "i",
        "valueString",
        "quotedItem",
        "isString",
        "i",
        "splitLine",
        "i",
        "valueString",
        "item",
        "isString",
        "i",
        "parseAACode",
        "splitLine",
        "i",
        "valueString",
        "parsedCode",
        "parsedCode",
        "parsedCode",
        "valueString",
        "cursor",
        "query",
        "cursor",
        "execute",
        "query",
        "cursor",
        "fetchall",
        "len",
        "results",
        "inputFile",
        "delimiter",
        "db",
        "cursor",
        "open",
        "inputFile",
        "cancerTypeInput",
        "readline",
        "header",
        "strip",
        "split",
        "delimiter",
        "line",
        "cancerTypeInput",
        "line",
        "strip",
        "split",
        "delimiter",
        "processValues",
        "dataFields",
        "isString",
        "header",
        "header",
        "valLine",
        "cursor",
        "execute",
        "sql",
        "db",
        "commit",
        "dataFields",
        "dataFields",
        "db",
        "rollback",
        "inputFile",
        "delimiter",
        "db",
        "cursor",
        "open",
        "inputFile",
        "geneTableInput",
        "readline",
        "header",
        "strip",
        "split",
        "delimiter",
        "line",
        "geneTableInput",
        "line",
        "strip",
        "split",
        "delimiter",
        "processValues",
        "dataFields",
        "isString",
        "header",
        "header",
        "header",
        "header",
        "header",
        "header",
        "valLine",
        "cursor",
        "execute",
        "sql",
        "db",
        "commit",
        "sql",
        "db",
        "rollback",
        "sys",
        "exit",
        "inputFile",
        "delimiter",
        "db",
        "cursor",
        "open",
        "inputFile",
        "platformInput",
        "readline",
        "header",
        "strip",
        "split",
        "delimiter",
        "line",
        "platformInput",
        "line",
        "strip",
        "split",
        "delimiter",
        "processValues",
        "dataFields",
        "isString",
        "header",
        "header",
        "valLine",
        "cursor",
        "execute",
        "sql",
        "db",
        "commit",
        "db",
        "rollback",
        "model",
        "description",
        "parameter_set",
        "name",
        "exp_date",
        "db",
        "cursor",
        "model",
        "description",
        "parameter_set",
        "name",
        "exp_date",
        "cursor",
        "execute",
        "sqlInsert",
        "db",
        "commit",
        "sqlInsert",
        "db",
        "rollback",
        "inputFile",
        "delimiter",
        "db",
        "cursor",
        "open",
        "inputFile",
        "groupInput",
        "readline",
        "header",
        "strip",
        "split",
        "delimiter",
        "line",
        "groupInput",
        "line",
        "strip",
        "split",
        "delimiter",
        "dataFields",
        "cursor",
        "execute",
        "sqlQuery",
        "cursor",
        "fetchall",
        "len",
        "results",
        "dataFields",
        "results",
        "sqlQuery",
        "processValues",
        "dataFields",
        "isString",
        "header",
        "header",
        "header",
        "header",
        "valLine",
        "cursor",
        "execute",
        "sqlInsert",
        "db",
        "commit",
        "db",
        "rollback",
        "inputFile",
        "delimiter",
        "db",
        "cursor",
        "open",
        "inputFile",
        "patientInput",
        "readline",
        "header",
        "strip",
        "split",
        "delimiter",
        "line",
        "patientInput",
        "line",
        "strip",
        "split",
        "delimiter",
        "dataFields",
        "cursor",
        "execute",
        "sqlQuery",
        "cursor",
        "fetchall",
        "len",
        "results",
        "dataFields",
        "results",
        "sqlQuery",
        "processValues",
        "dataFields",
        "isString",
        "header",
        "header",
        "header",
        "header",
        "header",
        "header",
        "header",
        "valLine",
        "cursor",
        "execute",
        "sqlInsert",
        "db",
        "commit",
        "sqlInsert",
        "db",
        "rollback",
        "sys",
        "exit",
        "inputFile",
        "delimiter",
        "db",
        "cursor",
        "open",
        "inputFile",
        "smInput",
        "readline",
        "header",
        "strip",
        "split",
        "delimiter",
        "line",
        "smInput",
        "line",
        "strip",
        "split",
        "delimiter",
        "dataFields",
        "dataFields",
        "dataFields",
        "cursor",
        "execute",
        "sqlQuery",
        "cursor",
        "fetchall",
        "len",
        "results",
        "dataFields",
        "results",
        "sqlQuery",
        "dataFields",
        "cursor",
        "execute",
        "sqlQuery",
        "cursor",
        "fetchall",
        "len",
        "results",
        "dataFields",
        "results",
        "sqlQuery",
        "processValues",
        "dataFields",
        "isString",
        "header",
        "header",
        "header",
        "header",
        "header",
        "header",
        "header",
        "header",
        "header",
        "valLine",
        "cursor",
        "execute",
        "sqlInsert",
        "db",
        "commit",
        "sqlInsert",
        "db",
        "rollback",
        "sys",
        "exit",
        "inputFile",
        "delimiter",
        "db",
        "cursor",
        "open",
        "inputFile",
        "scnaInput",
        "readline",
        "header",
        "strip",
        "split",
        "delimiter",
        "line",
        "scnaInput",
        "line",
        "strip",
        "split",
        "delimiter",
        "dataFields",
        "dataFields",
        "dataFields",
        "cursor",
        "execute",
        "sqlQuery",
        "cursor",
        "fetchall",
        "len",
        "results",
        "dataFields",
        "results",
        "sqlQuery",
        "dataFields",
        "dataFields",
        "dataFields",
        "cursor",
        "execute",
        "sqlQuery",
        "cursor",
        "fetchall",
        "len",
        "results",
        "dataFields",
        "results",
        "dataFields",
        "dataFields",
        "dataFields",
        "cursor",
        "execute",
        "sqlQuery",
        "cursor",
        "fetchall",
        "len",
        "results",
        "dataFields",
        "results",
        "processValues",
        "dataFields",
        "isString",
        "header",
        "header",
        "header",
        "header",
        "header",
        "valLine",
        "cursor",
        "execute",
        "sqlInsert",
        "db",
        "commit",
        "sqlInsert",
        "db",
        "rollback",
        "sys",
        "exit",
        "inputFile",
        "delimiter",
        "db",
        "cursor",
        "open",
        "inputFile",
        "degInput",
        "readline",
        "header",
        "strip",
        "split",
        "delimiter",
        "line",
        "degInput",
        "line",
        "strip",
        "split",
        "delimiter",
        "dataFields",
        "cursor",
        "execute",
        "patientQuery",
        "cursor",
        "fetchall",
        "len",
        "results",
        "dataFields",
        "results",
        "patientQuery",
        "dataFields",
        "cursor",
        "execute",
        "geneQuery",
        "cursor",
        "fetchall",
        "len",
        "results",
        "dataFields",
        "results",
        "geneQuery",
        "dataFields",
        "dataFields",
        "dataFields",
        "cursor",
        "execute",
        "platformQuery",
        "cursor",
        "fetchall",
        "len",
        "results",
        "dataFields",
        "results",
        "platformQuery",
        "processValues",
        "dataFields",
        "isString",
        "header",
        "header",
        "header",
        "header",
        "header",
        "valLine",
        "cursor",
        "execute",
        "sqlInsert",
        "db",
        "commit",
        "sqlInsert",
        "db",
        "rollback",
        "sys",
        "exit",
        "inputFile",
        "delimiter",
        "db",
        "cursor",
        "open",
        "inputFile",
        "tdiFile",
        "readline",
        "header",
        "strip",
        "split",
        "delimiter",
        "line",
        "tdiFile",
        "line",
        "strip",
        "split",
        "delimiter",
        "dataFields",
        "cursor",
        "execute",
        "patientQuery",
        "cursor",
        "fetchall",
        "len",
        "results",
        "dataFields",
        "results",
        "patientQuery",
        "dataFields",
        "dataFields",
        "dataFields",
        "cursor",
        "execute",
        "gtQuery",
        "cursor",
        "fetchall",
        "len",
        "results",
        "dataFields",
        "results",
        "gtQuery",
        "dataFields",
        "cursor",
        "execute",
        "gtQuery",
        "cursor",
        "fetchall",
        "len",
        "results",
        "dataFields",
        "results",
        "gtQuery",
        "dataFields",
        "cursor",
        "execute",
        "geQuery",
        "cursor",
        "fetchall",
        "len",
        "results",
        "dataFields",
        "results",
        "geQuery",
        "processValues",
        "dataFields",
        "isString",
        "gene_or_group_flag",
        "header",
        "header",
        "header",
        "header",
        "valLine",
        "header",
        "header",
        "header",
        "header",
        "valLine",
        "cursor",
        "execute",
        "sqlInsert",
        "db",
        "commit",
        "sqlInsert",
        "db",
        "rollback",
        "sys",
        "exit",
        "query",
        "db",
        "cursor",
        "cursor",
        "execute",
        "query",
        "cursor",
        "fetchall",
        "results",
        "query",
        "geneName",
        "db",
        "cursor",
        "geneName",
        "cursor",
        "execute",
        "query",
        "cursor",
        "fetchall",
        "results",
        "geneName",
        "geneName",
        "gtGene",
        "mutType",
        "db",
        "cursor",
        "mutType",
        "mutType",
        "mutType",
        "mutType",
        "gtGene",
        "mutType",
        "gtGene",
        "mutType",
        "gtGene",
        "cursor",
        "execute",
        "query",
        "cursor",
        "fetchall",
        "r",
        "r",
        "results",
        "query",
        "gtGene",
        "aaLoc",
        "db",
        "cursor",
        "getGeneID",
        "gtGene",
        "geneID",
        "aaLoc",
        "cursor",
        "execute",
        "query",
        "cursor",
        "fetchall",
        "results",
        "query",
        "gtGene",
        "aaLoc",
        "db",
        "cursor",
        "getGeneID",
        "gtGene",
        "geneID",
        "aaLoc",
        "cursor",
        "execute",
        "query",
        "cursor",
        "fetchall",
        "x",
        "x",
        "results",
        "query",
        "geneName",
        "hsLocation",
        "db",
        "cursor",
        "getGeneID",
        "geneName",
        "hsLocation",
        "geneID",
        "cursor",
        "execute",
        "hotspotQuery",
        "cursor",
        "fetchall",
        "results",
        "query",
        "gtGene",
        "patientID",
        "db",
        "cursor",
        "getGeneID",
        "gtGene",
        "geneID",
        "patientID",
        "cursor",
        "execute",
        "degQuery",
        "cursor",
        "fetchall",
        "x",
        "x",
        "results",
        "gtGene",
        "patientID",
        "geneName",
        "numHotspots",
        "db",
        "cursor",
        "getGeneID",
        "geneName",
        "geneID",
        "numHotspots",
        "cursor",
        "execute",
        "hotspotQuery",
        "cursor",
        "fetchall",
        "tup",
        "tup",
        "tup",
        "results",
        "hotspotQuery",
        "hs",
        "hsList",
        "hs",
        "geneID",
        "cursor",
        "execute",
        "geQuery",
        "cursor",
        "fetchall",
        "hs",
        "tup",
        "results",
        "hsDict",
        "hs",
        "append",
        "tup",
        "tup",
        "hs",
        "sorted",
        "hsDict",
        "hs",
        "key",
        "x",
        "x",
        "reverse",
        "geQuery",
        "hsDict",
        "gene1",
        "gene2",
        "db",
        "cursor",
        "gene1",
        "cursor",
        "execute",
        "gene1Query",
        "cursor",
        "fetchall",
        "gene1",
        "gene2",
        "cursor",
        "execute",
        "gene2Query",
        "cursor",
        "fetchall",
        "gene2",
        "geneID1",
        "cursor",
        "execute",
        "degQuery1",
        "cursor",
        "fetchall",
        "gene1",
        "geneID1",
        "geneID2",
        "cursor",
        "execute",
        "degQuery2",
        "cursor",
        "fetchall",
        "gene2",
        "x",
        "x",
        "degsForGene1",
        "x",
        "x",
        "degsForGene2",
        "geneList1",
        "intersection",
        "geneList2",
        "commonTargets",
        "targetGene",
        "minNumberOfTumors",
        "db",
        "cursor",
        "getGeneID",
        "targetGene",
        "targetGeneID",
        "targetGeneID",
        "minNumberOfTumors",
        "cursor",
        "execute",
        "driverGeneAndFreqQuery",
        "cursor",
        "fetchall",
        "results",
        "targetGene",
        "geneList",
        "db",
        "cursor",
        "i",
        "len",
        "geneList",
        "i",
        "geneString",
        "geneList",
        "i",
        "geneString",
        "geneList",
        "i",
        "geneString",
        "cursor",
        "execute",
        "tumorQuery",
        "cursor",
        "fetchall",
        "x",
        "x",
        "results",
        "gtGene",
        "numHotspots",
        "db",
        "cursor",
        "getGeneID",
        "gtGene",
        "geneID",
        "numHotspots",
        "cursor",
        "execute",
        "hotspotQuery",
        "cursor",
        "fetchall",
        "x",
        "x",
        "topHotspots",
        "gtGene",
        "hotspot",
        "topHotspots",
        "getTumorsMutatedWithGTAtLocation",
        "gtGene",
        "hotspot",
        "tumor",
        "tumorResults",
        "mutatedTumors",
        "add",
        "tumor",
        "tumor",
        "mutatedTumors",
        "getDEGsForPatientAndGT",
        "gtGene",
        "tumor",
        "deg",
        "degList",
        "deg",
        "degDict",
        "degDict",
        "deg",
        "degDict",
        "len",
        "mutatedTumors",
        "gtGene",
        "db",
        "cursor",
        "getGeneID",
        "gtGene",
        "geneID",
        "cursor",
        "execute",
        "deletionTumorsQuery",
        "cursor",
        "fetchall",
        "x",
        "x",
        "deletionTumors",
        "gtGene",
        "tumor",
        "deletionTumors",
        "getDEGsForPatientAndGT",
        "gtGene",
        "tumor",
        "deg",
        "degList",
        "deg",
        "degDict",
        "degDict",
        "deg",
        "degDict",
        "len",
        "deletionTumors",
        "db",
        "close"
    ],
    "literals": [
        "'Data structure for SQL manipulation using Python'",
        "\"NULL\"",
        "\"NULL\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"NULL\"",
        "\"\"",
        "\"NULL\"",
        "\"\"",
        "\"NULL\"",
        "\"\"",
        "\"NULL\"",
        "\"null\"",
        "\"NULL\"",
        "\",NULL\"",
        "\"'\"",
        "\"'\"",
        "\"\\\\'\"",
        "\",'\"",
        "\"'\"",
        "\",\"",
        "\",\"",
        "\",'\"",
        "\"','\"",
        "\"'\"",
        "\"r\"",
        "\"INSERT INTO Cancer_Types(\\\n\t\t\t\t\tcancer_type_id, %s, %s)\\\n\t\t\t\t\tVALUES(%s)\"",
        "\"Error trying to input data %s, %s into cancer type table. Please check these values again.\"",
        "\"r\"",
        "\"INSERT IGNORE INTO Genes(\\\n\t\t\t\t\tgene_id, %s, %s, %s,\\\n\t\t\t\t\t%s, %s, %s)\\\n\t\t\t\t\tVALUES(%s)\"",
        "\"Error trying to input gene into table.\"",
        "\"r\"",
        "\"INSERT INTO Exp_Platforms(\\\n\t\t\t\t\tplatform_id, %s, %s)\\\n\t\t\t\t\tVALUES(%s)\"",
        "\"Error trying to input Exp_Platform into table.\"",
        "\"INSERT INTO Experiments\\\n\t\t\t\t\t VALUES(NULL, \\\"%s\\\", \\\"%s\\\", \\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\"",
        "\"Error trying to insert into 'Experiments' table. Please check arguments again.\"",
        "\"r\"",
        "\"cancer_type_id\"",
        "\"SELECT cancer_type_id\\\n\t\t\t\t\t\tFROM Cancer_Types\\\n\t\t\t\t\t\tWHERE abbv = '%s'\"",
        "\"Found multiple rows with cancer name %s. Skipping.\"",
        "\"Error: unable to fetch data.\"",
        "\"INSERT INTO SGA_Unit_Group(\\\n\t\t\t\t\t\tgroup_id, %s, %s, %s, %s)\\\n\t\t\t\t\t\tVALUES(%s)\"",
        "\"Error trying to input SGA unit/group into table.\"",
        "\"r\"",
        "\"cancer_type_id\"",
        "\"SELECT cancer_type_id\\\n\t\t\t\t\t\tFROM Cancer_Types\\\n\t\t\t\t\t\tWHERE abbv = '%s'\"",
        "\"Found multiple rows with cancer name %s. Skipping.\"",
        "\"Error: unable to fetch data.\"",
        "\"INSERT INTO Patients(\\\n\t\t\t\t\t\tpatient_id, %s, %s, %s, %s, %s, %s, %s)\\\n\t\t\t\t\t\tVALUES(%s)\"",
        "\"Error trying to input patient into table.\"",
        "\"r\"",
        "\"patient_id\"",
        "\"gene_id\"",
        "'Unknown'",
        "'unknown'",
        "\"SELECT patient_id\\\n\t\t\t\t\t\tFROM Patients\\\n\t\t\t\t\t\tWHERE name = '%s'\"",
        "\"Retrieved more than one entry for patient %s. Skip.\"",
        "\"Error: unable to fetch patient data.\"",
        "\"SELECT gene_id\\\n\t\t\t\t\t\tFROM Genes\\\n\t\t\t\t\t\tWHERE gene_name = '%s'\"",
        "\"Found more than one result for gene %s. Skip.\"",
        "\"Error. Unable to fetch gene data.\"",
        "\"INSERT INTO Somatic_Mutations(\\\n\t\t\t\t\t\tsm_id, %s, %s, %s, %s, %s, %s, %s, aa_loc, aa_norm, aa_mut, %s, %s)\\\n\t\t\t\t\t\tVALUES(%s)\"",
        "\"Error trying to insert SM.\"",
        "\"r\"",
        "\"patient_id\"",
        "\"gene_id\"",
        "\"platform_id\"",
        "\"null\"",
        "\"NULL\"",
        "\"SELECT patient_id\\\n\t\t\t\t\t\t\tFROM Patients\\\n\t\t\t\t\t\t\tWHERE name = '%s'\"",
        "\"Retrieved more than one entry for patient %s. Skip.\"",
        "\"Error: unable to fetch patient data.\"",
        "\"null\"",
        "\"NULL\"",
        "\"SELECT gene_id\\\n\t\t\t\t\t\t\tFROM Genes\\\n\t\t\t\t\t\t\tWHERE gene_name = '%s'\"",
        "\"Retrieved more than one entry for gene %s. Skip.\"",
        "\"Error: unable to fetch gene id.\"",
        "\"null\"",
        "\"NULL\"",
        "\"SELECT platform_id\\\n\t\t\t\t\t\t\tFROM Exp_Platforms\\\n\t\t\t\t\t\t\tWHERE platform = '%s'\"",
        "\"Retrieved more than one entry for platform %s. Skip.\"",
        "\"Error: unable to fetch exp_platform_id.\"",
        "\"INSERT INTO SCNAs\\\n\t\t\t\t\t\t(scna_id, %s, %s, %s, %s, %s)\\\n\t\t\t\t\t\tVALUES(%s)\"",
        "\"Error trying to insert scna.\"",
        "\"r\"",
        "\"patient_id\"",
        "\"gene_id\"",
        "\"platform_id\"",
        "\"SELECT patient_id\\\n\t\t\t\t\t\t\tFROM Patients\\\n\t\t\t\t\t\t\tWHERE name = '%s'\"",
        "\"Retrieved more than one entry for patient %s. Skip.\"",
        "\"Error: unable to fetch patient_id.\"",
        "\"SELECT gene_id\\\n\t\t\t\t\t\tFROM Genes\\\n\t\t\t\t\t\tWHERE gene_name = '%s'\"",
        "\"Retrieved more than one entry for gene %s. Skip.\"",
        "\"Error: unable to fetch gene_id.\"",
        "\"null\"",
        "\"Null\"",
        "\"SELECT platform_id\\\n\t\t\t\t\t\t\t\t FROM Exp_Platforms\\\n\t\t\t\t\t\t\t\t WHERE platform = '%s'\"",
        "\"Retrieved more than one entry for platform %s. Skip.\"",
        "\"Error: unable to fetch platform_id.\"",
        "\"INSERT INTO DEGs(\\\n\t\t\t\t\t\tdeg_id, %s, %s, %s, %s, %s)\\\n\t\t\t\t\t\tVALUES(%s)\"",
        "\"Error trying to insert DEG.\"",
        "\"r\"",
        "\"patient_id\"",
        "\"gt_gene_id\"",
        "\"ge_gene_id\"",
        "\"exp_id\"",
        "\"SELECT patient_id\\\n\t\t\t\t\t\t\tFROM Patients\\\n\t\t\t\t\t\t\tWHERE name = '%s'\"",
        "\"Retrieved more than one entry for patient %s. Skip.\"",
        "\"Error: unable to fetch patient_id.\"",
        "\"group\"",
        "\"unit\"",
        "\"SELECT gene_id\\\n\t\t\t\t\t\t   \tFROM Genes\\\n\t\t\t\t\t\t   \tWHERE gene_name = '%s'\"",
        "\"Retrieved more than one entry for GT %s. Skip.\"",
        "\"Error: unable to fetch GT id.\"",
        "\"SELECT group_id\\\n\t\t\t\t\t\t   FROM SGA_Unit_Group\\\n\t\t\t\t\t\t   WHERE name = '%s'\"",
        "\"Retrieved more than one entry for GT %s. Skip.\"",
        "\"Error: unable to fetch group id.\"",
        "\"SELECT gene_id\\\n\t\t\t\t\t\tFROM Genes\\\n\t\t\t\t\t\tWHERE gene_name = '%s'\"",
        "\"Retrieved more than one entry for GE %s. Skip.\"",
        "\"Error: unable to fetch GE id.\"",
        "\"1\"",
        "\"INSERT INTO TDI_Results(\\\n\t\t\t\t\t\t\t tdi_id, %s, %s, %s, %s, %s)\\\n\t\t\t\t\t\t\t VALUES(%s)\"",
        "\"gt_gene_id\"",
        "\"INSERT INTO TDI_Results(\\\n\t\t\t\t\t\t\t tdi_id, %s, %s, %s, %s, %s)\\\n\t\t\t\t\t\t\t VALUES(%s)\"",
        "\"gt_unit_group_id\"",
        "\"Error: unable to insert TDI entry.\"",
        "\"Error processing query. Please check to ensure you have a legal MySQL query.\"",
        "\"SELECT gene_id\\\n\t\t\t\t FROM Genes\\\n\t\t\t\t WHERE gene_name = '%s'\"",
        "\"Error finding gene id. Please ensure that given gene %s is a proper gene name. Otherwise %s is not in the database.\"",
        "\"null\"",
        "'all'",
        "'all'",
        "'syn'",
        "'nonsyn'",
        "\"Error with type argument, proceeding to find all tumors. Please ensure that the given 'mutType' argument\\\n\t\t\t\t\tis either 'all', 'syn', or 'nonsyn'.\"",
        "'all'",
        "'all'",
        "\"SELECT DISTINCT Patients.patient_id\\\n\t\t\t\t\tFROM TDI_Results JOIN Patients ON TDI_Results.patient_id = Patients.patient_id\\\n\t\t\t\t    JOIN Genes ON TDI_Results.gt_gene_id = Genes.gene_id\\\n\t\t\t\t\tWHERE Genes.gene_name = '%s' AND TDI_Results.gt_gene_id IS NOT NULL\"",
        "'syn'",
        "\"SELECT DISTINCT Patients.patient_id\\\n\t\t\t\t\tFROM TDI_Results JOIN Patients ON TDI_Results.patient_id = Patients.patient_id\\\n\t\t\t\t    JOIN Genes ON TDI_Results.gt_gene_id = Genes.gene_id\\\n\t\t\t\t    JOIN Somatic_Mutations ON Somatic_Mutations.patient_id = Patients.patient_id AND Somatic_Mutations.gene_id = Genes.gene_id\\\n\t\t\t\t\tWHERE Genes.gene_name = '%s' AND TDI_Results.gt_gene_id IS NOT NULL AND Somatic_Mutations.mut_type = 'synonymous SNV'\"",
        "'nonsyn'",
        "\"SELECT DISTINCT Patients.patient_id\\\n\t\t\t\t\tFROM TDI_Results JOIN Patients ON TDI_Results.patient_id = Patients.patient_id\\\n\t\t\t\t    JOIN Genes ON TDI_Results.gt_gene_id = Genes.gene_id\\\n\t\t\t\t    JOIN Somatic_Mutations ON Somatic_Mutations.patient_id = Patients.patient_id AND Somatic_Mutations.gene_id = Genes.gene_id\\\n\t\t\t\t\tWHERE Genes.gene_name = '%s' AND TDI_Results.gt_gene_id IS NOT NULL AND Somatic_Mutations.mut_type = 'nonsynonymous SNV'\"",
        "\"Error. Unable to process query.\"",
        "\"SELECT COUNT(DISTINCT(patient_id))\\\n\t\t\t\t FROM TDI_SM\\\n\t\t\t\t WHERE gt_gene_id = %s AND aa_loc = %s\"",
        "\"Error executing query.\"",
        "\"SELECT DISTINCT(patient_id)\\\n\t\t\t\t FROM TDI_SM\\\n\t\t\t\t WHERE gt_gene_id = %s AND aa_loc = %s\"",
        "\"Error executing query to get tumors at a given location.\"",
        "\"SELECT gene_name, COUNT(DISTINCT(patient_id)) AS num_tumors\\\n\t\t\t\t\t\tFROM TDI_SM JOIN Genes ON Genes.gene_id = TDI_SM.ge_gene_id\\\n\t\t\t\t\t\tWHERE aa_loc = %s AND gt_gene_id = %s\\\n\t\t\t\t\t\tGROUP BY ge_gene_id\\\n\t\t\t\t\t\tORDER BY num_tumors DESC\"",
        "\"Error. Unable to process query.\"",
        "\"SELECT DISTINCT(gene_name)\\\n\t\t\t\t\tFROM TDI_Results JOIN Genes ON TDI_Results.ge_gene_id = Genes.gene_id\\\n\t\t\t\t\tWHERE gt_gene_id = %s AND patient_id = %s\"",
        "\"Error retrieving DEGs for GT: %s and patientID: %s.\"",
        "\"null\"",
        "\"SELECT aa_loc, COUNT(DISTINCT(patient_id)) AS num_tumors\\\n\t\t\t\t\t\tFROM TDI_SM\\\n\t\t\t\t\t\tWHERE gt_gene_id = %s\\\n\t\t\t\t\t\tGROUP BY aa_loc\\\n\t\t\t\t\t\tORDER BY num_tumors DESC LIMIT %s\"",
        "\"Error retrieving hotspots. Make sure gene name is an official TCGA gene.\"",
        "\"SELECT gene_name, COUNT(DISTINCT(patient_id)) AS num_tumors\\\n\t\t\t\t\t\tFROM TDI_SM JOIN Genes ON Genes.gene_id = TDI_SM.ge_gene_id\\\n\t\t\t\t\t\tWHERE aa_loc = %s AND gt_gene_id = %s\\\n\t\t\t\t\t\tGROUP BY ge_gene_id\"",
        "\"Error retrieving degs for hotspot. Skipping.\"",
        "\"SELECT gene_id\\\n\t\t\t\t\t  FROM Genes\\\n\t\t\t\t\t  WHERE gene_name = '%s'\"",
        "\"Error retrieving gene ID for gene: %s.\"",
        "\"SELECT gene_id\\\n\t\t\t\t\t  FROM Genes\\\n\t\t\t\t\t  WHERE gene_name = '%s'\"",
        "\"Error retrieving gene ID for gene: %s.\"",
        "\"SELECT gene_name, COUNT(DISTINCT(patient_id)) AS num_tumors\\\n\t\t\t\t\t FROM TDI_Results JOIN Genes ON TDI_Results.ge_gene_id = Genes.gene_id\\\n\t\t\t\t\t WHERE gt_gene_id = %s\\\n\t\t\t\t\t GROUP BY ge_gene_id\\\n\t\t\t\t\t HAVING COUNT(DISTINCT(patient_id)) > 5\\\n\t\t\t\t\t ORDER BY num_tumors DESC\"",
        "\"Error finding targets for gene %s\"",
        "\"SELECT gene_name, COUNT(DISTINCT(patient_id)) AS num_tumors\\\n\t\t\t\t\t FROM TDI_Results JOIN Genes ON TDI_Results.ge_gene_id = Genes.gene_id\\\n\t\t\t\t\t WHERE gt_gene_id = %s\\\n\t\t\t\t\t GROUP BY ge_gene_id\\\n\t\t\t\t\t HAVING COUNT(DISTINCT(patient_id)) > 5\\\n\t\t\t\t\t ORDER BY num_tumors DESC\"",
        "\"Error finding targets for gene %s\"",
        "\"null\"",
        "\"SELECT gene_name, COUNT(DISTINCT(patient_id)) AS num_tumors\\\n\t\t\t\t\t\t\t\t\t  FROM TDI_Results JOIN Genes ON TDI_Results.gt_gene_id = Genes.gene_id\\\n\t\t\t\t\t\t\t\t\t  WHERE ge_gene_id = %s\\\n\t\t\t\t\t\t\t\t\t  GROUP BY gt_gene_id\\\n\t\t\t\t\t\t\t\t\t  HAVING num_tumors > %s\\\n\t\t\t\t\t\t\t\t\t  ORDER BY num_tumors DESC\"",
        "\"Could not execute query to find driver genes. Please ensure gene: %s is a standard TCGA gene name.\"",
        "\"null\"",
        "\"\"",
        "\"'\"",
        "\"'\"",
        "\",'\"",
        "\"'\"",
        "\"SELECT DISTINCT(name)\\\n\t\t \t\t\t  FROM Somatic_Mutations JOIN Patients ON Somatic_Mutations.patient_id = Patients.patient_id\\\n\t\t\t\t\t  WHERE Somatic_Mutations.patient_id NOT IN (SELECT DISTINCT(patient_id) FROM Somatic_Mutations JOIN Genes ON Somatic_Mutations.gene_id = Genes.gene_id WHERE gene_name IN (%s))\"",
        "\"Error with query.\"",
        "\"SELECT aa_loc\\\n\t\t\t\t\t\tFROM Somatic_Mutations\\\n\t\t\t\t\t\tWHERE gene_id = %s AND mut_type = 'nonsynonymous SNV'\\\n\t\t\t\t\t\tGROUP BY aa_loc ORDER BY COUNT(DISTINCT(patient_id)) DESC LIMIT %s\"",
        "\"Error finding hotspots for %s.\"",
        "\"SELECT DISTINCT(patient_id)\\\n\t\t\t\t\t\t\t   FROM SCNAs\\\n\t\t\t\t\t\t\t   WHERE gene_id = %s AND gistic_score = -2\"",
        "\"Error retrieving tumors with deletion for gene %s.\""
    ],
    "variables": [
        "db",
        "foundDigit",
        "origAA",
        "aaPos",
        "mutAA",
        "foundDigit",
        "origAA",
        "aaPos",
        "aaPos",
        "mutAA",
        "valueString",
        "splitLine",
        "i",
        "quotedItem",
        "item",
        "parsedCode",
        "results",
        "cursor",
        "cancerTypeInput",
        "header",
        "header",
        "isString",
        "dataFields",
        "valLine",
        "sql",
        "cursor",
        "geneTableInput",
        "header",
        "header",
        "isString",
        "dataFields",
        "valLine",
        "sql",
        "cursor",
        "platformInput",
        "header",
        "header",
        "isString",
        "dataFields",
        "valLine",
        "sql",
        "cursor",
        "sqlInsert",
        "cursor",
        "groupInput",
        "header",
        "header",
        "header",
        "isString",
        "dataFields",
        "sqlQuery",
        "results",
        "dataFields",
        "valLine",
        "sqlInsert",
        "cursor",
        "patientInput",
        "header",
        "header",
        "header",
        "isString",
        "dataFields",
        "sqlQuery",
        "results",
        "dataFields",
        "valLine",
        "sqlInsert",
        "cursor",
        "smInput",
        "header",
        "header",
        "header",
        "header",
        "isString",
        "dataFields",
        "sqlQuery",
        "results",
        "dataFields",
        "sqlQuery",
        "results",
        "dataFields",
        "valLine",
        "sqlInsert",
        "cursor",
        "scnaInput",
        "header",
        "header",
        "header",
        "header",
        "header",
        "isString",
        "dataFields",
        "sqlQuery",
        "results",
        "dataFields",
        "sqlQuery",
        "results",
        "dataFields",
        "sqlQuery",
        "results",
        "dataFields",
        "valLine",
        "sqlInsert",
        "cursor",
        "degInput",
        "header",
        "header",
        "header",
        "header",
        "header",
        "isString",
        "dataFields",
        "patientQuery",
        "results",
        "dataFields",
        "geneQuery",
        "results",
        "dataFields",
        "platformQuery",
        "results",
        "dataFields",
        "valLine",
        "sqlInsert",
        "cursor",
        "tdiFile",
        "header",
        "header",
        "header",
        "header",
        "header",
        "header",
        "isString",
        "gene_or_group_flag",
        "dataFields",
        "patientQuery",
        "results",
        "dataFields",
        "gene_or_group_flag",
        "gtQuery",
        "results",
        "dataFields",
        "gene_or_group_flag",
        "gtQuery",
        "results",
        "dataFields",
        "geQuery",
        "results",
        "dataFields",
        "dataFields",
        "valLine",
        "sqlInsert",
        "sqlInsert",
        "cursor",
        "results",
        "cursor",
        "query",
        "results",
        "cursor",
        "mutType",
        "query",
        "query",
        "query",
        "results",
        "cursor",
        "geneID",
        "query",
        "results",
        "cursor",
        "geneID",
        "query",
        "results",
        "cursor",
        "geneID",
        "hotspotQuery",
        "results",
        "cursor",
        "geneID",
        "degQuery",
        "results",
        "cursor",
        "geneID",
        "hotspotQuery",
        "results",
        "hsList",
        "hsDict",
        "geQuery",
        "results",
        "hsDict",
        "hsDict",
        "cursor",
        "gene1Query",
        "geneID1",
        "gene2Query",
        "geneID2",
        "degQuery1",
        "degsForGene1",
        "degQuery2",
        "degsForGene2",
        "geneList1",
        "geneList2",
        "commonTargets",
        "cursor",
        "targetGeneID",
        "driverGeneAndFreqQuery",
        "results",
        "cursor",
        "geneString",
        "tumorQuery",
        "results",
        "cursor",
        "geneID",
        "hotspotQuery",
        "topHotspots",
        "topHotspots",
        "mutatedTumors",
        "tumorResults",
        "degDict",
        "degList",
        "degDict",
        "deg",
        "cursor",
        "geneID",
        "deletionTumorsQuery",
        "deletionTumors",
        "deletionTumors",
        "degDict",
        "degList",
        "degDict",
        "deg"
    ],
    "comments": [
        "if there are no digits in the aaCode, then the code describes the mutation. We return null for original AA and AA loc and set AA mutation to the aaCode",
        "try:",
        "aaPos = int(aaPos)",
        "except:",
        "aaPos = \"NULL\"",
        "print splitLine[i]",
        "read header",
        "read header line",
        "existQuery = \"SELECT *\\",
        "FROM Genes\\",
        "WHERE gene_name = '%s'\" %(dataFields[0])",
        "if(self.exists(cursor, existQuery)):",
        "continue",
        "form the sql query by parsing a line from the input file",
        "read header line",
        "form the sql query by parsing a line from the input file",
        "read header line",
        "this database has a foreign key for the cancer_type_id, we need to find the corresponding ID given the cancer name",
        "if corresponding ID was sucessfully found, replace the cancer_name in the input with the cancer_id",
        "convert the values into proper SQL syntax",
        "form the sql query",
        "print sqlInsert",
        "sys.exit()",
        "read header",
        "cancer_name needs to be corresponding ID in our table (foreign key)",
        "this database has a foreign key for the cancer_type_id, we need to find the corresponding ID given the cancer name",
        "if corresponding ID was sucessfully found, replace the cancer_name in the input with the cancer_id",
        "convert the values into proper SQL syntax",
        "form the sql query",
        "read header",
        "disregard SMs that have 'Unkown' as gene name",
        "query for patient id",
        "sys.exit()",
        "query for gene id",
        "sys.exit()",
        "process the rest of the line using 'processValues'",
        "read header line",
        "query for the foreign keys",
        "sys.exit()",
        "print results",
        "print sqlQuery",
        "read header",
        "query to find patient id",
        "sys.exit()",
        "query to find gene_id",
        "sys.exit()",
        "query to find platform_id (given not null)",
        "sys.exit()",
        "0 if gene, 1 if group",
        "query for patient id",
        "sys.exit()",
        "if 'SGA.unit' or 'SGA.group' in gene name, lookup the SGA_Unit_Group table instead",
        "query for gt gene id",
        "sys.exit()",
        "sys.exit()",
        "query for the ge gene id",
        "sys.exit()",
        "query for exp id (if not null)",
        "if dataFields[4] != \"null\" and dataFields[4] != \"Null\":",
        "expQuery = \"SELECT exp_id\\",
        "FROM Experiments\\",
        "WHERE name = '%s'\" %(dataFields[4])",
        "try:",
        "cursor.execute(expQuery)",
        "results = cursor.fetchall()",
        "if len(results) > 1:",
        "print \"Retrieved more than one entry for experiment %s. Skip.\" %(dataFields[4])",
        "continue",
        "dataFields[4] = results[0][0]",
        "except:",
        "print \"Error: unable to fetch experiment id.\"",
        "print expQuery",
        "continue",
        "insert entry into TDI table",
        "first find geneID of the given gene name",
        "find all degs",
        "hsDict = {}",
        "for tup in results:",
        "hsDict[tup[0]] = int(tup[1])",
        "return hsDict",
        "find top hotspots for gene",
        "get gene IDs from given gene names",
        "get degList and frequencies for gene1",
        "get degList and frequencies for gene2",
        "find intersecting DEG targets between gene1 and gene2",
        "return results",
        "find top 5 hotspots in regards to nonsynonymous",
        "find tumors for each hotspot",
        "degQuery = \"SELECT DISTINCT(gene_name)\\",
        "FROM TDI_Results JOIN Genes ON TDI_Results.ge_gene_id = Genes.gene_id\\",
        "WHERE gt_gene_id = %s AND patient_id = %s\" %(geneID, tumor)",
        "try:",
        "cursor.execute(degQuery)",
        "degList = cursor.fetchall()",
        "except:",
        "print \"Problem getting DEGs for patient ID: %s\" %(tumor)",
        "continue",
        "degSet = set()"
    ],
    "docstrings": [
        "\"\"\"\n\tFunction: init\n\tInitializes connection to MySQL database\n\tArguments:\n\t\thost: host name for the database you are connecting to\n\t\tuser: username for the database\n\t\tpassword: corresponding password for the given username\n\t\tdbName: name of the MySQL database you want to work on\n\t\"\"\"",
        "\"\"\"\n\t\tAlgorithm to parse a typical AA code. Will return a tuple of the following format:\n\t\t(original AA, AA location, mutated AA). In some cases, the mutated AA may be 'fs' for frameshift.\n\t\tIn other cases, the only information provided is the mutation location, in which case we return null for the AA information and only give the location.\n\t\t\"\"\"",
        "\"\"\"\n\tThis function behaves differently than the other population functions. Since we generally\n\thave no input file for the Experiments table, this function just inputs single entries with\n\tthe user providing the values for the respective data fields.\n\n\t@Parameters:\n\t\tmodel: String with the name of the model.\n\t\tdescription: String providing a description of the model.\n\t\tparameter_set: String listing out the parameters used for the model.\n\t\tname: String for the name of the experiment.\n\t\texp_date: String of the date the experiment was done (format: \"yyyy-mm-dd\")\n\t\"\"\"",
        "\"\"\"\n\tArguments: geneName - a TCGA geneID\n\t\t\t   hsLocation - an (int) representation of a nucleosome location of interest\n\treturn: hotspotDict[ge] = # of tumors with ge affected by given gt\n\t\"\"\"",
        "\"\"\"\n\tGiven two distinct TCGA driver gene IDs, find overlapping DEG targets between the two drivers from our algorithm.\n\n\t@param gene1: TCGA gene ID for driver gene 1\n\t@param gene2: TCGA gene ID for driver gene 2\n\t@return commonTargets: list of DEGs that have cases of being driven by gene1 or gene2 \n\t\"\"\"",
        "\"\"\"\n\tGiven a TCGA gene ID for a target gene, find all driver genes that\n\tdrive the target gene in at least a given number of tumors.\n\n\t@param targetGene: TCGA gene ID for a target gene of interest\n\t@param minNumberOfTumors (optional): the minimum number of tumors for which we see a particular\n \t\t\t\t\t\t\t\t\t\t driver-target interaction in order for the algorithm to deem it significant\n \t@return Results table detailing the driver genes found by the algorithm as well as the number of tumors with the given driver-target interaction\n\t\"\"\"",
        "\"\"\"\n\tGiven a Python list of genes, this function looks at our Somatic_Mutation\n\ttable and finds the tumors without a mutation in any of the given genes.\n\tThis list of genes is returned to the user.\n\n\t@param geneList: a Python list of TCGA gene IDs of genes to check for the absence of mutation\n\t@return: A list of TCGA tumors found to not have mutations in any of the given genes in geneList\n\t\"\"\"",
        "\"\"\"\n\tGiven a TCGA driver gene and an integer value 'x' for the top x hotspots,\n\tthis function first finds the top x hotspots based on somatic mutation frequency,\n\tthen for each hotspot, it finds the tumors with mutations of the gene at the hotspot.\n\tFinally, for each of these tumors, we find the DEGs deemed to be driven by the gtGene\n\tin the tumor. These DEGs and their frequency of occurrence are ultimately returned to\n\tthe user.\n\n\t@param gtGene: TCGA gene ID of driver gene of interest\n\t@param numHotspots: Integer representing the top 'x' hotspots for the algorithm to look at\n\t@return degDict: dictionary where keys are DEGs and value is the number of tumors (with mutation at a hotspot) have this DEG.\n\t@return len(deletionTumors): total number of tumors found with nonsynonymous mutation at one of the 'x' hotspots\n\t\"\"\"",
        "\"\"\"\n\tGiven a TCGA gene, this function finds the patients (tumors) in the\n\tSCNA table that have a deletion of the gene, then, for each patient,\n\tgets the DEGs found to be regulated by the deletion.\n\n\t@param gtGene: TCGA gene ID\n\t@return degDict: dictionary where keys are DEGs and value is the number of tumors (with deletion of gtGene) have this DEG.\n\t@return len(deletionTumors): total number of tumors found with deletion of gtGene in SCNA table\n\t\"\"\"",
        "\"\"\"\n\tCloses connection to the database.\n\t\"\"\""
    ],
    "functions": [
        "parseAACode",
        "processValues",
        "exists",
        "populateCancerTypeTable",
        "populateGeneTable",
        "populateExpPlatformTable",
        "populateExperimentTable",
        "populateSGAUnitGroupTable",
        "populatePatientTable",
        "populateSMTable",
        "populateSCNATable",
        "populateDEGTable",
        "populateTDIResults",
        "executeQuery",
        "getGeneID",
        "findTumorsWithGT",
        "numberOfTumorsWithGTAtLocation",
        "getTumorsMutatedWithGTAtLocation",
        "findDEGsAtHotspot",
        "getDEGsForPatientAndGT",
        "findTopHotspotsAndDEGs",
        "findOverlappingTargets",
        "findDriversForGene",
        "findTumorsWithoutGenes",
        "findDEGsForTumorsAtTopHotspots",
        "findDEGsWithDeletion",
        "closeDB"
    ],
    "classes": [
        "TDISQL"
    ]
}