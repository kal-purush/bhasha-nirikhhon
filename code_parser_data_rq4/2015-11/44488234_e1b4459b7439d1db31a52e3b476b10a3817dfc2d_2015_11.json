{
    "identifiers": [
        "Microsoft",
        "VisualStudio",
        "TestTools",
        "UnitTesting",
        "SimpleCalcChunks",
        "Collections",
        "Generic",
        "CalcTestN",
        "TestClass",
        "TestMethod",
        "Parse",
        "calc",
        "GetOperator",
        "Assert",
        "AreEqual",
        "expected",
        "op",
        "TestMethod",
        "Parse",
        "calc",
        "GetOperator",
        "Assert",
        "AreEqual",
        "expected",
        "calc",
        "GetOperator",
        "TestMethod",
        "Parse",
        "calc",
        "GetOperator",
        "Assert",
        "AreEqual",
        "expected",
        "calc",
        "GetOperator",
        "TestMethod",
        "Parse",
        "calc",
        "GetOperator",
        "Assert",
        "AreEqual",
        "expected",
        "calc",
        "GetOperator",
        "TestMethod",
        "Parse",
        "calc",
        "GetOperator",
        "Assert",
        "AreEqual",
        "expected",
        "calc",
        "GetOperator",
        "TestMethod",
        "Parse",
        "calc",
        "GetOperator",
        "Assert",
        "AreEqual",
        "expected",
        "calc",
        "GetOperator",
        "TestMethod",
        "Parse",
        "calc",
        "GetNumbers",
        "CollectionAssert",
        "AreEqual",
        "expected",
        "numb",
        "TestMethod",
        "Parse",
        "calc",
        "GetNumbers",
        "CollectionAssert",
        "AreEqual",
        "stringArray",
        "expected",
        "TestMethod",
        "Parse",
        "calc",
        "GetOperator",
        "Assert",
        "AreEqual",
        "expected",
        "op",
        "TestMethod",
        "Parse",
        "parse",
        "GetNumbers",
        "Assert",
        "AreEqual",
        "indexZero",
        "TestMethod",
        "Parse",
        "parse",
        "GetNumbers",
        "Assert",
        "AreEqual",
        "indexOne",
        "TestMethod",
        "Addition",
        "AddNum",
        "Assert",
        "AreEqual",
        "answer",
        "TestMethod",
        "Addition",
        "AddNum",
        "Assert",
        "AreEqual",
        "answer",
        "TestMethod",
        "Assert",
        "AreEqual",
        "answer",
        "TestMethod",
        "Subtraction",
        "SubNum",
        "Assert",
        "AreEqual",
        "answer",
        "TestMethod",
        "Multiplication",
        "MultiplyNum",
        "Assert",
        "AreEqual",
        "answer",
        "TestMethod",
        "Division",
        "DivideNum",
        "Assert",
        "AreEqual",
        "answer",
        "TestMethod",
        "Modulus",
        "ModNum",
        "Assert",
        "AreEqual",
        "answer",
        "TestMethod",
        "Assert",
        "IsTrue",
        "TestMethod",
        "lastQuestion",
        "Evaulate",
        "evaulate",
        "Evaluate",
        "Assert",
        "AreEqual",
        "result",
        "TestMethod",
        "last",
        "Evaulate",
        "evaulate",
        "Evaluate",
        "Assert",
        "AreEqual",
        "result",
        "TestMethod",
        "lastQuestion",
        "Evaulate",
        "evaulate",
        "Evaluate",
        "Assert",
        "AreEqual",
        "result",
        "TestMethod",
        "lastQuestion",
        "Evaulate",
        "Assert",
        "IsTrue",
        "lastQuestion",
        "TestMethod",
        "Parse",
        "TestMethod",
        "TestMethod",
        "TestMethod",
        "Parse",
        "Constants",
        "parse",
        "ExtractCharacter",
        "input",
        "parse",
        "ExtractValue",
        "input",
        "constants",
        "calculatorConstants",
        "Add",
        "key",
        "value",
        "Assert",
        "AreEqual",
        "expected"
    ],
    "literals": [
        "\"20+5\"",
        "\"20+5\"",
        "\"+\"",
        "\"20-5\"",
        "\"-\"",
        "\"20*5\"",
        "\"*\"",
        "\"20%5\"",
        "\"%\"",
        "\"20/5\"",
        "\"/\"",
        "\"20+5\"",
        "\"20\"",
        "\"5\"",
        "\"12+16\"",
        "\"12\"",
        "\"16\"",
        "\"12-8\"",
        "\"5+8\"",
        "\"5\"",
        "\"5+8\"",
        "\"8\"",
        "\"20\"",
        "\"5\"",
        "\"-20\"",
        "\"-5\"",
        "\"20\"",
        "\"5\"",
        "\"20\"",
        "\"5\"",
        "\"20\"",
        "\"5\"",
        "\"20\"",
        "\"5\"",
        "\"1+1\"",
        "\"lastq\"",
        "\"1+1\"",
        "\"2\"",
        "\"last\"",
        "\"2\"",
        "\"lastq\"",
        "\"lastq\"",
        "\"lastq\"",
        "\"a = 15\""
    ],
    "variables": [
        "calc",
        "op",
        "expected",
        "calc",
        "op",
        "expected",
        "calc",
        "op",
        "expected",
        "calc",
        "op",
        "expected",
        "calc",
        "op",
        "expected",
        "calc",
        "op",
        "expected",
        "calc",
        "numb",
        "expected",
        "calc",
        "stringArray",
        "expected",
        "calc",
        "op",
        "expected",
        "Parse",
        "parse",
        "indexZero",
        "Parse",
        "parse",
        "indexOne",
        "answer",
        "answer",
        "x",
        "y",
        "answer",
        "answer",
        "answer",
        "answer",
        "answer",
        "Evaulate",
        "evaulate",
        "result",
        "Evaulate",
        "evaulate",
        "result",
        "Evaulate",
        "evaulate",
        "result",
        "Evaulate",
        "evaulate",
        "calc",
        "expected",
        "a",
        "b",
        "input",
        "Parse",
        "parse",
        "constants",
        "key",
        "value",
        "expected"
    ],
    "comments": [
        "testing IndexOne not IndexTwo because the string 5+8 has been converted to an string[]",
        "and now 8 is in indexOne not the indextwo as it was in string",
        "Math Operation Tests //////////////////////////////////////////////////////",
        "</summary>",
        "[TestMethod]\n          [ExpectedException(typeof(System.DivideByZeroException))]\n          public void AddTwoStringBadInput()\n          {\n              string input1 = \"1\";\n              string input2 = \"2\";\n              Addition operation_class = new Addition();\n              operation_class.AddNum(input1, input2);\n        }",
        "FirstNumber > SecondNumber;",
        "Command Tests //////////////////////////////////////////////////////////////////////",
        "</summary>",
        "tests for lastq bad input",
        "no input",
        "invaild then lastq",
        "object obj = null;",
        "Constant Tests //////////////////////////////////////////////////////////////",
        "var constant = calc.GetConstant(\"a\");",
        "Assert.AreEqual(expected, constant);",
        "throw Exception;",
        "StringSplitOptions.RemoveEmptyEntries on equalMarks."
    ],
    "docstrings": [
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "DoesEquationHaveOperators",
        "DoesEquationHaveaddintionSign",
        "DoesEquationHaveSubtractionSign",
        "DoesEquationHaveMultiplicationSign",
        "DoesEquationHaveModulusSign",
        "DoesEquationHaveDivisionSign",
        "DoesEquationHaveNumbers",
        "GetNumbersShouldReturnTwoStrings",
        "ShouldGetOperators",
        "IsNumberInIndexZero",
        "IsNumberInIndexOne",
        "AddintionTest",
        "CanAddTwoNegativeNumbers",
        "CanAcceptAnInteger",
        "SubtractionTest",
        "MultipicationTest",
        "DivideTest",
        "ModulusTest",
        "SubtractionFirstNumberisLarger",
        "UserentersLastQuestion",
        "UserRequestLastAnswer",
        "UserAskLastQAfterEnteringInvalidInput",
        "UserFailedtoEnterInput",
        "UserCanEnterAConstant",
        "UserCanSetAConstant",
        "UndefinedConstantsCannotBeUsed",
        "UserCanSetACostantValueViaString"
    ],
    "classes": [
        "CalculatorTest"
    ]
}