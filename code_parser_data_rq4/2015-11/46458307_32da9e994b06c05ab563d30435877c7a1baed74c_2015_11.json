{
    "identifiers": [
        "com",
        "papertrail",
        "profiler",
        "org",
        "joda",
        "time",
        "Duration",
        "org",
        "joda",
        "time",
        "Instant",
        "java",
        "io",
        "java",
        "io",
        "OutputStream",
        "java",
        "lang",
        "management",
        "ManagementFactory",
        "java",
        "lang",
        "management",
        "ThreadInfo",
        "java",
        "lang",
        "management",
        "ThreadMXBean",
        "java",
        "nio",
        "ByteBuffer",
        "java",
        "nio",
        "ByteOrder",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Objects",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "Callable",
        "java",
        "util",
        "concurrent",
        "Future",
        "java",
        "util",
        "concurrent",
        "FutureTask",
        "counts",
        "duration",
        "count",
        "missed",
        "counts",
        "duration",
        "count",
        "missed",
        "counts",
        "counts",
        "duration",
        "duration",
        "count",
        "count",
        "missed",
        "missed",
        "buf",
        "os",
        "os",
        "createBuffer",
        "os",
        "buf",
        "os",
        "buf",
        "buf",
        "os",
        "os",
        "n",
        "buf",
        "clear",
        "buf",
        "putLong",
        "n",
        "os",
        "write",
        "buf",
        "array",
        "s",
        "os",
        "write",
        "s",
        "getBytes",
        "buf",
        "ByteBuffer",
        "allocate",
        "buf",
        "order",
        "ByteOrder",
        "LITTLE_ENDIAN",
        "buf",
        "os",
        "flush",
        "next",
        "uniq",
        "word",
        "word",
        "putString",
        "format",
        "mainClassName",
        "stack",
        "counts",
        "entrySet",
        "frame",
        "stack",
        "getKey",
        "uniq",
        "containsKey",
        "frame",
        "word",
        "putString",
        "format",
        "next",
        "frame",
        "toString",
        "uniq",
        "put",
        "frame",
        "next",
        "next",
        "word",
        "putString",
        "w",
        "word",
        "putWord",
        "w",
        "entry",
        "counts",
        "entrySet",
        "stack",
        "entry",
        "getKey",
        "n",
        "entry",
        "getValue",
        "stack",
        "isEmpty",
        "word",
        "putWord",
        "n",
        "word",
        "putWord",
        "stack",
        "size",
        "frame",
        "stack",
        "word",
        "putWord",
        "uniq",
        "get",
        "frame",
        "word",
        "putWord",
        "word",
        "putWord",
        "word",
        "putWord",
        "word",
        "flush",
        "a",
        "b",
        "a",
        "b",
        "a",
        "a",
        "b",
        "b",
        "Override",
        "o",
        "o",
        "o",
        "getClass",
        "o",
        "getClass",
        "that",
        "o",
        "Objects",
        "equals",
        "a",
        "that",
        "a",
        "Objects",
        "equals",
        "b",
        "that",
        "b",
        "Override",
        "Objects",
        "hash",
        "a",
        "b",
        "idleClassAndMethod",
        "idleClassAndMethod",
        "add",
        "idleClassAndMethod",
        "add",
        "idleClassAndMethod",
        "add",
        "idleClassAndMethod",
        "add",
        "idleClassAndMethod",
        "add",
        "idleClassAndMethod",
        "add",
        "elem",
        "idleClassAndMethod",
        "contains",
        "elem",
        "getClassName",
        "elem",
        "getMethodName",
        "howlong",
        "frequency",
        "state",
        "frequency",
        "counts",
        "bean",
        "ManagementFactory",
        "getThreadMXBean",
        "start",
        "Instant",
        "now",
        "end",
        "start",
        "plus",
        "howlong",
        "periodMillis",
        "frequency",
        "myId",
        "currentThread",
        "getId",
        "next",
        "Instant",
        "now",
        "n",
        "nmissed",
        "Instant",
        "now",
        "isBefore",
        "end",
        "thread",
        "bean",
        "dumpAllThreads",
        "thread",
        "getThreadState",
        "state",
        "thread",
        "getThreadId",
        "myId",
        "s",
        "Arrays",
        "asList",
        "thread",
        "getStackTrace",
        "s",
        "isEmpty",
        "include",
        "state",
        "State",
        "RUNNABLE",
        "isRunnable",
        "s",
        "get",
        "include",
        "counts",
        "get",
        "s",
        "counts",
        "put",
        "s",
        "count",
        "counts",
        "get",
        "s",
        "counts",
        "put",
        "s",
        "count",
        "n",
        "next",
        "next",
        "plus",
        "periodMillis",
        "next",
        "isBefore",
        "Instant",
        "now",
        "next",
        "isBefore",
        "end",
        "nmissed",
        "next",
        "next",
        "plus",
        "periodMillis",
        "sleep",
        "max",
        "next",
        "getMillis",
        "Instant",
        "now",
        "getMillis",
        "sleep",
        "sleep",
        "e",
        "currentThread",
        "interrupt",
        "counts",
        "start",
        "Instant",
        "now",
        "n",
        "nmissed",
        "howlong",
        "frequency",
        "record",
        "howlong",
        "frequency",
        "State",
        "RUNNABLE",
        "howlong",
        "frequency",
        "state",
        "future",
        "Override",
        "record",
        "howlong",
        "frequency",
        "state",
        "t",
        "future",
        "t",
        "start",
        "future",
        "howlong",
        "frequency",
        "recordInThread",
        "howlong",
        "frequency",
        "State",
        "RUNNABLE",
        "entry",
        "getAllStackTraces",
        "entrySet",
        "t",
        "entry",
        "getKey",
        "elements",
        "entry",
        "getValue",
        "equals",
        "t",
        "getName",
        "i",
        "elements",
        "length",
        "i",
        "i",
        "elem",
        "elements",
        "i",
        "elem",
        "getClassName",
        "startsWith",
        "elem",
        "getClassName"
    ],
    "literals": [
        "\"--- symbol\\nbinary=%s\\n\"",
        "\"0x%016x %s\\n\"",
        "\"---\\n--- profile\\n\"",
        "\"sun.nio.ch.EPollArrayWrapper\"",
        "\"epollWait\"",
        "\"sun.nio.ch.KQueueArrayWrapper\"",
        "\"kevent0\"",
        "\"java.net.SocketInputStream\"",
        "\"socketRead0\"",
        "\"java.net.SocketOutputStream\"",
        "\"socketWrite0\"",
        "\"java.net.PlainSocketImpl\"",
        "\"socketAvailable\"",
        "\"java.net.PlainSocketImpl\"",
        "\"socketAccept\"",
        "\"frequency must be < 1000\"",
        "\"CpuProfile interrupted.\"",
        "\"CpuProfile\"",
        "\"main\"",
        "\"scala.tools.nsc.MainGenericRunner\"",
        "\"unknown\""
    ],
    "variables": [
        "counts",
        "duration",
        "count",
        "missed",
        "buf",
        "os",
        "a",
        "b"
    ],
    "comments": [
        "(class name, method names) that say they are runnable, but are actually doing nothing.",
        "FIXME: fix this crap",
        "TODO: it may make sense to write a custom hash function here",
        "that needn't traverse the all stack trace elems. Usually, the",
        "top handful of frames are distinguishing.",
        "Ripped and ported from Twitter's Jvm trait"
    ],
    "docstrings": [
        "* A CPU profile.",
        "* Write a Google pprof-compatible profile to `out`. The format is\n     * documented here:\n     * <p/>\n     * http://google-perftools.googlecode.com/svn/trunk/doc/cpuprofile-fileformat.html",
        "* When looking for RUNNABLEs, the JVM's notion of runnable differs from the\n     * from kernel's definition and for some well known cases, we can filter\n     * out threads that are actually asleep.\n     * See http://www.brendangregg.com/blog/2014-06-09/java-cpu-sampling-using-hprof.html",
        "* Profile CPU usage of threads in `state` for `howlong`, sampling\n     * stacks at `frequency` Hz.\n     * <p/>\n     * As an example, using Nyquist's sampling theorem, we see that\n     * sampling at 100Hz will accurately represent components 50Hz or\n     * less; ie. any stack that contributes 2% or more to the total CPU\n     * time.\n     * <p/>\n     * Note that the maximum sampling frequency is set to 1000Hz.\n     * Anything greater than this is likely to consume considerable\n     * amounts of CPU while sampling.\n     * <p/>\n     * The profiler will discount its own stacks.\n     * <p/>\n     * TODO:\n     * <p/>\n     * - Should we synthesize GC frames? GC has significant runtime\n     * impact, so it seems nonfaithful to exlude them.\n     * - Limit stack depth?",
        "PLEASE NOTE: I modified this code to use millisecond precision as the original code that used microsecond\n        precision was incorrect. Each time it looked at the clock or slept, it was using millis under the hood.",
        "* Call `record` in a thread with the given parameters, returning a\n     * `Future` representing the completion of the profile.",
        "* Get the main class name for the currently running application.\n     * Note that this works only by heuristic, and may not be accurate.\n     * <p/>\n     * TODO: take into account the standard callstack around scala\n     * invocations better."
    ],
    "functions": [
        "CpuProfile",
        "Word",
        "Word",
        "putWord",
        "putString",
        "ByteBuffer",
        "createBuffer",
        "flush",
        "writeGoogleProfile",
        "StringPair",
        "equals",
        "hashCode",
        "isRunnable",
        "CpuProfile",
        "record",
        "CpuProfile",
        "record",
        "recordInThread",
        "CpuProfile",
        "call",
        "recordInThread",
        "mainClassName"
    ],
    "classes": [
        "CpuProfile",
        "Word",
        "StringPair"
    ]
}