{
    "identifiers": [
        "abc",
        "ABCMeta",
        "abstractmethod",
        "superdesk",
        "etree",
        "etree",
        "superdesk",
        "locators",
        "locators",
        "find_cities",
        "superdesk",
        "metadata",
        "item",
        "Priority",
        "metaclass",
        "ABCMeta",
        "abstractmethod",
        "article",
        "NotImplementedError",
        "item",
        "city",
        "text",
        "city",
        "find_cities",
        "c",
        "c",
        "cities",
        "c",
        "city",
        "item",
        "located",
        "len",
        "located",
        "city",
        "city",
        "text",
        "item",
        "text",
        "source_priority",
        "source_priority",
        "source_priority",
        "isdigit",
        "source_priority",
        "Priority",
        "values",
        "source_priority",
        "Priority",
        "Ordinary",
        "value",
        "FeedParser",
        "metaclass",
        "ABCMeta",
        "abstractmethod",
        "xml",
        "provider",
        "NotImplementedError",
        "tag",
        "ns",
        "ns",
        "root",
        "tag",
        "rsplit",
        "lstrip",
        "ns",
        "ns",
        "etree",
        "QName",
        "ns",
        "tag",
        "FeedParser",
        "metaclass",
        "ABCMeta",
        "abstractmethod",
        "file_path",
        "provider",
        "NotImplementedError",
        "FeedParser",
        "metaclass",
        "ABCMeta",
        "abstractmethod",
        "data",
        "provider",
        "NotImplementedError",
        "superdesk",
        "io",
        "feed_parsers",
        "anpa",
        "superdesk",
        "io",
        "feed_parsers",
        "iptc7901",
        "superdesk",
        "io",
        "feed_parsers",
        "newsml_1_2",
        "superdesk",
        "io",
        "feed_parsers",
        "newsml_2_0",
        "superdesk",
        "io",
        "feed_parsers",
        "nitf",
        "superdesk",
        "io",
        "feed_parsers",
        "rfc822",
        "superdesk",
        "io",
        "feed_parsers",
        "wenn_parser",
        "superdesk",
        "io",
        "feed_parsers",
        "zczc"
    ],
    "literals": [
        "'dateline'",
        "'city'",
        "'dateline'",
        "'located'",
        "'city_code'",
        "'city'",
        "'tz'",
        "'UTC'",
        "'dateline'",
        "'city'",
        "'dateline'",
        "'text'",
        "'}'",
        "'{'",
        "'xml'",
        "'http://www.w3.org/XML/1998/namespace'"
    ],
    "variables": [
        "item",
        "cities",
        "located",
        "root",
        "ns",
        "ns"
    ],
    "comments": [
        "-*- coding: utf-8; -*-",
        "",
        "This file is part of Superdesk.",
        "",
        "Copyright 2013, 2014 Sourcefabric z.u. and contributors.",
        "",
        "For the full copyright and license information, please see the",
        "AUTHORS and LICENSE files distributed with this source code, or",
        "at https://www.sourcefabric.org/superdesk/license",
        "must be imported for registration"
    ],
    "docstrings": [
        "\"\"\"\n    Base class for a Feed Parser.\n\n    A Feed Parser class must have the following attributes:\n        1. `NAME` - unique name under which to register the class.\n    \"\"\"",
        "\"\"\"\n        Sub-classes must override this method and tell whether it can parse the given article.\n\n        :param article: article\n        :return: True if the feed parser can parse, False otherwise.\n        :rtype: bool\n        \"\"\"",
        "\"\"\"\n        Sets the 'dateline' to the article identified by item. If city is passed then the system checks if city is\n        available in Cities collection. If city is not found in Cities collection then dateline's located is set with\n        default values.\n\n        :param item: article.\n        :type item: dict\n        :param city: Name of the city, if passed the system will search in Cities collection.\n        :type city: str\n        :param text: dateline in full. For example, \"STOCKHOLM, Aug 29, 2014\"\n        :type text: str\n        \"\"\"",
        "\"\"\"\n        Maps the source priority to superdesk priority\n\n        :param source_priority:\n        :type source_priority: str\n\n        :return: priority of the item\n        :rtype int\n        \"\"\"",
        "\"\"\"\n    Base class for Feed Parsers which can parse the XML Content.\n    \"\"\"",
        "\"\"\"\n        Parse the ingest XML and extracts the relevant elements/attributes values from the XML.\n\n        :param xml: XML String to parse\n        :type xml: str\n        :param provider: Ingest Provider Details\n        :type provider: dict having properties defined in\n                        :py:class: `superdesk.io.ingest_provider_model.IngestProviderResource`\n        :return: parsed data as dict.\n        :rtype: dict having properties defined in :py:mod: `superdesk.metadata.item`\n        \"\"\"",
        "\"\"\"\n        Return the Qualified Name of given XML tag.\n\n        :param tag: XML Tag\n        :type tag: str\n        :param ns: Namespace to be used for generating Qualified Name, defaults to None.\n        :type ns: str\n        :return: Qualified Name of tag\n        :rtype: str\n        \"\"\"",
        "\"\"\"\n    Base class for Feed Parsers which can parse the content in a file.\n    \"\"\"",
        "\"\"\"\n        Parse the ingest XML and extracts the relevant elements/attributes values from the XML.\n\n        :param file_path: absolute path of the file\n        :type file_path: str\n        :param provider: Ingest Provider Details, defaults to None.\n        :type provider: dict having properties defined in\n                        :py:class: `superdesk.io.ingest_provider_model.IngestProviderResource`\n        :return: parsed data as dict.\n        :rtype: dict having properties defined in :py:mod: `superdesk.metadata.item`\n        \"\"\"",
        "\"\"\"\n    Base class for Feed Parsers which can parse email message.\n    \"\"\"",
        "\"\"\"\n        Feed Parsers which can ingest articles from an email must override this method and extracts the relevant\n        elements/attributes values from the email message.\n\n        :param data:\n        :type data: dict\n        :param provider: Ingest Provider Details\n        :type provider: dict having properties defined in\n                        :py:class: `superdesk.io.ingest_provider_model.IngestProviderResource`\n        :return: parsed data as dict.\n        :rtype: dict having properties defined in :py:mod: `superdesk.metadata.item`\n        \"\"\""
    ],
    "functions": [
        "can_parse",
        "set_dateline",
        "map_priority",
        "parse_xml",
        "qname",
        "parse_file",
        "parse_email"
    ],
    "classes": [
        "FeedParser",
        "XMLFeedParser",
        "FileFeedParser",
        "EmailFeedParser"
    ]
}