{
    "identifiers": [
        "tape",
        "tape",
        "name",
        "cb",
        "tape",
        "tape",
        "name",
        "opts",
        "tape",
        "cb",
        "tape",
        "tape",
        "cb",
        "tape",
        "tape",
        "opts",
        "tape",
        "cb",
        "tape",
        "tape",
        "test",
        "skip",
        "name",
        "cb",
        "tape",
        "only",
        "name",
        "cb",
        "tape",
        "createHarness",
        "tape",
        "createStream",
        "opts",
        "tape",
        "NodeJS",
        "name",
        "cb",
        "tape",
        "n",
        "err",
        "msg",
        "msg",
        "ms",
        "msg",
        "value",
        "msg",
        "value",
        "msg",
        "value",
        "msg",
        "value",
        "msg",
        "value",
        "msg",
        "value",
        "msg",
        "err",
        "msg",
        "err",
        "msg",
        "err",
        "msg",
        "err",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "a",
        "b",
        "msg",
        "fn",
        "msg",
        "fn",
        "exceptionExpected",
        "msg",
        "fn",
        "msg",
        "fn",
        "exceptionExpected",
        "msg",
        "msg"
    ],
    "literals": [
        "'tape'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [
        "Type definitions for tape v4.2.2",
        "Project: https://github.com/substack/tape",
        "Definitions by: Bart van der Schoor <https://github.com/Bartvds>, Haoqun Jiang <https://github.com/sodatea>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "<reference path=\"../node/node.d.ts\" />",
        "See tape.skip.",
        "Set a timeout for the test, after which it will fail. See tape.timeoutAfter."
    ],
    "docstrings": [
        "* Create a new test with an optional name string and optional opts object.\n\t * cb(t) fires with the new test object t once all preceeding tests have finished.\n\t * Tests execute serially.",
        "* Available opts options for the tape function.",
        "* Options for the createStream function.",
        "* Generate a new test that will be skipped over.",
        "* Like test(name, cb) except if you use .only this is the only test case that will run for the entire process, all other test cases using tape will be ignored.",
        "* Create a new test harness instance, which is a function like test(), but with a new pending stack and test state.",
        "* Create a stream of output, bypassing the default output stream that writes messages to console.log().\n\t\t * By default stream will be a text stream of TAP output, but you can get an object stream instead by setting opts.objectMode to true.",
        "* Create a subtest with a new test handle st from cb(st) inside the current test.\n\t\t\t * cb(st) will only fire when t finishes.\n\t\t\t * Additional tests queued up after t will not be run until all subtests finish.",
        "* Declare that n assertions should be run. end() will be called automatically after the nth assertion.\n\t\t\t * If there are any more assertions after the nth, or after end() is called, they will generate errors.",
        "* Declare the end of a test explicitly.\n\t\t\t * If err is passed in t.end will assert that it is falsey.",
        "* Generate a failing assertion with a message msg.",
        "* Generate a passing assertion with a message msg.",
        "* Automatically timeout the test after X ms.",
        "* Generate an assertion that will be skipped over.",
        "* Assert that value is truthy with an optional description message msg.",
        "* Assert that value is falsy with an optional description message msg.",
        "* Assert that err is falsy.\n\t\t\t * If err is non-falsy, use its err.message as the description message.",
        "* Assert that a === b with an optional description msg.",
        "* Assert that a !== b with an optional description msg.",
        "* Assert that a and b have the same structure and nested values using node's deepEqual() algorithm with strict comparisons (===) on leaf nodes and an optional description msg.",
        "* Assert that a and b do not have the same structure and nested values using node's deepEqual() algorithm with strict comparisons (===) on leaf nodes and an optional description msg.",
        "* Assert that a and b have the same structure and nested values using node's deepEqual() algorithm with loose comparisons (==) on leaf nodes and an optional description msg.",
        "* Assert that a and b do not have the same structure and nested values using node's deepEqual() algorithm with loose comparisons (==) on leaf nodes and an optional description msg.",
        "* Assert that the function call fn() throws an exception.\n\t\t\t * expected, if present, must be a RegExp or Function, which is used to test the exception object.",
        "* Assert that the function call fn() does not throw an exception.",
        "* Print a message without breaking the tap output.\n\t\t\t * (Useful when using e.g. tap-colorize where output is buffered & console.log will print in incorrect order vis-a-vis tap output.)"
    ],
    "functions": [],
    "classes": []
}