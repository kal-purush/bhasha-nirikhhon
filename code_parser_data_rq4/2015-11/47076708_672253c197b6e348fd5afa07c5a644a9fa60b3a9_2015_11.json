{
    "identifiers": [
        "ReactNode",
        "ReactElement",
        "i",
        "hash",
        "hash",
        "i",
        "hash",
        "key",
        "x",
        "stringHash",
        "x",
        "k",
        "k",
        "x",
        "k",
        "style",
        "style",
        "style",
        "style",
        "styleHash",
        "style",
        "k",
        "style",
        "n",
        "k",
        "style",
        "k",
        "className",
        "className",
        "n",
        "className",
        "className",
        "emitter",
        "h",
        "style",
        "h",
        "style",
        "h",
        "React",
        "node",
        "node",
        "React",
        "node",
        "x",
        "processStyleProperties",
        "h",
        "React",
        "x",
        "React",
        "node",
        "generateStyleSheetForElement",
        "h",
        "React",
        "node",
        "node",
        "h",
        "React",
        "el",
        "el",
        "oldProps",
        "oldProps",
        "oldChildren",
        "processStyleProperties",
        "h",
        "React",
        "oldChildren",
        "style",
        "oldProps",
        "emitStyle",
        "h",
        "style",
        "newProps",
        "newChildren",
        "el",
        "React",
        "el",
        "newProps",
        "newChildren"
    ],
    "literals": [
        "\"react\"",
        "string",
        "string",
        "\"\"",
        "string",
        "string",
        "string",
        "\"style\"",
        "\"text/css\"",
        "string",
        "\"c\"",
        "\"div\"",
        "\".\"",
        "\" {\"",
        "\"}\"",
        "string"
    ],
    "variables": [
        "hash",
        "i",
        "style",
        "className",
        "n",
        "oldProps",
        "oldChildren",
        "style",
        "newChildren",
        "newProps"
    ],
    "comments": [
        "We're not actually importing React, just the types.",
        "A simple string hash function.",
        "JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n     * integers. Since we want the results to be always positive, convert the\n     * signed int to an unsigned by doing an unsigned bitshift.",
        "-----------------------------------------------------------------------------",
        "A Style is a plain JavaScript object whose keys correspond to CSS properties.",
        "It is the raw input which is passed to the emitter.",
        "",
        "It is similar to CSSStyleDeclaration, except it doesn't have any of the",
        "special attributes and methods.",
        "A deterministic hash function for Style. Because JavaScript doesn't guarantee",
        "ordering of the keys in an object, we have to sort them manually.",
        "",
        "TODO: Use a better hash function, one with more bits (at least 64).",
        "https://github.com/vkandy/jenkins-hash-js/blob/master/src/jenkins.js seems",
        "a good candidate which is small and has no dependencies.",
        "-----------------------------------------------------------------------------",
        "The Emitter is an interface which implements the logic of actually",
        "emitting the style objects. This can be either directly into the DOM",
        "CSSStyleSheet objects or into a file in the case of server-side rendering.",
        "^ The function takes a Style and returns a class name under which the",
        "style can be referenced.",
        "-----------------------------------------------------------------------------",
        "An DocumentEmitter which writes the styles directly into the DOM. It creates",
        "a new CSSStyleSheet object and inserts the rule into that.",
        "",
        "Rules are only ever inserted, old ones are not removed. This is a problem",
        "for <IE9 which has a limit on how many CSS rules it can have. And it wastes",
        "a bit of memory because we keep rules around which are potentially not",
        "needed.",
        "",
        "However, if the application doesn't use dynamic styles (eg. theming), then",
        "there is a fixed upper bound which the application will slowly approach but",
        "never exceed.",
        "",
        "It might still be useful to remove unused rules, however we should first",
        "measure the performance of the two approaches and then decide whether the",
        "tradeoff is worth it or not.",
        "^ The DOM StyleSheet into which we insert the rules. It is created",
        "in the constructor.",
        "^ We keep track of which rules (based on their hash) we've already",
        "inserted. This is needed to avoid inserting the same rule multiple times.",
        "",
        "The CSSStyleSheet doesn't provide a good interface for determining if",
        "a particular rule is present or not.",
        "-----------------------------------------------------------------------------",
        "React Integration",
        "-----------------------------------------------------------------------------",
        "",
        "'processStyleProperties' walks through a ReactNode tree and emits styles",
        "into the handle. The new tree has all 'style' props replaced with",
        "'className'.",
        "Go through a React node, recursively, and generate class rules out of",
        "'style' properties. Removes the 'style' property and replaces it with",
        "the generated 'className'.",
        "string | number | boolean | {}",
        "Only set 'className' if the old props have a style and no className.",
        "Users still may have a reason to manually set className if they use an",
        "external stylesheet (eg. bootstrap, or an icon set).",
        "Avoid cloning the element if neither the props nor the children have",
        "changed."
    ],
    "docstrings": [],
    "functions": [
        "stringHash",
        "styleHash",
        "emitStyle",
        "emitStyle",
        "processStyleProperties",
        "generateStyleSheetForElement"
    ],
    "classes": [
        "DocumentEmitter",
        "Handle"
    ]
}