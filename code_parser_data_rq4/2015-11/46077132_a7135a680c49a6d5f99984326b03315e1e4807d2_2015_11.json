{
    "identifiers": [
        "vehicle",
        "moto",
        "drive",
        "dummyDriver",
        "stubDriver",
        "spyVehicle",
        "fakeDriver",
        "mockDriver",
        "moto",
        "vehicle",
        "dummyDriver",
        "stubDriver",
        "spyVehicle",
        "fakeDriver",
        "mockDriver",
        "describe",
        "it",
        "drive",
        "motogp",
        "dummyDriver1",
        "result",
        "describe",
        "it",
        "drive",
        "motogp",
        "stubDriver1",
        "result",
        "describe",
        "it",
        "drive",
        "spyVehicle1",
        "stubDriver1",
        "drive",
        "spyVehicle1",
        "stubDriver1",
        "drive",
        "spyVehicle1",
        "stubDriver1",
        "spyVehicle1",
        "result",
        "describe",
        "it",
        "fakeDriver1",
        "carro",
        "carro",
        "result",
        "describe",
        "it",
        "mockDriver1",
        "carro"
    ],
    "literals": [
        "\"assert\"",
        "'./vehicle'",
        "'./moto'",
        "'./drive'",
        "'./dummyDriver'",
        "'./stubDriver'",
        "'./spyVehicle'",
        "'./fakeDriver'",
        "'./mockDriver'",
        "'Should Stop Engine (Dummy)'",
        "'Should return false'",
        "'Should Start Engine (Stub)'",
        "'Should return true'",
        "'Count Number of Starts Engine (Spy)'",
        "'Should return 2'",
        "'Clean Vehicle (Fake)'",
        "'Should return true'",
        "'Clean Car (Mock)'",
        "'Should Not throw exception'"
    ],
    "variables": [
        "motogp",
        "carro",
        "dummyDriver1",
        "stubDriver1",
        "spyVehicle1",
        "fakeDriver1",
        "mockDriver1",
        "result",
        "result",
        "result",
        "result"
    ],
    "comments": [
        "<reference path=\"./typings/node/node.d.ts\" />",
        "<reference path=\"./typings/mocha/mocha.d.ts\" />",
        "Dummy\n\t\t\n\t\tDummy does no action, returns whats closest to 0 or null\n\t\tPlaceholder required to pass test",
        "Stub\n\t\t\n\t\tStub is a step up from a dummy\n\t\tImplements an interface but returns canned responses\n\t\t\n\t\tIn this case our stub always returns A as License Type",
        "Spy\n\t\t\n\t\tSpy type of stub, does no external action, remembers certain function, what function was called, \n\t\thow many times was it called, records facts of their invocation\n\t\t\n\t\tIn this example our spy keeps a record of how many times the engine is started",
        "Fake\n\t\t\n\t\tFakes are a step up from a stub, they do not only return a canned response but have working\n\t\timplementations but usually take some shortcut\n\t\t\n\t\tIn this case our fake not only returns A when ask for a license type but also implements a working\n\t\tclean vehicle method which of course takes a shortcut to accomplish",
        "Mock\n\t\t\n\t\tMocks are pre-programmed with expectations which form a specification of the calls they are expected to receive. \n\t\tMocks test behavior\n\t\t\n\t\tFor our mock, it expects to receive true when CleanVehicle is called, if not then mockDriver throws expection, for out \n\t\ttest to pass we need to check that no exception is thrown"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}