{
    "identifiers": [
        "Collections",
        "Generic",
        "Net",
        "Numerics",
        "Text",
        "BigInteger",
        "bigint",
        "bigint",
        "ToByteArray",
        "Length",
        "StringBuilder",
        "Length",
        "Convert",
        "ToString",
        "idx",
        "binary",
        "bigint",
        "Sign",
        "base2",
        "Append",
        "base2",
        "Append",
        "binary",
        "idx",
        "idx",
        "idx",
        "base2",
        "Append",
        "Convert",
        "ToString",
        "idx",
        "PadLeft",
        "base2",
        "ToString",
        "BigInteger",
        "bigint",
        "bigint",
        "ToString",
        "BigInteger",
        "bigint",
        "bigint",
        "ToByteArray",
        "Length",
        "StringBuilder",
        "Length",
        "Length",
        "extra",
        "extra",
        "extra",
        "extra",
        "int24",
        "int24",
        "idx",
        "Convert",
        "ToString",
        "int24",
        "octal",
        "bigint",
        "Sign",
        "base8",
        "Append",
        "base8",
        "Append",
        "octal",
        "idx",
        "idx",
        "int24",
        "idx",
        "idx",
        "idx",
        "base8",
        "Append",
        "Convert",
        "ToString",
        "int24",
        "PadLeft",
        "base8",
        "ToString",
        "BigInteger",
        "input",
        "width",
        "input",
        "ToByteArray",
        "width",
        "Copy",
        "work",
        "Length",
        "i",
        "work",
        "Length",
        "i",
        "result",
        "Add",
        "work",
        "i",
        "result",
        "Add",
        "BigInteger",
        "result",
        "ToArray"
    ],
    "literals": [
        "\"X\""
    ],
    "variables": [
        "idx",
        "base2",
        "binary",
        "idx",
        "base8",
        "extra",
        "int24",
        "octal",
        "result",
        "work",
        "i"
    ],
    "comments": [
        "Extension methods to convert <see cref=\"System.Numerics.BigInteger\"/>",
        "instances to hexadecimal, octal, and binary strings.",
        "</summary>",
        "Converts a <see cref=\"BigInteger\"/> to a binary string.",
        "</summary>",
        "<param name=\"bigint\">A <see cref=\"BigInteger\"/>.</param>",
        "<returns>",
        "A <see cref=\"System.String\"/> containing a binary",
        "representation of the supplied <see cref=\"BigInteger\"/>.",
        "</returns>",
        "Create a StringBuilder having appropriate capacity.",
        "Convert first byte to binary.",
        "Ensure leading zero exists if value is positive.",
        "Append binary string to StringBuilder.",
        "Convert remaining bytes adding leading zeros.",
        "Converts a <see cref=\"BigInteger\"/> to a hexadecimal string.",
        "</summary>",
        "<param name=\"bigint\">A <see cref=\"BigInteger\"/>.</param>",
        "<returns>",
        "A <see cref=\"System.String\"/> containing a hexadecimal",
        "representation of the supplied <see cref=\"BigInteger\"/>.",
        "</returns>",
        "Converts a <see cref=\"BigInteger\"/> to a octal string.",
        "</summary>",
        "<param name=\"bigint\">A <see cref=\"BigInteger\"/>.</param>",
        "<returns>",
        "A <see cref=\"System.String\"/> containing an octal",
        "representation of the supplied <see cref=\"BigInteger\"/>.",
        "</returns>",
        "Create a StringBuilder having appropriate capacity.",
        "Calculate how many bytes are extra when byte array is split",
        "into three-byte (24-bit) chunks.",
        "If no bytes are extra, use three bytes for first chunk.",
        "Convert first chunk (24-bits) to integer value.",
        "Convert 24-bit integer to octal without adding leading zeros.",
        "Ensure leading zero exists if value is positive.",
        "Append first converted chunk to StringBuilder.",
        "Convert remaining 24-bit chunks, adding leading zeros.",
        "",
        "Reverse a Positive BigInteger ONLY",
        "Bitwise ~ operator",
        "",
        "Input  : FF FF FF FF",
        "Width  : 4",
        "Result : 00 00 00 00",
        "",
        "",
        "Input  : 00 00 00 00",
        "Width  : 4",
        "Result : FF FF FF FF",
        "",
        "Input  : FF FF FF FF",
        "Width  : 8",
        "Result : FF FF FF FF 00 00 00 00",
        "",
        "",
        "Input  : 00 00 00 00",
        "Width  : 8",
        "Result : FF FF FF FF FF FF FF FF",
        "",
        "</summary>",
        "<param name=\"input\"></param>",
        "<param name=\"width\"></param>",
        "<returns></returns>",
        "Length -1 : positive BigInteger",
        "positive BigInteger"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "ToBinaryString",
        "ToHexadecimalString",
        "ToOctalString",
        "BigInteger",
        "PositiveReverse"
    ],
    "classes": [
        "BigIntegerExtensions"
    ]
}