{
    "identifiers": [
        "Diagnostics",
        "CodeAnalysis",
        "SuppressMessage",
        "Scope",
        "Target",
        "SuppressMessage",
        "Scope",
        "Target",
        "LIBLOG_PROVIDERS_ONLY",
        "Example",
        "LibLog",
        "Example",
        "Logging",
        "Collections",
        "Generic",
        "Diagnostics",
        "CodeAnalysis",
        "LIBLOG_PROVIDERS_ONLY",
        "Example",
        "LibLog",
        "LogProviders",
        "Example",
        "Logging",
        "LogProviders",
        "LIBLOG_PROVIDERS_ONLY",
        "Diagnostics",
        "LIBLOG_PORTABLE",
        "Runtime",
        "CompilerServices",
        "LIBLOG_PROVIDERS_ONLY",
        "Logger",
        "LogLevel",
        "logLevel",
        "Func",
        "messageFunc",
        "exception",
        "formatParameters",
        "LIBLOG_PROVIDERS_ONLY",
        "LIBLOG_PUBLIC",
        "ILog",
        "LogLevel",
        "logLevel",
        "Func",
        "messageFunc",
        "exception",
        "formatParameters",
        "LIBLOG_PROVIDERS_ONLY",
        "LogLevel",
        "Trace",
        "Debug",
        "Info",
        "Warn",
        "Fatal",
        "LIBLOG_PROVIDERS_ONLY",
        "LIBLOG_PUBLIC",
        "ILog",
        "logger",
        "GuardAgainstNullLogger",
        "logger",
        "logger",
        "Log",
        "LogLevel",
        "Debug",
        "ILog",
        "logger",
        "GuardAgainstNullLogger",
        "logger",
        "logger",
        "Log",
        "LogLevel",
        "ILog",
        "logger",
        "GuardAgainstNullLogger",
        "logger",
        "logger",
        "Log",
        "LogLevel",
        "Fatal",
        "ILog",
        "logger",
        "GuardAgainstNullLogger",
        "logger",
        "logger",
        "Log",
        "LogLevel",
        "Info",
        "ILog",
        "logger",
        "GuardAgainstNullLogger",
        "logger",
        "logger",
        "Log",
        "LogLevel",
        "Trace",
        "ILog",
        "logger",
        "GuardAgainstNullLogger",
        "logger",
        "logger",
        "Log",
        "LogLevel",
        "Warn",
        "ILog",
        "logger",
        "Func",
        "messageFunc",
        "GuardAgainstNullLogger",
        "logger",
        "logger",
        "Log",
        "LogLevel",
        "Debug",
        "messageFunc",
        "ILog",
        "logger",
        "message",
        "logger",
        "IsDebugEnabled",
        "logger",
        "Log",
        "LogLevel",
        "Debug",
        "message",
        "AsFunc",
        "ILog",
        "logger",
        "message",
        "args",
        "logger",
        "IsDebugEnabled",
        "logger",
        "LogFormat",
        "LogLevel",
        "Debug",
        "message",
        "args",
        "ILog",
        "logger",
        "message",
        "exception",
        "logger",
        "IsDebugEnabled",
        "logger",
        "Log",
        "LogLevel",
        "Debug",
        "message",
        "AsFunc",
        "exception",
        "ILog",
        "logger",
        "message",
        "exception",
        "formatParams",
        "logger",
        "IsDebugEnabled",
        "logger",
        "Log",
        "LogLevel",
        "Debug",
        "message",
        "AsFunc",
        "exception",
        "formatParams",
        "ILog",
        "logger",
        "Func",
        "messageFunc",
        "GuardAgainstNullLogger",
        "logger",
        "logger",
        "Log",
        "LogLevel",
        "messageFunc",
        "ILog",
        "logger",
        "message",
        "logger",
        "IsErrorEnabled",
        "logger",
        "Log",
        "LogLevel",
        "message",
        "AsFunc",
        "ILog",
        "logger",
        "message",
        "args",
        "logger",
        "IsErrorEnabled",
        "logger",
        "LogFormat",
        "LogLevel",
        "message",
        "args",
        "ILog",
        "logger",
        "message",
        "exception",
        "formatParams",
        "logger",
        "IsErrorEnabled",
        "logger",
        "Log",
        "LogLevel",
        "message",
        "AsFunc",
        "exception",
        "formatParams",
        "ILog",
        "logger",
        "Func",
        "messageFunc",
        "logger",
        "Log",
        "LogLevel",
        "Fatal",
        "messageFunc",
        "ILog",
        "logger",
        "message",
        "logger",
        "IsFatalEnabled",
        "logger",
        "Log",
        "LogLevel",
        "Fatal",
        "message",
        "AsFunc",
        "ILog",
        "logger",
        "message",
        "args",
        "logger",
        "IsFatalEnabled",
        "logger",
        "LogFormat",
        "LogLevel",
        "Fatal",
        "message",
        "args",
        "ILog",
        "logger",
        "message",
        "exception",
        "formatParams",
        "logger",
        "IsFatalEnabled",
        "logger",
        "Log",
        "LogLevel",
        "Fatal",
        "message",
        "AsFunc",
        "exception",
        "formatParams",
        "ILog",
        "logger",
        "Func",
        "messageFunc",
        "GuardAgainstNullLogger",
        "logger",
        "logger",
        "Log",
        "LogLevel",
        "Info",
        "messageFunc",
        "ILog",
        "logger",
        "message",
        "logger",
        "IsInfoEnabled",
        "logger",
        "Log",
        "LogLevel",
        "Info",
        "message",
        "AsFunc",
        "ILog",
        "logger",
        "message",
        "args",
        "logger",
        "IsInfoEnabled",
        "logger",
        "LogFormat",
        "LogLevel",
        "Info",
        "message",
        "args",
        "ILog",
        "logger",
        "message",
        "exception",
        "formatParams",
        "logger",
        "IsInfoEnabled",
        "logger",
        "Log",
        "LogLevel",
        "Info",
        "message",
        "AsFunc",
        "exception",
        "formatParams",
        "ILog",
        "logger",
        "Func",
        "messageFunc",
        "GuardAgainstNullLogger",
        "logger",
        "logger",
        "Log",
        "LogLevel",
        "Trace",
        "messageFunc",
        "ILog",
        "logger",
        "message",
        "logger",
        "IsTraceEnabled",
        "logger",
        "Log",
        "LogLevel",
        "Trace",
        "message",
        "AsFunc",
        "ILog",
        "logger",
        "message",
        "args",
        "logger",
        "IsTraceEnabled",
        "logger",
        "LogFormat",
        "LogLevel",
        "Trace",
        "message",
        "args",
        "ILog",
        "logger",
        "message",
        "exception",
        "formatParams",
        "logger",
        "IsTraceEnabled",
        "logger",
        "Log",
        "LogLevel",
        "Trace",
        "message",
        "AsFunc",
        "exception",
        "formatParams",
        "ILog",
        "logger",
        "Func",
        "messageFunc",
        "GuardAgainstNullLogger",
        "logger",
        "logger",
        "Log",
        "LogLevel",
        "Warn",
        "messageFunc",
        "ILog",
        "logger",
        "message",
        "logger",
        "IsWarnEnabled",
        "logger",
        "Log",
        "LogLevel",
        "Warn",
        "message",
        "AsFunc",
        "ILog",
        "logger",
        "message",
        "args",
        "logger",
        "IsWarnEnabled",
        "logger",
        "LogFormat",
        "LogLevel",
        "Warn",
        "message",
        "args",
        "ILog",
        "logger",
        "message",
        "exception",
        "formatParams",
        "logger",
        "IsWarnEnabled",
        "logger",
        "Log",
        "LogLevel",
        "Warn",
        "message",
        "AsFunc",
        "exception",
        "formatParams",
        "ILog",
        "logger",
        "logger",
        "ArgumentNullException",
        "ILog",
        "logger",
        "LogLevel",
        "logLevel",
        "message",
        "args",
        "logger",
        "Log",
        "logLevel",
        "message",
        "AsFunc",
        "args",
        "Func",
        "T",
        "T",
        "T",
        "value",
        "T",
        "value",
        "Return",
        "T",
        "T",
        "value",
        "value",
        "LIBLOG_PROVIDERS_ONLY",
        "ILogProvider",
        "name",
        "message",
        "key",
        "value",
        "LIBLOG_PROVIDERS_ONLY",
        "LogProvider",
        "LIBLOG_PROVIDERS_ONLY",
        "Action",
        "ILogProvider",
        "SuppressMessage",
        "IsDisabled",
        "ILogProvider",
        "logProvider",
        "s_currentLogProvider",
        "logProvider",
        "RaiseOnCurrentLogProviderSet",
        "Action",
        "ILogProvider",
        "s_onCurrentLogProviderSet",
        "value",
        "RaiseOnCurrentLogProviderSet",
        "s_currentLogProvider",
        "LIBLOG_PUBLIC",
        "T",
        "GetLogger",
        "T",
        "LIBLOG_PORTABLE",
        "MethodImpl",
        "MethodImplOptions",
        "NoInlining",
        "StackFrame",
        "GetLogger",
        "stackFrame",
        "GetMethod",
        "DeclaringType",
        "LIBLOG_PUBLIC",
        "Type",
        "GetLogger",
        "FullName",
        "LIBLOG_PUBLIC",
        "name",
        "CurrentLogProvider",
        "ResolveLogProvider",
        "logProvider",
        "NoOpLogger",
        "Instance",
        "ILog",
        "LoggerExecutionWrapper",
        "logProvider",
        "GetLogger",
        "name",
        "IsDisabled",
        "SuppressMessage",
        "MessageId",
        "message",
        "CurrentLogProvider",
        "DisposableAction",
        "CurrentLogProvider",
        "OpenNestedContext",
        "message",
        "SuppressMessage",
        "MessageId",
        "key",
        "value",
        "CurrentLogProvider",
        "DisposableAction",
        "CurrentLogProvider",
        "OpenMappedContext",
        "key",
        "value",
        "LIBLOG_PROVIDERS_ONLY",
        "IsLoggerAvailable",
        "LIBLOG_PROVIDERS_ONLY",
        "ILogProvider",
        "CreateLogProvider",
        "LIBLOG_PROVIDERS_ONLY",
        "Tuple",
        "IsLoggerAvailable",
        "CreateLogProvider",
        "Tuple",
        "IsLoggerAvailable",
        "CreateLogProvider",
        "Tuple",
        "IsLoggerAvailable",
        "CreateLogProvider",
        "SerilogLogProvider",
        "IsLoggerAvailable",
        "SerilogLogProvider",
        "Tuple",
        "IsLoggerAvailable",
        "CreateLogProvider",
        "NLogLogProvider",
        "IsLoggerAvailable",
        "NLogLogProvider",
        "Tuple",
        "IsLoggerAvailable",
        "CreateLogProvider",
        "Log4NetLogProvider",
        "IsLoggerAvailable",
        "Log4NetLogProvider",
        "Tuple",
        "IsLoggerAvailable",
        "CreateLogProvider",
        "EntLibLogProvider",
        "IsLoggerAvailable",
        "EntLibLogProvider",
        "Tuple",
        "IsLoggerAvailable",
        "CreateLogProvider",
        "LoupeLogProvider",
        "IsLoggerAvailable",
        "LoupeLogProvider",
        "LIBLOG_PROVIDERS_ONLY",
        "s_onCurrentLogProviderSet",
        "s_onCurrentLogProviderSet",
        "s_currentLogProvider",
        "SuppressMessage",
        "MessageId",
        "SuppressMessage",
        "providerResolver",
        "LogProviderResolvers",
        "providerResolver",
        "Item1",
        "providerResolver",
        "Item2",
        "ex",
        "LIBLOG_PORTABLE",
        "Debug",
        "WriteLine",
        "WriteLine",
        "LogProvider",
        "GetAssemblyPortable",
        "FullName",
        "ex",
        "LIBLOG_PROVIDERS_ONLY",
        "ILog",
        "NoOpLogger",
        "LogLevel",
        "logLevel",
        "Func",
        "messageFunc",
        "exception",
        "formatParameters",
        "LIBLOG_PROVIDERS_ONLY",
        "ILog",
        "Func",
        "Logger",
        "logger",
        "Func",
        "getIsDisabled",
        "_logger",
        "logger",
        "_getIsDisabled",
        "getIsDisabled",
        "_logger",
        "SuppressMessage",
        "LogLevel",
        "logLevel",
        "Func",
        "messageFunc",
        "exception",
        "formatParameters",
        "_getIsDisabled",
        "LIBLOG_PORTABLE",
        "Environment",
        "GetEnvironmentVariable",
        "LogProvider",
        "DisableLoggingEnvironmentVariable",
        "envVar",
        "envVar",
        "Equals",
        "StringComparison",
        "OrdinalIgnoreCase",
        "messageFunc",
        "_logger",
        "logLevel",
        "Func",
        "messageFunc",
        "ex",
        "Log",
        "LogLevel",
        "FailedToGenerateLogMessage",
        "ex",
        "_logger",
        "logLevel",
        "wrappedMessageFunc",
        "exception",
        "formatParameters",
        "LIBLOG_PROVIDERS_ONLY",
        "Example",
        "LibLog",
        "LogProviders",
        "Example",
        "Logging",
        "LogProviders",
        "Collections",
        "Generic",
        "Diagnostics",
        "CodeAnalysis",
        "LIBLOG_PORTABLE",
        "Diagnostics",
        "Globalization",
        "Linq",
        "Linq",
        "Expressions",
        "Reflection",
        "LIBLOG_PORTABLE",
        "Text",
        "Text",
        "RegularExpressions",
        "ILogProvider",
        "OpenNdc",
        "message",
        "OpenMdc",
        "key",
        "value",
        "Lazy",
        "OpenNdc",
        "Lazy",
        "OpenMdc",
        "DisposableAction",
        "_lazyOpenNdcMethod",
        "Lazy",
        "OpenNdc",
        "GetOpenNdcMethod",
        "_lazyOpenMdcMethod",
        "Lazy",
        "OpenMdc",
        "GetOpenMdcMethod",
        "name",
        "message",
        "_lazyOpenNdcMethod",
        "Value",
        "message",
        "key",
        "value",
        "_lazyOpenMdcMethod",
        "Value",
        "key",
        "value",
        "NoopDisposableInstance",
        "_",
        "__",
        "NoopDisposableInstance",
        "LogProviderBase",
        "Func",
        "SuppressMessage",
        "MessageId",
        "SuppressMessage",
        "MessageId",
        "IsLoggerAvailable",
        "InvalidOperationException",
        "_getLoggerByNameDelegate",
        "GetGetLoggerMethodCall",
        "s_providerIsAvailableOverride",
        "s_providerIsAvailableOverride",
        "value",
        "name",
        "NLogLogger",
        "_getLoggerByNameDelegate",
        "name",
        "Log",
        "ProviderIsAvailableOverride",
        "GetLogManagerType",
        "Type",
        "GetType",
        "ndcContextType",
        "GetMethodPortable",
        "Expression",
        "Parameter",
        "Expression",
        "Call",
        "pushMethod",
        "messageParam",
        "Expression",
        "Lambda",
        "OpenNdc",
        "pushMethodCall",
        "messageParam",
        "Compile",
        "Type",
        "GetType",
        "mdcContextType",
        "GetMethodPortable",
        "mdcContextType",
        "GetMethodPortable",
        "Expression",
        "Parameter",
        "Expression",
        "Parameter",
        "Expression",
        "Call",
        "setMethod",
        "keyParam",
        "valueParam",
        "Expression",
        "Call",
        "removeMethod",
        "keyParam",
        "Action",
        "Expression",
        "Lambda",
        "Action",
        "setMethodCall",
        "keyParam",
        "valueParam",
        "Compile",
        "Action",
        "Expression",
        "Lambda",
        "Action",
        "removeMethodCall",
        "keyParam",
        "Compile",
        "key",
        "value",
        "key",
        "value",
        "DisposableAction",
        "remove",
        "key",
        "Type",
        "GetType",
        "Func",
        "GetLogManagerType",
        "logManagerType",
        "GetMethodPortable",
        "Expression",
        "Parameter",
        "Expression",
        "Call",
        "method",
        "nameParam",
        "Expression",
        "Lambda",
        "Func",
        "methodCall",
        "nameParam",
        "Compile",
        "dynamic",
        "logger",
        "_logger",
        "logger",
        "SuppressMessage",
        "LogLevel",
        "logLevel",
        "Func",
        "messageFunc",
        "exception",
        "formatParameters",
        "messageFunc",
        "IsLogLevelEnable",
        "logLevel",
        "messageFunc",
        "LogMessageFormatter",
        "SimulateStructuredLogging",
        "messageFunc",
        "formatParameters",
        "exception",
        "LogException",
        "logLevel",
        "messageFunc",
        "exception",
        "logLevel",
        "LogLevel",
        "Debug",
        "_logger",
        "IsDebugEnabled",
        "_logger",
        "Debug",
        "messageFunc",
        "LogLevel",
        "Info",
        "_logger",
        "IsInfoEnabled",
        "_logger",
        "Info",
        "messageFunc",
        "LogLevel",
        "Warn",
        "_logger",
        "IsWarnEnabled",
        "_logger",
        "Warn",
        "messageFunc",
        "LogLevel",
        "_logger",
        "IsErrorEnabled",
        "_logger",
        "messageFunc",
        "LogLevel",
        "Fatal",
        "_logger",
        "IsFatalEnabled",
        "_logger",
        "Fatal",
        "messageFunc",
        "_logger",
        "IsTraceEnabled",
        "_logger",
        "Trace",
        "messageFunc",
        "SuppressMessage",
        "LogLevel",
        "logLevel",
        "Func",
        "messageFunc",
        "exception",
        "logLevel",
        "LogLevel",
        "Debug",
        "_logger",
        "IsDebugEnabled",
        "_logger",
        "DebugException",
        "messageFunc",
        "exception",
        "LogLevel",
        "Info",
        "_logger",
        "IsInfoEnabled",
        "_logger",
        "InfoException",
        "messageFunc",
        "exception",
        "LogLevel",
        "Warn",
        "_logger",
        "IsWarnEnabled",
        "_logger",
        "WarnException",
        "messageFunc",
        "exception",
        "LogLevel",
        "_logger",
        "IsErrorEnabled",
        "_logger",
        "ErrorException",
        "messageFunc",
        "exception",
        "LogLevel",
        "Fatal",
        "_logger",
        "IsFatalEnabled",
        "_logger",
        "FatalException",
        "messageFunc",
        "exception",
        "_logger",
        "IsTraceEnabled",
        "_logger",
        "TraceException",
        "messageFunc",
        "exception",
        "LogLevel",
        "logLevel",
        "logLevel",
        "LogLevel",
        "Debug",
        "_logger",
        "IsDebugEnabled",
        "LogLevel",
        "Info",
        "_logger",
        "IsInfoEnabled",
        "LogLevel",
        "Warn",
        "_logger",
        "IsWarnEnabled",
        "LogLevel",
        "_logger",
        "IsErrorEnabled",
        "LogLevel",
        "Fatal",
        "_logger",
        "IsFatalEnabled",
        "_logger",
        "IsTraceEnabled",
        "LogProviderBase",
        "Func",
        "SuppressMessage",
        "MessageId",
        "IsLoggerAvailable",
        "InvalidOperationException",
        "_getLoggerByNameDelegate",
        "GetGetLoggerMethodCall",
        "s_providerIsAvailableOverride",
        "s_providerIsAvailableOverride",
        "value",
        "name",
        "Log4NetLogger",
        "_getLoggerByNameDelegate",
        "name",
        "Log",
        "ProviderIsAvailableOverride",
        "GetLogManagerType",
        "Type",
        "GetType",
        "logicalThreadContextType",
        "GetPropertyPortable",
        "stacksProperty",
        "PropertyType",
        "logicalThreadContextStacksType",
        "GetPropertyPortable",
        "stacksIndexerProperty",
        "PropertyType",
        "stackType",
        "GetMethodPortable",
        "Expression",
        "Parameter",
        "Expression",
        "Call",
        "Expression",
        "Property",
        "Expression",
        "Property",
        "stacksProperty",
        "stacksIndexerProperty",
        "Expression",
        "Constant",
        "pushMethod",
        "messageParameter",
        "Expression",
        "Lambda",
        "OpenNdc",
        "callPushBody",
        "messageParameter",
        "Compile",
        "result",
        "Type",
        "GetType",
        "logicalThreadContextType",
        "GetPropertyPortable",
        "propertiesProperty",
        "PropertyType",
        "logicalThreadContextPropertiesType",
        "GetPropertyPortable",
        "logicalThreadContextPropertiesType",
        "GetMethodPortable",
        "Expression",
        "Parameter",
        "Expression",
        "Parameter",
        "Expression",
        "Property",
        "propertiesProperty",
        "Expression",
        "Assign",
        "Expression",
        "Property",
        "propertiesExpression",
        "propertiesIndexerProperty",
        "keyParam",
        "valueParam",
        "Expression",
        "Call",
        "propertiesExpression",
        "removeMethod",
        "keyParam",
        "Action",
        "Expression",
        "Lambda",
        "Action",
        "setProperties",
        "keyParam",
        "valueParam",
        "Compile",
        "Action",
        "Expression",
        "Lambda",
        "Action",
        "removeMethodCall",
        "keyParam",
        "Compile",
        "key",
        "value",
        "key",
        "value",
        "DisposableAction",
        "remove",
        "key",
        "Type",
        "GetType",
        "Func",
        "GetLogManagerType",
        "logManagerType",
        "GetMethodPortable",
        "Expression",
        "Parameter",
        "Expression",
        "Call",
        "method",
        "nameParam",
        "Expression",
        "Lambda",
        "Func",
        "methodCall",
        "nameParam",
        "Compile",
        "Func",
        "Action",
        "Type",
        "SuppressMessage",
        "MessageId",
        "dynamic",
        "logger",
        "_logger",
        "logger",
        "Logger",
        "Type",
        "GetType",
        "logEventLevelType",
        "InvalidOperationException",
        "logEventLevelType",
        "GetFieldsPortable",
        "ToList",
        "_levelDebug",
        "levelFields",
        "First",
        "x",
        "Name",
        "GetValue",
        "_levelInfo",
        "levelFields",
        "First",
        "x",
        "Name",
        "GetValue",
        "_levelWarn",
        "levelFields",
        "First",
        "x",
        "Name",
        "GetValue",
        "_levelError",
        "levelFields",
        "First",
        "x",
        "Name",
        "GetValue",
        "_levelFatal",
        "levelFields",
        "First",
        "x",
        "Name",
        "GetValue",
        "Type",
        "GetType",
        "loggerType",
        "InvalidOperationException",
        "loggerType",
        "GetMethodPortable",
        "logEventLevelType",
        "Expression",
        "Parameter",
        "Expression",
        "Convert",
        "instanceParam",
        "loggerType",
        "Expression",
        "Parameter",
        "Type",
        "Expression",
        "Parameter",
        "Expression",
        "Parameter",
        "Expression",
        "Convert",
        "levelParam",
        "logEventLevelType",
        "Expression",
        "Call",
        "instanceCast",
        "isEnabledMethodInfo",
        "levelCast",
        "_isEnabledForDelegate",
        "Expression",
        "Lambda",
        "Func",
        "isEnabledMethodCall",
        "instanceParam",
        "levelParam",
        "Compile",
        "loggerType",
        "GetMethodPortable",
        "Type",
        "logEventLevelType",
        "Expression",
        "Parameter",
        "Expression",
        "Call",
        "instanceCast",
        "writeExceptionMethodInfo",
        "callerStackBoundaryDeclaringTypeParam",
        "levelCast",
        "messageParam",
        "exceptionParam",
        "_logDelegate",
        "Expression",
        "Lambda",
        "Action",
        "Type",
        "writeMethodExp",
        "instanceParam",
        "callerStackBoundaryDeclaringTypeParam",
        "levelParam",
        "messageParam",
        "exceptionParam",
        "Compile",
        "LogLevel",
        "logLevel",
        "Func",
        "messageFunc",
        "exception",
        "formatParameters",
        "messageFunc",
        "IsLogLevelEnable",
        "logLevel",
        "IsLogLevelEnable",
        "logLevel",
        "messageFunc",
        "LogMessageFormatter",
        "SimulateStructuredLogging",
        "messageFunc",
        "formatParameters",
        "s_callerStackBoundaryType",
        "CallerStackBoundaryTypeSync",
        "LIBLOG_PORTABLE",
        "StackTrace",
        "GetType",
        "s_callerStackBoundaryType",
        "Type",
        "GetType",
        "i",
        "stack",
        "FrameCount",
        "i",
        "IsInTypeHierarchy",
        "thisType",
        "stack",
        "GetFrame",
        "i",
        "GetMethod",
        "DeclaringType",
        "s_callerStackBoundaryType",
        "stack",
        "GetFrame",
        "i",
        "GetMethod",
        "DeclaringType",
        "s_callerStackBoundaryType",
        "LoggerExecutionWrapper",
        "TranslateLevel",
        "logLevel",
        "_logDelegate",
        "_logger",
        "s_callerStackBoundaryType",
        "translatedLevel",
        "messageFunc",
        "exception",
        "Type",
        "currentType",
        "Type",
        "checkType",
        "currentType",
        "currentType",
        "currentType",
        "checkType",
        "currentType",
        "currentType",
        "GetBaseTypePortable",
        "LogLevel",
        "logLevel",
        "TranslateLevel",
        "logLevel",
        "_isEnabledForDelegate",
        "_logger",
        "level",
        "LogLevel",
        "logLevel",
        "logLevel",
        "LogLevel",
        "Trace",
        "LogLevel",
        "Debug",
        "_levelDebug",
        "LogLevel",
        "Info",
        "_levelInfo",
        "LogLevel",
        "Warn",
        "_levelWarn",
        "LogLevel",
        "_levelError",
        "LogLevel",
        "Fatal",
        "_levelFatal",
        "ArgumentOutOfRangeException",
        "logLevel",
        "LogProviderBase",
        "Action",
        "Func",
        "SuppressMessage",
        "LogEntryType",
        "Type",
        "GetType",
        "Format",
        "CultureInfo",
        "InvariantCulture",
        "TypeTemplate",
        "LoggerType",
        "Type",
        "GetType",
        "Format",
        "CultureInfo",
        "InvariantCulture",
        "TypeTemplate",
        "TraceEventTypeType",
        "TraceEventTypeValues",
        "Type",
        "LogEntryType",
        "TraceEventTypeType",
        "LoggerType",
        "WriteLogEntry",
        "GetWriteLogEntry",
        "ShouldLogEntry",
        "GetShouldLogEntry",
        "SuppressMessage",
        "MessageId",
        "IsLoggerAvailable",
        "InvalidOperationException",
        "s_providerIsAvailableOverride",
        "s_providerIsAvailableOverride",
        "value",
        "name",
        "EntLibLogger",
        "name",
        "WriteLogEntry",
        "ShouldLogEntry",
        "Log",
        "ProviderIsAvailableOverride",
        "TraceEventTypeType",
        "LogEntryType",
        "Action",
        "Expression",
        "Parameter",
        "Expression",
        "Parameter",
        "Expression",
        "Parameter",
        "GetWriteLogExpression",
        "messageParameter",
        "Expression",
        "Convert",
        "severityParameter",
        "TraceEventTypeType",
        "logNameParameter",
        "LoggerType",
        "GetMethodPortable",
        "LogEntryType",
        "Expression",
        "Call",
        "writeLogEntryMethod",
        "memberInit",
        "Expression",
        "Lambda",
        "Action",
        "writeLogEntryExpression",
        "logNameParameter",
        "messageParameter",
        "severityParameter",
        "Compile",
        "Func",
        "Expression",
        "Parameter",
        "Expression",
        "Parameter",
        "GetWriteLogExpression",
        "Expression",
        "Constant",
        "Expression",
        "Convert",
        "severityParameter",
        "TraceEventTypeType",
        "logNameParameter",
        "LoggerType",
        "GetMethodPortable",
        "LogEntryType",
        "Expression",
        "Call",
        "writeLogEntryMethod",
        "memberInit",
        "Expression",
        "Lambda",
        "Func",
        "writeLogEntryExpression",
        "logNameParameter",
        "severityParameter",
        "Compile",
        "Expression",
        "message",
        "Expression",
        "severityParameter",
        "ParameterExpression",
        "logNameParameter",
        "Expression",
        "MemberInit",
        "Expression",
        "New",
        "entryType",
        "Expression",
        "Bind",
        "entryType",
        "GetPropertyPortable",
        "message",
        "Expression",
        "Bind",
        "entryType",
        "GetPropertyPortable",
        "severityParameter",
        "Expression",
        "Bind",
        "entryType",
        "GetPropertyPortable",
        "Expression",
        "Property",
        "GetPropertyPortable",
        "Expression",
        "Bind",
        "entryType",
        "GetPropertyPortable",
        "Expression",
        "ListInit",
        "Expression",
        "New",
        "GetMethodPortable",
        "logNameParameter",
        "memberInit",
        "Action",
        "Func",
        "loggerName",
        "Action",
        "writeLog",
        "Func",
        "shouldLog",
        "_loggerName",
        "loggerName",
        "_writeLog",
        "writeLog",
        "_shouldLog",
        "shouldLog",
        "LogLevel",
        "logLevel",
        "Func",
        "messageFunc",
        "exception",
        "formatParameters",
        "MapSeverity",
        "logLevel",
        "messageFunc",
        "_shouldLog",
        "_loggerName",
        "severity",
        "messageFunc",
        "LogMessageFormatter",
        "SimulateStructuredLogging",
        "messageFunc",
        "formatParameters",
        "exception",
        "LogException",
        "logLevel",
        "messageFunc",
        "exception",
        "_writeLog",
        "_loggerName",
        "messageFunc",
        "severity",
        "LogLevel",
        "logLevel",
        "Func",
        "messageFunc",
        "exception",
        "MapSeverity",
        "logLevel",
        "messageFunc",
        "Environment",
        "NewLine",
        "exception",
        "_writeLog",
        "_loggerName",
        "message",
        "severity",
        "LogLevel",
        "logLevel",
        "logLevel",
        "LogLevel",
        "Fatal",
        "TraceEventTypeValues",
        "Critical",
        "LogLevel",
        "TraceEventTypeValues",
        "LogLevel",
        "Warn",
        "TraceEventTypeValues",
        "Warning",
        "LogLevel",
        "Info",
        "TraceEventTypeValues",
        "Information",
        "TraceEventTypeValues",
        "Verbose",
        "LogProviderBase",
        "Func",
        "SuppressMessage",
        "MessageId",
        "IsLoggerAvailable",
        "InvalidOperationException",
        "_getLoggerByNameDelegate",
        "GetForContextMethodCall",
        "s_providerIsAvailableOverride",
        "s_providerIsAvailableOverride",
        "value",
        "name",
        "SerilogLogger",
        "_getLoggerByNameDelegate",
        "name",
        "Log",
        "ProviderIsAvailableOverride",
        "GetLogManagerType",
        "GetPushProperty",
        "message",
        "key",
        "value",
        "GetPushProperty",
        "key",
        "value",
        "Func",
        "Type",
        "GetType",
        "ndcContextType",
        "GetMethodPortable",
        "Expression",
        "Parameter",
        "Expression",
        "Parameter",
        "Expression",
        "Parameter",
        "Expression",
        "Call",
        "pushPropertyMethod",
        "nameParam",
        "valueParam",
        "destructureObjectParam",
        "Expression",
        "Lambda",
        "Func",
        "pushPropertyMethodCall",
        "nameParam",
        "valueParam",
        "destructureObjectParam",
        "Compile",
        "key",
        "value",
        "pushProperty",
        "key",
        "value",
        "Type",
        "GetType",
        "Func",
        "GetLogManagerType",
        "logManagerType",
        "GetMethodPortable",
        "Expression",
        "Parameter",
        "Expression",
        "Parameter",
        "Expression",
        "Parameter",
        "Expression",
        "Call",
        "method",
        "Expression",
        "propertyNameParam",
        "valueParam",
        "destructureObjectsParam",
        "Expression",
        "Lambda",
        "Func",
        "methodCall",
        "propertyNameParam",
        "valueParam",
        "destructureObjectsParam",
        "Compile",
        "func",
        "name",
        "Func",
        "Action",
        "Action",
        "SuppressMessage",
        "SuppressMessage",
        "SuppressMessage",
        "MessageId",
        "SuppressMessage",
        "MessageId",
        "SuppressMessage",
        "MessageId",
        "Type",
        "GetType",
        "logEventLevelType",
        "InvalidOperationException",
        "DebugLevel",
        "Enum",
        "Parse",
        "logEventLevelType",
        "ErrorLevel",
        "Enum",
        "Parse",
        "logEventLevelType",
        "FatalLevel",
        "Enum",
        "Parse",
        "logEventLevelType",
        "InformationLevel",
        "Enum",
        "Parse",
        "logEventLevelType",
        "VerboseLevel",
        "Enum",
        "Parse",
        "logEventLevelType",
        "WarningLevel",
        "Enum",
        "Parse",
        "logEventLevelType",
        "Type",
        "GetType",
        "loggerType",
        "InvalidOperationException",
        "loggerType",
        "GetMethodPortable",
        "logEventLevelType",
        "Expression",
        "Parameter",
        "Expression",
        "Convert",
        "instanceParam",
        "loggerType",
        "Expression",
        "Parameter",
        "Expression",
        "Convert",
        "levelParam",
        "logEventLevelType",
        "Expression",
        "Call",
        "instanceCast",
        "isEnabledMethodInfo",
        "levelCast",
        "IsEnabled",
        "Expression",
        "Lambda",
        "Func",
        "isEnabledMethodCall",
        "instanceParam",
        "levelParam",
        "Compile",
        "loggerType",
        "GetMethodPortable",
        "logEventLevelType",
        "Expression",
        "Parameter",
        "Expression",
        "Parameter",
        "Expression",
        "Call",
        "instanceCast",
        "writeMethodInfo",
        "levelCast",
        "messageParam",
        "propertyValuesParam",
        "Expression",
        "Lambda",
        "Action",
        "writeMethodExp",
        "instanceParam",
        "levelParam",
        "messageParam",
        "propertyValuesParam",
        "Write",
        "expression",
        "Compile",
        "loggerType",
        "GetMethodPortable",
        "logEventLevelType",
        "Expression",
        "Parameter",
        "writeMethodExp",
        "Expression",
        "Call",
        "instanceCast",
        "writeExceptionMethodInfo",
        "levelCast",
        "exceptionParam",
        "messageParam",
        "propertyValuesParam",
        "WriteException",
        "Expression",
        "Lambda",
        "Action",
        "writeMethodExp",
        "instanceParam",
        "levelParam",
        "exceptionParam",
        "messageParam",
        "propertyValuesParam",
        "Compile",
        "logger",
        "_logger",
        "logger",
        "LogLevel",
        "logLevel",
        "Func",
        "messageFunc",
        "exception",
        "formatParameters",
        "messageFunc",
        "IsEnabled",
        "_logger",
        "logLevel",
        "exception",
        "LogException",
        "logLevel",
        "messageFunc",
        "exception",
        "formatParameters",
        "logLevel",
        "LogLevel",
        "Debug",
        "IsEnabled",
        "_logger",
        "DebugLevel",
        "Write",
        "_logger",
        "DebugLevel",
        "messageFunc",
        "formatParameters",
        "LogLevel",
        "Info",
        "IsEnabled",
        "_logger",
        "InformationLevel",
        "Write",
        "_logger",
        "InformationLevel",
        "messageFunc",
        "formatParameters",
        "LogLevel",
        "Warn",
        "IsEnabled",
        "_logger",
        "WarningLevel",
        "Write",
        "_logger",
        "WarningLevel",
        "messageFunc",
        "formatParameters",
        "LogLevel",
        "IsEnabled",
        "_logger",
        "ErrorLevel",
        "Write",
        "_logger",
        "ErrorLevel",
        "messageFunc",
        "formatParameters",
        "LogLevel",
        "Fatal",
        "IsEnabled",
        "_logger",
        "FatalLevel",
        "Write",
        "_logger",
        "FatalLevel",
        "messageFunc",
        "formatParameters",
        "IsEnabled",
        "_logger",
        "VerboseLevel",
        "Write",
        "_logger",
        "VerboseLevel",
        "messageFunc",
        "formatParameters",
        "LogLevel",
        "logLevel",
        "Func",
        "messageFunc",
        "exception",
        "formatParams",
        "logLevel",
        "LogLevel",
        "Debug",
        "IsEnabled",
        "_logger",
        "DebugLevel",
        "WriteException",
        "_logger",
        "DebugLevel",
        "exception",
        "messageFunc",
        "formatParams",
        "LogLevel",
        "Info",
        "IsEnabled",
        "_logger",
        "InformationLevel",
        "WriteException",
        "_logger",
        "InformationLevel",
        "exception",
        "messageFunc",
        "formatParams",
        "LogLevel",
        "Warn",
        "IsEnabled",
        "_logger",
        "WarningLevel",
        "WriteException",
        "_logger",
        "WarningLevel",
        "exception",
        "messageFunc",
        "formatParams",
        "LogLevel",
        "IsEnabled",
        "_logger",
        "ErrorLevel",
        "WriteException",
        "_logger",
        "ErrorLevel",
        "exception",
        "messageFunc",
        "formatParams",
        "LogLevel",
        "Fatal",
        "IsEnabled",
        "_logger",
        "FatalLevel",
        "WriteException",
        "_logger",
        "FatalLevel",
        "exception",
        "messageFunc",
        "formatParams",
        "IsEnabled",
        "_logger",
        "VerboseLevel",
        "WriteException",
        "_logger",
        "VerboseLevel",
        "exception",
        "messageFunc",
        "formatParams",
        "LogProviderBase",
        "WriteDelegate",
        "severity",
        "logSystem",
        "skipFrames",
        "exception",
        "attributeToException",
        "writeMode",
        "detailsXml",
        "category",
        "caption",
        "description",
        "args",
        "IsLoggerAvailable",
        "InvalidOperationException",
        "_logWriteDelegate",
        "GetLogWriteDelegate",
        "s_providerIsAvailableOverride",
        "s_providerIsAvailableOverride",
        "value",
        "name",
        "LoupeLogger",
        "name",
        "_logWriteDelegate",
        "Log",
        "ProviderIsAvailableOverride",
        "GetLogManagerType",
        "Type",
        "GetType",
        "GetLogManagerType",
        "Type",
        "GetType",
        "Type",
        "GetType",
        "logManagerType",
        "GetMethodPortable",
        "logMessageSeverityType",
        "logWriteModeType",
        "WriteDelegate",
        "method",
        "CreateDelegate",
        "WriteDelegate",
        "callDelegate",
        "category",
        "WriteDelegate",
        "logWriteDelegate",
        "_category",
        "category",
        "_logWriteDelegate",
        "logWriteDelegate",
        "DEBUG",
        "_skipLevel",
        "_skipLevel",
        "LogLevel",
        "logLevel",
        "Func",
        "messageFunc",
        "exception",
        "formatParameters",
        "messageFunc",
        "messageFunc",
        "LogMessageFormatter",
        "SimulateStructuredLogging",
        "messageFunc",
        "formatParameters",
        "_logWriteDelegate",
        "ToLogMessageSeverity",
        "logLevel",
        "LogSystem",
        "_skipLevel",
        "exception",
        "_category",
        "messageFunc",
        "Invoke",
        "LogLevel",
        "logLevel",
        "logLevel",
        "LogLevel",
        "Trace",
        "TraceEventTypeValues",
        "Verbose",
        "LogLevel",
        "Debug",
        "TraceEventTypeValues",
        "Verbose",
        "LogLevel",
        "Info",
        "TraceEventTypeValues",
        "Information",
        "LogLevel",
        "Warn",
        "TraceEventTypeValues",
        "Warning",
        "LogLevel",
        "TraceEventTypeValues",
        "LogLevel",
        "Fatal",
        "TraceEventTypeValues",
        "Critical",
        "ArgumentOutOfRangeException",
        "SuppressMessage",
        "Uri",
        "GetAssemblyPortable",
        "assembly",
        "Type",
        "assembly",
        "GetType",
        "Type",
        "Verbose",
        "Enum",
        "Parse",
        "Type",
        "Information",
        "Enum",
        "Parse",
        "Type",
        "Warning",
        "Enum",
        "Parse",
        "Type",
        "Enum",
        "Parse",
        "Type",
        "Critical",
        "Enum",
        "Parse",
        "Type",
        "Regex",
        "Func",
        "Func",
        "messageBuilder",
        "formatParameters",
        "formatParameters",
        "formatParameters",
        "Length",
        "messageBuilder",
        "messageBuilder",
        "Match",
        "match",
        "Pattern",
        "Matches",
        "targetMessage",
        "TryParse",
        "match",
        "Value",
        "Substring",
        "match",
        "Value",
        "Length",
        "notUsed",
        "targetMessage",
        "ReplaceFirst",
        "targetMessage",
        "match",
        "Value",
        "argumentIndex",
        "Format",
        "CultureInfo",
        "InvariantCulture",
        "targetMessage",
        "formatParameters",
        "FormatException",
        "ex",
        "FormatException",
        "targetMessage",
        "ex",
        "text",
        "search",
        "replace",
        "text",
        "IndexOf",
        "search",
        "StringComparison",
        "Ordinal",
        "pos",
        "text",
        "text",
        "Substring",
        "pos",
        "replace",
        "text",
        "Substring",
        "pos",
        "search",
        "Length",
        "Type",
        "name",
        "LIBLOG_PORTABLE",
        "GetRuntimeMethods",
        "SingleOrDefault",
        "m",
        "Name",
        "name",
        "GetMethod",
        "name",
        "Type",
        "name",
        "Type",
        "types",
        "LIBLOG_PORTABLE",
        "GetRuntimeMethod",
        "name",
        "types",
        "GetMethod",
        "name",
        "types",
        "Type",
        "name",
        "LIBLOG_PORTABLE",
        "GetRuntimeProperty",
        "name",
        "GetProperty",
        "name",
        "FieldInfo",
        "Type",
        "LIBLOG_PORTABLE",
        "GetRuntimeFields",
        "GetFields",
        "Type",
        "LIBLOG_PORTABLE",
        "GetTypeInfo",
        "BaseType",
        "BaseType",
        "LIBLOG_PORTABLE",
        "PropertyInfo",
        "propertyInfo",
        "propertyInfo",
        "GetMethod",
        "PropertyInfo",
        "propertyInfo",
        "propertyInfo",
        "SetMethod",
        "LIBLOG_PORTABLE",
        "MethodInfo",
        "methodInfo",
        "Type",
        "delegateType",
        "Delegate",
        "CreateDelegate",
        "delegateType",
        "methodInfo",
        "Type",
        "LIBLOG_PORTABLE",
        "GetTypeInfo",
        "Assembly",
        "Assembly",
        "Action",
        "onDispose",
        "_onDispose",
        "onDispose",
        "_onDispose",
        "_onDispose"
    ],
    "literals": [
        "\"Microsoft.Design\"",
        "\"CA1020:AvoidNamespacesWithFewTypes\"",
        "\"namespace\"",
        "\"Example.Logging\"",
        "\"Microsoft.Design\"",
        "\"CA1026:DefaultParametersShouldNotBeUsed\"",
        "\"member\"",
        "\"Example.Logging.Logger.#Invoke(Example.Logging.LogLevel,System.Func`1<System.String>,System.Exception,System.Object[])\"",
        "\"logger\"",
        "\"Example_LIBLOG_DISABLE\"",
        "\"Current Log Provider is not set. Call SetCurrentLogProvider \"",
        "\"with a non-null value first.\"",
        "\"Microsoft.Performance\"",
        "\"CA1810:InitializeReferenceTypeStaticFieldsInline\"",
        "\"Microsoft.Naming\"",
        "\"CA2204:Literals should be spelled correctly\"",
        "\"SetCurrentLogProvider\"",
        "\"Microsoft.Naming\"",
        "\"CA2204:Literals should be spelled correctly\"",
        "\"SetCurrentLogProvider\"",
        "\"Microsoft.Globalization\"",
        "\"CA1303:Do not pass literals as localized parameters\"",
        "\"System.Console.WriteLine(System.String,System.Object,System.Object)\"",
        "\"Microsoft.Design\"",
        "\"CA1031:DoNotCatchGeneralExceptionTypes\"",
        "\"Exception occurred resolving a log provider. Logging for this assembly {0} is disabled. {1}\"",
        "\"Failed to generate log message\"",
        "\"Microsoft.Design\"",
        "\"CA1031:DoNotCatchGeneralExceptionTypes\"",
        "\"true\"",
        "\"Microsoft.Naming\"",
        "\"CA2204:Literals should be spelled correctly\"",
        "\"LogManager\"",
        "\"Microsoft.Naming\"",
        "\"CA2204:Literals should be spelled correctly\"",
        "\"NLog\"",
        "\"NLog.LogManager not found\"",
        "\"NLog.NestedDiagnosticsContext, NLog\"",
        "\"Push\"",
        "\"message\"",
        "\"NLog.MappedDiagnosticsContext, NLog\"",
        "\"Set\"",
        "\"Remove\"",
        "\"key\"",
        "\"value\"",
        "\"NLog.LogManager, NLog\"",
        "\"GetLogger\"",
        "\"name\"",
        "\"Microsoft.Maintainability\"",
        "\"CA1502:AvoidExcessiveComplexity\"",
        "\"Microsoft.Maintainability\"",
        "\"CA1502:AvoidExcessiveComplexity\"",
        "\"Microsoft.Naming\"",
        "\"CA2204:Literals should be spelled correctly\"",
        "\"LogManager\"",
        "\"log4net.LogManager not found\"",
        "\"log4net.LogicalThreadContext, log4net\"",
        "\"Stacks\"",
        "\"Item\"",
        "\"Push\"",
        "\"message\"",
        "\"NDC\"",
        "\"log4net.LogicalThreadContext, log4net\"",
        "\"Properties\"",
        "\"Item\"",
        "\"Remove\"",
        "\"key\"",
        "\"value\"",
        "\"log4net.LogManager, log4net\"",
        "\"GetLogger\"",
        "\"name\"",
        "\"Microsoft.Naming\"",
        "\"CA2204:Literals should be spelled correctly\"",
        "\"ILogger\"",
        "\"log4net.Core.Level, log4net\"",
        "\"Type log4net.Core.Level was not found.\"",
        "\"Debug\"",
        "\"Info\"",
        "\"Warn\"",
        "\"Error\"",
        "\"Fatal\"",
        "\"log4net.Core.ILogger, log4net\"",
        "\"Type log4net.Core.ILogger, was not found.\"",
        "\"IsEnabledFor\"",
        "\"Log\"",
        "\"LoggerExecutionWrapper\"",
        "\"logLevel\"",
        "\"Microsoft.Practices.EnterpriseLibrary.Logging.{0}, Microsoft.Practices.EnterpriseLibrary.Logging\"",
        "\"Microsoft.Performance\"",
        "\"CA1810:InitializeReferenceTypeStaticFieldsInline\"",
        "\"LogEntry\"",
        "\"Logger\"",
        "\"Microsoft.Naming\"",
        "\"CA2204:Literals should be spelled correctly\"",
        "\"EnterpriseLibrary\"",
        "\"Microsoft.Practices.EnterpriseLibrary.Logging.Logger not found\"",
        "\"logName\"",
        "\"message\"",
        "\"severity\"",
        "\"Write\"",
        "\"logName\"",
        "\"severity\"",
        "\"***dummy***\"",
        "\"ShouldLog\"",
        "\"Message\"",
        "\"Severity\"",
        "\"TimeStamp\"",
        "\"UtcNow\"",
        "\"Categories\"",
        "\"Add\"",
        "\"Microsoft.Naming\"",
        "\"CA2204:Literals should be spelled correctly\"",
        "\"Serilog\"",
        "\"Serilog.Log not found\"",
        "\"NDC\"",
        "\"Serilog.Context.LogContext, Serilog.FullNetFx\"",
        "\"PushProperty\"",
        "\"name\"",
        "\"value\"",
        "\"destructureObjects\"",
        "\"Serilog.Log, Serilog\"",
        "\"ForContext\"",
        "\"propertyName\"",
        "\"value\"",
        "\"destructureObjects\"",
        "\"Name\"",
        "\"Microsoft.Design\"",
        "\"CA1065:DoNotRaiseExceptionsInUnexpectedLocations\"",
        "\"Microsoft.Performance\"",
        "\"CA1810:InitializeReferenceTypeStaticFieldsInline\"",
        "\"Microsoft.Naming\"",
        "\"CA2204:Literals should be spelled correctly\"",
        "\"ILogger\"",
        "\"Microsoft.Naming\"",
        "\"CA2204:Literals should be spelled correctly\"",
        "\"LogEventLevel\"",
        "\"Microsoft.Naming\"",
        "\"CA2204:Literals should be spelled correctly\"",
        "\"Serilog\"",
        "\"Serilog.Events.LogEventLevel, Serilog\"",
        "\"Type Serilog.Events.LogEventLevel was not found.\"",
        "\"Debug\"",
        "\"Error\"",
        "\"Fatal\"",
        "\"Information\"",
        "\"Verbose\"",
        "\"Warning\"",
        "\"Serilog.ILogger, Serilog\"",
        "\"Type Serilog.ILogger was not found.\"",
        "\"IsEnabled\"",
        "\"Write\"",
        "\"Write\"",
        "\"Gibraltar.Agent.Log (Loupe) not found\"",
        "\"Gibraltar.Agent.Log, Gibraltar.Agent\"",
        "\"Gibraltar.Agent.LogMessageSeverity, Gibraltar.Agent\"",
        "\"Gibraltar.Agent.LogWriteMode, Gibraltar.Agent\"",
        "\"Write\"",
        "\"LibLog\"",
        "\"logLevel\"",
        "\"Microsoft.Performance\"",
        "\"CA1810:InitializeReferenceTypeStaticFieldsInline\"",
        "\"System.Diagnostics.TraceEventType\"",
        "\"Verbose\"",
        "\"Information\"",
        "\"Warning\"",
        "\"Error\"",
        "\"Critical\"",
        "\"{\"",
        "\"}\"",
        "\"The input string '\"",
        "\"' could not be formatted using string.Format\""
    ],
    "variables": [
        "DisableLoggingEnvironmentVariable",
        "NullLogProvider",
        "dynamic",
        "s_currentLogProvider",
        "s_onCurrentLogProviderSet",
        "IsDisabled",
        "OnCurrentLogProviderSet",
        "ILogProvider",
        "CurrentLogProvider",
        "LIBLOG_PUBLIC",
        "stackFrame",
        "ILogProvider",
        "logProvider",
        "LIBLOG_PUBLIC",
        "LIBLOG_PUBLIC",
        "LogProviderResolvers",
        "NoOpLogger",
        "Instance",
        "Logger",
        "_logger",
        "_getIsDisabled",
        "FailedToGenerateLogMessage",
        "Logger",
        "WrappedLogger",
        "envVar",
        "wrappedMessageFunc",
        "_lazyOpenNdcMethod",
        "_lazyOpenMdcMethod",
        "NoopDisposableInstance",
        "_getLoggerByNameDelegate",
        "s_providerIsAvailableOverride",
        "ProviderIsAvailableOverride",
        "Type",
        "ndcContextType",
        "MethodInfo",
        "pushMethod",
        "ParameterExpression",
        "messageParam",
        "MethodCallExpression",
        "pushMethodCall",
        "Type",
        "mdcContextType",
        "MethodInfo",
        "setMethod",
        "MethodInfo",
        "removeMethod",
        "ParameterExpression",
        "keyParam",
        "ParameterExpression",
        "valueParam",
        "MethodCallExpression",
        "setMethodCall",
        "MethodCallExpression",
        "removeMethodCall",
        "remove",
        "Type",
        "logManagerType",
        "MethodInfo",
        "method",
        "ParameterExpression",
        "nameParam",
        "MethodCallExpression",
        "methodCall",
        "dynamic",
        "_logger",
        "_getLoggerByNameDelegate",
        "s_providerIsAvailableOverride",
        "ProviderIsAvailableOverride",
        "Type",
        "logicalThreadContextType",
        "PropertyInfo",
        "stacksProperty",
        "Type",
        "logicalThreadContextStacksType",
        "PropertyInfo",
        "stacksIndexerProperty",
        "Type",
        "stackType",
        "MethodInfo",
        "pushMethod",
        "ParameterExpression",
        "messageParameter",
        "MethodCallExpression",
        "callPushBody",
        "OpenNdc",
        "result",
        "Type",
        "logicalThreadContextType",
        "PropertyInfo",
        "propertiesProperty",
        "Type",
        "logicalThreadContextPropertiesType",
        "PropertyInfo",
        "propertiesIndexerProperty",
        "MethodInfo",
        "removeMethod",
        "ParameterExpression",
        "keyParam",
        "ParameterExpression",
        "valueParam",
        "MemberExpression",
        "propertiesExpression",
        "BinaryExpression",
        "setProperties",
        "MethodCallExpression",
        "removeMethodCall",
        "remove",
        "Type",
        "logManagerType",
        "MethodInfo",
        "method",
        "ParameterExpression",
        "nameParam",
        "MethodCallExpression",
        "methodCall",
        "dynamic",
        "_logger",
        "Type",
        "s_callerStackBoundaryType",
        "CallerStackBoundaryTypeSync",
        "_levelDebug",
        "_levelInfo",
        "_levelWarn",
        "_levelError",
        "_levelFatal",
        "_isEnabledForDelegate",
        "_logDelegate",
        "logEventLevelType",
        "levelFields",
        "loggerType",
        "MethodInfo",
        "isEnabledMethodInfo",
        "ParameterExpression",
        "instanceParam",
        "UnaryExpression",
        "instanceCast",
        "ParameterExpression",
        "callerStackBoundaryDeclaringTypeParam",
        "ParameterExpression",
        "levelParam",
        "ParameterExpression",
        "messageParam",
        "UnaryExpression",
        "levelCast",
        "MethodCallExpression",
        "isEnabledMethodCall",
        "MethodInfo",
        "writeExceptionMethodInfo",
        "ParameterExpression",
        "exceptionParam",
        "writeMethodExp",
        "StackTrace",
        "stack",
        "Type",
        "thisType",
        "i",
        "translatedLevel",
        "level",
        "TypeTemplate",
        "s_providerIsAvailableOverride",
        "Type",
        "LogEntryType",
        "Type",
        "LoggerType",
        "Type",
        "TraceEventTypeType",
        "WriteLogEntry",
        "ShouldLogEntry",
        "ProviderIsAvailableOverride",
        "logNameParameter",
        "messageParameter",
        "severityParameter",
        "MemberInitExpression",
        "memberInit",
        "MethodInfo",
        "writeLogEntryMethod",
        "writeLogEntryExpression",
        "logNameParameter",
        "severityParameter",
        "MemberInitExpression",
        "memberInit",
        "MethodInfo",
        "writeLogEntryMethod",
        "writeLogEntryExpression",
        "entryType",
        "LogEntryType",
        "MemberInitExpression",
        "memberInit",
        "_loggerName",
        "_writeLog",
        "_shouldLog",
        "severity",
        "severity",
        "message",
        "_getLoggerByNameDelegate",
        "s_providerIsAvailableOverride",
        "ProviderIsAvailableOverride",
        "Type",
        "ndcContextType",
        "MethodInfo",
        "pushPropertyMethod",
        "ParameterExpression",
        "nameParam",
        "ParameterExpression",
        "valueParam",
        "ParameterExpression",
        "destructureObjectParam",
        "MethodCallExpression",
        "pushPropertyMethodCall",
        "pushProperty",
        "Type",
        "logManagerType",
        "MethodInfo",
        "method",
        "ParameterExpression",
        "propertyNameParam",
        "ParameterExpression",
        "valueParam",
        "ParameterExpression",
        "destructureObjectsParam",
        "MethodCallExpression",
        "methodCall",
        "func",
        "_logger",
        "DebugLevel",
        "ErrorLevel",
        "FatalLevel",
        "InformationLevel",
        "VerboseLevel",
        "WarningLevel",
        "IsEnabled",
        "Write",
        "WriteException",
        "logEventLevelType",
        "loggerType",
        "MethodInfo",
        "isEnabledMethodInfo",
        "ParameterExpression",
        "instanceParam",
        "UnaryExpression",
        "instanceCast",
        "ParameterExpression",
        "levelParam",
        "UnaryExpression",
        "levelCast",
        "MethodCallExpression",
        "isEnabledMethodCall",
        "MethodInfo",
        "writeMethodInfo",
        "ParameterExpression",
        "messageParam",
        "ParameterExpression",
        "propertyValuesParam",
        "MethodCallExpression",
        "writeMethodExp",
        "expression",
        "MethodInfo",
        "writeExceptionMethodInfo",
        "ParameterExpression",
        "exceptionParam",
        "s_providerIsAvailableOverride",
        "WriteDelegate",
        "_logWriteDelegate",
        "ProviderIsAvailableOverride",
        "Type",
        "logManagerType",
        "Type",
        "logMessageSeverityType",
        "Type",
        "logWriteModeType",
        "MethodInfo",
        "method",
        "callDelegate",
        "LogSystem",
        "_category",
        "WriteDelegate",
        "_logWriteDelegate",
        "_skipLevel",
        "Type",
        "Type",
        "Verbose",
        "Information",
        "Warning",
        "Critical",
        "assembly",
        "Regex",
        "Pattern",
        "targetMessage",
        "argumentIndex",
        "notUsed",
        "pos",
        "Action",
        "_onDispose"
    ],
    "comments": [
        "===============================================================================",
        "LibLog",
        "",
        "https://github.com/damianh/LibLog",
        "===============================================================================",
        "Copyright Â© 2011-2015 Damian Hickey.  All rights reserved.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a copy",
        "of this software and associated documentation files (the \"Software\"), to deal",
        "in the Software without restriction, including without limitation the rights",
        "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
        "copies of the Software, and to permit persons to whom the Software is",
        "furnished to do so, subject to the following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included in",
        "all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
        "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
        "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
        "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
        "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
        "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
        "SOFTWARE.",
        "===============================================================================",
        "ReSharper disable PossibleNullReferenceException",
        "Define LIBLOG_PORTABLE conditional compilation symbol for PCL compatibility",
        "",
        "Define LIBLOG_PUBLIC to enable ability to GET a logger (LogProvider.For<>() etc) from outside this library. NOTE:",
        "this can have unintended consequences of consumers of your library using your library to resolve a logger. If the",
        "reason is because you want to open this functionality to other projects within your solution,",
        "consider [InternalsVisibleTo] instead.",
        "",
        "Define LIBLOG_PROVIDERS_ONLY if your library provides its own logging API and you just want to use the",
        "LibLog providers internally to provide built in support for popular logging frameworks.",
        "If you copied this file manually, you need to change all \"YourRootNameSpace\" so not to clash with other libraries",
        "that use LibLog",
        "Simple interface that represent a logger.",
        "</summary>",
        "Log a message the specified log level.",
        "</summary>",
        "<param name=\"logLevel\">The log level.</param>",
        "<param name=\"messageFunc\">The message function.</param>",
        "<param name=\"exception\">An optional exception.</param>",
        "<param name=\"formatParameters\">Optional format parameters for the message generated by the messagefunc. </param>",
        "<returns>true if the message was logged. Otherwise false.</returns>",
        "<remarks>",
        "Note to implementers: the message func should not be called if the loglevel is not enabled",
        "so as not to incur performance penalties.",
        "",
        "To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.",
        "</remarks>",
        "The log level.",
        "</summary>",
        "ReSharper disable once UnusedParameter.Local",
        "Avoid the closure allocation, see https://gist.github.com/AArnott/d285feef75c18f6ecd2b",
        "Represents a way to get a <see cref=\"ILog\"/>",
        "</summary>",
        "Gets the specified named logger.",
        "</summary>",
        "<param name=\"name\">Name of the logger.</param>",
        "<returns>The logger reference.</returns>",
        "Opens a nested diagnostics context. Not supported in EntLib logging.",
        "</summary>",
        "<param name=\"message\">The message to add to the diagnostics context.</param>",
        "<returns>A disposable that when disposed removes the message from the context.</returns>",
        "Opens a mapped diagnostics context. Not supported in EntLib logging.",
        "</summary>",
        "<param name=\"key\">A key.</param>",
        "<param name=\"value\">A value.</param>",
        "<returns>A disposable that when disposed removes the map from the context.</returns>",
        "Provides a mechanism to create instances of <see cref=\"ILog\" /> objects.",
        "</summary>",
        "The disable logging environment variable. If the environment variable is set to 'true', then logging",
        "will be disabled.",
        "</summary>",
        "Sets the current log provider.",
        "</summary>",
        "<param name=\"logProvider\">The log provider.</param>",
        "Gets or sets a value indicating whether this is logging is disabled.",
        "</summary>",
        "<value>",
        "<c>true</c> if logging is disabled; otherwise, <c>false</c>.",
        "</value>",
        "Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is",
        "important that hook into this if you are using child libraries (especially ilmerged ones) that are using",
        "LibLog (or other logging abstraction) so you adapt and delegate to them.",
        "<see cref=\"SetCurrentLogProvider\"/>",
        "</summary>",
        "Gets a logger for the specified type.",
        "</summary>",
        "<typeparam name=\"T\">The type whose name will be used for the logger.</typeparam>",
        "<returns>An instance of <see cref=\"ILog\"/></returns>",
        "Gets a logger for the current class.",
        "</summary>",
        "<returns>An instance of <see cref=\"ILog\"/></returns>",
        "Gets a logger for the specified type.",
        "</summary>",
        "<param name=\"type\">The type whose name will be used for the logger.</param>",
        "<returns>An instance of <see cref=\"ILog\"/></returns>",
        "Gets a logger with the specified name.",
        "</summary>",
        "<param name=\"name\">The name.</param>",
        "<returns>An instance of <see cref=\"ILog\"/></returns>",
        "Opens a nested diagnostics context.",
        "</summary>",
        "<param name=\"message\">A message.</param>",
        "<returns>An <see cref=\"IDisposable\"/> that closes context when disposed.</returns>",
        "Opens a mapped diagnostics context.",
        "</summary>",
        "<param name=\"key\">A key.</param>",
        "<param name=\"value\">A value.</param>",
        "<returns>An <see cref=\"IDisposable\"/> that closes context when disposed.</returns>",
        "message => LogicalThreadContext.Stacks.Item[\"NDC\"].Push(message);",
        "(key, value) => LogicalThreadContext.Properties.Item[key] = value;",
        "key => LogicalThreadContext.Properties.Remove(key);",
        "Func<object, object, bool> isEnabledFor = (logger, level) => { return ((log4net.Core.ILogger)logger).IsEnabled(level); }",
        "Action<object, object, string, Exception> Log =",
        "(logger, callerStackBoundaryDeclaringType, level, message, exception) => { ((ILogger)logger).Write(callerStackBoundaryDeclaringType, level, message, exception); }",
        "determine correct caller - this might change due to jit optimizations with method inlining",
        "new LogEntry(...)",
        "Logger.Write(new LogEntry(....));",
        "new LogEntry(...)",
        "Logger.Write(new LogEntry(....));",
        "Func<object, object, bool> isEnabled = (logger, level) => { return ((SeriLog.ILogger)logger).IsEnabled(level); }",
        "Action<object, object, string> Write =",
        "(logger, level, message, params) => { ((SeriLog.ILoggerILogger)logger).Write(level, message, params); }",
        "Action<object, object, string, Exception> WriteException =",
        "(logger, level, exception, message) => { ((ILogger)logger).Write(level, exception, message, new object[]); }",
        "The form of the Loupe Log.Write method we're using",
        "</summary>",
        "Gets or sets a value indicating whether [provider is available override]. Used in tests.",
        "</summary>",
        "<value>",
        "<c>true</c> if [provider is available override]; otherwise, <c>false</c>.",
        "</value>",
        "nothing to log..",
        "This is to get to the System.dll assembly in a PCL compatible way.",
        "Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:",
        "For example: Log(\"Log message to {user}\", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually",
        "used. So, this class simulates that. it will replace any text in {curly braces} with an index number.",
        "",
        "\"Log {message} to {user}\" would turn into => \"Log {0} to {1}\". Then the format parameters are handled using regular .net string.Format.",
        "</summary>",
        "<param name=\"messageBuilder\">The message builder.</param>",
        "<param name=\"formatParameters\">The format parameters.</param>",
        "<returns></returns>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "Log",
        "IsDebugEnabled",
        "IsErrorEnabled",
        "IsFatalEnabled",
        "IsInfoEnabled",
        "IsTraceEnabled",
        "IsWarnEnabled",
        "Debug",
        "Debug",
        "DebugFormat",
        "DebugException",
        "DebugException",
        "ErrorFormat",
        "ErrorException",
        "Fatal",
        "Fatal",
        "FatalFormat",
        "FatalException",
        "Info",
        "Info",
        "InfoFormat",
        "InfoException",
        "Trace",
        "Trace",
        "TraceFormat",
        "TraceException",
        "Warn",
        "Warn",
        "WarnFormat",
        "WarnException",
        "GuardAgainstNullLogger",
        "LogFormat",
        "AsFunc",
        "T",
        "Return",
        "Logger",
        "GetLogger",
        "OpenNestedContext",
        "OpenMappedContext",
        "LogProvider",
        "SetCurrentLogProvider",
        "ILog",
        "For",
        "ILog",
        "GetCurrentClassLogger",
        "ILog",
        "GetLogger",
        "ILog",
        "GetLogger",
        "OpenNestedContext",
        "OpenMappedContext",
        "RaiseOnCurrentLogProviderSet",
        "ILogProvider",
        "ResolveLogProvider",
        "Log",
        "LoggerExecutionWrapper",
        "Log",
        "LogProviderBase",
        "Logger",
        "GetLogger",
        "OpenNestedContext",
        "OpenMappedContext",
        "OpenNdc",
        "GetOpenNdcMethod",
        "OpenMdc",
        "GetOpenMdcMethod",
        "NLogLogProvider",
        "Logger",
        "GetLogger",
        "IsLoggerAvailable",
        "OpenNdc",
        "GetOpenNdcMethod",
        "OpenMdc",
        "GetOpenMdcMethod",
        "Type",
        "GetLogManagerType",
        "GetGetLoggerMethodCall",
        "NLogLogger",
        "Log",
        "LogException",
        "IsLogLevelEnable",
        "Log4NetLogProvider",
        "Logger",
        "GetLogger",
        "IsLoggerAvailable",
        "OpenNdc",
        "GetOpenNdcMethod",
        "OpenMdc",
        "GetOpenMdcMethod",
        "Type",
        "GetLogManagerType",
        "GetGetLoggerMethodCall",
        "Log4NetLogger",
        "Log",
        "IsInTypeHierarchy",
        "IsLogLevelEnable",
        "TranslateLevel",
        "EntLibLogProvider",
        "EntLibLogProvider",
        "Logger",
        "GetLogger",
        "IsLoggerAvailable",
        "GetWriteLogEntry",
        "GetShouldLogEntry",
        "MemberInitExpression",
        "GetWriteLogExpression",
        "EntLibLogger",
        "Log",
        "LogException",
        "MapSeverity",
        "SerilogLogProvider",
        "Logger",
        "GetLogger",
        "IsLoggerAvailable",
        "OpenNdc",
        "GetOpenNdcMethod",
        "OpenMdc",
        "GetOpenMdcMethod",
        "GetPushProperty",
        "Type",
        "GetLogManagerType",
        "GetForContextMethodCall",
        "SerilogLogger",
        "SerilogLogger",
        "Log",
        "LogException",
        "LoupeLogProvider",
        "Logger",
        "GetLogger",
        "IsLoggerAvailable",
        "Type",
        "GetLogManagerType",
        "WriteDelegate",
        "GetLogWriteDelegate",
        "LoupeLogger",
        "Log",
        "ToLogMessageSeverity",
        "TraceEventTypeValues",
        "SimulateStructuredLogging",
        "ReplaceFirst",
        "MethodInfo",
        "GetMethodPortable",
        "MethodInfo",
        "GetMethodPortable",
        "PropertyInfo",
        "GetPropertyPortable",
        "GetFieldsPortable",
        "Type",
        "GetBaseTypePortable",
        "MethodInfo",
        "GetGetMethod",
        "MethodInfo",
        "GetSetMethod",
        "CreateDelegate",
        "Assembly",
        "GetAssemblyPortable",
        "DisposableAction",
        "Dispose"
    ],
    "classes": [
        "LogExtensions",
        "NoOpLogger",
        "LoggerExecutionWrapper",
        "LogProviderBase",
        "NLogLogProvider",
        "NLogLogger",
        "Log4NetLogProvider",
        "Log4NetLogger",
        "EntLibLogProvider",
        "EntLibLogger",
        "SerilogLogProvider",
        "SerilogLogger",
        "LoupeLogProvider",
        "LoupeLogger",
        "TraceEventTypeValues",
        "LogMessageFormatter",
        "TypeExtensions",
        "DisposableAction"
    ]
}