{
    "identifiers": [
        "mul",
        "numpy",
        "np",
        "lib",
        "dtype",
        "N",
        "C",
        "K",
        "D",
        "H",
        "W",
        "T",
        "R",
        "S",
        "pad_d",
        "pad_h",
        "pad_w",
        "str_d",
        "str_h",
        "str_w",
        "D",
        "T",
        "str_d",
        "pad_d",
        "H",
        "R",
        "str_h",
        "pad_h",
        "W",
        "S",
        "str_w",
        "pad_w",
        "C",
        "K",
        "M",
        "P",
        "Q",
        "N",
        "C",
        "K",
        "T",
        "R",
        "S",
        "D",
        "H",
        "W",
        "M",
        "P",
        "Q",
        "pad_d",
        "pad_h",
        "pad_w",
        "str_d",
        "str_h",
        "str_w",
        "C",
        "D",
        "H",
        "W",
        "N",
        "K",
        "T",
        "R",
        "S",
        "N",
        "C",
        "M",
        "P",
        "Q",
        "K",
        "C",
        "D",
        "H",
        "W",
        "N",
        "K",
        "T",
        "R",
        "S",
        "N",
        "C",
        "M",
        "P",
        "Q",
        "K",
        "reduce",
        "mul",
        "dimI",
        "reduce",
        "mul",
        "dimF",
        "reduce",
        "mul",
        "dimO",
        "reduce",
        "mul",
        "MPQ",
        "C",
        "q",
        "S",
        "X",
        "padding",
        "strides",
        "q",
        "padding",
        "s",
        "S",
        "qs",
        "s",
        "strides",
        "x",
        "x",
        "X",
        "sliceF",
        "append",
        "s",
        "sliceI",
        "append",
        "x",
        "sliceF",
        "sliceI",
        "layer",
        "I",
        "F",
        "O",
        "alpha",
        "relu",
        "layer",
        "sizeI",
        "I",
        "size",
        "layer",
        "sizeF",
        "F",
        "size",
        "layer",
        "sizeO",
        "O",
        "size",
        "layer",
        "MPQ",
        "layer",
        "dimI",
        "layer",
        "dimF",
        "layer",
        "dimO",
        "N_F",
        "N",
        "K_O",
        "K",
        "C_O",
        "C",
        "layer",
        "padding",
        "layer",
        "strides",
        "I",
        "get",
        "reshape",
        "layer",
        "dimI",
        "F",
        "get",
        "reshape",
        "layer",
        "dimF",
        "O",
        "get",
        "reshape",
        "layer",
        "dimO",
        "m",
        "M",
        "layer",
        "fprop_slice",
        "m",
        "T",
        "D",
        "pad_d",
        "str_d",
        "p",
        "P",
        "layer",
        "fprop_slice",
        "p",
        "R",
        "H",
        "pad_h",
        "str_h",
        "q",
        "Q",
        "layer",
        "fprop_slice",
        "q",
        "S",
        "W",
        "pad_w",
        "str_w",
        "np",
        "array",
        "t",
        "R",
        "S",
        "r",
        "S",
        "s",
        "t",
        "sliceT",
        "r",
        "sliceR",
        "s",
        "sliceS",
        "dtype",
        "np",
        "intp",
        "np",
        "array",
        "d",
        "H",
        "W",
        "y",
        "W",
        "w",
        "d",
        "sliceD",
        "y",
        "sliceH",
        "w",
        "sliceW",
        "dtype",
        "np",
        "intp",
        "array_F",
        "reshape",
        "K",
        "N",
        "sliceTRS",
        "reshape",
        "K",
        "array_I",
        "reshape",
        "C",
        "N",
        "sliceDHW",
        "reshape",
        "C",
        "alpha",
        "np",
        "dot",
        "slicedI",
        "slicedF",
        "T"
    ],
    "literals": [],
    "variables": [
        "M",
        "P",
        "Q",
        "C",
        "K",
        "M",
        "P",
        "Q",
        "NCK",
        "TRS",
        "DHW",
        "MPQ",
        "padding",
        "strides",
        "dimI",
        "dimF",
        "dimO",
        "dimI2",
        "dimF2",
        "dimO2",
        "sizeI",
        "sizeF",
        "sizeO",
        "nOut",
        "qs",
        "sliceF",
        "sliceI",
        "x",
        "M",
        "P",
        "Q",
        "C",
        "D",
        "H",
        "W",
        "N",
        "K",
        "T",
        "R",
        "S",
        "N_F",
        "C_O",
        "M",
        "P",
        "Q",
        "K_O",
        "pad_d",
        "pad_h",
        "pad_w",
        "str_d",
        "str_h",
        "str_w",
        "array_I",
        "array_F",
        "array_O",
        "sliceT",
        "sliceD",
        "sliceR",
        "sliceH",
        "sliceS",
        "sliceW",
        "sliceTRS",
        "sliceDHW",
        "slicedF",
        "slicedI",
        "array_O",
        "m",
        "p",
        "q"
    ],
    "comments": [
        "Compute the output spatial dimensions"
    ],
    "docstrings": [
        "\"\"\"\n    ConvLayer parameter object.\n    This then is passed as an argument to all the convolution operations.\n\n    N: Number of images in mini-batch\n    C: Number of input feature maps\n    K: Number of output feature maps\n\n    D: Depth  of input image\n    H: Height of input image\n    W: Width  of input image\n\n    T: Depth  of filter kernel\n    R: Height of filter kernel\n    S: Width  of filter kernel\n\n    padding: amount of zero-padding around the given edge\n    strides: factor to step the filters by in a given direction\n    \"\"\"",
        "\"\"\"\n    Forward propagate the inputs of a convolutional network layer to\n    produce output\n\n    Arguments:\n        layer: the conv layer as a parameter object\n        I (CPUTensor): inputs\n        F (CPUTensor): the weights (filters)\n        O (CPUTensor): outputs\n        alpha (float): linear scaling\n        relu (boolean): apply ReLu or not before output\n                        (currently not implemented)\n    \"\"\""
    ],
    "functions": [
        "fprop_slice",
        "fprop_conv_grad"
    ],
    "classes": [
        "ConvLayerGrad"
    ]
}