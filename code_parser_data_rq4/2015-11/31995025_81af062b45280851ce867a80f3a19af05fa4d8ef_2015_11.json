{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "unicode_literals",
        "ripozo",
        "resources",
        "restmixins",
        "CRUDL",
        "ripozo",
        "resources",
        "ResourceMetaClass",
        "django_ripozo",
        "manager",
        "DjangoManager",
        "model",
        "model",
        "_meta",
        "pk",
        "name",
        "model",
        "model",
        "_meta",
        "get_fields",
        "model",
        "NotImplementedError",
        "model",
        "resource_bases",
        "CRUDL",
        "relationships",
        "links",
        "preprocessors",
        "postprocessors",
        "fields",
        "paginate_by",
        "auto_relationships",
        "pks",
        "create_fields",
        "update_fields",
        "list_fields",
        "relationships",
        "auto_relationships",
        "relationships",
        "_get_relationships",
        "model",
        "links",
        "preprocessors",
        "postprocessors",
        "pks",
        "_get_pks",
        "model",
        "fields",
        "_get_fields_for_model",
        "model",
        "list_fields",
        "fields",
        "create_fields",
        "x",
        "x",
        "fields",
        "x",
        "pks",
        "update_fields",
        "x",
        "x",
        "fields",
        "x",
        "pks",
        "paginate_by",
        "paginate_by",
        "fields",
        "fields",
        "model",
        "model",
        "list_fields",
        "list_fields",
        "create_fields",
        "create_fields",
        "update_fields",
        "update_fields",
        "model",
        "DjangoManager",
        "manager_cls_attrs",
        "manager_class",
        "preprocessors",
        "preprocessors",
        "postprocessors",
        "postprocessors",
        "_relationships",
        "relationships",
        "_links",
        "links",
        "pks",
        "pks",
        "manager",
        "manager",
        "ResourceMetaClass",
        "model",
        "resource_bases",
        "resource_cls_attrs",
        "res_class"
    ],
    "literals": [],
    "variables": [
        "relationships",
        "links",
        "preprocessors",
        "postprocessors",
        "pks",
        "fields",
        "list_fields",
        "create_fields",
        "update_fields",
        "manager_cls_attrs",
        "manager_class",
        "manager",
        "resource_cls_attrs",
        "res_class"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n        Creates a ResourceBase subclass by inspecting a SQLAlchemy\n        Model. This is somewhat more restrictive than explicitly\n        creating managers and resources.  However, if you only need\n        any of the basic CRUD+L operations,\n\n        :param sqlalchemy.Model model:  This is the model that\n            will be inspected to create a Resource and Manager from.\n            By default, all of it's fields will be exposed, although\n            this can be overridden using the fields attribute.\n        :param tuple resource_bases: A tuple of ResourceBase subclasses.\n            Defaults to the restmixins.CRUDL class only.  However if you only\n            wanted Update and Delete you could pass in\n            ```(restmixins.Update,  restmixins.Delete)``` which\n            would cause the resource to inherit from those two.\n            Additionally, you could create your own mixins and pass them in\n            as the resource_bases\n        :param tuple relationships: extra relationships to pass\n            into the ResourceBase constructor.  If auto_relationships\n            is set to True, then they will be appended to these relationships.\n        :param tuple links: Extra links to pass into the ResourceBase as\n            the class _links attribute.  Defaults to an empty tuple.\n        :param tuple preprocessors: Preprocessors for the resource class attribute.\n        :param tuple postprocessors: Postprocessors for the resource class attribute.\n        :param tuple fields: The fields to expose on the api.  Defaults to\n            all of the fields on the model.\n        :param bool auto_relationships: If True, then the SQLAlchemy Model\n            will be inspected for relationships and they will be automatically\n            appended to the relationships on the resource class attribute.\n        :param list create_fields: A list of the fields that are valid when\n            creating a resource.  By default this will be the fields without\n            any primary keys included\n        :param list update_fields: A list of the fields that are valid when\n            updating a resource.  By default this will be the fields without\n            any primary keys included\n        :param list list_fields: A list of the fields that will be returned\n            when the list endpoint is requested.  Defaults to the fields\n            attribute.\n        :return: A ResourceBase subclass and DjangoManager subclass\n        :rtype: ResourceMetaClass\n        \"\"\""
    ],
    "functions": [
        "_get_pks",
        "_get_fields_for_model",
        "_get_relationships",
        "create_resource"
    ],
    "classes": []
}